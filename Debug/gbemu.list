
gbemu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012464  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000970  08012664  08012664  00022664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fd4  08012fd4  00030a40  2**0
                  CONTENTS
  4 .ARM          00000008  08012fd4  08012fd4  00022fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fdc  08012fdc  00030a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fdc  08012fdc  00022fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fe0  08012fe0  00022fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a40  20000000  08012fe4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009224  20000a40  08013a24  00030a40  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20009c64  08013a24  00039c64  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030a40  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b2ce  00000000  00000000  00030a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008525  00000000  00000000  0006bd3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002248  00000000  00000000  00074268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f28  00000000  00000000  000764b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000385de  00000000  00000000  000783d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f7fb  00000000  00000000  000b09b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d506  00000000  00000000  000e01b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020d6b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009598  00000000  00000000  0020d70c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000a40 	.word	0x20000a40
 800021c:	00000000 	.word	0x00000000
 8000220:	0801264c 	.word	0x0801264c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000a44 	.word	0x20000a44
 800023c:	0801264c 	.word	0x0801264c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <bus_read>:
// 0xFE00 - 0xFE9F : Object Attribute Memory
// 0xFEA0 - 0xFEFF : Reserved - Unusable
// 0xFF00 - 0xFF7F : I/O Registers
// 0xFF80 - 0xFFFE : Zero Page

u8 bus_read(u16 address) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
    if (address < 0x8000) {
 80005e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db05      	blt.n	80005f6 <bus_read+0x1e>
        //ROM Data
        return cart_read(address);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fb65 	bl	8000cbc <cart_read>
 80005f2:	4603      	mov	r3, r0
 80005f4:	e054      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xA000) {
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80005fc:	d205      	bcs.n	800060a <bus_read+0x32>
        //Char/Map Data
        return ppu_vram_read(address);
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fe49 	bl	8004298 <ppu_vram_read>
 8000606:	4603      	mov	r3, r0
 8000608:	e04a      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xC000) {
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000610:	d205      	bcs.n	800061e <bus_read+0x46>
        //Cartridge RAM
        return cart_read(address);
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fb51 	bl	8000cbc <cart_read>
 800061a:	4603      	mov	r3, r0
 800061c:	e040      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xE000) {
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8000624:	d205      	bcs.n	8000632 <bus_read+0x5a>
        //WRAM (Working RAM)
        return wram_read(address);
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	4618      	mov	r0, r3
 800062a:	f004 fe8d 	bl	8005348 <wram_read>
 800062e:	4603      	mov	r3, r0
 8000630:	e036      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xFE00) {
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 8000638:	d201      	bcs.n	800063e <bus_read+0x66>
        //reserved echo ram...
        return 0;
 800063a:	2300      	movs	r3, #0
 800063c:	e030      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xFEA0) {
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	f64f 629f 	movw	r2, #65183	; 0xfe9f
 8000644:	4293      	cmp	r3, r2
 8000646:	d80c      	bhi.n	8000662 <bus_read+0x8a>
        //OAM
        if (dma_transferring()) {
 8000648:	f002 fb8e 	bl	8002d68 <dma_transferring>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <bus_read+0x7e>
            return 0xFF;
 8000652:	23ff      	movs	r3, #255	; 0xff
 8000654:	e024      	b.n	80006a0 <bus_read+0xc8>
        }

        return ppu_oam_read(address);
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	4618      	mov	r0, r3
 800065a:	f003 fde9 	bl	8004230 <ppu_oam_read>
 800065e:	4603      	mov	r3, r0
 8000660:	e01e      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xFF00) {
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8000668:	d201      	bcs.n	800066e <bus_read+0x96>
        //reserved unusable...
        return 0;
 800066a:	2300      	movs	r3, #0
 800066c:	e018      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xFF80) {
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8000674:	4293      	cmp	r3, r2
 8000676:	d805      	bhi.n	8000684 <bus_read+0xac>
        //IO Registers...
        return io_read(address);
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	4618      	mov	r0, r3
 800067c:	f002 fd80 	bl	8003180 <io_read>
 8000680:	4603      	mov	r3, r0
 8000682:	e00d      	b.n	80006a0 <bus_read+0xc8>
    } else if (address == 0xFFFF) {
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800068a:	4293      	cmp	r3, r2
 800068c:	d103      	bne.n	8000696 <bus_read+0xbe>
        //CPU ENABLE REGISTER...
        return cpu_get_ie_register();
 800068e:	f000 fce5 	bl	800105c <cpu_get_ie_register>
 8000692:	4603      	mov	r3, r0
 8000694:	e004      	b.n	80006a0 <bus_read+0xc8>
    }

    //NO_IMPL
    return hram_read(address);
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	4618      	mov	r0, r3
 800069a:	f004 fe91 	bl	80053c0 <hram_read>
 800069e:	4603      	mov	r3, r0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <bus_write>:

void bus_write(u16 address, u8 value) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	460a      	mov	r2, r1
 80006b2:	80fb      	strh	r3, [r7, #6]
 80006b4:	4613      	mov	r3, r2
 80006b6:	717b      	strb	r3, [r7, #5]
    if (address < 0x8000) {
 80006b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db06      	blt.n	80006ce <bus_write+0x26>
        //ROM Data
        cart_write(address, value);
 80006c0:	797a      	ldrb	r2, [r7, #5]
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fb3e 	bl	8000d48 <cart_write>
 80006cc:	e057      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xA000) {
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80006d4:	d206      	bcs.n	80006e4 <bus_write+0x3c>
        //Char/Map Data
        ppu_vram_write(address, value);
 80006d6:	797a      	ldrb	r2, [r7, #5]
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fdc3 	bl	8004268 <ppu_vram_write>
 80006e2:	e04c      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xC000) {
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80006ea:	d206      	bcs.n	80006fa <bus_write+0x52>
        //EXT-RAM
        cart_write(address, value);
 80006ec:	797a      	ldrb	r2, [r7, #5]
 80006ee:	88fb      	ldrh	r3, [r7, #6]
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fb28 	bl	8000d48 <cart_write>
 80006f8:	e041      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xE000) {
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8000700:	d206      	bcs.n	8000710 <bus_write+0x68>
        //WRAM
        wram_write(address, value);
 8000702:	797a      	ldrb	r2, [r7, #5]
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f004 fe41 	bl	8005390 <wram_write>
 800070e:	e036      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xFE00) {
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 8000716:	d332      	bcc.n	800077e <bus_write+0xd6>
        //reserved echo ram
    } else if (address < 0xFEA0) {
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	f64f 629f 	movw	r2, #65183	; 0xfe9f
 800071e:	4293      	cmp	r3, r2
 8000720:	d80b      	bhi.n	800073a <bus_write+0x92>
        //OAM
        if (dma_transferring()) {
 8000722:	f002 fb21 	bl	8002d68 <dma_transferring>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d127      	bne.n	800077c <bus_write+0xd4>
            return;
        }
        
        ppu_oam_write(address, value);
 800072c:	797a      	ldrb	r2, [r7, #5]
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f003 fd5c 	bl	80041f0 <ppu_oam_write>
 8000738:	e021      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xFF00) {
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8000740:	d31d      	bcc.n	800077e <bus_write+0xd6>
        //unusable reserved
    } else if (address < 0xFF80) {
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8000748:	4293      	cmp	r3, r2
 800074a:	d806      	bhi.n	800075a <bus_write+0xb2>
        //IO Registers...
        io_write(address, value);
 800074c:	797a      	ldrb	r2, [r7, #5]
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fd74 	bl	8003240 <io_write>
 8000758:	e011      	b.n	800077e <bus_write+0xd6>
    } else if (address == 0xFFFF) {
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000760:	4293      	cmp	r3, r2
 8000762:	d104      	bne.n	800076e <bus_write+0xc6>
        //CPU SET ENABLE REGISTER
        
        cpu_set_ie_register(value);
 8000764:	797b      	ldrb	r3, [r7, #5]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fc84 	bl	8001074 <cpu_set_ie_register>
 800076c:	e007      	b.n	800077e <bus_write+0xd6>
    } else {
        hram_write(address, value);
 800076e:	797a      	ldrb	r2, [r7, #5]
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	4611      	mov	r1, r2
 8000774:	4618      	mov	r0, r3
 8000776:	f004 fe39 	bl	80053ec <hram_write>
 800077a:	e000      	b.n	800077e <bus_write+0xd6>
            return;
 800077c:	bf00      	nop
    }
}
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <bus_write16>:
    u16 hi = bus_read(address + 1);

    return lo | (hi << 8);
}

void bus_write16(u16 address, u16 value) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	80fb      	strh	r3, [r7, #6]
 8000790:	4613      	mov	r3, r2
 8000792:	80bb      	strh	r3, [r7, #4]
    bus_write(address + 1, (value >> 8) & 0xFF);
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	3301      	adds	r3, #1
 8000798:	b29a      	uxth	r2, r3
 800079a:	88bb      	ldrh	r3, [r7, #4]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	b29b      	uxth	r3, r3
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	4619      	mov	r1, r3
 80007a4:	4610      	mov	r0, r2
 80007a6:	f7ff ff7f 	bl	80006a8 <bus_write>
    bus_write(address, value & 0xFF);
 80007aa:	88bb      	ldrh	r3, [r7, #4]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff78 	bl	80006a8 <bus_write>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <cart_need_save>:
    bool need_save; //should save battery backup.
} cart_context;

static cart_context ctx;

bool cart_need_save() {
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
    return ctx.need_save;
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <cart_need_save+0x14>)
 80007c6:	f893 345d 	ldrb.w	r3, [r3, #1117]	; 0x45d
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	20000a5c 	.word	0x20000a5c

080007d8 <cart_mbc1>:

bool cart_mbc1() {
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
    return BETWEEN(ctx.header->type, 1, 3);
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <cart_mbc1+0x38>)
 80007de:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80007e2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d008      	beq.n	80007fc <cart_mbc1+0x24>
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <cart_mbc1+0x38>)
 80007ec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80007f0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d801      	bhi.n	80007fc <cart_mbc1+0x24>
 80007f8:	2301      	movs	r3, #1
 80007fa:	e000      	b.n	80007fe <cart_mbc1+0x26>
 80007fc:	2300      	movs	r3, #0
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	b2db      	uxtb	r3, r3
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000a5c 	.word	0x20000a5c

08000814 <cart_battery>:

bool cart_battery() {
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
    //mbc1 only for now...
    return ctx.header->type == 3;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <cart_battery+0x24>)
 800081a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800081e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000822:	2b03      	cmp	r3, #3
 8000824:	bf0c      	ite	eq
 8000826:	2301      	moveq	r3, #1
 8000828:	2300      	movne	r3, #0
 800082a:	b2db      	uxtb	r3, r3
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000a5c 	.word	0x20000a5c

0800083c <cart_lic_name>:
    [0x97] = "Kaneko",
    [0x99] = "Pack in soft",
    [0xA4] = "Konami (Yu-Gi-Oh!)"
};

const char *cart_lic_name() {
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
    if (ctx.header->new_lic_code <= 0xA4) {
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <cart_lic_name+0x34>)
 8000842:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000846:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800084a:	2ba4      	cmp	r3, #164	; 0xa4
 800084c:	d809      	bhi.n	8000862 <cart_lic_name+0x26>
        return LIC_CODE[ctx.header->lic_code];
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <cart_lic_name+0x34>)
 8000850:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000854:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8000858:	461a      	mov	r2, r3
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <cart_lic_name+0x38>)
 800085c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000860:	e000      	b.n	8000864 <cart_lic_name+0x28>
    }

    return "UNKNOWN";
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <cart_lic_name+0x3c>)
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000a5c 	.word	0x20000a5c
 8000874:	2000008c 	.word	0x2000008c
 8000878:	08012ae0 	.word	0x08012ae0

0800087c <cart_type_name>:

const char *cart_type_name() {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
    if (ctx.header->type <= 0x22) {
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <cart_type_name+0x34>)
 8000882:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000886:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800088a:	2b22      	cmp	r3, #34	; 0x22
 800088c:	d809      	bhi.n	80008a2 <cart_type_name+0x26>
        return ROM_TYPES[ctx.header->type];
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <cart_type_name+0x34>)
 8000890:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000894:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000898:	461a      	mov	r2, r3
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <cart_type_name+0x38>)
 800089c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a0:	e000      	b.n	80008a4 <cart_type_name+0x28>
    }

    return "UNKNOWN";
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <cart_type_name+0x3c>)
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000a5c 	.word	0x20000a5c
 80008b4:	20000000 	.word	0x20000000
 80008b8:	08012ae0 	.word	0x08012ae0

080008bc <cart_setup_banking>:

void cart_setup_banking() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
    for (int i=0; i<16; i++) {
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	e04c      	b.n	8000962 <cart_setup_banking+0xa6>
        ctx.ram_banks[i] = 0;
 80008c8:	4a30      	ldr	r2, [pc, #192]	; (800098c <cart_setup_banking+0xd0>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f503 7383 	add.w	r3, r3, #262	; 0x106
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]

        if ((ctx.header->ram_size == 2 && i == 0) ||
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <cart_setup_banking+0xd0>)
 80008da:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80008de:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d102      	bne.n	80008ec <cart_setup_banking+0x30>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d01d      	beq.n	8000928 <cart_setup_banking+0x6c>
            (ctx.header->ram_size == 3 && i < 4) || 
 80008ec:	4b27      	ldr	r3, [pc, #156]	; (800098c <cart_setup_banking+0xd0>)
 80008ee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80008f2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
        if ((ctx.header->ram_size == 2 && i == 0) ||
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d102      	bne.n	8000900 <cart_setup_banking+0x44>
            (ctx.header->ram_size == 3 && i < 4) || 
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	dd13      	ble.n	8000928 <cart_setup_banking+0x6c>
            (ctx.header->ram_size == 4 && i < 16) || 
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <cart_setup_banking+0xd0>)
 8000902:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000906:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
            (ctx.header->ram_size == 3 && i < 4) || 
 800090a:	2b04      	cmp	r3, #4
 800090c:	d102      	bne.n	8000914 <cart_setup_banking+0x58>
            (ctx.header->ram_size == 4 && i < 16) || 
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	dd09      	ble.n	8000928 <cart_setup_banking+0x6c>
            (ctx.header->ram_size == 5 && i < 8)) {
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <cart_setup_banking+0xd0>)
 8000916:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800091a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
            (ctx.header->ram_size == 4 && i < 16) || 
 800091e:	2b05      	cmp	r3, #5
 8000920:	d11c      	bne.n	800095c <cart_setup_banking+0xa0>
            (ctx.header->ram_size == 5 && i < 8)) {
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b07      	cmp	r3, #7
 8000926:	dc19      	bgt.n	800095c <cart_setup_banking+0xa0>
            ctx.ram_banks[i] = malloc(0x2000);
 8000928:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800092c:	f010 fd7c 	bl	8011428 <malloc>
 8000930:	4603      	mov	r3, r0
 8000932:	4619      	mov	r1, r3
 8000934:	4a15      	ldr	r2, [pc, #84]	; (800098c <cart_setup_banking+0xd0>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f503 7383 	add.w	r3, r3, #262	; 0x106
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	6059      	str	r1, [r3, #4]
            memset(ctx.ram_banks[i], 0, 0x2000);
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <cart_setup_banking+0xd0>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f503 7383 	add.w	r3, r3, #262	; 0x106
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f010 fd84 	bl	8011464 <memset>
    for (int i=0; i<16; i++) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3301      	adds	r3, #1
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	ddaf      	ble.n	80008c8 <cart_setup_banking+0xc>
        }
    }

    ctx.ram_bank = ctx.ram_banks[0];
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <cart_setup_banking+0xd0>)
 800096a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800096e:	4a07      	ldr	r2, [pc, #28]	; (800098c <cart_setup_banking+0xd0>)
 8000970:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
    ctx.rom_bank_x = ctx.rom_data + 0x4000; //rom bank 1
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <cart_setup_banking+0xd0>)
 8000976:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800097a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800097e:	4a03      	ldr	r2, [pc, #12]	; (800098c <cart_setup_banking+0xd0>)
 8000980:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000a5c 	.word	0x20000a5c

08000990 <cart_load>:

bool cart_load(char *cart) {
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  snprintf(ctx.filename, sizeof(ctx.filename), "%s", cart);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a72      	ldr	r2, [pc, #456]	; (8000b64 <cart_load+0x1d4>)
 800099c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a0:	4871      	ldr	r0, [pc, #452]	; (8000b68 <cart_load+0x1d8>)
 80009a2:	f011 faad 	bl	8011f00 <sniprintf>

  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80009a6:	2200      	movs	r2, #0
 80009a8:	4970      	ldr	r1, [pc, #448]	; (8000b6c <cart_load+0x1dc>)
 80009aa:	4871      	ldr	r0, [pc, #452]	; (8000b70 <cart_load+0x1e0>)
 80009ac:	f00c fbbe 	bl	800d12c <f_mount>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <cart_load+0x2a>
  {
      Error_Handler();
 80009b6:	f003 fb55 	bl	8004064 <Error_Handler>
  }

  //Open file for writing (Create)
  if(f_open(&SDFile, "special.gb", FA_READ) != FR_OK)
 80009ba:	2201      	movs	r2, #1
 80009bc:	496d      	ldr	r1, [pc, #436]	; (8000b74 <cart_load+0x1e4>)
 80009be:	486e      	ldr	r0, [pc, #440]	; (8000b78 <cart_load+0x1e8>)
 80009c0:	f00c fc18 	bl	800d1f4 <f_open>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d005      	beq.n	80009d6 <cart_load+0x46>
  {
      printf("Failed to open: %s\n", cart);
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	486b      	ldr	r0, [pc, #428]	; (8000b7c <cart_load+0x1ec>)
 80009ce:	f011 f8fb 	bl	8011bc8 <iprintf>
      Error_Handler();
 80009d2:	f003 fb47 	bl	8004064 <Error_Handler>
  }

  printf("Opened: %s\n", ctx.filename);
 80009d6:	4964      	ldr	r1, [pc, #400]	; (8000b68 <cart_load+0x1d8>)
 80009d8:	4869      	ldr	r0, [pc, #420]	; (8000b80 <cart_load+0x1f0>)
 80009da:	f011 f8f5 	bl	8011bc8 <iprintf>


  ctx.rom_size = f_size(&SDFile);
 80009de:	4b66      	ldr	r3, [pc, #408]	; (8000b78 <cart_load+0x1e8>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	4a61      	ldr	r2, [pc, #388]	; (8000b68 <cart_load+0x1d8>)
 80009e4:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400


  ctx.rom_data = malloc(ctx.rom_size);
 80009e8:	4b5f      	ldr	r3, [pc, #380]	; (8000b68 <cart_load+0x1d8>)
 80009ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80009ee:	4618      	mov	r0, r3
 80009f0:	f010 fd1a 	bl	8011428 <malloc>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b5b      	ldr	r3, [pc, #364]	; (8000b68 <cart_load+0x1d8>)
 80009fa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  res = f_read(&SDFile, ctx.rom_data, ctx.rom_size, (void *)&bytesread);
 80009fe:	4b5a      	ldr	r3, [pc, #360]	; (8000b68 <cart_load+0x1d8>)
 8000a00:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 8000a04:	4b58      	ldr	r3, [pc, #352]	; (8000b68 <cart_load+0x1d8>)
 8000a06:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000a0a:	4b5e      	ldr	r3, [pc, #376]	; (8000b84 <cart_load+0x1f4>)
 8000a0c:	485a      	ldr	r0, [pc, #360]	; (8000b78 <cart_load+0x1e8>)
 8000a0e:	f00c fdb6 	bl	800d57e <f_read>
 8000a12:	4603      	mov	r3, r0
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b5c      	ldr	r3, [pc, #368]	; (8000b88 <cart_load+0x1f8>)
 8000a18:	701a      	strb	r2, [r3, #0]
  if(res != FR_OK)
 8000a1a:	4b5b      	ldr	r3, [pc, #364]	; (8000b88 <cart_load+0x1f8>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <cart_load+0x98>
  {
      Error_Handler();
 8000a22:	f003 fb1f 	bl	8004064 <Error_Handler>
 8000a26:	e002      	b.n	8000a2e <cart_load+0x9e>
  }
  else
  {
      f_close(&SDFile);
 8000a28:	4853      	ldr	r0, [pc, #332]	; (8000b78 <cart_load+0x1e8>)
 8000a2a:	f00c ff9f 	bl	800d96c <f_close>
  }

  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	484f      	ldr	r0, [pc, #316]	; (8000b70 <cart_load+0x1e0>)
 8000a34:	f00c fb7a 	bl	800d12c <f_mount>

  ctx.header = (rom_header *)(ctx.rom_data + 0x100);
 8000a38:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <cart_load+0x1d8>)
 8000a3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000a3e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a42:	4a49      	ldr	r2, [pc, #292]	; (8000b68 <cart_load+0x1d8>)
 8000a44:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
  ctx.header->title[15] = 0;
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <cart_load+0x1d8>)
 8000a4a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  ctx.battery = cart_battery();
 8000a54:	f7ff fede 	bl	8000814 <cart_battery>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b42      	ldr	r3, [pc, #264]	; (8000b68 <cart_load+0x1d8>)
 8000a5e:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
  ctx.need_save = false;
 8000a62:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <cart_load+0x1d8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d

  printf("Cartridge Loaded:\r\n");
 8000a6a:	4848      	ldr	r0, [pc, #288]	; (8000b8c <cart_load+0x1fc>)
 8000a6c:	f011 f932 	bl	8011cd4 <puts>
  printf("\t Title    : %s\r\n", ctx.header->title);
 8000a70:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <cart_load+0x1d8>)
 8000a72:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a76:	3334      	adds	r3, #52	; 0x34
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4845      	ldr	r0, [pc, #276]	; (8000b90 <cart_load+0x200>)
 8000a7c:	f011 f8a4 	bl	8011bc8 <iprintf>
  printf("\t Type     : %2.2X (%s)\r\n", ctx.header->type, cart_type_name());
 8000a80:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <cart_load+0x1d8>)
 8000a82:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a86:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000a8a:	461c      	mov	r4, r3
 8000a8c:	f7ff fef6 	bl	800087c <cart_type_name>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	4621      	mov	r1, r4
 8000a96:	483f      	ldr	r0, [pc, #252]	; (8000b94 <cart_load+0x204>)
 8000a98:	f011 f896 	bl	8011bc8 <iprintf>
  printf("\t ROM Size : %d KB\r\n", 32 << ctx.header->rom_size);
 8000a9c:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <cart_load+0x1d8>)
 8000a9e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000aa2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	4093      	lsls	r3, r2
 8000aac:	4619      	mov	r1, r3
 8000aae:	483a      	ldr	r0, [pc, #232]	; (8000b98 <cart_load+0x208>)
 8000ab0:	f011 f88a 	bl	8011bc8 <iprintf>
  printf("\t RAM Size : %2.2X\r\n", ctx.header->ram_size);
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <cart_load+0x1d8>)
 8000ab6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000aba:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4836      	ldr	r0, [pc, #216]	; (8000b9c <cart_load+0x20c>)
 8000ac2:	f011 f881 	bl	8011bc8 <iprintf>
  printf("\t LIC Code : %2.2X (%s)\r\n", ctx.header->lic_code, cart_lic_name());
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <cart_load+0x1d8>)
 8000ac8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000acc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8000ad0:	461c      	mov	r4, r3
 8000ad2:	f7ff feb3 	bl	800083c <cart_lic_name>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4621      	mov	r1, r4
 8000adc:	4830      	ldr	r0, [pc, #192]	; (8000ba0 <cart_load+0x210>)
 8000ade:	f011 f873 	bl	8011bc8 <iprintf>
  printf("\t ROM Vers : %2.2X\r\n", ctx.header->version);
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <cart_load+0x1d8>)
 8000ae4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000ae8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000aec:	4619      	mov	r1, r3
 8000aee:	482d      	ldr	r0, [pc, #180]	; (8000ba4 <cart_load+0x214>)
 8000af0:	f011 f86a 	bl	8011bc8 <iprintf>

  cart_setup_banking();
 8000af4:	f7ff fee2 	bl	80008bc <cart_setup_banking>

  u16 x = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	81fb      	strh	r3, [r7, #14]
  for (u16 i=0x0134; i<=0x014C; i++) {
 8000afc:	f44f 739a 	mov.w	r3, #308	; 0x134
 8000b00:	81bb      	strh	r3, [r7, #12]
 8000b02:	e00e      	b.n	8000b22 <cart_load+0x192>
      x = x - ctx.rom_data[i] - 1;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <cart_load+0x1d8>)
 8000b06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000b0a:	89bb      	ldrh	r3, [r7, #12]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	89fa      	ldrh	r2, [r7, #14]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	81fb      	strh	r3, [r7, #14]
  for (u16 i=0x0134; i<=0x014C; i++) {
 8000b1c:	89bb      	ldrh	r3, [r7, #12]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	81bb      	strh	r3, [r7, #12]
 8000b22:	89bb      	ldrh	r3, [r7, #12]
 8000b24:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 8000b28:	d9ec      	bls.n	8000b04 <cart_load+0x174>
  }

  printf("\t Checksum : %2.2X (%s)\r\n", ctx.header->checksum, (x & 0xFF) ? "PASSED" : "FAILED");
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <cart_load+0x1d8>)
 8000b2c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000b30:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000b34:	4619      	mov	r1, r3
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <cart_load+0x1b2>
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <cart_load+0x218>)
 8000b40:	e000      	b.n	8000b44 <cart_load+0x1b4>
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <cart_load+0x21c>)
 8000b44:	461a      	mov	r2, r3
 8000b46:	481a      	ldr	r0, [pc, #104]	; (8000bb0 <cart_load+0x220>)
 8000b48:	f011 f83e 	bl	8011bc8 <iprintf>

  if (ctx.battery) {
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <cart_load+0x1d8>)
 8000b4e:	f893 345c 	ldrb.w	r3, [r3, #1116]	; 0x45c
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <cart_load+0x1ca>
      cart_battery_load();
 8000b56:	f000 f82d 	bl	8000bb4 <cart_battery_load>
  }

  return true;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	08012ae8 	.word	0x08012ae8
 8000b68:	20000a5c 	.word	0x20000a5c
 8000b6c:	200097ac 	.word	0x200097ac
 8000b70:	200099e0 	.word	0x200099e0
 8000b74:	08012aec 	.word	0x08012aec
 8000b78:	200097b0 	.word	0x200097b0
 8000b7c:	08012af8 	.word	0x08012af8
 8000b80:	08012b0c 	.word	0x08012b0c
 8000b84:	20009558 	.word	0x20009558
 8000b88:	2000955c 	.word	0x2000955c
 8000b8c:	08012b18 	.word	0x08012b18
 8000b90:	08012b2c 	.word	0x08012b2c
 8000b94:	08012b40 	.word	0x08012b40
 8000b98:	08012b5c 	.word	0x08012b5c
 8000b9c:	08012b74 	.word	0x08012b74
 8000ba0:	08012b8c 	.word	0x08012b8c
 8000ba4:	08012ba8 	.word	0x08012ba8
 8000ba8:	08012bc0 	.word	0x08012bc0
 8000bac:	08012bc8 	.word	0x08012bc8
 8000bb0:	08012bd0 	.word	0x08012bd0

08000bb4 <cart_battery_load>:

void cart_battery_load() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000bba:	af00      	add	r7, sp, #0
    if (!ctx.ram_bank) {
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <cart_battery_load+0x70>)
 8000bbe:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d028      	beq.n	8000c18 <cart_battery_load+0x64>
        return;
    }

    char fn[1048];
    sprintf(fn, "%s.battery", ctx.filename);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <cart_battery_load+0x70>)
 8000bca:	4917      	ldr	r1, [pc, #92]	; (8000c28 <cart_battery_load+0x74>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f011 f9cb 	bl	8011f68 <siprintf>
    FILE *fp = fopen(fn, "rb");
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4915      	ldr	r1, [pc, #84]	; (8000c2c <cart_battery_load+0x78>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f010 f944 	bl	8010e64 <fopen>
 8000bdc:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c

    if (!fp) {
 8000be0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d108      	bne.n	8000bfa <cart_battery_load+0x46>
        fprintf(stderr, "FAILED TO OPEN: %s\n", fn);
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <cart_battery_load+0x7c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	1d3a      	adds	r2, r7, #4
 8000bf0:	4910      	ldr	r1, [pc, #64]	; (8000c34 <cart_battery_load+0x80>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f010 f93e 	bl	8010e74 <fiprintf>
        return;
 8000bf8:	e00f      	b.n	8000c1a <cart_battery_load+0x66>
    }

    fread(ctx.ram_bank, 0x2000, 1, fp);
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <cart_battery_load+0x70>)
 8000bfc:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 8000c00:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	f010 f9b9 	bl	8010f80 <fread>
    fclose(fp);
 8000c0e:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8000c12:	f00f ff21 	bl	8010a58 <fclose>
 8000c16:	e000      	b.n	8000c1a <cart_battery_load+0x66>
        return;
 8000c18:	bf00      	nop
}
 8000c1a:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000a5c 	.word	0x20000a5c
 8000c28:	08012bec 	.word	0x08012bec
 8000c2c:	08012bf8 	.word	0x08012bf8
 8000c30:	200009dc 	.word	0x200009dc
 8000c34:	08012bfc 	.word	0x08012bfc

08000c38 <cart_battery_save>:

void cart_battery_save() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000c3e:	af00      	add	r7, sp, #0
    if (!ctx.ram_bank) {
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <cart_battery_save+0x70>)
 8000c42:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d028      	beq.n	8000c9c <cart_battery_save+0x64>
        return;
    }

    char fn[1048];
    sprintf(fn, "%s.battery", ctx.filename);
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <cart_battery_save+0x70>)
 8000c4e:	4917      	ldr	r1, [pc, #92]	; (8000cac <cart_battery_save+0x74>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f011 f989 	bl	8011f68 <siprintf>
    FILE *fp = fopen(fn, "wb");
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4915      	ldr	r1, [pc, #84]	; (8000cb0 <cart_battery_save+0x78>)
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f010 f902 	bl	8010e64 <fopen>
 8000c60:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c

    if (!fp) {
 8000c64:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d108      	bne.n	8000c7e <cart_battery_save+0x46>
        fprintf(stderr, "FAILED TO OPEN: %s\n", fn);
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <cart_battery_save+0x7c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	1d3a      	adds	r2, r7, #4
 8000c74:	4910      	ldr	r1, [pc, #64]	; (8000cb8 <cart_battery_save+0x80>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f010 f8fc 	bl	8010e74 <fiprintf>
        return;
 8000c7c:	e00f      	b.n	8000c9e <cart_battery_save+0x66>
    }

    fwrite(ctx.ram_bank, 0x2000, 1, fp);
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <cart_battery_save+0x70>)
 8000c80:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 8000c84:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8e:	f010 fb31 	bl	80112f4 <fwrite>
    fclose(fp);
 8000c92:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8000c96:	f00f fedf 	bl	8010a58 <fclose>
 8000c9a:	e000      	b.n	8000c9e <cart_battery_save+0x66>
        return;
 8000c9c:	bf00      	nop
}
 8000c9e:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000a5c 	.word	0x20000a5c
 8000cac:	08012bec 	.word	0x08012bec
 8000cb0:	08012c10 	.word	0x08012c10
 8000cb4:	200009dc 	.word	0x200009dc
 8000cb8:	08012bfc 	.word	0x08012bfc

08000cbc <cart_read>:

u8 cart_read(u16 address) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
    if (!cart_mbc1() || address < 0x4000) {
 8000cc6:	f7ff fd87 	bl	80007d8 <cart_mbc1>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f083 0301 	eor.w	r3, r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <cart_read+0x22>
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cdc:	d206      	bcs.n	8000cec <cart_read+0x30>
        return ctx.rom_data[address];
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <cart_read+0x88>)
 8000ce0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	e027      	b.n	8000d3c <cart_read+0x80>
    }

    if ((address & 0xE000) == 0xA000) {
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000cf2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000cf6:	d119      	bne.n	8000d2c <cart_read+0x70>
        if (!ctx.ram_enabled) {
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <cart_read+0x88>)
 8000cfa:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000cfe:	f083 0301 	eor.w	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <cart_read+0x50>
            return 0xFF;
 8000d08:	23ff      	movs	r3, #255	; 0xff
 8000d0a:	e017      	b.n	8000d3c <cart_read+0x80>
        }

        if (!ctx.ram_bank) {
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <cart_read+0x88>)
 8000d0e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <cart_read+0x5e>
            return 0xFF;
 8000d16:	23ff      	movs	r3, #255	; 0xff
 8000d18:	e010      	b.n	8000d3c <cart_read+0x80>
        }

        return ctx.ram_bank[address - 0xA000];
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <cart_read+0x88>)
 8000d1c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
 8000d26:	4413      	add	r3, r2
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	e007      	b.n	8000d3c <cart_read+0x80>
    }

    return ctx.rom_bank_x[address - 0x4000];
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <cart_read+0x88>)
 8000d2e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000d38:	4413      	add	r3, r2
 8000d3a:	781b      	ldrb	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000a5c 	.word	0x20000a5c

08000d48 <cart_write>:

void cart_write(u16 address, u8 value) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	80fb      	strh	r3, [r7, #6]
 8000d54:	4613      	mov	r3, r2
 8000d56:	717b      	strb	r3, [r7, #5]
    if (!cart_mbc1()) {
 8000d58:	f7ff fd3e 	bl	80007d8 <cart_mbc1>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f083 0301 	eor.w	r3, r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f040 80a8 	bne.w	8000eba <cart_write+0x172>
        return;
    }

    if (address < 0x2000) {
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d70:	d20a      	bcs.n	8000d88 <cart_write+0x40>
        ctx.ram_enabled = ((value & 0xF) == 0xA);
 8000d72:	797b      	ldrb	r3, [r7, #5]
 8000d74:	f003 030f 	and.w	r3, r3, #15
 8000d78:	2b0a      	cmp	r3, #10
 8000d7a:	bf0c      	ite	eq
 8000d7c:	2301      	moveq	r3, #1
 8000d7e:	2300      	movne	r3, #0
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <cart_write+0x184>)
 8000d84:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    }

    if ((address & 0xE000) == 0x2000) {
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d92:	d117      	bne.n	8000dc4 <cart_write+0x7c>
        //rom bank number
        if (value == 0) {
 8000d94:	797b      	ldrb	r3, [r7, #5]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <cart_write+0x56>
            value = 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	717b      	strb	r3, [r7, #5]
        }

        value &= 0b11111;
 8000d9e:	797b      	ldrb	r3, [r7, #5]
 8000da0:	f003 031f 	and.w	r3, r3, #31
 8000da4:	717b      	strb	r3, [r7, #5]

        ctx.rom_bank_value = value;
 8000da6:	4a49      	ldr	r2, [pc, #292]	; (8000ecc <cart_write+0x184>)
 8000da8:	797b      	ldrb	r3, [r7, #5]
 8000daa:	f882 3415 	strb.w	r3, [r2, #1045]	; 0x415
        ctx.rom_bank_x = ctx.rom_data + (0x4000 * ctx.rom_bank_value);
 8000dae:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <cart_write+0x184>)
 8000db0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000db4:	4a45      	ldr	r2, [pc, #276]	; (8000ecc <cart_write+0x184>)
 8000db6:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8000dba:	0392      	lsls	r2, r2, #14
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a43      	ldr	r2, [pc, #268]	; (8000ecc <cart_write+0x184>)
 8000dc0:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
    }

    if ((address & 0xE000) == 0x4000) {
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dce:	d11e      	bne.n	8000e0e <cart_write+0xc6>
        //ram bank number
        ctx.ram_bank_value = value & 0b11;
 8000dd0:	797b      	ldrb	r3, [r7, #5]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <cart_write+0x184>)
 8000dda:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

        if (ctx.ram_banking) {
 8000dde:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <cart_write+0x184>)
 8000de0:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d012      	beq.n	8000e0e <cart_write+0xc6>
            if (cart_need_save()) {
 8000de8:	f7ff fcea 	bl	80007c0 <cart_need_save>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <cart_write+0xae>
                cart_battery_save();
 8000df2:	f7ff ff21 	bl	8000c38 <cart_battery_save>
            }

            ctx.ram_bank = ctx.ram_banks[ctx.ram_bank_value];
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <cart_write+0x184>)
 8000df8:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 8000dfc:	4a33      	ldr	r2, [pc, #204]	; (8000ecc <cart_write+0x184>)
 8000dfe:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	4a30      	ldr	r2, [pc, #192]	; (8000ecc <cart_write+0x184>)
 8000e0a:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
        }
    }

    if ((address & 0xE000) == 0x6000) {
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000e14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8000e18:	d129      	bne.n	8000e6e <cart_write+0x126>
        //banking mode select
        ctx.banking_mode = value & 1;
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <cart_write+0x184>)
 8000e24:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        ctx.ram_banking = ctx.banking_mode;
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <cart_write+0x184>)
 8000e2a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bf14      	ite	ne
 8000e32:	2301      	movne	r3, #1
 8000e34:	2300      	moveq	r3, #0
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <cart_write+0x184>)
 8000e3a:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d

        if (ctx.ram_banking) {
 8000e3e:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <cart_write+0x184>)
 8000e40:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d012      	beq.n	8000e6e <cart_write+0x126>
            if (cart_need_save()) {
 8000e48:	f7ff fcba 	bl	80007c0 <cart_need_save>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <cart_write+0x10e>
                cart_battery_save();
 8000e52:	f7ff fef1 	bl	8000c38 <cart_battery_save>
            }
            
            ctx.ram_bank = ctx.ram_banks[ctx.ram_bank_value];
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <cart_write+0x184>)
 8000e58:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <cart_write+0x184>)
 8000e5e:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <cart_write+0x184>)
 8000e6a:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
        }
    }

    if ((address & 0xE000) == 0xA000) {
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000e74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000e78:	d124      	bne.n	8000ec4 <cart_write+0x17c>
        if (!ctx.ram_enabled) {
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <cart_write+0x184>)
 8000e7c:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000e80:	f083 0301 	eor.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d119      	bne.n	8000ebe <cart_write+0x176>
            return;
        }

        if (!ctx.ram_bank) {
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <cart_write+0x184>)
 8000e8c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d016      	beq.n	8000ec2 <cart_write+0x17a>
            return;
        }

        ctx.ram_bank[address - 0xA000] = value;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <cart_write+0x184>)
 8000e96:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
 8000ea0:	4413      	add	r3, r2
 8000ea2:	797a      	ldrb	r2, [r7, #5]
 8000ea4:	701a      	strb	r2, [r3, #0]

        if (ctx.battery) {
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <cart_write+0x184>)
 8000ea8:	f893 345c 	ldrb.w	r3, [r3, #1116]	; 0x45c
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d009      	beq.n	8000ec4 <cart_write+0x17c>
            ctx.need_save = true;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <cart_write+0x184>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
 8000eb8:	e004      	b.n	8000ec4 <cart_write+0x17c>
        return;
 8000eba:	bf00      	nop
 8000ebc:	e002      	b.n	8000ec4 <cart_write+0x17c>
            return;
 8000ebe:	bf00      	nop
 8000ec0:	e000      	b.n	8000ec4 <cart_write+0x17c>
            return;
 8000ec2:	bf00      	nop
        }
    }
}
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000a5c 	.word	0x20000a5c

08000ed0 <cpu_init>:

cpu_context ctx = {0};

#define CPU_DEBUG 0

void cpu_init() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
    ctx.regs.pc = 0x100;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <cpu_init+0x5c>)
 8000ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eda:	811a      	strh	r2, [r3, #8]
    ctx.regs.sp = 0xFFFE;
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <cpu_init+0x5c>)
 8000ede:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ee2:	815a      	strh	r2, [r3, #10]
    *((short *)&ctx.regs.a) = 0xB001;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <cpu_init+0x5c>)
 8000ee6:	f24b 0201 	movw	r2, #45057	; 0xb001
 8000eea:	801a      	strh	r2, [r3, #0]
    *((short *)&ctx.regs.b) = 0x1300;
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <cpu_init+0x60>)
 8000eee:	f44f 5298 	mov.w	r2, #4864	; 0x1300
 8000ef2:	801a      	strh	r2, [r3, #0]
    *((short *)&ctx.regs.d) = 0xD800;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <cpu_init+0x64>)
 8000ef6:	f44f 4258 	mov.w	r2, #55296	; 0xd800
 8000efa:	801a      	strh	r2, [r3, #0]
    *((short *)&ctx.regs.h) = 0x4D01;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <cpu_init+0x68>)
 8000efe:	f644 5201 	movw	r2, #19713	; 0x4d01
 8000f02:	801a      	strh	r2, [r3, #0]
    ctx.ie_register = 0;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <cpu_init+0x5c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	771a      	strb	r2, [r3, #28]
    ctx.int_flags = 0;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <cpu_init+0x5c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	775a      	strb	r2, [r3, #29]
    ctx.int_master_enabled = false;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <cpu_init+0x5c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	769a      	strb	r2, [r3, #26]
    ctx.enabling_ime = false;
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <cpu_init+0x5c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	76da      	strb	r2, [r3, #27]

    timer_get_context()->div = 0xABCC;
 8000f1c:	f004 fe02 	bl	8005b24 <timer_get_context>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f64a 32cc 	movw	r2, #43980	; 0xabcc
 8000f26:	801a      	strh	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000ebc 	.word	0x20000ebc
 8000f30:	20000ebe 	.word	0x20000ebe
 8000f34:	20000ec0 	.word	0x20000ec0
 8000f38:	20000ec2 	.word	0x20000ec2

08000f3c <fetch_instruction>:

static void fetch_instruction() {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
    ctx.cur_opcode = bus_read(ctx.regs.pc++);
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <fetch_instruction+0x34>)
 8000f42:	891b      	ldrh	r3, [r3, #8]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	b291      	uxth	r1, r2
 8000f48:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <fetch_instruction+0x34>)
 8000f4a:	8111      	strh	r1, [r2, #8]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fb43 	bl	80005d8 <bus_read>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <fetch_instruction+0x34>)
 8000f58:	745a      	strb	r2, [r3, #17]
    ctx.cur_inst = instruction_by_opcode(ctx.cur_opcode);
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <fetch_instruction+0x34>)
 8000f5c:	7c5b      	ldrb	r3, [r3, #17]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 f886 	bl	8003070 <instruction_by_opcode>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a02      	ldr	r2, [pc, #8]	; (8000f70 <fetch_instruction+0x34>)
 8000f68:	6153      	str	r3, [r2, #20]
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000ebc 	.word	0x20000ebc

08000f74 <execute>:

void fetch_data();

static void execute() {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
    IN_PROC proc = inst_get_processor(ctx.cur_inst->type);
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <execute+0x40>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fc41 	bl	8002808 <inst_get_processor>
 8000f86:	6078      	str	r0, [r7, #4]

    if (!proc) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10b      	bne.n	8000fa6 <execute+0x32>
        NO_IMPL
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <execute+0x44>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2214      	movs	r2, #20
 8000f96:	2101      	movs	r1, #1
 8000f98:	4808      	ldr	r0, [pc, #32]	; (8000fbc <execute+0x48>)
 8000f9a:	f010 f9ab 	bl	80112f4 <fwrite>
 8000f9e:	f06f 0004 	mvn.w	r0, #4
 8000fa2:	f00f fcd9 	bl	8010958 <exit>
    }

    proc(&ctx);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <execute+0x40>)
 8000faa:	4798      	blx	r3
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000ebc 	.word	0x20000ebc
 8000fb8:	200009dc 	.word	0x200009dc
 8000fbc:	08012c14 	.word	0x08012c14

08000fc0 <cpu_step>:

bool cpu_step() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
    
    if (!ctx.halted) {
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <cpu_step+0x94>)
 8000fc8:	7e1b      	ldrb	r3, [r3, #24]
 8000fca:	f083 0301 	eor.w	r3, r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d01e      	beq.n	8001012 <cpu_step+0x52>
        u16 pc = ctx.regs.pc;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <cpu_step+0x94>)
 8000fd6:	891b      	ldrh	r3, [r3, #8]
 8000fd8:	80fb      	strh	r3, [r7, #6]

        fetch_instruction();
 8000fda:	f7ff ffaf 	bl	8000f3c <fetch_instruction>
        emu_cycles(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f001 ff50 	bl	8002e84 <emu_cycles>
        fetch_data();
 8000fe4:	f000 f86a 	bl	80010bc <fetch_data>
            pc, inst, ctx.cur_opcode,
            bus_read(pc + 1), bus_read(pc + 2), ctx.regs.a, flags, ctx.regs.b, ctx.regs.c,
            ctx.regs.d, ctx.regs.e, ctx.regs.h, ctx.regs.l);
#endif

        if (ctx.cur_inst == NULL) {
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <cpu_step+0x94>)
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d109      	bne.n	8001004 <cpu_step+0x44>
            printf("Unknown Instruction! %02X\n", ctx.cur_opcode);
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <cpu_step+0x94>)
 8000ff2:	7c5b      	ldrb	r3, [r3, #17]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4818      	ldr	r0, [pc, #96]	; (8001058 <cpu_step+0x98>)
 8000ff8:	f010 fde6 	bl	8011bc8 <iprintf>
            exit(-7);
 8000ffc:	f06f 0006 	mvn.w	r0, #6
 8001000:	f00f fcaa 	bl	8010958 <exit>
        }

        dbg_update();
 8001004:	f001 fe22 	bl	8002c4c <dbg_update>
        dbg_print();
 8001008:	f001 fe46 	bl	8002c98 <dbg_print>

        execute();
 800100c:	f7ff ffb2 	bl	8000f74 <execute>
 8001010:	e009      	b.n	8001026 <cpu_step+0x66>
    } else {
        //is halted...
        emu_cycles(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f001 ff36 	bl	8002e84 <emu_cycles>

        if (ctx.int_flags) {
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <cpu_step+0x94>)
 800101a:	7f5b      	ldrb	r3, [r3, #29]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <cpu_step+0x66>
            ctx.halted = false;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <cpu_step+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	761a      	strb	r2, [r3, #24]
        }
    }

    if (ctx.int_master_enabled) {
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <cpu_step+0x94>)
 8001028:	7e9b      	ldrb	r3, [r3, #26]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <cpu_step+0x7a>
        cpu_handle_interrupts(&ctx);
 800102e:	4809      	ldr	r0, [pc, #36]	; (8001054 <cpu_step+0x94>)
 8001030:	f002 f878 	bl	8003124 <cpu_handle_interrupts>
        ctx.enabling_ime = false;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <cpu_step+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	76da      	strb	r2, [r3, #27]
    }

    if (ctx.enabling_ime) {
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <cpu_step+0x94>)
 800103c:	7edb      	ldrb	r3, [r3, #27]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <cpu_step+0x88>
        ctx.int_master_enabled = true;
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <cpu_step+0x94>)
 8001044:	2201      	movs	r2, #1
 8001046:	769a      	strb	r2, [r3, #26]
    }

    return true;
 8001048:	2301      	movs	r3, #1
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000ebc 	.word	0x20000ebc
 8001058:	08012c2c 	.word	0x08012c2c

0800105c <cpu_get_ie_register>:

u8 cpu_get_ie_register() {
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
    return ctx.ie_register;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <cpu_get_ie_register+0x14>)
 8001062:	7f1b      	ldrb	r3, [r3, #28]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000ebc 	.word	0x20000ebc

08001074 <cpu_set_ie_register>:

void cpu_set_ie_register(u8 n) {
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
    ctx.ie_register = n;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <cpu_set_ie_register+0x1c>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	7713      	strb	r3, [r2, #28]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000ebc 	.word	0x20000ebc

08001094 <cpu_request_interrupt>:

void cpu_request_interrupt(interrupt_type t) {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
    ctx.int_flags |= t;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <cpu_request_interrupt+0x24>)
 80010a0:	7f5a      	ldrb	r2, [r3, #29]
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <cpu_request_interrupt+0x24>)
 80010aa:	775a      	strb	r2, [r3, #29]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	20000ebc 	.word	0x20000ebc

080010bc <fetch_data>:
#include <bus.h>
#include <emu.h>

extern cpu_context ctx;

void fetch_data() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
    ctx.mem_dest = 0;
 80010c2:	4bb0      	ldr	r3, [pc, #704]	; (8001384 <fetch_data+0x2c8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	81da      	strh	r2, [r3, #14]
    ctx.dest_is_mem = false;
 80010c8:	4bae      	ldr	r3, [pc, #696]	; (8001384 <fetch_data+0x2c8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	741a      	strb	r2, [r3, #16]
    
    if (ctx.cur_inst == NULL) {
 80010ce:	4bad      	ldr	r3, [pc, #692]	; (8001384 <fetch_data+0x2c8>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 8249 	beq.w	800156a <fetch_data+0x4ae>
        return;
    }

    switch(ctx.cur_inst->mode) {
 80010d8:	4baa      	ldr	r3, [pc, #680]	; (8001384 <fetch_data+0x2c8>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	785b      	ldrb	r3, [r3, #1]
 80010de:	2b14      	cmp	r3, #20
 80010e0:	f200 8235 	bhi.w	800154e <fetch_data+0x492>
 80010e4:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <fetch_data+0x30>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	0800156f 	.word	0x0800156f
 80010f0:	08001193 	.word	0x08001193
 80010f4:	08001157 	.word	0x08001157
 80010f8:	080011e1 	.word	0x080011e1
 80010fc:	08001141 	.word	0x08001141
 8001100:	0800116d 	.word	0x0800116d
 8001104:	0800122b 	.word	0x0800122b
 8001108:	08001265 	.word	0x08001265
 800110c:	0800129d 	.word	0x0800129d
 8001110:	080012d5 	.word	0x080012d5
 8001114:	08001319 	.word	0x08001319
 8001118:	0800135d 	.word	0x0800135d
 800111c:	08001389 	.word	0x08001389
 8001120:	080013bd 	.word	0x080013bd
 8001124:	08001193 	.word	0x08001193
 8001128:	080013e3 	.word	0x080013e3
 800112c:	08001409 	.word	0x08001409
 8001130:	08001471 	.word	0x08001471
 8001134:	080014b1 	.word	0x080014b1
 8001138:	08001409 	.word	0x08001409
 800113c:	080014ef 	.word	0x080014ef
        case AM_IMP: return;

        case AM_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_1);
 8001140:	4b90      	ldr	r3, [pc, #576]	; (8001384 <fetch_data+0x2c8>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	789b      	ldrb	r3, [r3, #2]
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fb86 	bl	8002858 <cpu_read_reg>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b8c      	ldr	r3, [pc, #560]	; (8001384 <fetch_data+0x2c8>)
 8001152:	819a      	strh	r2, [r3, #12]
            return;
 8001154:	e20e      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 8001156:	4b8b      	ldr	r3, [pc, #556]	; (8001384 <fetch_data+0x2c8>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	78db      	ldrb	r3, [r3, #3]
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fb7b 	bl	8002858 <cpu_read_reg>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	4b87      	ldr	r3, [pc, #540]	; (8001384 <fetch_data+0x2c8>)
 8001168:	819a      	strh	r2, [r3, #12]
            return;
 800116a:	e203      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_D8:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 800116c:	4b85      	ldr	r3, [pc, #532]	; (8001384 <fetch_data+0x2c8>)
 800116e:	891b      	ldrh	r3, [r3, #8]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fa31 	bl	80005d8 <bus_read>
 8001176:	4603      	mov	r3, r0
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b82      	ldr	r3, [pc, #520]	; (8001384 <fetch_data+0x2c8>)
 800117c:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f001 fe80 	bl	8002e84 <emu_cycles>
            ctx.regs.pc++;
 8001184:	4b7f      	ldr	r3, [pc, #508]	; (8001384 <fetch_data+0x2c8>)
 8001186:	891b      	ldrh	r3, [r3, #8]
 8001188:	3301      	adds	r3, #1
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b7d      	ldr	r3, [pc, #500]	; (8001384 <fetch_data+0x2c8>)
 800118e:	811a      	strh	r2, [r3, #8]
            return;
 8001190:	e1f0      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_D16:
        case AM_D16: {
            u16 lo = bus_read(ctx.regs.pc);
 8001192:	4b7c      	ldr	r3, [pc, #496]	; (8001384 <fetch_data+0x2c8>)
 8001194:	891b      	ldrh	r3, [r3, #8]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fa1e 	bl	80005d8 <bus_read>
 800119c:	4603      	mov	r3, r0
 800119e:	807b      	strh	r3, [r7, #2]
            emu_cycles(1);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f001 fe6f 	bl	8002e84 <emu_cycles>

            u16 hi = bus_read(ctx.regs.pc + 1);
 80011a6:	4b77      	ldr	r3, [pc, #476]	; (8001384 <fetch_data+0x2c8>)
 80011a8:	891b      	ldrh	r3, [r3, #8]
 80011aa:	3301      	adds	r3, #1
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fa12 	bl	80005d8 <bus_read>
 80011b4:	4603      	mov	r3, r0
 80011b6:	803b      	strh	r3, [r7, #0]
            emu_cycles(1);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f001 fe63 	bl	8002e84 <emu_cycles>

            ctx.fetched_data = lo | (hi << 8);
 80011be:	883b      	ldrh	r3, [r7, #0]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <fetch_data+0x2c8>)
 80011d0:	819a      	strh	r2, [r3, #12]

            ctx.regs.pc += 2;
 80011d2:	4b6c      	ldr	r3, [pc, #432]	; (8001384 <fetch_data+0x2c8>)
 80011d4:	891b      	ldrh	r3, [r3, #8]
 80011d6:	3302      	adds	r3, #2
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b6a      	ldr	r3, [pc, #424]	; (8001384 <fetch_data+0x2c8>)
 80011dc:	811a      	strh	r2, [r3, #8]

            return;
 80011de:	e1c9      	b.n	8001574 <fetch_data+0x4b8>
        }

        case AM_MR_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 80011e0:	4b68      	ldr	r3, [pc, #416]	; (8001384 <fetch_data+0x2c8>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	78db      	ldrb	r3, [r3, #3]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fb36 	bl	8002858 <cpu_read_reg>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b64      	ldr	r3, [pc, #400]	; (8001384 <fetch_data+0x2c8>)
 80011f2:	819a      	strh	r2, [r3, #12]
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 80011f4:	4b63      	ldr	r3, [pc, #396]	; (8001384 <fetch_data+0x2c8>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	789b      	ldrb	r3, [r3, #2]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fb2c 	bl	8002858 <cpu_read_reg>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b5f      	ldr	r3, [pc, #380]	; (8001384 <fetch_data+0x2c8>)
 8001206:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 8001208:	4b5e      	ldr	r3, [pc, #376]	; (8001384 <fetch_data+0x2c8>)
 800120a:	2201      	movs	r2, #1
 800120c:	741a      	strb	r2, [r3, #16]

            if (ctx.cur_inst->reg_1 == RT_C) {
 800120e:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <fetch_data+0x2c8>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	789b      	ldrb	r3, [r3, #2]
 8001214:	2b04      	cmp	r3, #4
 8001216:	f040 81ac 	bne.w	8001572 <fetch_data+0x4b6>
                ctx.mem_dest |= 0xFF00;
 800121a:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <fetch_data+0x2c8>)
 800121c:	89db      	ldrh	r3, [r3, #14]
 800121e:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b57      	ldr	r3, [pc, #348]	; (8001384 <fetch_data+0x2c8>)
 8001226:	81da      	strh	r2, [r3, #14]
            }

            return;
 8001228:	e1a3      	b.n	8001572 <fetch_data+0x4b6>

        case AM_R_MR: {
            u16 addr = cpu_read_reg(ctx.cur_inst->reg_2);
 800122a:	4b56      	ldr	r3, [pc, #344]	; (8001384 <fetch_data+0x2c8>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	78db      	ldrb	r3, [r3, #3]
 8001230:	4618      	mov	r0, r3
 8001232:	f001 fb11 	bl	8002858 <cpu_read_reg>
 8001236:	4603      	mov	r3, r0
 8001238:	81fb      	strh	r3, [r7, #14]

            if (ctx.cur_inst->reg_2 == RT_C) {
 800123a:	4b52      	ldr	r3, [pc, #328]	; (8001384 <fetch_data+0x2c8>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	78db      	ldrb	r3, [r3, #3]
 8001240:	2b04      	cmp	r3, #4
 8001242:	d103      	bne.n	800124c <fetch_data+0x190>
                addr |= 0xFF00;
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800124a:	81fb      	strh	r3, [r7, #14]
            }

            ctx.fetched_data = bus_read(addr);
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f9c2 	bl	80005d8 <bus_read>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b4a      	ldr	r3, [pc, #296]	; (8001384 <fetch_data+0x2c8>)
 800125a:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 800125c:	2001      	movs	r0, #1
 800125e:	f001 fe11 	bl	8002e84 <emu_cycles>

        } return;
 8001262:	e187      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_HLI:
            ctx.fetched_data = bus_read(cpu_read_reg(ctx.cur_inst->reg_2));
 8001264:	4b47      	ldr	r3, [pc, #284]	; (8001384 <fetch_data+0x2c8>)
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	4618      	mov	r0, r3
 800126c:	f001 faf4 	bl	8002858 <cpu_read_reg>
 8001270:	4603      	mov	r3, r0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f9b0 	bl	80005d8 <bus_read>
 8001278:	4603      	mov	r3, r0
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b41      	ldr	r3, [pc, #260]	; (8001384 <fetch_data+0x2c8>)
 800127e:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f001 fdff 	bl	8002e84 <emu_cycles>
            cpu_set_reg(RT_HL, cpu_read_reg(RT_HL) + 1);
 8001286:	200c      	movs	r0, #12
 8001288:	f001 fae6 	bl	8002858 <cpu_read_reg>
 800128c:	4603      	mov	r3, r0
 800128e:	3301      	adds	r3, #1
 8001290:	b29b      	uxth	r3, r3
 8001292:	4619      	mov	r1, r3
 8001294:	200c      	movs	r0, #12
 8001296:	f001 fb57 	bl	8002948 <cpu_set_reg>
            return;
 800129a:	e16b      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_HLD:
            ctx.fetched_data = bus_read(cpu_read_reg(ctx.cur_inst->reg_2));
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <fetch_data+0x2c8>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	78db      	ldrb	r3, [r3, #3]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fad8 	bl	8002858 <cpu_read_reg>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f994 	bl	80005d8 <bus_read>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4b33      	ldr	r3, [pc, #204]	; (8001384 <fetch_data+0x2c8>)
 80012b6:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f001 fde3 	bl	8002e84 <emu_cycles>
            cpu_set_reg(RT_HL, cpu_read_reg(RT_HL) - 1);
 80012be:	200c      	movs	r0, #12
 80012c0:	f001 faca 	bl	8002858 <cpu_read_reg>
 80012c4:	4603      	mov	r3, r0
 80012c6:	3b01      	subs	r3, #1
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4619      	mov	r1, r3
 80012cc:	200c      	movs	r0, #12
 80012ce:	f001 fb3b 	bl	8002948 <cpu_set_reg>
            return;
 80012d2:	e14f      	b.n	8001574 <fetch_data+0x4b8>

        case AM_HLI_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <fetch_data+0x2c8>)
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	78db      	ldrb	r3, [r3, #3]
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 fabc 	bl	8002858 <cpu_read_reg>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <fetch_data+0x2c8>)
 80012e6:	819a      	strh	r2, [r3, #12]
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 80012e8:	4b26      	ldr	r3, [pc, #152]	; (8001384 <fetch_data+0x2c8>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	789b      	ldrb	r3, [r3, #2]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 fab2 	bl	8002858 <cpu_read_reg>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <fetch_data+0x2c8>)
 80012fa:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 80012fc:	4b21      	ldr	r3, [pc, #132]	; (8001384 <fetch_data+0x2c8>)
 80012fe:	2201      	movs	r2, #1
 8001300:	741a      	strb	r2, [r3, #16]
            cpu_set_reg(RT_HL, cpu_read_reg(RT_HL) + 1);
 8001302:	200c      	movs	r0, #12
 8001304:	f001 faa8 	bl	8002858 <cpu_read_reg>
 8001308:	4603      	mov	r3, r0
 800130a:	3301      	adds	r3, #1
 800130c:	b29b      	uxth	r3, r3
 800130e:	4619      	mov	r1, r3
 8001310:	200c      	movs	r0, #12
 8001312:	f001 fb19 	bl	8002948 <cpu_set_reg>
            return;
 8001316:	e12d      	b.n	8001574 <fetch_data+0x4b8>

        case AM_HLD_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <fetch_data+0x2c8>)
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	78db      	ldrb	r3, [r3, #3]
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fa9a 	bl	8002858 <cpu_read_reg>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <fetch_data+0x2c8>)
 800132a:	819a      	strh	r2, [r3, #12]
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <fetch_data+0x2c8>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	789b      	ldrb	r3, [r3, #2]
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fa90 	bl	8002858 <cpu_read_reg>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <fetch_data+0x2c8>)
 800133e:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <fetch_data+0x2c8>)
 8001342:	2201      	movs	r2, #1
 8001344:	741a      	strb	r2, [r3, #16]
            cpu_set_reg(RT_HL, cpu_read_reg(RT_HL) - 1);
 8001346:	200c      	movs	r0, #12
 8001348:	f001 fa86 	bl	8002858 <cpu_read_reg>
 800134c:	4603      	mov	r3, r0
 800134e:	3b01      	subs	r3, #1
 8001350:	b29b      	uxth	r3, r3
 8001352:	4619      	mov	r1, r3
 8001354:	200c      	movs	r0, #12
 8001356:	f001 faf7 	bl	8002948 <cpu_set_reg>
            return;
 800135a:	e10b      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_A8:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <fetch_data+0x2c8>)
 800135e:	891b      	ldrh	r3, [r3, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f939 	bl	80005d8 <bus_read>
 8001366:	4603      	mov	r3, r0
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <fetch_data+0x2c8>)
 800136c:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 800136e:	2001      	movs	r0, #1
 8001370:	f001 fd88 	bl	8002e84 <emu_cycles>
            ctx.regs.pc++;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <fetch_data+0x2c8>)
 8001376:	891b      	ldrh	r3, [r3, #8]
 8001378:	3301      	adds	r3, #1
 800137a:	b29a      	uxth	r2, r3
 800137c:	4b01      	ldr	r3, [pc, #4]	; (8001384 <fetch_data+0x2c8>)
 800137e:	811a      	strh	r2, [r3, #8]
            return;
 8001380:	e0f8      	b.n	8001574 <fetch_data+0x4b8>
 8001382:	bf00      	nop
 8001384:	20000ebc 	.word	0x20000ebc

        case AM_A8_R:
            ctx.mem_dest = bus_read(ctx.regs.pc) | 0xFF00;
 8001388:	4b7c      	ldr	r3, [pc, #496]	; (800157c <fetch_data+0x4c0>)
 800138a:	891b      	ldrh	r3, [r3, #8]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f923 	bl	80005d8 <bus_read>
 8001392:	4603      	mov	r3, r0
 8001394:	b21b      	sxth	r3, r3
 8001396:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800139a:	b21b      	sxth	r3, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b77      	ldr	r3, [pc, #476]	; (800157c <fetch_data+0x4c0>)
 80013a0:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <fetch_data+0x4c0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	741a      	strb	r2, [r3, #16]
            emu_cycles(1);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f001 fd6b 	bl	8002e84 <emu_cycles>
            ctx.regs.pc++;
 80013ae:	4b73      	ldr	r3, [pc, #460]	; (800157c <fetch_data+0x4c0>)
 80013b0:	891b      	ldrh	r3, [r3, #8]
 80013b2:	3301      	adds	r3, #1
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b71      	ldr	r3, [pc, #452]	; (800157c <fetch_data+0x4c0>)
 80013b8:	811a      	strh	r2, [r3, #8]
            return;
 80013ba:	e0db      	b.n	8001574 <fetch_data+0x4b8>

        case AM_HL_SPR:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 80013bc:	4b6f      	ldr	r3, [pc, #444]	; (800157c <fetch_data+0x4c0>)
 80013be:	891b      	ldrh	r3, [r3, #8]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f909 	bl	80005d8 <bus_read>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	4b6c      	ldr	r3, [pc, #432]	; (800157c <fetch_data+0x4c0>)
 80013cc:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f001 fd58 	bl	8002e84 <emu_cycles>
            ctx.regs.pc++;
 80013d4:	4b69      	ldr	r3, [pc, #420]	; (800157c <fetch_data+0x4c0>)
 80013d6:	891b      	ldrh	r3, [r3, #8]
 80013d8:	3301      	adds	r3, #1
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b67      	ldr	r3, [pc, #412]	; (800157c <fetch_data+0x4c0>)
 80013de:	811a      	strh	r2, [r3, #8]
            return;
 80013e0:	e0c8      	b.n	8001574 <fetch_data+0x4b8>

        case AM_D8:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 80013e2:	4b66      	ldr	r3, [pc, #408]	; (800157c <fetch_data+0x4c0>)
 80013e4:	891b      	ldrh	r3, [r3, #8]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f8f6 	bl	80005d8 <bus_read>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b62      	ldr	r3, [pc, #392]	; (800157c <fetch_data+0x4c0>)
 80013f2:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f001 fd45 	bl	8002e84 <emu_cycles>
            ctx.regs.pc++;
 80013fa:	4b60      	ldr	r3, [pc, #384]	; (800157c <fetch_data+0x4c0>)
 80013fc:	891b      	ldrh	r3, [r3, #8]
 80013fe:	3301      	adds	r3, #1
 8001400:	b29a      	uxth	r2, r3
 8001402:	4b5e      	ldr	r3, [pc, #376]	; (800157c <fetch_data+0x4c0>)
 8001404:	811a      	strh	r2, [r3, #8]
            return;
 8001406:	e0b5      	b.n	8001574 <fetch_data+0x4b8>

        case AM_A16_R:
        case AM_D16_R: {
            u16 lo = bus_read(ctx.regs.pc);
 8001408:	4b5c      	ldr	r3, [pc, #368]	; (800157c <fetch_data+0x4c0>)
 800140a:	891b      	ldrh	r3, [r3, #8]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f8e3 	bl	80005d8 <bus_read>
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
            emu_cycles(1);
 8001416:	2001      	movs	r0, #1
 8001418:	f001 fd34 	bl	8002e84 <emu_cycles>

            u16 hi = bus_read(ctx.regs.pc + 1);
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <fetch_data+0x4c0>)
 800141e:	891b      	ldrh	r3, [r3, #8]
 8001420:	3301      	adds	r3, #1
 8001422:	b29b      	uxth	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f8d7 	bl	80005d8 <bus_read>
 800142a:	4603      	mov	r3, r0
 800142c:	80bb      	strh	r3, [r7, #4]
            emu_cycles(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f001 fd28 	bl	8002e84 <emu_cycles>

            ctx.mem_dest = lo | (hi << 8);
 8001434:	88bb      	ldrh	r3, [r7, #4]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143e:	4313      	orrs	r3, r2
 8001440:	b21b      	sxth	r3, r3
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b4d      	ldr	r3, [pc, #308]	; (800157c <fetch_data+0x4c0>)
 8001446:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 8001448:	4b4c      	ldr	r3, [pc, #304]	; (800157c <fetch_data+0x4c0>)
 800144a:	2201      	movs	r2, #1
 800144c:	741a      	strb	r2, [r3, #16]

            ctx.regs.pc += 2;
 800144e:	4b4b      	ldr	r3, [pc, #300]	; (800157c <fetch_data+0x4c0>)
 8001450:	891b      	ldrh	r3, [r3, #8]
 8001452:	3302      	adds	r3, #2
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b49      	ldr	r3, [pc, #292]	; (800157c <fetch_data+0x4c0>)
 8001458:	811a      	strh	r2, [r3, #8]
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 800145a:	4b48      	ldr	r3, [pc, #288]	; (800157c <fetch_data+0x4c0>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	78db      	ldrb	r3, [r3, #3]
 8001460:	4618      	mov	r0, r3
 8001462:	f001 f9f9 	bl	8002858 <cpu_read_reg>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <fetch_data+0x4c0>)
 800146c:	819a      	strh	r2, [r3, #12]

        } return;
 800146e:	e081      	b.n	8001574 <fetch_data+0x4b8>

        case AM_MR_D8:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 8001470:	4b42      	ldr	r3, [pc, #264]	; (800157c <fetch_data+0x4c0>)
 8001472:	891b      	ldrh	r3, [r3, #8]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f8af 	bl	80005d8 <bus_read>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	4b3f      	ldr	r3, [pc, #252]	; (800157c <fetch_data+0x4c0>)
 8001480:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 8001482:	2001      	movs	r0, #1
 8001484:	f001 fcfe 	bl	8002e84 <emu_cycles>
            ctx.regs.pc++;
 8001488:	4b3c      	ldr	r3, [pc, #240]	; (800157c <fetch_data+0x4c0>)
 800148a:	891b      	ldrh	r3, [r3, #8]
 800148c:	3301      	adds	r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b3a      	ldr	r3, [pc, #232]	; (800157c <fetch_data+0x4c0>)
 8001492:	811a      	strh	r2, [r3, #8]
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <fetch_data+0x4c0>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	789b      	ldrb	r3, [r3, #2]
 800149a:	4618      	mov	r0, r3
 800149c:	f001 f9dc 	bl	8002858 <cpu_read_reg>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <fetch_data+0x4c0>)
 80014a6:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 80014a8:	4b34      	ldr	r3, [pc, #208]	; (800157c <fetch_data+0x4c0>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	741a      	strb	r2, [r3, #16]
            return;
 80014ae:	e061      	b.n	8001574 <fetch_data+0x4b8>

        case AM_MR:
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 80014b0:	4b32      	ldr	r3, [pc, #200]	; (800157c <fetch_data+0x4c0>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	789b      	ldrb	r3, [r3, #2]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 f9ce 	bl	8002858 <cpu_read_reg>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <fetch_data+0x4c0>)
 80014c2:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <fetch_data+0x4c0>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	741a      	strb	r2, [r3, #16]
            ctx.fetched_data = bus_read(cpu_read_reg(ctx.cur_inst->reg_1));
 80014ca:	4b2c      	ldr	r3, [pc, #176]	; (800157c <fetch_data+0x4c0>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	789b      	ldrb	r3, [r3, #2]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 f9c1 	bl	8002858 <cpu_read_reg>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f87d 	bl	80005d8 <bus_read>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <fetch_data+0x4c0>)
 80014e4:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f001 fccc 	bl	8002e84 <emu_cycles>
            return;
 80014ec:	e042      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_A16: {
            u16 lo = bus_read(ctx.regs.pc);
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <fetch_data+0x4c0>)
 80014f0:	891b      	ldrh	r3, [r3, #8]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f870 	bl	80005d8 <bus_read>
 80014f8:	4603      	mov	r3, r0
 80014fa:	81bb      	strh	r3, [r7, #12]
            emu_cycles(1);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f001 fcc1 	bl	8002e84 <emu_cycles>

            u16 hi = bus_read(ctx.regs.pc + 1);
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <fetch_data+0x4c0>)
 8001504:	891b      	ldrh	r3, [r3, #8]
 8001506:	3301      	adds	r3, #1
 8001508:	b29b      	uxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f864 	bl	80005d8 <bus_read>
 8001510:	4603      	mov	r3, r0
 8001512:	817b      	strh	r3, [r7, #10]
            emu_cycles(1);
 8001514:	2001      	movs	r0, #1
 8001516:	f001 fcb5 	bl	8002e84 <emu_cycles>

            u16 addr = lo | (hi << 8);
 800151a:	897b      	ldrh	r3, [r7, #10]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	b21b      	sxth	r3, r3
 8001528:	813b      	strh	r3, [r7, #8]

            ctx.regs.pc += 2;
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <fetch_data+0x4c0>)
 800152c:	891b      	ldrh	r3, [r3, #8]
 800152e:	3302      	adds	r3, #2
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <fetch_data+0x4c0>)
 8001534:	811a      	strh	r2, [r3, #8]
            ctx.fetched_data = bus_read(addr);
 8001536:	893b      	ldrh	r3, [r7, #8]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f84d 	bl	80005d8 <bus_read>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <fetch_data+0x4c0>)
 8001544:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 8001546:	2001      	movs	r0, #1
 8001548:	f001 fc9c 	bl	8002e84 <emu_cycles>

            return;
 800154c:	e012      	b.n	8001574 <fetch_data+0x4b8>
        }

        default:
            printf("Unknown Addressing Mode! %d (%02X)\n", ctx.cur_inst->mode, ctx.cur_opcode);
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <fetch_data+0x4c0>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	785b      	ldrb	r3, [r3, #1]
 8001554:	4619      	mov	r1, r3
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <fetch_data+0x4c0>)
 8001558:	7c5b      	ldrb	r3, [r3, #17]
 800155a:	461a      	mov	r2, r3
 800155c:	4808      	ldr	r0, [pc, #32]	; (8001580 <fetch_data+0x4c4>)
 800155e:	f010 fb33 	bl	8011bc8 <iprintf>
            exit(-7);
 8001562:	f06f 0006 	mvn.w	r0, #6
 8001566:	f00f f9f7 	bl	8010958 <exit>
        return;
 800156a:	bf00      	nop
 800156c:	e002      	b.n	8001574 <fetch_data+0x4b8>
        case AM_IMP: return;
 800156e:	bf00      	nop
 8001570:	e000      	b.n	8001574 <fetch_data+0x4b8>
            return;
 8001572:	bf00      	nop
            return;
    }
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000ebc 	.word	0x20000ebc
 8001580:	08012c48 	.word	0x08012c48

08001584 <cpu_set_flags>:
#include <stack.h>
#include "main.h"

//processes CPU instructions...

void cpu_set_flags(cpu_context *ctx, int8_t z, int8_t n, int8_t h, int8_t c) {
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	4608      	mov	r0, r1
 800158e:	4611      	mov	r1, r2
 8001590:	461a      	mov	r2, r3
 8001592:	4603      	mov	r3, r0
 8001594:	70fb      	strb	r3, [r7, #3]
 8001596:	460b      	mov	r3, r1
 8001598:	70bb      	strb	r3, [r7, #2]
 800159a:	4613      	mov	r3, r2
 800159c:	707b      	strb	r3, [r7, #1]
    if (z != -1) {
 800159e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a6:	d012      	beq.n	80015ce <cpu_set_flags+0x4a>
        BIT_SET(ctx->regs.f, 7, z);
 80015a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <cpu_set_flags+0x3c>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	785b      	ldrb	r3, [r3, #1]
 80015b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	705a      	strb	r2, [r3, #1]
 80015be:	e006      	b.n	80015ce <cpu_set_flags+0x4a>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	785b      	ldrb	r3, [r3, #1]
 80015c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	705a      	strb	r2, [r3, #1]
    }

    if (n != -1) {
 80015ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015d6:	d012      	beq.n	80015fe <cpu_set_flags+0x7a>
        BIT_SET(ctx->regs.f, 6, n);
 80015d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <cpu_set_flags+0x6c>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	705a      	strb	r2, [r3, #1]
 80015ee:	e006      	b.n	80015fe <cpu_set_flags+0x7a>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	785b      	ldrb	r3, [r3, #1]
 80015f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	705a      	strb	r2, [r3, #1]
    }

    if (h != -1) {
 80015fe:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001606:	d012      	beq.n	800162e <cpu_set_flags+0xaa>
        BIT_SET(ctx->regs.f, 5, h);
 8001608:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <cpu_set_flags+0x9c>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	785b      	ldrb	r3, [r3, #1]
 8001614:	f043 0320 	orr.w	r3, r3, #32
 8001618:	b2da      	uxtb	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	705a      	strb	r2, [r3, #1]
 800161e:	e006      	b.n	800162e <cpu_set_flags+0xaa>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	785b      	ldrb	r3, [r3, #1]
 8001624:	f023 0320 	bic.w	r3, r3, #32
 8001628:	b2da      	uxtb	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	705a      	strb	r2, [r3, #1]
    }

    if (c != -1) {
 800162e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001636:	d012      	beq.n	800165e <cpu_set_flags+0xda>
        BIT_SET(ctx->regs.f, 4, c);
 8001638:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d007      	beq.n	8001650 <cpu_set_flags+0xcc>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	785b      	ldrb	r3, [r3, #1]
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	b2da      	uxtb	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	705a      	strb	r2, [r3, #1]
    }
}
 800164e:	e006      	b.n	800165e <cpu_set_flags+0xda>
        BIT_SET(ctx->regs.f, 4, c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	785b      	ldrb	r3, [r3, #1]
 8001654:	f023 0310 	bic.w	r3, r3, #16
 8001658:	b2da      	uxtb	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	705a      	strb	r2, [r3, #1]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <proc_none>:

static void proc_none(cpu_context *ctx) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    printf("INVALID INSTRUCTION!\n");
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <proc_none+0x1c>)
 8001676:	f010 fb2d 	bl	8011cd4 <puts>
    Error_Handler();
 800167a:	f002 fcf3 	bl	8004064 <Error_Handler>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	08012c6c 	.word	0x08012c6c

0800168c <proc_nop>:

static void proc_nop(cpu_context *ctx) {
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <decode_reg>:
    RT_L,
    RT_HL,
    RT_A
};

reg_type decode_reg(u8 reg) {
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
    if (reg > 0b111) {
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b07      	cmp	r3, #7
 80016ae:	d901      	bls.n	80016b4 <decode_reg+0x14>
        return RT_NONE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	e002      	b.n	80016ba <decode_reg+0x1a>
    }

    return rt_lookup[reg];
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <decode_reg+0x28>)
 80016b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000320 	.word	0x20000320

080016cc <proc_cb>:

static void proc_cb(cpu_context *ctx) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	6078      	str	r0, [r7, #4]
    u8 op = ctx->fetched_data;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	899b      	ldrh	r3, [r3, #12]
 80016d8:	757b      	strb	r3, [r7, #21]
    reg_type reg = decode_reg(op & 0b111);
 80016da:	7d7b      	ldrb	r3, [r7, #21]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ffdc 	bl	80016a0 <decode_reg>
 80016e8:	4603      	mov	r3, r0
 80016ea:	753b      	strb	r3, [r7, #20]
    u8 bit = (op >> 3) & 0b111;
 80016ec:	7d7b      	ldrb	r3, [r7, #21]
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	74fb      	strb	r3, [r7, #19]
    u8 bit_op = (op >> 6) & 0b11;
 80016f8:	7d7b      	ldrb	r3, [r7, #21]
 80016fa:	099b      	lsrs	r3, r3, #6
 80016fc:	74bb      	strb	r3, [r7, #18]
    u8 reg_val = cpu_read_reg8(reg);
 80016fe:	7d3b      	ldrb	r3, [r7, #20]
 8001700:	4618      	mov	r0, r3
 8001702:	f001 f9ab 	bl	8002a5c <cpu_read_reg8>
 8001706:	4603      	mov	r3, r0
 8001708:	747b      	strb	r3, [r7, #17]

    emu_cycles(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f001 fbba 	bl	8002e84 <emu_cycles>

    if (reg == RT_HL) {
 8001710:	7d3b      	ldrb	r3, [r7, #20]
 8001712:	2b0c      	cmp	r3, #12
 8001714:	d102      	bne.n	800171c <proc_cb+0x50>
        emu_cycles(2);
 8001716:	2002      	movs	r0, #2
 8001718:	f001 fbb4 	bl	8002e84 <emu_cycles>
    }

    switch(bit_op) {
 800171c:	7cbb      	ldrb	r3, [r7, #18]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d02e      	beq.n	8001780 <proc_cb+0xb4>
 8001722:	2b03      	cmp	r3, #3
 8001724:	dc3d      	bgt.n	80017a2 <proc_cb+0xd6>
 8001726:	2b01      	cmp	r3, #1
 8001728:	d002      	beq.n	8001730 <proc_cb+0x64>
 800172a:	2b02      	cmp	r3, #2
 800172c:	d015      	beq.n	800175a <proc_cb+0x8e>
 800172e:	e038      	b.n	80017a2 <proc_cb+0xd6>
        case 1:
            //BIT
            cpu_set_flags(ctx, !(reg_val & (1 << bit)), 0, 1, -1);
 8001730:	7c7a      	ldrb	r2, [r7, #17]
 8001732:	7cfb      	ldrb	r3, [r7, #19]
 8001734:	fa42 f303 	asr.w	r3, r2, r3
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf0c      	ite	eq
 8001740:	2301      	moveq	r3, #1
 8001742:	2300      	movne	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	b259      	sxtb	r1, r3
 8001748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	2200      	movs	r2, #0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff16 	bl	8001584 <cpu_set_flags>
            return;
 8001758:	e164      	b.n	8001a24 <proc_cb+0x358>

        case 2:
            //RST
            reg_val &= ~(1 << bit);
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	2201      	movs	r2, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	b25b      	sxtb	r3, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	b25a      	sxtb	r2, r3
 8001768:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800176c:	4013      	ands	r3, r2
 800176e:	b25b      	sxtb	r3, r3
 8001770:	747b      	strb	r3, [r7, #17]
            cpu_set_reg8(reg, reg_val);
 8001772:	7c7a      	ldrb	r2, [r7, #17]
 8001774:	7d3b      	ldrb	r3, [r7, #20]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f001 f9d1 	bl	8002b20 <cpu_set_reg8>
            return;
 800177e:	e151      	b.n	8001a24 <proc_cb+0x358>

        case 3:
            //SET
            reg_val |= (1 << bit);
 8001780:	7cfb      	ldrb	r3, [r7, #19]
 8001782:	2201      	movs	r2, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	b25a      	sxtb	r2, r3
 800178a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800178e:	4313      	orrs	r3, r2
 8001790:	b25b      	sxtb	r3, r3
 8001792:	747b      	strb	r3, [r7, #17]
            cpu_set_reg8(reg, reg_val);
 8001794:	7c7a      	ldrb	r2, [r7, #17]
 8001796:	7d3b      	ldrb	r3, [r7, #20]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f001 f9c0 	bl	8002b20 <cpu_set_reg8>
            return;
 80017a0:	e140      	b.n	8001a24 <proc_cb+0x358>
    }

    bool flagC = CPU_FLAG_C;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	785b      	ldrb	r3, [r3, #1]
 80017a6:	111b      	asrs	r3, r3, #4
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf14      	ite	ne
 80017b0:	2301      	movne	r3, #1
 80017b2:	2300      	moveq	r3, #0
 80017b4:	743b      	strb	r3, [r7, #16]

    switch(bit) {
 80017b6:	7cfb      	ldrb	r3, [r7, #19]
 80017b8:	2b07      	cmp	r3, #7
 80017ba:	f200 811f 	bhi.w	80019fc <proc_cb+0x330>
 80017be:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <proc_cb+0xf8>)
 80017c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c4:	080017e5 	.word	0x080017e5
 80017c8:	0800182f 	.word	0x0800182f
 80017cc:	0800187b 	.word	0x0800187b
 80017d0:	080018c1 	.word	0x080018c1
 80017d4:	0800190d 	.word	0x0800190d
 80017d8:	0800194b 	.word	0x0800194b
 80017dc:	08001987 	.word	0x08001987
 80017e0:	080019c5 	.word	0x080019c5
        case 0: {
            //RLC
            bool setC = false;
 80017e4:	2300      	movs	r3, #0
 80017e6:	75fb      	strb	r3, [r7, #23]
            u8 result = (reg_val << 1) & 0xFF;
 80017e8:	7c7b      	ldrb	r3, [r7, #17]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	75bb      	strb	r3, [r7, #22]

            if ((reg_val & (1 << 7)) != 0) {
 80017ee:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da05      	bge.n	8001802 <proc_cb+0x136>
                result |= 1;
 80017f6:	7dbb      	ldrb	r3, [r7, #22]
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	75bb      	strb	r3, [r7, #22]
                setC = true;
 80017fe:	2301      	movs	r3, #1
 8001800:	75fb      	strb	r3, [r7, #23]
            }

            cpu_set_reg8(reg, result);
 8001802:	7dba      	ldrb	r2, [r7, #22]
 8001804:	7d3b      	ldrb	r3, [r7, #20]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f001 f989 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, result == 0, false, false, setC);
 800180e:	7dbb      	ldrb	r3, [r7, #22]
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	b259      	sxtb	r1, r3
 800181c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2300      	movs	r3, #0
 8001824:	2200      	movs	r2, #0
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff feac 	bl	8001584 <cpu_set_flags>
        } return;
 800182c:	e0fa      	b.n	8001a24 <proc_cb+0x358>

        case 1: {
            //RRC
            u8 old = reg_val;
 800182e:	7c7b      	ldrb	r3, [r7, #17]
 8001830:	72bb      	strb	r3, [r7, #10]
            reg_val >>= 1;
 8001832:	7c7b      	ldrb	r3, [r7, #17]
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	747b      	strb	r3, [r7, #17]
            reg_val |= (old << 7);
 8001838:	7abb      	ldrb	r3, [r7, #10]
 800183a:	01db      	lsls	r3, r3, #7
 800183c:	b25a      	sxtb	r2, r3
 800183e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001842:	4313      	orrs	r3, r2
 8001844:	b25b      	sxtb	r3, r3
 8001846:	747b      	strb	r3, [r7, #17]

            cpu_set_reg8(reg, reg_val);
 8001848:	7c7a      	ldrb	r2, [r7, #17]
 800184a:	7d3b      	ldrb	r3, [r7, #20]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f001 f966 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, !reg_val, false, false, old & 1);
 8001854:	7c7b      	ldrb	r3, [r7, #17]
 8001856:	2b00      	cmp	r3, #0
 8001858:	bf0c      	ite	eq
 800185a:	2301      	moveq	r3, #1
 800185c:	2300      	movne	r3, #0
 800185e:	b2db      	uxtb	r3, r3
 8001860:	b259      	sxtb	r1, r3
 8001862:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	b25b      	sxtb	r3, r3
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2300      	movs	r3, #0
 8001870:	2200      	movs	r2, #0
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fe86 	bl	8001584 <cpu_set_flags>
        } return;
 8001878:	e0d4      	b.n	8001a24 <proc_cb+0x358>

        case 2: {
            //RL
            u8 old = reg_val;
 800187a:	7c7b      	ldrb	r3, [r7, #17]
 800187c:	72fb      	strb	r3, [r7, #11]
            reg_val <<= 1;
 800187e:	7c7b      	ldrb	r3, [r7, #17]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	747b      	strb	r3, [r7, #17]
            reg_val |= flagC;
 8001884:	7c3a      	ldrb	r2, [r7, #16]
 8001886:	7c7b      	ldrb	r3, [r7, #17]
 8001888:	4313      	orrs	r3, r2
 800188a:	747b      	strb	r3, [r7, #17]

            cpu_set_reg8(reg, reg_val);
 800188c:	7c7a      	ldrb	r2, [r7, #17]
 800188e:	7d3b      	ldrb	r3, [r7, #20]
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f001 f944 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, !reg_val, false, false, !!(old & 0x80));
 8001898:	7c7b      	ldrb	r3, [r7, #17]
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	b259      	sxtb	r1, r3
 80018a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	09db      	lsrs	r3, r3, #7
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	b25b      	sxtb	r3, r3
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2300      	movs	r3, #0
 80018b6:	2200      	movs	r2, #0
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff fe63 	bl	8001584 <cpu_set_flags>
        } return;
 80018be:	e0b1      	b.n	8001a24 <proc_cb+0x358>

        case 3: {
            //RR
            u8 old = reg_val;
 80018c0:	7c7b      	ldrb	r3, [r7, #17]
 80018c2:	733b      	strb	r3, [r7, #12]
            reg_val >>= 1;
 80018c4:	7c7b      	ldrb	r3, [r7, #17]
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	747b      	strb	r3, [r7, #17]

            reg_val |= (flagC << 7);
 80018ca:	7c3b      	ldrb	r3, [r7, #16]
 80018cc:	01db      	lsls	r3, r3, #7
 80018ce:	b25a      	sxtb	r2, r3
 80018d0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b25b      	sxtb	r3, r3
 80018d8:	747b      	strb	r3, [r7, #17]

            cpu_set_reg8(reg, reg_val);
 80018da:	7c7a      	ldrb	r2, [r7, #17]
 80018dc:	7d3b      	ldrb	r3, [r7, #20]
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 f91d 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, !reg_val, false, false, old & 1);
 80018e6:	7c7b      	ldrb	r3, [r7, #17]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf0c      	ite	eq
 80018ec:	2301      	moveq	r3, #1
 80018ee:	2300      	movne	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	b259      	sxtb	r1, r3
 80018f4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2300      	movs	r3, #0
 8001902:	2200      	movs	r2, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fe3d 	bl	8001584 <cpu_set_flags>
        } return;
 800190a:	e08b      	b.n	8001a24 <proc_cb+0x358>

        case 4: {
            //SLA
            u8 old = reg_val;
 800190c:	7c7b      	ldrb	r3, [r7, #17]
 800190e:	737b      	strb	r3, [r7, #13]
            reg_val <<= 1;
 8001910:	7c7b      	ldrb	r3, [r7, #17]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	747b      	strb	r3, [r7, #17]

            cpu_set_reg8(reg, reg_val);
 8001916:	7c7a      	ldrb	r2, [r7, #17]
 8001918:	7d3b      	ldrb	r3, [r7, #20]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f001 f8ff 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, !reg_val, false, false, !!(old & 0x80));
 8001922:	7c7b      	ldrb	r3, [r7, #17]
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	b259      	sxtb	r1, r3
 8001930:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	09db      	lsrs	r3, r3, #7
 8001938:	b2db      	uxtb	r3, r3
 800193a:	b25b      	sxtb	r3, r3
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2300      	movs	r3, #0
 8001940:	2200      	movs	r2, #0
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fe1e 	bl	8001584 <cpu_set_flags>
        } return;
 8001948:	e06c      	b.n	8001a24 <proc_cb+0x358>

        case 5: {
            //SRA
            u8 u = (int8_t)reg_val >> 1;
 800194a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800194e:	105b      	asrs	r3, r3, #1
 8001950:	b25b      	sxtb	r3, r3
 8001952:	73bb      	strb	r3, [r7, #14]
            cpu_set_reg8(reg, u);
 8001954:	7bba      	ldrb	r2, [r7, #14]
 8001956:	7d3b      	ldrb	r3, [r7, #20]
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f001 f8e0 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, !u, 0, 0, reg_val & 1);
 8001960:	7bbb      	ldrb	r3, [r7, #14]
 8001962:	2b00      	cmp	r3, #0
 8001964:	bf0c      	ite	eq
 8001966:	2301      	moveq	r3, #1
 8001968:	2300      	movne	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	b259      	sxtb	r1, r3
 800196e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	b25b      	sxtb	r3, r3
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2300      	movs	r3, #0
 800197c:	2200      	movs	r2, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fe00 	bl	8001584 <cpu_set_flags>
        } return;
 8001984:	e04e      	b.n	8001a24 <proc_cb+0x358>

        case 6: {
            //SWAP
            reg_val = ((reg_val & 0xF0) >> 4) | ((reg_val & 0xF) << 4);
 8001986:	7c7b      	ldrb	r3, [r7, #17]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	b2db      	uxtb	r3, r3
 800198c:	b25a      	sxtb	r2, r3
 800198e:	7c7b      	ldrb	r3, [r7, #17]
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	b25b      	sxtb	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b25b      	sxtb	r3, r3
 8001998:	747b      	strb	r3, [r7, #17]
            cpu_set_reg8(reg, reg_val);
 800199a:	7c7a      	ldrb	r2, [r7, #17]
 800199c:	7d3b      	ldrb	r3, [r7, #20]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 f8bd 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, reg_val == 0, false, false, false);
 80019a6:	7c7b      	ldrb	r3, [r7, #17]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf0c      	ite	eq
 80019ac:	2301      	moveq	r3, #1
 80019ae:	2300      	movne	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	b259      	sxtb	r1, r3
 80019b4:	2300      	movs	r3, #0
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2300      	movs	r3, #0
 80019ba:	2200      	movs	r2, #0
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fde1 	bl	8001584 <cpu_set_flags>
        } return;
 80019c2:	e02f      	b.n	8001a24 <proc_cb+0x358>

        case 7: {
            //SRL
            u8 u = reg_val >> 1;
 80019c4:	7c7b      	ldrb	r3, [r7, #17]
 80019c6:	085b      	lsrs	r3, r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
            cpu_set_reg8(reg, u);
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	7d3b      	ldrb	r3, [r7, #20]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 f8a5 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, !u, 0, 0, reg_val & 1);
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	b259      	sxtb	r1, r3
 80019e4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2300      	movs	r3, #0
 80019f2:	2200      	movs	r2, #0
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fdc5 	bl	8001584 <cpu_set_flags>
        } return;
 80019fa:	e013      	b.n	8001a24 <proc_cb+0x358>
    }

    fprintf(stderr, "ERROR: INVALID CB: %02X", op);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <proc_cb+0x360>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	7d7a      	ldrb	r2, [r7, #21]
 8001a04:	490a      	ldr	r1, [pc, #40]	; (8001a30 <proc_cb+0x364>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f00f fa34 	bl	8010e74 <fiprintf>
    NO_IMPL
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <proc_cb+0x360>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2214      	movs	r2, #20
 8001a14:	2101      	movs	r1, #1
 8001a16:	4807      	ldr	r0, [pc, #28]	; (8001a34 <proc_cb+0x368>)
 8001a18:	f00f fc6c 	bl	80112f4 <fwrite>
 8001a1c:	f06f 0004 	mvn.w	r0, #4
 8001a20:	f00e ff9a 	bl	8010958 <exit>
}
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200009dc 	.word	0x200009dc
 8001a30:	08012c84 	.word	0x08012c84
 8001a34:	08012c9c 	.word	0x08012c9c

08001a38 <proc_rlca>:

static void proc_rlca(cpu_context *ctx) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	6078      	str	r0, [r7, #4]
    u8 u = ctx->regs.a;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	73fb      	strb	r3, [r7, #15]
    bool c = (u >> 7) & 1;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	09db      	lsrs	r3, r3, #7
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf14      	ite	ne
 8001a54:	2301      	movne	r3, #1
 8001a56:	2300      	moveq	r3, #0
 8001a58:	73bb      	strb	r3, [r7, #14]
    u = (u << 1) | c;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	b25a      	sxtb	r2, r3
 8001a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	73fb      	strb	r3, [r7, #15]
    ctx->regs.a = u;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, 0, 0, 0, c);
 8001a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2300      	movs	r3, #0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff fd81 	bl	8001584 <cpu_set_flags>
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <proc_rrca>:

static void proc_rrca(cpu_context *ctx) {
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af02      	add	r7, sp, #8
 8001a90:	6078      	str	r0, [r7, #4]
    u8 b = ctx->regs.a & 1;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
    ctx->regs.a >>= 1;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	085b      	lsrs	r3, r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	701a      	strb	r2, [r3, #0]
    ctx->regs.a |= (b << 7);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b25a      	sxtb	r2, r3
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	01db      	lsls	r3, r3, #7
 8001ab2:	b25b      	sxtb	r3, r3
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, 0, 0, 0, b);
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fd5a 	bl	8001584 <cpu_set_flags>
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <proc_rla>:


static void proc_rla(cpu_context *ctx) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	6078      	str	r0, [r7, #4]
    u8 u = ctx->regs.a;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	73fb      	strb	r3, [r7, #15]
    u8 cf = CPU_FLAG_C;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	111b      	asrs	r3, r3, #4
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	73bb      	strb	r3, [r7, #14]
    u8 c = (u >> 7) & 1;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	09db      	lsrs	r3, r3, #7
 8001af8:	737b      	strb	r3, [r7, #13]

    ctx->regs.a = (u << 1) | cf;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	b25a      	sxtb	r2, r3
 8001b00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, 0, 0, 0, c);
 8001b0e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2300      	movs	r3, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fd32 	bl	8001584 <cpu_set_flags>
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <proc_stop>:

static void proc_stop(cpu_context *ctx) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    fprintf(stderr, "STOPPING!\n");
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <proc_stop+0x20>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	220a      	movs	r2, #10
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4804      	ldr	r0, [pc, #16]	; (8001b4c <proc_stop+0x24>)
 8001b3c:	f00f fbda 	bl	80112f4 <fwrite>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200009dc 	.word	0x200009dc
 8001b4c:	08012cb4 	.word	0x08012cb4

08001b50 <proc_daa>:

static void proc_daa(cpu_context *ctx) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	6078      	str	r0, [r7, #4]
    u8 u = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]
    int fc = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]

    if (CPU_FLAG_H || (!CPU_FLAG_N && (ctx->regs.a & 0xF) > 9)) {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	785b      	ldrb	r3, [r3, #1]
 8001b64:	115b      	asrs	r3, r3, #5
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10b      	bne.n	8001b88 <proc_daa+0x38>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	785b      	ldrb	r3, [r3, #1]
 8001b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d107      	bne.n	8001b8c <proc_daa+0x3c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	2b09      	cmp	r3, #9
 8001b86:	dd01      	ble.n	8001b8c <proc_daa+0x3c>
        u = 6;
 8001b88:	2306      	movs	r3, #6
 8001b8a:	73fb      	strb	r3, [r7, #15]
    }

    if (CPU_FLAG_C || (!CPU_FLAG_N && ctx->regs.a > 0x99)) {
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	785b      	ldrb	r3, [r3, #1]
 8001b90:	111b      	asrs	r3, r3, #4
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <proc_daa+0x60>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	785b      	ldrb	r3, [r3, #1]
 8001ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <proc_daa+0x6c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b99      	cmp	r3, #153	; 0x99
 8001bae:	d905      	bls.n	8001bbc <proc_daa+0x6c>
        u |= 0x60;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bb6:	73fb      	strb	r3, [r7, #15]
        fc = 1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
    }

    ctx->regs.a += CPU_FLAG_N ? -u : u;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	119b      	asrs	r3, r3, #6
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <proc_daa+0x88>
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	425b      	negs	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e000      	b.n	8001bda <proc_daa+0x8a>
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	4413      	add	r3, r2
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, ctx->regs.a == 0, -1, 0, fc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf0c      	ite	eq
 8001bea:	2301      	moveq	r3, #1
 8001bec:	2300      	movne	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	b259      	sxtb	r1, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fcc0 	bl	8001584 <cpu_set_flags>
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <proc_cpl>:

static void proc_cpl(cpu_context *ctx) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	6078      	str	r0, [r7, #4]
    ctx->regs.a = ~ctx->regs.a;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, -1, 1, 1, -1);
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2301      	movs	r3, #1
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fca8 	bl	8001584 <cpu_set_flags>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <proc_scf>:

static void proc_scf(cpu_context *ctx) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	6078      	str	r0, [r7, #4]
    cpu_set_flags(ctx, -1, 0, 0, 1);
 8001c44:	2301      	movs	r3, #1
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fc97 	bl	8001584 <cpu_set_flags>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <proc_ccf>:

static void proc_ccf(cpu_context *ctx) {
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af02      	add	r7, sp, #8
 8001c64:	6078      	str	r0, [r7, #4]
    cpu_set_flags(ctx, -1, 0, 0, CPU_FLAG_C ^ 1);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	785b      	ldrb	r3, [r3, #1]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf0c      	ite	eq
 8001c72:	2301      	moveq	r3, #1
 8001c74:	2300      	movne	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	b25b      	sxtb	r3, r3
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fc7d 	bl	8001584 <cpu_set_flags>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <proc_halt>:

static void proc_halt(cpu_context *ctx) {
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
    ctx->halted = true;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	761a      	strb	r2, [r3, #24]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <proc_rra>:

static void proc_rra(cpu_context *ctx) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	6078      	str	r0, [r7, #4]
    u8 carry = CPU_FLAG_C;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	785b      	ldrb	r3, [r3, #1]
 8001cb8:	111b      	asrs	r3, r3, #4
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
    u8 new_c = ctx->regs.a & 1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	73bb      	strb	r3, [r7, #14]

    ctx->regs.a >>= 1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	701a      	strb	r2, [r3, #0]
    ctx->regs.a |= (carry << 7);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b25a      	sxtb	r2, r3
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	01db      	lsls	r3, r3, #7
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, 0, 0, 0, new_c);
 8001cee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fc42 	bl	8001584 <cpu_set_flags>
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <proc_and>:

static void proc_and(cpu_context *ctx) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	6078      	str	r0, [r7, #4]
    ctx->regs.a &= ctx->fetched_data;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	899b      	ldrh	r3, [r3, #12]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 1, 0);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	bf0c      	ite	eq
 8001d2a:	2301      	moveq	r3, #1
 8001d2c:	2300      	movne	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	b259      	sxtb	r1, r3
 8001d32:	2300      	movs	r3, #0
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2301      	movs	r3, #1
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fc22 	bl	8001584 <cpu_set_flags>
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <proc_xor>:

static void proc_xor(cpu_context *ctx) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	6078      	str	r0, [r7, #4]
    ctx->regs.a ^= ctx->fetched_data & 0xFF;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b25a      	sxtb	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	899b      	ldrh	r3, [r3, #12]
 8001d5a:	b25b      	sxtb	r3, r3
 8001d5c:	4053      	eors	r3, r2
 8001d5e:	b25b      	sxtb	r3, r3
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 0, 0);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2301      	moveq	r3, #1
 8001d70:	2300      	movne	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	b259      	sxtb	r1, r3
 8001d76:	2300      	movs	r3, #0
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff fc00 	bl	8001584 <cpu_set_flags>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <proc_or>:

static void proc_or(cpu_context *ctx) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	6078      	str	r0, [r7, #4]
    ctx->regs.a |= ctx->fetched_data & 0xFF;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b25a      	sxtb	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	899b      	ldrh	r3, [r3, #12]
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	4313      	orrs	r3, r2
 8001da2:	b25b      	sxtb	r3, r3
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 0, 0);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	b259      	sxtb	r1, r3
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fbde 	bl	8001584 <cpu_set_flags>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <proc_cp>:

static void proc_cp(cpu_context *ctx) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	6078      	str	r0, [r7, #4]
    int n = (int)ctx->regs.a - (int)ctx->fetched_data;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	899b      	ldrh	r3, [r3, #12]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	60fb      	str	r3, [r7, #12]

    cpu_set_flags(ctx, n == 0, 1, 
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	b259      	sxtb	r1, r3
        ((int)ctx->regs.a & 0x0F) - ((int)ctx->fetched_data & 0x0F) < 0, n < 0);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	f003 020f 	and.w	r2, r3, #15
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	899b      	ldrh	r3, [r3, #12]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	1ad3      	subs	r3, r2, r3
    cpu_set_flags(ctx, n == 0, 1, 
 8001e06:	0fdb      	lsrs	r3, r3, #31
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	b25a      	sxtb	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	0fdb      	lsrs	r3, r3, #31
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	4613      	mov	r3, r2
 8001e18:	2201      	movs	r2, #1
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff fbb2 	bl	8001584 <cpu_set_flags>
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <proc_di>:

static void proc_di(cpu_context *ctx) {
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    ctx->int_master_enabled = false;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	769a      	strb	r2, [r3, #26]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <proc_ei>:

static void proc_ei(cpu_context *ctx) {
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
    ctx->enabling_ime = true;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	76da      	strb	r2, [r3, #27]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <is_16_bit>:

static bool is_16_bit(reg_type rt) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
    return rt >= RT_AF;
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	bf8c      	ite	hi
 8001e6c:	2301      	movhi	r3, #1
 8001e6e:	2300      	movls	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <proc_ld>:

static void proc_ld(cpu_context *ctx) {
 8001e7e:	b590      	push	{r4, r7, lr}
 8001e80:	b087      	sub	sp, #28
 8001e82:	af02      	add	r7, sp, #8
 8001e84:	6078      	str	r0, [r7, #4]
    if (ctx->dest_is_mem) {
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7c1b      	ldrb	r3, [r3, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d021      	beq.n	8001ed2 <proc_ld+0x54>
        //LD (BC), A for instance...

        if (is_16_bit(ctx->cur_inst->reg_2)) {
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	78db      	ldrb	r3, [r3, #3]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ffe1 	bl	8001e5c <is_16_bit>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00b      	beq.n	8001eb8 <proc_ld+0x3a>
            //if 16 bit register...
            emu_cycles(1);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f000 ffef 	bl	8002e84 <emu_cycles>
            bus_write16(ctx->mem_dest, ctx->fetched_data);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	89da      	ldrh	r2, [r3, #14]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	899b      	ldrh	r3, [r3, #12]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f7fe fc67 	bl	8000784 <bus_write16>
 8001eb6:	e008      	b.n	8001eca <proc_ld+0x4c>
        } else {
            bus_write(ctx->mem_dest, ctx->fetched_data);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	89da      	ldrh	r2, [r3, #14]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	899b      	ldrh	r3, [r3, #12]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f7fe fbef 	bl	80006a8 <bus_write>
        }

        emu_cycles(1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f000 ffda 	bl	8002e84 <emu_cycles>

        return;
 8001ed0:	e054      	b.n	8001f7c <proc_ld+0xfe>
    }

    if (ctx->cur_inst->mode == AM_HL_SPR) {
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	785b      	ldrb	r3, [r3, #1]
 8001ed8:	2b0d      	cmp	r3, #13
 8001eda:	d146      	bne.n	8001f6a <proc_ld+0xec>
        u8 hflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xF) + 
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	78db      	ldrb	r3, [r3, #3]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fcb8 	bl	8002858 <cpu_read_reg>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f003 020f 	and.w	r2, r3, #15
            (ctx->fetched_data & 0xF) >= 0x10;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	899b      	ldrh	r3, [r3, #12]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
        u8 hflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xF) + 
 8001ef6:	4413      	add	r3, r2
            (ctx->fetched_data & 0xF) >= 0x10;
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	bfcc      	ite	gt
 8001efc:	2301      	movgt	r3, #1
 8001efe:	2300      	movle	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
        u8 hflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xF) + 
 8001f02:	73fb      	strb	r3, [r7, #15]

        u8 cflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xFF) + 
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	78db      	ldrb	r3, [r3, #3]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fca4 	bl	8002858 <cpu_read_reg>
 8001f10:	4603      	mov	r3, r0
 8001f12:	b2da      	uxtb	r2, r3
            (ctx->fetched_data & 0xFF) >= 0x100;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	899b      	ldrh	r3, [r3, #12]
 8001f18:	b2db      	uxtb	r3, r3
        u8 cflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xFF) + 
 8001f1a:	4413      	add	r3, r2
            (ctx->fetched_data & 0xFF) >= 0x100;
 8001f1c:	2bff      	cmp	r3, #255	; 0xff
 8001f1e:	bfcc      	ite	gt
 8001f20:	2301      	movgt	r3, #1
 8001f22:	2300      	movle	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
        u8 cflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xFF) + 
 8001f26:	73bb      	strb	r3, [r7, #14]

        cpu_set_flags(ctx, 0, 0, hflag, cflag);
 8001f28:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	4613      	mov	r3, r2
 8001f34:	2200      	movs	r2, #0
 8001f36:	2100      	movs	r1, #0
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fb23 	bl	8001584 <cpu_set_flags>
        cpu_set_reg(ctx->cur_inst->reg_1, 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	789c      	ldrb	r4, [r3, #2]
            cpu_read_reg(ctx->cur_inst->reg_2) + (int8_t)ctx->fetched_data);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	78db      	ldrb	r3, [r3, #3]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fc84 	bl	8002858 <cpu_read_reg>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	899b      	ldrh	r3, [r3, #12]
 8001f58:	b25b      	sxtb	r3, r3
 8001f5a:	b29b      	uxth	r3, r3
        cpu_set_reg(ctx->cur_inst->reg_1, 
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4619      	mov	r1, r3
 8001f62:	4620      	mov	r0, r4
 8001f64:	f000 fcf0 	bl	8002948 <cpu_set_reg>

        return;
 8001f68:	e008      	b.n	8001f7c <proc_ld+0xfe>
    }

    cpu_set_reg(ctx->cur_inst->reg_1, ctx->fetched_data);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	789a      	ldrb	r2, [r3, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	899b      	ldrh	r3, [r3, #12]
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f000 fce6 	bl	8002948 <cpu_set_reg>
}
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd90      	pop	{r4, r7, pc}

08001f82 <proc_ldh>:

static void proc_ldh(cpu_context *ctx) {
 8001f82:	b590      	push	{r4, r7, lr}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
    if (ctx->cur_inst->reg_1 == RT_A) {
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	789b      	ldrb	r3, [r3, #2]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d111      	bne.n	8001fb8 <proc_ldh+0x36>
        cpu_set_reg(ctx->cur_inst->reg_1, bus_read(0xFF00 | ctx->fetched_data));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	789c      	ldrb	r4, [r3, #2]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	899b      	ldrh	r3, [r3, #12]
 8001f9e:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fb17 	bl	80005d8 <bus_read>
 8001faa:	4603      	mov	r3, r0
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f000 fcc9 	bl	8002948 <cpu_set_reg>
 8001fb6:	e007      	b.n	8001fc8 <proc_ldh+0x46>
    } else {
        bus_write(ctx->mem_dest, ctx->regs.a);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	89da      	ldrh	r2, [r3, #14]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f7fe fb70 	bl	80006a8 <bus_write>
    }

    emu_cycles(1);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f000 ff5b 	bl	8002e84 <emu_cycles>
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}
	...

08001fd8 <check_cond>:


static bool check_cond(cpu_context *ctx) {
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
    bool z = CPU_FLAG_Z;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	785b      	ldrb	r3, [r3, #1]
 8001fe4:	b25b      	sxtb	r3, r3
 8001fe6:	11db      	asrs	r3, r3, #7
 8001fe8:	b25b      	sxtb	r3, r3
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bf14      	ite	ne
 8001ff2:	2301      	movne	r3, #1
 8001ff4:	2300      	moveq	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
    bool c = CPU_FLAG_C;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	785b      	ldrb	r3, [r3, #1]
 8001ffc:	111b      	asrs	r3, r3, #4
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	73bb      	strb	r3, [r7, #14]

    switch(ctx->cur_inst->cond) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	791b      	ldrb	r3, [r3, #4]
 8002012:	2b04      	cmp	r3, #4
 8002014:	d82c      	bhi.n	8002070 <check_cond+0x98>
 8002016:	a201      	add	r2, pc, #4	; (adr r2, 800201c <check_cond+0x44>)
 8002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201c:	08002031 	.word	0x08002031
 8002020:	08002057 	.word	0x08002057
 8002024:	08002053 	.word	0x08002053
 8002028:	08002039 	.word	0x08002039
 800202c:	08002035 	.word	0x08002035
        case CT_NONE: return true;
 8002030:	2301      	movs	r3, #1
 8002032:	e01e      	b.n	8002072 <check_cond+0x9a>
        case CT_C: return c;
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	e01c      	b.n	8002072 <check_cond+0x9a>
        case CT_NC: return !c;
 8002038:	7bbb      	ldrb	r3, [r7, #14]
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f083 0301 	eor.w	r3, r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	e00f      	b.n	8002072 <check_cond+0x9a>
        case CT_Z: return z;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	e00d      	b.n	8002072 <check_cond+0x9a>
        case CT_NZ: return !z;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f083 0301 	eor.w	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e000      	b.n	8002072 <check_cond+0x9a>
    }

    return false;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop

08002080 <goto_addr>:

static void goto_addr(cpu_context *ctx, u16 addr, bool pushpc) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
    if (check_cond(ctx)) {
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ffa1 	bl	8001fd8 <check_cond>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d010      	beq.n	80020be <goto_addr+0x3e>
        if (pushpc) {
 800209c:	787b      	ldrb	r3, [r7, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <goto_addr+0x32>
            emu_cycles(2);
 80020a2:	2002      	movs	r0, #2
 80020a4:	f000 feee 	bl	8002e84 <emu_cycles>
            stack_push16(ctx->regs.pc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	891b      	ldrh	r3, [r3, #8]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 f9d0 	bl	8005452 <stack_push16>
        }

        ctx->regs.pc = addr;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	887a      	ldrh	r2, [r7, #2]
 80020b6:	811a      	strh	r2, [r3, #8]
        emu_cycles(1);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f000 fee3 	bl	8002e84 <emu_cycles>
    }
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <proc_jp>:

static void proc_jp(cpu_context *ctx) {
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
    goto_addr(ctx, ctx->fetched_data, false);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	899b      	ldrh	r3, [r3, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	4619      	mov	r1, r3
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ffd2 	bl	8002080 <goto_addr>
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <proc_jr>:

static void proc_jr(cpu_context *ctx) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    int8_t rel = (int8_t)(ctx->fetched_data & 0xFF);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	899b      	ldrh	r3, [r3, #12]
 80020f0:	73fb      	strb	r3, [r7, #15]
    u16 addr = ctx->regs.pc + rel;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	891a      	ldrh	r2, [r3, #8]
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	81bb      	strh	r3, [r7, #12]
    goto_addr(ctx, addr, false);
 8002100:	89bb      	ldrh	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	4619      	mov	r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ffba 	bl	8002080 <goto_addr>
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <proc_call>:

static void proc_call(cpu_context *ctx) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    goto_addr(ctx, ctx->fetched_data, true);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	899b      	ldrh	r3, [r3, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	4619      	mov	r1, r3
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ffab 	bl	8002080 <goto_addr>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <proc_rst>:

static void proc_rst(cpu_context *ctx) {
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
    goto_addr(ctx, ctx->cur_inst->param, true);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	795b      	ldrb	r3, [r3, #5]
 8002140:	b29b      	uxth	r3, r3
 8002142:	2201      	movs	r2, #1
 8002144:	4619      	mov	r1, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ff9a 	bl	8002080 <goto_addr>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <proc_ret>:

static void proc_ret(cpu_context *ctx) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    if (ctx->cur_inst->cond != CT_NONE) {
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	791b      	ldrb	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <proc_ret+0x18>
        emu_cycles(1);
 8002166:	2001      	movs	r0, #1
 8002168:	f000 fe8c 	bl	8002e84 <emu_cycles>
    }

    if (check_cond(ctx)) {
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff33 	bl	8001fd8 <check_cond>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01b      	beq.n	80021b0 <proc_ret+0x5c>
        u16 lo = stack_pop();
 8002178:	f003 f980 	bl	800547c <stack_pop>
 800217c:	4603      	mov	r3, r0
 800217e:	81fb      	strh	r3, [r7, #14]
        emu_cycles(1);
 8002180:	2001      	movs	r0, #1
 8002182:	f000 fe7f 	bl	8002e84 <emu_cycles>
        u16 hi = stack_pop();
 8002186:	f003 f979 	bl	800547c <stack_pop>
 800218a:	4603      	mov	r3, r0
 800218c:	81bb      	strh	r3, [r7, #12]
        emu_cycles(1);
 800218e:	2001      	movs	r0, #1
 8002190:	f000 fe78 	bl	8002e84 <emu_cycles>

        u16 n = (hi << 8) | lo;
 8002194:	89bb      	ldrh	r3, [r7, #12]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	b21a      	sxth	r2, r3
 800219a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	817b      	strh	r3, [r7, #10]
        ctx->regs.pc = n;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	897a      	ldrh	r2, [r7, #10]
 80021a8:	811a      	strh	r2, [r3, #8]

        emu_cycles(1);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f000 fe6a 	bl	8002e84 <emu_cycles>
    }
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <proc_reti>:

static void proc_reti(cpu_context *ctx) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    ctx->int_master_enabled = true;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	769a      	strb	r2, [r3, #26]
    proc_ret(ctx);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ffc4 	bl	8002154 <proc_ret>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <proc_pop>:

static void proc_pop(cpu_context *ctx) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
    u16 lo = stack_pop();
 80021dc:	f003 f94e 	bl	800547c <stack_pop>
 80021e0:	4603      	mov	r3, r0
 80021e2:	81fb      	strh	r3, [r7, #14]
    emu_cycles(1);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f000 fe4d 	bl	8002e84 <emu_cycles>
    u16 hi = stack_pop();
 80021ea:	f003 f947 	bl	800547c <stack_pop>
 80021ee:	4603      	mov	r3, r0
 80021f0:	81bb      	strh	r3, [r7, #12]
    emu_cycles(1);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f000 fe46 	bl	8002e84 <emu_cycles>

    u16 n = (hi << 8) | lo;
 80021f8:	89bb      	ldrh	r3, [r7, #12]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002202:	4313      	orrs	r3, r2
 8002204:	b21b      	sxth	r3, r3
 8002206:	817b      	strh	r3, [r7, #10]

    cpu_set_reg(ctx->cur_inst->reg_1, n);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	789b      	ldrb	r3, [r3, #2]
 800220e:	897a      	ldrh	r2, [r7, #10]
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fb98 	bl	8002948 <cpu_set_reg>

    if (ctx->cur_inst->reg_1 == RT_AF) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	789b      	ldrb	r3, [r3, #2]
 800221e:	2b09      	cmp	r3, #9
 8002220:	d10a      	bne.n	8002238 <proc_pop+0x64>
        cpu_set_reg(ctx->cur_inst->reg_1, n & 0xFFF0);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	789a      	ldrb	r2, [r3, #2]
 8002228:	897b      	ldrh	r3, [r7, #10]
 800222a:	f023 030f 	bic.w	r3, r3, #15
 800222e:	b29b      	uxth	r3, r3
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f000 fb88 	bl	8002948 <cpu_set_reg>
    }
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <proc_push>:

static void proc_push(cpu_context *ctx) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    u16 hi = (cpu_read_reg(ctx->cur_inst->reg_1) >> 8) & 0xFF;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	789b      	ldrb	r3, [r3, #2]
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fb02 	bl	8002858 <cpu_read_reg>
 8002254:	4603      	mov	r3, r0
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	b29b      	uxth	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	81fb      	strh	r3, [r7, #14]
    emu_cycles(1);
 800225e:	2001      	movs	r0, #1
 8002260:	f000 fe10 	bl	8002e84 <emu_cycles>
    stack_push(hi);
 8002264:	89fb      	ldrh	r3, [r7, #14]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4618      	mov	r0, r3
 800226a:	f003 f8d9 	bl	8005420 <stack_push>

    u16 lo = cpu_read_reg(ctx->cur_inst->reg_1) & 0xFF;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	789b      	ldrb	r3, [r3, #2]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 faef 	bl	8002858 <cpu_read_reg>
 800227a:	4603      	mov	r3, r0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	81bb      	strh	r3, [r7, #12]
    emu_cycles(1);
 8002280:	2001      	movs	r0, #1
 8002282:	f000 fdff 	bl	8002e84 <emu_cycles>
    stack_push(lo);
 8002286:	89bb      	ldrh	r3, [r7, #12]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	4618      	mov	r0, r3
 800228c:	f003 f8c8 	bl	8005420 <stack_push>
    
    emu_cycles(1);
 8002290:	2001      	movs	r0, #1
 8002292:	f000 fdf7 	bl	8002e84 <emu_cycles>
}
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <proc_inc>:

static void proc_inc(cpu_context *ctx) {
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af02      	add	r7, sp, #8
 80022a4:	6078      	str	r0, [r7, #4]
    u16 val = cpu_read_reg(ctx->cur_inst->reg_1) + 1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	789b      	ldrb	r3, [r3, #2]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fad3 	bl	8002858 <cpu_read_reg>
 80022b2:	4603      	mov	r3, r0
 80022b4:	3301      	adds	r3, #1
 80022b6:	81fb      	strh	r3, [r7, #14]

    if (is_16_bit(ctx->cur_inst->reg_1)) {
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	789b      	ldrb	r3, [r3, #2]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fdcc 	bl	8001e5c <is_16_bit>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <proc_inc+0x32>
        emu_cycles(1);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f000 fdda 	bl	8002e84 <emu_cycles>
    }

    if (ctx->cur_inst->reg_1 == RT_HL && ctx->cur_inst->mode == AM_MR) {
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	789b      	ldrb	r3, [r3, #2]
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d11e      	bne.n	8002318 <proc_inc+0x7a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	785b      	ldrb	r3, [r3, #1]
 80022e0:	2b12      	cmp	r3, #18
 80022e2:	d119      	bne.n	8002318 <proc_inc+0x7a>
        val = bus_read(cpu_read_reg(RT_HL)) + 1;
 80022e4:	200c      	movs	r0, #12
 80022e6:	f000 fab7 	bl	8002858 <cpu_read_reg>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f973 	bl	80005d8 <bus_read>
 80022f2:	4603      	mov	r3, r0
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	81fb      	strh	r3, [r7, #14]
        val &= 0xFF;
 80022fa:	89fb      	ldrh	r3, [r7, #14]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	81fb      	strh	r3, [r7, #14]
        bus_write(cpu_read_reg(RT_HL), val);
 8002300:	200c      	movs	r0, #12
 8002302:	f000 faa9 	bl	8002858 <cpu_read_reg>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	4619      	mov	r1, r3
 8002310:	4610      	mov	r0, r2
 8002312:	f7fe f9c9 	bl	80006a8 <bus_write>
 8002316:	e00f      	b.n	8002338 <proc_inc+0x9a>
    } else {
        cpu_set_reg(ctx->cur_inst->reg_1, val);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	789b      	ldrb	r3, [r3, #2]
 800231e:	89fa      	ldrh	r2, [r7, #14]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fb10 	bl	8002948 <cpu_set_reg>
        val = cpu_read_reg(ctx->cur_inst->reg_1);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	789b      	ldrb	r3, [r3, #2]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fa92 	bl	8002858 <cpu_read_reg>
 8002334:	4603      	mov	r3, r0
 8002336:	81fb      	strh	r3, [r7, #14]
    }

    if ((ctx->cur_opcode & 0x03) == 0x03) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7c5b      	ldrb	r3, [r3, #17]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b03      	cmp	r3, #3
 8002342:	d017      	beq.n	8002374 <proc_inc+0xd6>
        return;
    }

    cpu_set_flags(ctx, val == 0, 0, (val & 0x0F) == 0, -1);
 8002344:	89fb      	ldrh	r3, [r7, #14]
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf0c      	ite	eq
 800234a:	2301      	moveq	r3, #1
 800234c:	2300      	movne	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	b259      	sxtb	r1, r3
 8002352:	89fb      	ldrh	r3, [r7, #14]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	b25b      	sxtb	r3, r3
 8002364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002368:	9200      	str	r2, [sp, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff f909 	bl	8001584 <cpu_set_flags>
 8002372:	e000      	b.n	8002376 <proc_inc+0xd8>
        return;
 8002374:	bf00      	nop
}
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <proc_dec>:

static void proc_dec(cpu_context *ctx) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af02      	add	r7, sp, #8
 8002382:	6078      	str	r0, [r7, #4]
    u16 val = cpu_read_reg(ctx->cur_inst->reg_1) - 1;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	789b      	ldrb	r3, [r3, #2]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fa64 	bl	8002858 <cpu_read_reg>
 8002390:	4603      	mov	r3, r0
 8002392:	3b01      	subs	r3, #1
 8002394:	81fb      	strh	r3, [r7, #14]

    if (is_16_bit(ctx->cur_inst->reg_1)) {
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	789b      	ldrb	r3, [r3, #2]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fd5d 	bl	8001e5c <is_16_bit>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <proc_dec+0x32>
        emu_cycles(1);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f000 fd6b 	bl	8002e84 <emu_cycles>
    }

    if (ctx->cur_inst->reg_1 == RT_HL && ctx->cur_inst->mode == AM_MR) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	789b      	ldrb	r3, [r3, #2]
 80023b4:	2b0c      	cmp	r3, #12
 80023b6:	d11b      	bne.n	80023f0 <proc_dec+0x74>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	785b      	ldrb	r3, [r3, #1]
 80023be:	2b12      	cmp	r3, #18
 80023c0:	d116      	bne.n	80023f0 <proc_dec+0x74>
        val = bus_read(cpu_read_reg(RT_HL)) - 1;
 80023c2:	200c      	movs	r0, #12
 80023c4:	f000 fa48 	bl	8002858 <cpu_read_reg>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe f904 	bl	80005d8 <bus_read>
 80023d0:	4603      	mov	r3, r0
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	81fb      	strh	r3, [r7, #14]
        bus_write(cpu_read_reg(RT_HL), val);
 80023d8:	200c      	movs	r0, #12
 80023da:	f000 fa3d 	bl	8002858 <cpu_read_reg>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	89fb      	ldrh	r3, [r7, #14]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	4619      	mov	r1, r3
 80023e8:	4610      	mov	r0, r2
 80023ea:	f7fe f95d 	bl	80006a8 <bus_write>
 80023ee:	e00f      	b.n	8002410 <proc_dec+0x94>
    } else {
        cpu_set_reg(ctx->cur_inst->reg_1, val);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	789b      	ldrb	r3, [r3, #2]
 80023f6:	89fa      	ldrh	r2, [r7, #14]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 faa4 	bl	8002948 <cpu_set_reg>
        val = cpu_read_reg(ctx->cur_inst->reg_1);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	789b      	ldrb	r3, [r3, #2]
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fa26 	bl	8002858 <cpu_read_reg>
 800240c:	4603      	mov	r3, r0
 800240e:	81fb      	strh	r3, [r7, #14]
    }

    if ((ctx->cur_opcode & 0x0B) == 0x0B) {
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7c5b      	ldrb	r3, [r3, #17]
 8002414:	f003 030b 	and.w	r3, r3, #11
 8002418:	2b0b      	cmp	r3, #11
 800241a:	d017      	beq.n	800244c <proc_dec+0xd0>
        return;
    }

    cpu_set_flags(ctx, val == 0, 1, (val & 0x0F) == 0x0F, -1);
 800241c:	89fb      	ldrh	r3, [r7, #14]
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	b259      	sxtb	r1, r3
 800242a:	89fb      	ldrh	r3, [r7, #14]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	2b0f      	cmp	r3, #15
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	b25b      	sxtb	r3, r3
 800243c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002440:	9200      	str	r2, [sp, #0]
 8002442:	2201      	movs	r2, #1
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff f89d 	bl	8001584 <cpu_set_flags>
 800244a:	e000      	b.n	800244e <proc_dec+0xd2>
        return;
 800244c:	bf00      	nop
}
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <proc_sub>:

static void proc_sub(cpu_context *ctx) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af02      	add	r7, sp, #8
 800245a:	6078      	str	r0, [r7, #4]
    u16 val = cpu_read_reg(ctx->cur_inst->reg_1) - ctx->fetched_data;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	789b      	ldrb	r3, [r3, #2]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f9f8 	bl	8002858 <cpu_read_reg>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	899b      	ldrh	r3, [r3, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	82fb      	strh	r3, [r7, #22]

    int z = val == 0;
 8002474:	8afb      	ldrh	r3, [r7, #22]
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf0c      	ite	eq
 800247a:	2301      	moveq	r3, #1
 800247c:	2300      	movne	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	613b      	str	r3, [r7, #16]
    int h = ((int)cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) - ((int)ctx->fetched_data & 0xF) < 0;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	789b      	ldrb	r3, [r3, #2]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f9e5 	bl	8002858 <cpu_read_reg>
 800248e:	4603      	mov	r3, r0
 8002490:	f003 020f 	and.w	r2, r3, #15
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	899b      	ldrh	r3, [r3, #12]
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	0fdb      	lsrs	r3, r3, #31
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	60fb      	str	r3, [r7, #12]
    int c = ((int)cpu_read_reg(ctx->cur_inst->reg_1)) - ((int)ctx->fetched_data) < 0;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	789b      	ldrb	r3, [r3, #2]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f9d4 	bl	8002858 <cpu_read_reg>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461a      	mov	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	899b      	ldrh	r3, [r3, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	0fdb      	lsrs	r3, r3, #31
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	60bb      	str	r3, [r7, #8]

    cpu_set_reg(ctx->cur_inst->reg_1, val);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	789b      	ldrb	r3, [r3, #2]
 80024c6:	8afa      	ldrh	r2, [r7, #22]
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fa3c 	bl	8002948 <cpu_set_reg>
    cpu_set_flags(ctx, z, 1, h, c);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	b259      	sxtb	r1, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	b25a      	sxtb	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	b25b      	sxtb	r3, r3
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	2201      	movs	r2, #1
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff f84e 	bl	8001584 <cpu_set_flags>
}
 80024e8:	bf00      	nop
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <proc_sbc>:

static void proc_sbc(cpu_context *ctx) {
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	6078      	str	r0, [r7, #4]
    u8 val = ctx->fetched_data + CPU_FLAG_C;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	899b      	ldrh	r3, [r3, #12]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	785b      	ldrb	r3, [r3, #1]
 8002502:	111b      	asrs	r3, r3, #4
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4413      	add	r3, r2
 800250e:	75fb      	strb	r3, [r7, #23]

    int z = cpu_read_reg(ctx->cur_inst->reg_1) - val == 0;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	789b      	ldrb	r3, [r3, #2]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f99e 	bl	8002858 <cpu_read_reg>
 800251c:	4603      	mov	r3, r0
 800251e:	461a      	mov	r2, r3
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	b29b      	uxth	r3, r3
 8002524:	429a      	cmp	r2, r3
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	613b      	str	r3, [r7, #16]

    int h = ((int)cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) 
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	789b      	ldrb	r3, [r3, #2]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f98e 	bl	8002858 <cpu_read_reg>
 800253c:	4603      	mov	r3, r0
 800253e:	f003 020f 	and.w	r2, r3, #15
        - ((int)ctx->fetched_data & 0xF) - ((int)CPU_FLAG_C) < 0;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	899b      	ldrh	r3, [r3, #12]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	1ad2      	subs	r2, r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	111b      	asrs	r3, r3, #4
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	0fdb      	lsrs	r3, r3, #31
 800255a:	b2db      	uxtb	r3, r3
    int h = ((int)cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) 
 800255c:	60fb      	str	r3, [r7, #12]
    int c = ((int)cpu_read_reg(ctx->cur_inst->reg_1)) 
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	789b      	ldrb	r3, [r3, #2]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 f977 	bl	8002858 <cpu_read_reg>
 800256a:	4603      	mov	r3, r0
 800256c:	461a      	mov	r2, r3
        - ((int)ctx->fetched_data) - ((int)CPU_FLAG_C) < 0;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	899b      	ldrh	r3, [r3, #12]
 8002572:	1ad2      	subs	r2, r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	111b      	asrs	r3, r3, #4
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	0fdb      	lsrs	r3, r3, #31
 8002582:	b2db      	uxtb	r3, r3
    int c = ((int)cpu_read_reg(ctx->cur_inst->reg_1)) 
 8002584:	60bb      	str	r3, [r7, #8]

    cpu_set_reg(ctx->cur_inst->reg_1, cpu_read_reg(ctx->cur_inst->reg_1) - val);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	789c      	ldrb	r4, [r3, #2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	789b      	ldrb	r3, [r3, #2]
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f960 	bl	8002858 <cpu_read_reg>
 8002598:	4603      	mov	r3, r0
 800259a:	461a      	mov	r2, r3
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4619      	mov	r1, r3
 80025a6:	4620      	mov	r0, r4
 80025a8:	f000 f9ce 	bl	8002948 <cpu_set_reg>
    cpu_set_flags(ctx, z, 1, h, c);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	b259      	sxtb	r1, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	b25a      	sxtb	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	2201      	movs	r2, #1
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe ffe0 	bl	8001584 <cpu_set_flags>
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd90      	pop	{r4, r7, pc}

080025cc <proc_adc>:

static void proc_adc(cpu_context *ctx) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	6078      	str	r0, [r7, #4]
    u16 u = ctx->fetched_data;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	899b      	ldrh	r3, [r3, #12]
 80025d8:	81fb      	strh	r3, [r7, #14]
    u16 a = ctx->regs.a;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	81bb      	strh	r3, [r7, #12]
    u16 c = CPU_FLAG_C;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	111b      	asrs	r3, r3, #4
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	817b      	strh	r3, [r7, #10]

    ctx->regs.a = (a + u + c) & 0xFF;
 80025ee:	89bb      	ldrh	r3, [r7, #12]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	89fb      	ldrh	r3, [r7, #14]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	897b      	ldrh	r3, [r7, #10]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	4413      	add	r3, r2
 8002600:	b2da      	uxtb	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	b259      	sxtb	r1, r3
        (a & 0xF) + (u & 0xF) + c > 0xF,
 8002616:	89bb      	ldrh	r3, [r7, #12]
 8002618:	f003 020f 	and.w	r2, r3, #15
 800261c:	89fb      	ldrh	r3, [r7, #14]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	441a      	add	r2, r3
 8002624:	897b      	ldrh	r3, [r7, #10]
 8002626:	4413      	add	r3, r2
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 
 8002628:	2b0f      	cmp	r3, #15
 800262a:	bfcc      	ite	gt
 800262c:	2301      	movgt	r3, #1
 800262e:	2300      	movle	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	b258      	sxtb	r0, r3
        a + u + c > 0xFF);
 8002634:	89ba      	ldrh	r2, [r7, #12]
 8002636:	89fb      	ldrh	r3, [r7, #14]
 8002638:	441a      	add	r2, r3
 800263a:	897b      	ldrh	r3, [r7, #10]
 800263c:	4413      	add	r3, r2
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 
 800263e:	2bff      	cmp	r3, #255	; 0xff
 8002640:	bfcc      	ite	gt
 8002642:	2301      	movgt	r3, #1
 8002644:	2300      	movle	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	b25b      	sxtb	r3, r3
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4603      	mov	r3, r0
 800264e:	2200      	movs	r2, #0
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7fe ff97 	bl	8001584 <cpu_set_flags>
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <proc_add>:

static void proc_add(cpu_context *ctx) {
 800265e:	b580      	push	{r7, lr}
 8002660:	b08a      	sub	sp, #40	; 0x28
 8002662:	af02      	add	r7, sp, #8
 8002664:	6078      	str	r0, [r7, #4]
    u32 val = cpu_read_reg(ctx->cur_inst->reg_1) + ctx->fetched_data;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	789b      	ldrb	r3, [r3, #2]
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f8f3 	bl	8002858 <cpu_read_reg>
 8002672:	4603      	mov	r3, r0
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	899b      	ldrh	r3, [r3, #12]
 800267a:	4413      	add	r3, r2
 800267c:	61fb      	str	r3, [r7, #28]

    bool is_16bit = is_16_bit(ctx->cur_inst->reg_1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	789b      	ldrb	r3, [r3, #2]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fbe9 	bl	8001e5c <is_16_bit>
 800268a:	4603      	mov	r3, r0
 800268c:	73fb      	strb	r3, [r7, #15]

    if (is_16bit) {
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <proc_add+0x3c>
        emu_cycles(1);
 8002694:	2001      	movs	r0, #1
 8002696:	f000 fbf5 	bl	8002e84 <emu_cycles>
    }

    if (ctx->cur_inst->reg_1 == RT_SP) {
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	789b      	ldrb	r3, [r3, #2]
 80026a0:	2b0d      	cmp	r3, #13
 80026a2:	d10c      	bne.n	80026be <proc_add+0x60>
        val = cpu_read_reg(ctx->cur_inst->reg_1) + (int8_t)ctx->fetched_data;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	789b      	ldrb	r3, [r3, #2]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f8d4 	bl	8002858 <cpu_read_reg>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	899b      	ldrh	r3, [r3, #12]
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	61fb      	str	r3, [r7, #28]
    }

    int z = (val & 0xFF) == 0;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf0c      	ite	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	2300      	movne	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	61bb      	str	r3, [r7, #24]
    int h = (cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) + (ctx->fetched_data & 0xF) >= 0x10;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	789b      	ldrb	r3, [r3, #2]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 f8bf 	bl	8002858 <cpu_read_reg>
 80026da:	4603      	mov	r3, r0
 80026dc:	f003 020f 	and.w	r2, r3, #15
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	899b      	ldrh	r3, [r3, #12]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	4413      	add	r3, r2
 80026ea:	2b0f      	cmp	r3, #15
 80026ec:	bfcc      	ite	gt
 80026ee:	2301      	movgt	r3, #1
 80026f0:	2300      	movle	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	617b      	str	r3, [r7, #20]
    int c = (int)(cpu_read_reg(ctx->cur_inst->reg_1) & 0xFF) + (int)(ctx->fetched_data & 0xFF) >= 0x100;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	789b      	ldrb	r3, [r3, #2]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f8ab 	bl	8002858 <cpu_read_reg>
 8002702:	4603      	mov	r3, r0
 8002704:	b2da      	uxtb	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	899b      	ldrh	r3, [r3, #12]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4413      	add	r3, r2
 800270e:	2bff      	cmp	r3, #255	; 0xff
 8002710:	bfcc      	ite	gt
 8002712:	2301      	movgt	r3, #1
 8002714:	2300      	movle	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	613b      	str	r3, [r7, #16]

    if (is_16bit) {
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d02d      	beq.n	800277c <proc_add+0x11e>
        z = -1;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002724:	61bb      	str	r3, [r7, #24]
        h = (cpu_read_reg(ctx->cur_inst->reg_1) & 0xFFF) + (ctx->fetched_data & 0xFFF) >= 0x1000;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	789b      	ldrb	r3, [r3, #2]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f893 	bl	8002858 <cpu_read_reg>
 8002732:	4603      	mov	r3, r0
 8002734:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	899b      	ldrh	r3, [r3, #12]
 800273c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002740:	4413      	add	r3, r2
 8002742:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002746:	4293      	cmp	r3, r2
 8002748:	bfcc      	ite	gt
 800274a:	2301      	movgt	r3, #1
 800274c:	2300      	movle	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	617b      	str	r3, [r7, #20]
        u32 n = ((u32)cpu_read_reg(ctx->cur_inst->reg_1)) + ((u32)ctx->fetched_data);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	789b      	ldrb	r3, [r3, #2]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 f87d 	bl	8002858 <cpu_read_reg>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	899b      	ldrh	r3, [r3, #12]
 8002766:	4413      	add	r3, r2
 8002768:	60bb      	str	r3, [r7, #8]
        c = n >= 0x10000;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002770:	4293      	cmp	r3, r2
 8002772:	bf8c      	ite	hi
 8002774:	2301      	movhi	r3, #1
 8002776:	2300      	movls	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	613b      	str	r3, [r7, #16]
    }

    if (ctx->cur_inst->reg_1 == RT_SP) {
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	789b      	ldrb	r3, [r3, #2]
 8002782:	2b0d      	cmp	r3, #13
 8002784:	d127      	bne.n	80027d6 <proc_add+0x178>
        z = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
        h = (cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) + (ctx->fetched_data & 0xF) >= 0x10;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	789b      	ldrb	r3, [r3, #2]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f861 	bl	8002858 <cpu_read_reg>
 8002796:	4603      	mov	r3, r0
 8002798:	f003 020f 	and.w	r2, r3, #15
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	899b      	ldrh	r3, [r3, #12]
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	4413      	add	r3, r2
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	bfcc      	ite	gt
 80027aa:	2301      	movgt	r3, #1
 80027ac:	2300      	movle	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	617b      	str	r3, [r7, #20]
        c = (int)(cpu_read_reg(ctx->cur_inst->reg_1) & 0xFF) + (int)(ctx->fetched_data & 0xFF) >= 0x100;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	789b      	ldrb	r3, [r3, #2]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f84d 	bl	8002858 <cpu_read_reg>
 80027be:	4603      	mov	r3, r0
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	899b      	ldrh	r3, [r3, #12]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	2bff      	cmp	r3, #255	; 0xff
 80027cc:	bfcc      	ite	gt
 80027ce:	2301      	movgt	r3, #1
 80027d0:	2300      	movle	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	613b      	str	r3, [r7, #16]
    }

    cpu_set_reg(ctx->cur_inst->reg_1, val & 0xFFFF);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	789b      	ldrb	r3, [r3, #2]
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	b292      	uxth	r2, r2
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f8b0 	bl	8002948 <cpu_set_reg>
    cpu_set_flags(ctx, z, 0, h, c);
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	b259      	sxtb	r1, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	b25a      	sxtb	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	4613      	mov	r3, r2
 80027f8:	2200      	movs	r2, #0
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fec2 	bl	8001584 <cpu_set_flags>
}
 8002800:	bf00      	nop
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <inst_get_processor>:
    [IN_CCF] = proc_ccf,
    [IN_EI] = proc_ei,
    [IN_RETI] = proc_reti
};

IN_PROC inst_get_processor(in_type type) {
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
    return processors[type];
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <inst_get_processor+0x20>)
 8002816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000328 	.word	0x20000328

0800282c <reverse>:
#include <cpu.h>
#include <bus.h>

extern cpu_context ctx;

u16 reverse(u16 n) {
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	80fb      	strh	r3, [r7, #6]
    return ((n & 0xFF00) >> 8) | ((n & 0x00FF) << 8);
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	b29b      	uxth	r3, r3
 800283c:	b21a      	sxth	r2, r3
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	b21b      	sxth	r3, r3
 8002844:	4313      	orrs	r3, r2
 8002846:	b21b      	sxth	r3, r3
 8002848:	b29b      	uxth	r3, r3
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <cpu_read_reg>:

u16 cpu_read_reg(reg_type rt) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
    switch(rt) {
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	3b01      	subs	r3, #1
 8002866:	2b0d      	cmp	r3, #13
 8002868:	d860      	bhi.n	800292c <cpu_read_reg+0xd4>
 800286a:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <cpu_read_reg+0x18>)
 800286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002870:	080028a9 	.word	0x080028a9
 8002874:	080028b1 	.word	0x080028b1
 8002878:	080028b9 	.word	0x080028b9
 800287c:	080028c1 	.word	0x080028c1
 8002880:	080028c9 	.word	0x080028c9
 8002884:	080028d1 	.word	0x080028d1
 8002888:	080028d9 	.word	0x080028d9
 800288c:	080028e1 	.word	0x080028e1
 8002890:	080028e9 	.word	0x080028e9
 8002894:	080028f7 	.word	0x080028f7
 8002898:	08002905 	.word	0x08002905
 800289c:	08002913 	.word	0x08002913
 80028a0:	08002927 	.word	0x08002927
 80028a4:	08002921 	.word	0x08002921
        case RT_A: return ctx.regs.a;
 80028a8:	4b23      	ldr	r3, [pc, #140]	; (8002938 <cpu_read_reg+0xe0>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	e03e      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_F: return ctx.regs.f;
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <cpu_read_reg+0xe0>)
 80028b2:	785b      	ldrb	r3, [r3, #1]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	e03a      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_B: return ctx.regs.b;
 80028b8:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <cpu_read_reg+0xe0>)
 80028ba:	789b      	ldrb	r3, [r3, #2]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	e036      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_C: return ctx.regs.c;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <cpu_read_reg+0xe0>)
 80028c2:	78db      	ldrb	r3, [r3, #3]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	e032      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_D: return ctx.regs.d;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <cpu_read_reg+0xe0>)
 80028ca:	791b      	ldrb	r3, [r3, #4]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	e02e      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_E: return ctx.regs.e;
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <cpu_read_reg+0xe0>)
 80028d2:	795b      	ldrb	r3, [r3, #5]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	e02a      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_H: return ctx.regs.h;
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <cpu_read_reg+0xe0>)
 80028da:	799b      	ldrb	r3, [r3, #6]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	e026      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_L: return ctx.regs.l;
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <cpu_read_reg+0xe0>)
 80028e2:	79db      	ldrb	r3, [r3, #7]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	e022      	b.n	800292e <cpu_read_reg+0xd6>

        case RT_AF: return reverse(*((u16 *)&ctx.regs.a));
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <cpu_read_reg+0xe0>)
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff9d 	bl	800282c <reverse>
 80028f2:	4603      	mov	r3, r0
 80028f4:	e01b      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_BC: return reverse(*((u16 *)&ctx.regs.b));
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <cpu_read_reg+0xe4>)
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff96 	bl	800282c <reverse>
 8002900:	4603      	mov	r3, r0
 8002902:	e014      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_DE: return reverse(*((u16 *)&ctx.regs.d));
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <cpu_read_reg+0xe8>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff8f 	bl	800282c <reverse>
 800290e:	4603      	mov	r3, r0
 8002910:	e00d      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_HL: return reverse(*((u16 *)&ctx.regs.h));
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <cpu_read_reg+0xec>)
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff88 	bl	800282c <reverse>
 800291c:	4603      	mov	r3, r0
 800291e:	e006      	b.n	800292e <cpu_read_reg+0xd6>

        case RT_PC: return ctx.regs.pc;
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <cpu_read_reg+0xe0>)
 8002922:	891b      	ldrh	r3, [r3, #8]
 8002924:	e003      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_SP: return ctx.regs.sp;
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <cpu_read_reg+0xe0>)
 8002928:	895b      	ldrh	r3, [r3, #10]
 800292a:	e000      	b.n	800292e <cpu_read_reg+0xd6>
        default: return 0;
 800292c:	2300      	movs	r3, #0
    }
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000ebc 	.word	0x20000ebc
 800293c:	20000ebe 	.word	0x20000ebe
 8002940:	20000ec0 	.word	0x20000ec0
 8002944:	20000ec2 	.word	0x20000ec2

08002948 <cpu_set_reg>:

void cpu_set_reg(reg_type rt, u16 val) {
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	460a      	mov	r2, r1
 8002952:	71fb      	strb	r3, [r7, #7]
 8002954:	4613      	mov	r3, r2
 8002956:	80bb      	strh	r3, [r7, #4]
    switch(rt) {
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	2b0e      	cmp	r3, #14
 800295c:	d871      	bhi.n	8002a42 <cpu_set_reg+0xfa>
 800295e:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <cpu_set_reg+0x1c>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	08002a41 	.word	0x08002a41
 8002968:	080029a1 	.word	0x080029a1
 800296c:	080029ab 	.word	0x080029ab
 8002970:	080029b5 	.word	0x080029b5
 8002974:	080029bf 	.word	0x080029bf
 8002978:	080029c9 	.word	0x080029c9
 800297c:	080029d3 	.word	0x080029d3
 8002980:	080029dd 	.word	0x080029dd
 8002984:	080029e7 	.word	0x080029e7
 8002988:	080029f1 	.word	0x080029f1
 800298c:	08002a01 	.word	0x08002a01
 8002990:	08002a11 	.word	0x08002a11
 8002994:	08002a21 	.word	0x08002a21
 8002998:	08002a39 	.word	0x08002a39
 800299c:	08002a31 	.word	0x08002a31
        case RT_A: ctx.regs.a = val & 0xFF; break;
 80029a0:	88bb      	ldrh	r3, [r7, #4]
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	4b29      	ldr	r3, [pc, #164]	; (8002a4c <cpu_set_reg+0x104>)
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e04b      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_F: ctx.regs.f = val & 0xFF; break;
 80029aa:	88bb      	ldrh	r3, [r7, #4]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <cpu_set_reg+0x104>)
 80029b0:	705a      	strb	r2, [r3, #1]
 80029b2:	e046      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_B: ctx.regs.b = val & 0xFF; break;
 80029b4:	88bb      	ldrh	r3, [r7, #4]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <cpu_set_reg+0x104>)
 80029ba:	709a      	strb	r2, [r3, #2]
 80029bc:	e041      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_C: {
             ctx.regs.c = val & 0xFF;
 80029be:	88bb      	ldrh	r3, [r7, #4]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <cpu_set_reg+0x104>)
 80029c4:	70da      	strb	r2, [r3, #3]
        } break;
 80029c6:	e03c      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_D: ctx.regs.d = val & 0xFF; break;
 80029c8:	88bb      	ldrh	r3, [r7, #4]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <cpu_set_reg+0x104>)
 80029ce:	711a      	strb	r2, [r3, #4]
 80029d0:	e037      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_E: ctx.regs.e = val & 0xFF; break;
 80029d2:	88bb      	ldrh	r3, [r7, #4]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <cpu_set_reg+0x104>)
 80029d8:	715a      	strb	r2, [r3, #5]
 80029da:	e032      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_H: ctx.regs.h = val & 0xFF; break;
 80029dc:	88bb      	ldrh	r3, [r7, #4]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <cpu_set_reg+0x104>)
 80029e2:	719a      	strb	r2, [r3, #6]
 80029e4:	e02d      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_L: ctx.regs.l = val & 0xFF; break;
 80029e6:	88bb      	ldrh	r3, [r7, #4]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <cpu_set_reg+0x104>)
 80029ec:	71da      	strb	r2, [r3, #7]
 80029ee:	e028      	b.n	8002a42 <cpu_set_reg+0xfa>

        case RT_AF: *((u16 *)&ctx.regs.a) = reverse(val); break;
 80029f0:	4c16      	ldr	r4, [pc, #88]	; (8002a4c <cpu_set_reg+0x104>)
 80029f2:	88bb      	ldrh	r3, [r7, #4]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff19 	bl	800282c <reverse>
 80029fa:	4603      	mov	r3, r0
 80029fc:	8023      	strh	r3, [r4, #0]
 80029fe:	e020      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_BC: *((u16 *)&ctx.regs.b) = reverse(val); break;
 8002a00:	4c13      	ldr	r4, [pc, #76]	; (8002a50 <cpu_set_reg+0x108>)
 8002a02:	88bb      	ldrh	r3, [r7, #4]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff11 	bl	800282c <reverse>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	8023      	strh	r3, [r4, #0]
 8002a0e:	e018      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_DE: *((u16 *)&ctx.regs.d) = reverse(val); break;
 8002a10:	4c10      	ldr	r4, [pc, #64]	; (8002a54 <cpu_set_reg+0x10c>)
 8002a12:	88bb      	ldrh	r3, [r7, #4]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff09 	bl	800282c <reverse>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	8023      	strh	r3, [r4, #0]
 8002a1e:	e010      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_HL: {
         *((u16 *)&ctx.regs.h) = reverse(val); 
 8002a20:	4c0d      	ldr	r4, [pc, #52]	; (8002a58 <cpu_set_reg+0x110>)
 8002a22:	88bb      	ldrh	r3, [r7, #4]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff01 	bl	800282c <reverse>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	8023      	strh	r3, [r4, #0]
         break;
 8002a2e:	e008      	b.n	8002a42 <cpu_set_reg+0xfa>
        }

        case RT_PC: ctx.regs.pc = val; break;
 8002a30:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <cpu_set_reg+0x104>)
 8002a32:	88bb      	ldrh	r3, [r7, #4]
 8002a34:	8113      	strh	r3, [r2, #8]
 8002a36:	e004      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_SP: ctx.regs.sp = val; break;
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <cpu_set_reg+0x104>)
 8002a3a:	88bb      	ldrh	r3, [r7, #4]
 8002a3c:	8153      	strh	r3, [r2, #10]
 8002a3e:	e000      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_NONE: break;
 8002a40:	bf00      	nop
    }
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd90      	pop	{r4, r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000ebc 	.word	0x20000ebc
 8002a50:	20000ebe 	.word	0x20000ebe
 8002a54:	20000ec0 	.word	0x20000ec0
 8002a58:	20000ec2 	.word	0x20000ec2

08002a5c <cpu_read_reg8>:


u8 cpu_read_reg8(reg_type rt) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
    switch(rt) {
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	2b0b      	cmp	r3, #11
 8002a6c:	d83b      	bhi.n	8002ae6 <cpu_read_reg8+0x8a>
 8002a6e:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <cpu_read_reg8+0x18>)
 8002a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a74:	08002aa5 	.word	0x08002aa5
 8002a78:	08002aab 	.word	0x08002aab
 8002a7c:	08002ab1 	.word	0x08002ab1
 8002a80:	08002ab7 	.word	0x08002ab7
 8002a84:	08002abd 	.word	0x08002abd
 8002a88:	08002ac3 	.word	0x08002ac3
 8002a8c:	08002ac9 	.word	0x08002ac9
 8002a90:	08002acf 	.word	0x08002acf
 8002a94:	08002ae7 	.word	0x08002ae7
 8002a98:	08002ae7 	.word	0x08002ae7
 8002a9c:	08002ae7 	.word	0x08002ae7
 8002aa0:	08002ad5 	.word	0x08002ad5
        case RT_A: return ctx.regs.a;
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	e02e      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_F: return ctx.regs.f;
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	e02b      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_B: return ctx.regs.b;
 8002ab0:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002ab2:	789b      	ldrb	r3, [r3, #2]
 8002ab4:	e028      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_C: return ctx.regs.c;
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002ab8:	78db      	ldrb	r3, [r3, #3]
 8002aba:	e025      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_D: return ctx.regs.d;
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002abe:	791b      	ldrb	r3, [r3, #4]
 8002ac0:	e022      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_E: return ctx.regs.e;
 8002ac2:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002ac4:	795b      	ldrb	r3, [r3, #5]
 8002ac6:	e01f      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_H: return ctx.regs.h;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002aca:	799b      	ldrb	r3, [r3, #6]
 8002acc:	e01c      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_L: return ctx.regs.l;
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002ad0:	79db      	ldrb	r3, [r3, #7]
 8002ad2:	e019      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_HL: {
            return bus_read(cpu_read_reg(RT_HL));
 8002ad4:	200c      	movs	r0, #12
 8002ad6:	f7ff febf 	bl	8002858 <cpu_read_reg>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fd7b 	bl	80005d8 <bus_read>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	e010      	b.n	8002b08 <cpu_read_reg8+0xac>
        }
        default:
            printf("**ERR INVALID REG8: %d\n", rt);
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	480a      	ldr	r0, [pc, #40]	; (8002b14 <cpu_read_reg8+0xb8>)
 8002aec:	f00f f86c 	bl	8011bc8 <iprintf>
            NO_IMPL
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <cpu_read_reg8+0xbc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2214      	movs	r2, #20
 8002af8:	2101      	movs	r1, #1
 8002afa:	4808      	ldr	r0, [pc, #32]	; (8002b1c <cpu_read_reg8+0xc0>)
 8002afc:	f00e fbfa 	bl	80112f4 <fwrite>
 8002b00:	f06f 0004 	mvn.w	r0, #4
 8002b04:	f00d ff28 	bl	8010958 <exit>
    }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000ebc 	.word	0x20000ebc
 8002b14:	08012cc0 	.word	0x08012cc0
 8002b18:	200009dc 	.word	0x200009dc
 8002b1c:	08012cd8 	.word	0x08012cd8

08002b20 <cpu_set_reg8>:

void cpu_set_reg8(reg_type rt, u8 val) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	460a      	mov	r2, r1
 8002b2a:	71fb      	strb	r3, [r7, #7]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	71bb      	strb	r3, [r7, #6]
    switch(rt) {
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	2b0b      	cmp	r3, #11
 8002b36:	d846      	bhi.n	8002bc6 <cpu_set_reg8+0xa6>
 8002b38:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <cpu_set_reg8+0x20>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b71 	.word	0x08002b71
 8002b44:	08002b79 	.word	0x08002b79
 8002b48:	08002b81 	.word	0x08002b81
 8002b4c:	08002b89 	.word	0x08002b89
 8002b50:	08002b91 	.word	0x08002b91
 8002b54:	08002b99 	.word	0x08002b99
 8002b58:	08002ba1 	.word	0x08002ba1
 8002b5c:	08002ba9 	.word	0x08002ba9
 8002b60:	08002bc7 	.word	0x08002bc7
 8002b64:	08002bc7 	.word	0x08002bc7
 8002b68:	08002bc7 	.word	0x08002bc7
 8002b6c:	08002bb1 	.word	0x08002bb1
        case RT_A: ctx.regs.a = val & 0xFF; break;
 8002b70:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002b72:	79bb      	ldrb	r3, [r7, #6]
 8002b74:	7013      	strb	r3, [r2, #0]
 8002b76:	e037      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_F: ctx.regs.f = val & 0xFF; break;
 8002b78:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002b7a:	79bb      	ldrb	r3, [r7, #6]
 8002b7c:	7053      	strb	r3, [r2, #1]
 8002b7e:	e033      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_B: ctx.regs.b = val & 0xFF; break;
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002b82:	79bb      	ldrb	r3, [r7, #6]
 8002b84:	7093      	strb	r3, [r2, #2]
 8002b86:	e02f      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_C: ctx.regs.c = val & 0xFF; break;
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002b8a:	79bb      	ldrb	r3, [r7, #6]
 8002b8c:	70d3      	strb	r3, [r2, #3]
 8002b8e:	e02b      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_D: ctx.regs.d = val & 0xFF; break;
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002b92:	79bb      	ldrb	r3, [r7, #6]
 8002b94:	7113      	strb	r3, [r2, #4]
 8002b96:	e027      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_E: ctx.regs.e = val & 0xFF; break;
 8002b98:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002b9a:	79bb      	ldrb	r3, [r7, #6]
 8002b9c:	7153      	strb	r3, [r2, #5]
 8002b9e:	e023      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_H: ctx.regs.h = val & 0xFF; break;
 8002ba0:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002ba2:	79bb      	ldrb	r3, [r7, #6]
 8002ba4:	7193      	strb	r3, [r2, #6]
 8002ba6:	e01f      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_L: ctx.regs.l = val & 0xFF; break;
 8002ba8:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002baa:	79bb      	ldrb	r3, [r7, #6]
 8002bac:	71d3      	strb	r3, [r2, #7]
 8002bae:	e01b      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_HL: bus_write(cpu_read_reg(RT_HL), val); break;
 8002bb0:	200c      	movs	r0, #12
 8002bb2:	f7ff fe51 	bl	8002858 <cpu_read_reg>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	79bb      	ldrb	r3, [r7, #6]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	f7fd fd72 	bl	80006a8 <bus_write>
 8002bc4:	e010      	b.n	8002be8 <cpu_set_reg8+0xc8>
        default:
            printf("**ERR INVALID REG8: %d\n", rt);
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	480a      	ldr	r0, [pc, #40]	; (8002bf4 <cpu_set_reg8+0xd4>)
 8002bcc:	f00e fffc 	bl	8011bc8 <iprintf>
            NO_IMPL
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <cpu_set_reg8+0xd8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2214      	movs	r2, #20
 8002bd8:	2101      	movs	r1, #1
 8002bda:	4808      	ldr	r0, [pc, #32]	; (8002bfc <cpu_set_reg8+0xdc>)
 8002bdc:	f00e fb8a 	bl	80112f4 <fwrite>
 8002be0:	f06f 0004 	mvn.w	r0, #4
 8002be4:	f00d feb8 	bl	8010958 <exit>
    }
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000ebc 	.word	0x20000ebc
 8002bf4:	08012cc0 	.word	0x08012cc0
 8002bf8:	200009dc 	.word	0x200009dc
 8002bfc:	08012cd8 	.word	0x08012cd8

08002c00 <cpu_get_regs>:

cpu_registers *cpu_get_regs() {
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
    return &ctx.regs;
 8002c04:	4b02      	ldr	r3, [pc, #8]	; (8002c10 <cpu_get_regs+0x10>)
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	20000ebc 	.word	0x20000ebc

08002c14 <cpu_get_int_flags>:

u8 cpu_get_int_flags() {
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
    return ctx.int_flags;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <cpu_get_int_flags+0x14>)
 8002c1a:	7f5b      	ldrb	r3, [r3, #29]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000ebc 	.word	0x20000ebc

08002c2c <cpu_set_int_flags>:

void cpu_set_int_flags(u8 value) {
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
    ctx.int_flags = value;
 8002c36:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <cpu_set_int_flags+0x1c>)
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	7753      	strb	r3, [r2, #29]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	20000ebc 	.word	0x20000ebc

08002c4c <dbg_update>:
#include <bus.h>

static char dbg_msg[1024] = {0};
static int msg_size = 0;

void dbg_update() {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
    if (bus_read(0xFF02) == 0x81) {
 8002c52:	f64f 7002 	movw	r0, #65282	; 0xff02
 8002c56:	f7fd fcbf 	bl	80005d8 <bus_read>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b81      	cmp	r3, #129	; 0x81
 8002c5e:	d112      	bne.n	8002c86 <dbg_update+0x3a>
        char c = bus_read(0xFF01);
 8002c60:	f64f 7001 	movw	r0, #65281	; 0xff01
 8002c64:	f7fd fcb8 	bl	80005d8 <bus_read>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	71fb      	strb	r3, [r7, #7]

        dbg_msg[msg_size++] = c;
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <dbg_update+0x44>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	4907      	ldr	r1, [pc, #28]	; (8002c90 <dbg_update+0x44>)
 8002c74:	600a      	str	r2, [r1, #0]
 8002c76:	4907      	ldr	r1, [pc, #28]	; (8002c94 <dbg_update+0x48>)
 8002c78:	79fa      	ldrb	r2, [r7, #7]
 8002c7a:	54ca      	strb	r2, [r1, r3]

        bus_write(0xFF02, 0);
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	f64f 7002 	movw	r0, #65282	; 0xff02
 8002c82:	f7fd fd11 	bl	80006a8 <bus_write>
    }
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200012dc 	.word	0x200012dc
 8002c94:	20000edc 	.word	0x20000edc

08002c98 <dbg_print>:

void dbg_print() {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
    if (dbg_msg[0]) {
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <dbg_print+0x18>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <dbg_print+0x14>
        printf("DBG: %s\r\n", dbg_msg);
 8002ca4:	4902      	ldr	r1, [pc, #8]	; (8002cb0 <dbg_print+0x18>)
 8002ca6:	4803      	ldr	r0, [pc, #12]	; (8002cb4 <dbg_print+0x1c>)
 8002ca8:	f00e ff8e 	bl	8011bc8 <iprintf>
    }
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000edc 	.word	0x20000edc
 8002cb4:	08012cf0 	.word	0x08012cf0

08002cb8 <dma_start>:
    u8 start_delay;
} dma_context;

static dma_context ctx;

void dma_start(u8 start) {
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
    ctx.active = true;
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <dma_start+0x30>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
    ctx.byte = 0;
 8002cc8:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <dma_start+0x30>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	705a      	strb	r2, [r3, #1]
    ctx.start_delay = 2;
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <dma_start+0x30>)
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	70da      	strb	r2, [r3, #3]
    ctx.value = start;
 8002cd4:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <dma_start+0x30>)
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	7093      	strb	r3, [r2, #2]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	200012e0 	.word	0x200012e0

08002cec <dma_tick>:

void dma_tick() {
 8002cec:	b598      	push	{r3, r4, r7, lr}
 8002cee:	af00      	add	r7, sp, #0
    if (!ctx.active) {
 8002cf0:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <dma_tick+0x78>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	f083 0301 	eor.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d12f      	bne.n	8002d5e <dma_tick+0x72>
        return;
    }

    if (ctx.start_delay) {
 8002cfe:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <dma_tick+0x78>)
 8002d00:	78db      	ldrb	r3, [r3, #3]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <dma_tick+0x28>
        ctx.start_delay--;
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <dma_tick+0x78>)
 8002d08:	78db      	ldrb	r3, [r3, #3]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <dma_tick+0x78>)
 8002d10:	70da      	strb	r2, [r3, #3]
        return;
 8002d12:	e025      	b.n	8002d60 <dma_tick+0x74>
    }

    ppu_oam_write(ctx.byte, bus_read((ctx.value * 0x100) + ctx.byte));
 8002d14:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <dma_tick+0x78>)
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	b29c      	uxth	r4, r3
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <dma_tick+0x78>)
 8002d1c:	789b      	ldrb	r3, [r3, #2]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <dma_tick+0x78>)
 8002d26:	785b      	ldrb	r3, [r3, #1]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc52 	bl	80005d8 <bus_read>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4619      	mov	r1, r3
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f001 fa59 	bl	80041f0 <ppu_oam_write>

    ctx.byte++;
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <dma_tick+0x78>)
 8002d40:	785b      	ldrb	r3, [r3, #1]
 8002d42:	3301      	adds	r3, #1
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <dma_tick+0x78>)
 8002d48:	705a      	strb	r2, [r3, #1]

    ctx.active = ctx.byte < 0xA0;
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <dma_tick+0x78>)
 8002d4c:	785b      	ldrb	r3, [r3, #1]
 8002d4e:	2b9f      	cmp	r3, #159	; 0x9f
 8002d50:	bf94      	ite	ls
 8002d52:	2301      	movls	r3, #1
 8002d54:	2300      	movhi	r3, #0
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	4b02      	ldr	r3, [pc, #8]	; (8002d64 <dma_tick+0x78>)
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e000      	b.n	8002d60 <dma_tick+0x74>
        return;
 8002d5e:	bf00      	nop
}
 8002d60:	bd98      	pop	{r3, r4, r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200012e0 	.word	0x200012e0

08002d68 <dma_transferring>:

bool dma_transferring() {
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
    return ctx.active;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <dma_transferring+0x14>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	200012e0 	.word	0x200012e0

08002d80 <cpu_run>:

emu_context *emu_get_context() {
    return &ctx;
}

void cpu_run(void *p) {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    timer_init();
 8002d88:	f002 fed6 	bl	8005b38 <timer_init>
    cpu_init();
 8002d8c:	f7fe f8a0 	bl	8000ed0 <cpu_init>
    ppu_init();
 8002d90:	f001 f978 	bl	8004084 <ppu_init>

    ctx.running = true;
 8002d94:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <cpu_run+0x70>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	705a      	strb	r2, [r3, #1]
    ctx.paused = false;
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <cpu_run+0x70>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
    ctx.ticks = 0;
 8002da0:	4913      	ldr	r1, [pc, #76]	; (8002df0 <cpu_run+0x70>)
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9c1 2302 	strd	r2, r3, [r1, #8]

    while(ctx.running) {
 8002dae:	e014      	b.n	8002dda <cpu_run+0x5a>
        if (ctx.paused) {
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <cpu_run+0x70>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <cpu_run+0x40>
            osDelay(10);
 8002db8:	200a      	movs	r0, #10
 8002dba:	f00a ff47 	bl	800dc4c <osDelay>
            continue;
 8002dbe:	e00c      	b.n	8002dda <cpu_run+0x5a>
        }

        if (!cpu_step()) {
 8002dc0:	f7fe f8fe 	bl	8000fc0 <cpu_step>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f083 0301 	eor.w	r3, r3, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <cpu_run+0x5a>
            printf("CPU Stopped\n");
 8002dd0:	4808      	ldr	r0, [pc, #32]	; (8002df4 <cpu_run+0x74>)
 8002dd2:	f00e ff7f 	bl	8011cd4 <puts>
            Error_Handler();
 8002dd6:	f001 f945 	bl	8004064 <Error_Handler>
    while(ctx.running) {
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <cpu_run+0x70>)
 8002ddc:	785b      	ldrb	r3, [r3, #1]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e6      	bne.n	8002db0 <cpu_run+0x30>
        }
    }
    Error_Handler();
 8002de2:	f001 f93f 	bl	8004064 <Error_Handler>

}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200012e8 	.word	0x200012e8
 8002df4:	08012cfc 	.word	0x08012cfc

08002df8 <emu_run>:

void emu_run(char *argv) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

    if (!cart_load(argv)) {
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7fd fdc5 	bl	8000990 <cart_load>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f083 0301 	eor.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <emu_run+0x26>
        printf("Failed to load ROM file: %s\n", argv);
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4818      	ldr	r0, [pc, #96]	; (8002e78 <emu_run+0x80>)
 8002e16:	f00e fed7 	bl	8011bc8 <iprintf>
        Error_Handler();
 8002e1a:	f001 f923 	bl	8004064 <Error_Handler>
    }

    printf("Cart loaded..\r\n");
 8002e1e:	4817      	ldr	r0, [pc, #92]	; (8002e7c <emu_run+0x84>)
 8002e20:	f00e ff58 	bl	8011cd4 <puts>

    ui_init();
 8002e24:	f002 ff88 	bl	8005d38 <ui_init>

    u32 prev_frame = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]

    while(!ctx.die) {
 8002e2c:	e018      	b.n	8002e60 <emu_run+0x68>
	osDelay(1);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f00a ff0c 	bl	800dc4c <osDelay>
        ui_handle_events();
 8002e34:	f002 ffb2 	bl	8005d9c <ui_handle_events>

        if (prev_frame != ppu_get_context()->current_frame) {
 8002e38:	f001 f91a 	bl	8004070 <ppu_get_context>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f242 132c 	movw	r3, #8492	; 0x212c
 8002e42:	4413      	add	r3, r2
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <emu_run+0x58>
            ui_update();
 8002e4c:	f002 ff82 	bl	8005d54 <ui_update>
        }

        prev_frame = ppu_get_context()->current_frame;
 8002e50:	f001 f90e 	bl	8004070 <ppu_get_context>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f242 132c 	movw	r3, #8492	; 0x212c
 8002e5a:	4413      	add	r3, r2
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60fb      	str	r3, [r7, #12]
    while(!ctx.die) {
 8002e60:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <emu_run+0x88>)
 8002e62:	789b      	ldrb	r3, [r3, #2]
 8002e64:	f083 0301 	eor.w	r3, r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1df      	bne.n	8002e2e <emu_run+0x36>
    }

}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	08012d08 	.word	0x08012d08
 8002e7c:	08012d28 	.word	0x08012d28
 8002e80:	200012e8 	.word	0x200012e8

08002e84 <emu_cycles>:

void emu_cycles(int cpu_cycles) {
 8002e84:	b5b0      	push	{r4, r5, r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
    
    for (int i=0; i<cpu_cycles; i++) {
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e01a      	b.n	8002ec8 <emu_cycles+0x44>
        for (int n=0; n<4; n++) {
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	e00f      	b.n	8002eb8 <emu_cycles+0x34>
            ctx.ticks++;
 8002e98:	4b10      	ldr	r3, [pc, #64]	; (8002edc <emu_cycles+0x58>)
 8002e9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e9e:	1c54      	adds	r4, r2, #1
 8002ea0:	f143 0500 	adc.w	r5, r3, #0
 8002ea4:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <emu_cycles+0x58>)
 8002ea6:	e9c3 4502 	strd	r4, r5, [r3, #8]
            timer_tick();
 8002eaa:	f002 fe53 	bl	8005b54 <timer_tick>
            ppu_tick();
 8002eae:	f001 f96f 	bl	8004190 <ppu_tick>
        for (int n=0; n<4; n++) {
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	ddec      	ble.n	8002e98 <emu_cycles+0x14>
        }

        dma_tick();
 8002ebe:	f7ff ff15 	bl	8002cec <dma_tick>
    for (int i=0; i<cpu_cycles; i++) {
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dbe0      	blt.n	8002e92 <emu_cycles+0xe>
    }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200012e8 	.word	0x200012e8

08002ee0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a07      	ldr	r2, [pc, #28]	; (8002f0c <vApplicationGetIdleTaskMemory+0x2c>)
 8002ef0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <vApplicationGetIdleTaskMemory+0x30>)
 8002ef6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2280      	movs	r2, #128	; 0x80
 8002efc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	200012f8 	.word	0x200012f8
 8002f10:	200013ac 	.word	0x200013ac

08002f14 <gamepad_button_sel>:
    gamepad_state controller;
} gamepad_context;

static gamepad_context ctx = {0};

bool gamepad_button_sel() {
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
    return ctx.button_sel;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <gamepad_button_sel+0x14>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	200015ac 	.word	0x200015ac

08002f2c <gamepad_dir_sel>:

bool gamepad_dir_sel() {
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
    return ctx.dir_sel;
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <gamepad_dir_sel+0x14>)
 8002f32:	785b      	ldrb	r3, [r3, #1]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	200015ac 	.word	0x200015ac

08002f44 <gamepad_set_sel>:

void gamepad_set_sel(u8 value) {
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
    ctx.button_sel = value & 0x20;
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	bf14      	ite	ne
 8002f58:	2301      	movne	r3, #1
 8002f5a:	2300      	moveq	r3, #0
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <gamepad_set_sel+0x40>)
 8002f60:	701a      	strb	r2, [r3, #0]
    ctx.dir_sel = value & 0x10;
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <gamepad_set_sel+0x40>)
 8002f74:	705a      	strb	r2, [r3, #1]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	200015ac 	.word	0x200015ac

08002f88 <gamepad_get_state>:

gamepad_state *gamepad_get_state() {
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
    return &ctx.controller;
 8002f8c:	4b02      	ldr	r3, [pc, #8]	; (8002f98 <gamepad_get_state+0x10>)
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	200015ae 	.word	0x200015ae

08002f9c <gamepad_get_output>:

u8 gamepad_get_output() {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
    u8 output = 0xCF;
 8002fa2:	23cf      	movs	r3, #207	; 0xcf
 8002fa4:	71fb      	strb	r3, [r7, #7]

    if (!gamepad_button_sel()) {
 8002fa6:	f7ff ffb5 	bl	8002f14 <gamepad_button_sel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f083 0301 	eor.w	r3, r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d027      	beq.n	8003006 <gamepad_get_output+0x6a>
        if (gamepad_get_state()->start) {
 8002fb6:	f7ff ffe7 	bl	8002f88 <gamepad_get_state>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <gamepad_get_output+0x2e>
            output &= ~(1 << 3);
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	f023 0308 	bic.w	r3, r3, #8
 8002fc8:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->select) {
 8002fca:	f7ff ffdd 	bl	8002f88 <gamepad_get_state>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	785b      	ldrb	r3, [r3, #1]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <gamepad_get_output+0x42>
            output &= ~(1 << 2);
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	f023 0304 	bic.w	r3, r3, #4
 8002fdc:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->a) {
 8002fde:	f7ff ffd3 	bl	8002f88 <gamepad_get_state>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	789b      	ldrb	r3, [r3, #2]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <gamepad_get_output+0x56>
            output &= ~(1 << 0);
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->b) {
 8002ff2:	f7ff ffc9 	bl	8002f88 <gamepad_get_state>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	78db      	ldrb	r3, [r3, #3]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <gamepad_get_output+0x6a>
            output &= ~(1 << 1);
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f023 0302 	bic.w	r3, r3, #2
 8003004:	71fb      	strb	r3, [r7, #7]
        }
    }

    if (!gamepad_dir_sel()) {
 8003006:	f7ff ff91 	bl	8002f2c <gamepad_dir_sel>
 800300a:	4603      	mov	r3, r0
 800300c:	f083 0301 	eor.w	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d027      	beq.n	8003066 <gamepad_get_output+0xca>
        if (gamepad_get_state()->left) {
 8003016:	f7ff ffb7 	bl	8002f88 <gamepad_get_state>
 800301a:	4603      	mov	r3, r0
 800301c:	799b      	ldrb	r3, [r3, #6]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <gamepad_get_output+0x8e>
            output &= ~(1 << 1);
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	f023 0302 	bic.w	r3, r3, #2
 8003028:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->right) {
 800302a:	f7ff ffad 	bl	8002f88 <gamepad_get_state>
 800302e:	4603      	mov	r3, r0
 8003030:	79db      	ldrb	r3, [r3, #7]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <gamepad_get_output+0xa2>
            output &= ~(1 << 0);
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->up) {
 800303e:	f7ff ffa3 	bl	8002f88 <gamepad_get_state>
 8003042:	4603      	mov	r3, r0
 8003044:	791b      	ldrb	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <gamepad_get_output+0xb6>
            output &= ~(1 << 2);
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->down) {
 8003052:	f7ff ff99 	bl	8002f88 <gamepad_get_state>
 8003056:	4603      	mov	r3, r0
 8003058:	795b      	ldrb	r3, [r3, #5]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <gamepad_get_output+0xca>
            output &= ~(1 << 3);
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f023 0308 	bic.w	r3, r3, #8
 8003064:	71fb      	strb	r3, [r7, #7]
        }
    }

    return output;
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <instruction_by_opcode>:
    [0xFF] = {IN_RST, AM_IMP, RT_NONE, RT_NONE, CT_NONE, 0x38},
};



instruction *instruction_by_opcode(u8 opcode) {
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
    return &instructions[opcode];
 800307a:	79fa      	ldrb	r2, [r7, #7]
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4a03      	ldr	r2, [pc, #12]	; (8003094 <instruction_by_opcode+0x24>)
 8003086:	4413      	add	r3, r2
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	200003b8 	.word	0x200003b8

08003098 <int_handle>:
#include <cpu.h>
#include <stack.h>
#include <interrupts.h>

void int_handle(cpu_context *ctx, u16 address) {
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
    stack_push16(ctx->regs.pc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	891b      	ldrh	r3, [r3, #8]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 f9d2 	bl	8005452 <stack_push16>
    ctx->regs.pc = address;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	887a      	ldrh	r2, [r7, #2]
 80030b2:	811a      	strh	r2, [r3, #8]
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <int_check>:

bool int_check(cpu_context *ctx, u16 address, interrupt_type it) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	707b      	strb	r3, [r7, #1]
    if (ctx->int_flags & it && ctx->ie_register & it) {
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7f5a      	ldrb	r2, [r3, #29]
 80030d0:	787b      	ldrb	r3, [r7, #1]
 80030d2:	4013      	ands	r3, r2
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01f      	beq.n	800311a <int_check+0x5e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7f1a      	ldrb	r2, [r3, #28]
 80030de:	787b      	ldrb	r3, [r7, #1]
 80030e0:	4013      	ands	r3, r2
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d018      	beq.n	800311a <int_check+0x5e>
        int_handle(ctx, address);
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	4619      	mov	r1, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ffd3 	bl	8003098 <int_handle>
        ctx->int_flags &= ~it;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	7f5b      	ldrb	r3, [r3, #29]
 80030f6:	b25a      	sxtb	r2, r3
 80030f8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	b25b      	sxtb	r3, r3
 8003100:	4013      	ands	r3, r2
 8003102:	b25b      	sxtb	r3, r3
 8003104:	b2da      	uxtb	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	775a      	strb	r2, [r3, #29]
        ctx->halted = false;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	761a      	strb	r2, [r3, #24]
        ctx->int_master_enabled = false;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	769a      	strb	r2, [r3, #26]

        return true;
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <int_check+0x60>
    }

    return false;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <cpu_handle_interrupts>:

void cpu_handle_interrupts(cpu_context *ctx) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    if (int_check(ctx, 0x40, IT_VBLANK)) {
 800312c:	2201      	movs	r2, #1
 800312e:	2140      	movs	r1, #64	; 0x40
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ffc3 	bl	80030bc <int_check>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11c      	bne.n	8003176 <cpu_handle_interrupts+0x52>

    } else if (int_check(ctx, 0x48, IT_LCD_STAT)) {
 800313c:	2202      	movs	r2, #2
 800313e:	2148      	movs	r1, #72	; 0x48
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ffbb 	bl	80030bc <int_check>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d114      	bne.n	8003176 <cpu_handle_interrupts+0x52>

    } else if (int_check(ctx, 0x50, IT_TIMER)) {
 800314c:	2204      	movs	r2, #4
 800314e:	2150      	movs	r1, #80	; 0x50
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ffb3 	bl	80030bc <int_check>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10c      	bne.n	8003176 <cpu_handle_interrupts+0x52>

    }  else if (int_check(ctx, 0x58, IT_SERIAL)) {
 800315c:	2208      	movs	r2, #8
 800315e:	2158      	movs	r1, #88	; 0x58
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ffab 	bl	80030bc <int_check>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <cpu_handle_interrupts+0x52>

    }  else if (int_check(ctx, 0x60, IT_JOYPAD)) {
 800316c:	2210      	movs	r2, #16
 800316e:	2160      	movs	r1, #96	; 0x60
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ffa3 	bl	80030bc <int_check>

    } 
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <io_read>:
#include <cpu.h>
#include <gamepad.h>

static char serial_data[2];

u8 io_read(u16 address) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]
    if (address == 0xFF00) {
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8003190:	d103      	bne.n	800319a <io_read+0x1a>
        return gamepad_get_output();
 8003192:	f7ff ff03 	bl	8002f9c <gamepad_get_output>
 8003196:	4603      	mov	r3, r0
 8003198:	e04a      	b.n	8003230 <io_read+0xb0>
    }

    if (address == 0xFF01) {
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	f64f 7201 	movw	r2, #65281	; 0xff01
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d102      	bne.n	80031aa <io_read+0x2a>
        return serial_data[0];
 80031a4:	4b24      	ldr	r3, [pc, #144]	; (8003238 <io_read+0xb8>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	e042      	b.n	8003230 <io_read+0xb0>
    }

    if (address == 0xFF02) {
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	f64f 7202 	movw	r2, #65282	; 0xff02
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d102      	bne.n	80031ba <io_read+0x3a>
        return serial_data[1];
 80031b4:	4b20      	ldr	r3, [pc, #128]	; (8003238 <io_read+0xb8>)
 80031b6:	785b      	ldrb	r3, [r3, #1]
 80031b8:	e03a      	b.n	8003230 <io_read+0xb0>
    }

    if (BETWEEN(address, 0xFF04, 0xFF07)) {
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	f64f 7203 	movw	r2, #65283	; 0xff03
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d90a      	bls.n	80031da <io_read+0x5a>
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	f64f 7207 	movw	r2, #65287	; 0xff07
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d805      	bhi.n	80031da <io_read+0x5a>
        return timer_read(address);
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f002 fd81 	bl	8005cd8 <timer_read>
 80031d6:	4603      	mov	r3, r0
 80031d8:	e02a      	b.n	8003230 <io_read+0xb0>
    }

    if (address == 0xFF0F) {
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d103      	bne.n	80031ec <io_read+0x6c>
        return cpu_get_int_flags();
 80031e4:	f7ff fd16 	bl	8002c14 <cpu_get_int_flags>
 80031e8:	4603      	mov	r3, r0
 80031ea:	e021      	b.n	8003230 <io_read+0xb0>
    }

    if (BETWEEN(address, 0xFF10, 0xFF3F)) {
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d906      	bls.n	8003204 <io_read+0x84>
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	f64f 723f 	movw	r2, #65343	; 0xff3f
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d801      	bhi.n	8003204 <io_read+0x84>
        //ignore sound
        return 0;
 8003200:	2300      	movs	r3, #0
 8003202:	e015      	b.n	8003230 <io_read+0xb0>
    }

    if (BETWEEN(address, 0xFF40, 0xFF4B)) {
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	f64f 723f 	movw	r2, #65343	; 0xff3f
 800320a:	4293      	cmp	r3, r2
 800320c:	d90a      	bls.n	8003224 <io_read+0xa4>
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	f64f 724b 	movw	r2, #65355	; 0xff4b
 8003214:	4293      	cmp	r3, r2
 8003216:	d805      	bhi.n	8003224 <io_read+0xa4>
        return lcd_read(address);
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f8d6 	bl	80033cc <lcd_read>
 8003220:	4603      	mov	r3, r0
 8003222:	e005      	b.n	8003230 <io_read+0xb0>
    }

    printf("UNSUPPORTED bus_read(%04X)\n", address);
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	4619      	mov	r1, r3
 8003228:	4804      	ldr	r0, [pc, #16]	; (800323c <io_read+0xbc>)
 800322a:	f00e fccd 	bl	8011bc8 <iprintf>
    return 0;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	200015b8 	.word	0x200015b8
 800323c:	08012d38 	.word	0x08012d38

08003240 <io_write>:

void io_write(u16 address, u8 value) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	460a      	mov	r2, r1
 800324a:	80fb      	strh	r3, [r7, #6]
 800324c:	4613      	mov	r3, r2
 800324e:	717b      	strb	r3, [r7, #5]
    if (address == 0xFF00) {
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8003256:	d104      	bne.n	8003262 <io_write+0x22>
        gamepad_set_sel(value);
 8003258:	797b      	ldrb	r3, [r7, #5]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fe72 	bl	8002f44 <gamepad_set_sel>
        return;
 8003260:	e04e      	b.n	8003300 <io_write+0xc0>
    }
    
    if (address == 0xFF01) {
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	f64f 7201 	movw	r2, #65281	; 0xff01
 8003268:	4293      	cmp	r3, r2
 800326a:	d103      	bne.n	8003274 <io_write+0x34>
        serial_data[0] = value;
 800326c:	4a26      	ldr	r2, [pc, #152]	; (8003308 <io_write+0xc8>)
 800326e:	797b      	ldrb	r3, [r7, #5]
 8003270:	7013      	strb	r3, [r2, #0]
        return;
 8003272:	e045      	b.n	8003300 <io_write+0xc0>
    }

    if (address == 0xFF02) {
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	f64f 7202 	movw	r2, #65282	; 0xff02
 800327a:	4293      	cmp	r3, r2
 800327c:	d103      	bne.n	8003286 <io_write+0x46>
        serial_data[1] = value;
 800327e:	4a22      	ldr	r2, [pc, #136]	; (8003308 <io_write+0xc8>)
 8003280:	797b      	ldrb	r3, [r7, #5]
 8003282:	7053      	strb	r3, [r2, #1]
        return;
 8003284:	e03c      	b.n	8003300 <io_write+0xc0>
    }

    if (BETWEEN(address, 0xFF04, 0xFF07)) {
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	f64f 7203 	movw	r2, #65283	; 0xff03
 800328c:	4293      	cmp	r3, r2
 800328e:	d90b      	bls.n	80032a8 <io_write+0x68>
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	f64f 7207 	movw	r2, #65287	; 0xff07
 8003296:	4293      	cmp	r3, r2
 8003298:	d806      	bhi.n	80032a8 <io_write+0x68>
        timer_write(address, value);
 800329a:	797a      	ldrb	r2, [r7, #5]
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f002 fce7 	bl	8005c74 <timer_write>
        return;
 80032a6:	e02b      	b.n	8003300 <io_write+0xc0>
    }
    
    if (address == 0xFF0F) {
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d104      	bne.n	80032bc <io_write+0x7c>
        cpu_set_int_flags(value);
 80032b2:	797b      	ldrb	r3, [r7, #5]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fcb9 	bl	8002c2c <cpu_set_int_flags>
        return;
 80032ba:	e021      	b.n	8003300 <io_write+0xc0>
    }

    if (BETWEEN(address, 0xFF10, 0xFF3F)) {
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d904      	bls.n	80032d0 <io_write+0x90>
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	f64f 723f 	movw	r2, #65343	; 0xff3f
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d916      	bls.n	80032fe <io_write+0xbe>
        //ignore sound
        return;
    }

    if (BETWEEN(address, 0xFF40, 0xFF4B)) {
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	f64f 723f 	movw	r2, #65343	; 0xff3f
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d90b      	bls.n	80032f2 <io_write+0xb2>
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	f64f 724b 	movw	r2, #65355	; 0xff4b
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d806      	bhi.n	80032f2 <io_write+0xb2>
        lcd_write(address, value);
 80032e4:	797a      	ldrb	r2, [r7, #5]
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f8d4 	bl	8003498 <lcd_write>
        return;
 80032f0:	e006      	b.n	8003300 <io_write+0xc0>
    }

    printf("UNSUPPORTED bus_write(%04X)\n", address);
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4805      	ldr	r0, [pc, #20]	; (800330c <io_write+0xcc>)
 80032f8:	f00e fc66 	bl	8011bc8 <iprintf>
 80032fc:	e000      	b.n	8003300 <io_write+0xc0>
        return;
 80032fe:	bf00      	nop
}
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200015b8 	.word	0x200015b8
 800330c:	08012d54 	.word	0x08012d54

08003310 <lcd_init>:
static lcd_context ctx;

static unsigned long colors_default[4] = {0xFFFFFFFF, 0xFFAAAAAA, 0xFF555555, 0xFF000000};
//static unsigned long ogbc_default[4] = {0xFF9BBC0F, 0xFF8BAC0F, 0xFF306230, 0xFF0F380F};

void lcd_init() {
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
    ctx.lcdc = 0x91;
 8003316:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <lcd_init+0xa0>)
 8003318:	2291      	movs	r2, #145	; 0x91
 800331a:	701a      	strb	r2, [r3, #0]
    ctx.scroll_x = 0;
 800331c:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <lcd_init+0xa0>)
 800331e:	2200      	movs	r2, #0
 8003320:	70da      	strb	r2, [r3, #3]
    ctx.scroll_y = 0;
 8003322:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <lcd_init+0xa0>)
 8003324:	2200      	movs	r2, #0
 8003326:	709a      	strb	r2, [r3, #2]
    ctx.ly = 0;
 8003328:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <lcd_init+0xa0>)
 800332a:	2200      	movs	r2, #0
 800332c:	711a      	strb	r2, [r3, #4]
    ctx.ly_compare = 0;
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <lcd_init+0xa0>)
 8003330:	2200      	movs	r2, #0
 8003332:	715a      	strb	r2, [r3, #5]
    ctx.bg_palette = 0xFC;
 8003334:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <lcd_init+0xa0>)
 8003336:	22fc      	movs	r2, #252	; 0xfc
 8003338:	71da      	strb	r2, [r3, #7]
    ctx.obj_palette[0] = 0xFF;
 800333a:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <lcd_init+0xa0>)
 800333c:	22ff      	movs	r2, #255	; 0xff
 800333e:	721a      	strb	r2, [r3, #8]
    ctx.obj_palette[1] = 0xFF;
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <lcd_init+0xa0>)
 8003342:	22ff      	movs	r2, #255	; 0xff
 8003344:	725a      	strb	r2, [r3, #9]
    ctx.win_y = 0;
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <lcd_init+0xa0>)
 8003348:	2200      	movs	r2, #0
 800334a:	729a      	strb	r2, [r3, #10]
    ctx.win_x = 0;
 800334c:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <lcd_init+0xa0>)
 800334e:	2200      	movs	r2, #0
 8003350:	72da      	strb	r2, [r3, #11]

    for (int i=0; i<4; i++) {
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	e020      	b.n	800339a <lcd_init+0x8a>
        ctx.bg_colors[i] = colors_default[i];
 8003358:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <lcd_init+0xa4>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003360:	4913      	ldr	r1, [pc, #76]	; (80033b0 <lcd_init+0xa0>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3302      	adds	r3, #2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	605a      	str	r2, [r3, #4]
        ctx.sp1_colors[i] = colors_default[i];
 800336c:	4a11      	ldr	r2, [pc, #68]	; (80033b4 <lcd_init+0xa4>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003374:	490e      	ldr	r1, [pc, #56]	; (80033b0 <lcd_init+0xa0>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3306      	adds	r3, #6
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	605a      	str	r2, [r3, #4]
        ctx.sp2_colors[i] = colors_default[i];
 8003380:	4a0c      	ldr	r2, [pc, #48]	; (80033b4 <lcd_init+0xa4>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003388:	4909      	ldr	r1, [pc, #36]	; (80033b0 <lcd_init+0xa0>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	330a      	adds	r3, #10
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	605a      	str	r2, [r3, #4]
    for (int i=0; i<4; i++) {
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3301      	adds	r3, #1
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b03      	cmp	r3, #3
 800339e:	dddb      	ble.n	8003358 <lcd_init+0x48>
    }
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	200015bc 	.word	0x200015bc
 80033b4:	200009b8 	.word	0x200009b8

080033b8 <lcd_get_context>:

lcd_context *lcd_get_context() {
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
    return &ctx;
 80033bc:	4b02      	ldr	r3, [pc, #8]	; (80033c8 <lcd_get_context+0x10>)
}
 80033be:	4618      	mov	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	200015bc 	.word	0x200015bc

080033cc <lcd_read>:

u8 lcd_read(u16 address) {
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
    u8 offset = (address - 0xFF40);
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	3b40      	subs	r3, #64	; 0x40
 80033dc:	73fb      	strb	r3, [r7, #15]
    u8 *p = (u8 *)&ctx;
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <lcd_read+0x2c>)
 80033e0:	60bb      	str	r3, [r7, #8]

    return p[offset];
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	4413      	add	r3, r2
 80033e8:	781b      	ldrb	r3, [r3, #0]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	200015bc 	.word	0x200015bc

080033fc <update_palette>:

void update_palette(u8 palette_data, u8 pal) {
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	460a      	mov	r2, r1
 8003406:	71fb      	strb	r3, [r7, #7]
 8003408:	4613      	mov	r3, r2
 800340a:	71bb      	strb	r3, [r7, #6]
    u32 *p_colors = ctx.bg_colors;
 800340c:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <update_palette+0x8c>)
 800340e:	60fb      	str	r3, [r7, #12]

    switch(pal) {
 8003410:	79bb      	ldrb	r3, [r7, #6]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d002      	beq.n	800341c <update_palette+0x20>
 8003416:	2b02      	cmp	r3, #2
 8003418:	d003      	beq.n	8003422 <update_palette+0x26>
 800341a:	e005      	b.n	8003428 <update_palette+0x2c>
        case 1:
            p_colors = ctx.sp1_colors;
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <update_palette+0x90>)
 800341e:	60fb      	str	r3, [r7, #12]
            break;
 8003420:	e002      	b.n	8003428 <update_palette+0x2c>
        case 2:
            p_colors = ctx.sp2_colors;
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <update_palette+0x94>)
 8003424:	60fb      	str	r3, [r7, #12]
            break;
 8003426:	bf00      	nop
    }

    p_colors[0] = colors_default[palette_data & 0b11];
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	4a19      	ldr	r2, [pc, #100]	; (8003494 <update_palette+0x98>)
 8003430:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	601a      	str	r2, [r3, #0]
    p_colors[1] = colors_default[(palette_data >> 2) & 0b11];
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 0203 	and.w	r2, r3, #3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3304      	adds	r3, #4
 8003446:	4913      	ldr	r1, [pc, #76]	; (8003494 <update_palette+0x98>)
 8003448:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800344c:	601a      	str	r2, [r3, #0]
    p_colors[2] = colors_default[(palette_data >> 4) & 0b11];
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f003 0203 	and.w	r2, r3, #3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3308      	adds	r3, #8
 800345c:	490d      	ldr	r1, [pc, #52]	; (8003494 <update_palette+0x98>)
 800345e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003462:	601a      	str	r2, [r3, #0]
    p_colors[3] = colors_default[(palette_data >> 6) & 0b11];
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	099b      	lsrs	r3, r3, #6
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 0203 	and.w	r2, r3, #3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	330c      	adds	r3, #12
 8003472:	4908      	ldr	r1, [pc, #32]	; (8003494 <update_palette+0x98>)
 8003474:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003478:	601a      	str	r2, [r3, #0]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	200015c8 	.word	0x200015c8
 800348c:	200015d8 	.word	0x200015d8
 8003490:	200015e8 	.word	0x200015e8
 8003494:	200009b8 	.word	0x200009b8

08003498 <lcd_write>:

void lcd_write(u16 address, u8 value) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	460a      	mov	r2, r1
 80034a2:	80fb      	strh	r3, [r7, #6]
 80034a4:	4613      	mov	r3, r2
 80034a6:	717b      	strb	r3, [r7, #5]

    u8 offset = (address - 0xFF40);
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	3b40      	subs	r3, #64	; 0x40
 80034ae:	73fb      	strb	r3, [r7, #15]
    u8 *p = (u8 *)&ctx;
 80034b0:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <lcd_write+0x88>)
 80034b2:	60bb      	str	r3, [r7, #8]
    p[offset] = value;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	4413      	add	r3, r2
 80034ba:	797a      	ldrb	r2, [r7, #5]
 80034bc:	701a      	strb	r2, [r3, #0]

    if (offset == 6) { 
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	2b06      	cmp	r3, #6
 80034c2:	d103      	bne.n	80034cc <lcd_write+0x34>
        //0xFF46 = DMA
        dma_start(value);
 80034c4:	797b      	ldrb	r3, [r7, #5]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fbf6 	bl	8002cb8 <dma_start>
    }

    if (address == 0xFF47) {
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	f64f 7247 	movw	r2, #65351	; 0xff47
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d105      	bne.n	80034e2 <lcd_write+0x4a>
        update_palette(value, 0);
 80034d6:	797b      	ldrb	r3, [r7, #5]
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff8e 	bl	80033fc <update_palette>
    } else if (address == 0xFF48) {
        update_palette(value & 0b11111100, 1);
    } else if (address == 0xFF49) {
        update_palette(value & 0b11111100, 2);
    }
}
 80034e0:	e01a      	b.n	8003518 <lcd_write+0x80>
    } else if (address == 0xFF48) {
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	f64f 7248 	movw	r2, #65352	; 0xff48
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d108      	bne.n	80034fe <lcd_write+0x66>
        update_palette(value & 0b11111100, 1);
 80034ec:	797b      	ldrb	r3, [r7, #5]
 80034ee:	f023 0303 	bic.w	r3, r3, #3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2101      	movs	r1, #1
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ff80 	bl	80033fc <update_palette>
}
 80034fc:	e00c      	b.n	8003518 <lcd_write+0x80>
    } else if (address == 0xFF49) {
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	f64f 7249 	movw	r2, #65353	; 0xff49
 8003504:	4293      	cmp	r3, r2
 8003506:	d107      	bne.n	8003518 <lcd_write+0x80>
        update_palette(value & 0b11111100, 2);
 8003508:	797b      	ldrb	r3, [r7, #5]
 800350a:	f023 0303 	bic.w	r3, r3, #3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2102      	movs	r1, #2
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff72 	bl	80033fc <update_palette>
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200015bc 	.word	0x200015bc

08003524 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	b29a      	uxth	r2, r3
 8003534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	4804      	ldr	r0, [pc, #16]	; (800354c <_write+0x28>)
 800353c:	f006 fbce 	bl	8009cdc <HAL_UART_Transmit>
  return len;
 8003540:	687b      	ldr	r3, [r7, #4]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200096cc 	.word	0x200096cc

08003550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003550:	b5b0      	push	{r4, r5, r7, lr}
 8003552:	b096      	sub	sp, #88	; 0x58
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003556:	f002 fc52 	bl	8005dfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800355a:	f000 f853 	bl	8003604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800355e:	f000 f961 	bl	8003824 <MX_GPIO_Init>
  MX_SDMMC2_SD_Init();
 8003562:	f000 f8e9 	bl	8003738 <MX_SDMMC2_SD_Init>
  MX_DMA_Init();
 8003566:	f000 f937 	bl	80037d8 <MX_DMA_Init>
  MX_FATFS_Init();
 800356a:	f007 fdd3 	bl	800b114 <MX_FATFS_Init>
  MX_CRC_Init();
 800356e:	f000 f8c1 	bl	80036f4 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8003572:	f000 f901 	bl	8003778 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <main+0x9c>)
 8003578:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800357c:	461d      	mov	r5, r3
 800357e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800358a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f00a fb0f 	bl	800dbb4 <osThreadCreate>
 8003596:	4603      	mov	r3, r0
 8003598:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <main+0xa0>)
 800359a:	6013      	str	r3, [r2, #0]

  /* definition and creation of cpu_task */
  osThreadDef(cpu_task, cpu_start, osPriorityBelowNormal, 0, 512);
 800359c:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <main+0xa4>)
 800359e:	f107 0420 	add.w	r4, r7, #32
 80035a2:	461d      	mov	r5, r3
 80035a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cpu_taskHandle = osThreadCreate(osThread(cpu_task), NULL);
 80035b0:	f107 0320 	add.w	r3, r7, #32
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00a fafc 	bl	800dbb4 <osThreadCreate>
 80035bc:	4603      	mov	r3, r0
 80035be:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <main+0xa8>)
 80035c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of ui_task */
  osThreadDef(ui_task, ui_start, osPriorityNormal, 0, 512);
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <main+0xac>)
 80035c4:	1d3c      	adds	r4, r7, #4
 80035c6:	461d      	mov	r5, r3
 80035c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ui_taskHandle = osThreadCreate(osThread(ui_task), NULL);
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f00a faeb 	bl	800dbb4 <osThreadCreate>
 80035de:	4603      	mov	r3, r0
 80035e0:	4a07      	ldr	r2, [pc, #28]	; (8003600 <main+0xb0>)
 80035e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80035e4:	f00a fac3 	bl	800db6e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80035e8:	e7fe      	b.n	80035e8 <main+0x98>
 80035ea:	bf00      	nop
 80035ec:	08012d94 	.word	0x08012d94
 80035f0:	20009560 	.word	0x20009560
 80035f4:	08012db0 	.word	0x08012db0
 80035f8:	20009750 	.word	0x20009750
 80035fc:	08012dcc 	.word	0x08012dcc
 8003600:	20009754 	.word	0x20009754

08003604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b094      	sub	sp, #80	; 0x50
 8003608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800360a:	f107 031c 	add.w	r3, r7, #28
 800360e:	2234      	movs	r2, #52	; 0x34
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f00d ff26 	bl	8011464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003618:	f107 0308 	add.w	r3, r7, #8
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003628:	4b30      	ldr	r3, [pc, #192]	; (80036ec <SystemClock_Config+0xe8>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	4a2f      	ldr	r2, [pc, #188]	; (80036ec <SystemClock_Config+0xe8>)
 800362e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003632:	6413      	str	r3, [r2, #64]	; 0x40
 8003634:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <SystemClock_Config+0xe8>)
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003640:	4b2b      	ldr	r3, [pc, #172]	; (80036f0 <SystemClock_Config+0xec>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a2a      	ldr	r2, [pc, #168]	; (80036f0 <SystemClock_Config+0xec>)
 8003646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	4b28      	ldr	r3, [pc, #160]	; (80036f0 <SystemClock_Config+0xec>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003658:	2303      	movs	r3, #3
 800365a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800365c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003660:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003662:	2301      	movs	r3, #1
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003666:	2310      	movs	r3, #16
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800366a:	2302      	movs	r3, #2
 800366c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800366e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003674:	2319      	movs	r3, #25
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003678:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800367c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800367e:	2302      	movs	r3, #2
 8003680:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003682:	2309      	movs	r3, #9
 8003684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003686:	2302      	movs	r3, #2
 8003688:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800368a:	f107 031c 	add.w	r3, r7, #28
 800368e:	4618      	mov	r0, r3
 8003690:	f003 fb8c 	bl	8006dac <HAL_RCC_OscConfig>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800369a:	f000 fce3 	bl	8004064 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800369e:	f003 fb35 	bl	8006d0c <HAL_PWREx_EnableOverDrive>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80036a8:	f000 fcdc 	bl	8004064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036ac:	230f      	movs	r3, #15
 80036ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036b0:	2302      	movs	r3, #2
 80036b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80036c4:	f107 0308 	add.w	r3, r7, #8
 80036c8:	2107      	movs	r1, #7
 80036ca:	4618      	mov	r0, r3
 80036cc:	f003 fe1c 	bl	8007308 <HAL_RCC_ClockConfig>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80036d6:	f000 fcc5 	bl	8004064 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80036da:	2200      	movs	r2, #0
 80036dc:	2100      	movs	r1, #0
 80036de:	2000      	movs	r0, #0
 80036e0:	f003 fefe 	bl	80074e0 <HAL_RCC_MCOConfig>
}
 80036e4:	bf00      	nop
 80036e6:	3750      	adds	r7, #80	; 0x50
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40007000 	.word	0x40007000

080036f4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <MX_CRC_Init+0x3c>)
 80036fa:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <MX_CRC_Init+0x40>)
 80036fc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <MX_CRC_Init+0x3c>)
 8003700:	2200      	movs	r2, #0
 8003702:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <MX_CRC_Init+0x3c>)
 8003706:	2200      	movs	r2, #0
 8003708:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <MX_CRC_Init+0x3c>)
 800370c:	2200      	movs	r2, #0
 800370e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <MX_CRC_Init+0x3c>)
 8003712:	2200      	movs	r2, #0
 8003714:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <MX_CRC_Init+0x3c>)
 8003718:	2201      	movs	r2, #1
 800371a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800371c:	4804      	ldr	r0, [pc, #16]	; (8003730 <MX_CRC_Init+0x3c>)
 800371e:	f002 fca1 	bl	8006064 <HAL_CRC_Init>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003728:	f000 fc9c 	bl	8004064 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}
 8003730:	200095c4 	.word	0x200095c4
 8003734:	40023000 	.word	0x40023000

08003738 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <MX_SDMMC2_SD_Init+0x38>)
 800373e:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <MX_SDMMC2_SD_Init+0x3c>)
 8003740:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <MX_SDMMC2_SD_Init+0x38>)
 8003744:	2200      	movs	r2, #0
 8003746:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <MX_SDMMC2_SD_Init+0x38>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <MX_SDMMC2_SD_Init+0x38>)
 8003750:	2200      	movs	r2, #0
 8003752:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <MX_SDMMC2_SD_Init+0x38>)
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <MX_SDMMC2_SD_Init+0x38>)
 800375c:	2200      	movs	r2, #0
 800375e:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <MX_SDMMC2_SD_Init+0x38>)
 8003762:	2200      	movs	r2, #0
 8003764:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8003766:	bf00      	nop
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	200095e8 	.word	0x200095e8
 8003774:	40011c00 	.word	0x40011c00

08003778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <MX_USART1_UART_Init+0x58>)
 800377e:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <MX_USART1_UART_Init+0x5c>)
 8003780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003782:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <MX_USART1_UART_Init+0x58>)
 8003784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <MX_USART1_UART_Init+0x58>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <MX_USART1_UART_Init+0x58>)
 8003792:	2200      	movs	r2, #0
 8003794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003796:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <MX_USART1_UART_Init+0x58>)
 8003798:	2200      	movs	r2, #0
 800379a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <MX_USART1_UART_Init+0x58>)
 800379e:	220c      	movs	r2, #12
 80037a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <MX_USART1_UART_Init+0x58>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <MX_USART1_UART_Init+0x58>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <MX_USART1_UART_Init+0x58>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <MX_USART1_UART_Init+0x58>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037ba:	4805      	ldr	r0, [pc, #20]	; (80037d0 <MX_USART1_UART_Init+0x58>)
 80037bc:	f006 fa40 	bl	8009c40 <HAL_UART_Init>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80037c6:	f000 fc4d 	bl	8004064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	200096cc 	.word	0x200096cc
 80037d4:	40011000 	.word	0x40011000

080037d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <MX_DMA_Init+0x48>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a0f      	ldr	r2, [pc, #60]	; (8003820 <MX_DMA_Init+0x48>)
 80037e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <MX_DMA_Init+0x48>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80037f6:	2200      	movs	r2, #0
 80037f8:	2105      	movs	r1, #5
 80037fa:	2038      	movs	r0, #56	; 0x38
 80037fc:	f002 fc08 	bl	8006010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003800:	2038      	movs	r0, #56	; 0x38
 8003802:	f002 fc21 	bl	8006048 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8003806:	2200      	movs	r2, #0
 8003808:	2105      	movs	r1, #5
 800380a:	2044      	movs	r0, #68	; 0x44
 800380c:	f002 fc00 	bl	8006010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003810:	2044      	movs	r0, #68	; 0x44
 8003812:	f002 fc19 	bl	8006048 <HAL_NVIC_EnableIRQ>

}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800

08003824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b090      	sub	sp, #64	; 0x40
 8003828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	605a      	str	r2, [r3, #4]
 8003834:	609a      	str	r2, [r3, #8]
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800383a:	4bab      	ldr	r3, [pc, #684]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	4aaa      	ldr	r2, [pc, #680]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003840:	f043 0310 	orr.w	r3, r3, #16
 8003844:	6313      	str	r3, [r2, #48]	; 0x30
 8003846:	4ba8      	ldr	r3, [pc, #672]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003852:	4ba5      	ldr	r3, [pc, #660]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4aa4      	ldr	r2, [pc, #656]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800385c:	6313      	str	r3, [r2, #48]	; 0x30
 800385e:	4ba2      	ldr	r3, [pc, #648]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800386a:	4b9f      	ldr	r3, [pc, #636]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a9e      	ldr	r2, [pc, #632]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003870:	f043 0302 	orr.w	r3, r3, #2
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b9c      	ldr	r3, [pc, #624]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	623b      	str	r3, [r7, #32]
 8003880:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003882:	4b99      	ldr	r3, [pc, #612]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	4a98      	ldr	r2, [pc, #608]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003888:	f043 0308 	orr.w	r3, r3, #8
 800388c:	6313      	str	r3, [r2, #48]	; 0x30
 800388e:	4b96      	ldr	r3, [pc, #600]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800389a:	4b93      	ldr	r3, [pc, #588]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	4a92      	ldr	r2, [pc, #584]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 80038a0:	f043 0304 	orr.w	r3, r3, #4
 80038a4:	6313      	str	r3, [r2, #48]	; 0x30
 80038a6:	4b90      	ldr	r3, [pc, #576]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b2:	4b8d      	ldr	r3, [pc, #564]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a8c      	ldr	r2, [pc, #560]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b8a      	ldr	r3, [pc, #552]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80038ca:	4b87      	ldr	r3, [pc, #540]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4a86      	ldr	r2, [pc, #536]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 80038d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038d4:	6313      	str	r3, [r2, #48]	; 0x30
 80038d6:	4b84      	ldr	r3, [pc, #528]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80038e2:	4b81      	ldr	r3, [pc, #516]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4a80      	ldr	r2, [pc, #512]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 80038e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30
 80038ee:	4b7e      	ldr	r3, [pc, #504]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80038fa:	4b7b      	ldr	r3, [pc, #492]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4a7a      	ldr	r2, [pc, #488]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003900:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003904:	6313      	str	r3, [r2, #48]	; 0x30
 8003906:	4b78      	ldr	r3, [pc, #480]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003912:	4b75      	ldr	r3, [pc, #468]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	4a74      	ldr	r2, [pc, #464]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003918:	f043 0320 	orr.w	r3, r3, #32
 800391c:	6313      	str	r3, [r2, #48]	; 0x30
 800391e:	4b72      	ldr	r3, [pc, #456]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800392a:	4b6f      	ldr	r3, [pc, #444]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a6e      	ldr	r2, [pc, #440]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b6c      	ldr	r3, [pc, #432]	; (8003ae8 <MX_GPIO_Init+0x2c4>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8003942:	2378      	movs	r3, #120	; 0x78
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003946:	2302      	movs	r3, #2
 8003948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394e:	2300      	movs	r3, #0
 8003950:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003952:	2306      	movs	r3, #6
 8003954:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800395a:	4619      	mov	r1, r3
 800395c:	4863      	ldr	r0, [pc, #396]	; (8003aec <MX_GPIO_Init+0x2c8>)
 800395e:	f003 f811 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003962:	2304      	movs	r3, #4
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	2302      	movs	r3, #2
 8003968:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396e:	2303      	movs	r3, #3
 8003970:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003972:	2309      	movs	r3, #9
 8003974:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800397a:	4619      	mov	r1, r3
 800397c:	485b      	ldr	r0, [pc, #364]	; (8003aec <MX_GPIO_Init+0x2c8>)
 800397e:	f003 f801 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003982:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	2302      	movs	r3, #2
 800398a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003990:	2303      	movs	r3, #3
 8003992:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003994:	230b      	movs	r3, #11
 8003996:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800399c:	4619      	mov	r1, r3
 800399e:	4854      	ldr	r0, [pc, #336]	; (8003af0 <MX_GPIO_Init+0x2cc>)
 80039a0:	f002 fff0 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80039a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039aa:	2302      	movs	r3, #2
 80039ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b2:	2303      	movs	r3, #3
 80039b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039b6:	230c      	movs	r3, #12
 80039b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039be:	4619      	mov	r1, r3
 80039c0:	484a      	ldr	r0, [pc, #296]	; (8003aec <MX_GPIO_Init+0x2c8>)
 80039c2:	f002 ffdf 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80039c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039cc:	2312      	movs	r3, #18
 80039ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d4:	2300      	movs	r3, #0
 80039d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039d8:	2304      	movs	r3, #4
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e0:	4619      	mov	r1, r3
 80039e2:	4844      	ldr	r0, [pc, #272]	; (8003af4 <MX_GPIO_Init+0x2d0>)
 80039e4:	f002 ffce 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80039e8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f6:	2303      	movs	r3, #3
 80039f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80039fa:	230a      	movs	r3, #10
 80039fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a02:	4619      	mov	r1, r3
 8003a04:	483b      	ldr	r0, [pc, #236]	; (8003af4 <MX_GPIO_Init+0x2d0>)
 8003a06:	f002 ffbd 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RX_Pin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8003a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a10:	2302      	movs	r3, #2
 8003a12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8003a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a24:	4619      	mov	r1, r3
 8003a26:	4834      	ldr	r0, [pc, #208]	; (8003af8 <MX_GPIO_Init+0x2d4>)
 8003a28:	f002 ffac 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_Pin */
  GPIO_InitStruct.Pin = CEC_Pin;
 8003a2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a32:	2312      	movs	r3, #18
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8003a3e:	2304      	movs	r3, #4
 8003a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8003a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a46:	4619      	mov	r1, r3
 8003a48:	482c      	ldr	r0, [pc, #176]	; (8003afc <MX_GPIO_Init+0x2d8>)
 8003a4a:	f002 ff9b 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SDA_Pin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a52:	2312      	movs	r3, #18
 8003a54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8003a5e:	230b      	movs	r3, #11
 8003a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8003a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a66:	4619      	mov	r1, r3
 8003a68:	4822      	ldr	r0, [pc, #136]	; (8003af4 <MX_GPIO_Init+0x2d0>)
 8003a6a:	f002 ff8b 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003a6e:	2340      	movs	r3, #64	; 0x40
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a72:	2302      	movs	r3, #2
 8003a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003a7e:	230a      	movs	r3, #10
 8003a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a86:	4619      	mov	r1, r3
 8003a88:	481a      	ldr	r0, [pc, #104]	; (8003af4 <MX_GPIO_Init+0x2d0>)
 8003a8a:	f002 ff7b 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A12_Pin
                           FMC_A10_Pin FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8003a8e:	f248 1337 	movw	r3, #33079	; 0x8137
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4811      	ldr	r0, [pc, #68]	; (8003af0 <MX_GPIO_Init+0x2cc>)
 8003aac:	f002 ff6a 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin DSI_RESET_Pin
                           ARD_D8_Pin LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin
                           ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin
 8003ab0:	f24f 033b 	movw	r3, #61499	; 0xf03b
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARD_D8_Pin|LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	480e      	ldr	r0, [pc, #56]	; (8003b00 <MX_GPIO_Init+0x2dc>)
 8003ac6:	f002 ff5d 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003aca:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003adc:	230c      	movs	r3, #12
 8003ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	e00d      	b.n	8003b04 <MX_GPIO_Init+0x2e0>
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40021800 	.word	0x40021800
 8003af4:	40020400 	.word	0x40020400
 8003af8:	40020800 	.word	0x40020800
 8003afc:	40020000 	.word	0x40020000
 8003b00:	40022400 	.word	0x40022400
 8003b04:	48bb      	ldr	r0, [pc, #748]	; (8003df4 <MX_GPIO_Init+0x5d0>)
 8003b06:	f002 ff3d 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM_DATIN5_Pin DFSDM_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8003b0a:	f640 0308 	movw	r3, #2056	; 0x808
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b10:	2302      	movs	r3, #2
 8003b12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b24:	4619      	mov	r1, r3
 8003b26:	48b4      	ldr	r0, [pc, #720]	; (8003df8 <MX_GPIO_Init+0x5d4>)
 8003b28:	f002 ff2c 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8003b2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b32:	2302      	movs	r3, #2
 8003b34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b3e:	2309      	movs	r3, #9
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b46:	4619      	mov	r1, r3
 8003b48:	48ab      	ldr	r0, [pc, #684]	; (8003df8 <MX_GPIO_Init+0x5d4>)
 8003b4a:	f002 ff1b 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8003b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b60:	2305      	movs	r3, #5
 8003b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8003b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b68:	4619      	mov	r1, r3
 8003b6a:	48a4      	ldr	r0, [pc, #656]	; (8003dfc <MX_GPIO_Init+0x5d8>)
 8003b6c:	f002 ff0a 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8003b70:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b76:	2300      	movs	r3, #0
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b82:	4619      	mov	r1, r3
 8003b84:	489e      	ldr	r0, [pc, #632]	; (8003e00 <MX_GPIO_Init+0x5dc>)
 8003b86:	f002 fefd 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL2_Pin D27_Pin D26_Pin FMC_NBL3_Pin
                           D29_Pin D31_Pin D28_Pin D25_Pin
                           D30_Pin D24_Pin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8003b8a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b90:	2302      	movs	r3, #2
 8003b92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b9c:	230c      	movs	r3, #12
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4896      	ldr	r0, [pc, #600]	; (8003e00 <MX_GPIO_Init+0x5dc>)
 8003ba8:	f002 feec 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8003bac:	23f8      	movs	r3, #248	; 0xf8
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4891      	ldr	r0, [pc, #580]	; (8003e04 <MX_GPIO_Init+0x5e0>)
 8003bc0:	f002 fee0 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8003bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8003bd6:	2307      	movs	r3, #7
 8003bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8003bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bde:	4619      	mov	r1, r3
 8003be0:	4889      	ldr	r0, [pc, #548]	; (8003e08 <MX_GPIO_Init+0x5e4>)
 8003be2:	f002 fecf 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8003be6:	2330      	movs	r3, #48	; 0x30
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bea:	2300      	movs	r3, #0
 8003bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	487e      	ldr	r0, [pc, #504]	; (8003df4 <MX_GPIO_Init+0x5d0>)
 8003bfa:	f002 fec3 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c02:	2302      	movs	r3, #2
 8003c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8003c12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c16:	4619      	mov	r1, r3
 8003c18:	4876      	ldr	r0, [pc, #472]	; (8003df4 <MX_GPIO_Init+0x5d0>)
 8003c1a:	f002 feb3 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8003c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c24:	2302      	movs	r3, #2
 8003c26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c30:	2305      	movs	r3, #5
 8003c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8003c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4870      	ldr	r0, [pc, #448]	; (8003dfc <MX_GPIO_Init+0x5d8>)
 8003c3c:	f002 fea2 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003c40:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c46:	2302      	movs	r3, #2
 8003c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c52:	230c      	movs	r3, #12
 8003c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	486b      	ldr	r0, [pc, #428]	; (8003e0c <MX_GPIO_Init+0x5e8>)
 8003c5e:	f002 fe91 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_TX_Pin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8003c62:	2304      	movs	r3, #4
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c66:	2302      	movs	r3, #2
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003c72:	2308      	movs	r3, #8
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8003c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	485d      	ldr	r0, [pc, #372]	; (8003df4 <MX_GPIO_Init+0x5d0>)
 8003c7e:	f002 fe81 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : D23_Pin D21_Pin D22_Pin FMC_SDNME_Pin
                           FMC_SDNE0_Pin FMC_SDCKE0_Pin D20_Pin FMC_D_7_Pin
                           FMC_D19_Pin FMC_D16_Pin FMC_D18_Pin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8003c82:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c90:	2303      	movs	r3, #3
 8003c92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c94:	230c      	movs	r3, #12
 8003c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	485c      	ldr	r0, [pc, #368]	; (8003e10 <MX_GPIO_Init+0x5ec>)
 8003ca0:	f002 fe70 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8003ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003caa:	2302      	movs	r3, #2
 8003cac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003cb6:	230a      	movs	r3, #10
 8003cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8003cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	484f      	ldr	r0, [pc, #316]	; (8003e00 <MX_GPIO_Init+0x5dc>)
 8003cc2:	f002 fe5f 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8003cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8003cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4846      	ldr	r0, [pc, #280]	; (8003dfc <MX_GPIO_Init+0x5d8>)
 8003ce4:	f002 fe4e 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003cee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4840      	ldr	r0, [pc, #256]	; (8003e00 <MX_GPIO_Init+0x5dc>)
 8003d00:	f002 fe40 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8003d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d12:	2300      	movs	r3, #0
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d16:	2302      	movs	r3, #2
 8003d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8003d1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4835      	ldr	r0, [pc, #212]	; (8003df8 <MX_GPIO_Init+0x5d4>)
 8003d22:	f002 fe2f 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_RX_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8003d26:	23c0      	movs	r3, #192	; 0xc0
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d32:	2303      	movs	r3, #3
 8003d34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003d36:	2308      	movs	r3, #8
 8003d38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d3e:	4619      	mov	r1, r3
 8003d40:	482d      	ldr	r0, [pc, #180]	; (8003df8 <MX_GPIO_Init+0x5d4>)
 8003d42:	f002 fe1f 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8003d46:	2310      	movs	r3, #16
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d52:	2303      	movs	r3, #3
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003d56:	230a      	movs	r3, #10
 8003d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d5e:	4619      	mov	r1, r3
 8003d60:	482b      	ldr	r0, [pc, #172]	; (8003e10 <MX_GPIO_Init+0x5ec>)
 8003d62:	f002 fe0f 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d72:	2300      	movs	r3, #0
 8003d74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003d76:	2306      	movs	r3, #6
 8003d78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4821      	ldr	r0, [pc, #132]	; (8003e08 <MX_GPIO_Init+0x5e4>)
 8003d82:	f002 fdff 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8003d86:	2348      	movs	r3, #72	; 0x48
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d96:	4619      	mov	r1, r3
 8003d98:	481b      	ldr	r0, [pc, #108]	; (8003e08 <MX_GPIO_Init+0x5e4>)
 8003d9a:	f002 fdf3 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da2:	2302      	movs	r3, #2
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003daa:	2300      	movs	r3, #0
 8003dac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003dae:	2303      	movs	r3, #3
 8003db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8003db2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003db6:	4619      	mov	r1, r3
 8003db8:	4814      	ldr	r0, [pc, #80]	; (8003e0c <MX_GPIO_Init+0x5e8>)
 8003dba:	f002 fde3 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8003dbe:	2340      	movs	r3, #64	; 0x40
 8003dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	480c      	ldr	r0, [pc, #48]	; (8003e0c <MX_GPIO_Init+0x5e8>)
 8003dda:	f002 fdd3 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8003dde:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003de4:	2303      	movs	r3, #3
 8003de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003df0:	4619      	mov	r1, r3
 8003df2:	e00f      	b.n	8003e14 <MX_GPIO_Init+0x5f0>
 8003df4:	40020c00 	.word	0x40020c00
 8003df8:	40020800 	.word	0x40020800
 8003dfc:	40020000 	.word	0x40020000
 8003e00:	40022000 	.word	0x40022000
 8003e04:	40022800 	.word	0x40022800
 8003e08:	40021800 	.word	0x40021800
 8003e0c:	40021400 	.word	0x40021400
 8003e10:	40021c00 	.word	0x40021c00
 8003e14:	4875      	ldr	r0, [pc, #468]	; (8003fec <MX_GPIO_Init+0x7c8>)
 8003e16:	f002 fdb5 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e26:	2303      	movs	r3, #3
 8003e28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003e2a:	230a      	movs	r3, #10
 8003e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8003e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e32:	4619      	mov	r1, r3
 8003e34:	486e      	ldr	r0, [pc, #440]	; (8003ff0 <MX_GPIO_Init+0x7cc>)
 8003e36:	f002 fda5 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003e3a:	2332      	movs	r3, #50	; 0x32
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e46:	2303      	movs	r3, #3
 8003e48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e4a:	230b      	movs	r3, #11
 8003e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e52:	4619      	mov	r1, r3
 8003e54:	4866      	ldr	r0, [pc, #408]	; (8003ff0 <MX_GPIO_Init+0x7cc>)
 8003e56:	f002 fd95 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8003e5a:	2304      	movs	r3, #4
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8003e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4860      	ldr	r0, [pc, #384]	; (8003ff0 <MX_GPIO_Init+0x7cc>)
 8003e6e:	f002 fd89 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e72:	2304      	movs	r3, #4
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e76:	2302      	movs	r3, #2
 8003e78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003e82:	2309      	movs	r3, #9
 8003e84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4859      	ldr	r0, [pc, #356]	; (8003ff4 <MX_GPIO_Init+0x7d0>)
 8003e8e:	f002 fd79 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SCL_Pin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8003e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e98:	2312      	movs	r3, #18
 8003e9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8003ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eac:	4619      	mov	r1, r3
 8003eae:	4852      	ldr	r0, [pc, #328]	; (8003ff8 <MX_GPIO_Init+0x7d4>)
 8003eb0:	f002 fd68 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8003eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003ec6:	2309      	movs	r3, #9
 8003ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8003eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4849      	ldr	r0, [pc, #292]	; (8003ff8 <MX_GPIO_Init+0x7d4>)
 8003ed2:	f002 fd57 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003ed6:	2386      	movs	r3, #134	; 0x86
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eda:	2302      	movs	r3, #2
 8003edc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ee6:	230b      	movs	r3, #11
 8003ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4842      	ldr	r0, [pc, #264]	; (8003ffc <MX_GPIO_Init+0x7d8>)
 8003ef2:	f002 fd47 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003efa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8003f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f08:	4619      	mov	r1, r3
 8003f0a:	483c      	ldr	r0, [pc, #240]	; (8003ffc <MX_GPIO_Init+0x7d8>)
 8003f0c:	f002 fd3a 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8003f10:	2350      	movs	r3, #80	; 0x50
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f14:	2303      	movs	r3, #3
 8003f16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f20:	4619      	mov	r1, r3
 8003f22:	4836      	ldr	r0, [pc, #216]	; (8003ffc <MX_GPIO_Init+0x7d8>)
 8003f24:	f002 fd2e 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_TX_Pin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8003f28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f36:	2300      	movs	r3, #0
 8003f38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003f3a:	230a      	movs	r3, #10
 8003f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8003f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f42:	4619      	mov	r1, r3
 8003f44:	482c      	ldr	r0, [pc, #176]	; (8003ff8 <MX_GPIO_Init+0x7d4>)
 8003f46:	f002 fd1d 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8003f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4828      	ldr	r0, [pc, #160]	; (8004000 <MX_GPIO_Init+0x7dc>)
 8003f5e:	f002 fd11 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003f62:	2328      	movs	r3, #40	; 0x28
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f66:	2302      	movs	r3, #2
 8003f68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003f72:	230a      	movs	r3, #10
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	481f      	ldr	r0, [pc, #124]	; (8003ffc <MX_GPIO_Init+0x7d8>)
 8003f7e:	f002 fd01 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSIHOST_TE_Pin */
  GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8003f82:	2304      	movs	r3, #4
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f86:	2302      	movs	r3, #2
 8003f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8003f92:	230d      	movs	r3, #13
 8003f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8003f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4819      	ldr	r0, [pc, #100]	; (8004004 <MX_GPIO_Init+0x7e0>)
 8003f9e:	f002 fcf1 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003fa2:	2340      	movs	r3, #64	; 0x40
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003fb2:	2309      	movs	r3, #9
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4810      	ldr	r0, [pc, #64]	; (8004000 <MX_GPIO_Init+0x7dc>)
 8003fbe:	f002 fce1 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003fc2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fd4:	2305      	movs	r3, #5
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4805      	ldr	r0, [pc, #20]	; (8003ff4 <MX_GPIO_Init+0x7d0>)
 8003fe0:	f002 fcd0 	bl	8006984 <HAL_GPIO_Init>

}
 8003fe4:	bf00      	nop
 8003fe6:	3740      	adds	r7, #64	; 0x40
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021400 	.word	0x40021400
 8003ff0:	40020800 	.word	0x40020800
 8003ff4:	40020400 	.word	0x40020400
 8003ff8:	40020c00 	.word	0x40020c00
 8003ffc:	40020000 	.word	0x40020000
 8004000:	40021c00 	.word	0x40021c00
 8004004:	40022400 	.word	0x40022400

08004008 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8004010:	f242 7010 	movw	r0, #10000	; 0x2710
 8004014:	f009 fe1a 	bl	800dc4c <osDelay>
 8004018:	e7fa      	b.n	8004010 <StartDefaultTask+0x8>

0800401a <cpu_start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cpu_start */
void cpu_start(void const * argument)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cpu_start */
  /* Infinite loop */
  for(;;)
  {
    cpu_run(NULL);
 8004022:	2000      	movs	r0, #0
 8004024:	f7fe feac 	bl	8002d80 <cpu_run>
 8004028:	e7fb      	b.n	8004022 <cpu_start+0x8>
	...

0800402c <ui_start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ui_start */
void ui_start(void const * argument)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ui_start */
  /* Infinite loop */
  for(;;)
  {
    emu_run("special.gb");
 8004034:	4801      	ldr	r0, [pc, #4]	; (800403c <ui_start+0x10>)
 8004036:	f7fe fedf 	bl	8002df8 <emu_run>
 800403a:	e7fb      	b.n	8004034 <ui_start+0x8>
 800403c:	08012de8 	.word	0x08012de8

08004040 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a04      	ldr	r2, [pc, #16]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004052:	f001 fee1 	bl	8005e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40010000 	.word	0x40010000

08004064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004068:	b672      	cpsid	i
}
 800406a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800406c:	e7fe      	b.n	800406c <Error_Handler+0x8>
	...

08004070 <ppu_get_context>:
void pipeline_fifo_reset();
void pipeline_process();

static ppu_context ctx;

ppu_context *ppu_get_context() {
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
    return &ctx;
 8004074:	4b02      	ldr	r3, [pc, #8]	; (8004080 <ppu_get_context+0x10>)
}
 8004076:	4618      	mov	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	200015f8 	.word	0x200015f8

08004084 <ppu_init>:

void ppu_init() {
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
    ctx.current_frame = 0;
 8004088:	4a40      	ldr	r2, [pc, #256]	; (800418c <ppu_init+0x108>)
 800408a:	f242 132c 	movw	r3, #8492	; 0x212c
 800408e:	4413      	add	r3, r2
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
    ctx.line_ticks = 0;
 8004094:	4a3d      	ldr	r2, [pc, #244]	; (800418c <ppu_init+0x108>)
 8004096:	f242 1330 	movw	r3, #8496	; 0x2130
 800409a:	4413      	add	r3, r2
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
    ctx.video_buffer = malloc(YRES * XRES * sizeof(32));
 80040a0:	2390      	movs	r3, #144	; 0x90
 80040a2:	22a0      	movs	r2, #160	; 0xa0
 80040a4:	fb02 f303 	mul.w	r3, r2, r3
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f00d f9bc 	bl	8011428 <malloc>
 80040b0:	4603      	mov	r3, r0
 80040b2:	4619      	mov	r1, r3
 80040b4:	4a35      	ldr	r2, [pc, #212]	; (800418c <ppu_init+0x108>)
 80040b6:	f242 1334 	movw	r3, #8500	; 0x2134
 80040ba:	4413      	add	r3, r2
 80040bc:	6019      	str	r1, [r3, #0]

    ctx.pfc.line_x = 0;
 80040be:	4a33      	ldr	r2, [pc, #204]	; (800418c <ppu_init+0x108>)
 80040c0:	f242 03b0 	movw	r3, #8368	; 0x20b0
 80040c4:	4413      	add	r3, r2
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
    ctx.pfc.pushed_x = 0;
 80040ca:	4a30      	ldr	r2, [pc, #192]	; (800418c <ppu_init+0x108>)
 80040cc:	f242 03b1 	movw	r3, #8369	; 0x20b1
 80040d0:	4413      	add	r3, r2
 80040d2:	2200      	movs	r2, #0
 80040d4:	701a      	strb	r2, [r3, #0]
    ctx.pfc.fetch_x = 0;
 80040d6:	4a2d      	ldr	r2, [pc, #180]	; (800418c <ppu_init+0x108>)
 80040d8:	f242 03b2 	movw	r3, #8370	; 0x20b2
 80040dc:	4413      	add	r3, r2
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
    ctx.pfc.pixel_fifo.size = 0;
 80040e2:	4a2a      	ldr	r2, [pc, #168]	; (800418c <ppu_init+0x108>)
 80040e4:	f242 03ac 	movw	r3, #8364	; 0x20ac
 80040e8:	4413      	add	r3, r2
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
    ctx.pfc.pixel_fifo.head = ctx.pfc.pixel_fifo.tail = NULL;
 80040ee:	4a27      	ldr	r2, [pc, #156]	; (800418c <ppu_init+0x108>)
 80040f0:	f242 03a8 	movw	r3, #8360	; 0x20a8
 80040f4:	4413      	add	r3, r2
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	4a24      	ldr	r2, [pc, #144]	; (800418c <ppu_init+0x108>)
 80040fc:	f242 03a8 	movw	r3, #8360	; 0x20a8
 8004100:	4413      	add	r3, r2
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4921      	ldr	r1, [pc, #132]	; (800418c <ppu_init+0x108>)
 8004106:	f242 03a4 	movw	r3, #8356	; 0x20a4
 800410a:	440b      	add	r3, r1
 800410c:	601a      	str	r2, [r3, #0]
    ctx.pfc.cur_fetch_state = FS_TILE;
 800410e:	4a1f      	ldr	r2, [pc, #124]	; (800418c <ppu_init+0x108>)
 8004110:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004114:	4413      	add	r3, r2
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]

    ctx.line_sprites = 0;
 800411a:	4a1c      	ldr	r2, [pc, #112]	; (800418c <ppu_init+0x108>)
 800411c:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004120:	4413      	add	r3, r2
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
    ctx.fetched_entry_count = 0;
 8004126:	4a19      	ldr	r2, [pc, #100]	; (800418c <ppu_init+0x108>)
 8004128:	f242 1318 	movw	r3, #8472	; 0x2118
 800412c:	4413      	add	r3, r2
 800412e:	2200      	movs	r2, #0
 8004130:	701a      	strb	r2, [r3, #0]
    ctx.window_line = 0;
 8004132:	4a16      	ldr	r2, [pc, #88]	; (800418c <ppu_init+0x108>)
 8004134:	f242 1328 	movw	r3, #8488	; 0x2128
 8004138:	4413      	add	r3, r2
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]

    lcd_init();
 800413e:	f7ff f8e7 	bl	8003310 <lcd_init>
    LCDS_MODE_SET(MODE_OAM);
 8004142:	f7ff f939 	bl	80033b8 <lcd_get_context>
 8004146:	4603      	mov	r3, r0
 8004148:	785a      	ldrb	r2, [r3, #1]
 800414a:	f022 0203 	bic.w	r2, r2, #3
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	705a      	strb	r2, [r3, #1]
 8004152:	f7ff f931 	bl	80033b8 <lcd_get_context>
 8004156:	4603      	mov	r3, r0
 8004158:	785a      	ldrb	r2, [r3, #1]
 800415a:	f042 0202 	orr.w	r2, r2, #2
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	705a      	strb	r2, [r3, #1]

    memset(ctx.oam_ram, 0, sizeof(ctx.oam_ram));
 8004162:	22a0      	movs	r2, #160	; 0xa0
 8004164:	2100      	movs	r1, #0
 8004166:	4809      	ldr	r0, [pc, #36]	; (800418c <ppu_init+0x108>)
 8004168:	f00d f97c 	bl	8011464 <memset>
    memset(ctx.video_buffer, 0, YRES * XRES * sizeof(u32));
 800416c:	4a07      	ldr	r2, [pc, #28]	; (800418c <ppu_init+0x108>)
 800416e:	f242 1334 	movw	r3, #8500	; 0x2134
 8004172:	4413      	add	r3, r2
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2290      	movs	r2, #144	; 0x90
 8004178:	21a0      	movs	r1, #160	; 0xa0
 800417a:	fb01 f202 	mul.w	r2, r1, r2
 800417e:	0092      	lsls	r2, r2, #2
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f00d f96e 	bl	8011464 <memset>
}
 8004188:	bf00      	nop
 800418a:	bd80      	pop	{r7, pc}
 800418c:	200015f8 	.word	0x200015f8

08004190 <ppu_tick>:

void ppu_tick() {
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
    ctx.line_ticks++;
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <ppu_tick+0x5c>)
 8004196:	f242 1330 	movw	r3, #8496	; 0x2130
 800419a:	4413      	add	r3, r2
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	4912      	ldr	r1, [pc, #72]	; (80041ec <ppu_tick+0x5c>)
 80041a2:	f242 1330 	movw	r3, #8496	; 0x2130
 80041a6:	440b      	add	r3, r1
 80041a8:	601a      	str	r2, [r3, #0]

    switch(LCDS_MODE) {
 80041aa:	f7ff f905 	bl	80033b8 <lcd_get_context>
 80041ae:	4603      	mov	r3, r0
 80041b0:	785b      	ldrb	r3, [r3, #1]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d816      	bhi.n	80041e8 <ppu_tick+0x58>
 80041ba:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <ppu_tick+0x30>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	080041e3 	.word	0x080041e3
 80041c4:	080041dd 	.word	0x080041dd
 80041c8:	080041d1 	.word	0x080041d1
 80041cc:	080041d7 	.word	0x080041d7
    case MODE_OAM:
        ppu_mode_oam();
 80041d0:	f000 ff4c 	bl	800506c <ppu_mode_oam>
        break;
 80041d4:	e008      	b.n	80041e8 <ppu_tick+0x58>
    case MODE_XFER:
        ppu_mode_xfer();
 80041d6:	f000 ffa8 	bl	800512a <ppu_mode_xfer>
        break;
 80041da:	e005      	b.n	80041e8 <ppu_tick+0x58>
    case MODE_VBLANK:
        ppu_mode_vblank();
 80041dc:	f000 ffd0 	bl	8005180 <ppu_mode_vblank>
        break;
 80041e0:	e002      	b.n	80041e8 <ppu_tick+0x58>
    case MODE_HBLANK:
        ppu_mode_hblank();
 80041e2:	f001 f80b 	bl	80051fc <ppu_mode_hblank>
        break;
 80041e6:	bf00      	nop
    }
}
 80041e8:	bf00      	nop
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	200015f8 	.word	0x200015f8

080041f0 <ppu_oam_write>:


void ppu_oam_write(u16 address, u8 value) {
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	460a      	mov	r2, r1
 80041fa:	80fb      	strh	r3, [r7, #6]
 80041fc:	4613      	mov	r3, r2
 80041fe:	717b      	strb	r3, [r7, #5]
    if (address >= 0xFE00) {
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 8004206:	d303      	bcc.n	8004210 <ppu_oam_write+0x20>
        address -= 0xFE00;
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800420e:	80fb      	strh	r3, [r7, #6]
    }

    u8 *p = (u8 *)ctx.oam_ram;
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <ppu_oam_write+0x3c>)
 8004212:	60fb      	str	r3, [r7, #12]
    p[address] = value;
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	797a      	ldrb	r2, [r7, #5]
 800421c:	701a      	strb	r2, [r3, #0]
}
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	200015f8 	.word	0x200015f8

08004230 <ppu_oam_read>:

u8 ppu_oam_read(u16 address) {
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	80fb      	strh	r3, [r7, #6]
    if (address >= 0xFE00) {
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 8004240:	d303      	bcc.n	800424a <ppu_oam_read+0x1a>
        address -= 0xFE00;
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004248:	80fb      	strh	r3, [r7, #6]
    }

    u8 *p = (u8 *)ctx.oam_ram;
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <ppu_oam_read+0x34>)
 800424c:	60fb      	str	r3, [r7, #12]
    return p[address];
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	781b      	ldrb	r3, [r3, #0]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	200015f8 	.word	0x200015f8

08004268 <ppu_vram_write>:

void ppu_vram_write(u16 address, u8 value) {
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	460a      	mov	r2, r1
 8004272:	80fb      	strh	r3, [r7, #6]
 8004274:	4613      	mov	r3, r2
 8004276:	717b      	strb	r3, [r7, #5]
    ctx.vram[address - 0x8000] = value;
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800427e:	4a05      	ldr	r2, [pc, #20]	; (8004294 <ppu_vram_write+0x2c>)
 8004280:	4413      	add	r3, r2
 8004282:	797a      	ldrb	r2, [r7, #5]
 8004284:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	200015f8 	.word	0x200015f8

08004298 <ppu_vram_read>:

u8 ppu_vram_read(u16 address) {
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	80fb      	strh	r3, [r7, #6]
    return ctx.vram[address - 0x8000];
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80042a8:	4a04      	ldr	r2, [pc, #16]	; (80042bc <ppu_vram_read+0x24>)
 80042aa:	4413      	add	r3, r2
 80042ac:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	200015f8 	.word	0x200015f8

080042c0 <window_visible>:
#include <ppu.h>
#include <lcd.h>
#include <bus.h>

bool window_visible() {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
    return LCDC_WIN_ENABLE && lcd_get_context()->win_x >= 0 &&
 80042c4:	f7ff f878 	bl	80033b8 <lcd_get_context>
 80042c8:	4603      	mov	r3, r0
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	f003 0320 	and.w	r3, r3, #32
        lcd_get_context()->win_x <= 166 && lcd_get_context()->win_y >= 0 &&
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d013      	beq.n	80042fc <window_visible+0x3c>
    return LCDC_WIN_ENABLE && lcd_get_context()->win_x >= 0 &&
 80042d4:	f7ff f870 	bl	80033b8 <lcd_get_context>
        lcd_get_context()->win_x <= 166 && lcd_get_context()->win_y >= 0 &&
 80042d8:	f7ff f86e 	bl	80033b8 <lcd_get_context>
 80042dc:	4603      	mov	r3, r0
 80042de:	7adb      	ldrb	r3, [r3, #11]
    return LCDC_WIN_ENABLE && lcd_get_context()->win_x >= 0 &&
 80042e0:	2ba6      	cmp	r3, #166	; 0xa6
 80042e2:	d80b      	bhi.n	80042fc <window_visible+0x3c>
        lcd_get_context()->win_x <= 166 && lcd_get_context()->win_y >= 0 &&
 80042e4:	f7ff f868 	bl	80033b8 <lcd_get_context>
        lcd_get_context()->win_y < YRES;
 80042e8:	f7ff f866 	bl	80033b8 <lcd_get_context>
 80042ec:	4603      	mov	r3, r0
 80042ee:	7a9b      	ldrb	r3, [r3, #10]
 80042f0:	461a      	mov	r2, r3
 80042f2:	2390      	movs	r3, #144	; 0x90
        lcd_get_context()->win_x <= 166 && lcd_get_context()->win_y >= 0 &&
 80042f4:	429a      	cmp	r2, r3
 80042f6:	da01      	bge.n	80042fc <window_visible+0x3c>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <window_visible+0x3e>
 80042fc:	2300      	movs	r3, #0
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	b2db      	uxtb	r3, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	bd80      	pop	{r7, pc}

08004308 <pixel_fifo_push>:

void pixel_fifo_push(u32 value) {
 8004308:	b590      	push	{r4, r7, lr}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
    fifo_entry *next = malloc(sizeof(fifo_entry));
 8004310:	2008      	movs	r0, #8
 8004312:	f00d f889 	bl	8011428 <malloc>
 8004316:	4603      	mov	r3, r0
 8004318:	60fb      	str	r3, [r7, #12]
    next->next = NULL;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
    next->value = value;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	605a      	str	r2, [r3, #4]

    if (!ppu_get_context()->pfc.pixel_fifo.head) {
 8004326:	f7ff fea3 	bl	8004070 <ppu_get_context>
 800432a:	4602      	mov	r2, r0
 800432c:	f242 03a4 	movw	r3, #8356	; 0x20a4
 8004330:	4413      	add	r3, r2
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d113      	bne.n	8004360 <pixel_fifo_push+0x58>
        //first entry...
        ppu_get_context()->pfc.pixel_fifo.head = ppu_get_context()->pfc.pixel_fifo.tail = next;
 8004338:	f7ff fe9a 	bl	8004070 <ppu_get_context>
 800433c:	4604      	mov	r4, r0
 800433e:	f242 03a8 	movw	r3, #8360	; 0x20a8
 8004342:	4423      	add	r3, r4
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	f7ff fe92 	bl	8004070 <ppu_get_context>
 800434c:	4601      	mov	r1, r0
 800434e:	f242 03a8 	movw	r3, #8360	; 0x20a8
 8004352:	4423      	add	r3, r4
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	f242 03a4 	movw	r3, #8356	; 0x20a4
 800435a:	440b      	add	r3, r1
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	e010      	b.n	8004382 <pixel_fifo_push+0x7a>
    } else {
        ppu_get_context()->pfc.pixel_fifo.tail->next = next;
 8004360:	f7ff fe86 	bl	8004070 <ppu_get_context>
 8004364:	4602      	mov	r2, r0
 8004366:	f242 03a8 	movw	r3, #8360	; 0x20a8
 800436a:	4413      	add	r3, r2
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	601a      	str	r2, [r3, #0]
        ppu_get_context()->pfc.pixel_fifo.tail = next;
 8004372:	f7ff fe7d 	bl	8004070 <ppu_get_context>
 8004376:	4602      	mov	r2, r0
 8004378:	f242 03a8 	movw	r3, #8360	; 0x20a8
 800437c:	4413      	add	r3, r2
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	601a      	str	r2, [r3, #0]
    }

    ppu_get_context()->pfc.pixel_fifo.size++;
 8004382:	f7ff fe75 	bl	8004070 <ppu_get_context>
 8004386:	4602      	mov	r2, r0
 8004388:	f242 03ac 	movw	r3, #8364	; 0x20ac
 800438c:	4413      	add	r3, r2
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	1c59      	adds	r1, r3, #1
 8004392:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8004396:	4413      	add	r3, r2
 8004398:	6019      	str	r1, [r3, #0]
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd90      	pop	{r4, r7, pc}
	...

080043a4 <pixel_fifo_pop>:

u32 pixel_fifo_pop() {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
    if (ppu_get_context()->pfc.pixel_fifo.size <= 0) {
 80043aa:	f7ff fe61 	bl	8004070 <ppu_get_context>
 80043ae:	4602      	mov	r2, r0
 80043b0:	f242 03ac 	movw	r3, #8364	; 0x20ac
 80043b4:	4413      	add	r3, r2
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10b      	bne.n	80043d4 <pixel_fifo_pop+0x30>
        fprintf(stderr, "ERR IN PIXEL FIFO!\n");
 80043bc:	4b19      	ldr	r3, [pc, #100]	; (8004424 <pixel_fifo_pop+0x80>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2213      	movs	r2, #19
 80043c4:	2101      	movs	r1, #1
 80043c6:	4818      	ldr	r0, [pc, #96]	; (8004428 <pixel_fifo_pop+0x84>)
 80043c8:	f00c ff94 	bl	80112f4 <fwrite>
        exit(-8);
 80043cc:	f06f 0007 	mvn.w	r0, #7
 80043d0:	f00c fac2 	bl	8010958 <exit>
    }

    fifo_entry *popped = ppu_get_context()->pfc.pixel_fifo.head;
 80043d4:	f7ff fe4c 	bl	8004070 <ppu_get_context>
 80043d8:	4602      	mov	r2, r0
 80043da:	f242 03a4 	movw	r3, #8356	; 0x20a4
 80043de:	4413      	add	r3, r2
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	607b      	str	r3, [r7, #4]
    ppu_get_context()->pfc.pixel_fifo.head = popped->next;
 80043e4:	f7ff fe44 	bl	8004070 <ppu_get_context>
 80043e8:	4601      	mov	r1, r0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	f242 03a4 	movw	r3, #8356	; 0x20a4
 80043f2:	440b      	add	r3, r1
 80043f4:	601a      	str	r2, [r3, #0]
    ppu_get_context()->pfc.pixel_fifo.size--;
 80043f6:	f7ff fe3b 	bl	8004070 <ppu_get_context>
 80043fa:	4602      	mov	r2, r0
 80043fc:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8004400:	4413      	add	r3, r2
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	1e59      	subs	r1, r3, #1
 8004406:	f242 03ac 	movw	r3, #8364	; 0x20ac
 800440a:	4413      	add	r3, r2
 800440c:	6019      	str	r1, [r3, #0]

    u32 val = popped->value;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	603b      	str	r3, [r7, #0]
    free(popped);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f00d f80f 	bl	8011438 <free>

    return val;
 800441a:	683b      	ldr	r3, [r7, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	200009dc 	.word	0x200009dc
 8004428:	08012df4 	.word	0x08012df4

0800442c <fetch_sprite_pixels>:

u32 fetch_sprite_pixels(int bit, u32 color, u8 bg_color) {
 800442c:	b590      	push	{r4, r7, lr}
 800442e:	b089      	sub	sp, #36	; 0x24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	4613      	mov	r3, r2
 8004438:	71fb      	strb	r3, [r7, #7]
    for (int i=0; i<ppu_get_context()->fetched_entry_count; i++) {
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e0c8      	b.n	80045d2 <fetch_sprite_pixels+0x1a6>
        int sp_x = (ppu_get_context()->fetched_entries[i].x - 8) + 
 8004440:	f7ff fe16 	bl	8004070 <ppu_get_context>
 8004444:	4602      	mov	r2, r0
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f603 0346 	addw	r3, r3, #2118	; 0x846
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	795b      	ldrb	r3, [r3, #5]
 8004452:	f1a3 0408 	sub.w	r4, r3, #8
            ((lcd_get_context()->scroll_x % 8));
 8004456:	f7fe ffaf 	bl	80033b8 <lcd_get_context>
 800445a:	4603      	mov	r3, r0
 800445c:	78db      	ldrb	r3, [r3, #3]
 800445e:	f003 0307 	and.w	r3, r3, #7
        int sp_x = (ppu_get_context()->fetched_entries[i].x - 8) + 
 8004462:	4423      	add	r3, r4
 8004464:	61bb      	str	r3, [r7, #24]
        
        if (sp_x + 8 < ppu_get_context()->pfc.fifo_x) {
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	f103 0408 	add.w	r4, r3, #8
 800446c:	f7ff fe00 	bl	8004070 <ppu_get_context>
 8004470:	4602      	mov	r2, r0
 8004472:	f242 03bf 	movw	r3, #8383	; 0x20bf
 8004476:	4413      	add	r3, r2
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	429c      	cmp	r4, r3
 800447c:	f2c0 80a1 	blt.w	80045c2 <fetch_sprite_pixels+0x196>
            //past pixel point already...
            continue;
        }

        int offset = ppu_get_context()->pfc.fifo_x - sp_x;
 8004480:	f7ff fdf6 	bl	8004070 <ppu_get_context>
 8004484:	4602      	mov	r2, r0
 8004486:	f242 03bf 	movw	r3, #8383	; 0x20bf
 800448a:	4413      	add	r3, r2
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	617b      	str	r3, [r7, #20]

        if (offset < 0 || offset > 7) {
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f2c0 8094 	blt.w	80045c6 <fetch_sprite_pixels+0x19a>
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b07      	cmp	r3, #7
 80044a2:	f300 8090 	bgt.w	80045c6 <fetch_sprite_pixels+0x19a>
            //out of bounds..
            continue;
        }

        bit = (7 - offset);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f1c3 0307 	rsb	r3, r3, #7
 80044ac:	60fb      	str	r3, [r7, #12]

        if (ppu_get_context()->fetched_entries[i].f_x_flip) {
 80044ae:	f7ff fddf 	bl	8004070 <ppu_get_context>
 80044b2:	4602      	mov	r2, r0
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f603 0346 	addw	r3, r3, #2118	; 0x846
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	79db      	ldrb	r3, [r3, #7]
 80044c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <fetch_sprite_pixels+0xa2>
            bit = offset;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	60fb      	str	r3, [r7, #12]
        }

        u8 hi = !!(ppu_get_context()->pfc.fetch_entry_data[i * 2] & (1 << bit));
 80044ce:	f7ff fdcf 	bl	8004070 <ppu_get_context>
 80044d2:	4602      	mov	r2, r0
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	441a      	add	r2, r3
 80044da:	f242 03b6 	movw	r3, #8374	; 0x20b6
 80044de:	4413      	add	r3, r2
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	fa42 f303 	asr.w	r3, r2, r3
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bf14      	ite	ne
 80044f2:	2301      	movne	r3, #1
 80044f4:	2300      	moveq	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	74fb      	strb	r3, [r7, #19]
        u8 lo = !!(ppu_get_context()->pfc.fetch_entry_data[(i * 2) + 1] & (1 << bit)) << 1;
 80044fa:	f7ff fdb9 	bl	8004070 <ppu_get_context>
 80044fe:	4602      	mov	r2, r0
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	3301      	adds	r3, #1
 8004506:	441a      	add	r2, r3
 8004508:	f242 03b6 	movw	r3, #8374	; 0x20b6
 800450c:	4413      	add	r3, r2
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	fa42 f303 	asr.w	r3, r2, r3
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <fetch_sprite_pixels+0xf8>
 8004520:	2302      	movs	r3, #2
 8004522:	e000      	b.n	8004526 <fetch_sprite_pixels+0xfa>
 8004524:	2300      	movs	r3, #0
 8004526:	74bb      	strb	r3, [r7, #18]

        bool bg_priority = ppu_get_context()->fetched_entries[i].f_bgp;
 8004528:	f7ff fda2 	bl	8004070 <ppu_get_context>
 800452c:	4602      	mov	r2, r0
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	79db      	ldrb	r3, [r3, #7]
 800453a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	bf14      	ite	ne
 8004544:	2301      	movne	r3, #1
 8004546:	2300      	moveq	r3, #0
 8004548:	747b      	strb	r3, [r7, #17]

        if (!(hi|lo)) {
 800454a:	7cfa      	ldrb	r2, [r7, #19]
 800454c:	7cbb      	ldrb	r3, [r7, #18]
 800454e:	4313      	orrs	r3, r2
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d039      	beq.n	80045ca <fetch_sprite_pixels+0x19e>
            //transparent
            continue;
        }

        if (!bg_priority || bg_color == 0) {
 8004556:	7c7b      	ldrb	r3, [r7, #17]
 8004558:	f083 0301 	eor.w	r3, r3, #1
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <fetch_sprite_pixels+0x13c>
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d131      	bne.n	80045cc <fetch_sprite_pixels+0x1a0>
            color = (ppu_get_context()->fetched_entries[i].f_pn) ? 
 8004568:	f7ff fd82 	bl	8004070 <ppu_get_context>
 800456c:	4602      	mov	r2, r0
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	79db      	ldrb	r3, [r3, #7]
 800457a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800457e:	b2db      	uxtb	r3, r3
                lcd_get_context()->sp2_colors[hi|lo] : lcd_get_context()->sp1_colors[hi|lo];
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <fetch_sprite_pixels+0x170>
 8004584:	f7fe ff18 	bl	80033b8 <lcd_get_context>
 8004588:	4601      	mov	r1, r0
 800458a:	7cfa      	ldrb	r2, [r7, #19]
 800458c:	7cbb      	ldrb	r3, [r7, #18]
 800458e:	4313      	orrs	r3, r2
 8004590:	b2db      	uxtb	r3, r3
 8004592:	330a      	adds	r3, #10
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	e00a      	b.n	80045b2 <fetch_sprite_pixels+0x186>
 800459c:	f7fe ff0c 	bl	80033b8 <lcd_get_context>
 80045a0:	4601      	mov	r1, r0
 80045a2:	7cfa      	ldrb	r2, [r7, #19]
 80045a4:	7cbb      	ldrb	r3, [r7, #18]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	3306      	adds	r3, #6
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	685b      	ldr	r3, [r3, #4]
            color = (ppu_get_context()->fetched_entries[i].f_pn) ? 
 80045b2:	60bb      	str	r3, [r7, #8]

            if (hi|lo) {
 80045b4:	7cfa      	ldrb	r2, [r7, #19]
 80045b6:	7cbb      	ldrb	r3, [r7, #18]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d115      	bne.n	80045ec <fetch_sprite_pixels+0x1c0>
 80045c0:	e004      	b.n	80045cc <fetch_sprite_pixels+0x1a0>
            continue;
 80045c2:	bf00      	nop
 80045c4:	e002      	b.n	80045cc <fetch_sprite_pixels+0x1a0>
            continue;
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <fetch_sprite_pixels+0x1a0>
            continue;
 80045ca:	bf00      	nop
    for (int i=0; i<ppu_get_context()->fetched_entry_count; i++) {
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	3301      	adds	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	f7ff fd4d 	bl	8004070 <ppu_get_context>
 80045d6:	4602      	mov	r2, r0
 80045d8:	f242 1318 	movw	r3, #8472	; 0x2118
 80045dc:	4413      	add	r3, r2
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	4293      	cmp	r3, r2
 80045e6:	f6ff af2b 	blt.w	8004440 <fetch_sprite_pixels+0x14>
 80045ea:	e000      	b.n	80045ee <fetch_sprite_pixels+0x1c2>
                break;
 80045ec:	bf00      	nop
            }
        }
    }

    return color;
 80045ee:	68bb      	ldr	r3, [r7, #8]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3724      	adds	r7, #36	; 0x24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd90      	pop	{r4, r7, pc}

080045f8 <pipeline_fifo_add>:

bool pipeline_fifo_add() {
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
    if (ppu_get_context()->pfc.pixel_fifo.size > 8) {
 80045fe:	f7ff fd37 	bl	8004070 <ppu_get_context>
 8004602:	4602      	mov	r2, r0
 8004604:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8004608:	4413      	add	r3, r2
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d901      	bls.n	8004614 <pipeline_fifo_add+0x1c>
        //fifo is full!
        return false;
 8004610:	2300      	movs	r3, #0
 8004612:	e084      	b.n	800471e <pipeline_fifo_add+0x126>
    }

    int x = ppu_get_context()->pfc.fetch_x - (8 - (lcd_get_context()->scroll_x % 8));
 8004614:	f7ff fd2c 	bl	8004070 <ppu_get_context>
 8004618:	4602      	mov	r2, r0
 800461a:	f242 03b2 	movw	r3, #8370	; 0x20b2
 800461e:	4413      	add	r3, r2
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	461c      	mov	r4, r3
 8004624:	f7fe fec8 	bl	80033b8 <lcd_get_context>
 8004628:	4603      	mov	r3, r0
 800462a:	78db      	ldrb	r3, [r3, #3]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	f1c3 0308 	rsb	r3, r3, #8
 8004634:	1ae3      	subs	r3, r4, r3
 8004636:	60fb      	str	r3, [r7, #12]

    for (int i=0; i<8; i++) {
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	e06b      	b.n	8004716 <pipeline_fifo_add+0x11e>
        int bit = 7 - i;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f1c3 0307 	rsb	r3, r3, #7
 8004644:	60bb      	str	r3, [r7, #8]
        u8 hi = !!(ppu_get_context()->pfc.bgw_fetch_data[1] & (1 << bit));
 8004646:	f7ff fd13 	bl	8004070 <ppu_get_context>
 800464a:	4602      	mov	r2, r0
 800464c:	f242 03b4 	movw	r3, #8372	; 0x20b4
 8004650:	4413      	add	r3, r2
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	fa42 f303 	asr.w	r3, r2, r3
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	71fb      	strb	r3, [r7, #7]
        u8 lo = !!(ppu_get_context()->pfc.bgw_fetch_data[2] & (1 << bit)) << 1;
 800466c:	f7ff fd00 	bl	8004070 <ppu_get_context>
 8004670:	4602      	mov	r2, r0
 8004672:	f242 03b5 	movw	r3, #8373	; 0x20b5
 8004676:	4413      	add	r3, r2
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	fa42 f303 	asr.w	r3, r2, r3
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <pipeline_fifo_add+0x96>
 800468a:	2302      	movs	r3, #2
 800468c:	e000      	b.n	8004690 <pipeline_fifo_add+0x98>
 800468e:	2300      	movs	r3, #0
 8004690:	71bb      	strb	r3, [r7, #6]
        u32 color = lcd_get_context()->bg_colors[hi | lo];
 8004692:	f7fe fe91 	bl	80033b8 <lcd_get_context>
 8004696:	4601      	mov	r1, r0
 8004698:	79fa      	ldrb	r2, [r7, #7]
 800469a:	79bb      	ldrb	r3, [r7, #6]
 800469c:	4313      	orrs	r3, r2
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	3302      	adds	r3, #2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

        if (!LCDC_BGW_ENABLE) {
 80046aa:	f7fe fe85 	bl	80033b8 <lcd_get_context>
 80046ae:	4603      	mov	r3, r0
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d104      	bne.n	80046c4 <pipeline_fifo_add+0xcc>
            color = lcd_get_context()->bg_colors[0];
 80046ba:	f7fe fe7d 	bl	80033b8 <lcd_get_context>
 80046be:	4603      	mov	r3, r0
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	613b      	str	r3, [r7, #16]
        }

        if (LCDC_OBJ_ENABLE) {
 80046c4:	f7fe fe78 	bl	80033b8 <lcd_get_context>
 80046c8:	4603      	mov	r3, r0
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <pipeline_fifo_add+0xf0>
            color = fetch_sprite_pixels(bit, color, hi | lo);
 80046d4:	79fa      	ldrb	r2, [r7, #7]
 80046d6:	79bb      	ldrb	r3, [r7, #6]
 80046d8:	4313      	orrs	r3, r2
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	6939      	ldr	r1, [r7, #16]
 80046e0:	68b8      	ldr	r0, [r7, #8]
 80046e2:	f7ff fea3 	bl	800442c <fetch_sprite_pixels>
 80046e6:	6138      	str	r0, [r7, #16]
        }

        if (x >= 0) {
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	db10      	blt.n	8004710 <pipeline_fifo_add+0x118>
            pixel_fifo_push(color);
 80046ee:	6938      	ldr	r0, [r7, #16]
 80046f0:	f7ff fe0a 	bl	8004308 <pixel_fifo_push>
            ppu_get_context()->pfc.fifo_x++;
 80046f4:	f7ff fcbc 	bl	8004070 <ppu_get_context>
 80046f8:	4602      	mov	r2, r0
 80046fa:	f242 03bf 	movw	r3, #8383	; 0x20bf
 80046fe:	4413      	add	r3, r2
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	b2d9      	uxtb	r1, r3
 8004706:	f242 03bf 	movw	r3, #8383	; 0x20bf
 800470a:	4413      	add	r3, r2
 800470c:	460a      	mov	r2, r1
 800470e:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<8; i++) {
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	3301      	adds	r3, #1
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b07      	cmp	r3, #7
 800471a:	dd90      	ble.n	800463e <pipeline_fifo_add+0x46>
        }
    }

    return true;
 800471c:	2301      	movs	r3, #1
}
 800471e:	4618      	mov	r0, r3
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	bd90      	pop	{r4, r7, pc}

08004726 <pipeline_load_sprite_tile>:

void pipeline_load_sprite_tile() {
 8004726:	b590      	push	{r4, r7, lr}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
    oam_line_entry *le = ppu_get_context()->line_sprites;
 800472c:	f7ff fca0 	bl	8004070 <ppu_get_context>
 8004730:	4602      	mov	r2, r0
 8004732:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004736:	4413      	add	r3, r2
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	607b      	str	r3, [r7, #4]

    while(le) {
 800473c:	e060      	b.n	8004800 <pipeline_load_sprite_tile+0xda>
        int sp_x = (le->entry.x - 8) + (lcd_get_context()->scroll_x % 8);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	f1a3 0408 	sub.w	r4, r3, #8
 8004746:	f7fe fe37 	bl	80033b8 <lcd_get_context>
 800474a:	4603      	mov	r3, r0
 800474c:	78db      	ldrb	r3, [r3, #3]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	4423      	add	r3, r4
 8004754:	603b      	str	r3, [r7, #0]

        if ((sp_x >= ppu_get_context()->pfc.fetch_x && sp_x < ppu_get_context()->pfc.fetch_x + 8) ||
 8004756:	f7ff fc8b 	bl	8004070 <ppu_get_context>
 800475a:	4602      	mov	r2, r0
 800475c:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004760:	4413      	add	r3, r2
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	4293      	cmp	r3, r2
 800476a:	db0a      	blt.n	8004782 <pipeline_load_sprite_tile+0x5c>
 800476c:	f7ff fc80 	bl	8004070 <ppu_get_context>
 8004770:	4602      	mov	r2, r0
 8004772:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004776:	4413      	add	r3, r2
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	3307      	adds	r3, #7
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	dd16      	ble.n	80047b0 <pipeline_load_sprite_tile+0x8a>
            ((sp_x + 8) >= ppu_get_context()->pfc.fetch_x && (sp_x + 8) < ppu_get_context()->pfc.fetch_x + 8)) {
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f103 0408 	add.w	r4, r3, #8
 8004788:	f7ff fc72 	bl	8004070 <ppu_get_context>
 800478c:	4602      	mov	r2, r0
 800478e:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004792:	4413      	add	r3, r2
 8004794:	781b      	ldrb	r3, [r3, #0]
        if ((sp_x >= ppu_get_context()->pfc.fetch_x && sp_x < ppu_get_context()->pfc.fetch_x + 8) ||
 8004796:	429c      	cmp	r4, r3
 8004798:	db23      	blt.n	80047e2 <pipeline_load_sprite_tile+0xbc>
            ((sp_x + 8) >= ppu_get_context()->pfc.fetch_x && (sp_x + 8) < ppu_get_context()->pfc.fetch_x + 8)) {
 800479a:	f7ff fc69 	bl	8004070 <ppu_get_context>
 800479e:	4602      	mov	r2, r0
 80047a0:	f242 03b2 	movw	r3, #8370	; 0x20b2
 80047a4:	4413      	add	r3, r2
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	4293      	cmp	r3, r2
 80047ae:	da18      	bge.n	80047e2 <pipeline_load_sprite_tile+0xbc>
            //need to add entry
            ppu_get_context()->fetched_entries[ppu_get_context()->fetched_entry_count++] = le->entry;
 80047b0:	f7ff fc5e 	bl	8004070 <ppu_get_context>
 80047b4:	4604      	mov	r4, r0
 80047b6:	f7ff fc5b 	bl	8004070 <ppu_get_context>
 80047ba:	4602      	mov	r2, r0
 80047bc:	f242 1318 	movw	r3, #8472	; 0x2118
 80047c0:	4413      	add	r3, r2
 80047c2:	7819      	ldrb	r1, [r3, #0]
 80047c4:	1c4b      	adds	r3, r1, #1
 80047c6:	b2d8      	uxtb	r0, r3
 80047c8:	f242 1318 	movw	r3, #8472	; 0x2118
 80047cc:	4413      	add	r3, r2
 80047ce:	4602      	mov	r2, r0
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	460b      	mov	r3, r1
 80047d4:	f603 0346 	addw	r3, r3, #2118	; 0x846
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4423      	add	r3, r4
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	605a      	str	r2, [r3, #4]
        }

        le = le->next;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	607b      	str	r3, [r7, #4]

        if (!le || ppu_get_context()->fetched_entry_count >= 3) {
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <pipeline_load_sprite_tile+0xe0>
 80047ee:	f7ff fc3f 	bl	8004070 <ppu_get_context>
 80047f2:	4602      	mov	r2, r0
 80047f4:	f242 1318 	movw	r3, #8472	; 0x2118
 80047f8:	4413      	add	r3, r2
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d802      	bhi.n	8004806 <pipeline_load_sprite_tile+0xe0>
    while(le) {
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d19b      	bne.n	800473e <pipeline_load_sprite_tile+0x18>
            //max checking 3 sprites on pixels
            break;
        }
    }
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	bd90      	pop	{r4, r7, pc}

0800480e <pipeline_load_sprite_data>:

void pipeline_load_sprite_data(u8 offset) {
 800480e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004810:	b087      	sub	sp, #28
 8004812:	af00      	add	r7, sp, #0
 8004814:	4603      	mov	r3, r0
 8004816:	71fb      	strb	r3, [r7, #7]
    int cur_y = lcd_get_context()->ly;
 8004818:	f7fe fdce 	bl	80033b8 <lcd_get_context>
 800481c:	4603      	mov	r3, r0
 800481e:	791b      	ldrb	r3, [r3, #4]
 8004820:	60fb      	str	r3, [r7, #12]
    u8 sprite_height = LCDC_OBJ_HEIGHT;
 8004822:	f7fe fdc9 	bl	80033b8 <lcd_get_context>
 8004826:	4603      	mov	r3, r0
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <pipeline_load_sprite_data+0x28>
 8004832:	2310      	movs	r3, #16
 8004834:	e000      	b.n	8004838 <pipeline_load_sprite_data+0x2a>
 8004836:	2308      	movs	r3, #8
 8004838:	72fb      	strb	r3, [r7, #11]

    for (int i=0; i<ppu_get_context()->fetched_entry_count; i++) {
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	e059      	b.n	80048f4 <pipeline_load_sprite_data+0xe6>
        u8 ty = ((cur_y + 16) - ppu_get_context()->fetched_entries[i].y) * 2;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f103 0410 	add.w	r4, r3, #16
 8004846:	f7ff fc13 	bl	8004070 <ppu_get_context>
 800484a:	4602      	mov	r2, r0
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	791b      	ldrb	r3, [r3, #4]
 8004858:	1ae3      	subs	r3, r4, r3
 800485a:	b2db      	uxtb	r3, r3
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	74fb      	strb	r3, [r7, #19]

        if (ppu_get_context()->fetched_entries[i].f_y_flip) {
 8004860:	f7ff fc06 	bl	8004070 <ppu_get_context>
 8004864:	4602      	mov	r2, r0
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f603 0346 	addw	r3, r3, #2118	; 0x846
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	79db      	ldrb	r3, [r3, #7]
 8004872:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <pipeline_load_sprite_data+0x7e>
            //flipped upside down...
            ty = ((sprite_height * 2) - 2) - ty;
 800487c:	7afb      	ldrb	r3, [r7, #11]
 800487e:	3b01      	subs	r3, #1
 8004880:	b2db      	uxtb	r3, r3
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	b2da      	uxtb	r2, r3
 8004886:	7cfb      	ldrb	r3, [r7, #19]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	74fb      	strb	r3, [r7, #19]
        }

        u8 tile_index = ppu_get_context()->fetched_entries[i].tile;
 800488c:	f7ff fbf0 	bl	8004070 <ppu_get_context>
 8004890:	4602      	mov	r2, r0
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	799b      	ldrb	r3, [r3, #6]
 800489e:	74bb      	strb	r3, [r7, #18]

        if (sprite_height == 16) {
 80048a0:	7afb      	ldrb	r3, [r7, #11]
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d103      	bne.n	80048ae <pipeline_load_sprite_data+0xa0>
            tile_index &= ~(1); //remove last bit...
 80048a6:	7cbb      	ldrb	r3, [r7, #18]
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	74bb      	strb	r3, [r7, #18]
        }

        ppu_get_context()->pfc.fetch_entry_data[(i * 2) + offset] = 
            bus_read(0x8000 + (tile_index * 16) + ty + offset);
 80048ae:	7cbb      	ldrb	r3, [r7, #18]
 80048b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	7cfb      	ldrb	r3, [r7, #19]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	4413      	add	r3, r2
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	4413      	add	r3, r2
 80048c8:	b29e      	uxth	r6, r3
        ppu_get_context()->pfc.fetch_entry_data[(i * 2) + offset] = 
 80048ca:	f7ff fbd1 	bl	8004070 <ppu_get_context>
 80048ce:	4605      	mov	r5, r0
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	005a      	lsls	r2, r3, #1
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	18d4      	adds	r4, r2, r3
            bus_read(0x8000 + (tile_index * 16) + ty + offset);
 80048d8:	4630      	mov	r0, r6
 80048da:	f7fb fe7d 	bl	80005d8 <bus_read>
 80048de:	4603      	mov	r3, r0
 80048e0:	4619      	mov	r1, r3
        ppu_get_context()->pfc.fetch_entry_data[(i * 2) + offset] = 
 80048e2:	192a      	adds	r2, r5, r4
 80048e4:	f242 03b6 	movw	r3, #8374	; 0x20b6
 80048e8:	4413      	add	r3, r2
 80048ea:	460a      	mov	r2, r1
 80048ec:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<ppu_get_context()->fetched_entry_count; i++) {
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	3301      	adds	r3, #1
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	f7ff fbbc 	bl	8004070 <ppu_get_context>
 80048f8:	4602      	mov	r2, r0
 80048fa:	f242 1318 	movw	r3, #8472	; 0x2118
 80048fe:	4413      	add	r3, r2
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	4293      	cmp	r3, r2
 8004908:	db9a      	blt.n	8004840 <pipeline_load_sprite_data+0x32>
    }
}
 800490a:	bf00      	nop
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004914 <pipeline_load_window_tile>:

void pipeline_load_window_tile() {
 8004914:	b5b0      	push	{r4, r5, r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
    if (!window_visible()) {
 800491a:	f7ff fcd1 	bl	80042c0 <window_visible>
 800491e:	4603      	mov	r3, r0
 8004920:	f083 0301 	eor.w	r3, r3, #1
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 8088 	bne.w	8004a3c <pipeline_load_window_tile+0x128>
        return;
    }
    
    u8 window_y = lcd_get_context()->win_y;
 800492c:	f7fe fd44 	bl	80033b8 <lcd_get_context>
 8004930:	4603      	mov	r3, r0
 8004932:	7a9b      	ldrb	r3, [r3, #10]
 8004934:	71fb      	strb	r3, [r7, #7]

    if (ppu_get_context()->pfc.fetch_x + 7 >= lcd_get_context()->win_x &&
 8004936:	f7ff fb9b 	bl	8004070 <ppu_get_context>
 800493a:	4602      	mov	r2, r0
 800493c:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004940:	4413      	add	r3, r2
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	1ddc      	adds	r4, r3, #7
 8004946:	f7fe fd37 	bl	80033b8 <lcd_get_context>
 800494a:	4603      	mov	r3, r0
 800494c:	7adb      	ldrb	r3, [r3, #11]
 800494e:	429c      	cmp	r4, r3
 8004950:	db75      	blt.n	8004a3e <pipeline_load_window_tile+0x12a>
            ppu_get_context()->pfc.fetch_x + 7 < lcd_get_context()->win_x + YRES + 14) {
 8004952:	f7fe fd31 	bl	80033b8 <lcd_get_context>
 8004956:	4603      	mov	r3, r0
 8004958:	7adb      	ldrb	r3, [r3, #11]
 800495a:	461a      	mov	r2, r3
 800495c:	2390      	movs	r3, #144	; 0x90
 800495e:	4413      	add	r3, r2
 8004960:	1d9c      	adds	r4, r3, #6
 8004962:	f7ff fb85 	bl	8004070 <ppu_get_context>
 8004966:	4602      	mov	r2, r0
 8004968:	f242 03b2 	movw	r3, #8370	; 0x20b2
 800496c:	4413      	add	r3, r2
 800496e:	781b      	ldrb	r3, [r3, #0]
    if (ppu_get_context()->pfc.fetch_x + 7 >= lcd_get_context()->win_x &&
 8004970:	429c      	cmp	r4, r3
 8004972:	db64      	blt.n	8004a3e <pipeline_load_window_tile+0x12a>
        if (lcd_get_context()->ly >= window_y && lcd_get_context()->ly < window_y + XRES) {
 8004974:	f7fe fd20 	bl	80033b8 <lcd_get_context>
 8004978:	4603      	mov	r3, r0
 800497a:	791b      	ldrb	r3, [r3, #4]
 800497c:	79fa      	ldrb	r2, [r7, #7]
 800497e:	429a      	cmp	r2, r3
 8004980:	d85d      	bhi.n	8004a3e <pipeline_load_window_tile+0x12a>
 8004982:	f7fe fd19 	bl	80033b8 <lcd_get_context>
 8004986:	4603      	mov	r3, r0
 8004988:	791b      	ldrb	r3, [r3, #4]
 800498a:	4619      	mov	r1, r3
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	22a0      	movs	r2, #160	; 0xa0
 8004990:	4413      	add	r3, r2
 8004992:	4299      	cmp	r1, r3
 8004994:	da53      	bge.n	8004a3e <pipeline_load_window_tile+0x12a>
            u8 w_tile_y = ppu_get_context()->window_line / 8;
 8004996:	f7ff fb6b 	bl	8004070 <ppu_get_context>
 800499a:	4602      	mov	r2, r0
 800499c:	f242 1328 	movw	r3, #8488	; 0x2128
 80049a0:	4413      	add	r3, r2
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	08db      	lsrs	r3, r3, #3
 80049a6:	71bb      	strb	r3, [r7, #6]

            ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_WIN_MAP_AREA + 
 80049a8:	f7fe fd06 	bl	80033b8 <lcd_get_context>
 80049ac:	4603      	mov	r3, r0
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <pipeline_load_window_tile+0xaa>
 80049b8:	f44f 441c 	mov.w	r4, #39936	; 0x9c00
 80049bc:	e001      	b.n	80049c2 <pipeline_load_window_tile+0xae>
 80049be:	f44f 4418 	mov.w	r4, #38912	; 0x9800
                ((ppu_get_context()->pfc.fetch_x + 7 - lcd_get_context()->win_x) / 8) +
 80049c2:	f7ff fb55 	bl	8004070 <ppu_get_context>
 80049c6:	4602      	mov	r2, r0
 80049c8:	f242 03b2 	movw	r3, #8370	; 0x20b2
 80049cc:	4413      	add	r3, r2
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	1ddd      	adds	r5, r3, #7
 80049d2:	f7fe fcf1 	bl	80033b8 <lcd_get_context>
 80049d6:	4603      	mov	r3, r0
 80049d8:	7adb      	ldrb	r3, [r3, #11]
 80049da:	1aeb      	subs	r3, r5, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	da00      	bge.n	80049e2 <pipeline_load_window_tile+0xce>
 80049e0:	3307      	adds	r3, #7
 80049e2:	10db      	asrs	r3, r3, #3
            ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_WIN_MAP_AREA + 
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	4423      	add	r3, r4
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	79bb      	ldrb	r3, [r7, #6]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	015b      	lsls	r3, r3, #5
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	4413      	add	r3, r2
 80049f4:	b29d      	uxth	r5, r3
 80049f6:	f7ff fb3b 	bl	8004070 <ppu_get_context>
 80049fa:	4604      	mov	r4, r0
 80049fc:	4628      	mov	r0, r5
 80049fe:	f7fb fdeb 	bl	80005d8 <bus_read>
 8004a02:	4603      	mov	r3, r0
 8004a04:	461a      	mov	r2, r3
 8004a06:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004a0a:	4423      	add	r3, r4
 8004a0c:	701a      	strb	r2, [r3, #0]
                (w_tile_y * 32));

            if (LCDC_BGW_DATA_AREA == 0x8800) {
 8004a0e:	f7fe fcd3 	bl	80033b8 <lcd_get_context>
 8004a12:	4603      	mov	r3, r0
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	f003 0310 	and.w	r3, r3, #16
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <pipeline_load_window_tile+0x12a>
                ppu_get_context()->pfc.bgw_fetch_data[0] += 128;
 8004a1e:	f7ff fb27 	bl	8004070 <ppu_get_context>
 8004a22:	4602      	mov	r2, r0
 8004a24:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004a28:	4413      	add	r3, r2
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	3b80      	subs	r3, #128	; 0x80
 8004a2e:	b2d9      	uxtb	r1, r3
 8004a30:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004a34:	4413      	add	r3, r2
 8004a36:	460a      	mov	r2, r1
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	e000      	b.n	8004a3e <pipeline_load_window_tile+0x12a>
        return;
 8004a3c:	bf00      	nop
            }
        }
    }
}
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bdb0      	pop	{r4, r5, r7, pc}

08004a44 <pipeline_fetch>:

void pipeline_fetch() {
 8004a44:	b5b0      	push	{r4, r5, r7, lr}
 8004a46:	af00      	add	r7, sp, #0
    switch(ppu_get_context()->pfc.cur_fetch_state) {
 8004a48:	f7ff fb12 	bl	8004070 <ppu_get_context>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004a52:	4413      	add	r3, r2
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	f200 8122 	bhi.w	8004ca0 <pipeline_fetch+0x25c>
 8004a5c:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <pipeline_fetch+0x20>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a79 	.word	0x08004a79
 8004a68:	08004b83 	.word	0x08004b83
 8004a6c:	08004bf9 	.word	0x08004bf9
 8004a70:	08004c73 	.word	0x08004c73
 8004a74:	08004c85 	.word	0x08004c85
        case FS_TILE: {
            ppu_get_context()->fetched_entry_count = 0;
 8004a78:	f7ff fafa 	bl	8004070 <ppu_get_context>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	f242 1318 	movw	r3, #8472	; 0x2118
 8004a82:	4413      	add	r3, r2
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]

            if (LCDC_BGW_ENABLE) {
 8004a88:	f7fe fc96 	bl	80033b8 <lcd_get_context>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d04a      	beq.n	8004b2e <pipeline_fetch+0xea>
                ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_BG_MAP_AREA + 
 8004a98:	f7fe fc8e 	bl	80033b8 <lcd_get_context>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <pipeline_fetch+0x6a>
 8004aa8:	f44f 441c 	mov.w	r4, #39936	; 0x9c00
 8004aac:	e001      	b.n	8004ab2 <pipeline_fetch+0x6e>
 8004aae:	f44f 4418 	mov.w	r4, #38912	; 0x9800
                    (ppu_get_context()->pfc.map_x / 8) + 
 8004ab2:	f7ff fadd 	bl	8004070 <ppu_get_context>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	f242 03bd 	movw	r3, #8381	; 0x20bd
 8004abc:	4413      	add	r3, r2
 8004abe:	781b      	ldrb	r3, [r3, #0]
                ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_BG_MAP_AREA + 
 8004ac0:	08db      	lsrs	r3, r3, #3
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	4423      	add	r3, r4
 8004ac8:	b29c      	uxth	r4, r3
                    (((ppu_get_context()->pfc.map_y / 8)) * 32));
 8004aca:	f7ff fad1 	bl	8004070 <ppu_get_context>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	f242 03bc 	movw	r3, #8380	; 0x20bc
 8004ad4:	4413      	add	r3, r2
 8004ad6:	781b      	ldrb	r3, [r3, #0]
                ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_BG_MAP_AREA + 
 8004ad8:	08db      	lsrs	r3, r3, #3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	015b      	lsls	r3, r3, #5
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	4423      	add	r3, r4
 8004ae4:	b29d      	uxth	r5, r3
 8004ae6:	f7ff fac3 	bl	8004070 <ppu_get_context>
 8004aea:	4604      	mov	r4, r0
 8004aec:	4628      	mov	r0, r5
 8004aee:	f7fb fd73 	bl	80005d8 <bus_read>
 8004af2:	4603      	mov	r3, r0
 8004af4:	461a      	mov	r2, r3
 8004af6:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004afa:	4423      	add	r3, r4
 8004afc:	701a      	strb	r2, [r3, #0]
            
                if (LCDC_BGW_DATA_AREA == 0x8800) {
 8004afe:	f7fe fc5b 	bl	80033b8 <lcd_get_context>
 8004b02:	4603      	mov	r3, r0
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10d      	bne.n	8004b2a <pipeline_fetch+0xe6>
                    ppu_get_context()->pfc.bgw_fetch_data[0] += 128;
 8004b0e:	f7ff faaf 	bl	8004070 <ppu_get_context>
 8004b12:	4602      	mov	r2, r0
 8004b14:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004b18:	4413      	add	r3, r2
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	3b80      	subs	r3, #128	; 0x80
 8004b1e:	b2d9      	uxtb	r1, r3
 8004b20:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004b24:	4413      	add	r3, r2
 8004b26:	460a      	mov	r2, r1
 8004b28:	701a      	strb	r2, [r3, #0]
                }

                pipeline_load_window_tile();
 8004b2a:	f7ff fef3 	bl	8004914 <pipeline_load_window_tile>
            }

            if (LCDC_OBJ_ENABLE && ppu_get_context()->line_sprites) {
 8004b2e:	f7fe fc43 	bl	80033b8 <lcd_get_context>
 8004b32:	4603      	mov	r3, r0
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <pipeline_fetch+0x110>
 8004b3e:	f7ff fa97 	bl	8004070 <ppu_get_context>
 8004b42:	4602      	mov	r2, r0
 8004b44:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004b48:	4413      	add	r3, r2
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <pipeline_fetch+0x110>
                pipeline_load_sprite_tile();
 8004b50:	f7ff fde9 	bl	8004726 <pipeline_load_sprite_tile>
            }

            ppu_get_context()->pfc.cur_fetch_state = FS_DATA0;
 8004b54:	f7ff fa8c 	bl	8004070 <ppu_get_context>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004b5e:	4413      	add	r3, r2
 8004b60:	2201      	movs	r2, #1
 8004b62:	701a      	strb	r2, [r3, #0]
            ppu_get_context()->pfc.fetch_x += 8;
 8004b64:	f7ff fa84 	bl	8004070 <ppu_get_context>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004b6e:	4413      	add	r3, r2
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	3308      	adds	r3, #8
 8004b74:	b2d9      	uxtb	r1, r3
 8004b76:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	701a      	strb	r2, [r3, #0]
        } break;
 8004b80:	e08e      	b.n	8004ca0 <pipeline_fetch+0x25c>

        case FS_DATA0: {
            ppu_get_context()->pfc.bgw_fetch_data[1] = bus_read(LCDC_BGW_DATA_AREA +
 8004b82:	f7fe fc19 	bl	80033b8 <lcd_get_context>
 8004b86:	4603      	mov	r3, r0
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <pipeline_fetch+0x154>
 8004b92:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8004b96:	e001      	b.n	8004b9c <pipeline_fetch+0x158>
 8004b98:	f44f 4408 	mov.w	r4, #34816	; 0x8800
                (ppu_get_context()->pfc.bgw_fetch_data[0] * 16) + 
 8004b9c:	f7ff fa68 	bl	8004070 <ppu_get_context>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	781b      	ldrb	r3, [r3, #0]
            ppu_get_context()->pfc.bgw_fetch_data[1] = bus_read(LCDC_BGW_DATA_AREA +
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	4423      	add	r3, r4
 8004bb2:	b29c      	uxth	r4, r3
                ppu_get_context()->pfc.tile_y);
 8004bb4:	f7ff fa5c 	bl	8004070 <ppu_get_context>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	f242 03be 	movw	r3, #8382	; 0x20be
 8004bbe:	4413      	add	r3, r2
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
            ppu_get_context()->pfc.bgw_fetch_data[1] = bus_read(LCDC_BGW_DATA_AREA +
 8004bc4:	4423      	add	r3, r4
 8004bc6:	b29d      	uxth	r5, r3
 8004bc8:	f7ff fa52 	bl	8004070 <ppu_get_context>
 8004bcc:	4604      	mov	r4, r0
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f7fb fd02 	bl	80005d8 <bus_read>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f242 03b4 	movw	r3, #8372	; 0x20b4
 8004bdc:	4423      	add	r3, r4
 8004bde:	701a      	strb	r2, [r3, #0]

            pipeline_load_sprite_data(0);
 8004be0:	2000      	movs	r0, #0
 8004be2:	f7ff fe14 	bl	800480e <pipeline_load_sprite_data>

            ppu_get_context()->pfc.cur_fetch_state = FS_DATA1;
 8004be6:	f7ff fa43 	bl	8004070 <ppu_get_context>
 8004bea:	4602      	mov	r2, r0
 8004bec:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004bf0:	4413      	add	r3, r2
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	701a      	strb	r2, [r3, #0]
        } break;
 8004bf6:	e053      	b.n	8004ca0 <pipeline_fetch+0x25c>

        case FS_DATA1: {
            ppu_get_context()->pfc.bgw_fetch_data[2] = bus_read(LCDC_BGW_DATA_AREA +
 8004bf8:	f7fe fbde 	bl	80033b8 <lcd_get_context>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <pipeline_fetch+0x1ca>
 8004c08:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8004c0c:	e001      	b.n	8004c12 <pipeline_fetch+0x1ce>
 8004c0e:	f44f 4408 	mov.w	r4, #34816	; 0x8800
                (ppu_get_context()->pfc.bgw_fetch_data[0] * 16) + 
 8004c12:	f7ff fa2d 	bl	8004070 <ppu_get_context>
 8004c16:	4602      	mov	r2, r0
 8004c18:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	781b      	ldrb	r3, [r3, #0]
            ppu_get_context()->pfc.bgw_fetch_data[2] = bus_read(LCDC_BGW_DATA_AREA +
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	4423      	add	r3, r4
 8004c28:	b29c      	uxth	r4, r3
                ppu_get_context()->pfc.tile_y + 1);
 8004c2a:	f7ff fa21 	bl	8004070 <ppu_get_context>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	f242 03be 	movw	r3, #8382	; 0x20be
 8004c34:	4413      	add	r3, r2
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
                (ppu_get_context()->pfc.bgw_fetch_data[0] * 16) + 
 8004c3a:	4423      	add	r3, r4
 8004c3c:	b29b      	uxth	r3, r3
            ppu_get_context()->pfc.bgw_fetch_data[2] = bus_read(LCDC_BGW_DATA_AREA +
 8004c3e:	3301      	adds	r3, #1
 8004c40:	b29d      	uxth	r5, r3
 8004c42:	f7ff fa15 	bl	8004070 <ppu_get_context>
 8004c46:	4604      	mov	r4, r0
 8004c48:	4628      	mov	r0, r5
 8004c4a:	f7fb fcc5 	bl	80005d8 <bus_read>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461a      	mov	r2, r3
 8004c52:	f242 03b5 	movw	r3, #8373	; 0x20b5
 8004c56:	4423      	add	r3, r4
 8004c58:	701a      	strb	r2, [r3, #0]

            pipeline_load_sprite_data(1);
 8004c5a:	2001      	movs	r0, #1
 8004c5c:	f7ff fdd7 	bl	800480e <pipeline_load_sprite_data>

            ppu_get_context()->pfc.cur_fetch_state = FS_IDLE;
 8004c60:	f7ff fa06 	bl	8004070 <ppu_get_context>
 8004c64:	4602      	mov	r2, r0
 8004c66:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004c6a:	4413      	add	r3, r2
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	701a      	strb	r2, [r3, #0]

        } break;
 8004c70:	e016      	b.n	8004ca0 <pipeline_fetch+0x25c>

        case FS_IDLE: {
            ppu_get_context()->pfc.cur_fetch_state = FS_PUSH;
 8004c72:	f7ff f9fd 	bl	8004070 <ppu_get_context>
 8004c76:	4602      	mov	r2, r0
 8004c78:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004c7c:	4413      	add	r3, r2
 8004c7e:	2204      	movs	r2, #4
 8004c80:	701a      	strb	r2, [r3, #0]
        } break;
 8004c82:	e00d      	b.n	8004ca0 <pipeline_fetch+0x25c>

        case FS_PUSH: {
            if (pipeline_fifo_add()) {
 8004c84:	f7ff fcb8 	bl	80045f8 <pipeline_fifo_add>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <pipeline_fetch+0x25a>
                ppu_get_context()->pfc.cur_fetch_state = FS_TILE;
 8004c8e:	f7ff f9ef 	bl	8004070 <ppu_get_context>
 8004c92:	4602      	mov	r2, r0
 8004c94:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004c98:	4413      	add	r3, r2
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
            }

        } break;
 8004c9e:	bf00      	nop

    }
}
 8004ca0:	bf00      	nop
 8004ca2:	bdb0      	pop	{r4, r5, r7, pc}

08004ca4 <pipeline_push_pixel>:

void pipeline_push_pixel() {
 8004ca4:	b5b0      	push	{r4, r5, r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
    if (ppu_get_context()->pfc.pixel_fifo.size > 8) {
 8004caa:	f7ff f9e1 	bl	8004070 <ppu_get_context>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8004cb4:	4413      	add	r3, r2
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d94a      	bls.n	8004d52 <pipeline_push_pixel+0xae>
        u32 pixel_data = pixel_fifo_pop();
 8004cbc:	f7ff fb72 	bl	80043a4 <pixel_fifo_pop>
 8004cc0:	6078      	str	r0, [r7, #4]

        if (ppu_get_context()->pfc.line_x >= (lcd_get_context()->scroll_x % 8)) {
 8004cc2:	f7ff f9d5 	bl	8004070 <ppu_get_context>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	f242 03b0 	movw	r3, #8368	; 0x20b0
 8004ccc:	4413      	add	r3, r2
 8004cce:	781c      	ldrb	r4, [r3, #0]
 8004cd0:	f7fe fb72 	bl	80033b8 <lcd_get_context>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	78db      	ldrb	r3, [r3, #3]
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	429c      	cmp	r4, r3
 8004ce0:	d329      	bcc.n	8004d36 <pipeline_push_pixel+0x92>
            ppu_get_context()->video_buffer[ppu_get_context()->pfc.pushed_x + 
 8004ce2:	f7ff f9c5 	bl	8004070 <ppu_get_context>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	f242 1334 	movw	r3, #8500	; 0x2134
 8004cec:	4413      	add	r3, r2
 8004cee:	681c      	ldr	r4, [r3, #0]
 8004cf0:	f7ff f9be 	bl	8004070 <ppu_get_context>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	f242 03b1 	movw	r3, #8369	; 0x20b1
 8004cfa:	4413      	add	r3, r2
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	461d      	mov	r5, r3
                (lcd_get_context()->ly * XRES)] = pixel_data;
 8004d00:	f7fe fb5a 	bl	80033b8 <lcd_get_context>
 8004d04:	4603      	mov	r3, r0
 8004d06:	791b      	ldrb	r3, [r3, #4]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	23a0      	movs	r3, #160	; 0xa0
 8004d0c:	fb03 f302 	mul.w	r3, r3, r2
            ppu_get_context()->video_buffer[ppu_get_context()->pfc.pushed_x + 
 8004d10:	442b      	add	r3, r5
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4423      	add	r3, r4
                (lcd_get_context()->ly * XRES)] = pixel_data;
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]

            ppu_get_context()->pfc.pushed_x++;
 8004d1a:	f7ff f9a9 	bl	8004070 <ppu_get_context>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	f242 03b1 	movw	r3, #8369	; 0x20b1
 8004d24:	4413      	add	r3, r2
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	b2d9      	uxtb	r1, r3
 8004d2c:	f242 03b1 	movw	r3, #8369	; 0x20b1
 8004d30:	4413      	add	r3, r2
 8004d32:	460a      	mov	r2, r1
 8004d34:	701a      	strb	r2, [r3, #0]
        }

        ppu_get_context()->pfc.line_x++;
 8004d36:	f7ff f99b 	bl	8004070 <ppu_get_context>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	f242 03b0 	movw	r3, #8368	; 0x20b0
 8004d40:	4413      	add	r3, r2
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	3301      	adds	r3, #1
 8004d46:	b2d9      	uxtb	r1, r3
 8004d48:	f242 03b0 	movw	r3, #8368	; 0x20b0
 8004d4c:	4413      	add	r3, r2
 8004d4e:	460a      	mov	r2, r1
 8004d50:	701a      	strb	r2, [r3, #0]
    }
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bdb0      	pop	{r4, r5, r7, pc}

08004d5a <pipeline_process>:

void pipeline_process() {
 8004d5a:	b5b0      	push	{r4, r5, r7, lr}
 8004d5c:	af00      	add	r7, sp, #0
    ppu_get_context()->pfc.map_y = (lcd_get_context()->ly + lcd_get_context()->scroll_y);
 8004d5e:	f7fe fb2b 	bl	80033b8 <lcd_get_context>
 8004d62:	4603      	mov	r3, r0
 8004d64:	791d      	ldrb	r5, [r3, #4]
 8004d66:	f7fe fb27 	bl	80033b8 <lcd_get_context>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	789c      	ldrb	r4, [r3, #2]
 8004d6e:	f7ff f97f 	bl	8004070 <ppu_get_context>
 8004d72:	4602      	mov	r2, r0
 8004d74:	192b      	adds	r3, r5, r4
 8004d76:	b2d9      	uxtb	r1, r3
 8004d78:	f242 03bc 	movw	r3, #8380	; 0x20bc
 8004d7c:	4413      	add	r3, r2
 8004d7e:	460a      	mov	r2, r1
 8004d80:	701a      	strb	r2, [r3, #0]
    ppu_get_context()->pfc.map_x = (ppu_get_context()->pfc.fetch_x + lcd_get_context()->scroll_x);
 8004d82:	f7ff f975 	bl	8004070 <ppu_get_context>
 8004d86:	4602      	mov	r2, r0
 8004d88:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	781d      	ldrb	r5, [r3, #0]
 8004d90:	f7fe fb12 	bl	80033b8 <lcd_get_context>
 8004d94:	4603      	mov	r3, r0
 8004d96:	78dc      	ldrb	r4, [r3, #3]
 8004d98:	f7ff f96a 	bl	8004070 <ppu_get_context>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	192b      	adds	r3, r5, r4
 8004da0:	b2d9      	uxtb	r1, r3
 8004da2:	f242 03bd 	movw	r3, #8381	; 0x20bd
 8004da6:	4413      	add	r3, r2
 8004da8:	460a      	mov	r2, r1
 8004daa:	701a      	strb	r2, [r3, #0]
    ppu_get_context()->pfc.tile_y = ((lcd_get_context()->ly + lcd_get_context()->scroll_y) % 8) * 2;
 8004dac:	f7fe fb04 	bl	80033b8 <lcd_get_context>
 8004db0:	4603      	mov	r3, r0
 8004db2:	791c      	ldrb	r4, [r3, #4]
 8004db4:	f7fe fb00 	bl	80033b8 <lcd_get_context>
 8004db8:	4603      	mov	r3, r0
 8004dba:	789b      	ldrb	r3, [r3, #2]
 8004dbc:	4423      	add	r3, r4
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	b2dc      	uxtb	r4, r3
 8004dc6:	f7ff f953 	bl	8004070 <ppu_get_context>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	0063      	lsls	r3, r4, #1
 8004dce:	b2d9      	uxtb	r1, r3
 8004dd0:	f242 03be 	movw	r3, #8382	; 0x20be
 8004dd4:	4413      	add	r3, r2
 8004dd6:	460a      	mov	r2, r1
 8004dd8:	701a      	strb	r2, [r3, #0]

    if (!(ppu_get_context()->line_ticks & 1)) {
 8004dda:	f7ff f949 	bl	8004070 <ppu_get_context>
 8004dde:	4602      	mov	r2, r0
 8004de0:	f242 1330 	movw	r3, #8496	; 0x2130
 8004de4:	4413      	add	r3, r2
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <pipeline_process+0x9a>
        pipeline_fetch();
 8004df0:	f7ff fe28 	bl	8004a44 <pipeline_fetch>
    }

    pipeline_push_pixel();
 8004df4:	f7ff ff56 	bl	8004ca4 <pipeline_push_pixel>
}
 8004df8:	bf00      	nop
 8004dfa:	bdb0      	pop	{r4, r5, r7, pc}

08004dfc <pipeline_fifo_reset>:

void pipeline_fifo_reset() {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
    while(ppu_get_context()->pfc.pixel_fifo.size) {
 8004e00:	e001      	b.n	8004e06 <pipeline_fifo_reset+0xa>
        pixel_fifo_pop();
 8004e02:	f7ff facf 	bl	80043a4 <pixel_fifo_pop>
    while(ppu_get_context()->pfc.pixel_fifo.size) {
 8004e06:	f7ff f933 	bl	8004070 <ppu_get_context>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8004e10:	4413      	add	r3, r2
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f4      	bne.n	8004e02 <pipeline_fifo_reset+0x6>
    }

    ppu_get_context()->pfc.pixel_fifo.head = 0;
 8004e18:	f7ff f92a 	bl	8004070 <ppu_get_context>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	f242 03a4 	movw	r3, #8356	; 0x20a4
 8004e22:	4413      	add	r3, r2
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	bf00      	nop
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <increment_ly>:
void pipeline_fifo_reset();
void pipeline_process();
bool window_visible();
volatile uint8_t temp = 0;

void increment_ly() {
 8004e2c:	b598      	push	{r3, r4, r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
    if (window_visible() && lcd_get_context()->ly >= lcd_get_context()->win_y &&
 8004e30:	f7ff fa46 	bl	80042c0 <window_visible>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d025      	beq.n	8004e86 <increment_ly+0x5a>
 8004e3a:	f7fe fabd 	bl	80033b8 <lcd_get_context>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	791c      	ldrb	r4, [r3, #4]
 8004e42:	f7fe fab9 	bl	80033b8 <lcd_get_context>
 8004e46:	4603      	mov	r3, r0
 8004e48:	7a9b      	ldrb	r3, [r3, #10]
 8004e4a:	429c      	cmp	r4, r3
 8004e4c:	d31b      	bcc.n	8004e86 <increment_ly+0x5a>
        lcd_get_context()->ly < lcd_get_context()->win_y + YRES) {
 8004e4e:	f7fe fab3 	bl	80033b8 <lcd_get_context>
 8004e52:	4603      	mov	r3, r0
 8004e54:	791b      	ldrb	r3, [r3, #4]
 8004e56:	461c      	mov	r4, r3
 8004e58:	f7fe faae 	bl	80033b8 <lcd_get_context>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	7a9b      	ldrb	r3, [r3, #10]
 8004e60:	461a      	mov	r2, r3
 8004e62:	2390      	movs	r3, #144	; 0x90
 8004e64:	4413      	add	r3, r2
    if (window_visible() && lcd_get_context()->ly >= lcd_get_context()->win_y &&
 8004e66:	429c      	cmp	r4, r3
 8004e68:	da0d      	bge.n	8004e86 <increment_ly+0x5a>
            ppu_get_context()->window_line++;
 8004e6a:	f7ff f901 	bl	8004070 <ppu_get_context>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	f242 1328 	movw	r3, #8488	; 0x2128
 8004e74:	4413      	add	r3, r2
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	b2d9      	uxtb	r1, r3
 8004e7c:	f242 1328 	movw	r3, #8488	; 0x2128
 8004e80:	4413      	add	r3, r2
 8004e82:	460a      	mov	r2, r1
 8004e84:	701a      	strb	r2, [r3, #0]
    }

    lcd_get_context()->ly++;
 8004e86:	f7fe fa97 	bl	80033b8 <lcd_get_context>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	791a      	ldrb	r2, [r3, #4]
 8004e8e:	3201      	adds	r2, #1
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	711a      	strb	r2, [r3, #4]
    temp = lcd_get_context()->ly++;
 8004e94:	f7fe fa90 	bl	80033b8 <lcd_get_context>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	791a      	ldrb	r2, [r3, #4]
 8004e9c:	1c51      	adds	r1, r2, #1
 8004e9e:	b2c9      	uxtb	r1, r1
 8004ea0:	7119      	strb	r1, [r3, #4]
 8004ea2:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <increment_ly+0xcc>)
 8004ea4:	701a      	strb	r2, [r3, #0]


    if (lcd_get_context()->ly == lcd_get_context()->ly_compare) {
 8004ea6:	f7fe fa87 	bl	80033b8 <lcd_get_context>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	791c      	ldrb	r4, [r3, #4]
 8004eae:	f7fe fa83 	bl	80033b8 <lcd_get_context>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	795b      	ldrb	r3, [r3, #5]
 8004eb6:	429c      	cmp	r4, r3
 8004eb8:	d113      	bne.n	8004ee2 <increment_ly+0xb6>
        LCDS_LYC_SET(1);
 8004eba:	f7fe fa7d 	bl	80033b8 <lcd_get_context>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	785a      	ldrb	r2, [r3, #1]
 8004ec2:	f042 0204 	orr.w	r2, r2, #4
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	705a      	strb	r2, [r3, #1]

        if (LCDS_STAT_INT(SS_LYC)) {
 8004eca:	f7fe fa75 	bl	80033b8 <lcd_get_context>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <increment_ly+0xc6>
            cpu_request_interrupt(IT_LCD_STAT);
 8004eda:	2002      	movs	r0, #2
 8004edc:	f7fc f8da 	bl	8001094 <cpu_request_interrupt>
        }
    } else {
        LCDS_LYC_SET(0);
    }
}
 8004ee0:	e007      	b.n	8004ef2 <increment_ly+0xc6>
        LCDS_LYC_SET(0);
 8004ee2:	f7fe fa69 	bl	80033b8 <lcd_get_context>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	785a      	ldrb	r2, [r3, #1]
 8004eea:	f022 0204 	bic.w	r2, r2, #4
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	705a      	strb	r2, [r3, #1]
}
 8004ef2:	bf00      	nop
 8004ef4:	bd98      	pop	{r3, r4, r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20003730 	.word	0x20003730

08004efc <load_line_sprites>:

void load_line_sprites() {
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b089      	sub	sp, #36	; 0x24
 8004f00:	af00      	add	r7, sp, #0
    int cur_y = lcd_get_context()->ly;
 8004f02:	f7fe fa59 	bl	80033b8 <lcd_get_context>
 8004f06:	4603      	mov	r3, r0
 8004f08:	791b      	ldrb	r3, [r3, #4]
 8004f0a:	613b      	str	r3, [r7, #16]

    u8 sprite_height = LCDC_OBJ_HEIGHT;
 8004f0c:	f7fe fa54 	bl	80033b8 <lcd_get_context>
 8004f10:	4603      	mov	r3, r0
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <load_line_sprites+0x24>
 8004f1c:	2310      	movs	r3, #16
 8004f1e:	e000      	b.n	8004f22 <load_line_sprites+0x26>
 8004f20:	2308      	movs	r3, #8
 8004f22:	73fb      	strb	r3, [r7, #15]
    memset(ppu_get_context()->line_entry_array, 0, 
 8004f24:	f7ff f8a4 	bl	8004070 <ppu_get_context>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	f242 03c8 	movw	r3, #8392	; 0x20c8
 8004f2e:	4413      	add	r3, r2
 8004f30:	2250      	movs	r2, #80	; 0x50
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f00c fa95 	bl	8011464 <memset>
        sizeof(ppu_get_context()->line_entry_array));

    for (int i=0; i<40; i++) {
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	e08d      	b.n	800505c <load_line_sprites+0x160>
        oam_entry e = ppu_get_context()->oam_ram[i];
 8004f40:	f7ff f896 	bl	8004070 <ppu_get_context>
 8004f44:	4602      	mov	r2, r0
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4c:	607b      	str	r3, [r7, #4]

        if (!e.x) {
 8004f4e:	797b      	ldrb	r3, [r7, #5]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d07f      	beq.n	8005054 <load_line_sprites+0x158>
            //x = 0 means not visible...
            continue;
        }

        if (ppu_get_context()->line_sprite_count >= 10) {
 8004f54:	f7ff f88c 	bl	8004070 <ppu_get_context>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b09      	cmp	r3, #9
 8004f62:	d901      	bls.n	8004f68 <load_line_sprites+0x6c>
            //max 10 sprites per line...
            break;
 8004f64:	bf00      	nop
                prev = le;
                le = le->next;
            }
        }
    }
}
 8004f66:	e07d      	b.n	8005064 <load_line_sprites+0x168>
        if (e.y <= cur_y + 16 && e.y + sprite_height > cur_y + 16) {
 8004f68:	793b      	ldrb	r3, [r7, #4]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	3310      	adds	r3, #16
 8004f70:	429a      	cmp	r2, r3
 8004f72:	dc70      	bgt.n	8005056 <load_line_sprites+0x15a>
 8004f74:	793b      	ldrb	r3, [r7, #4]
 8004f76:	461a      	mov	r2, r3
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	441a      	add	r2, r3
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	3310      	adds	r3, #16
 8004f80:	429a      	cmp	r2, r3
 8004f82:	dd68      	ble.n	8005056 <load_line_sprites+0x15a>
            oam_line_entry *entry = &ppu_get_context()->line_entry_array[
 8004f84:	f7ff f874 	bl	8004070 <ppu_get_context>
 8004f88:	4604      	mov	r4, r0
                ppu_get_context()->line_sprite_count++
 8004f8a:	f7ff f871 	bl	8004070 <ppu_get_context>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f503 5203 	add.w	r2, r3, #8384	; 0x20c0
 8004f94:	7812      	ldrb	r2, [r2, #0]
 8004f96:	1c51      	adds	r1, r2, #1
 8004f98:	b2c9      	uxtb	r1, r1
 8004f9a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004f9e:	7019      	strb	r1, [r3, #0]
 8004fa0:	4613      	mov	r3, r2
            oam_line_entry *entry = &ppu_get_context()->line_entry_array[
 8004fa2:	f203 4319 	addw	r3, r3, #1049	; 0x419
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4423      	add	r3, r4
 8004faa:	60bb      	str	r3, [r7, #8]
            entry->entry = e;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
            entry->next = NULL;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	605a      	str	r2, [r3, #4]
            if (!ppu_get_context()->line_sprites ||
 8004fb8:	f7ff f85a 	bl	8004070 <ppu_get_context>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004fc2:	4413      	add	r3, r2
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <load_line_sprites+0xe4>
                    ppu_get_context()->line_sprites->entry.x > e.x) {
 8004fca:	f7ff f851 	bl	8004070 <ppu_get_context>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004fd4:	4413      	add	r3, r2
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	785a      	ldrb	r2, [r3, #1]
 8004fda:	797b      	ldrb	r3, [r7, #5]
            if (!ppu_get_context()->line_sprites ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d911      	bls.n	8005004 <load_line_sprites+0x108>
                entry->next = ppu_get_context()->line_sprites;
 8004fe0:	f7ff f846 	bl	8004070 <ppu_get_context>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004fea:	4413      	add	r3, r2
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	605a      	str	r2, [r3, #4]
                ppu_get_context()->line_sprites = entry;
 8004ff2:	f7ff f83d 	bl	8004070 <ppu_get_context>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004ffc:	4413      	add	r3, r2
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	601a      	str	r2, [r3, #0]
                continue;
 8005002:	e028      	b.n	8005056 <load_line_sprites+0x15a>
            oam_line_entry *le = ppu_get_context()->line_sprites;
 8005004:	f7ff f834 	bl	8004070 <ppu_get_context>
 8005008:	4602      	mov	r2, r0
 800500a:	f242 03c4 	movw	r3, #8388	; 0x20c4
 800500e:	4413      	add	r3, r2
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	61bb      	str	r3, [r7, #24]
            oam_line_entry *prev = le;
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	617b      	str	r3, [r7, #20]
            while(le) {
 8005018:	e018      	b.n	800504c <load_line_sprites+0x150>
                if (le->entry.x > e.x) {
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	785a      	ldrb	r2, [r3, #1]
 800501e:	797b      	ldrb	r3, [r7, #5]
 8005020:	429a      	cmp	r2, r3
 8005022:	d906      	bls.n	8005032 <load_line_sprites+0x136>
                    prev->next = entry;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	605a      	str	r2, [r3, #4]
                    entry->next = le;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	605a      	str	r2, [r3, #4]
                    break;
 8005030:	e011      	b.n	8005056 <load_line_sprites+0x15a>
                if (!le->next) {
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d103      	bne.n	8005042 <load_line_sprites+0x146>
                    le->next = entry;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	605a      	str	r2, [r3, #4]
                    break;
 8005040:	e009      	b.n	8005056 <load_line_sprites+0x15a>
                prev = le;
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	617b      	str	r3, [r7, #20]
                le = le->next;
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	61bb      	str	r3, [r7, #24]
            while(le) {
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e3      	bne.n	800501a <load_line_sprites+0x11e>
 8005052:	e000      	b.n	8005056 <load_line_sprites+0x15a>
            continue;
 8005054:	bf00      	nop
    for (int i=0; i<40; i++) {
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3301      	adds	r3, #1
 800505a:	61fb      	str	r3, [r7, #28]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2b27      	cmp	r3, #39	; 0x27
 8005060:	f77f af6e 	ble.w	8004f40 <load_line_sprites+0x44>
}
 8005064:	bf00      	nop
 8005066:	3724      	adds	r7, #36	; 0x24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd90      	pop	{r4, r7, pc}

0800506c <ppu_mode_oam>:

void ppu_mode_oam() {
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
    if (ppu_get_context()->line_ticks >= 80) {
 8005070:	f7fe fffe 	bl	8004070 <ppu_get_context>
 8005074:	4602      	mov	r2, r0
 8005076:	f242 1330 	movw	r3, #8496	; 0x2130
 800507a:	4413      	add	r3, r2
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b4f      	cmp	r3, #79	; 0x4f
 8005080:	d937      	bls.n	80050f2 <ppu_mode_oam+0x86>
        LCDS_MODE_SET(MODE_XFER);
 8005082:	f7fe f999 	bl	80033b8 <lcd_get_context>
 8005086:	4603      	mov	r3, r0
 8005088:	785a      	ldrb	r2, [r3, #1]
 800508a:	f022 0203 	bic.w	r2, r2, #3
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	705a      	strb	r2, [r3, #1]
 8005092:	f7fe f991 	bl	80033b8 <lcd_get_context>
 8005096:	4603      	mov	r3, r0
 8005098:	785a      	ldrb	r2, [r3, #1]
 800509a:	f042 0203 	orr.w	r2, r2, #3
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	705a      	strb	r2, [r3, #1]

        ppu_get_context()->pfc.cur_fetch_state = FS_TILE;
 80050a2:	f7fe ffe5 	bl	8004070 <ppu_get_context>
 80050a6:	4602      	mov	r2, r0
 80050a8:	f242 03a0 	movw	r3, #8352	; 0x20a0
 80050ac:	4413      	add	r3, r2
 80050ae:	2200      	movs	r2, #0
 80050b0:	701a      	strb	r2, [r3, #0]
        ppu_get_context()->pfc.line_x = 0;
 80050b2:	f7fe ffdd 	bl	8004070 <ppu_get_context>
 80050b6:	4602      	mov	r2, r0
 80050b8:	f242 03b0 	movw	r3, #8368	; 0x20b0
 80050bc:	4413      	add	r3, r2
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
        ppu_get_context()->pfc.fetch_x = 0;
 80050c2:	f7fe ffd5 	bl	8004070 <ppu_get_context>
 80050c6:	4602      	mov	r2, r0
 80050c8:	f242 03b2 	movw	r3, #8370	; 0x20b2
 80050cc:	4413      	add	r3, r2
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
        ppu_get_context()->pfc.pushed_x = 0;
 80050d2:	f7fe ffcd 	bl	8004070 <ppu_get_context>
 80050d6:	4602      	mov	r2, r0
 80050d8:	f242 03b1 	movw	r3, #8369	; 0x20b1
 80050dc:	4413      	add	r3, r2
 80050de:	2200      	movs	r2, #0
 80050e0:	701a      	strb	r2, [r3, #0]
        ppu_get_context()->pfc.fifo_x = 0;
 80050e2:	f7fe ffc5 	bl	8004070 <ppu_get_context>
 80050e6:	4602      	mov	r2, r0
 80050e8:	f242 03bf 	movw	r3, #8383	; 0x20bf
 80050ec:	4413      	add	r3, r2
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]
    }

    if (ppu_get_context()->line_ticks == 1) {
 80050f2:	f7fe ffbd 	bl	8004070 <ppu_get_context>
 80050f6:	4602      	mov	r2, r0
 80050f8:	f242 1330 	movw	r3, #8496	; 0x2130
 80050fc:	4413      	add	r3, r2
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d110      	bne.n	8005126 <ppu_mode_oam+0xba>
        //read oam on the first tick only...
        ppu_get_context()->line_sprites = 0;
 8005104:	f7fe ffb4 	bl	8004070 <ppu_get_context>
 8005108:	4602      	mov	r2, r0
 800510a:	f242 03c4 	movw	r3, #8388	; 0x20c4
 800510e:	4413      	add	r3, r2
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
        ppu_get_context()->line_sprite_count = 0;
 8005114:	f7fe ffac 	bl	8004070 <ppu_get_context>
 8005118:	4603      	mov	r3, r0
 800511a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]

        load_line_sprites();
 8005122:	f7ff feeb 	bl	8004efc <load_line_sprites>
    }
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}

0800512a <ppu_mode_xfer>:

void ppu_mode_xfer() {
 800512a:	b580      	push	{r7, lr}
 800512c:	af00      	add	r7, sp, #0
    pipeline_process();
 800512e:	f7ff fe14 	bl	8004d5a <pipeline_process>

    if (ppu_get_context()->pfc.pushed_x >= XRES) {
 8005132:	f7fe ff9d 	bl	8004070 <ppu_get_context>
 8005136:	4602      	mov	r2, r0
 8005138:	f242 03b1 	movw	r3, #8369	; 0x20b1
 800513c:	4413      	add	r3, r2
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	23a0      	movs	r3, #160	; 0xa0
 8005144:	429a      	cmp	r2, r3
 8005146:	db19      	blt.n	800517c <ppu_mode_xfer+0x52>
        pipeline_fifo_reset();
 8005148:	f7ff fe58 	bl	8004dfc <pipeline_fifo_reset>

        LCDS_MODE_SET(MODE_HBLANK);
 800514c:	f7fe f934 	bl	80033b8 <lcd_get_context>
 8005150:	4603      	mov	r3, r0
 8005152:	785a      	ldrb	r2, [r3, #1]
 8005154:	f022 0203 	bic.w	r2, r2, #3
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	705a      	strb	r2, [r3, #1]
 800515c:	f7fe f92c 	bl	80033b8 <lcd_get_context>
 8005160:	4603      	mov	r3, r0
 8005162:	785a      	ldrb	r2, [r3, #1]
 8005164:	705a      	strb	r2, [r3, #1]

        if (LCDS_STAT_INT(SS_HBLANK)) {
 8005166:	f7fe f927 	bl	80033b8 <lcd_get_context>
 800516a:	4603      	mov	r3, r0
 800516c:	785b      	ldrb	r3, [r3, #1]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <ppu_mode_xfer+0x52>
            cpu_request_interrupt(IT_LCD_STAT);
 8005176:	2002      	movs	r0, #2
 8005178:	f7fb ff8c 	bl	8001094 <cpu_request_interrupt>
        }
    }
}
 800517c:	bf00      	nop
 800517e:	bd80      	pop	{r7, pc}

08005180 <ppu_mode_vblank>:

void ppu_mode_vblank() {
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
    if (ppu_get_context()->line_ticks >= TICKS_PER_LINE) {
 8005184:	f7fe ff74 	bl	8004070 <ppu_get_context>
 8005188:	4602      	mov	r2, r0
 800518a:	f242 1330 	movw	r3, #8496	; 0x2130
 800518e:	4413      	add	r3, r2
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8005196:	4293      	cmp	r3, r2
 8005198:	d32e      	bcc.n	80051f8 <ppu_mode_vblank+0x78>
        increment_ly();
 800519a:	f7ff fe47 	bl	8004e2c <increment_ly>

        if (lcd_get_context()->ly >= LINES_PER_FRAME) {
 800519e:	f7fe f90b 	bl	80033b8 <lcd_get_context>
 80051a2:	4603      	mov	r3, r0
 80051a4:	791b      	ldrb	r3, [r3, #4]
 80051a6:	461a      	mov	r2, r3
 80051a8:	239a      	movs	r3, #154	; 0x9a
 80051aa:	429a      	cmp	r2, r3
 80051ac:	db1c      	blt.n	80051e8 <ppu_mode_vblank+0x68>
            LCDS_MODE_SET(MODE_OAM);
 80051ae:	f7fe f903 	bl	80033b8 <lcd_get_context>
 80051b2:	4603      	mov	r3, r0
 80051b4:	785a      	ldrb	r2, [r3, #1]
 80051b6:	f022 0203 	bic.w	r2, r2, #3
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	705a      	strb	r2, [r3, #1]
 80051be:	f7fe f8fb 	bl	80033b8 <lcd_get_context>
 80051c2:	4603      	mov	r3, r0
 80051c4:	785a      	ldrb	r2, [r3, #1]
 80051c6:	f042 0202 	orr.w	r2, r2, #2
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	705a      	strb	r2, [r3, #1]
            lcd_get_context()->ly = 0;
 80051ce:	f7fe f8f3 	bl	80033b8 <lcd_get_context>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2200      	movs	r2, #0
 80051d6:	711a      	strb	r2, [r3, #4]
            ppu_get_context()->window_line = 0;
 80051d8:	f7fe ff4a 	bl	8004070 <ppu_get_context>
 80051dc:	4602      	mov	r2, r0
 80051de:	f242 1328 	movw	r3, #8488	; 0x2128
 80051e2:	4413      	add	r3, r2
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
        }

        ppu_get_context()->line_ticks = 0;
 80051e8:	f7fe ff42 	bl	8004070 <ppu_get_context>
 80051ec:	4602      	mov	r2, r0
 80051ee:	f242 1330 	movw	r3, #8496	; 0x2130
 80051f2:	4413      	add	r3, r2
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
    }
}
 80051f8:	bf00      	nop
 80051fa:	bd80      	pop	{r7, pc}

080051fc <ppu_mode_hblank>:
static u32 target_frame_time = 1000 / 58;
static long prev_frame_time = 0;
static long start_timer = 0;
static long frame_count = 0;

void ppu_mode_hblank() {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
    if (ppu_get_context()->line_ticks >= TICKS_PER_LINE) {
 8005202:	f7fe ff35 	bl	8004070 <ppu_get_context>
 8005206:	4602      	mov	r2, r0
 8005208:	f242 1330 	movw	r3, #8496	; 0x2130
 800520c:	4413      	add	r3, r2
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8005214:	4293      	cmp	r3, r2
 8005216:	f0c0 8089 	bcc.w	800532c <ppu_mode_hblank+0x130>
        increment_ly();
 800521a:	f7ff fe07 	bl	8004e2c <increment_ly>

        if (lcd_get_context()->ly >= YRES) {
 800521e:	f7fe f8cb 	bl	80033b8 <lcd_get_context>
 8005222:	4603      	mov	r3, r0
 8005224:	791b      	ldrb	r3, [r3, #4]
 8005226:	461a      	mov	r2, r3
 8005228:	2390      	movs	r3, #144	; 0x90
 800522a:	429a      	cmp	r2, r3
 800522c:	db66      	blt.n	80052fc <ppu_mode_hblank+0x100>
            LCDS_MODE_SET(MODE_VBLANK);
 800522e:	f7fe f8c3 	bl	80033b8 <lcd_get_context>
 8005232:	4603      	mov	r3, r0
 8005234:	785a      	ldrb	r2, [r3, #1]
 8005236:	f022 0203 	bic.w	r2, r2, #3
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	705a      	strb	r2, [r3, #1]
 800523e:	f7fe f8bb 	bl	80033b8 <lcd_get_context>
 8005242:	4603      	mov	r3, r0
 8005244:	785a      	ldrb	r2, [r3, #1]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	705a      	strb	r2, [r3, #1]

            cpu_request_interrupt(IT_VBLANK);
 800524e:	2001      	movs	r0, #1
 8005250:	f7fb ff20 	bl	8001094 <cpu_request_interrupt>

            if (LCDS_STAT_INT(SS_VBLANK)) {
 8005254:	f7fe f8b0 	bl	80033b8 <lcd_get_context>
 8005258:	4603      	mov	r3, r0
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <ppu_mode_hblank+0x6e>
                cpu_request_interrupt(IT_LCD_STAT);
 8005264:	2002      	movs	r0, #2
 8005266:	f7fb ff15 	bl	8001094 <cpu_request_interrupt>
            }

            ppu_get_context()->current_frame++;
 800526a:	f7fe ff01 	bl	8004070 <ppu_get_context>
 800526e:	4602      	mov	r2, r0
 8005270:	f242 132c 	movw	r3, #8492	; 0x212c
 8005274:	4413      	add	r3, r2
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	1c59      	adds	r1, r3, #1
 800527a:	f242 132c 	movw	r3, #8492	; 0x212c
 800527e:	4413      	add	r3, r2
 8005280:	6019      	str	r1, [r3, #0]

            //calc FPS...
            u32 end = get_ticks();
 8005282:	f000 fd60 	bl	8005d46 <get_ticks>
 8005286:	60f8      	str	r0, [r7, #12]
            u32 frame_time = end - prev_frame_time;
 8005288:	4b2a      	ldr	r3, [pc, #168]	; (8005334 <ppu_mode_hblank+0x138>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	60bb      	str	r3, [r7, #8]

            if (frame_time < target_frame_time) {
 8005294:	4b28      	ldr	r3, [pc, #160]	; (8005338 <ppu_mode_hblank+0x13c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	429a      	cmp	r2, r3
 800529c:	d206      	bcs.n	80052ac <ppu_mode_hblank+0xb0>
        	osDelay((target_frame_time - frame_time));
 800529e:	4b26      	ldr	r3, [pc, #152]	; (8005338 <ppu_mode_hblank+0x13c>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	4618      	mov	r0, r3
 80052a8:	f008 fcd0 	bl	800dc4c <osDelay>
            }

            if (end - start_timer >= 1000) {
 80052ac:	4b23      	ldr	r3, [pc, #140]	; (800533c <ppu_mode_hblank+0x140>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1a9b      	subs	r3, r3, r2
 80052b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ba:	d313      	bcc.n	80052e4 <ppu_mode_hblank+0xe8>
                u32 fps = frame_count;
 80052bc:	4b20      	ldr	r3, [pc, #128]	; (8005340 <ppu_mode_hblank+0x144>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	607b      	str	r3, [r7, #4]
                start_timer = end;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4a1d      	ldr	r2, [pc, #116]	; (800533c <ppu_mode_hblank+0x140>)
 80052c6:	6013      	str	r3, [r2, #0]
                frame_count = 0;
 80052c8:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <ppu_mode_hblank+0x144>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]

                printf("FPS: %lu\n", fps);
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	481c      	ldr	r0, [pc, #112]	; (8005344 <ppu_mode_hblank+0x148>)
 80052d2:	f00c fc79 	bl	8011bc8 <iprintf>

                if (cart_need_save()) {
 80052d6:	f7fb fa73 	bl	80007c0 <cart_need_save>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <ppu_mode_hblank+0xe8>
                    cart_battery_save();
 80052e0:	f7fb fcaa 	bl	8000c38 <cart_battery_save>
                }
            }

            frame_count++;
 80052e4:	4b16      	ldr	r3, [pc, #88]	; (8005340 <ppu_mode_hblank+0x144>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3301      	adds	r3, #1
 80052ea:	4a15      	ldr	r2, [pc, #84]	; (8005340 <ppu_mode_hblank+0x144>)
 80052ec:	6013      	str	r3, [r2, #0]
            prev_frame_time = get_ticks();
 80052ee:	f000 fd2a 	bl	8005d46 <get_ticks>
 80052f2:	4603      	mov	r3, r0
 80052f4:	461a      	mov	r2, r3
 80052f6:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <ppu_mode_hblank+0x138>)
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e00f      	b.n	800531c <ppu_mode_hblank+0x120>

        } else {
            LCDS_MODE_SET(MODE_OAM);
 80052fc:	f7fe f85c 	bl	80033b8 <lcd_get_context>
 8005300:	4603      	mov	r3, r0
 8005302:	785a      	ldrb	r2, [r3, #1]
 8005304:	f022 0203 	bic.w	r2, r2, #3
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	705a      	strb	r2, [r3, #1]
 800530c:	f7fe f854 	bl	80033b8 <lcd_get_context>
 8005310:	4603      	mov	r3, r0
 8005312:	785a      	ldrb	r2, [r3, #1]
 8005314:	f042 0202 	orr.w	r2, r2, #2
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	705a      	strb	r2, [r3, #1]
        }

        ppu_get_context()->line_ticks = 0;
 800531c:	f7fe fea8 	bl	8004070 <ppu_get_context>
 8005320:	4602      	mov	r2, r0
 8005322:	f242 1330 	movw	r3, #8496	; 0x2130
 8005326:	4413      	add	r3, r2
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
    }
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20003734 	.word	0x20003734
 8005338:	200009c8 	.word	0x200009c8
 800533c:	20003738 	.word	0x20003738
 8005340:	2000373c 	.word	0x2000373c
 8005344:	08012e08 	.word	0x08012e08

08005348 <wram_read>:
    u8 hram[0x80];
} ram_context;

static ram_context ctx;

u8 wram_read(u16 address) {
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	80fb      	strh	r3, [r7, #6]
    address -= 0xC000;
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8005358:	80fb      	strh	r3, [r7, #6]

    if (address >= 0x2000) {
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005360:	d30a      	bcc.n	8005378 <wram_read+0x30>
        printf("INVALID WRAM ADDR %08X\n", address + 0xC000);
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8005368:	4619      	mov	r1, r3
 800536a:	4807      	ldr	r0, [pc, #28]	; (8005388 <wram_read+0x40>)
 800536c:	f00c fc2c 	bl	8011bc8 <iprintf>
        exit(-1);
 8005370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005374:	f00b faf0 	bl	8010958 <exit>
    }

    return ctx.wram[address];
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	4a04      	ldr	r2, [pc, #16]	; (800538c <wram_read+0x44>)
 800537c:	5cd3      	ldrb	r3, [r2, r3]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	08012e14 	.word	0x08012e14
 800538c:	20003740 	.word	0x20003740

08005390 <wram_write>:

void wram_write(u16 address, u8 value) {
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	460a      	mov	r2, r1
 800539a:	80fb      	strh	r3, [r7, #6]
 800539c:	4613      	mov	r3, r2
 800539e:	717b      	strb	r3, [r7, #5]
    address -= 0xC000;
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80053a6:	80fb      	strh	r3, [r7, #6]

    ctx.wram[address] = value;
 80053a8:	88fb      	ldrh	r3, [r7, #6]
 80053aa:	4904      	ldr	r1, [pc, #16]	; (80053bc <wram_write+0x2c>)
 80053ac:	797a      	ldrb	r2, [r7, #5]
 80053ae:	54ca      	strb	r2, [r1, r3]
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	20003740 	.word	0x20003740

080053c0 <hram_read>:

u8 hram_read(u16 address) {
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	80fb      	strh	r3, [r7, #6]
    address -= 0xFF80;
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	3380      	adds	r3, #128	; 0x80
 80053ce:	80fb      	strh	r3, [r7, #6]

    return ctx.hram[address];
 80053d0:	88fb      	ldrh	r3, [r7, #6]
 80053d2:	4a05      	ldr	r2, [pc, #20]	; (80053e8 <hram_read+0x28>)
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053da:	781b      	ldrb	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	20003740 	.word	0x20003740

080053ec <hram_write>:

void hram_write(u16 address, u8 value) {
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	460a      	mov	r2, r1
 80053f6:	80fb      	strh	r3, [r7, #6]
 80053f8:	4613      	mov	r3, r2
 80053fa:	717b      	strb	r3, [r7, #5]
    address -= 0xFF80;
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	3380      	adds	r3, #128	; 0x80
 8005400:	80fb      	strh	r3, [r7, #6]

    ctx.hram[address] = value;
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	4a05      	ldr	r2, [pc, #20]	; (800541c <hram_write+0x30>)
 8005406:	4413      	add	r3, r2
 8005408:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800540c:	797a      	ldrb	r2, [r7, #5]
 800540e:	701a      	strb	r2, [r3, #0]
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	20003740 	.word	0x20003740

08005420 <stack_push>:
    0xDFFD: 88 <- SP
    0xDFFE: 55 
    0xDFFF: 00
*/

void stack_push(u8 data) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	71fb      	strb	r3, [r7, #7]
    cpu_get_regs()->sp--;
 800542a:	f7fd fbe9 	bl	8002c00 <cpu_get_regs>
 800542e:	4603      	mov	r3, r0
 8005430:	895a      	ldrh	r2, [r3, #10]
 8005432:	3a01      	subs	r2, #1
 8005434:	b292      	uxth	r2, r2
 8005436:	815a      	strh	r2, [r3, #10]
    bus_write(cpu_get_regs()->sp, data);
 8005438:	f7fd fbe2 	bl	8002c00 <cpu_get_regs>
 800543c:	4603      	mov	r3, r0
 800543e:	895b      	ldrh	r3, [r3, #10]
 8005440:	79fa      	ldrb	r2, [r7, #7]
 8005442:	4611      	mov	r1, r2
 8005444:	4618      	mov	r0, r3
 8005446:	f7fb f92f 	bl	80006a8 <bus_write>
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <stack_push16>:

void stack_push16(u16 data) {
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	4603      	mov	r3, r0
 800545a:	80fb      	strh	r3, [r7, #6]
    stack_push((data >> 8) & 0xFF);
 800545c:	88fb      	ldrh	r3, [r7, #6]
 800545e:	0a1b      	lsrs	r3, r3, #8
 8005460:	b29b      	uxth	r3, r3
 8005462:	b2db      	uxtb	r3, r3
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff ffdb 	bl	8005420 <stack_push>
    stack_push(data & 0xFF);
 800546a:	88fb      	ldrh	r3, [r7, #6]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff ffd6 	bl	8005420 <stack_push>
}
 8005474:	bf00      	nop
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <stack_pop>:

u8 stack_pop() {
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
    return bus_read(cpu_get_regs()->sp++);
 8005480:	f7fd fbbe 	bl	8002c00 <cpu_get_regs>
 8005484:	4602      	mov	r2, r0
 8005486:	8953      	ldrh	r3, [r2, #10]
 8005488:	1c59      	adds	r1, r3, #1
 800548a:	b289      	uxth	r1, r1
 800548c:	8151      	strh	r1, [r2, #10]
 800548e:	4618      	mov	r0, r3
 8005490:	f7fb f8a2 	bl	80005d8 <bus_read>
 8005494:	4603      	mov	r3, r0
}
 8005496:	4618      	mov	r0, r3
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80054a2:	4b11      	ldr	r3, [pc, #68]	; (80054e8 <HAL_MspInit+0x4c>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	4a10      	ldr	r2, [pc, #64]	; (80054e8 <HAL_MspInit+0x4c>)
 80054a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ac:	6413      	str	r3, [r2, #64]	; 0x40
 80054ae:	4b0e      	ldr	r3, [pc, #56]	; (80054e8 <HAL_MspInit+0x4c>)
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b6:	607b      	str	r3, [r7, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ba:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <HAL_MspInit+0x4c>)
 80054bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054be:	4a0a      	ldr	r2, [pc, #40]	; (80054e8 <HAL_MspInit+0x4c>)
 80054c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054c4:	6453      	str	r3, [r2, #68]	; 0x44
 80054c6:	4b08      	ldr	r3, [pc, #32]	; (80054e8 <HAL_MspInit+0x4c>)
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80054d2:	2200      	movs	r2, #0
 80054d4:	210f      	movs	r1, #15
 80054d6:	f06f 0001 	mvn.w	r0, #1
 80054da:	f000 fd99 	bl	8006010 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40023800 	.word	0x40023800

080054ec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <HAL_CRC_MspInit+0x38>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d10b      	bne.n	8005516 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <HAL_CRC_MspInit+0x3c>)
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	4a09      	ldr	r2, [pc, #36]	; (8005528 <HAL_CRC_MspInit+0x3c>)
 8005504:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005508:	6313      	str	r3, [r2, #48]	; 0x30
 800550a:	4b07      	ldr	r3, [pc, #28]	; (8005528 <HAL_CRC_MspInit+0x3c>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40023000 	.word	0x40023000
 8005528:	40023800 	.word	0x40023800

0800552c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b0b0      	sub	sp, #192	; 0xc0
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005534:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	609a      	str	r2, [r3, #8]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005544:	f107 031c 	add.w	r3, r7, #28
 8005548:	2290      	movs	r2, #144	; 0x90
 800554a:	2100      	movs	r1, #0
 800554c:	4618      	mov	r0, r3
 800554e:	f00b ff89 	bl	8011464 <memset>
  if(hsd->Instance==SDMMC2)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a84      	ldr	r2, [pc, #528]	; (8005768 <HAL_SD_MspInit+0x23c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	f040 8101 	bne.w	8005760 <HAL_SD_MspInit+0x234>
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48;
 800555e:	f04f 6384 	mov.w	r3, #69206016	; 0x4200000
 8005562:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8005564:	2300      	movs	r3, #0
 8005566:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800556a:	2300      	movs	r3, #0
 800556c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005570:	f107 031c 	add.w	r3, r7, #28
 8005574:	4618      	mov	r0, r3
 8005576:	f002 f933 	bl	80077e0 <HAL_RCCEx_PeriphCLKConfig>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8005580:	f7fe fd70 	bl	8004064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8005584:	4b79      	ldr	r3, [pc, #484]	; (800576c <HAL_SD_MspInit+0x240>)
 8005586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005588:	4a78      	ldr	r2, [pc, #480]	; (800576c <HAL_SD_MspInit+0x240>)
 800558a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558e:	6453      	str	r3, [r2, #68]	; 0x44
 8005590:	4b76      	ldr	r3, [pc, #472]	; (800576c <HAL_SD_MspInit+0x240>)
 8005592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005598:	61bb      	str	r3, [r7, #24]
 800559a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800559c:	4b73      	ldr	r3, [pc, #460]	; (800576c <HAL_SD_MspInit+0x240>)
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	4a72      	ldr	r2, [pc, #456]	; (800576c <HAL_SD_MspInit+0x240>)
 80055a2:	f043 0302 	orr.w	r3, r3, #2
 80055a6:	6313      	str	r3, [r2, #48]	; 0x30
 80055a8:	4b70      	ldr	r3, [pc, #448]	; (800576c <HAL_SD_MspInit+0x240>)
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055b4:	4b6d      	ldr	r3, [pc, #436]	; (800576c <HAL_SD_MspInit+0x240>)
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	4a6c      	ldr	r2, [pc, #432]	; (800576c <HAL_SD_MspInit+0x240>)
 80055ba:	f043 0308 	orr.w	r3, r3, #8
 80055be:	6313      	str	r3, [r2, #48]	; 0x30
 80055c0:	4b6a      	ldr	r3, [pc, #424]	; (800576c <HAL_SD_MspInit+0x240>)
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80055cc:	4b67      	ldr	r3, [pc, #412]	; (800576c <HAL_SD_MspInit+0x240>)
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	4a66      	ldr	r2, [pc, #408]	; (800576c <HAL_SD_MspInit+0x240>)
 80055d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d6:	6313      	str	r3, [r2, #48]	; 0x30
 80055d8:	4b64      	ldr	r3, [pc, #400]	; (800576c <HAL_SD_MspInit+0x240>)
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0
    */
    GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 80055e4:	2318      	movs	r3, #24
 80055e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ea:	2302      	movs	r3, #2
 80055ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f6:	2303      	movs	r3, #3
 80055f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80055fc:	230a      	movs	r3, #10
 80055fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005602:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005606:	4619      	mov	r1, r3
 8005608:	4859      	ldr	r0, [pc, #356]	; (8005770 <HAL_SD_MspInit+0x244>)
 800560a:	f001 f9bb 	bl	8006984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 800560e:	23c0      	movs	r3, #192	; 0xc0
 8005610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005614:	2302      	movs	r3, #2
 8005616:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561a:	2300      	movs	r3, #0
 800561c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005620:	2303      	movs	r3, #3
 8005622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8005626:	230b      	movs	r3, #11
 8005628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800562c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005630:	4619      	mov	r1, r3
 8005632:	4850      	ldr	r0, [pc, #320]	; (8005774 <HAL_SD_MspInit+0x248>)
 8005634:	f001 f9a6 	bl	8006984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8005638:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800563c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005640:	2302      	movs	r3, #2
 8005642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005646:	2300      	movs	r3, #0
 8005648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800564c:	2303      	movs	r3, #3
 800564e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8005652:	230b      	movs	r3, #11
 8005654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005658:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800565c:	4619      	mov	r1, r3
 800565e:	4846      	ldr	r0, [pc, #280]	; (8005778 <HAL_SD_MspInit+0x24c>)
 8005660:	f001 f990 	bl	8006984 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 8005664:	4b45      	ldr	r3, [pc, #276]	; (800577c <HAL_SD_MspInit+0x250>)
 8005666:	4a46      	ldr	r2, [pc, #280]	; (8005780 <HAL_SD_MspInit+0x254>)
 8005668:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 800566a:	4b44      	ldr	r3, [pc, #272]	; (800577c <HAL_SD_MspInit+0x250>)
 800566c:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8005670:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005672:	4b42      	ldr	r3, [pc, #264]	; (800577c <HAL_SD_MspInit+0x250>)
 8005674:	2200      	movs	r2, #0
 8005676:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005678:	4b40      	ldr	r3, [pc, #256]	; (800577c <HAL_SD_MspInit+0x250>)
 800567a:	2200      	movs	r2, #0
 800567c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800567e:	4b3f      	ldr	r3, [pc, #252]	; (800577c <HAL_SD_MspInit+0x250>)
 8005680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005684:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005686:	4b3d      	ldr	r3, [pc, #244]	; (800577c <HAL_SD_MspInit+0x250>)
 8005688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800568c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800568e:	4b3b      	ldr	r3, [pc, #236]	; (800577c <HAL_SD_MspInit+0x250>)
 8005690:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005694:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 8005696:	4b39      	ldr	r3, [pc, #228]	; (800577c <HAL_SD_MspInit+0x250>)
 8005698:	2220      	movs	r2, #32
 800569a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800569c:	4b37      	ldr	r3, [pc, #220]	; (800577c <HAL_SD_MspInit+0x250>)
 800569e:	2200      	movs	r2, #0
 80056a0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80056a2:	4b36      	ldr	r3, [pc, #216]	; (800577c <HAL_SD_MspInit+0x250>)
 80056a4:	2204      	movs	r2, #4
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80056a8:	4b34      	ldr	r3, [pc, #208]	; (800577c <HAL_SD_MspInit+0x250>)
 80056aa:	2203      	movs	r2, #3
 80056ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 80056ae:	4b33      	ldr	r3, [pc, #204]	; (800577c <HAL_SD_MspInit+0x250>)
 80056b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80056b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80056b6:	4b31      	ldr	r3, [pc, #196]	; (800577c <HAL_SD_MspInit+0x250>)
 80056b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80056bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 80056be:	482f      	ldr	r0, [pc, #188]	; (800577c <HAL_SD_MspInit+0x250>)
 80056c0:	f000 fdba 	bl	8006238 <HAL_DMA_Init>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_SD_MspInit+0x1a2>
    {
      Error_Handler();
 80056ca:	f7fe fccb 	bl	8004064 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2a      	ldr	r2, [pc, #168]	; (800577c <HAL_SD_MspInit+0x250>)
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40
 80056d4:	4a29      	ldr	r2, [pc, #164]	; (800577c <HAL_SD_MspInit+0x250>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 80056da:	4b2a      	ldr	r3, [pc, #168]	; (8005784 <HAL_SD_MspInit+0x258>)
 80056dc:	4a2a      	ldr	r2, [pc, #168]	; (8005788 <HAL_SD_MspInit+0x25c>)
 80056de:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 80056e0:	4b28      	ldr	r3, [pc, #160]	; (8005784 <HAL_SD_MspInit+0x258>)
 80056e2:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80056e6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056e8:	4b26      	ldr	r3, [pc, #152]	; (8005784 <HAL_SD_MspInit+0x258>)
 80056ea:	2240      	movs	r2, #64	; 0x40
 80056ec:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056ee:	4b25      	ldr	r3, [pc, #148]	; (8005784 <HAL_SD_MspInit+0x258>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056f4:	4b23      	ldr	r3, [pc, #140]	; (8005784 <HAL_SD_MspInit+0x258>)
 80056f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056fa:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80056fc:	4b21      	ldr	r3, [pc, #132]	; (8005784 <HAL_SD_MspInit+0x258>)
 80056fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005702:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005704:	4b1f      	ldr	r3, [pc, #124]	; (8005784 <HAL_SD_MspInit+0x258>)
 8005706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800570a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 800570c:	4b1d      	ldr	r3, [pc, #116]	; (8005784 <HAL_SD_MspInit+0x258>)
 800570e:	2220      	movs	r2, #32
 8005710:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005712:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <HAL_SD_MspInit+0x258>)
 8005714:	2200      	movs	r2, #0
 8005716:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005718:	4b1a      	ldr	r3, [pc, #104]	; (8005784 <HAL_SD_MspInit+0x258>)
 800571a:	2204      	movs	r2, #4
 800571c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800571e:	4b19      	ldr	r3, [pc, #100]	; (8005784 <HAL_SD_MspInit+0x258>)
 8005720:	2203      	movs	r2, #3
 8005722:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005724:	4b17      	ldr	r3, [pc, #92]	; (8005784 <HAL_SD_MspInit+0x258>)
 8005726:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800572a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800572c:	4b15      	ldr	r3, [pc, #84]	; (8005784 <HAL_SD_MspInit+0x258>)
 800572e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8005734:	4813      	ldr	r0, [pc, #76]	; (8005784 <HAL_SD_MspInit+0x258>)
 8005736:	f000 fd7f 	bl	8006238 <HAL_DMA_Init>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <HAL_SD_MspInit+0x218>
    {
      Error_Handler();
 8005740:	f7fe fc90 	bl	8004064 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc2_tx);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a0f      	ldr	r2, [pc, #60]	; (8005784 <HAL_SD_MspInit+0x258>)
 8005748:	63da      	str	r2, [r3, #60]	; 0x3c
 800574a:	4a0e      	ldr	r2, [pc, #56]	; (8005784 <HAL_SD_MspInit+0x258>)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 5, 0);
 8005750:	2200      	movs	r2, #0
 8005752:	2105      	movs	r1, #5
 8005754:	2067      	movs	r0, #103	; 0x67
 8005756:	f000 fc5b 	bl	8006010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 800575a:	2067      	movs	r0, #103	; 0x67
 800575c:	f000 fc74 	bl	8006048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8005760:	bf00      	nop
 8005762:	37c0      	adds	r7, #192	; 0xc0
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40011c00 	.word	0x40011c00
 800576c:	40023800 	.word	0x40023800
 8005770:	40020400 	.word	0x40020400
 8005774:	40020c00 	.word	0x40020c00
 8005778:	40021800 	.word	0x40021800
 800577c:	2000966c 	.word	0x2000966c
 8005780:	40026410 	.word	0x40026410
 8005784:	20009564 	.word	0x20009564
 8005788:	40026488 	.word	0x40026488

0800578c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b0ae      	sub	sp, #184	; 0xb8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005794:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	609a      	str	r2, [r3, #8]
 80057a0:	60da      	str	r2, [r3, #12]
 80057a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80057a4:	f107 0314 	add.w	r3, r7, #20
 80057a8:	2290      	movs	r2, #144	; 0x90
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f00b fe59 	bl	8011464 <memset>
  if(huart->Instance==USART1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2c      	ldr	r2, [pc, #176]	; (8005868 <HAL_UART_MspInit+0xdc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d151      	bne.n	8005860 <HAL_UART_MspInit+0xd4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80057bc:	2340      	movs	r3, #64	; 0x40
 80057be:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80057c0:	2300      	movs	r3, #0
 80057c2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057c4:	f107 0314 	add.w	r3, r7, #20
 80057c8:	4618      	mov	r0, r3
 80057ca:	f002 f809 	bl	80077e0 <HAL_RCCEx_PeriphCLKConfig>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80057d4:	f7fe fc46 	bl	8004064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057d8:	4b24      	ldr	r3, [pc, #144]	; (800586c <HAL_UART_MspInit+0xe0>)
 80057da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057dc:	4a23      	ldr	r2, [pc, #140]	; (800586c <HAL_UART_MspInit+0xe0>)
 80057de:	f043 0310 	orr.w	r3, r3, #16
 80057e2:	6453      	str	r3, [r2, #68]	; 0x44
 80057e4:	4b21      	ldr	r3, [pc, #132]	; (800586c <HAL_UART_MspInit+0xe0>)
 80057e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057f0:	4b1e      	ldr	r3, [pc, #120]	; (800586c <HAL_UART_MspInit+0xe0>)
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	4a1d      	ldr	r2, [pc, #116]	; (800586c <HAL_UART_MspInit+0xe0>)
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	6313      	str	r3, [r2, #48]	; 0x30
 80057fc:	4b1b      	ldr	r3, [pc, #108]	; (800586c <HAL_UART_MspInit+0xe0>)
 80057fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800580c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005810:	2302      	movs	r3, #2
 8005812:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005816:	2300      	movs	r3, #0
 8005818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800581c:	2303      	movs	r3, #3
 800581e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005822:	2307      	movs	r3, #7
 8005824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005828:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800582c:	4619      	mov	r1, r3
 800582e:	4810      	ldr	r0, [pc, #64]	; (8005870 <HAL_UART_MspInit+0xe4>)
 8005830:	f001 f8a8 	bl	8006984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800583c:	2302      	movs	r3, #2
 800583e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005842:	2300      	movs	r3, #0
 8005844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005848:	2300      	movs	r3, #0
 800584a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800584e:	2307      	movs	r3, #7
 8005850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005854:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005858:	4619      	mov	r1, r3
 800585a:	4805      	ldr	r0, [pc, #20]	; (8005870 <HAL_UART_MspInit+0xe4>)
 800585c:	f001 f892 	bl	8006984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005860:	bf00      	nop
 8005862:	37b8      	adds	r7, #184	; 0xb8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40011000 	.word	0x40011000
 800586c:	40023800 	.word	0x40023800
 8005870:	40020000 	.word	0x40020000

08005874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08c      	sub	sp, #48	; 0x30
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8005884:	2200      	movs	r2, #0
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	2019      	movs	r0, #25
 800588a:	f000 fbc1 	bl	8006010 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800588e:	2019      	movs	r0, #25
 8005890:	f000 fbda 	bl	8006048 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005894:	4b1f      	ldr	r3, [pc, #124]	; (8005914 <HAL_InitTick+0xa0>)
 8005896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005898:	4a1e      	ldr	r2, [pc, #120]	; (8005914 <HAL_InitTick+0xa0>)
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	6453      	str	r3, [r2, #68]	; 0x44
 80058a0:	4b1c      	ldr	r3, [pc, #112]	; (8005914 <HAL_InitTick+0xa0>)
 80058a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80058ac:	f107 0210 	add.w	r2, r7, #16
 80058b0:	f107 0314 	add.w	r3, r7, #20
 80058b4:	4611      	mov	r1, r2
 80058b6:	4618      	mov	r0, r3
 80058b8:	f001 ff60 	bl	800777c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80058bc:	f001 ff4a 	bl	8007754 <HAL_RCC_GetPCLK2Freq>
 80058c0:	4603      	mov	r3, r0
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	4a13      	ldr	r2, [pc, #76]	; (8005918 <HAL_InitTick+0xa4>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	0c9b      	lsrs	r3, r3, #18
 80058d0:	3b01      	subs	r3, #1
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80058d4:	4b11      	ldr	r3, [pc, #68]	; (800591c <HAL_InitTick+0xa8>)
 80058d6:	4a12      	ldr	r2, [pc, #72]	; (8005920 <HAL_InitTick+0xac>)
 80058d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80058da:	4b10      	ldr	r3, [pc, #64]	; (800591c <HAL_InitTick+0xa8>)
 80058dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80058e0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80058e2:	4a0e      	ldr	r2, [pc, #56]	; (800591c <HAL_InitTick+0xa8>)
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80058e8:	4b0c      	ldr	r3, [pc, #48]	; (800591c <HAL_InitTick+0xa8>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058ee:	4b0b      	ldr	r3, [pc, #44]	; (800591c <HAL_InitTick+0xa8>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80058f4:	4809      	ldr	r0, [pc, #36]	; (800591c <HAL_InitTick+0xa8>)
 80058f6:	f003 fec4 	bl	8009682 <HAL_TIM_Base_Init>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005900:	4806      	ldr	r0, [pc, #24]	; (800591c <HAL_InitTick+0xa8>)
 8005902:	f003 ff1f 	bl	8009744 <HAL_TIM_Base_Start_IT>
 8005906:	4603      	mov	r3, r0
 8005908:	e000      	b.n	800590c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
}
 800590c:	4618      	mov	r0, r3
 800590e:	3730      	adds	r7, #48	; 0x30
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40023800 	.word	0x40023800
 8005918:	431bde83 	.word	0x431bde83
 800591c:	20009758 	.word	0x20009758
 8005920:	40010000 	.word	0x40010000

08005924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005928:	e7fe      	b.n	8005928 <NMI_Handler+0x4>

0800592a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800592a:	b480      	push	{r7}
 800592c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800592e:	e7fe      	b.n	800592e <HardFault_Handler+0x4>

08005930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005934:	e7fe      	b.n	8005934 <MemManage_Handler+0x4>

08005936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005936:	b480      	push	{r7}
 8005938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800593a:	e7fe      	b.n	800593a <BusFault_Handler+0x4>

0800593c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005940:	e7fe      	b.n	8005940 <UsageFault_Handler+0x4>

08005942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005942:	b480      	push	{r7}
 8005944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005946:	bf00      	nop
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005954:	4802      	ldr	r0, [pc, #8]	; (8005960 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005956:	f003 ff6d 	bl	8009834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800595a:	bf00      	nop
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20009758 	.word	0x20009758

08005964 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 8005968:	4802      	ldr	r0, [pc, #8]	; (8005974 <DMA2_Stream0_IRQHandler+0x10>)
 800596a:	f000 fd95 	bl	8006498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800596e:	bf00      	nop
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	2000966c 	.word	0x2000966c

08005978 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 800597c:	4802      	ldr	r0, [pc, #8]	; (8005988 <DMA2_Stream5_IRQHandler+0x10>)
 800597e:	f000 fd8b 	bl	8006498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8005982:	bf00      	nop
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20009564 	.word	0x20009564

0800598c <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8005990:	4802      	ldr	r0, [pc, #8]	; (800599c <SDMMC2_IRQHandler+0x10>)
 8005992:	f002 fdcd 	bl	8008530 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8005996:	bf00      	nop
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	200095e8 	.word	0x200095e8

080059a0 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80059aa:	f00a ffcf 	bl	801094c <__errno>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2216      	movs	r2, #22
 80059b2:	601a      	str	r2, [r3, #0]
	return -1;
 80059b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <_exit>:

void _exit (int status)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80059c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff ffe7 	bl	80059a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80059d2:	e7fe      	b.n	80059d2 <_exit+0x12>

080059d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	e00a      	b.n	80059fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80059e6:	f3af 8000 	nop.w
 80059ea:	4601      	mov	r1, r0
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	60ba      	str	r2, [r7, #8]
 80059f2:	b2ca      	uxtb	r2, r1
 80059f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	3301      	adds	r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	dbf0      	blt.n	80059e6 <_read+0x12>
	}

return len;
 8005a04:	687b      	ldr	r3, [r7, #4]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <_close>:
	}
	return len;
}

int _close(int file)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
	return -1;
 8005a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a36:	605a      	str	r2, [r3, #4]
	return 0;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <_isatty>:

int _isatty(int file)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
	return 1;
 8005a4e:	2301      	movs	r3, #1
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
	return 0;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <_open>:

int _open(char *path, int flags, ...)
{
 8005a76:	b40e      	push	{r1, r2, r3}
 8005a78:	b480      	push	{r7}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8005a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	b003      	add	sp, #12
 8005a90:	4770      	bx	lr
	...

08005a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a9c:	4a14      	ldr	r2, [pc, #80]	; (8005af0 <_sbrk+0x5c>)
 8005a9e:	4b15      	ldr	r3, [pc, #84]	; (8005af4 <_sbrk+0x60>)
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005aa8:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <_sbrk+0x64>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d102      	bne.n	8005ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ab0:	4b11      	ldr	r3, [pc, #68]	; (8005af8 <_sbrk+0x64>)
 8005ab2:	4a12      	ldr	r2, [pc, #72]	; (8005afc <_sbrk+0x68>)
 8005ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ab6:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <_sbrk+0x64>)
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4413      	add	r3, r2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d207      	bcs.n	8005ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ac4:	f00a ff42 	bl	801094c <__errno>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	220c      	movs	r2, #12
 8005acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ad2:	e009      	b.n	8005ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ad4:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <_sbrk+0x64>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005ada:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <_sbrk+0x64>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	4a05      	ldr	r2, [pc, #20]	; (8005af8 <_sbrk+0x64>)
 8005ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	20080000 	.word	0x20080000
 8005af4:	00000800 	.word	0x00000800
 8005af8:	200057c0 	.word	0x200057c0
 8005afc:	20009c68 	.word	0x20009c68

08005b00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b04:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <SystemInit+0x20>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0a:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <SystemInit+0x20>)
 8005b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	e000ed00 	.word	0xe000ed00

08005b24 <timer_get_context>:
#include <timer.h>
#include <interrupts.h>

static timer_context ctx = {0};

timer_context *timer_get_context() {
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
    return &ctx;
 8005b28:	4b02      	ldr	r3, [pc, #8]	; (8005b34 <timer_get_context+0x10>)
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	200057c4 	.word	0x200057c4

08005b38 <timer_init>:

void timer_init() {
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
    ctx.div = 0xAC00;
 8005b3c:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <timer_init+0x18>)
 8005b3e:	f44f 422c 	mov.w	r2, #44032	; 0xac00
 8005b42:	801a      	strh	r2, [r3, #0]
}
 8005b44:	bf00      	nop
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	200057c4 	.word	0x200057c4

08005b54 <timer_tick>:

void timer_tick() {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
    u16 prev_div = ctx.div;
 8005b5a:	4b45      	ldr	r3, [pc, #276]	; (8005c70 <timer_tick+0x11c>)
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	80bb      	strh	r3, [r7, #4]

    ctx.div++;
 8005b60:	4b43      	ldr	r3, [pc, #268]	; (8005c70 <timer_tick+0x11c>)
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	3301      	adds	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	4b41      	ldr	r3, [pc, #260]	; (8005c70 <timer_tick+0x11c>)
 8005b6a:	801a      	strh	r2, [r3, #0]

    bool timer_update = false;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	71fb      	strb	r3, [r7, #7]

    switch(ctx.tac & (0b11)) {
 8005b70:	4b3f      	ldr	r3, [pc, #252]	; (8005c70 <timer_tick+0x11c>)
 8005b72:	791b      	ldrb	r3, [r3, #4]
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d85b      	bhi.n	8005c34 <timer_tick+0xe0>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <timer_tick+0x30>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005b95 	.word	0x08005b95
 8005b88:	08005bbd 	.word	0x08005bbd
 8005b8c:	08005be5 	.word	0x08005be5
 8005b90:	08005c0d 	.word	0x08005c0d
        case 0b00:
            timer_update = (prev_div & (1 << 9)) && (!(ctx.div & (1 << 9)));
 8005b94:	88bb      	ldrh	r3, [r7, #4]
 8005b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <timer_tick+0x5a>
 8005b9e:	4b34      	ldr	r3, [pc, #208]	; (8005c70 <timer_tick+0x11c>)
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <timer_tick+0x5a>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <timer_tick+0x5c>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	71fb      	strb	r3, [r7, #7]
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	71fb      	strb	r3, [r7, #7]
            break;
 8005bba:	e03b      	b.n	8005c34 <timer_tick+0xe0>
        case 0b01:
            timer_update = (prev_div & (1 << 3)) && (!(ctx.div & (1 << 3)));
 8005bbc:	88bb      	ldrh	r3, [r7, #4]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <timer_tick+0x82>
 8005bc6:	4b2a      	ldr	r3, [pc, #168]	; (8005c70 <timer_tick+0x11c>)
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <timer_tick+0x82>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <timer_tick+0x84>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	71fb      	strb	r3, [r7, #7]
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	71fb      	strb	r3, [r7, #7]
            break;
 8005be2:	e027      	b.n	8005c34 <timer_tick+0xe0>
        case 0b10:
            timer_update = (prev_div & (1 << 5)) && (!(ctx.div & (1 << 5)));
 8005be4:	88bb      	ldrh	r3, [r7, #4]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <timer_tick+0xaa>
 8005bee:	4b20      	ldr	r3, [pc, #128]	; (8005c70 <timer_tick+0x11c>)
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <timer_tick+0xaa>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <timer_tick+0xac>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	71fb      	strb	r3, [r7, #7]
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	71fb      	strb	r3, [r7, #7]
            break;
 8005c0a:	e013      	b.n	8005c34 <timer_tick+0xe0>
        case 0b11:
            timer_update = (prev_div & (1 << 7)) && (!(ctx.div & (1 << 7)));
 8005c0c:	88bb      	ldrh	r3, [r7, #4]
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <timer_tick+0xd2>
 8005c16:	4b16      	ldr	r3, [pc, #88]	; (8005c70 <timer_tick+0x11c>)
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <timer_tick+0xd2>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <timer_tick+0xd4>
 8005c26:	2300      	movs	r3, #0
 8005c28:	71fb      	strb	r3, [r7, #7]
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	71fb      	strb	r3, [r7, #7]
            break;
 8005c32:	bf00      	nop
    }

    if (timer_update && ctx.tac & (1 << 2)) {
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d016      	beq.n	8005c68 <timer_tick+0x114>
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <timer_tick+0x11c>)
 8005c3c:	791b      	ldrb	r3, [r3, #4]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d010      	beq.n	8005c68 <timer_tick+0x114>
        ctx.tima++;
 8005c46:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <timer_tick+0x11c>)
 8005c48:	789b      	ldrb	r3, [r3, #2]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	4b08      	ldr	r3, [pc, #32]	; (8005c70 <timer_tick+0x11c>)
 8005c50:	709a      	strb	r2, [r3, #2]

        if (ctx.tima == 0xFF) {
 8005c52:	4b07      	ldr	r3, [pc, #28]	; (8005c70 <timer_tick+0x11c>)
 8005c54:	789b      	ldrb	r3, [r3, #2]
 8005c56:	2bff      	cmp	r3, #255	; 0xff
 8005c58:	d106      	bne.n	8005c68 <timer_tick+0x114>
            ctx.tima = ctx.tma;
 8005c5a:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <timer_tick+0x11c>)
 8005c5c:	78da      	ldrb	r2, [r3, #3]
 8005c5e:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <timer_tick+0x11c>)
 8005c60:	709a      	strb	r2, [r3, #2]

            cpu_request_interrupt(IT_TIMER);
 8005c62:	2004      	movs	r0, #4
 8005c64:	f7fb fa16 	bl	8001094 <cpu_request_interrupt>
        }
    }
}
 8005c68:	bf00      	nop
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	200057c4 	.word	0x200057c4

08005c74 <timer_write>:

void timer_write(u16 address, u8 value) {
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	460a      	mov	r2, r1
 8005c7e:	80fb      	strh	r3, [r7, #6]
 8005c80:	4613      	mov	r3, r2
 8005c82:	717b      	strb	r3, [r7, #5]
    switch(address) {
 8005c84:	88fa      	ldrh	r2, [r7, #6]
 8005c86:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <timer_write+0x5c>)
 8005c88:	4413      	add	r3, r2
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d81a      	bhi.n	8005cc4 <timer_write+0x50>
 8005c8e:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <timer_write+0x20>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005cad 	.word	0x08005cad
 8005c9c:	08005cb5 	.word	0x08005cb5
 8005ca0:	08005cbd 	.word	0x08005cbd
        case 0xFF04:
            //DIV
            ctx.div = 0;
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <timer_write+0x60>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	801a      	strh	r2, [r3, #0]
            break;
 8005caa:	e00b      	b.n	8005cc4 <timer_write+0x50>

        case 0xFF05:
            //TIMA
            ctx.tima = value;
 8005cac:	4a09      	ldr	r2, [pc, #36]	; (8005cd4 <timer_write+0x60>)
 8005cae:	797b      	ldrb	r3, [r7, #5]
 8005cb0:	7093      	strb	r3, [r2, #2]
            break;
 8005cb2:	e007      	b.n	8005cc4 <timer_write+0x50>

        case 0xFF06:
            //TMA
            ctx.tma = value;
 8005cb4:	4a07      	ldr	r2, [pc, #28]	; (8005cd4 <timer_write+0x60>)
 8005cb6:	797b      	ldrb	r3, [r7, #5]
 8005cb8:	70d3      	strb	r3, [r2, #3]
            break;
 8005cba:	e003      	b.n	8005cc4 <timer_write+0x50>

        case 0xFF07:
            //TAC
            ctx.tac = value;
 8005cbc:	4a05      	ldr	r2, [pc, #20]	; (8005cd4 <timer_write+0x60>)
 8005cbe:	797b      	ldrb	r3, [r7, #5]
 8005cc0:	7113      	strb	r3, [r2, #4]
            break;
 8005cc2:	bf00      	nop
    }
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	ffff00fc 	.word	0xffff00fc
 8005cd4:	200057c4 	.word	0x200057c4

08005cd8 <timer_read>:

u8 timer_read(u16 address) {
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	80fb      	strh	r3, [r7, #6]
    switch(address) {
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	4b12      	ldr	r3, [pc, #72]	; (8005d30 <timer_read+0x58>)
 8005ce6:	4413      	add	r3, r2
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d81a      	bhi.n	8005d22 <timer_read+0x4a>
 8005cec:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <timer_read+0x1c>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d05 	.word	0x08005d05
 8005cf8:	08005d11 	.word	0x08005d11
 8005cfc:	08005d17 	.word	0x08005d17
 8005d00:	08005d1d 	.word	0x08005d1d
        case 0xFF04:
            return ctx.div >> 8;
 8005d04:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <timer_read+0x5c>)
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	0a1b      	lsrs	r3, r3, #8
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	e009      	b.n	8005d24 <timer_read+0x4c>
        case 0xFF05:
            return ctx.tima;
 8005d10:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <timer_read+0x5c>)
 8005d12:	789b      	ldrb	r3, [r3, #2]
 8005d14:	e006      	b.n	8005d24 <timer_read+0x4c>
        case 0xFF06:
            return ctx.tma;
 8005d16:	4b07      	ldr	r3, [pc, #28]	; (8005d34 <timer_read+0x5c>)
 8005d18:	78db      	ldrb	r3, [r3, #3]
 8005d1a:	e003      	b.n	8005d24 <timer_read+0x4c>
        case 0xFF07:
            return ctx.tac;
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <timer_read+0x5c>)
 8005d1e:	791b      	ldrb	r3, [r3, #4]
 8005d20:	e000      	b.n	8005d24 <timer_read+0x4c>
    }
    return 0;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	ffff00fc 	.word	0xffff00fc
 8005d34:	200057c4 	.word	0x200057c4

08005d38 <ui_init>:
//SDL_Surface *debugScreen;

static int scale = 6;
//static int sde = 0;

void ui_init() {
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
//                                            (32 * 8 * scale) + (64 * scale));
//
//    int x, y;
//    SDL_GetWindowPosition(sdlWindow, &x, &y);
//    SDL_SetWindowPosition(sdlDebugWindow, x + SCREEN_WIDTH + 10, y);
}
 8005d3c:	bf00      	nop
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <get_ticks>:

void delay(u32 ms) {
    //SDL_Delay(ms);
}

u32 get_ticks() {
 8005d46:	b580      	push	{r7, lr}
 8005d48:	af00      	add	r7, sp, #0
    return HAL_GetTick();//SDL_GetTicks();
 8005d4a:	f000 f879 	bl	8005e40 <HAL_GetTick>
 8005d4e:	4603      	mov	r3, r0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <ui_update>:
//	SDL_RenderClear(sdlDebugRenderer);
//	SDL_RenderCopy(sdlDebugRenderer, sdlDebugTexture, NULL, NULL);
//	SDL_RenderPresent(sdlDebugRenderer);
}

void ui_update() {
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
//    SDL_Rect rc;
//    rc.x = rc.y = 0;
//    rc.w = rc.h = 2048;
//
    u32 *video_buffer = ppu_get_context()->video_buffer;
 8005d5a:	f7fe f989 	bl	8004070 <ppu_get_context>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	f242 1334 	movw	r3, #8500	; 0x2134
 8005d64:	4413      	add	r3, r2
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	607b      	str	r3, [r7, #4]

    for (int line_num = 0; line_num < YRES; line_num++) {
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e00c      	b.n	8005d8a <ui_update+0x36>
        for (int x = 0; x < XRES; x++) {
 8005d70:	2300      	movs	r3, #0
 8005d72:	60bb      	str	r3, [r7, #8]
 8005d74:	e002      	b.n	8005d7c <ui_update+0x28>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60bb      	str	r3, [r7, #8]
 8005d7c:	22a0      	movs	r2, #160	; 0xa0
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	4293      	cmp	r3, r2
 8005d82:	dbf8      	blt.n	8005d76 <ui_update+0x22>
    for (int line_num = 0; line_num < YRES; line_num++) {
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3301      	adds	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	2290      	movs	r2, #144	; 0x90
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	dbee      	blt.n	8005d70 <ui_update+0x1c>
//    SDL_RenderClear(sdlRenderer);
//    SDL_RenderCopy(sdlRenderer, sdlTexture, NULL, NULL);
//    SDL_RenderPresent(sdlRenderer);

//    update_dbg_window();
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <ui_handle_events>:
//        case SDLK_RIGHT: gamepad_get_state()->right = down; break;
//    }

}

void ui_handle_events() {
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
//
//        if (e.type == SDL_WINDOWEVENT && e.window.event == SDL_WINDOWEVENT_CLOSE) {
//            emu_get_context()->die = true;
//        }
//    }
}
 8005da0:	bf00      	nop
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005db0:	480d      	ldr	r0, [pc, #52]	; (8005de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005db2:	490e      	ldr	r1, [pc, #56]	; (8005dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005db4:	4a0e      	ldr	r2, [pc, #56]	; (8005df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005db8:	e002      	b.n	8005dc0 <LoopCopyDataInit>

08005dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dbe:	3304      	adds	r3, #4

08005dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005dc4:	d3f9      	bcc.n	8005dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005dc6:	4a0b      	ldr	r2, [pc, #44]	; (8005df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005dc8:	4c0b      	ldr	r4, [pc, #44]	; (8005df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dcc:	e001      	b.n	8005dd2 <LoopFillZerobss>

08005dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dd0:	3204      	adds	r2, #4

08005dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005dd4:	d3fb      	bcc.n	8005dce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005dd6:	f7ff fe93 	bl	8005b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005dda:	f00b fa99 	bl	8011310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005dde:	f7fd fbb7 	bl	8003550 <main>
  bx  lr    
 8005de2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005de4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8005de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005dec:	20000a40 	.word	0x20000a40
  ldr r2, =_sidata
 8005df0:	08012fe4 	.word	0x08012fe4
  ldr r2, =_sbss
 8005df4:	20000a40 	.word	0x20000a40
  ldr r4, =_ebss
 8005df8:	20009c64 	.word	0x20009c64

08005dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005dfc:	e7fe      	b.n	8005dfc <ADC_IRQHandler>

08005dfe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e02:	2003      	movs	r0, #3
 8005e04:	f000 f8f9 	bl	8005ffa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e08:	200f      	movs	r0, #15
 8005e0a:	f7ff fd33 	bl	8005874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e0e:	f7ff fb45 	bl	800549c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e1c:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <HAL_IncTick+0x20>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <HAL_IncTick+0x24>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4413      	add	r3, r2
 8005e28:	4a04      	ldr	r2, [pc, #16]	; (8005e3c <HAL_IncTick+0x24>)
 8005e2a:	6013      	str	r3, [r2, #0]
}
 8005e2c:	bf00      	nop
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	200009d4 	.word	0x200009d4
 8005e3c:	200097a4 	.word	0x200097a4

08005e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  return uwTick;
 8005e44:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <HAL_GetTick+0x14>)
 8005e46:	681b      	ldr	r3, [r3, #0]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	200097a4 	.word	0x200097a4

08005e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e60:	f7ff ffee 	bl	8005e40 <HAL_GetTick>
 8005e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e70:	d005      	beq.n	8005e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e72:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <HAL_Delay+0x44>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e7e:	bf00      	nop
 8005e80:	f7ff ffde 	bl	8005e40 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d8f7      	bhi.n	8005e80 <HAL_Delay+0x28>
  {
  }
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	200009d4 	.word	0x200009d4

08005ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005ec8:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ece:	4a04      	ldr	r2, [pc, #16]	; (8005ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	60d3      	str	r3, [r2, #12]
}
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	e000ed00 	.word	0xe000ed00
 8005ee4:	05fa0000 	.word	0x05fa0000

08005ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005eec:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <__NVIC_GetPriorityGrouping+0x18>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	0a1b      	lsrs	r3, r3, #8
 8005ef2:	f003 0307 	and.w	r3, r3, #7
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	e000ed00 	.word	0xe000ed00

08005f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	db0b      	blt.n	8005f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	f003 021f 	and.w	r2, r3, #31
 8005f1c:	4907      	ldr	r1, [pc, #28]	; (8005f3c <__NVIC_EnableIRQ+0x38>)
 8005f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	2001      	movs	r0, #1
 8005f26:	fa00 f202 	lsl.w	r2, r0, r2
 8005f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	e000e100 	.word	0xe000e100

08005f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	6039      	str	r1, [r7, #0]
 8005f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	db0a      	blt.n	8005f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	490c      	ldr	r1, [pc, #48]	; (8005f8c <__NVIC_SetPriority+0x4c>)
 8005f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5e:	0112      	lsls	r2, r2, #4
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	440b      	add	r3, r1
 8005f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f68:	e00a      	b.n	8005f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	4908      	ldr	r1, [pc, #32]	; (8005f90 <__NVIC_SetPriority+0x50>)
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	3b04      	subs	r3, #4
 8005f78:	0112      	lsls	r2, r2, #4
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	761a      	strb	r2, [r3, #24]
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	e000e100 	.word	0xe000e100
 8005f90:	e000ed00 	.word	0xe000ed00

08005f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b089      	sub	sp, #36	; 0x24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f1c3 0307 	rsb	r3, r3, #7
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	bf28      	it	cs
 8005fb2:	2304      	movcs	r3, #4
 8005fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	2b06      	cmp	r3, #6
 8005fbc:	d902      	bls.n	8005fc4 <NVIC_EncodePriority+0x30>
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	3b03      	subs	r3, #3
 8005fc2:	e000      	b.n	8005fc6 <NVIC_EncodePriority+0x32>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	43da      	mvns	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	401a      	ands	r2, r3
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe6:	43d9      	mvns	r1, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fec:	4313      	orrs	r3, r2
         );
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3724      	adds	r7, #36	; 0x24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff ff4c 	bl	8005ea0 <__NVIC_SetPriorityGrouping>
}
 8006008:	bf00      	nop
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006022:	f7ff ff61 	bl	8005ee8 <__NVIC_GetPriorityGrouping>
 8006026:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	6978      	ldr	r0, [r7, #20]
 800602e:	f7ff ffb1 	bl	8005f94 <NVIC_EncodePriority>
 8006032:	4602      	mov	r2, r0
 8006034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006038:	4611      	mov	r1, r2
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff ff80 	bl	8005f40 <__NVIC_SetPriority>
}
 8006040:	bf00      	nop
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	4603      	mov	r3, r0
 8006050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff ff54 	bl	8005f04 <__NVIC_EnableIRQ>
}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e054      	b.n	8006120 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	7f5b      	ldrb	r3, [r3, #29]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d105      	bne.n	800608c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fa30 	bl	80054ec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	791b      	ldrb	r3, [r3, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10c      	bne.n	80060b4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a22      	ldr	r2, [pc, #136]	; (8006128 <HAL_CRC_Init+0xc4>)
 80060a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0218 	bic.w	r2, r2, #24
 80060b0:	609a      	str	r2, [r3, #8]
 80060b2:	e00c      	b.n	80060ce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6899      	ldr	r1, [r3, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	461a      	mov	r2, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f834 	bl	800612c <HAL_CRCEx_Polynomial_Set>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e028      	b.n	8006120 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	795b      	ldrb	r3, [r3, #5]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d105      	bne.n	80060e2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060de:	611a      	str	r2, [r3, #16]
 80060e0:	e004      	b.n	80060ec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6912      	ldr	r2, [r2, #16]
 80060ea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699a      	ldr	r2, [r3, #24]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	04c11db7 	.word	0x04c11db7

0800612c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800613c:	231f      	movs	r3, #31
 800613e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006140:	bf00      	nop
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1e5a      	subs	r2, r3, #1
 8006146:	613a      	str	r2, [r7, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d009      	beq.n	8006160 <HAL_CRCEx_Polynomial_Set+0x34>
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f003 031f 	and.w	r3, r3, #31
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	fa22 f303 	lsr.w	r3, r2, r3
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0f0      	beq.n	8006142 <HAL_CRCEx_Polynomial_Set+0x16>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b18      	cmp	r3, #24
 8006164:	d846      	bhi.n	80061f4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006166:	a201      	add	r2, pc, #4	; (adr r2, 800616c <HAL_CRCEx_Polynomial_Set+0x40>)
 8006168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616c:	080061fb 	.word	0x080061fb
 8006170:	080061f5 	.word	0x080061f5
 8006174:	080061f5 	.word	0x080061f5
 8006178:	080061f5 	.word	0x080061f5
 800617c:	080061f5 	.word	0x080061f5
 8006180:	080061f5 	.word	0x080061f5
 8006184:	080061f5 	.word	0x080061f5
 8006188:	080061f5 	.word	0x080061f5
 800618c:	080061e9 	.word	0x080061e9
 8006190:	080061f5 	.word	0x080061f5
 8006194:	080061f5 	.word	0x080061f5
 8006198:	080061f5 	.word	0x080061f5
 800619c:	080061f5 	.word	0x080061f5
 80061a0:	080061f5 	.word	0x080061f5
 80061a4:	080061f5 	.word	0x080061f5
 80061a8:	080061f5 	.word	0x080061f5
 80061ac:	080061dd 	.word	0x080061dd
 80061b0:	080061f5 	.word	0x080061f5
 80061b4:	080061f5 	.word	0x080061f5
 80061b8:	080061f5 	.word	0x080061f5
 80061bc:	080061f5 	.word	0x080061f5
 80061c0:	080061f5 	.word	0x080061f5
 80061c4:	080061f5 	.word	0x080061f5
 80061c8:	080061f5 	.word	0x080061f5
 80061cc:	080061d1 	.word	0x080061d1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b06      	cmp	r3, #6
 80061d4:	d913      	bls.n	80061fe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80061da:	e010      	b.n	80061fe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b07      	cmp	r3, #7
 80061e0:	d90f      	bls.n	8006202 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80061e6:	e00c      	b.n	8006202 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	2b0f      	cmp	r3, #15
 80061ec:	d90b      	bls.n	8006206 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80061f2:	e008      	b.n	8006206 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	75fb      	strb	r3, [r7, #23]
      break;
 80061f8:	e006      	b.n	8006208 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80061fa:	bf00      	nop
 80061fc:	e004      	b.n	8006208 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80061fe:	bf00      	nop
 8006200:	e002      	b.n	8006208 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006202:	bf00      	nop
 8006204:	e000      	b.n	8006208 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006206:	bf00      	nop
  }
  if (status == HAL_OK)
 8006208:	7dfb      	ldrb	r3, [r7, #23]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10d      	bne.n	800622a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f023 0118 	bic.w	r1, r3, #24
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	430a      	orrs	r2, r1
 8006228:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800622a:	7dfb      	ldrb	r3, [r7, #23]
}
 800622c:	4618      	mov	r0, r3
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006244:	f7ff fdfc 	bl	8005e40 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e099      	b.n	8006388 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0201 	bic.w	r2, r2, #1
 8006272:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006274:	e00f      	b.n	8006296 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006276:	f7ff fde3 	bl	8005e40 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b05      	cmp	r3, #5
 8006282:	d908      	bls.n	8006296 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2203      	movs	r2, #3
 800628e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e078      	b.n	8006388 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e8      	bne.n	8006276 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4b38      	ldr	r3, [pc, #224]	; (8006390 <HAL_DMA_Init+0x158>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d107      	bne.n	8006300 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	4313      	orrs	r3, r2
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f023 0307 	bic.w	r3, r3, #7
 8006316:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	2b04      	cmp	r3, #4
 8006328:	d117      	bne.n	800635a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00e      	beq.n	800635a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 faa5 	bl	800688c <DMA_CheckFifoParam>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2240      	movs	r2, #64	; 0x40
 800634c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006356:	2301      	movs	r3, #1
 8006358:	e016      	b.n	8006388 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa5c 	bl	8006820 <DMA_CalcBaseAndBitshift>
 8006368:	4603      	mov	r3, r0
 800636a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006370:	223f      	movs	r2, #63	; 0x3f
 8006372:	409a      	lsls	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	e010803f 	.word	0xe010803f

08006394 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <HAL_DMA_Start_IT+0x26>
 80063b6:	2302      	movs	r3, #2
 80063b8:	e048      	b.n	800644c <HAL_DMA_Start_IT+0xb8>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d137      	bne.n	800643e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2202      	movs	r2, #2
 80063d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f9ee 	bl	80067c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ec:	223f      	movs	r2, #63	; 0x3f
 80063ee:	409a      	lsls	r2, r3
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0216 	orr.w	r2, r2, #22
 8006402:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695a      	ldr	r2, [r3, #20]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006412:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0208 	orr.w	r2, r2, #8
 800642a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	e005      	b.n	800644a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006446:	2302      	movs	r3, #2
 8006448:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d004      	beq.n	8006472 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2280      	movs	r2, #128	; 0x80
 800646c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e00c      	b.n	800648c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2205      	movs	r2, #5
 8006476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0201 	bic.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80064a4:	4b92      	ldr	r3, [pc, #584]	; (80066f0 <HAL_DMA_IRQHandler+0x258>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a92      	ldr	r2, [pc, #584]	; (80066f4 <HAL_DMA_IRQHandler+0x25c>)
 80064aa:	fba2 2303 	umull	r2, r3, r2, r3
 80064ae:	0a9b      	lsrs	r3, r3, #10
 80064b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c2:	2208      	movs	r2, #8
 80064c4:	409a      	lsls	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d01a      	beq.n	8006504 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d013      	beq.n	8006504 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0204 	bic.w	r2, r2, #4
 80064ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f0:	2208      	movs	r2, #8
 80064f2:	409a      	lsls	r2, r3
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fc:	f043 0201 	orr.w	r2, r3, #1
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006508:	2201      	movs	r2, #1
 800650a:	409a      	lsls	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4013      	ands	r3, r2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d012      	beq.n	800653a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006526:	2201      	movs	r2, #1
 8006528:	409a      	lsls	r2, r3
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006532:	f043 0202 	orr.w	r2, r3, #2
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653e:	2204      	movs	r2, #4
 8006540:	409a      	lsls	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4013      	ands	r3, r2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d012      	beq.n	8006570 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00b      	beq.n	8006570 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655c:	2204      	movs	r2, #4
 800655e:	409a      	lsls	r2, r3
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006568:	f043 0204 	orr.w	r2, r3, #4
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006574:	2210      	movs	r2, #16
 8006576:	409a      	lsls	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4013      	ands	r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d043      	beq.n	8006608 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d03c      	beq.n	8006608 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006592:	2210      	movs	r2, #16
 8006594:	409a      	lsls	r2, r3
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d018      	beq.n	80065da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d108      	bne.n	80065c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d024      	beq.n	8006608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
 80065c6:	e01f      	b.n	8006608 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01b      	beq.n	8006608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
 80065d8:	e016      	b.n	8006608 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d107      	bne.n	80065f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0208 	bic.w	r2, r2, #8
 80065f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800660c:	2220      	movs	r2, #32
 800660e:	409a      	lsls	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4013      	ands	r3, r2
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 808e 	beq.w	8006736 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 8086 	beq.w	8006736 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662e:	2220      	movs	r2, #32
 8006630:	409a      	lsls	r2, r3
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b05      	cmp	r3, #5
 8006640:	d136      	bne.n	80066b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0216 	bic.w	r2, r2, #22
 8006650:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695a      	ldr	r2, [r3, #20]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006660:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d103      	bne.n	8006672 <HAL_DMA_IRQHandler+0x1da>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666e:	2b00      	cmp	r3, #0
 8006670:	d007      	beq.n	8006682 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0208 	bic.w	r2, r2, #8
 8006680:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006686:	223f      	movs	r2, #63	; 0x3f
 8006688:	409a      	lsls	r2, r3
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d07d      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
        }
        return;
 80066ae:	e078      	b.n	80067a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d01c      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d108      	bne.n	80066de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d030      	beq.n	8006736 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	4798      	blx	r3
 80066dc:	e02b      	b.n	8006736 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d027      	beq.n	8006736 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
 80066ee:	e022      	b.n	8006736 <HAL_DMA_IRQHandler+0x29e>
 80066f0:	200009cc 	.word	0x200009cc
 80066f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10f      	bne.n	8006726 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0210 	bic.w	r2, r2, #16
 8006714:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673a:	2b00      	cmp	r3, #0
 800673c:	d032      	beq.n	80067a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d022      	beq.n	8006790 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2205      	movs	r2, #5
 800674e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0201 	bic.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	3301      	adds	r3, #1
 8006766:	60bb      	str	r3, [r7, #8]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	429a      	cmp	r2, r3
 800676c:	d307      	bcc.n	800677e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1f2      	bne.n	8006762 <HAL_DMA_IRQHandler+0x2ca>
 800677c:	e000      	b.n	8006780 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800677e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
 80067a0:	e000      	b.n	80067a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80067a2:	bf00      	nop
    }
  }
}
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop

080067ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b40      	cmp	r3, #64	; 0x40
 80067f0:	d108      	bne.n	8006804 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006802:	e007      	b.n	8006814 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	60da      	str	r2, [r3, #12]
}
 8006814:	bf00      	nop
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	3b10      	subs	r3, #16
 8006830:	4a13      	ldr	r2, [pc, #76]	; (8006880 <DMA_CalcBaseAndBitshift+0x60>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	091b      	lsrs	r3, r3, #4
 8006838:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800683a:	4a12      	ldr	r2, [pc, #72]	; (8006884 <DMA_CalcBaseAndBitshift+0x64>)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b03      	cmp	r3, #3
 800684c:	d908      	bls.n	8006860 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <DMA_CalcBaseAndBitshift+0x68>)
 8006856:	4013      	ands	r3, r2
 8006858:	1d1a      	adds	r2, r3, #4
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	659a      	str	r2, [r3, #88]	; 0x58
 800685e:	e006      	b.n	800686e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	461a      	mov	r2, r3
 8006866:	4b08      	ldr	r3, [pc, #32]	; (8006888 <DMA_CalcBaseAndBitshift+0x68>)
 8006868:	4013      	ands	r3, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	aaaaaaab 	.word	0xaaaaaaab
 8006884:	08012ea0 	.word	0x08012ea0
 8006888:	fffffc00 	.word	0xfffffc00

0800688c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d11f      	bne.n	80068e6 <DMA_CheckFifoParam+0x5a>
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d856      	bhi.n	800695a <DMA_CheckFifoParam+0xce>
 80068ac:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <DMA_CheckFifoParam+0x28>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	080068c5 	.word	0x080068c5
 80068b8:	080068d7 	.word	0x080068d7
 80068bc:	080068c5 	.word	0x080068c5
 80068c0:	0800695b 	.word	0x0800695b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d046      	beq.n	800695e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068d4:	e043      	b.n	800695e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068de:	d140      	bne.n	8006962 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068e4:	e03d      	b.n	8006962 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ee:	d121      	bne.n	8006934 <DMA_CheckFifoParam+0xa8>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d837      	bhi.n	8006966 <DMA_CheckFifoParam+0xda>
 80068f6:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <DMA_CheckFifoParam+0x70>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	0800690d 	.word	0x0800690d
 8006900:	08006913 	.word	0x08006913
 8006904:	0800690d 	.word	0x0800690d
 8006908:	08006925 	.word	0x08006925
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
      break;
 8006910:	e030      	b.n	8006974 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d025      	beq.n	800696a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006922:	e022      	b.n	800696a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800692c:	d11f      	bne.n	800696e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006932:	e01c      	b.n	800696e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b02      	cmp	r3, #2
 8006938:	d903      	bls.n	8006942 <DMA_CheckFifoParam+0xb6>
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b03      	cmp	r3, #3
 800693e:	d003      	beq.n	8006948 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006940:	e018      	b.n	8006974 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	73fb      	strb	r3, [r7, #15]
      break;
 8006946:	e015      	b.n	8006974 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00e      	beq.n	8006972 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	73fb      	strb	r3, [r7, #15]
      break;
 8006958:	e00b      	b.n	8006972 <DMA_CheckFifoParam+0xe6>
      break;
 800695a:	bf00      	nop
 800695c:	e00a      	b.n	8006974 <DMA_CheckFifoParam+0xe8>
      break;
 800695e:	bf00      	nop
 8006960:	e008      	b.n	8006974 <DMA_CheckFifoParam+0xe8>
      break;
 8006962:	bf00      	nop
 8006964:	e006      	b.n	8006974 <DMA_CheckFifoParam+0xe8>
      break;
 8006966:	bf00      	nop
 8006968:	e004      	b.n	8006974 <DMA_CheckFifoParam+0xe8>
      break;
 800696a:	bf00      	nop
 800696c:	e002      	b.n	8006974 <DMA_CheckFifoParam+0xe8>
      break;   
 800696e:	bf00      	nop
 8006970:	e000      	b.n	8006974 <DMA_CheckFifoParam+0xe8>
      break;
 8006972:	bf00      	nop
    }
  } 
  
  return status; 
 8006974:	7bfb      	ldrb	r3, [r7, #15]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop

08006984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006984:	b480      	push	{r7}
 8006986:	b089      	sub	sp, #36	; 0x24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800698e:	2300      	movs	r3, #0
 8006990:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006992:	2300      	movs	r3, #0
 8006994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800699a:	2300      	movs	r3, #0
 800699c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	e175      	b.n	8006c90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80069a4:	2201      	movs	r2, #1
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4013      	ands	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	429a      	cmp	r2, r3
 80069be:	f040 8164 	bne.w	8006c8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d005      	beq.n	80069da <HAL_GPIO_Init+0x56>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d130      	bne.n	8006a3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	2203      	movs	r2, #3
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	43db      	mvns	r3, r3
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	4013      	ands	r3, r2
 80069f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a10:	2201      	movs	r2, #1
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	091b      	lsrs	r3, r3, #4
 8006a26:	f003 0201 	and.w	r2, r3, #1
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f003 0303 	and.w	r3, r3, #3
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d017      	beq.n	8006a78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	2203      	movs	r2, #3
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d123      	bne.n	8006acc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	08da      	lsrs	r2, r3, #3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3208      	adds	r2, #8
 8006a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	220f      	movs	r2, #15
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f003 0307 	and.w	r3, r3, #7
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	08da      	lsrs	r2, r3, #3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3208      	adds	r2, #8
 8006ac6:	69b9      	ldr	r1, [r7, #24]
 8006ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	2203      	movs	r2, #3
 8006ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8006adc:	43db      	mvns	r3, r3
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f003 0203 	and.w	r2, r3, #3
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	fa02 f303 	lsl.w	r3, r2, r3
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 80be 	beq.w	8006c8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b0e:	4b66      	ldr	r3, [pc, #408]	; (8006ca8 <HAL_GPIO_Init+0x324>)
 8006b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b12:	4a65      	ldr	r2, [pc, #404]	; (8006ca8 <HAL_GPIO_Init+0x324>)
 8006b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b18:	6453      	str	r3, [r2, #68]	; 0x44
 8006b1a:	4b63      	ldr	r3, [pc, #396]	; (8006ca8 <HAL_GPIO_Init+0x324>)
 8006b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006b26:	4a61      	ldr	r2, [pc, #388]	; (8006cac <HAL_GPIO_Init+0x328>)
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	089b      	lsrs	r3, r3, #2
 8006b2c:	3302      	adds	r3, #2
 8006b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	f003 0303 	and.w	r3, r3, #3
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	220f      	movs	r2, #15
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	43db      	mvns	r3, r3
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	4013      	ands	r3, r2
 8006b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a58      	ldr	r2, [pc, #352]	; (8006cb0 <HAL_GPIO_Init+0x32c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d037      	beq.n	8006bc2 <HAL_GPIO_Init+0x23e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a57      	ldr	r2, [pc, #348]	; (8006cb4 <HAL_GPIO_Init+0x330>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d031      	beq.n	8006bbe <HAL_GPIO_Init+0x23a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a56      	ldr	r2, [pc, #344]	; (8006cb8 <HAL_GPIO_Init+0x334>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d02b      	beq.n	8006bba <HAL_GPIO_Init+0x236>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a55      	ldr	r2, [pc, #340]	; (8006cbc <HAL_GPIO_Init+0x338>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d025      	beq.n	8006bb6 <HAL_GPIO_Init+0x232>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a54      	ldr	r2, [pc, #336]	; (8006cc0 <HAL_GPIO_Init+0x33c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d01f      	beq.n	8006bb2 <HAL_GPIO_Init+0x22e>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a53      	ldr	r2, [pc, #332]	; (8006cc4 <HAL_GPIO_Init+0x340>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d019      	beq.n	8006bae <HAL_GPIO_Init+0x22a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a52      	ldr	r2, [pc, #328]	; (8006cc8 <HAL_GPIO_Init+0x344>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d013      	beq.n	8006baa <HAL_GPIO_Init+0x226>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a51      	ldr	r2, [pc, #324]	; (8006ccc <HAL_GPIO_Init+0x348>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00d      	beq.n	8006ba6 <HAL_GPIO_Init+0x222>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a50      	ldr	r2, [pc, #320]	; (8006cd0 <HAL_GPIO_Init+0x34c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d007      	beq.n	8006ba2 <HAL_GPIO_Init+0x21e>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a4f      	ldr	r2, [pc, #316]	; (8006cd4 <HAL_GPIO_Init+0x350>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d101      	bne.n	8006b9e <HAL_GPIO_Init+0x21a>
 8006b9a:	2309      	movs	r3, #9
 8006b9c:	e012      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006b9e:	230a      	movs	r3, #10
 8006ba0:	e010      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	e00e      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006ba6:	2307      	movs	r3, #7
 8006ba8:	e00c      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006baa:	2306      	movs	r3, #6
 8006bac:	e00a      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006bae:	2305      	movs	r3, #5
 8006bb0:	e008      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006bb2:	2304      	movs	r3, #4
 8006bb4:	e006      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e004      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e002      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	69fa      	ldr	r2, [r7, #28]
 8006bc6:	f002 0203 	and.w	r2, r2, #3
 8006bca:	0092      	lsls	r2, r2, #2
 8006bcc:	4093      	lsls	r3, r2
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006bd4:	4935      	ldr	r1, [pc, #212]	; (8006cac <HAL_GPIO_Init+0x328>)
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	089b      	lsrs	r3, r3, #2
 8006bda:	3302      	adds	r3, #2
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006be2:	4b3d      	ldr	r3, [pc, #244]	; (8006cd8 <HAL_GPIO_Init+0x354>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	43db      	mvns	r3, r3
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c06:	4a34      	ldr	r2, [pc, #208]	; (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c0c:	4b32      	ldr	r3, [pc, #200]	; (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	43db      	mvns	r3, r3
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c30:	4a29      	ldr	r2, [pc, #164]	; (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c36:	4b28      	ldr	r3, [pc, #160]	; (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	43db      	mvns	r3, r3
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	4013      	ands	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c5a:	4a1f      	ldr	r2, [pc, #124]	; (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c60:	4b1d      	ldr	r3, [pc, #116]	; (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c84:	4a14      	ldr	r2, [pc, #80]	; (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2b0f      	cmp	r3, #15
 8006c94:	f67f ae86 	bls.w	80069a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	3724      	adds	r7, #36	; 0x24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	40013800 	.word	0x40013800
 8006cb0:	40020000 	.word	0x40020000
 8006cb4:	40020400 	.word	0x40020400
 8006cb8:	40020800 	.word	0x40020800
 8006cbc:	40020c00 	.word	0x40020c00
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	40021400 	.word	0x40021400
 8006cc8:	40021800 	.word	0x40021800
 8006ccc:	40021c00 	.word	0x40021c00
 8006cd0:	40022000 	.word	0x40022000
 8006cd4:	40022400 	.word	0x40022400
 8006cd8:	40013c00 	.word	0x40013c00

08006cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691a      	ldr	r2, [r3, #16]
 8006cec:	887b      	ldrh	r3, [r7, #2]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	73fb      	strb	r3, [r7, #15]
 8006cf8:	e001      	b.n	8006cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d16:	4b23      	ldr	r3, [pc, #140]	; (8006da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	4a22      	ldr	r2, [pc, #136]	; (8006da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d20:	6413      	str	r3, [r2, #64]	; 0x40
 8006d22:	4b20      	ldr	r3, [pc, #128]	; (8006da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d2e:	4b1e      	ldr	r3, [pc, #120]	; (8006da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a1d      	ldr	r2, [pc, #116]	; (8006da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d3a:	f7ff f881 	bl	8005e40 <HAL_GetTick>
 8006d3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d40:	e009      	b.n	8006d56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d42:	f7ff f87d 	bl	8005e40 <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d50:	d901      	bls.n	8006d56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e022      	b.n	8006d9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d56:	4b14      	ldr	r3, [pc, #80]	; (8006da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d62:	d1ee      	bne.n	8006d42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d64:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a0f      	ldr	r2, [pc, #60]	; (8006da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d70:	f7ff f866 	bl	8005e40 <HAL_GetTick>
 8006d74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d76:	e009      	b.n	8006d8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d78:	f7ff f862 	bl	8005e40 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d86:	d901      	bls.n	8006d8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e007      	b.n	8006d9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d8c:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d98:	d1ee      	bne.n	8006d78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40023800 	.word	0x40023800
 8006da8:	40007000 	.word	0x40007000

08006dac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006db4:	2300      	movs	r3, #0
 8006db6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e29b      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 8087 	beq.w	8006ede <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006dd0:	4b96      	ldr	r3, [pc, #600]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 030c 	and.w	r3, r3, #12
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d00c      	beq.n	8006df6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ddc:	4b93      	ldr	r3, [pc, #588]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 030c 	and.w	r3, r3, #12
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d112      	bne.n	8006e0e <HAL_RCC_OscConfig+0x62>
 8006de8:	4b90      	ldr	r3, [pc, #576]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006df4:	d10b      	bne.n	8006e0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006df6:	4b8d      	ldr	r3, [pc, #564]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d06c      	beq.n	8006edc <HAL_RCC_OscConfig+0x130>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d168      	bne.n	8006edc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e275      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e16:	d106      	bne.n	8006e26 <HAL_RCC_OscConfig+0x7a>
 8006e18:	4b84      	ldr	r3, [pc, #528]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a83      	ldr	r2, [pc, #524]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	e02e      	b.n	8006e84 <HAL_RCC_OscConfig+0xd8>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10c      	bne.n	8006e48 <HAL_RCC_OscConfig+0x9c>
 8006e2e:	4b7f      	ldr	r3, [pc, #508]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a7e      	ldr	r2, [pc, #504]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	4b7c      	ldr	r3, [pc, #496]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a7b      	ldr	r2, [pc, #492]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	e01d      	b.n	8006e84 <HAL_RCC_OscConfig+0xd8>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e50:	d10c      	bne.n	8006e6c <HAL_RCC_OscConfig+0xc0>
 8006e52:	4b76      	ldr	r3, [pc, #472]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a75      	ldr	r2, [pc, #468]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	4b73      	ldr	r3, [pc, #460]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a72      	ldr	r2, [pc, #456]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	e00b      	b.n	8006e84 <HAL_RCC_OscConfig+0xd8>
 8006e6c:	4b6f      	ldr	r3, [pc, #444]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a6e      	ldr	r2, [pc, #440]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	4b6c      	ldr	r3, [pc, #432]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a6b      	ldr	r2, [pc, #428]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d013      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8c:	f7fe ffd8 	bl	8005e40 <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e94:	f7fe ffd4 	bl	8005e40 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b64      	cmp	r3, #100	; 0x64
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e229      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ea6:	4b61      	ldr	r3, [pc, #388]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0f0      	beq.n	8006e94 <HAL_RCC_OscConfig+0xe8>
 8006eb2:	e014      	b.n	8006ede <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb4:	f7fe ffc4 	bl	8005e40 <HAL_GetTick>
 8006eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eba:	e008      	b.n	8006ece <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ebc:	f7fe ffc0 	bl	8005e40 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b64      	cmp	r3, #100	; 0x64
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e215      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ece:	4b57      	ldr	r3, [pc, #348]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1f0      	bne.n	8006ebc <HAL_RCC_OscConfig+0x110>
 8006eda:	e000      	b.n	8006ede <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d069      	beq.n	8006fbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006eea:	4b50      	ldr	r3, [pc, #320]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 030c 	and.w	r3, r3, #12
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00b      	beq.n	8006f0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ef6:	4b4d      	ldr	r3, [pc, #308]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 030c 	and.w	r3, r3, #12
 8006efe:	2b08      	cmp	r3, #8
 8006f00:	d11c      	bne.n	8006f3c <HAL_RCC_OscConfig+0x190>
 8006f02:	4b4a      	ldr	r3, [pc, #296]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d116      	bne.n	8006f3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f0e:	4b47      	ldr	r3, [pc, #284]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d005      	beq.n	8006f26 <HAL_RCC_OscConfig+0x17a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d001      	beq.n	8006f26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e1e9      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f26:	4b41      	ldr	r3, [pc, #260]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	493d      	ldr	r1, [pc, #244]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f3a:	e040      	b.n	8006fbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d023      	beq.n	8006f8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f44:	4b39      	ldr	r3, [pc, #228]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a38      	ldr	r2, [pc, #224]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006f4a:	f043 0301 	orr.w	r3, r3, #1
 8006f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f50:	f7fe ff76 	bl	8005e40 <HAL_GetTick>
 8006f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f56:	e008      	b.n	8006f6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f58:	f7fe ff72 	bl	8005e40 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e1c7      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f6a:	4b30      	ldr	r3, [pc, #192]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0f0      	beq.n	8006f58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f76:	4b2d      	ldr	r3, [pc, #180]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	4929      	ldr	r1, [pc, #164]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	600b      	str	r3, [r1, #0]
 8006f8a:	e018      	b.n	8006fbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f8c:	4b27      	ldr	r3, [pc, #156]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a26      	ldr	r2, [pc, #152]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006f92:	f023 0301 	bic.w	r3, r3, #1
 8006f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f98:	f7fe ff52 	bl	8005e40 <HAL_GetTick>
 8006f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fa0:	f7fe ff4e 	bl	8005e40 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e1a3      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fb2:	4b1e      	ldr	r3, [pc, #120]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1f0      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0308 	and.w	r3, r3, #8
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d038      	beq.n	800703c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d019      	beq.n	8007006 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fd2:	4b16      	ldr	r3, [pc, #88]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fd6:	4a15      	ldr	r2, [pc, #84]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006fd8:	f043 0301 	orr.w	r3, r3, #1
 8006fdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fde:	f7fe ff2f 	bl	8005e40 <HAL_GetTick>
 8006fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fe4:	e008      	b.n	8006ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fe6:	f7fe ff2b 	bl	8005e40 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e180      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ff8:	4b0c      	ldr	r3, [pc, #48]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0f0      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x23a>
 8007004:	e01a      	b.n	800703c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007006:	4b09      	ldr	r3, [pc, #36]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8007008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800700a:	4a08      	ldr	r2, [pc, #32]	; (800702c <HAL_RCC_OscConfig+0x280>)
 800700c:	f023 0301 	bic.w	r3, r3, #1
 8007010:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007012:	f7fe ff15 	bl	8005e40 <HAL_GetTick>
 8007016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007018:	e00a      	b.n	8007030 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800701a:	f7fe ff11 	bl	8005e40 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d903      	bls.n	8007030 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e166      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
 800702c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007030:	4b92      	ldr	r3, [pc, #584]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 8007032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1ee      	bne.n	800701a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80a4 	beq.w	8007192 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800704a:	4b8c      	ldr	r3, [pc, #560]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10d      	bne.n	8007072 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007056:	4b89      	ldr	r3, [pc, #548]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	4a88      	ldr	r2, [pc, #544]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 800705c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007060:	6413      	str	r3, [r2, #64]	; 0x40
 8007062:	4b86      	ldr	r3, [pc, #536]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706a:	60bb      	str	r3, [r7, #8]
 800706c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800706e:	2301      	movs	r3, #1
 8007070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007072:	4b83      	ldr	r3, [pc, #524]	; (8007280 <HAL_RCC_OscConfig+0x4d4>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707a:	2b00      	cmp	r3, #0
 800707c:	d118      	bne.n	80070b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800707e:	4b80      	ldr	r3, [pc, #512]	; (8007280 <HAL_RCC_OscConfig+0x4d4>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a7f      	ldr	r2, [pc, #508]	; (8007280 <HAL_RCC_OscConfig+0x4d4>)
 8007084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800708a:	f7fe fed9 	bl	8005e40 <HAL_GetTick>
 800708e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007090:	e008      	b.n	80070a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007092:	f7fe fed5 	bl	8005e40 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b64      	cmp	r3, #100	; 0x64
 800709e:	d901      	bls.n	80070a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e12a      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070a4:	4b76      	ldr	r3, [pc, #472]	; (8007280 <HAL_RCC_OscConfig+0x4d4>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0f0      	beq.n	8007092 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d106      	bne.n	80070c6 <HAL_RCC_OscConfig+0x31a>
 80070b8:	4b70      	ldr	r3, [pc, #448]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 80070ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070bc:	4a6f      	ldr	r2, [pc, #444]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 80070be:	f043 0301 	orr.w	r3, r3, #1
 80070c2:	6713      	str	r3, [r2, #112]	; 0x70
 80070c4:	e02d      	b.n	8007122 <HAL_RCC_OscConfig+0x376>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10c      	bne.n	80070e8 <HAL_RCC_OscConfig+0x33c>
 80070ce:	4b6b      	ldr	r3, [pc, #428]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 80070d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d2:	4a6a      	ldr	r2, [pc, #424]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 80070d4:	f023 0301 	bic.w	r3, r3, #1
 80070d8:	6713      	str	r3, [r2, #112]	; 0x70
 80070da:	4b68      	ldr	r3, [pc, #416]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 80070dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070de:	4a67      	ldr	r2, [pc, #412]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 80070e0:	f023 0304 	bic.w	r3, r3, #4
 80070e4:	6713      	str	r3, [r2, #112]	; 0x70
 80070e6:	e01c      	b.n	8007122 <HAL_RCC_OscConfig+0x376>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	2b05      	cmp	r3, #5
 80070ee:	d10c      	bne.n	800710a <HAL_RCC_OscConfig+0x35e>
 80070f0:	4b62      	ldr	r3, [pc, #392]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 80070f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f4:	4a61      	ldr	r2, [pc, #388]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 80070f6:	f043 0304 	orr.w	r3, r3, #4
 80070fa:	6713      	str	r3, [r2, #112]	; 0x70
 80070fc:	4b5f      	ldr	r3, [pc, #380]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 80070fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007100:	4a5e      	ldr	r2, [pc, #376]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 8007102:	f043 0301 	orr.w	r3, r3, #1
 8007106:	6713      	str	r3, [r2, #112]	; 0x70
 8007108:	e00b      	b.n	8007122 <HAL_RCC_OscConfig+0x376>
 800710a:	4b5c      	ldr	r3, [pc, #368]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 800710c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710e:	4a5b      	ldr	r2, [pc, #364]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 8007110:	f023 0301 	bic.w	r3, r3, #1
 8007114:	6713      	str	r3, [r2, #112]	; 0x70
 8007116:	4b59      	ldr	r3, [pc, #356]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 8007118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711a:	4a58      	ldr	r2, [pc, #352]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 800711c:	f023 0304 	bic.w	r3, r3, #4
 8007120:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d015      	beq.n	8007156 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712a:	f7fe fe89 	bl	8005e40 <HAL_GetTick>
 800712e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007130:	e00a      	b.n	8007148 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007132:	f7fe fe85 	bl	8005e40 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007140:	4293      	cmp	r3, r2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e0d8      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007148:	4b4c      	ldr	r3, [pc, #304]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 800714a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0ee      	beq.n	8007132 <HAL_RCC_OscConfig+0x386>
 8007154:	e014      	b.n	8007180 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007156:	f7fe fe73 	bl	8005e40 <HAL_GetTick>
 800715a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800715c:	e00a      	b.n	8007174 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800715e:	f7fe fe6f 	bl	8005e40 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	f241 3288 	movw	r2, #5000	; 0x1388
 800716c:	4293      	cmp	r3, r2
 800716e:	d901      	bls.n	8007174 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e0c2      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007174:	4b41      	ldr	r3, [pc, #260]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 8007176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1ee      	bne.n	800715e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d105      	bne.n	8007192 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007186:	4b3d      	ldr	r3, [pc, #244]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	4a3c      	ldr	r2, [pc, #240]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 800718c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007190:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 80ae 	beq.w	80072f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800719c:	4b37      	ldr	r3, [pc, #220]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 030c 	and.w	r3, r3, #12
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d06d      	beq.n	8007284 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d14b      	bne.n	8007248 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071b0:	4b32      	ldr	r3, [pc, #200]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a31      	ldr	r2, [pc, #196]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 80071b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071bc:	f7fe fe40 	bl	8005e40 <HAL_GetTick>
 80071c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071c2:	e008      	b.n	80071d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c4:	f7fe fe3c 	bl	8005e40 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e091      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071d6:	4b29      	ldr	r3, [pc, #164]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1f0      	bne.n	80071c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69da      	ldr	r2, [r3, #28]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	019b      	lsls	r3, r3, #6
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	085b      	lsrs	r3, r3, #1
 80071fa:	3b01      	subs	r3, #1
 80071fc:	041b      	lsls	r3, r3, #16
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	061b      	lsls	r3, r3, #24
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720c:	071b      	lsls	r3, r3, #28
 800720e:	491b      	ldr	r1, [pc, #108]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 8007210:	4313      	orrs	r3, r2
 8007212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007214:	4b19      	ldr	r3, [pc, #100]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a18      	ldr	r2, [pc, #96]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 800721a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800721e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007220:	f7fe fe0e 	bl	8005e40 <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007228:	f7fe fe0a 	bl	8005e40 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e05f      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800723a:	4b10      	ldr	r3, [pc, #64]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0f0      	beq.n	8007228 <HAL_RCC_OscConfig+0x47c>
 8007246:	e057      	b.n	80072f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007248:	4b0c      	ldr	r3, [pc, #48]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a0b      	ldr	r2, [pc, #44]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 800724e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007254:	f7fe fdf4 	bl	8005e40 <HAL_GetTick>
 8007258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800725c:	f7fe fdf0 	bl	8005e40 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e045      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800726e:	4b03      	ldr	r3, [pc, #12]	; (800727c <HAL_RCC_OscConfig+0x4d0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f0      	bne.n	800725c <HAL_RCC_OscConfig+0x4b0>
 800727a:	e03d      	b.n	80072f8 <HAL_RCC_OscConfig+0x54c>
 800727c:	40023800 	.word	0x40023800
 8007280:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007284:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <HAL_RCC_OscConfig+0x558>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d030      	beq.n	80072f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800729c:	429a      	cmp	r2, r3
 800729e:	d129      	bne.n	80072f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d122      	bne.n	80072f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072b4:	4013      	ands	r3, r2
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072bc:	4293      	cmp	r3, r2
 80072be:	d119      	bne.n	80072f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ca:	085b      	lsrs	r3, r3, #1
 80072cc:	3b01      	subs	r3, #1
 80072ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d10f      	bne.n	80072f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d107      	bne.n	80072f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d001      	beq.n	80072f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	40023800 	.word	0x40023800

08007308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e0d0      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007320:	4b6a      	ldr	r3, [pc, #424]	; (80074cc <HAL_RCC_ClockConfig+0x1c4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 030f 	and.w	r3, r3, #15
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	d910      	bls.n	8007350 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800732e:	4b67      	ldr	r3, [pc, #412]	; (80074cc <HAL_RCC_ClockConfig+0x1c4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f023 020f 	bic.w	r2, r3, #15
 8007336:	4965      	ldr	r1, [pc, #404]	; (80074cc <HAL_RCC_ClockConfig+0x1c4>)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	4313      	orrs	r3, r2
 800733c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800733e:	4b63      	ldr	r3, [pc, #396]	; (80074cc <HAL_RCC_ClockConfig+0x1c4>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d001      	beq.n	8007350 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e0b8      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d020      	beq.n	800739e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0304 	and.w	r3, r3, #4
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007368:	4b59      	ldr	r3, [pc, #356]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	4a58      	ldr	r2, [pc, #352]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 800736e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007372:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0308 	and.w	r3, r3, #8
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007380:	4b53      	ldr	r3, [pc, #332]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	4a52      	ldr	r2, [pc, #328]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800738a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800738c:	4b50      	ldr	r3, [pc, #320]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	494d      	ldr	r1, [pc, #308]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 800739a:	4313      	orrs	r3, r2
 800739c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d040      	beq.n	800742c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d107      	bne.n	80073c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073b2:	4b47      	ldr	r3, [pc, #284]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d115      	bne.n	80073ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e07f      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d107      	bne.n	80073da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ca:	4b41      	ldr	r3, [pc, #260]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e073      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073da:	4b3d      	ldr	r3, [pc, #244]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e06b      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073ea:	4b39      	ldr	r3, [pc, #228]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f023 0203 	bic.w	r2, r3, #3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	4936      	ldr	r1, [pc, #216]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073fc:	f7fe fd20 	bl	8005e40 <HAL_GetTick>
 8007400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007402:	e00a      	b.n	800741a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007404:	f7fe fd1c 	bl	8005e40 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007412:	4293      	cmp	r3, r2
 8007414:	d901      	bls.n	800741a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e053      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800741a:	4b2d      	ldr	r3, [pc, #180]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f003 020c 	and.w	r2, r3, #12
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	429a      	cmp	r2, r3
 800742a:	d1eb      	bne.n	8007404 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800742c:	4b27      	ldr	r3, [pc, #156]	; (80074cc <HAL_RCC_ClockConfig+0x1c4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d210      	bcs.n	800745c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800743a:	4b24      	ldr	r3, [pc, #144]	; (80074cc <HAL_RCC_ClockConfig+0x1c4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f023 020f 	bic.w	r2, r3, #15
 8007442:	4922      	ldr	r1, [pc, #136]	; (80074cc <HAL_RCC_ClockConfig+0x1c4>)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	4313      	orrs	r3, r2
 8007448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800744a:	4b20      	ldr	r3, [pc, #128]	; (80074cc <HAL_RCC_ClockConfig+0x1c4>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d001      	beq.n	800745c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e032      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d008      	beq.n	800747a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007468:	4b19      	ldr	r3, [pc, #100]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	4916      	ldr	r1, [pc, #88]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007476:	4313      	orrs	r3, r2
 8007478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b00      	cmp	r3, #0
 8007484:	d009      	beq.n	800749a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007486:	4b12      	ldr	r3, [pc, #72]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	490e      	ldr	r1, [pc, #56]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007496:	4313      	orrs	r3, r2
 8007498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800749a:	f000 f885 	bl	80075a8 <HAL_RCC_GetSysClockFreq>
 800749e:	4602      	mov	r2, r0
 80074a0:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	091b      	lsrs	r3, r3, #4
 80074a6:	f003 030f 	and.w	r3, r3, #15
 80074aa:	490a      	ldr	r1, [pc, #40]	; (80074d4 <HAL_RCC_ClockConfig+0x1cc>)
 80074ac:	5ccb      	ldrb	r3, [r1, r3]
 80074ae:	fa22 f303 	lsr.w	r3, r2, r3
 80074b2:	4a09      	ldr	r2, [pc, #36]	; (80074d8 <HAL_RCC_ClockConfig+0x1d0>)
 80074b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <HAL_RCC_ClockConfig+0x1d4>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe f9da 	bl	8005874 <HAL_InitTick>

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	40023c00 	.word	0x40023c00
 80074d0:	40023800 	.word	0x40023800
 80074d4:	08012e88 	.word	0x08012e88
 80074d8:	200009cc 	.word	0x200009cc
 80074dc:	200009d0 	.word	0x200009d0

080074e0 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08c      	sub	sp, #48	; 0x30
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d127      	bne.n	8007542 <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80074f2:	4b2a      	ldr	r3, [pc, #168]	; (800759c <HAL_RCC_MCOConfig+0xbc>)
 80074f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f6:	4a29      	ldr	r2, [pc, #164]	; (800759c <HAL_RCC_MCOConfig+0xbc>)
 80074f8:	f043 0301 	orr.w	r3, r3, #1
 80074fc:	6313      	str	r3, [r2, #48]	; 0x30
 80074fe:	4b27      	ldr	r3, [pc, #156]	; (800759c <HAL_RCC_MCOConfig+0xbc>)
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	61bb      	str	r3, [r7, #24]
 8007508:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800750a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800750e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007510:	2302      	movs	r3, #2
 8007512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8007514:	2303      	movs	r3, #3
 8007516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007518:	2300      	movs	r3, #0
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800751c:	2300      	movs	r3, #0
 800751e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007520:	f107 031c 	add.w	r3, r7, #28
 8007524:	4619      	mov	r1, r3
 8007526:	481e      	ldr	r0, [pc, #120]	; (80075a0 <HAL_RCC_MCOConfig+0xc0>)
 8007528:	f7ff fa2c 	bl	8006984 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800752c:	4b1b      	ldr	r3, [pc, #108]	; (800759c <HAL_RCC_MCOConfig+0xbc>)
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8007534:	68b9      	ldr	r1, [r7, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	430b      	orrs	r3, r1
 800753a:	4918      	ldr	r1, [pc, #96]	; (800759c <HAL_RCC_MCOConfig+0xbc>)
 800753c:	4313      	orrs	r3, r2
 800753e:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8007540:	e027      	b.n	8007592 <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8007542:	4b16      	ldr	r3, [pc, #88]	; (800759c <HAL_RCC_MCOConfig+0xbc>)
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	4a15      	ldr	r2, [pc, #84]	; (800759c <HAL_RCC_MCOConfig+0xbc>)
 8007548:	f043 0304 	orr.w	r3, r3, #4
 800754c:	6313      	str	r3, [r2, #48]	; 0x30
 800754e:	4b13      	ldr	r3, [pc, #76]	; (800759c <HAL_RCC_MCOConfig+0xbc>)
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800755a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800755e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007560:	2302      	movs	r3, #2
 8007562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8007564:	2303      	movs	r3, #3
 8007566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007568:	2300      	movs	r3, #0
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800756c:	2300      	movs	r3, #0
 800756e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007570:	f107 031c 	add.w	r3, r7, #28
 8007574:	4619      	mov	r1, r3
 8007576:	480b      	ldr	r0, [pc, #44]	; (80075a4 <HAL_RCC_MCOConfig+0xc4>)
 8007578:	f7ff fa04 	bl	8006984 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800757c:	4b07      	ldr	r3, [pc, #28]	; (800759c <HAL_RCC_MCOConfig+0xbc>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	00d9      	lsls	r1, r3, #3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	430b      	orrs	r3, r1
 800758c:	4903      	ldr	r1, [pc, #12]	; (800759c <HAL_RCC_MCOConfig+0xbc>)
 800758e:	4313      	orrs	r3, r2
 8007590:	608b      	str	r3, [r1, #8]
}
 8007592:	bf00      	nop
 8007594:	3730      	adds	r7, #48	; 0x30
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	40023800 	.word	0x40023800
 80075a0:	40020000 	.word	0x40020000
 80075a4:	40020800 	.word	0x40020800

080075a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075a8:	b5b0      	push	{r4, r5, r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80075ae:	2100      	movs	r1, #0
 80075b0:	6079      	str	r1, [r7, #4]
 80075b2:	2100      	movs	r1, #0
 80075b4:	60f9      	str	r1, [r7, #12]
 80075b6:	2100      	movs	r1, #0
 80075b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80075ba:	2100      	movs	r1, #0
 80075bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075be:	4952      	ldr	r1, [pc, #328]	; (8007708 <HAL_RCC_GetSysClockFreq+0x160>)
 80075c0:	6889      	ldr	r1, [r1, #8]
 80075c2:	f001 010c 	and.w	r1, r1, #12
 80075c6:	2908      	cmp	r1, #8
 80075c8:	d00d      	beq.n	80075e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80075ca:	2908      	cmp	r1, #8
 80075cc:	f200 8094 	bhi.w	80076f8 <HAL_RCC_GetSysClockFreq+0x150>
 80075d0:	2900      	cmp	r1, #0
 80075d2:	d002      	beq.n	80075da <HAL_RCC_GetSysClockFreq+0x32>
 80075d4:	2904      	cmp	r1, #4
 80075d6:	d003      	beq.n	80075e0 <HAL_RCC_GetSysClockFreq+0x38>
 80075d8:	e08e      	b.n	80076f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075da:	4b4c      	ldr	r3, [pc, #304]	; (800770c <HAL_RCC_GetSysClockFreq+0x164>)
 80075dc:	60bb      	str	r3, [r7, #8]
      break;
 80075de:	e08e      	b.n	80076fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075e0:	4b4b      	ldr	r3, [pc, #300]	; (8007710 <HAL_RCC_GetSysClockFreq+0x168>)
 80075e2:	60bb      	str	r3, [r7, #8]
      break;
 80075e4:	e08b      	b.n	80076fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075e6:	4948      	ldr	r1, [pc, #288]	; (8007708 <HAL_RCC_GetSysClockFreq+0x160>)
 80075e8:	6849      	ldr	r1, [r1, #4]
 80075ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80075ee:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80075f0:	4945      	ldr	r1, [pc, #276]	; (8007708 <HAL_RCC_GetSysClockFreq+0x160>)
 80075f2:	6849      	ldr	r1, [r1, #4]
 80075f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80075f8:	2900      	cmp	r1, #0
 80075fa:	d024      	beq.n	8007646 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075fc:	4942      	ldr	r1, [pc, #264]	; (8007708 <HAL_RCC_GetSysClockFreq+0x160>)
 80075fe:	6849      	ldr	r1, [r1, #4]
 8007600:	0989      	lsrs	r1, r1, #6
 8007602:	4608      	mov	r0, r1
 8007604:	f04f 0100 	mov.w	r1, #0
 8007608:	f240 14ff 	movw	r4, #511	; 0x1ff
 800760c:	f04f 0500 	mov.w	r5, #0
 8007610:	ea00 0204 	and.w	r2, r0, r4
 8007614:	ea01 0305 	and.w	r3, r1, r5
 8007618:	493d      	ldr	r1, [pc, #244]	; (8007710 <HAL_RCC_GetSysClockFreq+0x168>)
 800761a:	fb01 f003 	mul.w	r0, r1, r3
 800761e:	2100      	movs	r1, #0
 8007620:	fb01 f102 	mul.w	r1, r1, r2
 8007624:	1844      	adds	r4, r0, r1
 8007626:	493a      	ldr	r1, [pc, #232]	; (8007710 <HAL_RCC_GetSysClockFreq+0x168>)
 8007628:	fba2 0101 	umull	r0, r1, r2, r1
 800762c:	1863      	adds	r3, r4, r1
 800762e:	4619      	mov	r1, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	461a      	mov	r2, r3
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	f7f8 fe52 	bl	80002e0 <__aeabi_uldivmod>
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	4613      	mov	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	e04a      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007646:	4b30      	ldr	r3, [pc, #192]	; (8007708 <HAL_RCC_GetSysClockFreq+0x160>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	099b      	lsrs	r3, r3, #6
 800764c:	461a      	mov	r2, r3
 800764e:	f04f 0300 	mov.w	r3, #0
 8007652:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007656:	f04f 0100 	mov.w	r1, #0
 800765a:	ea02 0400 	and.w	r4, r2, r0
 800765e:	ea03 0501 	and.w	r5, r3, r1
 8007662:	4620      	mov	r0, r4
 8007664:	4629      	mov	r1, r5
 8007666:	f04f 0200 	mov.w	r2, #0
 800766a:	f04f 0300 	mov.w	r3, #0
 800766e:	014b      	lsls	r3, r1, #5
 8007670:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007674:	0142      	lsls	r2, r0, #5
 8007676:	4610      	mov	r0, r2
 8007678:	4619      	mov	r1, r3
 800767a:	1b00      	subs	r0, r0, r4
 800767c:	eb61 0105 	sbc.w	r1, r1, r5
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	018b      	lsls	r3, r1, #6
 800768a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800768e:	0182      	lsls	r2, r0, #6
 8007690:	1a12      	subs	r2, r2, r0
 8007692:	eb63 0301 	sbc.w	r3, r3, r1
 8007696:	f04f 0000 	mov.w	r0, #0
 800769a:	f04f 0100 	mov.w	r1, #0
 800769e:	00d9      	lsls	r1, r3, #3
 80076a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076a4:	00d0      	lsls	r0, r2, #3
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	1912      	adds	r2, r2, r4
 80076ac:	eb45 0303 	adc.w	r3, r5, r3
 80076b0:	f04f 0000 	mov.w	r0, #0
 80076b4:	f04f 0100 	mov.w	r1, #0
 80076b8:	0299      	lsls	r1, r3, #10
 80076ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80076be:	0290      	lsls	r0, r2, #10
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4610      	mov	r0, r2
 80076c6:	4619      	mov	r1, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	461a      	mov	r2, r3
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	f7f8 fe06 	bl	80002e0 <__aeabi_uldivmod>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4613      	mov	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80076dc:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <HAL_RCC_GetSysClockFreq+0x160>)
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	0c1b      	lsrs	r3, r3, #16
 80076e2:	f003 0303 	and.w	r3, r3, #3
 80076e6:	3301      	adds	r3, #1
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f4:	60bb      	str	r3, [r7, #8]
      break;
 80076f6:	e002      	b.n	80076fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076f8:	4b04      	ldr	r3, [pc, #16]	; (800770c <HAL_RCC_GetSysClockFreq+0x164>)
 80076fa:	60bb      	str	r3, [r7, #8]
      break;
 80076fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076fe:	68bb      	ldr	r3, [r7, #8]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bdb0      	pop	{r4, r5, r7, pc}
 8007708:	40023800 	.word	0x40023800
 800770c:	00f42400 	.word	0x00f42400
 8007710:	017d7840 	.word	0x017d7840

08007714 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007714:	b480      	push	{r7}
 8007716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007718:	4b03      	ldr	r3, [pc, #12]	; (8007728 <HAL_RCC_GetHCLKFreq+0x14>)
 800771a:	681b      	ldr	r3, [r3, #0]
}
 800771c:	4618      	mov	r0, r3
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	200009cc 	.word	0x200009cc

0800772c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007730:	f7ff fff0 	bl	8007714 <HAL_RCC_GetHCLKFreq>
 8007734:	4602      	mov	r2, r0
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	0a9b      	lsrs	r3, r3, #10
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	4903      	ldr	r1, [pc, #12]	; (8007750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007742:	5ccb      	ldrb	r3, [r1, r3]
 8007744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007748:	4618      	mov	r0, r3
 800774a:	bd80      	pop	{r7, pc}
 800774c:	40023800 	.word	0x40023800
 8007750:	08012e98 	.word	0x08012e98

08007754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007758:	f7ff ffdc 	bl	8007714 <HAL_RCC_GetHCLKFreq>
 800775c:	4602      	mov	r2, r0
 800775e:	4b05      	ldr	r3, [pc, #20]	; (8007774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	0b5b      	lsrs	r3, r3, #13
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	4903      	ldr	r1, [pc, #12]	; (8007778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800776a:	5ccb      	ldrb	r3, [r1, r3]
 800776c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007770:	4618      	mov	r0, r3
 8007772:	bd80      	pop	{r7, pc}
 8007774:	40023800 	.word	0x40023800
 8007778:	08012e98 	.word	0x08012e98

0800777c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	220f      	movs	r2, #15
 800778a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800778c:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <HAL_RCC_GetClockConfig+0x5c>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f003 0203 	and.w	r2, r3, #3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007798:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <HAL_RCC_GetClockConfig+0x5c>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80077a4:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <HAL_RCC_GetClockConfig+0x5c>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80077b0:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <HAL_RCC_GetClockConfig+0x5c>)
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	08db      	lsrs	r3, r3, #3
 80077b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80077be:	4b07      	ldr	r3, [pc, #28]	; (80077dc <HAL_RCC_GetClockConfig+0x60>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 020f 	and.w	r2, r3, #15
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	601a      	str	r2, [r3, #0]
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40023800 	.word	0x40023800
 80077dc:	40023c00 	.word	0x40023c00

080077e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80077ec:	2300      	movs	r3, #0
 80077ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d012      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007808:	4b69      	ldr	r3, [pc, #420]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	4a68      	ldr	r2, [pc, #416]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800780e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007812:	6093      	str	r3, [r2, #8]
 8007814:	4b66      	ldr	r3, [pc, #408]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781c:	4964      	ldr	r1, [pc, #400]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800781e:	4313      	orrs	r3, r2
 8007820:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800782a:	2301      	movs	r3, #1
 800782c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d017      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800783a:	4b5d      	ldr	r3, [pc, #372]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800783c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007840:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007848:	4959      	ldr	r1, [pc, #356]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800784a:	4313      	orrs	r3, r2
 800784c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007858:	d101      	bne.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800785a:	2301      	movs	r3, #1
 800785c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007866:	2301      	movs	r3, #1
 8007868:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d017      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007876:	4b4e      	ldr	r3, [pc, #312]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800787c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	494a      	ldr	r1, [pc, #296]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007886:	4313      	orrs	r3, r2
 8007888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007894:	d101      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007896:	2301      	movs	r3, #1
 8007898:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80078a2:	2301      	movs	r3, #1
 80078a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80078b2:	2301      	movs	r3, #1
 80078b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0320 	and.w	r3, r3, #32
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 808b 	beq.w	80079da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80078c4:	4b3a      	ldr	r3, [pc, #232]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	4a39      	ldr	r2, [pc, #228]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ce:	6413      	str	r3, [r2, #64]	; 0x40
 80078d0:	4b37      	ldr	r3, [pc, #220]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d8:	60bb      	str	r3, [r7, #8]
 80078da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80078dc:	4b35      	ldr	r3, [pc, #212]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a34      	ldr	r2, [pc, #208]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e8:	f7fe faaa 	bl	8005e40 <HAL_GetTick>
 80078ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80078ee:	e008      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078f0:	f7fe faa6 	bl	8005e40 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b64      	cmp	r3, #100	; 0x64
 80078fc:	d901      	bls.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e38f      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007902:	4b2c      	ldr	r3, [pc, #176]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0f0      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800790e:	4b28      	ldr	r3, [pc, #160]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007916:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d035      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	429a      	cmp	r2, r3
 800792a:	d02e      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800792c:	4b20      	ldr	r3, [pc, #128]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800792e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007934:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007936:	4b1e      	ldr	r3, [pc, #120]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793a:	4a1d      	ldr	r2, [pc, #116]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800793c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007940:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007942:	4b1b      	ldr	r3, [pc, #108]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007946:	4a1a      	ldr	r2, [pc, #104]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800794c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800794e:	4a18      	ldr	r2, [pc, #96]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007954:	4b16      	ldr	r3, [pc, #88]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b01      	cmp	r3, #1
 800795e:	d114      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007960:	f7fe fa6e 	bl	8005e40 <HAL_GetTick>
 8007964:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007966:	e00a      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007968:	f7fe fa6a 	bl	8005e40 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	f241 3288 	movw	r2, #5000	; 0x1388
 8007976:	4293      	cmp	r3, r2
 8007978:	d901      	bls.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e351      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800797e:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d0ee      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007996:	d111      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007998:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079a4:	4b04      	ldr	r3, [pc, #16]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079a6:	400b      	ands	r3, r1
 80079a8:	4901      	ldr	r1, [pc, #4]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	608b      	str	r3, [r1, #8]
 80079ae:	e00b      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80079b0:	40023800 	.word	0x40023800
 80079b4:	40007000 	.word	0x40007000
 80079b8:	0ffffcff 	.word	0x0ffffcff
 80079bc:	4bb3      	ldr	r3, [pc, #716]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	4ab2      	ldr	r2, [pc, #712]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80079c6:	6093      	str	r3, [r2, #8]
 80079c8:	4bb0      	ldr	r3, [pc, #704]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079d4:	49ad      	ldr	r1, [pc, #692]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0310 	and.w	r3, r3, #16
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d010      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079e6:	4ba9      	ldr	r3, [pc, #676]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079ec:	4aa7      	ldr	r2, [pc, #668]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80079f6:	4ba5      	ldr	r3, [pc, #660]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	49a2      	ldr	r1, [pc, #648]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00a      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a14:	4b9d      	ldr	r3, [pc, #628]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a22:	499a      	ldr	r1, [pc, #616]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a36:	4b95      	ldr	r3, [pc, #596]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a44:	4991      	ldr	r1, [pc, #580]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00a      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a58:	4b8c      	ldr	r3, [pc, #560]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a66:	4989      	ldr	r1, [pc, #548]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a7a:	4b84      	ldr	r3, [pc, #528]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a88:	4980      	ldr	r1, [pc, #512]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00a      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a9c:	4b7b      	ldr	r3, [pc, #492]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa2:	f023 0203 	bic.w	r2, r3, #3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aaa:	4978      	ldr	r1, [pc, #480]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007abe:	4b73      	ldr	r3, [pc, #460]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac4:	f023 020c 	bic.w	r2, r3, #12
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007acc:	496f      	ldr	r1, [pc, #444]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ae0:	4b6a      	ldr	r3, [pc, #424]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aee:	4967      	ldr	r1, [pc, #412]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b02:	4b62      	ldr	r3, [pc, #392]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b10:	495e      	ldr	r1, [pc, #376]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b24:	4b59      	ldr	r3, [pc, #356]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b32:	4956      	ldr	r1, [pc, #344]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b46:	4b51      	ldr	r3, [pc, #324]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b54:	494d      	ldr	r1, [pc, #308]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007b68:	4b48      	ldr	r3, [pc, #288]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b76:	4945      	ldr	r1, [pc, #276]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007b8a:	4b40      	ldr	r3, [pc, #256]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b98:	493c      	ldr	r1, [pc, #240]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bac:	4b37      	ldr	r3, [pc, #220]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bba:	4934      	ldr	r1, [pc, #208]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d011      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007bce:	4b2f      	ldr	r3, [pc, #188]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bdc:	492b      	ldr	r1, [pc, #172]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007be8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bec:	d101      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0308 	and.w	r3, r3, #8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c0e:	4b1f      	ldr	r3, [pc, #124]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c1c:	491b      	ldr	r1, [pc, #108]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c30:	4b16      	ldr	r3, [pc, #88]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c40:	4912      	ldr	r1, [pc, #72]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007c54:	4b0d      	ldr	r3, [pc, #52]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c64:	4909      	ldr	r1, [pc, #36]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00f      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c78:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c88:	e002      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007c8a:	bf00      	nop
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	4986      	ldr	r1, [pc, #536]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00b      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007ca4:	4b81      	ldr	r3, [pc, #516]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007caa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb4:	497d      	ldr	r1, [pc, #500]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d006      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 80d6 	beq.w	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007cd0:	4b76      	ldr	r3, [pc, #472]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a75      	ldr	r2, [pc, #468]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cdc:	f7fe f8b0 	bl	8005e40 <HAL_GetTick>
 8007ce0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ce2:	e008      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ce4:	f7fe f8ac 	bl	8005e40 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	2b64      	cmp	r3, #100	; 0x64
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e195      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cf6:	4b6d      	ldr	r3, [pc, #436]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1f0      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d021      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d11d      	bne.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d16:	4b65      	ldr	r3, [pc, #404]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d1c:	0c1b      	lsrs	r3, r3, #16
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d24:	4b61      	ldr	r3, [pc, #388]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d2a:	0e1b      	lsrs	r3, r3, #24
 8007d2c:	f003 030f 	and.w	r3, r3, #15
 8007d30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	019a      	lsls	r2, r3, #6
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	041b      	lsls	r3, r3, #16
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	061b      	lsls	r3, r3, #24
 8007d42:	431a      	orrs	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	071b      	lsls	r3, r3, #28
 8007d4a:	4958      	ldr	r1, [pc, #352]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d004      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d66:	d00a      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d02e      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d7c:	d129      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d7e:	4b4b      	ldr	r3, [pc, #300]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d84:	0c1b      	lsrs	r3, r3, #16
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d8c:	4b47      	ldr	r3, [pc, #284]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d92:	0f1b      	lsrs	r3, r3, #28
 8007d94:	f003 0307 	and.w	r3, r3, #7
 8007d98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	019a      	lsls	r2, r3, #6
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	041b      	lsls	r3, r3, #16
 8007da4:	431a      	orrs	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	061b      	lsls	r3, r3, #24
 8007dac:	431a      	orrs	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	071b      	lsls	r3, r3, #28
 8007db2:	493e      	ldr	r1, [pc, #248]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007dba:	4b3c      	ldr	r3, [pc, #240]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dc0:	f023 021f 	bic.w	r2, r3, #31
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	4938      	ldr	r1, [pc, #224]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01d      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007dde:	4b33      	ldr	r3, [pc, #204]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007de4:	0e1b      	lsrs	r3, r3, #24
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007dec:	4b2f      	ldr	r3, [pc, #188]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007df2:	0f1b      	lsrs	r3, r3, #28
 8007df4:	f003 0307 	and.w	r3, r3, #7
 8007df8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	019a      	lsls	r2, r3, #6
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	041b      	lsls	r3, r3, #16
 8007e06:	431a      	orrs	r2, r3
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	061b      	lsls	r3, r3, #24
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	071b      	lsls	r3, r3, #28
 8007e12:	4926      	ldr	r1, [pc, #152]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d011      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	019a      	lsls	r2, r3, #6
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	041b      	lsls	r3, r3, #16
 8007e32:	431a      	orrs	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	061b      	lsls	r3, r3, #24
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	071b      	lsls	r3, r3, #28
 8007e42:	491a      	ldr	r1, [pc, #104]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e4a:	4b18      	ldr	r3, [pc, #96]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a17      	ldr	r2, [pc, #92]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e56:	f7fd fff3 	bl	8005e40 <HAL_GetTick>
 8007e5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e5c:	e008      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e5e:	f7fd ffef 	bl	8005e40 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b64      	cmp	r3, #100	; 0x64
 8007e6a:	d901      	bls.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e0d8      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e70:	4b0e      	ldr	r3, [pc, #56]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d0f0      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	f040 80ce 	bne.w	8008020 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e84:	4b09      	ldr	r3, [pc, #36]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a08      	ldr	r2, [pc, #32]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e90:	f7fd ffd6 	bl	8005e40 <HAL_GetTick>
 8007e94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e96:	e00b      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e98:	f7fd ffd2 	bl	8005e40 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b64      	cmp	r3, #100	; 0x64
 8007ea4:	d904      	bls.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e0bb      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007eaa:	bf00      	nop
 8007eac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007eb0:	4b5e      	ldr	r3, [pc, #376]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ebc:	d0ec      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d02e      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d12a      	bne.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ee6:	4b51      	ldr	r3, [pc, #324]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eec:	0c1b      	lsrs	r3, r3, #16
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ef4:	4b4d      	ldr	r3, [pc, #308]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efa:	0f1b      	lsrs	r3, r3, #28
 8007efc:	f003 0307 	and.w	r3, r3, #7
 8007f00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	019a      	lsls	r2, r3, #6
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	041b      	lsls	r3, r3, #16
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	061b      	lsls	r3, r3, #24
 8007f14:	431a      	orrs	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	071b      	lsls	r3, r3, #28
 8007f1a:	4944      	ldr	r1, [pc, #272]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f22:	4b42      	ldr	r3, [pc, #264]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f30:	3b01      	subs	r3, #1
 8007f32:	021b      	lsls	r3, r3, #8
 8007f34:	493d      	ldr	r1, [pc, #244]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d022      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f50:	d11d      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f52:	4b36      	ldr	r3, [pc, #216]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f58:	0e1b      	lsrs	r3, r3, #24
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f60:	4b32      	ldr	r3, [pc, #200]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f66:	0f1b      	lsrs	r3, r3, #28
 8007f68:	f003 0307 	and.w	r3, r3, #7
 8007f6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	019a      	lsls	r2, r3, #6
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	041b      	lsls	r3, r3, #16
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	061b      	lsls	r3, r3, #24
 8007f80:	431a      	orrs	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	071b      	lsls	r3, r3, #28
 8007f86:	4929      	ldr	r1, [pc, #164]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0308 	and.w	r3, r3, #8
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d028      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f9a:	4b24      	ldr	r3, [pc, #144]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa0:	0e1b      	lsrs	r3, r3, #24
 8007fa2:	f003 030f 	and.w	r3, r3, #15
 8007fa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007fa8:	4b20      	ldr	r3, [pc, #128]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fae:	0c1b      	lsrs	r3, r3, #16
 8007fb0:	f003 0303 	and.w	r3, r3, #3
 8007fb4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	019a      	lsls	r2, r3, #6
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	041b      	lsls	r3, r3, #16
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	061b      	lsls	r3, r3, #24
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	071b      	lsls	r3, r3, #28
 8007fce:	4917      	ldr	r1, [pc, #92]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007fd6:	4b15      	ldr	r3, [pc, #84]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	4911      	ldr	r1, [pc, #68]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007fec:	4b0f      	ldr	r3, [pc, #60]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a0e      	ldr	r2, [pc, #56]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ff8:	f7fd ff22 	bl	8005e40 <HAL_GetTick>
 8007ffc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ffe:	e008      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008000:	f7fd ff1e 	bl	8005e40 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b64      	cmp	r3, #100	; 0x64
 800800c:	d901      	bls.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e007      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008012:	4b06      	ldr	r3, [pc, #24]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800801a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800801e:	d1ef      	bne.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3720      	adds	r7, #32
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	40023800 	.word	0x40023800

08008030 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e022      	b.n	8008088 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d105      	bne.n	800805a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fd fa69 	bl	800552c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2203      	movs	r2, #3
 800805e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f814 	bl	8008090 <HAL_SD_InitCard>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e00a      	b.n	8008088 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008090:	b5b0      	push	{r4, r5, r7, lr}
 8008092:	b08e      	sub	sp, #56	; 0x38
 8008094:	af04      	add	r7, sp, #16
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008098:	2300      	movs	r3, #0
 800809a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800809c:	2300      	movs	r3, #0
 800809e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80080a0:	2300      	movs	r3, #0
 80080a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80080a4:	2300      	movs	r3, #0
 80080a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80080a8:	2300      	movs	r3, #0
 80080aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80080ac:	2376      	movs	r3, #118	; 0x76
 80080ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681d      	ldr	r5, [r3, #0]
 80080b4:	466c      	mov	r4, sp
 80080b6:	f107 0314 	add.w	r3, r7, #20
 80080ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80080be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80080c2:	f107 0308 	add.w	r3, r7, #8
 80080c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080c8:	4628      	mov	r0, r5
 80080ca:	f002 faad 	bl	800a628 <SDMMC_Init>
 80080ce:	4603      	mov	r3, r0
 80080d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80080d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e059      	b.n	8008194 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080ee:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f002 fae1 	bl	800a6bc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008108:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800810a:	2002      	movs	r0, #2
 800810c:	f7fd fea4 	bl	8005e58 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fff1 	bl	80090f8 <SD_PowerON>
 8008116:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008118:	6a3b      	ldr	r3, [r7, #32]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00b      	beq.n	8008136 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	431a      	orrs	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e02e      	b.n	8008194 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 ff12 	bl	8008f60 <SD_InitCard>
 800813c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00b      	beq.n	800815c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	431a      	orrs	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e01b      	b.n	8008194 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008164:	4618      	mov	r0, r3
 8008166:	f002 fb3b 	bl	800a7e0 <SDMMC_CmdBlockLength>
 800816a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00f      	beq.n	8008192 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a09      	ldr	r2, [pc, #36]	; (800819c <HAL_SD_InitCard+0x10c>)
 8008178:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	431a      	orrs	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e000      	b.n	8008194 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3728      	adds	r7, #40	; 0x28
 8008198:	46bd      	mov	sp, r7
 800819a:	bdb0      	pop	{r4, r5, r7, pc}
 800819c:	004005ff 	.word	0x004005ff

080081a0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08c      	sub	sp, #48	; 0x30
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d107      	bne.n	80081c8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e0c3      	b.n	8008350 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	f040 80bc 	bne.w	800834e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	441a      	add	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d907      	bls.n	80081fa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e0aa      	b.n	8008350 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2203      	movs	r2, #3
 80081fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2200      	movs	r2, #0
 8008208:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008218:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	4a4e      	ldr	r2, [pc, #312]	; (8008358 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	4a4d      	ldr	r2, [pc, #308]	; (800835c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008228:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	2200      	movs	r2, #0
 8008230:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008236:	2200      	movs	r2, #0
 8008238:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3380      	adds	r3, #128	; 0x80
 8008260:	4619      	mov	r1, r3
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	025b      	lsls	r3, r3, #9
 8008268:	089b      	lsrs	r3, r3, #2
 800826a:	f7fe f893 	bl	8006394 <HAL_DMA_Start_IT>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d017      	beq.n	80082a4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008282:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a35      	ldr	r2, [pc, #212]	; (8008360 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800828a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e055      	b.n	8008350 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0208 	orr.w	r2, r2, #8
 80082b2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d002      	beq.n	80082c2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	025b      	lsls	r3, r3, #9
 80082c0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80082c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082c6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	025b      	lsls	r3, r3, #9
 80082cc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80082ce:	2390      	movs	r3, #144	; 0x90
 80082d0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80082d2:	2302      	movs	r3, #2
 80082d4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80082da:	2301      	movs	r3, #1
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f107 0210 	add.w	r2, r7, #16
 80082e6:	4611      	mov	r1, r2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f002 fa4d 	bl	800a788 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d90a      	bls.n	800830a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2282      	movs	r2, #130	; 0x82
 80082f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008300:	4618      	mov	r0, r3
 8008302:	f002 fab1 	bl	800a868 <SDMMC_CmdReadMultiBlock>
 8008306:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008308:	e009      	b.n	800831e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2281      	movs	r2, #129	; 0x81
 800830e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008316:	4618      	mov	r0, r3
 8008318:	f002 fa84 	bl	800a824 <SDMMC_CmdReadSingleBlock>
 800831c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800831e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008320:	2b00      	cmp	r3, #0
 8008322:	d012      	beq.n	800834a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a0d      	ldr	r2, [pc, #52]	; (8008360 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800832a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008332:	431a      	orrs	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e002      	b.n	8008350 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	e000      	b.n	8008350 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800834e:	2302      	movs	r3, #2
  }
}
 8008350:	4618      	mov	r0, r3
 8008352:	3730      	adds	r7, #48	; 0x30
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	08008d6f 	.word	0x08008d6f
 800835c:	08008de1 	.word	0x08008de1
 8008360:	004005ff 	.word	0x004005ff

08008364 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08c      	sub	sp, #48	; 0x30
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d107      	bne.n	800838c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e0c6      	b.n	800851a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b01      	cmp	r3, #1
 8008396:	f040 80bf 	bne.w	8008518 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80083a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	441a      	add	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d907      	bls.n	80083be <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e0ad      	b.n	800851a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2203      	movs	r2, #3
 80083c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2200      	movs	r2, #0
 80083cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f042 021a 	orr.w	r2, r2, #26
 80083dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e2:	4a50      	ldr	r2, [pc, #320]	; (8008524 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80083e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ea:	4a4f      	ldr	r2, [pc, #316]	; (8008528 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80083ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f2:	2200      	movs	r2, #0
 80083f4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d002      	beq.n	8008404 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	025b      	lsls	r3, r3, #9
 8008402:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d90a      	bls.n	8008420 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	22a0      	movs	r2, #160	; 0xa0
 800840e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008416:	4618      	mov	r0, r3
 8008418:	f002 fa6a 	bl	800a8f0 <SDMMC_CmdWriteMultiBlock>
 800841c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800841e:	e009      	b.n	8008434 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2290      	movs	r2, #144	; 0x90
 8008424:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800842c:	4618      	mov	r0, r3
 800842e:	f002 fa3d 	bl	800a8ac <SDMMC_CmdWriteSingleBlock>
 8008432:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d012      	beq.n	8008460 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a3b      	ldr	r2, [pc, #236]	; (800852c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008440:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008448:	431a      	orrs	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e05c      	b.n	800851a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0208 	orr.w	r2, r2, #8
 800846e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008474:	2240      	movs	r2, #64	; 0x40
 8008476:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008498:	68b9      	ldr	r1, [r7, #8]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3380      	adds	r3, #128	; 0x80
 80084a0:	461a      	mov	r2, r3
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	025b      	lsls	r3, r3, #9
 80084a6:	089b      	lsrs	r3, r3, #2
 80084a8:	f7fd ff74 	bl	8006394 <HAL_DMA_Start_IT>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01a      	beq.n	80084e8 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 021a 	bic.w	r2, r2, #26
 80084c0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a19      	ldr	r2, [pc, #100]	; (800852c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80084c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e018      	b.n	800851a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80084e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084ec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	025b      	lsls	r3, r3, #9
 80084f2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80084f4:	2390      	movs	r3, #144	; 0x90
 80084f6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80084f8:	2300      	movs	r3, #0
 80084fa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008500:	2301      	movs	r3, #1
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f107 0210 	add.w	r2, r7, #16
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f002 f93a 	bl	800a788 <SDMMC_ConfigData>

      return HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	e000      	b.n	800851a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008518:	2302      	movs	r3, #2
  }
}
 800851a:	4618      	mov	r0, r3
 800851c:	3730      	adds	r7, #48	; 0x30
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	08008d45 	.word	0x08008d45
 8008528:	08008de1 	.word	0x08008de1
 800852c:	004005ff 	.word	0x004005ff

08008530 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d008      	beq.n	800855e <HAL_SD_IRQHandler+0x2e>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f003 0308 	and.w	r3, r3, #8
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 ffed 	bl	8009536 <SD_Read_IT>
 800855c:	e153      	b.n	8008806 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 808d 	beq.w	8008688 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008576:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	4ba3      	ldr	r3, [pc, #652]	; (8008810 <HAL_SD_IRQHandler+0x2e0>)
 8008584:	400b      	ands	r3, r1
 8008586:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f022 0201 	bic.w	r2, r2, #1
 8008596:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f003 0308 	and.w	r3, r3, #8
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d039      	beq.n	8008616 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f003 0302 	and.w	r3, r3, #2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d104      	bne.n	80085b6 <HAL_SD_IRQHandler+0x86>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d011      	beq.n	80085da <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f002 f9ba 	bl	800a934 <SDMMC_CmdStopTransfer>
 80085c0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d008      	beq.n	80085da <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	431a      	orrs	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f921 	bl	800881c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f240 523a 	movw	r2, #1338	; 0x53a
 80085e2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d104      	bne.n	8008606 <HAL_SD_IRQHandler+0xd6>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f002 fe2a 	bl	800b260 <HAL_SD_RxCpltCallback>
 800860c:	e0fb      	b.n	8008806 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f002 fe1c 	bl	800b24c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008614:	e0f7      	b.n	8008806 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 80f2 	beq.w	8008806 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f003 0320 	and.w	r3, r3, #32
 8008628:	2b00      	cmp	r3, #0
 800862a:	d011      	beq.n	8008650 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4618      	mov	r0, r3
 8008632:	f002 f97f 	bl	800a934 <SDMMC_CmdStopTransfer>
 8008636:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d008      	beq.n	8008650 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	431a      	orrs	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f8e6 	bl	800881c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b00      	cmp	r3, #0
 8008658:	f040 80d5 	bne.w	8008806 <HAL_SD_IRQHandler+0x2d6>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	f040 80cf 	bne.w	8008806 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 0208 	bic.w	r2, r2, #8
 8008676:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f002 fde3 	bl	800b24c <HAL_SD_TxCpltCallback>
}
 8008686:	e0be      	b.n	8008806 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d008      	beq.n	80086a8 <HAL_SD_IRQHandler+0x178>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b00      	cmp	r3, #0
 800869e:	d003      	beq.n	80086a8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 ff99 	bl	80095d8 <SD_Write_IT>
 80086a6:	e0ae      	b.n	8008806 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ae:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 80a7 	beq.w	8008806 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086be:	f003 0302 	and.w	r3, r3, #2
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d005      	beq.n	80086d2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	f043 0202 	orr.w	r2, r3, #2
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d8:	f003 0308 	and.w	r3, r3, #8
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d005      	beq.n	80086ec <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e4:	f043 0208 	orr.w	r2, r3, #8
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d005      	beq.n	8008706 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fe:	f043 0220 	orr.w	r2, r3, #32
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870c:	f003 0310 	and.w	r3, r3, #16
 8008710:	2b00      	cmp	r3, #0
 8008712:	d005      	beq.n	8008720 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008718:	f043 0210 	orr.w	r2, r3, #16
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f240 523a 	movw	r2, #1338	; 0x53a
 8008728:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008738:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4618      	mov	r0, r3
 8008740:	f002 f8f8 	bl	800a934 <SDMMC_CmdStopTransfer>
 8008744:	4602      	mov	r2, r0
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874a:	431a      	orrs	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f003 0308 	and.w	r3, r3, #8
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f857 	bl	800881c <HAL_SD_ErrorCallback>
}
 800876e:	e04a      	b.n	8008806 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008776:	2b00      	cmp	r3, #0
 8008778:	d045      	beq.n	8008806 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f003 0310 	and.w	r3, r3, #16
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <HAL_SD_IRQHandler+0x25e>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f003 0320 	and.w	r3, r3, #32
 800878a:	2b00      	cmp	r3, #0
 800878c:	d011      	beq.n	80087b2 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008792:	4a20      	ldr	r2, [pc, #128]	; (8008814 <HAL_SD_IRQHandler+0x2e4>)
 8008794:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879a:	4618      	mov	r0, r3
 800879c:	f7fd fe5a 	bl	8006454 <HAL_DMA_Abort_IT>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d02f      	beq.n	8008806 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fb6a 	bl	8008e84 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80087b0:	e029      	b.n	8008806 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <HAL_SD_IRQHandler+0x296>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d011      	beq.n	80087ea <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	4a13      	ldr	r2, [pc, #76]	; (8008818 <HAL_SD_IRQHandler+0x2e8>)
 80087cc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fd fe3e 	bl	8006454 <HAL_DMA_Abort_IT>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d013      	beq.n	8008806 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 fb85 	bl	8008ef2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80087e8:	e00d      	b.n	8008806 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f002 fd1a 	bl	800b238 <HAL_SD_AbortCallback>
}
 8008804:	e7ff      	b.n	8008806 <HAL_SD_IRQHandler+0x2d6>
 8008806:	bf00      	nop
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	ffff3ec5 	.word	0xffff3ec5
 8008814:	08008e85 	.word	0x08008e85
 8008818:	08008ef3 	.word	0x08008ef3

0800881c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800883e:	0f9b      	lsrs	r3, r3, #30
 8008840:	b2da      	uxtb	r2, r3
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800884a:	0e9b      	lsrs	r3, r3, #26
 800884c:	b2db      	uxtb	r3, r3
 800884e:	f003 030f 	and.w	r3, r3, #15
 8008852:	b2da      	uxtb	r2, r3
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800885c:	0e1b      	lsrs	r3, r3, #24
 800885e:	b2db      	uxtb	r3, r3
 8008860:	f003 0303 	and.w	r3, r3, #3
 8008864:	b2da      	uxtb	r2, r3
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	b2da      	uxtb	r2, r3
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800887a:	0a1b      	lsrs	r3, r3, #8
 800887c:	b2da      	uxtb	r2, r3
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008886:	b2da      	uxtb	r2, r3
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008890:	0d1b      	lsrs	r3, r3, #20
 8008892:	b29a      	uxth	r2, r3
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800889c:	0c1b      	lsrs	r3, r3, #16
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088ae:	0bdb      	lsrs	r3, r3, #15
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088c0:	0b9b      	lsrs	r3, r3, #14
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088d2:	0b5b      	lsrs	r3, r3, #13
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088e4:	0b1b      	lsrs	r3, r3, #12
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2200      	movs	r2, #0
 80088f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d163      	bne.n	80089c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008904:	009a      	lsls	r2, r3, #2
 8008906:	f640 73fc 	movw	r3, #4092	; 0xffc
 800890a:	4013      	ands	r3, r2
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008910:	0f92      	lsrs	r2, r2, #30
 8008912:	431a      	orrs	r2, r3
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800891c:	0edb      	lsrs	r3, r3, #27
 800891e:	b2db      	uxtb	r3, r3
 8008920:	f003 0307 	and.w	r3, r3, #7
 8008924:	b2da      	uxtb	r2, r3
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800892e:	0e1b      	lsrs	r3, r3, #24
 8008930:	b2db      	uxtb	r3, r3
 8008932:	f003 0307 	and.w	r3, r3, #7
 8008936:	b2da      	uxtb	r2, r3
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008940:	0d5b      	lsrs	r3, r3, #21
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	b2da      	uxtb	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008952:	0c9b      	lsrs	r3, r3, #18
 8008954:	b2db      	uxtb	r3, r3
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	b2da      	uxtb	r2, r3
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008964:	0bdb      	lsrs	r3, r3, #15
 8008966:	b2db      	uxtb	r3, r3
 8008968:	f003 0307 	and.w	r3, r3, #7
 800896c:	b2da      	uxtb	r2, r3
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	7e1b      	ldrb	r3, [r3, #24]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	3302      	adds	r3, #2
 8008988:	2201      	movs	r2, #1
 800898a:	fa02 f303 	lsl.w	r3, r2, r3
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008992:	fb02 f203 	mul.w	r2, r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	7a1b      	ldrb	r3, [r3, #8]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	f003 030f 	and.w	r3, r3, #15
 80089a4:	2201      	movs	r2, #1
 80089a6:	409a      	lsls	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80089b4:	0a52      	lsrs	r2, r2, #9
 80089b6:	fb02 f203 	mul.w	r2, r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089c4:	661a      	str	r2, [r3, #96]	; 0x60
 80089c6:	e031      	b.n	8008a2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d11d      	bne.n	8008a0c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089d4:	041b      	lsls	r3, r3, #16
 80089d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089de:	0c1b      	lsrs	r3, r3, #16
 80089e0:	431a      	orrs	r2, r3
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	3301      	adds	r3, #1
 80089ec:	029a      	lsls	r2, r3, #10
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a00:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	661a      	str	r2, [r3, #96]	; 0x60
 8008a0a:	e00f      	b.n	8008a2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a58      	ldr	r2, [pc, #352]	; (8008b74 <HAL_SD_GetCardCSD+0x344>)
 8008a12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e09d      	b.n	8008b68 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a30:	0b9b      	lsrs	r3, r3, #14
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a42:	09db      	lsrs	r3, r3, #7
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a64:	0fdb      	lsrs	r3, r3, #31
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a70:	0f5b      	lsrs	r3, r3, #29
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	f003 0303 	and.w	r3, r3, #3
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a82:	0e9b      	lsrs	r3, r3, #26
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a94:	0d9b      	lsrs	r3, r3, #22
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	f003 030f 	and.w	r3, r3, #15
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa6:	0d5b      	lsrs	r3, r3, #21
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac2:	0c1b      	lsrs	r3, r3, #16
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad6:	0bdb      	lsrs	r3, r3, #15
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aea:	0b9b      	lsrs	r3, r3, #14
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008afe:	0b5b      	lsrs	r3, r3, #13
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b12:	0b1b      	lsrs	r3, r3, #12
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b26:	0a9b      	lsrs	r3, r3, #10
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	f003 0303 	and.w	r3, r3, #3
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3a:	0a1b      	lsrs	r3, r3, #8
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	f003 0303 	and.w	r3, r3, #3
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4e:	085b      	lsrs	r3, r3, #1
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	004005ff 	.word	0x004005ff

08008b78 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008bd0:	b5b0      	push	{r4, r5, r7, lr}
 8008bd2:	b08e      	sub	sp, #56	; 0x38
 8008bd4:	af04      	add	r7, sp, #16
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2203      	movs	r2, #3
 8008be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d02e      	beq.n	8008c4e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf6:	d106      	bne.n	8008c06 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	639a      	str	r2, [r3, #56]	; 0x38
 8008c04:	e029      	b.n	8008c5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c0c:	d10a      	bne.n	8008c24 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fb28 	bl	8009264 <SD_WideBus_Enable>
 8008c14:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	639a      	str	r2, [r3, #56]	; 0x38
 8008c22:	e01a      	b.n	8008c5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10a      	bne.n	8008c40 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fb65 	bl	80092fa <SD_WideBus_Disable>
 8008c30:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	431a      	orrs	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	639a      	str	r2, [r3, #56]	; 0x38
 8008c3e:	e00c      	b.n	8008c5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	639a      	str	r2, [r3, #56]	; 0x38
 8008c4c:	e005      	b.n	8008c5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c52:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a26      	ldr	r2, [pc, #152]	; (8008d00 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008c68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c78:	e01f      	b.n	8008cba <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681d      	ldr	r5, [r3, #0]
 8008ca0:	466c      	mov	r4, sp
 8008ca2:	f107 0314 	add.w	r3, r7, #20
 8008ca6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008caa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008cae:	f107 0308 	add.w	r3, r7, #8
 8008cb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f001 fcb7 	bl	800a628 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f001 fd8c 	bl	800a7e0 <SDMMC_CmdBlockLength>
 8008cc8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00c      	beq.n	8008cea <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a0a      	ldr	r2, [pc, #40]	; (8008d00 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008cd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	431a      	orrs	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3728      	adds	r7, #40	; 0x28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	004005ff 	.word	0x004005ff

08008d04 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008d10:	f107 030c 	add.w	r3, r7, #12
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fa7c 	bl	8009214 <SD_SendStatus>
 8008d1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d005      	beq.n	8008d30 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	0a5b      	lsrs	r3, r3, #9
 8008d34:	f003 030f 	and.w	r3, r3, #15
 8008d38:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008d3a:	693b      	ldr	r3, [r7, #16]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d50:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d60:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008d62:	bf00      	nop
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d80:	2b82      	cmp	r3, #130	; 0x82
 8008d82:	d111      	bne.n	8008da8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f001 fdd3 	bl	800a934 <SDMMC_CmdStopTransfer>
 8008d8e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d008      	beq.n	8008da8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f7ff fd3a 	bl	800881c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f022 0208 	bic.w	r2, r2, #8
 8008db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f240 523a 	movw	r2, #1338	; 0x53a
 8008dc0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f002 fa45 	bl	800b260 <HAL_SD_RxCpltCallback>
#endif
}
 8008dd6:	bf00      	nop
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
	...

08008de0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dec:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7fd fcdc 	bl	80067ac <HAL_DMA_GetError>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d03e      	beq.n	8008e78 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e00:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e08:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d002      	beq.n	8008e16 <SD_DMAError+0x36>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d12d      	bne.n	8008e72 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a19      	ldr	r2, [pc, #100]	; (8008e80 <SD_DMAError+0xa0>)
 8008e1c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008e2c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008e3a:	6978      	ldr	r0, [r7, #20]
 8008e3c:	f7ff ff62 	bl	8008d04 <HAL_SD_GetCardState>
 8008e40:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b06      	cmp	r3, #6
 8008e46:	d002      	beq.n	8008e4e <SD_DMAError+0x6e>
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2b05      	cmp	r3, #5
 8008e4c:	d10a      	bne.n	8008e64 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f001 fd6e 	bl	800a934 <SDMMC_CmdStopTransfer>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008e72:	6978      	ldr	r0, [r7, #20]
 8008e74:	f7ff fcd2 	bl	800881c <HAL_SD_ErrorCallback>
#endif
  }
}
 8008e78:	bf00      	nop
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	004005ff 	.word	0x004005ff

08008e84 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e90:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e9a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff ff31 	bl	8008d04 <HAL_SD_GetCardState>
 8008ea2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2b06      	cmp	r3, #6
 8008eb6:	d002      	beq.n	8008ebe <SD_DMATxAbort+0x3a>
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2b05      	cmp	r3, #5
 8008ebc:	d10a      	bne.n	8008ed4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f001 fd36 	bl	800a934 <SDMMC_CmdStopTransfer>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d103      	bne.n	8008ee4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f002 f9ab 	bl	800b238 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008ee2:	e002      	b.n	8008eea <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff fc99 	bl	800881c <HAL_SD_ErrorCallback>
}
 8008eea:	bf00      	nop
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efe:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f7ff fefa 	bl	8008d04 <HAL_SD_GetCardState>
 8008f10:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b06      	cmp	r3, #6
 8008f24:	d002      	beq.n	8008f2c <SD_DMARxAbort+0x3a>
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2b05      	cmp	r3, #5
 8008f2a:	d10a      	bne.n	8008f42 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 fcff 	bl	800a934 <SDMMC_CmdStopTransfer>
 8008f36:	4602      	mov	r2, r0
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d103      	bne.n	8008f52 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f002 f974 	bl	800b238 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008f50:	e002      	b.n	8008f58 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f7ff fc62 	bl	800881c <HAL_SD_ErrorCallback>
}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f60:	b5b0      	push	{r4, r5, r7, lr}
 8008f62:	b094      	sub	sp, #80	; 0x50
 8008f64:	af04      	add	r7, sp, #16
 8008f66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f001 fbb1 	bl	800a6d8 <SDMMC_GetPowerState>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d102      	bne.n	8008f82 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f80:	e0b6      	b.n	80090f0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d02f      	beq.n	8008fea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f001 fddb 	bl	800ab4a <SDMMC_CmdSendCID>
 8008f94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <SD_InitCard+0x40>
    {
      return errorstate;
 8008f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9e:	e0a7      	b.n	80090f0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f001 fbdb 	bl	800a762 <SDMMC_GetResponse>
 8008fac:	4602      	mov	r2, r0
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2104      	movs	r1, #4
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f001 fbd2 	bl	800a762 <SDMMC_GetResponse>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2108      	movs	r1, #8
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f001 fbc9 	bl	800a762 <SDMMC_GetResponse>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	210c      	movs	r1, #12
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f001 fbc0 	bl	800a762 <SDMMC_GetResponse>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d00d      	beq.n	800900e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f107 020e 	add.w	r2, r7, #14
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f001 fde1 	bl	800abc4 <SDMMC_CmdSetRelAdd>
 8009002:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <SD_InitCard+0xae>
    {
      return errorstate;
 800900a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900c:	e070      	b.n	80090f0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009012:	2b03      	cmp	r3, #3
 8009014:	d036      	beq.n	8009084 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009016:	89fb      	ldrh	r3, [r7, #14]
 8009018:	461a      	mov	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009026:	041b      	lsls	r3, r3, #16
 8009028:	4619      	mov	r1, r3
 800902a:	4610      	mov	r0, r2
 800902c:	f001 fdab 	bl	800ab86 <SDMMC_CmdSendCSD>
 8009030:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800903a:	e059      	b.n	80090f0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2100      	movs	r1, #0
 8009042:	4618      	mov	r0, r3
 8009044:	f001 fb8d 	bl	800a762 <SDMMC_GetResponse>
 8009048:	4602      	mov	r2, r0
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2104      	movs	r1, #4
 8009054:	4618      	mov	r0, r3
 8009056:	f001 fb84 	bl	800a762 <SDMMC_GetResponse>
 800905a:	4602      	mov	r2, r0
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2108      	movs	r1, #8
 8009066:	4618      	mov	r0, r3
 8009068:	f001 fb7b 	bl	800a762 <SDMMC_GetResponse>
 800906c:	4602      	mov	r2, r0
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	210c      	movs	r1, #12
 8009078:	4618      	mov	r0, r3
 800907a:	f001 fb72 	bl	800a762 <SDMMC_GetResponse>
 800907e:	4602      	mov	r2, r0
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2104      	movs	r1, #4
 800908a:	4618      	mov	r0, r3
 800908c:	f001 fb69 	bl	800a762 <SDMMC_GetResponse>
 8009090:	4603      	mov	r3, r0
 8009092:	0d1a      	lsrs	r2, r3, #20
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009098:	f107 0310 	add.w	r3, r7, #16
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff fbc6 	bl	8008830 <HAL_SD_GetCardCSD>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d002      	beq.n	80090b0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090ae:	e01f      	b.n	80090f0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6819      	ldr	r1, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b8:	041b      	lsls	r3, r3, #16
 80090ba:	461a      	mov	r2, r3
 80090bc:	f04f 0300 	mov.w	r3, #0
 80090c0:	4608      	mov	r0, r1
 80090c2:	f001 fc59 	bl	800a978 <SDMMC_CmdSelDesel>
 80090c6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80090c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <SD_InitCard+0x172>
  {
    return errorstate;
 80090ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d0:	e00e      	b.n	80090f0 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681d      	ldr	r5, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	466c      	mov	r4, sp
 80090da:	f103 0210 	add.w	r2, r3, #16
 80090de:	ca07      	ldmia	r2, {r0, r1, r2}
 80090e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80090e4:	3304      	adds	r3, #4
 80090e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090e8:	4628      	mov	r0, r5
 80090ea:	f001 fa9d 	bl	800a628 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3740      	adds	r7, #64	; 0x40
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bdb0      	pop	{r4, r5, r7, pc}

080090f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009104:	2300      	movs	r3, #0
 8009106:	617b      	str	r3, [r7, #20]
 8009108:	2300      	movs	r3, #0
 800910a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4618      	mov	r0, r3
 8009112:	f001 fc54 	bl	800a9be <SDMMC_CmdGoIdleState>
 8009116:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <SD_PowerON+0x2a>
  {
    return errorstate;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	e072      	b.n	8009208 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4618      	mov	r0, r3
 8009128:	f001 fc67 	bl	800a9fa <SDMMC_CmdOperCond>
 800912c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00d      	beq.n	8009150 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f001 fc3d 	bl	800a9be <SDMMC_CmdGoIdleState>
 8009144:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d004      	beq.n	8009156 <SD_PowerON+0x5e>
    {
      return errorstate;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	e05b      	b.n	8009208 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800915a:	2b01      	cmp	r3, #1
 800915c:	d137      	bne.n	80091ce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2100      	movs	r1, #0
 8009164:	4618      	mov	r0, r3
 8009166:	f001 fc67 	bl	800aa38 <SDMMC_CmdAppCommand>
 800916a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d02d      	beq.n	80091ce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009172:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009176:	e047      	b.n	8009208 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2100      	movs	r1, #0
 800917e:	4618      	mov	r0, r3
 8009180:	f001 fc5a 	bl	800aa38 <SDMMC_CmdAppCommand>
 8009184:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <SD_PowerON+0x98>
    {
      return errorstate;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	e03b      	b.n	8009208 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	491e      	ldr	r1, [pc, #120]	; (8009210 <SD_PowerON+0x118>)
 8009196:	4618      	mov	r0, r3
 8009198:	f001 fc70 	bl	800aa7c <SDMMC_CmdAppOperCommand>
 800919c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091a8:	e02e      	b.n	8009208 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2100      	movs	r1, #0
 80091b0:	4618      	mov	r0, r3
 80091b2:	f001 fad6 	bl	800a762 <SDMMC_GetResponse>
 80091b6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	0fdb      	lsrs	r3, r3, #31
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d101      	bne.n	80091c4 <SD_PowerON+0xcc>
 80091c0:	2301      	movs	r3, #1
 80091c2:	e000      	b.n	80091c6 <SD_PowerON+0xce>
 80091c4:	2300      	movs	r3, #0
 80091c6:	613b      	str	r3, [r7, #16]

    count++;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	3301      	adds	r3, #1
 80091cc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d802      	bhi.n	80091de <SD_PowerON+0xe6>
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0cc      	beq.n	8009178 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d902      	bls.n	80091ee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80091e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091ec:	e00c      	b.n	8009208 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d003      	beq.n	8009200 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	645a      	str	r2, [r3, #68]	; 0x44
 80091fe:	e002      	b.n	8009206 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	c1100000 	.word	0xc1100000

08009214 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d102      	bne.n	800922a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009224:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009228:	e018      	b.n	800925c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009232:	041b      	lsls	r3, r3, #16
 8009234:	4619      	mov	r1, r3
 8009236:	4610      	mov	r0, r2
 8009238:	f001 fce5 	bl	800ac06 <SDMMC_CmdSendStatus>
 800923c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	e009      	b.n	800925c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2100      	movs	r1, #0
 800924e:	4618      	mov	r0, r3
 8009250:	f001 fa87 	bl	800a762 <SDMMC_GetResponse>
 8009254:	4602      	mov	r2, r0
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800926c:	2300      	movs	r3, #0
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	2300      	movs	r3, #0
 8009272:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2100      	movs	r1, #0
 800927a:	4618      	mov	r0, r3
 800927c:	f001 fa71 	bl	800a762 <SDMMC_GetResponse>
 8009280:	4603      	mov	r3, r0
 8009282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009286:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800928a:	d102      	bne.n	8009292 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800928c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009290:	e02f      	b.n	80092f2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009292:	f107 030c 	add.w	r3, r7, #12
 8009296:	4619      	mov	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f879 	bl	8009390 <SD_FindSCR>
 800929e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	e023      	b.n	80092f2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d01c      	beq.n	80092ee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092bc:	041b      	lsls	r3, r3, #16
 80092be:	4619      	mov	r1, r3
 80092c0:	4610      	mov	r0, r2
 80092c2:	f001 fbb9 	bl	800aa38 <SDMMC_CmdAppCommand>
 80092c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	e00f      	b.n	80092f2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2102      	movs	r1, #2
 80092d8:	4618      	mov	r0, r3
 80092da:	f001 fbf3 	bl	800aac4 <SDMMC_CmdBusWidth>
 80092de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	e003      	b.n	80092f2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80092ea:	2300      	movs	r3, #0
 80092ec:	e001      	b.n	80092f2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80092ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b086      	sub	sp, #24
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009302:	2300      	movs	r3, #0
 8009304:	60fb      	str	r3, [r7, #12]
 8009306:	2300      	movs	r3, #0
 8009308:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2100      	movs	r1, #0
 8009310:	4618      	mov	r0, r3
 8009312:	f001 fa26 	bl	800a762 <SDMMC_GetResponse>
 8009316:	4603      	mov	r3, r0
 8009318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800931c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009320:	d102      	bne.n	8009328 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009326:	e02f      	b.n	8009388 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009328:	f107 030c 	add.w	r3, r7, #12
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f82e 	bl	8009390 <SD_FindSCR>
 8009334:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	e023      	b.n	8009388 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d01c      	beq.n	8009384 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009352:	041b      	lsls	r3, r3, #16
 8009354:	4619      	mov	r1, r3
 8009356:	4610      	mov	r0, r2
 8009358:	f001 fb6e 	bl	800aa38 <SDMMC_CmdAppCommand>
 800935c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	e00f      	b.n	8009388 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2100      	movs	r1, #0
 800936e:	4618      	mov	r0, r3
 8009370:	f001 fba8 	bl	800aac4 <SDMMC_CmdBusWidth>
 8009374:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	e003      	b.n	8009388 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009380:	2300      	movs	r3, #0
 8009382:	e001      	b.n	8009388 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009384:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009388:	4618      	mov	r0, r3
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009390:	b590      	push	{r4, r7, lr}
 8009392:	b08f      	sub	sp, #60	; 0x3c
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800939a:	f7fc fd51 	bl	8005e40 <HAL_GetTick>
 800939e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80093a0:	2300      	movs	r3, #0
 80093a2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80093a4:	2300      	movs	r3, #0
 80093a6:	60bb      	str	r3, [r7, #8]
 80093a8:	2300      	movs	r3, #0
 80093aa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2108      	movs	r1, #8
 80093b6:	4618      	mov	r0, r3
 80093b8:	f001 fa12 	bl	800a7e0 <SDMMC_CmdBlockLength>
 80093bc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80093c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c6:	e0b2      	b.n	800952e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d0:	041b      	lsls	r3, r3, #16
 80093d2:	4619      	mov	r1, r3
 80093d4:	4610      	mov	r0, r2
 80093d6:	f001 fb2f 	bl	800aa38 <SDMMC_CmdAppCommand>
 80093da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	e0a3      	b.n	800952e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093ea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80093ec:	2308      	movs	r3, #8
 80093ee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80093f0:	2330      	movs	r3, #48	; 0x30
 80093f2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80093f4:	2302      	movs	r3, #2
 80093f6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80093fc:	2301      	movs	r3, #1
 80093fe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f107 0210 	add.w	r2, r7, #16
 8009408:	4611      	mov	r1, r2
 800940a:	4618      	mov	r0, r3
 800940c:	f001 f9bc 	bl	800a788 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4618      	mov	r0, r3
 8009416:	f001 fb77 	bl	800ab08 <SDMMC_CmdSendSCR>
 800941a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	2b00      	cmp	r3, #0
 8009420:	d02a      	beq.n	8009478 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009424:	e083      	b.n	800952e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00f      	beq.n	8009454 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6819      	ldr	r1, [r3, #0]
 8009438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	f107 0208 	add.w	r2, r7, #8
 8009440:	18d4      	adds	r4, r2, r3
 8009442:	4608      	mov	r0, r1
 8009444:	f001 f91c 	bl	800a680 <SDMMC_ReadFIFO>
 8009448:	4603      	mov	r3, r0
 800944a:	6023      	str	r3, [r4, #0]
      index++;
 800944c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800944e:	3301      	adds	r3, #1
 8009450:	637b      	str	r3, [r7, #52]	; 0x34
 8009452:	e006      	b.n	8009462 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800945a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d012      	beq.n	8009488 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009462:	f7fc fced 	bl	8005e40 <HAL_GetTick>
 8009466:	4602      	mov	r2, r0
 8009468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009470:	d102      	bne.n	8009478 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009472:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009476:	e05a      	b.n	800952e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0cf      	beq.n	8009426 <SD_FindSCR+0x96>
 8009486:	e000      	b.n	800948a <SD_FindSCR+0xfa>
      break;
 8009488:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009490:	f003 0308 	and.w	r3, r3, #8
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2208      	movs	r2, #8
 800949e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094a0:	2308      	movs	r3, #8
 80094a2:	e044      	b.n	800952e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094aa:	f003 0302 	and.w	r3, r3, #2
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2202      	movs	r2, #2
 80094b8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094ba:	2302      	movs	r3, #2
 80094bc:	e037      	b.n	800952e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c4:	f003 0320 	and.w	r3, r3, #32
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d005      	beq.n	80094d8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2220      	movs	r2, #32
 80094d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80094d4:	2320      	movs	r3, #32
 80094d6:	e02a      	b.n	800952e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80094e0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	061a      	lsls	r2, r3, #24
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	021b      	lsls	r3, r3, #8
 80094ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	0a1b      	lsrs	r3, r3, #8
 80094f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	0e1b      	lsrs	r3, r3, #24
 80094fe:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009502:	601a      	str	r2, [r3, #0]
    scr++;
 8009504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009506:	3304      	adds	r3, #4
 8009508:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	061a      	lsls	r2, r3, #24
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	021b      	lsls	r3, r3, #8
 8009512:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009516:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	0a1b      	lsrs	r3, r3, #8
 800951c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009520:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	0e1b      	lsrs	r3, r3, #24
 8009526:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	373c      	adds	r7, #60	; 0x3c
 8009532:	46bd      	mov	sp, r7
 8009534:	bd90      	pop	{r4, r7, pc}

08009536 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b086      	sub	sp, #24
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009542:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d03f      	beq.n	80095d0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009550:	2300      	movs	r3, #0
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	e033      	b.n	80095be <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4618      	mov	r0, r3
 800955c:	f001 f890 	bl	800a680 <SDMMC_ReadFIFO>
 8009560:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	b2da      	uxtb	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	701a      	strb	r2, [r3, #0]
      tmp++;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3301      	adds	r3, #1
 800956e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	3b01      	subs	r3, #1
 8009574:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	0a1b      	lsrs	r3, r3, #8
 800957a:	b2da      	uxtb	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3301      	adds	r3, #1
 8009584:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	3b01      	subs	r3, #1
 800958a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	0c1b      	lsrs	r3, r3, #16
 8009590:	b2da      	uxtb	r2, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	3301      	adds	r3, #1
 800959a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	3b01      	subs	r3, #1
 80095a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	0e1b      	lsrs	r3, r3, #24
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	3301      	adds	r3, #1
 80095b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	3301      	adds	r3, #1
 80095bc:	617b      	str	r3, [r7, #20]
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	2b07      	cmp	r3, #7
 80095c2:	d9c8      	bls.n	8009556 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80095d0:	bf00      	nop
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ea:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d043      	beq.n	800967a <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80095f2:	2300      	movs	r3, #0
 80095f4:	617b      	str	r3, [r7, #20]
 80095f6:	e037      	b.n	8009668 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3301      	adds	r3, #1
 8009602:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	3b01      	subs	r3, #1
 8009608:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	021a      	lsls	r2, r3, #8
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	4313      	orrs	r3, r2
 8009614:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3301      	adds	r3, #1
 800961a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	3b01      	subs	r3, #1
 8009620:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	041a      	lsls	r2, r3, #16
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	4313      	orrs	r3, r2
 800962c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3301      	adds	r3, #1
 8009632:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	3b01      	subs	r3, #1
 8009638:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	061a      	lsls	r2, r3, #24
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4313      	orrs	r3, r2
 8009644:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3301      	adds	r3, #1
 800964a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	3b01      	subs	r3, #1
 8009650:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f107 0208 	add.w	r2, r7, #8
 800965a:	4611      	mov	r1, r2
 800965c:	4618      	mov	r0, r3
 800965e:	f001 f81c 	bl	800a69a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	3301      	adds	r3, #1
 8009666:	617b      	str	r3, [r7, #20]
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	2b07      	cmp	r3, #7
 800966c:	d9c4      	bls.n	80095f8 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800967a:	bf00      	nop
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e049      	b.n	8009728 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d106      	bne.n	80096ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f841 	bl	8009730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2202      	movs	r2, #2
 80096b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	3304      	adds	r3, #4
 80096be:	4619      	mov	r1, r3
 80096c0:	4610      	mov	r0, r2
 80096c2:	f000 f9ff 	bl	8009ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b01      	cmp	r3, #1
 8009756:	d001      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	e054      	b.n	8009806 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2202      	movs	r2, #2
 8009760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a26      	ldr	r2, [pc, #152]	; (8009814 <HAL_TIM_Base_Start_IT+0xd0>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d022      	beq.n	80097c4 <HAL_TIM_Base_Start_IT+0x80>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009786:	d01d      	beq.n	80097c4 <HAL_TIM_Base_Start_IT+0x80>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a22      	ldr	r2, [pc, #136]	; (8009818 <HAL_TIM_Base_Start_IT+0xd4>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d018      	beq.n	80097c4 <HAL_TIM_Base_Start_IT+0x80>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a21      	ldr	r2, [pc, #132]	; (800981c <HAL_TIM_Base_Start_IT+0xd8>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d013      	beq.n	80097c4 <HAL_TIM_Base_Start_IT+0x80>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a1f      	ldr	r2, [pc, #124]	; (8009820 <HAL_TIM_Base_Start_IT+0xdc>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d00e      	beq.n	80097c4 <HAL_TIM_Base_Start_IT+0x80>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a1e      	ldr	r2, [pc, #120]	; (8009824 <HAL_TIM_Base_Start_IT+0xe0>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d009      	beq.n	80097c4 <HAL_TIM_Base_Start_IT+0x80>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a1c      	ldr	r2, [pc, #112]	; (8009828 <HAL_TIM_Base_Start_IT+0xe4>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d004      	beq.n	80097c4 <HAL_TIM_Base_Start_IT+0x80>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a1b      	ldr	r2, [pc, #108]	; (800982c <HAL_TIM_Base_Start_IT+0xe8>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d115      	bne.n	80097f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689a      	ldr	r2, [r3, #8]
 80097ca:	4b19      	ldr	r3, [pc, #100]	; (8009830 <HAL_TIM_Base_Start_IT+0xec>)
 80097cc:	4013      	ands	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b06      	cmp	r3, #6
 80097d4:	d015      	beq.n	8009802 <HAL_TIM_Base_Start_IT+0xbe>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097dc:	d011      	beq.n	8009802 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f042 0201 	orr.w	r2, r2, #1
 80097ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ee:	e008      	b.n	8009802 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f042 0201 	orr.w	r2, r2, #1
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	e000      	b.n	8009804 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009802:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	40010000 	.word	0x40010000
 8009818:	40000400 	.word	0x40000400
 800981c:	40000800 	.word	0x40000800
 8009820:	40000c00 	.word	0x40000c00
 8009824:	40010400 	.word	0x40010400
 8009828:	40014000 	.word	0x40014000
 800982c:	40001800 	.word	0x40001800
 8009830:	00010007 	.word	0x00010007

08009834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b02      	cmp	r3, #2
 8009848:	d122      	bne.n	8009890 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	2b02      	cmp	r3, #2
 8009856:	d11b      	bne.n	8009890 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f06f 0202 	mvn.w	r2, #2
 8009860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	f003 0303 	and.w	r3, r3, #3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f905 	bl	8009a86 <HAL_TIM_IC_CaptureCallback>
 800987c:	e005      	b.n	800988a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f8f7 	bl	8009a72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f908 	bl	8009a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	f003 0304 	and.w	r3, r3, #4
 800989a:	2b04      	cmp	r3, #4
 800989c:	d122      	bne.n	80098e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f003 0304 	and.w	r3, r3, #4
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	d11b      	bne.n	80098e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f06f 0204 	mvn.w	r2, #4
 80098b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2202      	movs	r2, #2
 80098ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f8db 	bl	8009a86 <HAL_TIM_IC_CaptureCallback>
 80098d0:	e005      	b.n	80098de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f8cd 	bl	8009a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f8de 	bl	8009a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	f003 0308 	and.w	r3, r3, #8
 80098ee:	2b08      	cmp	r3, #8
 80098f0:	d122      	bne.n	8009938 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f003 0308 	and.w	r3, r3, #8
 80098fc:	2b08      	cmp	r3, #8
 80098fe:	d11b      	bne.n	8009938 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f06f 0208 	mvn.w	r2, #8
 8009908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2204      	movs	r2, #4
 800990e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	f003 0303 	and.w	r3, r3, #3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f8b1 	bl	8009a86 <HAL_TIM_IC_CaptureCallback>
 8009924:	e005      	b.n	8009932 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f8a3 	bl	8009a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f8b4 	bl	8009a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	f003 0310 	and.w	r3, r3, #16
 8009942:	2b10      	cmp	r3, #16
 8009944:	d122      	bne.n	800998c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f003 0310 	and.w	r3, r3, #16
 8009950:	2b10      	cmp	r3, #16
 8009952:	d11b      	bne.n	800998c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f06f 0210 	mvn.w	r2, #16
 800995c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2208      	movs	r2, #8
 8009962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	69db      	ldr	r3, [r3, #28]
 800996a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f887 	bl	8009a86 <HAL_TIM_IC_CaptureCallback>
 8009978:	e005      	b.n	8009986 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f879 	bl	8009a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f88a 	bl	8009a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	2b01      	cmp	r3, #1
 8009998:	d10e      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d107      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f06f 0201 	mvn.w	r2, #1
 80099b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7fa fb44 	bl	8004040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c2:	2b80      	cmp	r3, #128	; 0x80
 80099c4:	d10e      	bne.n	80099e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d0:	2b80      	cmp	r3, #128	; 0x80
 80099d2:	d107      	bne.n	80099e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f91a 	bl	8009c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f2:	d10e      	bne.n	8009a12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099fe:	2b80      	cmp	r3, #128	; 0x80
 8009a00:	d107      	bne.n	8009a12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f90d 	bl	8009c2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a1c:	2b40      	cmp	r3, #64	; 0x40
 8009a1e:	d10e      	bne.n	8009a3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2a:	2b40      	cmp	r3, #64	; 0x40
 8009a2c:	d107      	bne.n	8009a3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f838 	bl	8009aae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	f003 0320 	and.w	r3, r3, #32
 8009a48:	2b20      	cmp	r3, #32
 8009a4a:	d10e      	bne.n	8009a6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	f003 0320 	and.w	r3, r3, #32
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	d107      	bne.n	8009a6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f06f 0220 	mvn.w	r2, #32
 8009a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f8cd 	bl	8009c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a6a:	bf00      	nop
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b083      	sub	sp, #12
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a7a:	bf00      	nop
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a86:	b480      	push	{r7}
 8009a88:	b083      	sub	sp, #12
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a8e:	bf00      	nop
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009aa2:	bf00      	nop
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b083      	sub	sp, #12
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ab6:	bf00      	nop
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
	...

08009ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a40      	ldr	r2, [pc, #256]	; (8009bd8 <TIM_Base_SetConfig+0x114>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d013      	beq.n	8009b04 <TIM_Base_SetConfig+0x40>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae2:	d00f      	beq.n	8009b04 <TIM_Base_SetConfig+0x40>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a3d      	ldr	r2, [pc, #244]	; (8009bdc <TIM_Base_SetConfig+0x118>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d00b      	beq.n	8009b04 <TIM_Base_SetConfig+0x40>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a3c      	ldr	r2, [pc, #240]	; (8009be0 <TIM_Base_SetConfig+0x11c>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d007      	beq.n	8009b04 <TIM_Base_SetConfig+0x40>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a3b      	ldr	r2, [pc, #236]	; (8009be4 <TIM_Base_SetConfig+0x120>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d003      	beq.n	8009b04 <TIM_Base_SetConfig+0x40>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a3a      	ldr	r2, [pc, #232]	; (8009be8 <TIM_Base_SetConfig+0x124>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d108      	bne.n	8009b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a2f      	ldr	r2, [pc, #188]	; (8009bd8 <TIM_Base_SetConfig+0x114>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d02b      	beq.n	8009b76 <TIM_Base_SetConfig+0xb2>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b24:	d027      	beq.n	8009b76 <TIM_Base_SetConfig+0xb2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a2c      	ldr	r2, [pc, #176]	; (8009bdc <TIM_Base_SetConfig+0x118>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d023      	beq.n	8009b76 <TIM_Base_SetConfig+0xb2>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a2b      	ldr	r2, [pc, #172]	; (8009be0 <TIM_Base_SetConfig+0x11c>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d01f      	beq.n	8009b76 <TIM_Base_SetConfig+0xb2>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a2a      	ldr	r2, [pc, #168]	; (8009be4 <TIM_Base_SetConfig+0x120>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d01b      	beq.n	8009b76 <TIM_Base_SetConfig+0xb2>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a29      	ldr	r2, [pc, #164]	; (8009be8 <TIM_Base_SetConfig+0x124>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d017      	beq.n	8009b76 <TIM_Base_SetConfig+0xb2>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a28      	ldr	r2, [pc, #160]	; (8009bec <TIM_Base_SetConfig+0x128>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d013      	beq.n	8009b76 <TIM_Base_SetConfig+0xb2>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a27      	ldr	r2, [pc, #156]	; (8009bf0 <TIM_Base_SetConfig+0x12c>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d00f      	beq.n	8009b76 <TIM_Base_SetConfig+0xb2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a26      	ldr	r2, [pc, #152]	; (8009bf4 <TIM_Base_SetConfig+0x130>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d00b      	beq.n	8009b76 <TIM_Base_SetConfig+0xb2>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a25      	ldr	r2, [pc, #148]	; (8009bf8 <TIM_Base_SetConfig+0x134>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d007      	beq.n	8009b76 <TIM_Base_SetConfig+0xb2>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a24      	ldr	r2, [pc, #144]	; (8009bfc <TIM_Base_SetConfig+0x138>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d003      	beq.n	8009b76 <TIM_Base_SetConfig+0xb2>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a23      	ldr	r2, [pc, #140]	; (8009c00 <TIM_Base_SetConfig+0x13c>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d108      	bne.n	8009b88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a0a      	ldr	r2, [pc, #40]	; (8009bd8 <TIM_Base_SetConfig+0x114>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d003      	beq.n	8009bbc <TIM_Base_SetConfig+0xf8>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a0c      	ldr	r2, [pc, #48]	; (8009be8 <TIM_Base_SetConfig+0x124>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d103      	bne.n	8009bc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	691a      	ldr	r2, [r3, #16]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	615a      	str	r2, [r3, #20]
}
 8009bca:	bf00      	nop
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	40010000 	.word	0x40010000
 8009bdc:	40000400 	.word	0x40000400
 8009be0:	40000800 	.word	0x40000800
 8009be4:	40000c00 	.word	0x40000c00
 8009be8:	40010400 	.word	0x40010400
 8009bec:	40014000 	.word	0x40014000
 8009bf0:	40014400 	.word	0x40014400
 8009bf4:	40014800 	.word	0x40014800
 8009bf8:	40001800 	.word	0x40001800
 8009bfc:	40001c00 	.word	0x40001c00
 8009c00:	40002000 	.word	0x40002000

08009c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c34:	bf00      	nop
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d101      	bne.n	8009c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e040      	b.n	8009cd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d106      	bne.n	8009c68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7fb fd92 	bl	800578c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2224      	movs	r2, #36	; 0x24
 8009c6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0201 	bic.w	r2, r2, #1
 8009c7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f8c0 	bl	8009e04 <UART_SetConfig>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d101      	bne.n	8009c8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e022      	b.n	8009cd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d002      	beq.n	8009c9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fb16 	bl	800a2c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689a      	ldr	r2, [r3, #8]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009cba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f042 0201 	orr.w	r2, r2, #1
 8009cca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fb9d 	bl	800a40c <UART_CheckIdleState>
 8009cd2:	4603      	mov	r3, r0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b08a      	sub	sp, #40	; 0x28
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	603b      	str	r3, [r7, #0]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cf0:	2b20      	cmp	r3, #32
 8009cf2:	f040 8081 	bne.w	8009df8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d002      	beq.n	8009d02 <HAL_UART_Transmit+0x26>
 8009cfc:	88fb      	ldrh	r3, [r7, #6]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e079      	b.n	8009dfa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d101      	bne.n	8009d14 <HAL_UART_Transmit+0x38>
 8009d10:	2302      	movs	r3, #2
 8009d12:	e072      	b.n	8009dfa <HAL_UART_Transmit+0x11e>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2221      	movs	r2, #33	; 0x21
 8009d28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d2a:	f7fc f889 	bl	8005e40 <HAL_GetTick>
 8009d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	88fa      	ldrh	r2, [r7, #6]
 8009d34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	88fa      	ldrh	r2, [r7, #6]
 8009d3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d48:	d108      	bne.n	8009d5c <HAL_UART_Transmit+0x80>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d104      	bne.n	8009d5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009d52:	2300      	movs	r3, #0
 8009d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	61bb      	str	r3, [r7, #24]
 8009d5a:	e003      	b.n	8009d64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d60:	2300      	movs	r3, #0
 8009d62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009d6c:	e02c      	b.n	8009dc8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2200      	movs	r2, #0
 8009d76:	2180      	movs	r1, #128	; 0x80
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 fb90 	bl	800a49e <UART_WaitOnFlagUntilTimeout>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d001      	beq.n	8009d88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e038      	b.n	8009dfa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10b      	bne.n	8009da6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	461a      	mov	r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	3302      	adds	r3, #2
 8009da2:	61bb      	str	r3, [r7, #24]
 8009da4:	e007      	b.n	8009db6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	781a      	ldrb	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	3301      	adds	r3, #1
 8009db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1cc      	bne.n	8009d6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	2140      	movs	r1, #64	; 0x40
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f000 fb5d 	bl	800a49e <UART_WaitOnFlagUntilTimeout>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	e005      	b.n	8009dfa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2220      	movs	r2, #32
 8009df2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	e000      	b.n	8009dfa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009df8:	2302      	movs	r3, #2
  }
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3720      	adds	r7, #32
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b088      	sub	sp, #32
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	69db      	ldr	r3, [r3, #28]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	4ba7      	ldr	r3, [pc, #668]	; (800a0cc <UART_SetConfig+0x2c8>)
 8009e30:	4013      	ands	r3, r2
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	6812      	ldr	r2, [r2, #0]
 8009e36:	6979      	ldr	r1, [r7, #20]
 8009e38:	430b      	orrs	r3, r1
 8009e3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	68da      	ldr	r2, [r3, #12]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a1b      	ldr	r3, [r3, #32]
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a95      	ldr	r2, [pc, #596]	; (800a0d0 <UART_SetConfig+0x2cc>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d120      	bne.n	8009ec2 <UART_SetConfig+0xbe>
 8009e80:	4b94      	ldr	r3, [pc, #592]	; (800a0d4 <UART_SetConfig+0x2d0>)
 8009e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e86:	f003 0303 	and.w	r3, r3, #3
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d816      	bhi.n	8009ebc <UART_SetConfig+0xb8>
 8009e8e:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <UART_SetConfig+0x90>)
 8009e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e94:	08009ea5 	.word	0x08009ea5
 8009e98:	08009eb1 	.word	0x08009eb1
 8009e9c:	08009eab 	.word	0x08009eab
 8009ea0:	08009eb7 	.word	0x08009eb7
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	77fb      	strb	r3, [r7, #31]
 8009ea8:	e14f      	b.n	800a14a <UART_SetConfig+0x346>
 8009eaa:	2302      	movs	r3, #2
 8009eac:	77fb      	strb	r3, [r7, #31]
 8009eae:	e14c      	b.n	800a14a <UART_SetConfig+0x346>
 8009eb0:	2304      	movs	r3, #4
 8009eb2:	77fb      	strb	r3, [r7, #31]
 8009eb4:	e149      	b.n	800a14a <UART_SetConfig+0x346>
 8009eb6:	2308      	movs	r3, #8
 8009eb8:	77fb      	strb	r3, [r7, #31]
 8009eba:	e146      	b.n	800a14a <UART_SetConfig+0x346>
 8009ebc:	2310      	movs	r3, #16
 8009ebe:	77fb      	strb	r3, [r7, #31]
 8009ec0:	e143      	b.n	800a14a <UART_SetConfig+0x346>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a84      	ldr	r2, [pc, #528]	; (800a0d8 <UART_SetConfig+0x2d4>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d132      	bne.n	8009f32 <UART_SetConfig+0x12e>
 8009ecc:	4b81      	ldr	r3, [pc, #516]	; (800a0d4 <UART_SetConfig+0x2d0>)
 8009ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed2:	f003 030c 	and.w	r3, r3, #12
 8009ed6:	2b0c      	cmp	r3, #12
 8009ed8:	d828      	bhi.n	8009f2c <UART_SetConfig+0x128>
 8009eda:	a201      	add	r2, pc, #4	; (adr r2, 8009ee0 <UART_SetConfig+0xdc>)
 8009edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee0:	08009f15 	.word	0x08009f15
 8009ee4:	08009f2d 	.word	0x08009f2d
 8009ee8:	08009f2d 	.word	0x08009f2d
 8009eec:	08009f2d 	.word	0x08009f2d
 8009ef0:	08009f21 	.word	0x08009f21
 8009ef4:	08009f2d 	.word	0x08009f2d
 8009ef8:	08009f2d 	.word	0x08009f2d
 8009efc:	08009f2d 	.word	0x08009f2d
 8009f00:	08009f1b 	.word	0x08009f1b
 8009f04:	08009f2d 	.word	0x08009f2d
 8009f08:	08009f2d 	.word	0x08009f2d
 8009f0c:	08009f2d 	.word	0x08009f2d
 8009f10:	08009f27 	.word	0x08009f27
 8009f14:	2300      	movs	r3, #0
 8009f16:	77fb      	strb	r3, [r7, #31]
 8009f18:	e117      	b.n	800a14a <UART_SetConfig+0x346>
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	77fb      	strb	r3, [r7, #31]
 8009f1e:	e114      	b.n	800a14a <UART_SetConfig+0x346>
 8009f20:	2304      	movs	r3, #4
 8009f22:	77fb      	strb	r3, [r7, #31]
 8009f24:	e111      	b.n	800a14a <UART_SetConfig+0x346>
 8009f26:	2308      	movs	r3, #8
 8009f28:	77fb      	strb	r3, [r7, #31]
 8009f2a:	e10e      	b.n	800a14a <UART_SetConfig+0x346>
 8009f2c:	2310      	movs	r3, #16
 8009f2e:	77fb      	strb	r3, [r7, #31]
 8009f30:	e10b      	b.n	800a14a <UART_SetConfig+0x346>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a69      	ldr	r2, [pc, #420]	; (800a0dc <UART_SetConfig+0x2d8>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d120      	bne.n	8009f7e <UART_SetConfig+0x17a>
 8009f3c:	4b65      	ldr	r3, [pc, #404]	; (800a0d4 <UART_SetConfig+0x2d0>)
 8009f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f46:	2b30      	cmp	r3, #48	; 0x30
 8009f48:	d013      	beq.n	8009f72 <UART_SetConfig+0x16e>
 8009f4a:	2b30      	cmp	r3, #48	; 0x30
 8009f4c:	d814      	bhi.n	8009f78 <UART_SetConfig+0x174>
 8009f4e:	2b20      	cmp	r3, #32
 8009f50:	d009      	beq.n	8009f66 <UART_SetConfig+0x162>
 8009f52:	2b20      	cmp	r3, #32
 8009f54:	d810      	bhi.n	8009f78 <UART_SetConfig+0x174>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <UART_SetConfig+0x15c>
 8009f5a:	2b10      	cmp	r3, #16
 8009f5c:	d006      	beq.n	8009f6c <UART_SetConfig+0x168>
 8009f5e:	e00b      	b.n	8009f78 <UART_SetConfig+0x174>
 8009f60:	2300      	movs	r3, #0
 8009f62:	77fb      	strb	r3, [r7, #31]
 8009f64:	e0f1      	b.n	800a14a <UART_SetConfig+0x346>
 8009f66:	2302      	movs	r3, #2
 8009f68:	77fb      	strb	r3, [r7, #31]
 8009f6a:	e0ee      	b.n	800a14a <UART_SetConfig+0x346>
 8009f6c:	2304      	movs	r3, #4
 8009f6e:	77fb      	strb	r3, [r7, #31]
 8009f70:	e0eb      	b.n	800a14a <UART_SetConfig+0x346>
 8009f72:	2308      	movs	r3, #8
 8009f74:	77fb      	strb	r3, [r7, #31]
 8009f76:	e0e8      	b.n	800a14a <UART_SetConfig+0x346>
 8009f78:	2310      	movs	r3, #16
 8009f7a:	77fb      	strb	r3, [r7, #31]
 8009f7c:	e0e5      	b.n	800a14a <UART_SetConfig+0x346>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a57      	ldr	r2, [pc, #348]	; (800a0e0 <UART_SetConfig+0x2dc>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d120      	bne.n	8009fca <UART_SetConfig+0x1c6>
 8009f88:	4b52      	ldr	r3, [pc, #328]	; (800a0d4 <UART_SetConfig+0x2d0>)
 8009f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009f92:	2bc0      	cmp	r3, #192	; 0xc0
 8009f94:	d013      	beq.n	8009fbe <UART_SetConfig+0x1ba>
 8009f96:	2bc0      	cmp	r3, #192	; 0xc0
 8009f98:	d814      	bhi.n	8009fc4 <UART_SetConfig+0x1c0>
 8009f9a:	2b80      	cmp	r3, #128	; 0x80
 8009f9c:	d009      	beq.n	8009fb2 <UART_SetConfig+0x1ae>
 8009f9e:	2b80      	cmp	r3, #128	; 0x80
 8009fa0:	d810      	bhi.n	8009fc4 <UART_SetConfig+0x1c0>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d002      	beq.n	8009fac <UART_SetConfig+0x1a8>
 8009fa6:	2b40      	cmp	r3, #64	; 0x40
 8009fa8:	d006      	beq.n	8009fb8 <UART_SetConfig+0x1b4>
 8009faa:	e00b      	b.n	8009fc4 <UART_SetConfig+0x1c0>
 8009fac:	2300      	movs	r3, #0
 8009fae:	77fb      	strb	r3, [r7, #31]
 8009fb0:	e0cb      	b.n	800a14a <UART_SetConfig+0x346>
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	77fb      	strb	r3, [r7, #31]
 8009fb6:	e0c8      	b.n	800a14a <UART_SetConfig+0x346>
 8009fb8:	2304      	movs	r3, #4
 8009fba:	77fb      	strb	r3, [r7, #31]
 8009fbc:	e0c5      	b.n	800a14a <UART_SetConfig+0x346>
 8009fbe:	2308      	movs	r3, #8
 8009fc0:	77fb      	strb	r3, [r7, #31]
 8009fc2:	e0c2      	b.n	800a14a <UART_SetConfig+0x346>
 8009fc4:	2310      	movs	r3, #16
 8009fc6:	77fb      	strb	r3, [r7, #31]
 8009fc8:	e0bf      	b.n	800a14a <UART_SetConfig+0x346>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a45      	ldr	r2, [pc, #276]	; (800a0e4 <UART_SetConfig+0x2e0>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d125      	bne.n	800a020 <UART_SetConfig+0x21c>
 8009fd4:	4b3f      	ldr	r3, [pc, #252]	; (800a0d4 <UART_SetConfig+0x2d0>)
 8009fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fe2:	d017      	beq.n	800a014 <UART_SetConfig+0x210>
 8009fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fe8:	d817      	bhi.n	800a01a <UART_SetConfig+0x216>
 8009fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fee:	d00b      	beq.n	800a008 <UART_SetConfig+0x204>
 8009ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff4:	d811      	bhi.n	800a01a <UART_SetConfig+0x216>
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d003      	beq.n	800a002 <UART_SetConfig+0x1fe>
 8009ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ffe:	d006      	beq.n	800a00e <UART_SetConfig+0x20a>
 800a000:	e00b      	b.n	800a01a <UART_SetConfig+0x216>
 800a002:	2300      	movs	r3, #0
 800a004:	77fb      	strb	r3, [r7, #31]
 800a006:	e0a0      	b.n	800a14a <UART_SetConfig+0x346>
 800a008:	2302      	movs	r3, #2
 800a00a:	77fb      	strb	r3, [r7, #31]
 800a00c:	e09d      	b.n	800a14a <UART_SetConfig+0x346>
 800a00e:	2304      	movs	r3, #4
 800a010:	77fb      	strb	r3, [r7, #31]
 800a012:	e09a      	b.n	800a14a <UART_SetConfig+0x346>
 800a014:	2308      	movs	r3, #8
 800a016:	77fb      	strb	r3, [r7, #31]
 800a018:	e097      	b.n	800a14a <UART_SetConfig+0x346>
 800a01a:	2310      	movs	r3, #16
 800a01c:	77fb      	strb	r3, [r7, #31]
 800a01e:	e094      	b.n	800a14a <UART_SetConfig+0x346>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a30      	ldr	r2, [pc, #192]	; (800a0e8 <UART_SetConfig+0x2e4>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d125      	bne.n	800a076 <UART_SetConfig+0x272>
 800a02a:	4b2a      	ldr	r3, [pc, #168]	; (800a0d4 <UART_SetConfig+0x2d0>)
 800a02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a030:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a038:	d017      	beq.n	800a06a <UART_SetConfig+0x266>
 800a03a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a03e:	d817      	bhi.n	800a070 <UART_SetConfig+0x26c>
 800a040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a044:	d00b      	beq.n	800a05e <UART_SetConfig+0x25a>
 800a046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a04a:	d811      	bhi.n	800a070 <UART_SetConfig+0x26c>
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d003      	beq.n	800a058 <UART_SetConfig+0x254>
 800a050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a054:	d006      	beq.n	800a064 <UART_SetConfig+0x260>
 800a056:	e00b      	b.n	800a070 <UART_SetConfig+0x26c>
 800a058:	2301      	movs	r3, #1
 800a05a:	77fb      	strb	r3, [r7, #31]
 800a05c:	e075      	b.n	800a14a <UART_SetConfig+0x346>
 800a05e:	2302      	movs	r3, #2
 800a060:	77fb      	strb	r3, [r7, #31]
 800a062:	e072      	b.n	800a14a <UART_SetConfig+0x346>
 800a064:	2304      	movs	r3, #4
 800a066:	77fb      	strb	r3, [r7, #31]
 800a068:	e06f      	b.n	800a14a <UART_SetConfig+0x346>
 800a06a:	2308      	movs	r3, #8
 800a06c:	77fb      	strb	r3, [r7, #31]
 800a06e:	e06c      	b.n	800a14a <UART_SetConfig+0x346>
 800a070:	2310      	movs	r3, #16
 800a072:	77fb      	strb	r3, [r7, #31]
 800a074:	e069      	b.n	800a14a <UART_SetConfig+0x346>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a1c      	ldr	r2, [pc, #112]	; (800a0ec <UART_SetConfig+0x2e8>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d137      	bne.n	800a0f0 <UART_SetConfig+0x2ec>
 800a080:	4b14      	ldr	r3, [pc, #80]	; (800a0d4 <UART_SetConfig+0x2d0>)
 800a082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a086:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a08a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a08e:	d017      	beq.n	800a0c0 <UART_SetConfig+0x2bc>
 800a090:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a094:	d817      	bhi.n	800a0c6 <UART_SetConfig+0x2c2>
 800a096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a09a:	d00b      	beq.n	800a0b4 <UART_SetConfig+0x2b0>
 800a09c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0a0:	d811      	bhi.n	800a0c6 <UART_SetConfig+0x2c2>
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <UART_SetConfig+0x2aa>
 800a0a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0aa:	d006      	beq.n	800a0ba <UART_SetConfig+0x2b6>
 800a0ac:	e00b      	b.n	800a0c6 <UART_SetConfig+0x2c2>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	77fb      	strb	r3, [r7, #31]
 800a0b2:	e04a      	b.n	800a14a <UART_SetConfig+0x346>
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	77fb      	strb	r3, [r7, #31]
 800a0b8:	e047      	b.n	800a14a <UART_SetConfig+0x346>
 800a0ba:	2304      	movs	r3, #4
 800a0bc:	77fb      	strb	r3, [r7, #31]
 800a0be:	e044      	b.n	800a14a <UART_SetConfig+0x346>
 800a0c0:	2308      	movs	r3, #8
 800a0c2:	77fb      	strb	r3, [r7, #31]
 800a0c4:	e041      	b.n	800a14a <UART_SetConfig+0x346>
 800a0c6:	2310      	movs	r3, #16
 800a0c8:	77fb      	strb	r3, [r7, #31]
 800a0ca:	e03e      	b.n	800a14a <UART_SetConfig+0x346>
 800a0cc:	efff69f3 	.word	0xefff69f3
 800a0d0:	40011000 	.word	0x40011000
 800a0d4:	40023800 	.word	0x40023800
 800a0d8:	40004400 	.word	0x40004400
 800a0dc:	40004800 	.word	0x40004800
 800a0e0:	40004c00 	.word	0x40004c00
 800a0e4:	40005000 	.word	0x40005000
 800a0e8:	40011400 	.word	0x40011400
 800a0ec:	40007800 	.word	0x40007800
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a71      	ldr	r2, [pc, #452]	; (800a2bc <UART_SetConfig+0x4b8>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d125      	bne.n	800a146 <UART_SetConfig+0x342>
 800a0fa:	4b71      	ldr	r3, [pc, #452]	; (800a2c0 <UART_SetConfig+0x4bc>)
 800a0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a100:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a104:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a108:	d017      	beq.n	800a13a <UART_SetConfig+0x336>
 800a10a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a10e:	d817      	bhi.n	800a140 <UART_SetConfig+0x33c>
 800a110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a114:	d00b      	beq.n	800a12e <UART_SetConfig+0x32a>
 800a116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a11a:	d811      	bhi.n	800a140 <UART_SetConfig+0x33c>
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d003      	beq.n	800a128 <UART_SetConfig+0x324>
 800a120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a124:	d006      	beq.n	800a134 <UART_SetConfig+0x330>
 800a126:	e00b      	b.n	800a140 <UART_SetConfig+0x33c>
 800a128:	2300      	movs	r3, #0
 800a12a:	77fb      	strb	r3, [r7, #31]
 800a12c:	e00d      	b.n	800a14a <UART_SetConfig+0x346>
 800a12e:	2302      	movs	r3, #2
 800a130:	77fb      	strb	r3, [r7, #31]
 800a132:	e00a      	b.n	800a14a <UART_SetConfig+0x346>
 800a134:	2304      	movs	r3, #4
 800a136:	77fb      	strb	r3, [r7, #31]
 800a138:	e007      	b.n	800a14a <UART_SetConfig+0x346>
 800a13a:	2308      	movs	r3, #8
 800a13c:	77fb      	strb	r3, [r7, #31]
 800a13e:	e004      	b.n	800a14a <UART_SetConfig+0x346>
 800a140:	2310      	movs	r3, #16
 800a142:	77fb      	strb	r3, [r7, #31]
 800a144:	e001      	b.n	800a14a <UART_SetConfig+0x346>
 800a146:	2310      	movs	r3, #16
 800a148:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	69db      	ldr	r3, [r3, #28]
 800a14e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a152:	d15a      	bne.n	800a20a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800a154:	7ffb      	ldrb	r3, [r7, #31]
 800a156:	2b08      	cmp	r3, #8
 800a158:	d827      	bhi.n	800a1aa <UART_SetConfig+0x3a6>
 800a15a:	a201      	add	r2, pc, #4	; (adr r2, 800a160 <UART_SetConfig+0x35c>)
 800a15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a160:	0800a185 	.word	0x0800a185
 800a164:	0800a18d 	.word	0x0800a18d
 800a168:	0800a195 	.word	0x0800a195
 800a16c:	0800a1ab 	.word	0x0800a1ab
 800a170:	0800a19b 	.word	0x0800a19b
 800a174:	0800a1ab 	.word	0x0800a1ab
 800a178:	0800a1ab 	.word	0x0800a1ab
 800a17c:	0800a1ab 	.word	0x0800a1ab
 800a180:	0800a1a3 	.word	0x0800a1a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a184:	f7fd fad2 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 800a188:	61b8      	str	r0, [r7, #24]
        break;
 800a18a:	e013      	b.n	800a1b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a18c:	f7fd fae2 	bl	8007754 <HAL_RCC_GetPCLK2Freq>
 800a190:	61b8      	str	r0, [r7, #24]
        break;
 800a192:	e00f      	b.n	800a1b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a194:	4b4b      	ldr	r3, [pc, #300]	; (800a2c4 <UART_SetConfig+0x4c0>)
 800a196:	61bb      	str	r3, [r7, #24]
        break;
 800a198:	e00c      	b.n	800a1b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a19a:	f7fd fa05 	bl	80075a8 <HAL_RCC_GetSysClockFreq>
 800a19e:	61b8      	str	r0, [r7, #24]
        break;
 800a1a0:	e008      	b.n	800a1b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1a6:	61bb      	str	r3, [r7, #24]
        break;
 800a1a8:	e004      	b.n	800a1b4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	77bb      	strb	r3, [r7, #30]
        break;
 800a1b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d074      	beq.n	800a2a4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	005a      	lsls	r2, r3, #1
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	085b      	lsrs	r3, r3, #1
 800a1c4:	441a      	add	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	2b0f      	cmp	r3, #15
 800a1d4:	d916      	bls.n	800a204 <UART_SetConfig+0x400>
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1dc:	d212      	bcs.n	800a204 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	f023 030f 	bic.w	r3, r3, #15
 800a1e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	085b      	lsrs	r3, r3, #1
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	f003 0307 	and.w	r3, r3, #7
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	89fb      	ldrh	r3, [r7, #14]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	89fa      	ldrh	r2, [r7, #14]
 800a200:	60da      	str	r2, [r3, #12]
 800a202:	e04f      	b.n	800a2a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	77bb      	strb	r3, [r7, #30]
 800a208:	e04c      	b.n	800a2a4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a20a:	7ffb      	ldrb	r3, [r7, #31]
 800a20c:	2b08      	cmp	r3, #8
 800a20e:	d828      	bhi.n	800a262 <UART_SetConfig+0x45e>
 800a210:	a201      	add	r2, pc, #4	; (adr r2, 800a218 <UART_SetConfig+0x414>)
 800a212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a216:	bf00      	nop
 800a218:	0800a23d 	.word	0x0800a23d
 800a21c:	0800a245 	.word	0x0800a245
 800a220:	0800a24d 	.word	0x0800a24d
 800a224:	0800a263 	.word	0x0800a263
 800a228:	0800a253 	.word	0x0800a253
 800a22c:	0800a263 	.word	0x0800a263
 800a230:	0800a263 	.word	0x0800a263
 800a234:	0800a263 	.word	0x0800a263
 800a238:	0800a25b 	.word	0x0800a25b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a23c:	f7fd fa76 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 800a240:	61b8      	str	r0, [r7, #24]
        break;
 800a242:	e013      	b.n	800a26c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a244:	f7fd fa86 	bl	8007754 <HAL_RCC_GetPCLK2Freq>
 800a248:	61b8      	str	r0, [r7, #24]
        break;
 800a24a:	e00f      	b.n	800a26c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a24c:	4b1d      	ldr	r3, [pc, #116]	; (800a2c4 <UART_SetConfig+0x4c0>)
 800a24e:	61bb      	str	r3, [r7, #24]
        break;
 800a250:	e00c      	b.n	800a26c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a252:	f7fd f9a9 	bl	80075a8 <HAL_RCC_GetSysClockFreq>
 800a256:	61b8      	str	r0, [r7, #24]
        break;
 800a258:	e008      	b.n	800a26c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a25a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a25e:	61bb      	str	r3, [r7, #24]
        break;
 800a260:	e004      	b.n	800a26c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a262:	2300      	movs	r3, #0
 800a264:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	77bb      	strb	r3, [r7, #30]
        break;
 800a26a:	bf00      	nop
    }

    if (pclk != 0U)
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d018      	beq.n	800a2a4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	085a      	lsrs	r2, r3, #1
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	441a      	add	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	fbb2 f3f3 	udiv	r3, r2, r3
 800a284:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	2b0f      	cmp	r3, #15
 800a28a:	d909      	bls.n	800a2a0 <UART_SetConfig+0x49c>
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a292:	d205      	bcs.n	800a2a0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	b29a      	uxth	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	60da      	str	r2, [r3, #12]
 800a29e:	e001      	b.n	800a2a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a2b0:	7fbb      	ldrb	r3, [r7, #30]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3720      	adds	r7, #32
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	40007c00 	.word	0x40007c00
 800a2c0:	40023800 	.word	0x40023800
 800a2c4:	00f42400 	.word	0x00f42400

0800a2c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00a      	beq.n	800a2f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	f003 0302 	and.w	r3, r3, #2
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00a      	beq.n	800a314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	430a      	orrs	r2, r1
 800a312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00a      	beq.n	800a336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33a:	f003 0308 	and.w	r3, r3, #8
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00a      	beq.n	800a358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	430a      	orrs	r2, r1
 800a356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35c:	f003 0310 	and.w	r3, r3, #16
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00a      	beq.n	800a37a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	430a      	orrs	r2, r1
 800a378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37e:	f003 0320 	and.w	r3, r3, #32
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00a      	beq.n	800a39c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	430a      	orrs	r2, r1
 800a39a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d01a      	beq.n	800a3de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3c6:	d10a      	bne.n	800a3de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	605a      	str	r2, [r3, #4]
  }
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af02      	add	r7, sp, #8
 800a412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a41c:	f7fb fd10 	bl	8005e40 <HAL_GetTick>
 800a420:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 0308 	and.w	r3, r3, #8
 800a42c:	2b08      	cmp	r3, #8
 800a42e:	d10e      	bne.n	800a44e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a430:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f82d 	bl	800a49e <UART_WaitOnFlagUntilTimeout>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a44a:	2303      	movs	r3, #3
 800a44c:	e023      	b.n	800a496 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0304 	and.w	r3, r3, #4
 800a458:	2b04      	cmp	r3, #4
 800a45a:	d10e      	bne.n	800a47a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a45c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f817 	bl	800a49e <UART_WaitOnFlagUntilTimeout>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a476:	2303      	movs	r3, #3
 800a478:	e00d      	b.n	800a496 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2220      	movs	r2, #32
 800a47e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2220      	movs	r2, #32
 800a484:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b09c      	sub	sp, #112	; 0x70
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	60f8      	str	r0, [r7, #12]
 800a4a6:	60b9      	str	r1, [r7, #8]
 800a4a8:	603b      	str	r3, [r7, #0]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ae:	e0a5      	b.n	800a5fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4b6:	f000 80a1 	beq.w	800a5fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4ba:	f7fb fcc1 	bl	8005e40 <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d302      	bcc.n	800a4d0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a4ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d13e      	bne.n	800a54e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4d8:	e853 3f00 	ldrex	r3, [r3]
 800a4dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a4de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4e4:	667b      	str	r3, [r7, #100]	; 0x64
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a4f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a4f6:	e841 2300 	strex	r3, r2, [r1]
 800a4fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a4fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1e6      	bne.n	800a4d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3308      	adds	r3, #8
 800a508:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a50c:	e853 3f00 	ldrex	r3, [r3]
 800a510:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a514:	f023 0301 	bic.w	r3, r3, #1
 800a518:	663b      	str	r3, [r7, #96]	; 0x60
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3308      	adds	r3, #8
 800a520:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a522:	64ba      	str	r2, [r7, #72]	; 0x48
 800a524:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a526:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a52a:	e841 2300 	strex	r3, r2, [r1]
 800a52e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1e5      	bne.n	800a502 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2220      	movs	r2, #32
 800a53a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2220      	movs	r2, #32
 800a540:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e067      	b.n	800a61e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0304 	and.w	r3, r3, #4
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d04f      	beq.n	800a5fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	69db      	ldr	r3, [r3, #28]
 800a562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a56a:	d147      	bne.n	800a5fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a574:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57e:	e853 3f00 	ldrex	r3, [r3]
 800a582:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a58a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	461a      	mov	r2, r3
 800a592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a594:	637b      	str	r3, [r7, #52]	; 0x34
 800a596:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a59a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a59c:	e841 2300 	strex	r3, r2, [r1]
 800a5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e6      	bne.n	800a576 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	e853 3f00 	ldrex	r3, [r3]
 800a5b6:	613b      	str	r3, [r7, #16]
   return(result);
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f023 0301 	bic.w	r3, r3, #1
 800a5be:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3308      	adds	r3, #8
 800a5c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a5c8:	623a      	str	r2, [r7, #32]
 800a5ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5cc:	69f9      	ldr	r1, [r7, #28]
 800a5ce:	6a3a      	ldr	r2, [r7, #32]
 800a5d0:	e841 2300 	strex	r3, r2, [r1]
 800a5d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1e5      	bne.n	800a5a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2220      	movs	r2, #32
 800a5e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2220      	movs	r2, #32
 800a5ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e010      	b.n	800a61e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	69da      	ldr	r2, [r3, #28]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	4013      	ands	r3, r2
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	429a      	cmp	r2, r3
 800a60a:	bf0c      	ite	eq
 800a60c:	2301      	moveq	r3, #1
 800a60e:	2300      	movne	r3, #0
 800a610:	b2db      	uxtb	r3, r3
 800a612:	461a      	mov	r2, r3
 800a614:	79fb      	ldrb	r3, [r7, #7]
 800a616:	429a      	cmp	r2, r3
 800a618:	f43f af4a 	beq.w	800a4b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3770      	adds	r7, #112	; 0x70
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
	...

0800a628 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a628:	b084      	sub	sp, #16
 800a62a:	b480      	push	{r7}
 800a62c:	b085      	sub	sp, #20
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	f107 001c 	add.w	r0, r7, #28
 800a636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a63e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a640:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a642:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a646:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a648:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a64a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a64e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a652:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	4313      	orrs	r3, r2
 800a658:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	4b07      	ldr	r3, [pc, #28]	; (800a67c <SDMMC_Init+0x54>)
 800a660:	4013      	ands	r3, r2
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	431a      	orrs	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	b004      	add	sp, #16
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	ffff8100 	.word	0xffff8100

0800a680 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a68e:	4618      	mov	r0, r3
 800a690:	370c      	adds	r7, #12
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2203      	movs	r2, #3
 800a6c8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 0303 	and.w	r3, r3, #3
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a712:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a718:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a71e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	4313      	orrs	r3, r2
 800a724:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	68da      	ldr	r2, [r3, #12]
 800a72a:	4b06      	ldr	r3, [pc, #24]	; (800a744 <SDMMC_SendCommand+0x50>)
 800a72c:	4013      	ands	r3, r2
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	431a      	orrs	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr
 800a744:	fffff000 	.word	0xfffff000

0800a748 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	b2db      	uxtb	r3, r3
}
 800a756:	4618      	mov	r0, r3
 800a758:	370c      	adds	r7, #12
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a762:	b480      	push	{r7}
 800a764:	b085      	sub	sp, #20
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3314      	adds	r3, #20
 800a770:	461a      	mov	r2, r3
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	4413      	add	r3, r2
 800a776:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
}  
 800a77c:	4618      	mov	r0, r3
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	685a      	ldr	r2, [r3, #4]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a7ae:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a7b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a7ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	431a      	orrs	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0

}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a7ee:	2310      	movs	r3, #16
 800a7f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7f2:	2340      	movs	r3, #64	; 0x40
 800a7f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a800:	f107 0308 	add.w	r3, r7, #8
 800a804:	4619      	mov	r1, r3
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7ff ff74 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a80c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a810:	2110      	movs	r1, #16
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fa1a 	bl	800ac4c <SDMMC_GetCmdResp1>
 800a818:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a81a:	69fb      	ldr	r3, [r7, #28]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3720      	adds	r7, #32
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a832:	2311      	movs	r3, #17
 800a834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a836:	2340      	movs	r3, #64	; 0x40
 800a838:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a83a:	2300      	movs	r3, #0
 800a83c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a83e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a842:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a844:	f107 0308 	add.w	r3, r7, #8
 800a848:	4619      	mov	r1, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f7ff ff52 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a850:	f241 3288 	movw	r2, #5000	; 0x1388
 800a854:	2111      	movs	r1, #17
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f9f8 	bl	800ac4c <SDMMC_GetCmdResp1>
 800a85c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a85e:	69fb      	ldr	r3, [r7, #28]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3720      	adds	r7, #32
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a876:	2312      	movs	r3, #18
 800a878:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a87a:	2340      	movs	r3, #64	; 0x40
 800a87c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a87e:	2300      	movs	r3, #0
 800a880:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a886:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a888:	f107 0308 	add.w	r3, r7, #8
 800a88c:	4619      	mov	r1, r3
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7ff ff30 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a894:	f241 3288 	movw	r2, #5000	; 0x1388
 800a898:	2112      	movs	r1, #18
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f9d6 	bl	800ac4c <SDMMC_GetCmdResp1>
 800a8a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8a2:	69fb      	ldr	r3, [r7, #28]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3720      	adds	r7, #32
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b088      	sub	sp, #32
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a8ba:	2318      	movs	r3, #24
 800a8bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8be:	2340      	movs	r3, #64	; 0x40
 800a8c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8cc:	f107 0308 	add.w	r3, r7, #8
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7ff ff0e 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a8d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8dc:	2118      	movs	r1, #24
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f9b4 	bl	800ac4c <SDMMC_GetCmdResp1>
 800a8e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8e6:	69fb      	ldr	r3, [r7, #28]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3720      	adds	r7, #32
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b088      	sub	sp, #32
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a8fe:	2319      	movs	r3, #25
 800a900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a902:	2340      	movs	r3, #64	; 0x40
 800a904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a906:	2300      	movs	r3, #0
 800a908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a90a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a90e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a910:	f107 0308 	add.w	r3, r7, #8
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7ff feec 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a91c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a920:	2119      	movs	r1, #25
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f992 	bl	800ac4c <SDMMC_GetCmdResp1>
 800a928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a92a:	69fb      	ldr	r3, [r7, #28]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3720      	adds	r7, #32
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b088      	sub	sp, #32
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a93c:	2300      	movs	r3, #0
 800a93e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a940:	230c      	movs	r3, #12
 800a942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a944:	2340      	movs	r3, #64	; 0x40
 800a946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a948:	2300      	movs	r3, #0
 800a94a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a94c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a950:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a952:	f107 0308 	add.w	r3, r7, #8
 800a956:	4619      	mov	r1, r3
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff fecb 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a95e:	4a05      	ldr	r2, [pc, #20]	; (800a974 <SDMMC_CmdStopTransfer+0x40>)
 800a960:	210c      	movs	r1, #12
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f972 	bl	800ac4c <SDMMC_GetCmdResp1>
 800a968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a96a:	69fb      	ldr	r3, [r7, #28]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3720      	adds	r7, #32
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	05f5e100 	.word	0x05f5e100

0800a978 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08a      	sub	sp, #40	; 0x28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a988:	2307      	movs	r3, #7
 800a98a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a98c:	2340      	movs	r3, #64	; 0x40
 800a98e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a990:	2300      	movs	r3, #0
 800a992:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a998:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a99a:	f107 0310 	add.w	r3, r7, #16
 800a99e:	4619      	mov	r1, r3
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f7ff fea7 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a9a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9aa:	2107      	movs	r1, #7
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f000 f94d 	bl	800ac4c <SDMMC_GetCmdResp1>
 800a9b2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3728      	adds	r7, #40	; 0x28
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b088      	sub	sp, #32
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9dc:	f107 0308 	add.w	r3, r7, #8
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7ff fe86 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fb67 	bl	800b0bc <SDMMC_GetCmdError>
 800a9ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9f0:	69fb      	ldr	r3, [r7, #28]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3720      	adds	r7, #32
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b088      	sub	sp, #32
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aa02:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aa06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aa08:	2308      	movs	r3, #8
 800aa0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa0c:	2340      	movs	r3, #64	; 0x40
 800aa0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa10:	2300      	movs	r3, #0
 800aa12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa1a:	f107 0308 	add.w	r3, r7, #8
 800aa1e:	4619      	mov	r1, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7ff fe67 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fafa 	bl	800b020 <SDMMC_GetCmdResp7>
 800aa2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa2e:	69fb      	ldr	r3, [r7, #28]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3720      	adds	r7, #32
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aa46:	2337      	movs	r3, #55	; 0x37
 800aa48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa4a:	2340      	movs	r3, #64	; 0x40
 800aa4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa58:	f107 0308 	add.w	r3, r7, #8
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff fe48 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800aa64:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa68:	2137      	movs	r1, #55	; 0x37
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f8ee 	bl	800ac4c <SDMMC_GetCmdResp1>
 800aa70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa72:	69fb      	ldr	r3, [r7, #28]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3720      	adds	r7, #32
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800aa86:	683a      	ldr	r2, [r7, #0]
 800aa88:	4b0d      	ldr	r3, [pc, #52]	; (800aac0 <SDMMC_CmdAppOperCommand+0x44>)
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aa8e:	2329      	movs	r3, #41	; 0x29
 800aa90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa92:	2340      	movs	r3, #64	; 0x40
 800aa94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa96:	2300      	movs	r3, #0
 800aa98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aaa0:	f107 0308 	add.w	r3, r7, #8
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7ff fe24 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fa03 	bl	800aeb8 <SDMMC_GetCmdResp3>
 800aab2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aab4:	69fb      	ldr	r3, [r7, #28]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3720      	adds	r7, #32
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	80100000 	.word	0x80100000

0800aac4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b088      	sub	sp, #32
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800aad2:	2306      	movs	r3, #6
 800aad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aad6:	2340      	movs	r3, #64	; 0x40
 800aad8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aada:	2300      	movs	r3, #0
 800aadc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aae2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aae4:	f107 0308 	add.w	r3, r7, #8
 800aae8:	4619      	mov	r1, r3
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f7ff fe02 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800aaf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf4:	2106      	movs	r1, #6
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f8a8 	bl	800ac4c <SDMMC_GetCmdResp1>
 800aafc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aafe:	69fb      	ldr	r3, [r7, #28]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3720      	adds	r7, #32
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ab10:	2300      	movs	r3, #0
 800ab12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ab14:	2333      	movs	r3, #51	; 0x33
 800ab16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab18:	2340      	movs	r3, #64	; 0x40
 800ab1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab26:	f107 0308 	add.w	r3, r7, #8
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7ff fde1 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ab32:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab36:	2133      	movs	r1, #51	; 0x33
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f887 	bl	800ac4c <SDMMC_GetCmdResp1>
 800ab3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab40:	69fb      	ldr	r3, [r7, #28]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3720      	adds	r7, #32
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b088      	sub	sp, #32
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ab56:	2302      	movs	r3, #2
 800ab58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ab5a:	23c0      	movs	r3, #192	; 0xc0
 800ab5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab68:	f107 0308 	add.w	r3, r7, #8
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff fdc0 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f957 	bl	800ae28 <SDMMC_GetCmdResp2>
 800ab7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab7c:	69fb      	ldr	r3, [r7, #28]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3720      	adds	r7, #32
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b088      	sub	sp, #32
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ab94:	2309      	movs	r3, #9
 800ab96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ab98:	23c0      	movs	r3, #192	; 0xc0
 800ab9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aba4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aba6:	f107 0308 	add.w	r3, r7, #8
 800abaa:	4619      	mov	r1, r3
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f7ff fda1 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f938 	bl	800ae28 <SDMMC_GetCmdResp2>
 800abb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abba:	69fb      	ldr	r3, [r7, #28]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3720      	adds	r7, #32
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800abce:	2300      	movs	r3, #0
 800abd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800abd2:	2303      	movs	r3, #3
 800abd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abd6:	2340      	movs	r3, #64	; 0x40
 800abd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abda:	2300      	movs	r3, #0
 800abdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abe2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abe4:	f107 0308 	add.w	r3, r7, #8
 800abe8:	4619      	mov	r1, r3
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7ff fd82 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800abf0:	683a      	ldr	r2, [r7, #0]
 800abf2:	2103      	movs	r1, #3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f99d 	bl	800af34 <SDMMC_GetCmdResp6>
 800abfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abfc:	69fb      	ldr	r3, [r7, #28]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3720      	adds	r7, #32
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b088      	sub	sp, #32
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ac14:	230d      	movs	r3, #13
 800ac16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac18:	2340      	movs	r3, #64	; 0x40
 800ac1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac26:	f107 0308 	add.w	r3, r7, #8
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7ff fd61 	bl	800a6f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ac32:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac36:	210d      	movs	r1, #13
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f807 	bl	800ac4c <SDMMC_GetCmdResp1>
 800ac3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac40:	69fb      	ldr	r3, [r7, #28]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3720      	adds	r7, #32
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
	...

0800ac4c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b088      	sub	sp, #32
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	460b      	mov	r3, r1
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ac5a:	4b70      	ldr	r3, [pc, #448]	; (800ae1c <SDMMC_GetCmdResp1+0x1d0>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a70      	ldr	r2, [pc, #448]	; (800ae20 <SDMMC_GetCmdResp1+0x1d4>)
 800ac60:	fba2 2303 	umull	r2, r3, r2, r3
 800ac64:	0a5a      	lsrs	r2, r3, #9
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	fb02 f303 	mul.w	r3, r2, r3
 800ac6c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	1e5a      	subs	r2, r3, #1
 800ac72:	61fa      	str	r2, [r7, #28]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d102      	bne.n	800ac7e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac7c:	e0c9      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac82:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0ef      	beq.n	800ac6e <SDMMC_GetCmdResp1+0x22>
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1ea      	bne.n	800ac6e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac9c:	f003 0304 	and.w	r3, r3, #4
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d004      	beq.n	800acae <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2204      	movs	r2, #4
 800aca8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800acaa:	2304      	movs	r3, #4
 800acac:	e0b1      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d004      	beq.n	800acc4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2201      	movs	r2, #1
 800acbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e0a6      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	22c5      	movs	r2, #197	; 0xc5
 800acc8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f7ff fd3c 	bl	800a748 <SDMMC_GetCommandResponse>
 800acd0:	4603      	mov	r3, r0
 800acd2:	461a      	mov	r2, r3
 800acd4:	7afb      	ldrb	r3, [r7, #11]
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d001      	beq.n	800acde <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acda:	2301      	movs	r3, #1
 800acdc:	e099      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800acde:	2100      	movs	r1, #0
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f7ff fd3e 	bl	800a762 <SDMMC_GetResponse>
 800ace6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ace8:	697a      	ldr	r2, [r7, #20]
 800acea:	4b4e      	ldr	r3, [pc, #312]	; (800ae24 <SDMMC_GetCmdResp1+0x1d8>)
 800acec:	4013      	ands	r3, r2
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800acf2:	2300      	movs	r3, #0
 800acf4:	e08d      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	da02      	bge.n	800ad02 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800acfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad00:	e087      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ad0c:	2340      	movs	r3, #64	; 0x40
 800ad0e:	e080      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ad1a:	2380      	movs	r3, #128	; 0x80
 800ad1c:	e079      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ad28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad2c:	e071      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d002      	beq.n	800ad3e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ad38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad3c:	e069      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ad48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad4c:	e061      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d002      	beq.n	800ad5e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ad58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad5c:	e059      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d002      	beq.n	800ad6e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ad68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad6c:	e051      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d002      	beq.n	800ad7e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ad78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad7c:	e049      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d002      	beq.n	800ad8e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ad88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ad8c:	e041      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ad98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad9c:	e039      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ada8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800adac:	e031      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800adb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800adbc:	e029      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d002      	beq.n	800adce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800adc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800adcc:	e021      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800add8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800addc:	e019      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ade8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800adec:	e011      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800adf8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800adfc:	e009      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	f003 0308 	and.w	r3, r3, #8
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ae08:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ae0c:	e001      	b.n	800ae12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3720      	adds	r7, #32
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	200009cc 	.word	0x200009cc
 800ae20:	10624dd3 	.word	0x10624dd3
 800ae24:	fdffe008 	.word	0xfdffe008

0800ae28 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae30:	4b1f      	ldr	r3, [pc, #124]	; (800aeb0 <SDMMC_GetCmdResp2+0x88>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a1f      	ldr	r2, [pc, #124]	; (800aeb4 <SDMMC_GetCmdResp2+0x8c>)
 800ae36:	fba2 2303 	umull	r2, r3, r2, r3
 800ae3a:	0a5b      	lsrs	r3, r3, #9
 800ae3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae40:	fb02 f303 	mul.w	r3, r2, r3
 800ae44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	1e5a      	subs	r2, r3, #1
 800ae4a:	60fa      	str	r2, [r7, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d102      	bne.n	800ae56 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae54:	e026      	b.n	800aea4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0ef      	beq.n	800ae46 <SDMMC_GetCmdResp2+0x1e>
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1ea      	bne.n	800ae46 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d004      	beq.n	800ae86 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2204      	movs	r2, #4
 800ae80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae82:	2304      	movs	r3, #4
 800ae84:	e00e      	b.n	800aea4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d004      	beq.n	800ae9c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e003      	b.n	800aea4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	22c5      	movs	r2, #197	; 0xc5
 800aea0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	200009cc 	.word	0x200009cc
 800aeb4:	10624dd3 	.word	0x10624dd3

0800aeb8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aec0:	4b1a      	ldr	r3, [pc, #104]	; (800af2c <SDMMC_GetCmdResp3+0x74>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a1a      	ldr	r2, [pc, #104]	; (800af30 <SDMMC_GetCmdResp3+0x78>)
 800aec6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeca:	0a5b      	lsrs	r3, r3, #9
 800aecc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aed0:	fb02 f303 	mul.w	r3, r2, r3
 800aed4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	1e5a      	subs	r2, r3, #1
 800aeda:	60fa      	str	r2, [r7, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d102      	bne.n	800aee6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aee0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aee4:	e01b      	b.n	800af1e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d0ef      	beq.n	800aed6 <SDMMC_GetCmdResp3+0x1e>
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1ea      	bne.n	800aed6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af04:	f003 0304 	and.w	r3, r3, #4
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d004      	beq.n	800af16 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2204      	movs	r2, #4
 800af10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af12:	2304      	movs	r3, #4
 800af14:	e003      	b.n	800af1e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	22c5      	movs	r2, #197	; 0xc5
 800af1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	200009cc 	.word	0x200009cc
 800af30:	10624dd3 	.word	0x10624dd3

0800af34 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b088      	sub	sp, #32
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	460b      	mov	r3, r1
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af42:	4b35      	ldr	r3, [pc, #212]	; (800b018 <SDMMC_GetCmdResp6+0xe4>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a35      	ldr	r2, [pc, #212]	; (800b01c <SDMMC_GetCmdResp6+0xe8>)
 800af48:	fba2 2303 	umull	r2, r3, r2, r3
 800af4c:	0a5b      	lsrs	r3, r3, #9
 800af4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af52:	fb02 f303 	mul.w	r3, r2, r3
 800af56:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	1e5a      	subs	r2, r3, #1
 800af5c:	61fa      	str	r2, [r7, #28]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d102      	bne.n	800af68 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af66:	e052      	b.n	800b00e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800af74:	2b00      	cmp	r3, #0
 800af76:	d0ef      	beq.n	800af58 <SDMMC_GetCmdResp6+0x24>
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1ea      	bne.n	800af58 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af86:	f003 0304 	and.w	r3, r3, #4
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d004      	beq.n	800af98 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2204      	movs	r2, #4
 800af92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af94:	2304      	movs	r3, #4
 800af96:	e03a      	b.n	800b00e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af9c:	f003 0301 	and.w	r3, r3, #1
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d004      	beq.n	800afae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2201      	movs	r2, #1
 800afa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afaa:	2301      	movs	r3, #1
 800afac:	e02f      	b.n	800b00e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f7ff fbca 	bl	800a748 <SDMMC_GetCommandResponse>
 800afb4:	4603      	mov	r3, r0
 800afb6:	461a      	mov	r2, r3
 800afb8:	7afb      	ldrb	r3, [r7, #11]
 800afba:	4293      	cmp	r3, r2
 800afbc:	d001      	beq.n	800afc2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afbe:	2301      	movs	r3, #1
 800afc0:	e025      	b.n	800b00e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	22c5      	movs	r2, #197	; 0xc5
 800afc6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800afc8:	2100      	movs	r1, #0
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f7ff fbc9 	bl	800a762 <SDMMC_GetResponse>
 800afd0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d106      	bne.n	800afea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	0c1b      	lsrs	r3, r3, #16
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800afe6:	2300      	movs	r3, #0
 800afe8:	e011      	b.n	800b00e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d002      	beq.n	800affa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aff8:	e009      	b.n	800b00e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b000:	2b00      	cmp	r3, #0
 800b002:	d002      	beq.n	800b00a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b008:	e001      	b.n	800b00e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b00a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3720      	adds	r7, #32
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	200009cc 	.word	0x200009cc
 800b01c:	10624dd3 	.word	0x10624dd3

0800b020 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b028:	4b22      	ldr	r3, [pc, #136]	; (800b0b4 <SDMMC_GetCmdResp7+0x94>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a22      	ldr	r2, [pc, #136]	; (800b0b8 <SDMMC_GetCmdResp7+0x98>)
 800b02e:	fba2 2303 	umull	r2, r3, r2, r3
 800b032:	0a5b      	lsrs	r3, r3, #9
 800b034:	f241 3288 	movw	r2, #5000	; 0x1388
 800b038:	fb02 f303 	mul.w	r3, r2, r3
 800b03c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	1e5a      	subs	r2, r3, #1
 800b042:	60fa      	str	r2, [r7, #12]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d102      	bne.n	800b04e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b048:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b04c:	e02c      	b.n	800b0a8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b052:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0ef      	beq.n	800b03e <SDMMC_GetCmdResp7+0x1e>
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1ea      	bne.n	800b03e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b06c:	f003 0304 	and.w	r3, r3, #4
 800b070:	2b00      	cmp	r3, #0
 800b072:	d004      	beq.n	800b07e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2204      	movs	r2, #4
 800b078:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b07a:	2304      	movs	r3, #4
 800b07c:	e014      	b.n	800b0a8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b082:	f003 0301 	and.w	r3, r3, #1
 800b086:	2b00      	cmp	r3, #0
 800b088:	d004      	beq.n	800b094 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2201      	movs	r2, #1
 800b08e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b090:	2301      	movs	r3, #1
 800b092:	e009      	b.n	800b0a8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d002      	beq.n	800b0a6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2240      	movs	r2, #64	; 0x40
 800b0a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b0a6:	2300      	movs	r3, #0
  
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3714      	adds	r7, #20
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	200009cc 	.word	0x200009cc
 800b0b8:	10624dd3 	.word	0x10624dd3

0800b0bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0c4:	4b11      	ldr	r3, [pc, #68]	; (800b10c <SDMMC_GetCmdError+0x50>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a11      	ldr	r2, [pc, #68]	; (800b110 <SDMMC_GetCmdError+0x54>)
 800b0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ce:	0a5b      	lsrs	r3, r3, #9
 800b0d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0d4:	fb02 f303 	mul.w	r3, r2, r3
 800b0d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	1e5a      	subs	r2, r3, #1
 800b0de:	60fa      	str	r2, [r7, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d102      	bne.n	800b0ea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0e8:	e009      	b.n	800b0fe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d0f1      	beq.n	800b0da <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	22c5      	movs	r2, #197	; 0xc5
 800b0fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3714      	adds	r7, #20
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	200009cc 	.word	0x200009cc
 800b110:	10624dd3 	.word	0x10624dd3

0800b114 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b118:	4904      	ldr	r1, [pc, #16]	; (800b12c <MX_FATFS_Init+0x18>)
 800b11a:	4805      	ldr	r0, [pc, #20]	; (800b130 <MX_FATFS_Init+0x1c>)
 800b11c:	f002 fca2 	bl	800da64 <FATFS_LinkDriver>
 800b120:	4603      	mov	r3, r0
 800b122:	461a      	mov	r2, r3
 800b124:	4b03      	ldr	r3, [pc, #12]	; (800b134 <MX_FATFS_Init+0x20>)
 800b126:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b128:	bf00      	nop
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	200097ac 	.word	0x200097ac
 800b130:	08012ea8 	.word	0x08012ea8
 800b134:	200097a8 	.word	0x200097a8

0800b138 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b138:	b480      	push	{r7}
 800b13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b13c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b13e:	4618      	mov	r0, r3
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b152:	f000 f896 	bl	800b282 <BSP_SD_IsDetected>
 800b156:	4603      	mov	r3, r0
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d001      	beq.n	800b160 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b15c:	2302      	movs	r3, #2
 800b15e:	e012      	b.n	800b186 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800b160:	480b      	ldr	r0, [pc, #44]	; (800b190 <BSP_SD_Init+0x48>)
 800b162:	f7fc ff65 	bl	8008030 <HAL_SD_Init>
 800b166:	4603      	mov	r3, r0
 800b168:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b16a:	79fb      	ldrb	r3, [r7, #7]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d109      	bne.n	800b184 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b174:	4806      	ldr	r0, [pc, #24]	; (800b190 <BSP_SD_Init+0x48>)
 800b176:	f7fd fd2b 	bl	8008bd0 <HAL_SD_ConfigWideBusOperation>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b184:	79fb      	ldrb	r3, [r7, #7]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	200095e8 	.word	0x200095e8

0800b194 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	68f9      	ldr	r1, [r7, #12]
 800b1aa:	4806      	ldr	r0, [pc, #24]	; (800b1c4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b1ac:	f7fc fff8 	bl	80081a0 <HAL_SD_ReadBlocks_DMA>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d001      	beq.n	800b1ba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b1ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	200095e8 	.word	0x200095e8

0800b1c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	68f9      	ldr	r1, [r7, #12]
 800b1de:	4806      	ldr	r0, [pc, #24]	; (800b1f8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b1e0:	f7fd f8c0 	bl	8008364 <HAL_SD_WriteBlocks_DMA>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d001      	beq.n	800b1ee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b1ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3718      	adds	r7, #24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	200095e8 	.word	0x200095e8

0800b1fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b200:	4805      	ldr	r0, [pc, #20]	; (800b218 <BSP_SD_GetCardState+0x1c>)
 800b202:	f7fd fd7f 	bl	8008d04 <HAL_SD_GetCardState>
 800b206:	4603      	mov	r3, r0
 800b208:	2b04      	cmp	r3, #4
 800b20a:	bf14      	ite	ne
 800b20c:	2301      	movne	r3, #1
 800b20e:	2300      	moveq	r3, #0
 800b210:	b2db      	uxtb	r3, r3
}
 800b212:	4618      	mov	r0, r3
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	200095e8 	.word	0x200095e8

0800b21c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800b224:	6879      	ldr	r1, [r7, #4]
 800b226:	4803      	ldr	r0, [pc, #12]	; (800b234 <BSP_SD_GetCardInfo+0x18>)
 800b228:	f7fd fca6 	bl	8008b78 <HAL_SD_GetCardInfo>
}
 800b22c:	bf00      	nop
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	200095e8 	.word	0x200095e8

0800b238 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b240:	f000 f818 	bl	800b274 <BSP_SD_AbortCallback>
}
 800b244:	bf00      	nop
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b254:	f000 f9c4 	bl	800b5e0 <BSP_SD_WriteCpltCallback>
}
 800b258:	bf00      	nop
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b268:	f000 f9c8 	bl	800b5fc <BSP_SD_ReadCpltCallback>
}
 800b26c:	bf00      	nop
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b274:	b480      	push	{r7}
 800b276:	af00      	add	r7, sp, #0

}
 800b278:	bf00      	nop
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b082      	sub	sp, #8
 800b286:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b288:	2301      	movs	r3, #1
 800b28a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b28c:	f000 f80c 	bl	800b2a8 <BSP_PlatformIsDetected>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d101      	bne.n	800b29a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b296:	2300      	movs	r3, #0
 800b298:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b29a:	79fb      	ldrb	r3, [r7, #7]
 800b29c:	b2db      	uxtb	r3, r3
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
	...

0800b2a8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b2b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b2b6:	4806      	ldr	r0, [pc, #24]	; (800b2d0 <BSP_PlatformIsDetected+0x28>)
 800b2b8:	f7fb fd10 	bl	8006cdc <HAL_GPIO_ReadPin>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b2c6:	79fb      	ldrb	r3, [r7, #7]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	40022000 	.word	0x40022000

0800b2d4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b2dc:	f002 fc5a 	bl	800db94 <osKernelSysTick>
 800b2e0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b2e2:	e006      	b.n	800b2f2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b2e4:	f7ff ff8a 	bl	800b1fc <BSP_SD_GetCardState>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	e009      	b.n	800b306 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b2f2:	f002 fc4f 	bl	800db94 <osKernelSysTick>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d8f0      	bhi.n	800b2e4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
	...

0800b310 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	4603      	mov	r3, r0
 800b318:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b31a:	4b0b      	ldr	r3, [pc, #44]	; (800b348 <SD_CheckStatus+0x38>)
 800b31c:	2201      	movs	r2, #1
 800b31e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b320:	f7ff ff6c 	bl	800b1fc <BSP_SD_GetCardState>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d107      	bne.n	800b33a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b32a:	4b07      	ldr	r3, [pc, #28]	; (800b348 <SD_CheckStatus+0x38>)
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	f023 0301 	bic.w	r3, r3, #1
 800b334:	b2da      	uxtb	r2, r3
 800b336:	4b04      	ldr	r3, [pc, #16]	; (800b348 <SD_CheckStatus+0x38>)
 800b338:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b33a:	4b03      	ldr	r3, [pc, #12]	; (800b348 <SD_CheckStatus+0x38>)
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	b2db      	uxtb	r3, r3
}
 800b340:	4618      	mov	r0, r3
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	200009d5 	.word	0x200009d5

0800b34c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b34c:	b590      	push	{r4, r7, lr}
 800b34e:	b087      	sub	sp, #28
 800b350:	af00      	add	r7, sp, #0
 800b352:	4603      	mov	r3, r0
 800b354:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b356:	4b20      	ldr	r3, [pc, #128]	; (800b3d8 <SD_initialize+0x8c>)
 800b358:	2201      	movs	r2, #1
 800b35a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b35c:	f002 fc0e 	bl	800db7c <osKernelRunning>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d030      	beq.n	800b3c8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b366:	f7ff feef 	bl	800b148 <BSP_SD_Init>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d107      	bne.n	800b380 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b370:	79fb      	ldrb	r3, [r7, #7]
 800b372:	4618      	mov	r0, r3
 800b374:	f7ff ffcc 	bl	800b310 <SD_CheckStatus>
 800b378:	4603      	mov	r3, r0
 800b37a:	461a      	mov	r2, r3
 800b37c:	4b16      	ldr	r3, [pc, #88]	; (800b3d8 <SD_initialize+0x8c>)
 800b37e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b380:	4b15      	ldr	r3, [pc, #84]	; (800b3d8 <SD_initialize+0x8c>)
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	b2db      	uxtb	r3, r3
 800b386:	2b01      	cmp	r3, #1
 800b388:	d01e      	beq.n	800b3c8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b38a:	4b14      	ldr	r3, [pc, #80]	; (800b3dc <SD_initialize+0x90>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10e      	bne.n	800b3b0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b392:	4b13      	ldr	r3, [pc, #76]	; (800b3e0 <SD_initialize+0x94>)
 800b394:	f107 0408 	add.w	r4, r7, #8
 800b398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b39a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b39e:	f107 0308 	add.w	r3, r7, #8
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f002 fd2e 	bl	800de06 <osMessageCreate>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	4a0b      	ldr	r2, [pc, #44]	; (800b3dc <SD_initialize+0x90>)
 800b3ae:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b3b0:	4b0a      	ldr	r3, [pc, #40]	; (800b3dc <SD_initialize+0x90>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d107      	bne.n	800b3c8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b3b8:	4b07      	ldr	r3, [pc, #28]	; (800b3d8 <SD_initialize+0x8c>)
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	f043 0301 	orr.w	r3, r3, #1
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	4b04      	ldr	r3, [pc, #16]	; (800b3d8 <SD_initialize+0x8c>)
 800b3c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b3c8:	4b03      	ldr	r3, [pc, #12]	; (800b3d8 <SD_initialize+0x8c>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	b2db      	uxtb	r3, r3
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	371c      	adds	r7, #28
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd90      	pop	{r4, r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	200009d5 	.word	0x200009d5
 800b3dc:	200057cc 	.word	0x200057cc
 800b3e0:	08012e2c 	.word	0x08012e2c

0800b3e4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b3ee:	79fb      	ldrb	r3, [r7, #7]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7ff ff8d 	bl	800b310 <SD_CheckStatus>
 800b3f6:	4603      	mov	r3, r0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b08a      	sub	sp, #40	; 0x28
 800b404:	af00      	add	r7, sp, #0
 800b406:	60b9      	str	r1, [r7, #8]
 800b408:	607a      	str	r2, [r7, #4]
 800b40a:	603b      	str	r3, [r7, #0]
 800b40c:	4603      	mov	r3, r0
 800b40e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800b410:	2301      	movs	r3, #1
 800b412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b416:	f247 5030 	movw	r0, #30000	; 0x7530
 800b41a:	f7ff ff5b 	bl	800b2d4 <SD_CheckStatusWithTimeout>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	da02      	bge.n	800b42a <SD_read+0x2a>
  {
    return res;
 800b424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b428:	e032      	b.n	800b490 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	6879      	ldr	r1, [r7, #4]
 800b42e:	68b8      	ldr	r0, [r7, #8]
 800b430:	f7ff feb0 	bl	800b194 <BSP_SD_ReadBlocks_DMA>
 800b434:	4603      	mov	r3, r0
 800b436:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800b43a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d124      	bne.n	800b48c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b442:	4b15      	ldr	r3, [pc, #84]	; (800b498 <SD_read+0x98>)
 800b444:	6819      	ldr	r1, [r3, #0]
 800b446:	f107 0314 	add.w	r3, r7, #20
 800b44a:	f247 5230 	movw	r2, #30000	; 0x7530
 800b44e:	4618      	mov	r0, r3
 800b450:	f002 fd42 	bl	800ded8 <osMessageGet>

    if (event.status == osEventMessage)
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	2b10      	cmp	r3, #16
 800b458:	d118      	bne.n	800b48c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d115      	bne.n	800b48c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b460:	f002 fb98 	bl	800db94 <osKernelSysTick>
 800b464:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b466:	e008      	b.n	800b47a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b468:	f7ff fec8 	bl	800b1fc <BSP_SD_GetCardState>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d103      	bne.n	800b47a <SD_read+0x7a>
              {
                res = RES_OK;
 800b472:	2300      	movs	r3, #0
 800b474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b478:	e008      	b.n	800b48c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b47a:	f002 fb8b 	bl	800db94 <osKernelSysTick>
 800b47e:	4602      	mov	r2, r0
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	f247 522f 	movw	r2, #29999	; 0x752f
 800b488:	4293      	cmp	r3, r2
 800b48a:	d9ed      	bls.n	800b468 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b490:	4618      	mov	r0, r3
 800b492:	3728      	adds	r7, #40	; 0x28
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	200057cc 	.word	0x200057cc

0800b49c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08a      	sub	sp, #40	; 0x28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60b9      	str	r1, [r7, #8]
 800b4a4:	607a      	str	r2, [r7, #4]
 800b4a6:	603b      	str	r3, [r7, #0]
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b4b2:	f247 5030 	movw	r0, #30000	; 0x7530
 800b4b6:	f7ff ff0d 	bl	800b2d4 <SD_CheckStatusWithTimeout>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	da02      	bge.n	800b4c6 <SD_write+0x2a>
  {
    return res;
 800b4c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4c4:	e02e      	b.n	800b524 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	6879      	ldr	r1, [r7, #4]
 800b4ca:	68b8      	ldr	r0, [r7, #8]
 800b4cc:	f7ff fe7c 	bl	800b1c8 <BSP_SD_WriteBlocks_DMA>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d124      	bne.n	800b520 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b4d6:	4b15      	ldr	r3, [pc, #84]	; (800b52c <SD_write+0x90>)
 800b4d8:	6819      	ldr	r1, [r3, #0]
 800b4da:	f107 0314 	add.w	r3, r7, #20
 800b4de:	f247 5230 	movw	r2, #30000	; 0x7530
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f002 fcf8 	bl	800ded8 <osMessageGet>

    if (event.status == osEventMessage)
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	2b10      	cmp	r3, #16
 800b4ec:	d118      	bne.n	800b520 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d115      	bne.n	800b520 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b4f4:	f002 fb4e 	bl	800db94 <osKernelSysTick>
 800b4f8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b4fa:	e008      	b.n	800b50e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b4fc:	f7ff fe7e 	bl	800b1fc <BSP_SD_GetCardState>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d103      	bne.n	800b50e <SD_write+0x72>
          {
            res = RES_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b50c:	e008      	b.n	800b520 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b50e:	f002 fb41 	bl	800db94 <osKernelSysTick>
 800b512:	4602      	mov	r2, r0
 800b514:	6a3b      	ldr	r3, [r7, #32]
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	f247 522f 	movw	r2, #29999	; 0x752f
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d9ed      	bls.n	800b4fc <SD_write+0x60>
    }

  }
#endif

  return res;
 800b520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b524:	4618      	mov	r0, r3
 800b526:	3728      	adds	r7, #40	; 0x28
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	200057cc 	.word	0x200057cc

0800b530 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b08c      	sub	sp, #48	; 0x30
 800b534:	af00      	add	r7, sp, #0
 800b536:	4603      	mov	r3, r0
 800b538:	603a      	str	r2, [r7, #0]
 800b53a:	71fb      	strb	r3, [r7, #7]
 800b53c:	460b      	mov	r3, r1
 800b53e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b546:	4b25      	ldr	r3, [pc, #148]	; (800b5dc <SD_ioctl+0xac>)
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	f003 0301 	and.w	r3, r3, #1
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <SD_ioctl+0x28>
 800b554:	2303      	movs	r3, #3
 800b556:	e03c      	b.n	800b5d2 <SD_ioctl+0xa2>

  switch (cmd)
 800b558:	79bb      	ldrb	r3, [r7, #6]
 800b55a:	2b03      	cmp	r3, #3
 800b55c:	d834      	bhi.n	800b5c8 <SD_ioctl+0x98>
 800b55e:	a201      	add	r2, pc, #4	; (adr r2, 800b564 <SD_ioctl+0x34>)
 800b560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b564:	0800b575 	.word	0x0800b575
 800b568:	0800b57d 	.word	0x0800b57d
 800b56c:	0800b595 	.word	0x0800b595
 800b570:	0800b5af 	.word	0x0800b5af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b574:	2300      	movs	r3, #0
 800b576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b57a:	e028      	b.n	800b5ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b57c:	f107 030c 	add.w	r3, r7, #12
 800b580:	4618      	mov	r0, r3
 800b582:	f7ff fe4b 	bl	800b21c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b592:	e01c      	b.n	800b5ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b594:	f107 030c 	add.w	r3, r7, #12
 800b598:	4618      	mov	r0, r3
 800b59a:	f7ff fe3f 	bl	800b21c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b5ac:	e00f      	b.n	800b5ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b5ae:	f107 030c 	add.w	r3, r7, #12
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff fe32 	bl	800b21c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ba:	0a5a      	lsrs	r2, r3, #9
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b5c6:	e002      	b.n	800b5ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b5c8:	2304      	movs	r3, #4
 800b5ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b5ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3730      	adds	r7, #48	; 0x30
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	200009d5 	.word	0x200009d5

0800b5e0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800b5e4:	4b04      	ldr	r3, [pc, #16]	; (800b5f8 <BSP_SD_WriteCpltCallback+0x18>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	2102      	movs	r1, #2
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f002 fc33 	bl	800de58 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b5f2:	bf00      	nop
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	200057cc 	.word	0x200057cc

0800b5fc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b600:	4b04      	ldr	r3, [pc, #16]	; (800b614 <BSP_SD_ReadCpltCallback+0x18>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2200      	movs	r2, #0
 800b606:	2101      	movs	r1, #1
 800b608:	4618      	mov	r0, r3
 800b60a:	f002 fc25 	bl	800de58 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b60e:	bf00      	nop
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	200057cc 	.word	0x200057cc

0800b618 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	4603      	mov	r3, r0
 800b620:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b622:	79fb      	ldrb	r3, [r7, #7]
 800b624:	4a08      	ldr	r2, [pc, #32]	; (800b648 <disk_status+0x30>)
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4413      	add	r3, r2
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	79fa      	ldrb	r2, [r7, #7]
 800b630:	4905      	ldr	r1, [pc, #20]	; (800b648 <disk_status+0x30>)
 800b632:	440a      	add	r2, r1
 800b634:	7a12      	ldrb	r2, [r2, #8]
 800b636:	4610      	mov	r0, r2
 800b638:	4798      	blx	r3
 800b63a:	4603      	mov	r3, r0
 800b63c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	200057f8 	.word	0x200057f8

0800b64c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	4603      	mov	r3, r0
 800b654:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b65a:	79fb      	ldrb	r3, [r7, #7]
 800b65c:	4a0d      	ldr	r2, [pc, #52]	; (800b694 <disk_initialize+0x48>)
 800b65e:	5cd3      	ldrb	r3, [r2, r3]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d111      	bne.n	800b688 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b664:	79fb      	ldrb	r3, [r7, #7]
 800b666:	4a0b      	ldr	r2, [pc, #44]	; (800b694 <disk_initialize+0x48>)
 800b668:	2101      	movs	r1, #1
 800b66a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b66c:	79fb      	ldrb	r3, [r7, #7]
 800b66e:	4a09      	ldr	r2, [pc, #36]	; (800b694 <disk_initialize+0x48>)
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	79fa      	ldrb	r2, [r7, #7]
 800b67a:	4906      	ldr	r1, [pc, #24]	; (800b694 <disk_initialize+0x48>)
 800b67c:	440a      	add	r2, r1
 800b67e:	7a12      	ldrb	r2, [r2, #8]
 800b680:	4610      	mov	r0, r2
 800b682:	4798      	blx	r3
 800b684:	4603      	mov	r3, r0
 800b686:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b688:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	200057f8 	.word	0x200057f8

0800b698 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b698:	b590      	push	{r4, r7, lr}
 800b69a:	b087      	sub	sp, #28
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60b9      	str	r1, [r7, #8]
 800b6a0:	607a      	str	r2, [r7, #4]
 800b6a2:	603b      	str	r3, [r7, #0]
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
 800b6aa:	4a0a      	ldr	r2, [pc, #40]	; (800b6d4 <disk_read+0x3c>)
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	4413      	add	r3, r2
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	689c      	ldr	r4, [r3, #8]
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
 800b6b6:	4a07      	ldr	r2, [pc, #28]	; (800b6d4 <disk_read+0x3c>)
 800b6b8:	4413      	add	r3, r2
 800b6ba:	7a18      	ldrb	r0, [r3, #8]
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	68b9      	ldr	r1, [r7, #8]
 800b6c2:	47a0      	blx	r4
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b6c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	371c      	adds	r7, #28
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd90      	pop	{r4, r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	200057f8 	.word	0x200057f8

0800b6d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b6d8:	b590      	push	{r4, r7, lr}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60b9      	str	r1, [r7, #8]
 800b6e0:	607a      	str	r2, [r7, #4]
 800b6e2:	603b      	str	r3, [r7, #0]
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	4a0a      	ldr	r2, [pc, #40]	; (800b714 <disk_write+0x3c>)
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	4413      	add	r3, r2
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	68dc      	ldr	r4, [r3, #12]
 800b6f4:	7bfb      	ldrb	r3, [r7, #15]
 800b6f6:	4a07      	ldr	r2, [pc, #28]	; (800b714 <disk_write+0x3c>)
 800b6f8:	4413      	add	r3, r2
 800b6fa:	7a18      	ldrb	r0, [r3, #8]
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	68b9      	ldr	r1, [r7, #8]
 800b702:	47a0      	blx	r4
 800b704:	4603      	mov	r3, r0
 800b706:	75fb      	strb	r3, [r7, #23]
  return res;
 800b708:	7dfb      	ldrb	r3, [r7, #23]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	371c      	adds	r7, #28
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd90      	pop	{r4, r7, pc}
 800b712:	bf00      	nop
 800b714:	200057f8 	.word	0x200057f8

0800b718 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	603a      	str	r2, [r7, #0]
 800b722:	71fb      	strb	r3, [r7, #7]
 800b724:	460b      	mov	r3, r1
 800b726:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b728:	79fb      	ldrb	r3, [r7, #7]
 800b72a:	4a09      	ldr	r2, [pc, #36]	; (800b750 <disk_ioctl+0x38>)
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	4413      	add	r3, r2
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	79fa      	ldrb	r2, [r7, #7]
 800b736:	4906      	ldr	r1, [pc, #24]	; (800b750 <disk_ioctl+0x38>)
 800b738:	440a      	add	r2, r1
 800b73a:	7a10      	ldrb	r0, [r2, #8]
 800b73c:	79b9      	ldrb	r1, [r7, #6]
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	4798      	blx	r3
 800b742:	4603      	mov	r3, r0
 800b744:	73fb      	strb	r3, [r7, #15]
  return res;
 800b746:	7bfb      	ldrb	r3, [r7, #15]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	200057f8 	.word	0x200057f8

0800b754 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3301      	adds	r3, #1
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b764:	89fb      	ldrh	r3, [r7, #14]
 800b766:	021b      	lsls	r3, r3, #8
 800b768:	b21a      	sxth	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	b21b      	sxth	r3, r3
 800b770:	4313      	orrs	r3, r2
 800b772:	b21b      	sxth	r3, r3
 800b774:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b776:	89fb      	ldrh	r3, [r7, #14]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3714      	adds	r7, #20
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	3303      	adds	r3, #3
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	021b      	lsls	r3, r3, #8
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	3202      	adds	r2, #2
 800b79c:	7812      	ldrb	r2, [r2, #0]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	021b      	lsls	r3, r3, #8
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	3201      	adds	r2, #1
 800b7aa:	7812      	ldrb	r2, [r2, #0]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	021b      	lsls	r3, r3, #8
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	7812      	ldrb	r2, [r2, #0]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	60fb      	str	r3, [r7, #12]
	return rv;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr

0800b7ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b083      	sub	sp, #12
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	1c5a      	adds	r2, r3, #1
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	887a      	ldrh	r2, [r7, #2]
 800b7de:	b2d2      	uxtb	r2, r2
 800b7e0:	701a      	strb	r2, [r3, #0]
 800b7e2:	887b      	ldrh	r3, [r7, #2]
 800b7e4:	0a1b      	lsrs	r3, r3, #8
 800b7e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	1c5a      	adds	r2, r3, #1
 800b7ec:	607a      	str	r2, [r7, #4]
 800b7ee:	887a      	ldrh	r2, [r7, #2]
 800b7f0:	b2d2      	uxtb	r2, r2
 800b7f2:	701a      	strb	r2, [r3, #0]
}
 800b7f4:	bf00      	nop
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	1c5a      	adds	r2, r3, #1
 800b80e:	607a      	str	r2, [r7, #4]
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	b2d2      	uxtb	r2, r2
 800b814:	701a      	strb	r2, [r3, #0]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	0a1b      	lsrs	r3, r3, #8
 800b81a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	1c5a      	adds	r2, r3, #1
 800b820:	607a      	str	r2, [r7, #4]
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	b2d2      	uxtb	r2, r2
 800b826:	701a      	strb	r2, [r3, #0]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	0a1b      	lsrs	r3, r3, #8
 800b82c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	1c5a      	adds	r2, r3, #1
 800b832:	607a      	str	r2, [r7, #4]
 800b834:	683a      	ldr	r2, [r7, #0]
 800b836:	b2d2      	uxtb	r2, r2
 800b838:	701a      	strb	r2, [r3, #0]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	0a1b      	lsrs	r3, r3, #8
 800b83e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	1c5a      	adds	r2, r3, #1
 800b844:	607a      	str	r2, [r7, #4]
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	b2d2      	uxtb	r2, r2
 800b84a:	701a      	strb	r2, [r3, #0]
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b858:	b480      	push	{r7}
 800b85a:	b087      	sub	sp, #28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00d      	beq.n	800b88e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	1c53      	adds	r3, r2, #1
 800b876:	613b      	str	r3, [r7, #16]
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	1c59      	adds	r1, r3, #1
 800b87c:	6179      	str	r1, [r7, #20]
 800b87e:	7812      	ldrb	r2, [r2, #0]
 800b880:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	3b01      	subs	r3, #1
 800b886:	607b      	str	r3, [r7, #4]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1f1      	bne.n	800b872 <mem_cpy+0x1a>
	}
}
 800b88e:	bf00      	nop
 800b890:	371c      	adds	r7, #28
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b89a:	b480      	push	{r7}
 800b89c:	b087      	sub	sp, #28
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	60f8      	str	r0, [r7, #12]
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	1c5a      	adds	r2, r3, #1
 800b8ae:	617a      	str	r2, [r7, #20]
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	b2d2      	uxtb	r2, r2
 800b8b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	607b      	str	r3, [r7, #4]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1f3      	bne.n	800b8aa <mem_set+0x10>
}
 800b8c2:	bf00      	nop
 800b8c4:	bf00      	nop
 800b8c6:	371c      	adds	r7, #28
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b8d0:	b480      	push	{r7}
 800b8d2:	b089      	sub	sp, #36	; 0x24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	61fb      	str	r3, [r7, #28]
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	1c5a      	adds	r2, r3, #1
 800b8ec:	61fa      	str	r2, [r7, #28]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	1c5a      	adds	r2, r3, #1
 800b8f6:	61ba      	str	r2, [r7, #24]
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	1acb      	subs	r3, r1, r3
 800b8fc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	3b01      	subs	r3, #1
 800b902:	607b      	str	r3, [r7, #4]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <mem_cmp+0x40>
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d0eb      	beq.n	800b8e8 <mem_cmp+0x18>

	return r;
 800b910:	697b      	ldr	r3, [r7, #20]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3724      	adds	r7, #36	; 0x24
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b91e:	b480      	push	{r7}
 800b920:	b083      	sub	sp, #12
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
 800b926:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b928:	e002      	b.n	800b930 <chk_chr+0x12>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	3301      	adds	r3, #1
 800b92e:	607b      	str	r3, [r7, #4]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d005      	beq.n	800b944 <chk_chr+0x26>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	461a      	mov	r2, r3
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	4293      	cmp	r3, r2
 800b942:	d1f2      	bne.n	800b92a <chk_chr+0xc>
	return *str;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	781b      	ldrb	r3, [r3, #0]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d009      	beq.n	800b976 <lock_fs+0x22>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	4618      	mov	r0, r3
 800b968:	f002 f8b7 	bl	800dada <ff_req_grant>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <lock_fs+0x22>
 800b972:	2301      	movs	r3, #1
 800b974:	e000      	b.n	800b978 <lock_fs+0x24>
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00d      	beq.n	800b9ae <unlock_fs+0x2e>
 800b992:	78fb      	ldrb	r3, [r7, #3]
 800b994:	2b0c      	cmp	r3, #12
 800b996:	d00a      	beq.n	800b9ae <unlock_fs+0x2e>
 800b998:	78fb      	ldrb	r3, [r7, #3]
 800b99a:	2b0b      	cmp	r3, #11
 800b99c:	d007      	beq.n	800b9ae <unlock_fs+0x2e>
 800b99e:	78fb      	ldrb	r3, [r7, #3]
 800b9a0:	2b0f      	cmp	r3, #15
 800b9a2:	d004      	beq.n	800b9ae <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f002 f8ab 	bl	800db04 <ff_rel_grant>
	}
}
 800b9ae:	bf00      	nop
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
	...

0800b9b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	60bb      	str	r3, [r7, #8]
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	60fb      	str	r3, [r7, #12]
 800b9ca:	e029      	b.n	800ba20 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b9cc:	4a27      	ldr	r2, [pc, #156]	; (800ba6c <chk_lock+0xb4>)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	011b      	lsls	r3, r3, #4
 800b9d2:	4413      	add	r3, r2
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d01d      	beq.n	800ba16 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b9da:	4a24      	ldr	r2, [pc, #144]	; (800ba6c <chk_lock+0xb4>)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	011b      	lsls	r3, r3, #4
 800b9e0:	4413      	add	r3, r2
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d116      	bne.n	800ba1a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b9ec:	4a1f      	ldr	r2, [pc, #124]	; (800ba6c <chk_lock+0xb4>)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	011b      	lsls	r3, r3, #4
 800b9f2:	4413      	add	r3, r2
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d10c      	bne.n	800ba1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ba00:	4a1a      	ldr	r2, [pc, #104]	; (800ba6c <chk_lock+0xb4>)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	011b      	lsls	r3, r3, #4
 800ba06:	4413      	add	r3, r2
 800ba08:	3308      	adds	r3, #8
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d102      	bne.n	800ba1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ba14:	e007      	b.n	800ba26 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ba16:	2301      	movs	r3, #1
 800ba18:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	60fb      	str	r3, [r7, #12]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d9d2      	bls.n	800b9cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d109      	bne.n	800ba40 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d102      	bne.n	800ba38 <chk_lock+0x80>
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	d101      	bne.n	800ba3c <chk_lock+0x84>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	e010      	b.n	800ba5e <chk_lock+0xa6>
 800ba3c:	2312      	movs	r3, #18
 800ba3e:	e00e      	b.n	800ba5e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d108      	bne.n	800ba58 <chk_lock+0xa0>
 800ba46:	4a09      	ldr	r2, [pc, #36]	; (800ba6c <chk_lock+0xb4>)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	011b      	lsls	r3, r3, #4
 800ba4c:	4413      	add	r3, r2
 800ba4e:	330c      	adds	r3, #12
 800ba50:	881b      	ldrh	r3, [r3, #0]
 800ba52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba56:	d101      	bne.n	800ba5c <chk_lock+0xa4>
 800ba58:	2310      	movs	r3, #16
 800ba5a:	e000      	b.n	800ba5e <chk_lock+0xa6>
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	200057d8 	.word	0x200057d8

0800ba70 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba76:	2300      	movs	r3, #0
 800ba78:	607b      	str	r3, [r7, #4]
 800ba7a:	e002      	b.n	800ba82 <enq_lock+0x12>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	607b      	str	r3, [r7, #4]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d806      	bhi.n	800ba96 <enq_lock+0x26>
 800ba88:	4a09      	ldr	r2, [pc, #36]	; (800bab0 <enq_lock+0x40>)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	011b      	lsls	r3, r3, #4
 800ba8e:	4413      	add	r3, r2
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1f2      	bne.n	800ba7c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	bf14      	ite	ne
 800ba9c:	2301      	movne	r3, #1
 800ba9e:	2300      	moveq	r3, #0
 800baa0:	b2db      	uxtb	r3, r3
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	370c      	adds	r7, #12
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	200057d8 	.word	0x200057d8

0800bab4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800babe:	2300      	movs	r3, #0
 800bac0:	60fb      	str	r3, [r7, #12]
 800bac2:	e01f      	b.n	800bb04 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bac4:	4a41      	ldr	r2, [pc, #260]	; (800bbcc <inc_lock+0x118>)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	011b      	lsls	r3, r3, #4
 800baca:	4413      	add	r3, r2
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d113      	bne.n	800bafe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bad6:	4a3d      	ldr	r2, [pc, #244]	; (800bbcc <inc_lock+0x118>)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	011b      	lsls	r3, r3, #4
 800badc:	4413      	add	r3, r2
 800bade:	3304      	adds	r3, #4
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d109      	bne.n	800bafe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800baea:	4a38      	ldr	r2, [pc, #224]	; (800bbcc <inc_lock+0x118>)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	011b      	lsls	r3, r3, #4
 800baf0:	4413      	add	r3, r2
 800baf2:	3308      	adds	r3, #8
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d006      	beq.n	800bb0c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3301      	adds	r3, #1
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d9dc      	bls.n	800bac4 <inc_lock+0x10>
 800bb0a:	e000      	b.n	800bb0e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bb0c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d132      	bne.n	800bb7a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bb14:	2300      	movs	r3, #0
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	e002      	b.n	800bb20 <inc_lock+0x6c>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	60fb      	str	r3, [r7, #12]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d806      	bhi.n	800bb34 <inc_lock+0x80>
 800bb26:	4a29      	ldr	r2, [pc, #164]	; (800bbcc <inc_lock+0x118>)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	011b      	lsls	r3, r3, #4
 800bb2c:	4413      	add	r3, r2
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d1f2      	bne.n	800bb1a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	d101      	bne.n	800bb3e <inc_lock+0x8a>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e040      	b.n	800bbc0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	4922      	ldr	r1, [pc, #136]	; (800bbcc <inc_lock+0x118>)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	011b      	lsls	r3, r3, #4
 800bb48:	440b      	add	r3, r1
 800bb4a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	689a      	ldr	r2, [r3, #8]
 800bb50:	491e      	ldr	r1, [pc, #120]	; (800bbcc <inc_lock+0x118>)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	011b      	lsls	r3, r3, #4
 800bb56:	440b      	add	r3, r1
 800bb58:	3304      	adds	r3, #4
 800bb5a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	695a      	ldr	r2, [r3, #20]
 800bb60:	491a      	ldr	r1, [pc, #104]	; (800bbcc <inc_lock+0x118>)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	011b      	lsls	r3, r3, #4
 800bb66:	440b      	add	r3, r1
 800bb68:	3308      	adds	r3, #8
 800bb6a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bb6c:	4a17      	ldr	r2, [pc, #92]	; (800bbcc <inc_lock+0x118>)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	011b      	lsls	r3, r3, #4
 800bb72:	4413      	add	r3, r2
 800bb74:	330c      	adds	r3, #12
 800bb76:	2200      	movs	r2, #0
 800bb78:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d009      	beq.n	800bb94 <inc_lock+0xe0>
 800bb80:	4a12      	ldr	r2, [pc, #72]	; (800bbcc <inc_lock+0x118>)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	011b      	lsls	r3, r3, #4
 800bb86:	4413      	add	r3, r2
 800bb88:	330c      	adds	r3, #12
 800bb8a:	881b      	ldrh	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <inc_lock+0xe0>
 800bb90:	2300      	movs	r3, #0
 800bb92:	e015      	b.n	800bbc0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d108      	bne.n	800bbac <inc_lock+0xf8>
 800bb9a:	4a0c      	ldr	r2, [pc, #48]	; (800bbcc <inc_lock+0x118>)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	011b      	lsls	r3, r3, #4
 800bba0:	4413      	add	r3, r2
 800bba2:	330c      	adds	r3, #12
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	3301      	adds	r3, #1
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	e001      	b.n	800bbb0 <inc_lock+0xfc>
 800bbac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bbb0:	4906      	ldr	r1, [pc, #24]	; (800bbcc <inc_lock+0x118>)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	011b      	lsls	r3, r3, #4
 800bbb6:	440b      	add	r3, r1
 800bbb8:	330c      	adds	r3, #12
 800bbba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3301      	adds	r3, #1
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	200057d8 	.word	0x200057d8

0800bbd0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	607b      	str	r3, [r7, #4]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d825      	bhi.n	800bc30 <dec_lock+0x60>
		n = Files[i].ctr;
 800bbe4:	4a17      	ldr	r2, [pc, #92]	; (800bc44 <dec_lock+0x74>)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	011b      	lsls	r3, r3, #4
 800bbea:	4413      	add	r3, r2
 800bbec:	330c      	adds	r3, #12
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bbf2:	89fb      	ldrh	r3, [r7, #14]
 800bbf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbf8:	d101      	bne.n	800bbfe <dec_lock+0x2e>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bbfe:	89fb      	ldrh	r3, [r7, #14]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <dec_lock+0x3a>
 800bc04:	89fb      	ldrh	r3, [r7, #14]
 800bc06:	3b01      	subs	r3, #1
 800bc08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bc0a:	4a0e      	ldr	r2, [pc, #56]	; (800bc44 <dec_lock+0x74>)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	011b      	lsls	r3, r3, #4
 800bc10:	4413      	add	r3, r2
 800bc12:	330c      	adds	r3, #12
 800bc14:	89fa      	ldrh	r2, [r7, #14]
 800bc16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bc18:	89fb      	ldrh	r3, [r7, #14]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d105      	bne.n	800bc2a <dec_lock+0x5a>
 800bc1e:	4a09      	ldr	r2, [pc, #36]	; (800bc44 <dec_lock+0x74>)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	011b      	lsls	r3, r3, #4
 800bc24:	4413      	add	r3, r2
 800bc26:	2200      	movs	r2, #0
 800bc28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	737b      	strb	r3, [r7, #13]
 800bc2e:	e001      	b.n	800bc34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bc30:	2302      	movs	r3, #2
 800bc32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bc34:	7b7b      	ldrb	r3, [r7, #13]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	200057d8 	.word	0x200057d8

0800bc48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bc50:	2300      	movs	r3, #0
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	e010      	b.n	800bc78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bc56:	4a0d      	ldr	r2, [pc, #52]	; (800bc8c <clear_lock+0x44>)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	011b      	lsls	r3, r3, #4
 800bc5c:	4413      	add	r3, r2
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d105      	bne.n	800bc72 <clear_lock+0x2a>
 800bc66:	4a09      	ldr	r2, [pc, #36]	; (800bc8c <clear_lock+0x44>)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	011b      	lsls	r3, r3, #4
 800bc6c:	4413      	add	r3, r2
 800bc6e:	2200      	movs	r2, #0
 800bc70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3301      	adds	r3, #1
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d9eb      	bls.n	800bc56 <clear_lock+0xe>
	}
}
 800bc7e:	bf00      	nop
 800bc80:	bf00      	nop
 800bc82:	3714      	adds	r7, #20
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	200057d8 	.word	0x200057d8

0800bc90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	78db      	ldrb	r3, [r3, #3]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d034      	beq.n	800bd0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	7858      	ldrb	r0, [r3, #1]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	697a      	ldr	r2, [r7, #20]
 800bcb8:	f7ff fd0e 	bl	800b6d8 <disk_write>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d002      	beq.n	800bcc8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	73fb      	strb	r3, [r7, #15]
 800bcc6:	e022      	b.n	800bd0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	1ad2      	subs	r2, r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	69db      	ldr	r3, [r3, #28]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d217      	bcs.n	800bd0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	789b      	ldrb	r3, [r3, #2]
 800bce2:	613b      	str	r3, [r7, #16]
 800bce4:	e010      	b.n	800bd08 <sync_window+0x78>
					wsect += fs->fsize;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	69db      	ldr	r3, [r3, #28]
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	4413      	add	r3, r2
 800bcee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	7858      	ldrb	r0, [r3, #1]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	f7ff fceb 	bl	800b6d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	3b01      	subs	r3, #1
 800bd06:	613b      	str	r3, [r7, #16]
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d8eb      	bhi.n	800bce6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3718      	adds	r7, #24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d01b      	beq.n	800bd68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7ff ffad 	bl	800bc90 <sync_window>
 800bd36:	4603      	mov	r3, r0
 800bd38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d113      	bne.n	800bd68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	7858      	ldrb	r0, [r3, #1]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	683a      	ldr	r2, [r7, #0]
 800bd4e:	f7ff fca3 	bl	800b698 <disk_read>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d004      	beq.n	800bd62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bd58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
	...

0800bd74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7ff ff87 	bl	800bc90 <sync_window>
 800bd82:	4603      	mov	r3, r0
 800bd84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bd86:	7bfb      	ldrb	r3, [r7, #15]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d158      	bne.n	800be3e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	2b03      	cmp	r3, #3
 800bd92:	d148      	bne.n	800be26 <sync_fs+0xb2>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	791b      	ldrb	r3, [r3, #4]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d144      	bne.n	800be26 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3334      	adds	r3, #52	; 0x34
 800bda0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bda4:	2100      	movs	r1, #0
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff fd77 	bl	800b89a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	3334      	adds	r3, #52	; 0x34
 800bdb0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bdb4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff fd06 	bl	800b7ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	3334      	adds	r3, #52	; 0x34
 800bdc2:	4921      	ldr	r1, [pc, #132]	; (800be48 <sync_fs+0xd4>)
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff fd1b 	bl	800b800 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	3334      	adds	r3, #52	; 0x34
 800bdce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bdd2:	491e      	ldr	r1, [pc, #120]	; (800be4c <sync_fs+0xd8>)
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7ff fd13 	bl	800b800 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	3334      	adds	r3, #52	; 0x34
 800bdde:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	695b      	ldr	r3, [r3, #20]
 800bde6:	4619      	mov	r1, r3
 800bde8:	4610      	mov	r0, r2
 800bdea:	f7ff fd09 	bl	800b800 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	3334      	adds	r3, #52	; 0x34
 800bdf2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	f7ff fcff 	bl	800b800 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a1b      	ldr	r3, [r3, #32]
 800be06:	1c5a      	adds	r2, r3, #1
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	7858      	ldrb	r0, [r3, #1]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be1a:	2301      	movs	r3, #1
 800be1c:	f7ff fc5c 	bl	800b6d8 <disk_write>
			fs->fsi_flag = 0;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	785b      	ldrb	r3, [r3, #1]
 800be2a:	2200      	movs	r2, #0
 800be2c:	2100      	movs	r1, #0
 800be2e:	4618      	mov	r0, r3
 800be30:	f7ff fc72 	bl	800b718 <disk_ioctl>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <sync_fs+0xca>
 800be3a:	2301      	movs	r3, #1
 800be3c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800be3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3710      	adds	r7, #16
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	41615252 	.word	0x41615252
 800be4c:	61417272 	.word	0x61417272

0800be50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	3b02      	subs	r3, #2
 800be5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	3b02      	subs	r3, #2
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d301      	bcc.n	800be70 <clust2sect+0x20>
 800be6c:	2300      	movs	r3, #0
 800be6e:	e008      	b.n	800be82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	895b      	ldrh	r3, [r3, #10]
 800be74:	461a      	mov	r2, r3
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	fb03 f202 	mul.w	r2, r3, r2
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be80:	4413      	add	r3, r2
}
 800be82:	4618      	mov	r0, r3
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b086      	sub	sp, #24
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d904      	bls.n	800beae <get_fat+0x20>
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	699b      	ldr	r3, [r3, #24]
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d302      	bcc.n	800beb4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800beae:	2301      	movs	r3, #1
 800beb0:	617b      	str	r3, [r7, #20]
 800beb2:	e08f      	b.n	800bfd4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800beb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800beb8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	2b03      	cmp	r3, #3
 800bec0:	d062      	beq.n	800bf88 <get_fat+0xfa>
 800bec2:	2b03      	cmp	r3, #3
 800bec4:	dc7c      	bgt.n	800bfc0 <get_fat+0x132>
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d002      	beq.n	800bed0 <get_fat+0x42>
 800beca:	2b02      	cmp	r3, #2
 800becc:	d042      	beq.n	800bf54 <get_fat+0xc6>
 800bece:	e077      	b.n	800bfc0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	60fb      	str	r3, [r7, #12]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	085b      	lsrs	r3, r3, #1
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	4413      	add	r3, r2
 800bedc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	0a5b      	lsrs	r3, r3, #9
 800bee6:	4413      	add	r3, r2
 800bee8:	4619      	mov	r1, r3
 800beea:	6938      	ldr	r0, [r7, #16]
 800beec:	f7ff ff14 	bl	800bd18 <move_window>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d167      	bne.n	800bfc6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	1c5a      	adds	r2, r3, #1
 800befa:	60fa      	str	r2, [r7, #12]
 800befc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf00:	693a      	ldr	r2, [r7, #16]
 800bf02:	4413      	add	r3, r2
 800bf04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	0a5b      	lsrs	r3, r3, #9
 800bf12:	4413      	add	r3, r2
 800bf14:	4619      	mov	r1, r3
 800bf16:	6938      	ldr	r0, [r7, #16]
 800bf18:	f7ff fefe 	bl	800bd18 <move_window>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d153      	bne.n	800bfca <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf28:	693a      	ldr	r2, [r7, #16]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf30:	021b      	lsls	r3, r3, #8
 800bf32:	461a      	mov	r2, r3
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <get_fat+0xbc>
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	091b      	lsrs	r3, r3, #4
 800bf48:	e002      	b.n	800bf50 <get_fat+0xc2>
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf50:	617b      	str	r3, [r7, #20]
			break;
 800bf52:	e03f      	b.n	800bfd4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	0a1b      	lsrs	r3, r3, #8
 800bf5c:	4413      	add	r3, r2
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6938      	ldr	r0, [r7, #16]
 800bf62:	f7ff fed9 	bl	800bd18 <move_window>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d130      	bne.n	800bfce <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bf7a:	4413      	add	r3, r2
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7ff fbe9 	bl	800b754 <ld_word>
 800bf82:	4603      	mov	r3, r0
 800bf84:	617b      	str	r3, [r7, #20]
			break;
 800bf86:	e025      	b.n	800bfd4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	09db      	lsrs	r3, r3, #7
 800bf90:	4413      	add	r3, r2
 800bf92:	4619      	mov	r1, r3
 800bf94:	6938      	ldr	r0, [r7, #16]
 800bf96:	f7ff febf 	bl	800bd18 <move_window>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d118      	bne.n	800bfd2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bfae:	4413      	add	r3, r2
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff fbe7 	bl	800b784 <ld_dword>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bfbc:	617b      	str	r3, [r7, #20]
			break;
 800bfbe:	e009      	b.n	800bfd4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	617b      	str	r3, [r7, #20]
 800bfc4:	e006      	b.n	800bfd4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfc6:	bf00      	nop
 800bfc8:	e004      	b.n	800bfd4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfca:	bf00      	nop
 800bfcc:	e002      	b.n	800bfd4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bfce:	bf00      	nop
 800bfd0:	e000      	b.n	800bfd4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bfd2:	bf00      	nop
		}
	}

	return val;
 800bfd4:	697b      	ldr	r3, [r7, #20]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bfde:	b590      	push	{r4, r7, lr}
 800bfe0:	b089      	sub	sp, #36	; 0x24
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	60f8      	str	r0, [r7, #12]
 800bfe6:	60b9      	str	r1, [r7, #8]
 800bfe8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bfea:	2302      	movs	r3, #2
 800bfec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	f240 80d2 	bls.w	800c19a <put_fat+0x1bc>
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	699b      	ldr	r3, [r3, #24]
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	f080 80cc 	bcs.w	800c19a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	2b03      	cmp	r3, #3
 800c008:	f000 8096 	beq.w	800c138 <put_fat+0x15a>
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	f300 80cd 	bgt.w	800c1ac <put_fat+0x1ce>
 800c012:	2b01      	cmp	r3, #1
 800c014:	d002      	beq.n	800c01c <put_fat+0x3e>
 800c016:	2b02      	cmp	r3, #2
 800c018:	d06e      	beq.n	800c0f8 <put_fat+0x11a>
 800c01a:	e0c7      	b.n	800c1ac <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	61bb      	str	r3, [r7, #24]
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	085b      	lsrs	r3, r3, #1
 800c024:	69ba      	ldr	r2, [r7, #24]
 800c026:	4413      	add	r3, r2
 800c028:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	0a5b      	lsrs	r3, r3, #9
 800c032:	4413      	add	r3, r2
 800c034:	4619      	mov	r1, r3
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f7ff fe6e 	bl	800bd18 <move_window>
 800c03c:	4603      	mov	r3, r0
 800c03e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c040:	7ffb      	ldrb	r3, [r7, #31]
 800c042:	2b00      	cmp	r3, #0
 800c044:	f040 80ab 	bne.w	800c19e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	1c59      	adds	r1, r3, #1
 800c052:	61b9      	str	r1, [r7, #24]
 800c054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c058:	4413      	add	r3, r2
 800c05a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	f003 0301 	and.w	r3, r3, #1
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00d      	beq.n	800c082 <put_fat+0xa4>
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	b25b      	sxtb	r3, r3
 800c06c:	f003 030f 	and.w	r3, r3, #15
 800c070:	b25a      	sxtb	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	b2db      	uxtb	r3, r3
 800c076:	011b      	lsls	r3, r3, #4
 800c078:	b25b      	sxtb	r3, r3
 800c07a:	4313      	orrs	r3, r2
 800c07c:	b25b      	sxtb	r3, r3
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	e001      	b.n	800c086 <put_fat+0xa8>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	b2db      	uxtb	r3, r3
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2201      	movs	r2, #1
 800c08e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	0a5b      	lsrs	r3, r3, #9
 800c098:	4413      	add	r3, r2
 800c09a:	4619      	mov	r1, r3
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f7ff fe3b 	bl	800bd18 <move_window>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0a6:	7ffb      	ldrb	r3, [r7, #31]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d17a      	bne.n	800c1a2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0b8:	4413      	add	r3, r2
 800c0ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	f003 0301 	and.w	r3, r3, #1
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d003      	beq.n	800c0ce <put_fat+0xf0>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	091b      	lsrs	r3, r3, #4
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	e00e      	b.n	800c0ec <put_fat+0x10e>
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	b25b      	sxtb	r3, r3
 800c0d4:	f023 030f 	bic.w	r3, r3, #15
 800c0d8:	b25a      	sxtb	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	0a1b      	lsrs	r3, r3, #8
 800c0de:	b25b      	sxtb	r3, r3
 800c0e0:	f003 030f 	and.w	r3, r3, #15
 800c0e4:	b25b      	sxtb	r3, r3
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	b25b      	sxtb	r3, r3
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	697a      	ldr	r2, [r7, #20]
 800c0ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	70da      	strb	r2, [r3, #3]
			break;
 800c0f6:	e059      	b.n	800c1ac <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	0a1b      	lsrs	r3, r3, #8
 800c100:	4413      	add	r3, r2
 800c102:	4619      	mov	r1, r3
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f7ff fe07 	bl	800bd18 <move_window>
 800c10a:	4603      	mov	r3, r0
 800c10c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c10e:	7ffb      	ldrb	r3, [r7, #31]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d148      	bne.n	800c1a6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	005b      	lsls	r3, r3, #1
 800c11e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c122:	4413      	add	r3, r2
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	b292      	uxth	r2, r2
 800c128:	4611      	mov	r1, r2
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7ff fb4d 	bl	800b7ca <st_word>
			fs->wflag = 1;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2201      	movs	r2, #1
 800c134:	70da      	strb	r2, [r3, #3]
			break;
 800c136:	e039      	b.n	800c1ac <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	09db      	lsrs	r3, r3, #7
 800c140:	4413      	add	r3, r2
 800c142:	4619      	mov	r1, r3
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f7ff fde7 	bl	800bd18 <move_window>
 800c14a:	4603      	mov	r3, r0
 800c14c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c14e:	7ffb      	ldrb	r3, [r7, #31]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d12a      	bne.n	800c1aa <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c168:	4413      	add	r3, r2
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7ff fb0a 	bl	800b784 <ld_dword>
 800c170:	4603      	mov	r3, r0
 800c172:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c176:	4323      	orrs	r3, r4
 800c178:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c188:	4413      	add	r3, r2
 800c18a:	6879      	ldr	r1, [r7, #4]
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7ff fb37 	bl	800b800 <st_dword>
			fs->wflag = 1;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2201      	movs	r2, #1
 800c196:	70da      	strb	r2, [r3, #3]
			break;
 800c198:	e008      	b.n	800c1ac <put_fat+0x1ce>
		}
	}
 800c19a:	bf00      	nop
 800c19c:	e006      	b.n	800c1ac <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c19e:	bf00      	nop
 800c1a0:	e004      	b.n	800c1ac <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c1a2:	bf00      	nop
 800c1a4:	e002      	b.n	800c1ac <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c1a6:	bf00      	nop
 800c1a8:	e000      	b.n	800c1ac <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c1aa:	bf00      	nop
	return res;
 800c1ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3724      	adds	r7, #36	; 0x24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd90      	pop	{r4, r7, pc}

0800c1b6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b088      	sub	sp, #32
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	60f8      	str	r0, [r7, #12]
 800c1be:	60b9      	str	r1, [r7, #8]
 800c1c0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d904      	bls.n	800c1dc <remove_chain+0x26>
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	68ba      	ldr	r2, [r7, #8]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d301      	bcc.n	800c1e0 <remove_chain+0x2a>
 800c1dc:	2302      	movs	r3, #2
 800c1de:	e04b      	b.n	800c278 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00c      	beq.n	800c200 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c1e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1ea:	6879      	ldr	r1, [r7, #4]
 800c1ec:	69b8      	ldr	r0, [r7, #24]
 800c1ee:	f7ff fef6 	bl	800bfde <put_fat>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c1f6:	7ffb      	ldrb	r3, [r7, #31]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <remove_chain+0x4a>
 800c1fc:	7ffb      	ldrb	r3, [r7, #31]
 800c1fe:	e03b      	b.n	800c278 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c200:	68b9      	ldr	r1, [r7, #8]
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f7ff fe43 	bl	800be8e <get_fat>
 800c208:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d031      	beq.n	800c274 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	2b01      	cmp	r3, #1
 800c214:	d101      	bne.n	800c21a <remove_chain+0x64>
 800c216:	2302      	movs	r3, #2
 800c218:	e02e      	b.n	800c278 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c220:	d101      	bne.n	800c226 <remove_chain+0x70>
 800c222:	2301      	movs	r3, #1
 800c224:	e028      	b.n	800c278 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c226:	2200      	movs	r2, #0
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	69b8      	ldr	r0, [r7, #24]
 800c22c:	f7ff fed7 	bl	800bfde <put_fat>
 800c230:	4603      	mov	r3, r0
 800c232:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c234:	7ffb      	ldrb	r3, [r7, #31]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d001      	beq.n	800c23e <remove_chain+0x88>
 800c23a:	7ffb      	ldrb	r3, [r7, #31]
 800c23c:	e01c      	b.n	800c278 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	695a      	ldr	r2, [r3, #20]
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	699b      	ldr	r3, [r3, #24]
 800c246:	3b02      	subs	r3, #2
 800c248:	429a      	cmp	r2, r3
 800c24a:	d20b      	bcs.n	800c264 <remove_chain+0xae>
			fs->free_clst++;
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	695b      	ldr	r3, [r3, #20]
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	791b      	ldrb	r3, [r3, #4]
 800c25a:	f043 0301 	orr.w	r3, r3, #1
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d3c6      	bcc.n	800c200 <remove_chain+0x4a>
 800c272:	e000      	b.n	800c276 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c274:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3720      	adds	r7, #32
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b088      	sub	sp, #32
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d10d      	bne.n	800c2b2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d004      	beq.n	800c2ac <create_chain+0x2c>
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	699b      	ldr	r3, [r3, #24]
 800c2a6:	69ba      	ldr	r2, [r7, #24]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d31b      	bcc.n	800c2e4 <create_chain+0x64>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	61bb      	str	r3, [r7, #24]
 800c2b0:	e018      	b.n	800c2e4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7ff fdea 	bl	800be8e <get_fat>
 800c2ba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d801      	bhi.n	800c2c6 <create_chain+0x46>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e070      	b.n	800c3a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2cc:	d101      	bne.n	800c2d2 <create_chain+0x52>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	e06a      	b.n	800c3a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	699b      	ldr	r3, [r3, #24]
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d201      	bcs.n	800c2e0 <create_chain+0x60>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	e063      	b.n	800c3a8 <create_chain+0x128>
		scl = clst;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	69fa      	ldr	r2, [r7, #28]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d307      	bcc.n	800c308 <create_chain+0x88>
				ncl = 2;
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c2fc:	69fa      	ldr	r2, [r7, #28]
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	429a      	cmp	r2, r3
 800c302:	d901      	bls.n	800c308 <create_chain+0x88>
 800c304:	2300      	movs	r3, #0
 800c306:	e04f      	b.n	800c3a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c308:	69f9      	ldr	r1, [r7, #28]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f7ff fdbf 	bl	800be8e <get_fat>
 800c310:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d00e      	beq.n	800c336 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d003      	beq.n	800c326 <create_chain+0xa6>
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c324:	d101      	bne.n	800c32a <create_chain+0xaa>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	e03e      	b.n	800c3a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c32a:	69fa      	ldr	r2, [r7, #28]
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d1da      	bne.n	800c2e8 <create_chain+0x68>
 800c332:	2300      	movs	r3, #0
 800c334:	e038      	b.n	800c3a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c336:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c33c:	69f9      	ldr	r1, [r7, #28]
 800c33e:	6938      	ldr	r0, [r7, #16]
 800c340:	f7ff fe4d 	bl	800bfde <put_fat>
 800c344:	4603      	mov	r3, r0
 800c346:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c348:	7dfb      	ldrb	r3, [r7, #23]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d109      	bne.n	800c362 <create_chain+0xe2>
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d006      	beq.n	800c362 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c354:	69fa      	ldr	r2, [r7, #28]
 800c356:	6839      	ldr	r1, [r7, #0]
 800c358:	6938      	ldr	r0, [r7, #16]
 800c35a:	f7ff fe40 	bl	800bfde <put_fat>
 800c35e:	4603      	mov	r3, r0
 800c360:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c362:	7dfb      	ldrb	r3, [r7, #23]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d116      	bne.n	800c396 <create_chain+0x116>
		fs->last_clst = ncl;
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	69fa      	ldr	r2, [r7, #28]
 800c36c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	695a      	ldr	r2, [r3, #20]
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	699b      	ldr	r3, [r3, #24]
 800c376:	3b02      	subs	r3, #2
 800c378:	429a      	cmp	r2, r3
 800c37a:	d804      	bhi.n	800c386 <create_chain+0x106>
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	695b      	ldr	r3, [r3, #20]
 800c380:	1e5a      	subs	r2, r3, #1
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	791b      	ldrb	r3, [r3, #4]
 800c38a:	f043 0301 	orr.w	r3, r3, #1
 800c38e:	b2da      	uxtb	r2, r3
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	711a      	strb	r2, [r3, #4]
 800c394:	e007      	b.n	800c3a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c396:	7dfb      	ldrb	r3, [r7, #23]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d102      	bne.n	800c3a2 <create_chain+0x122>
 800c39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3a0:	e000      	b.n	800c3a4 <create_chain+0x124>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c3a6:	69fb      	ldr	r3, [r7, #28]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3720      	adds	r7, #32
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b087      	sub	sp, #28
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	0a5b      	lsrs	r3, r3, #9
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	8952      	ldrh	r2, [r2, #10]
 800c3d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	1d1a      	adds	r2, r3, #4
 800c3da:	613a      	str	r2, [r7, #16]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d101      	bne.n	800c3ea <clmt_clust+0x3a>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	e010      	b.n	800c40c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d307      	bcc.n	800c402 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	1ad3      	subs	r3, r2, r3
 800c3f8:	617b      	str	r3, [r7, #20]
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	3304      	adds	r3, #4
 800c3fe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c400:	e7e9      	b.n	800c3d6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c402:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	4413      	add	r3, r2
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	371c      	adds	r7, #28
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c42e:	d204      	bcs.n	800c43a <dir_sdi+0x22>
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	f003 031f 	and.w	r3, r3, #31
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <dir_sdi+0x26>
		return FR_INT_ERR;
 800c43a:	2302      	movs	r3, #2
 800c43c:	e063      	b.n	800c506 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d106      	bne.n	800c45e <dir_sdi+0x46>
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	2b02      	cmp	r3, #2
 800c456:	d902      	bls.n	800c45e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c45c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d10c      	bne.n	800c47e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	095b      	lsrs	r3, r3, #5
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	8912      	ldrh	r2, [r2, #8]
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d301      	bcc.n	800c474 <dir_sdi+0x5c>
 800c470:	2302      	movs	r3, #2
 800c472:	e048      	b.n	800c506 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	61da      	str	r2, [r3, #28]
 800c47c:	e029      	b.n	800c4d2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	895b      	ldrh	r3, [r3, #10]
 800c482:	025b      	lsls	r3, r3, #9
 800c484:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c486:	e019      	b.n	800c4bc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6979      	ldr	r1, [r7, #20]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7ff fcfe 	bl	800be8e <get_fat>
 800c492:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c49a:	d101      	bne.n	800c4a0 <dir_sdi+0x88>
 800c49c:	2301      	movs	r3, #1
 800c49e:	e032      	b.n	800c506 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d904      	bls.n	800c4b0 <dir_sdi+0x98>
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	699b      	ldr	r3, [r3, #24]
 800c4aa:	697a      	ldr	r2, [r7, #20]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d301      	bcc.n	800c4b4 <dir_sdi+0x9c>
 800c4b0:	2302      	movs	r3, #2
 800c4b2:	e028      	b.n	800c506 <dir_sdi+0xee>
			ofs -= csz;
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c4bc:	683a      	ldr	r2, [r7, #0]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d2e1      	bcs.n	800c488 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c4c4:	6979      	ldr	r1, [r7, #20]
 800c4c6:	6938      	ldr	r0, [r7, #16]
 800c4c8:	f7ff fcc2 	bl	800be50 <clust2sect>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	697a      	ldr	r2, [r7, #20]
 800c4d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	69db      	ldr	r3, [r3, #28]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d101      	bne.n	800c4e4 <dir_sdi+0xcc>
 800c4e0:	2302      	movs	r3, #2
 800c4e2:	e010      	b.n	800c506 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	69da      	ldr	r2, [r3, #28]
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	0a5b      	lsrs	r3, r3, #9
 800c4ec:	441a      	add	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4fe:	441a      	add	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3718      	adds	r7, #24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b086      	sub	sp, #24
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
 800c516:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	3320      	adds	r3, #32
 800c524:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	69db      	ldr	r3, [r3, #28]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d003      	beq.n	800c536 <dir_next+0x28>
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c534:	d301      	bcc.n	800c53a <dir_next+0x2c>
 800c536:	2304      	movs	r3, #4
 800c538:	e0aa      	b.n	800c690 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c540:	2b00      	cmp	r3, #0
 800c542:	f040 8098 	bne.w	800c676 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	69db      	ldr	r3, [r3, #28]
 800c54a:	1c5a      	adds	r2, r3, #1
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	699b      	ldr	r3, [r3, #24]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d10b      	bne.n	800c570 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	095b      	lsrs	r3, r3, #5
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	8912      	ldrh	r2, [r2, #8]
 800c560:	4293      	cmp	r3, r2
 800c562:	f0c0 8088 	bcc.w	800c676 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	61da      	str	r2, [r3, #28]
 800c56c:	2304      	movs	r3, #4
 800c56e:	e08f      	b.n	800c690 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	0a5b      	lsrs	r3, r3, #9
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	8952      	ldrh	r2, [r2, #10]
 800c578:	3a01      	subs	r2, #1
 800c57a:	4013      	ands	r3, r2
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d17a      	bne.n	800c676 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	699b      	ldr	r3, [r3, #24]
 800c586:	4619      	mov	r1, r3
 800c588:	4610      	mov	r0, r2
 800c58a:	f7ff fc80 	bl	800be8e <get_fat>
 800c58e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	2b01      	cmp	r3, #1
 800c594:	d801      	bhi.n	800c59a <dir_next+0x8c>
 800c596:	2302      	movs	r3, #2
 800c598:	e07a      	b.n	800c690 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5a0:	d101      	bne.n	800c5a6 <dir_next+0x98>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e074      	b.n	800c690 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	697a      	ldr	r2, [r7, #20]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d358      	bcc.n	800c662 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d104      	bne.n	800c5c0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	61da      	str	r2, [r3, #28]
 800c5bc:	2304      	movs	r3, #4
 800c5be:	e067      	b.n	800c690 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	699b      	ldr	r3, [r3, #24]
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	f7ff fe59 	bl	800c280 <create_chain>
 800c5ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d101      	bne.n	800c5da <dir_next+0xcc>
 800c5d6:	2307      	movs	r3, #7
 800c5d8:	e05a      	b.n	800c690 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d101      	bne.n	800c5e4 <dir_next+0xd6>
 800c5e0:	2302      	movs	r3, #2
 800c5e2:	e055      	b.n	800c690 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5ea:	d101      	bne.n	800c5f0 <dir_next+0xe2>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e04f      	b.n	800c690 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f7ff fb4d 	bl	800bc90 <sync_window>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d001      	beq.n	800c600 <dir_next+0xf2>
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e047      	b.n	800c690 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	3334      	adds	r3, #52	; 0x34
 800c604:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c608:	2100      	movs	r1, #0
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7ff f945 	bl	800b89a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c610:	2300      	movs	r3, #0
 800c612:	613b      	str	r3, [r7, #16]
 800c614:	6979      	ldr	r1, [r7, #20]
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f7ff fc1a 	bl	800be50 <clust2sect>
 800c61c:	4602      	mov	r2, r0
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	631a      	str	r2, [r3, #48]	; 0x30
 800c622:	e012      	b.n	800c64a <dir_next+0x13c>
						fs->wflag = 1;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2201      	movs	r2, #1
 800c628:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f7ff fb30 	bl	800bc90 <sync_window>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d001      	beq.n	800c63a <dir_next+0x12c>
 800c636:	2301      	movs	r3, #1
 800c638:	e02a      	b.n	800c690 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	3301      	adds	r3, #1
 800c63e:	613b      	str	r3, [r7, #16]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c644:	1c5a      	adds	r2, r3, #1
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	631a      	str	r2, [r3, #48]	; 0x30
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	895b      	ldrh	r3, [r3, #10]
 800c64e:	461a      	mov	r2, r3
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	4293      	cmp	r3, r2
 800c654:	d3e6      	bcc.n	800c624 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	1ad2      	subs	r2, r2, r3
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	697a      	ldr	r2, [r7, #20]
 800c666:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c668:	6979      	ldr	r1, [r7, #20]
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f7ff fbf0 	bl	800be50 <clust2sect>
 800c670:	4602      	mov	r2, r0
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68ba      	ldr	r2, [r7, #8]
 800c67a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c688:	441a      	add	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c68e:	2300      	movs	r3, #0
}
 800c690:	4618      	mov	r0, r3
 800c692:	3718      	adds	r7, #24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7ff feb4 	bl	800c418 <dir_sdi>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c6b4:	7dfb      	ldrb	r3, [r7, #23]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d12b      	bne.n	800c712 <dir_alloc+0x7a>
		n = 0;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f7ff fb27 	bl	800bd18 <move_window>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c6ce:	7dfb      	ldrb	r3, [r7, #23]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d11d      	bne.n	800c710 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6a1b      	ldr	r3, [r3, #32]
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	2be5      	cmp	r3, #229	; 0xe5
 800c6dc:	d004      	beq.n	800c6e8 <dir_alloc+0x50>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a1b      	ldr	r3, [r3, #32]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d107      	bne.n	800c6f8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	613b      	str	r3, [r7, #16]
 800c6ee:	693a      	ldr	r2, [r7, #16]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d102      	bne.n	800c6fc <dir_alloc+0x64>
 800c6f6:	e00c      	b.n	800c712 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7ff ff05 	bl	800c50e <dir_next>
 800c704:	4603      	mov	r3, r0
 800c706:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c708:	7dfb      	ldrb	r3, [r7, #23]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d0d7      	beq.n	800c6be <dir_alloc+0x26>
 800c70e:	e000      	b.n	800c712 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c710:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c712:	7dfb      	ldrb	r3, [r7, #23]
 800c714:	2b04      	cmp	r3, #4
 800c716:	d101      	bne.n	800c71c <dir_alloc+0x84>
 800c718:	2307      	movs	r3, #7
 800c71a:	75fb      	strb	r3, [r7, #23]
	return res;
 800c71c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3718      	adds	r7, #24
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b084      	sub	sp, #16
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	331a      	adds	r3, #26
 800c734:	4618      	mov	r0, r3
 800c736:	f7ff f80d 	bl	800b754 <ld_word>
 800c73a:	4603      	mov	r3, r0
 800c73c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	2b03      	cmp	r3, #3
 800c744:	d109      	bne.n	800c75a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	3314      	adds	r3, #20
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7ff f802 	bl	800b754 <ld_word>
 800c750:	4603      	mov	r3, r0
 800c752:	041b      	lsls	r3, r3, #16
 800c754:	68fa      	ldr	r2, [r7, #12]
 800c756:	4313      	orrs	r3, r2
 800c758:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c75a:	68fb      	ldr	r3, [r7, #12]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	331a      	adds	r3, #26
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	b292      	uxth	r2, r2
 800c778:	4611      	mov	r1, r2
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7ff f825 	bl	800b7ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	2b03      	cmp	r3, #3
 800c786:	d109      	bne.n	800c79c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	f103 0214 	add.w	r2, r3, #20
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	0c1b      	lsrs	r3, r3, #16
 800c792:	b29b      	uxth	r3, r3
 800c794:	4619      	mov	r1, r3
 800c796:	4610      	mov	r0, r2
 800c798:	f7ff f817 	bl	800b7ca <st_word>
	}
}
 800c79c:	bf00      	nop
 800c79e:	3710      	adds	r7, #16
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b086      	sub	sp, #24
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff fe2f 	bl	800c418 <dir_sdi>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c7be:	7dfb      	ldrb	r3, [r7, #23]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d001      	beq.n	800c7c8 <dir_find+0x24>
 800c7c4:	7dfb      	ldrb	r3, [r7, #23]
 800c7c6:	e03e      	b.n	800c846 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	69db      	ldr	r3, [r3, #28]
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	6938      	ldr	r0, [r7, #16]
 800c7d0:	f7ff faa2 	bl	800bd18 <move_window>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d12f      	bne.n	800c83e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a1b      	ldr	r3, [r3, #32]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c7e6:	7bfb      	ldrb	r3, [r7, #15]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d102      	bne.n	800c7f2 <dir_find+0x4e>
 800c7ec:	2304      	movs	r3, #4
 800c7ee:	75fb      	strb	r3, [r7, #23]
 800c7f0:	e028      	b.n	800c844 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a1b      	ldr	r3, [r3, #32]
 800c7f6:	330b      	adds	r3, #11
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7fe:	b2da      	uxtb	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a1b      	ldr	r3, [r3, #32]
 800c808:	330b      	adds	r3, #11
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	f003 0308 	and.w	r3, r3, #8
 800c810:	2b00      	cmp	r3, #0
 800c812:	d10a      	bne.n	800c82a <dir_find+0x86>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a18      	ldr	r0, [r3, #32]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	3324      	adds	r3, #36	; 0x24
 800c81c:	220b      	movs	r2, #11
 800c81e:	4619      	mov	r1, r3
 800c820:	f7ff f856 	bl	800b8d0 <mem_cmp>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00b      	beq.n	800c842 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c82a:	2100      	movs	r1, #0
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7ff fe6e 	bl	800c50e <dir_next>
 800c832:	4603      	mov	r3, r0
 800c834:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c836:	7dfb      	ldrb	r3, [r7, #23]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d0c5      	beq.n	800c7c8 <dir_find+0x24>
 800c83c:	e002      	b.n	800c844 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c83e:	bf00      	nop
 800c840:	e000      	b.n	800c844 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c842:	bf00      	nop

	return res;
 800c844:	7dfb      	ldrb	r3, [r7, #23]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3718      	adds	r7, #24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b084      	sub	sp, #16
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c85c:	2101      	movs	r1, #1
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f7ff ff1a 	bl	800c698 <dir_alloc>
 800c864:	4603      	mov	r3, r0
 800c866:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c868:	7bfb      	ldrb	r3, [r7, #15]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d11c      	bne.n	800c8a8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	69db      	ldr	r3, [r3, #28]
 800c872:	4619      	mov	r1, r3
 800c874:	68b8      	ldr	r0, [r7, #8]
 800c876:	f7ff fa4f 	bl	800bd18 <move_window>
 800c87a:	4603      	mov	r3, r0
 800c87c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c87e:	7bfb      	ldrb	r3, [r7, #15]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d111      	bne.n	800c8a8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a1b      	ldr	r3, [r3, #32]
 800c888:	2220      	movs	r2, #32
 800c88a:	2100      	movs	r1, #0
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7ff f804 	bl	800b89a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a18      	ldr	r0, [r3, #32]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	3324      	adds	r3, #36	; 0x24
 800c89a:	220b      	movs	r2, #11
 800c89c:	4619      	mov	r1, r3
 800c89e:	f7fe ffdb 	bl	800b858 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3710      	adds	r7, #16
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
	...

0800c8b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b088      	sub	sp, #32
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	60fb      	str	r3, [r7, #12]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	3324      	adds	r3, #36	; 0x24
 800c8c8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c8ca:	220b      	movs	r2, #11
 800c8cc:	2120      	movs	r1, #32
 800c8ce:	68b8      	ldr	r0, [r7, #8]
 800c8d0:	f7fe ffe3 	bl	800b89a <mem_set>
	si = i = 0; ni = 8;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	613b      	str	r3, [r7, #16]
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	61fb      	str	r3, [r7, #28]
 800c8dc:	2308      	movs	r3, #8
 800c8de:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	1c5a      	adds	r2, r3, #1
 800c8e4:	61fa      	str	r2, [r7, #28]
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c8ee:	7efb      	ldrb	r3, [r7, #27]
 800c8f0:	2b20      	cmp	r3, #32
 800c8f2:	d94e      	bls.n	800c992 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c8f4:	7efb      	ldrb	r3, [r7, #27]
 800c8f6:	2b2f      	cmp	r3, #47	; 0x2f
 800c8f8:	d006      	beq.n	800c908 <create_name+0x54>
 800c8fa:	7efb      	ldrb	r3, [r7, #27]
 800c8fc:	2b5c      	cmp	r3, #92	; 0x5c
 800c8fe:	d110      	bne.n	800c922 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c900:	e002      	b.n	800c908 <create_name+0x54>
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	3301      	adds	r3, #1
 800c906:	61fb      	str	r3, [r7, #28]
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	4413      	add	r3, r2
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	2b2f      	cmp	r3, #47	; 0x2f
 800c912:	d0f6      	beq.n	800c902 <create_name+0x4e>
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	4413      	add	r3, r2
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	2b5c      	cmp	r3, #92	; 0x5c
 800c91e:	d0f0      	beq.n	800c902 <create_name+0x4e>
			break;
 800c920:	e038      	b.n	800c994 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c922:	7efb      	ldrb	r3, [r7, #27]
 800c924:	2b2e      	cmp	r3, #46	; 0x2e
 800c926:	d003      	beq.n	800c930 <create_name+0x7c>
 800c928:	693a      	ldr	r2, [r7, #16]
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d30c      	bcc.n	800c94a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	2b0b      	cmp	r3, #11
 800c934:	d002      	beq.n	800c93c <create_name+0x88>
 800c936:	7efb      	ldrb	r3, [r7, #27]
 800c938:	2b2e      	cmp	r3, #46	; 0x2e
 800c93a:	d001      	beq.n	800c940 <create_name+0x8c>
 800c93c:	2306      	movs	r3, #6
 800c93e:	e044      	b.n	800c9ca <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c940:	2308      	movs	r3, #8
 800c942:	613b      	str	r3, [r7, #16]
 800c944:	230b      	movs	r3, #11
 800c946:	617b      	str	r3, [r7, #20]
			continue;
 800c948:	e022      	b.n	800c990 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c94a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	da04      	bge.n	800c95c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c952:	7efb      	ldrb	r3, [r7, #27]
 800c954:	3b80      	subs	r3, #128	; 0x80
 800c956:	4a1f      	ldr	r2, [pc, #124]	; (800c9d4 <create_name+0x120>)
 800c958:	5cd3      	ldrb	r3, [r2, r3]
 800c95a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c95c:	7efb      	ldrb	r3, [r7, #27]
 800c95e:	4619      	mov	r1, r3
 800c960:	481d      	ldr	r0, [pc, #116]	; (800c9d8 <create_name+0x124>)
 800c962:	f7fe ffdc 	bl	800b91e <chk_chr>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d001      	beq.n	800c970 <create_name+0xbc>
 800c96c:	2306      	movs	r3, #6
 800c96e:	e02c      	b.n	800c9ca <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c970:	7efb      	ldrb	r3, [r7, #27]
 800c972:	2b60      	cmp	r3, #96	; 0x60
 800c974:	d905      	bls.n	800c982 <create_name+0xce>
 800c976:	7efb      	ldrb	r3, [r7, #27]
 800c978:	2b7a      	cmp	r3, #122	; 0x7a
 800c97a:	d802      	bhi.n	800c982 <create_name+0xce>
 800c97c:	7efb      	ldrb	r3, [r7, #27]
 800c97e:	3b20      	subs	r3, #32
 800c980:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	1c5a      	adds	r2, r3, #1
 800c986:	613a      	str	r2, [r7, #16]
 800c988:	68ba      	ldr	r2, [r7, #8]
 800c98a:	4413      	add	r3, r2
 800c98c:	7efa      	ldrb	r2, [r7, #27]
 800c98e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c990:	e7a6      	b.n	800c8e0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c992:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	441a      	add	r2, r3
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d101      	bne.n	800c9a8 <create_name+0xf4>
 800c9a4:	2306      	movs	r3, #6
 800c9a6:	e010      	b.n	800c9ca <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	2be5      	cmp	r3, #229	; 0xe5
 800c9ae:	d102      	bne.n	800c9b6 <create_name+0x102>
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	2205      	movs	r2, #5
 800c9b4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c9b6:	7efb      	ldrb	r3, [r7, #27]
 800c9b8:	2b20      	cmp	r3, #32
 800c9ba:	d801      	bhi.n	800c9c0 <create_name+0x10c>
 800c9bc:	2204      	movs	r2, #4
 800c9be:	e000      	b.n	800c9c2 <create_name+0x10e>
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	330b      	adds	r3, #11
 800c9c6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c9c8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3720      	adds	r7, #32
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	08012ebc 	.word	0x08012ebc
 800c9d8:	08012e3c 	.word	0x08012e3c

0800c9dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c9f0:	e002      	b.n	800c9f8 <follow_path+0x1c>
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	603b      	str	r3, [r7, #0]
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b2f      	cmp	r3, #47	; 0x2f
 800c9fe:	d0f8      	beq.n	800c9f2 <follow_path+0x16>
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	2b5c      	cmp	r3, #92	; 0x5c
 800ca06:	d0f4      	beq.n	800c9f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	2b1f      	cmp	r3, #31
 800ca14:	d80a      	bhi.n	800ca2c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2280      	movs	r2, #128	; 0x80
 800ca1a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ca1e:	2100      	movs	r1, #0
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f7ff fcf9 	bl	800c418 <dir_sdi>
 800ca26:	4603      	mov	r3, r0
 800ca28:	75fb      	strb	r3, [r7, #23]
 800ca2a:	e043      	b.n	800cab4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ca2c:	463b      	mov	r3, r7
 800ca2e:	4619      	mov	r1, r3
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f7ff ff3f 	bl	800c8b4 <create_name>
 800ca36:	4603      	mov	r3, r0
 800ca38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ca3a:	7dfb      	ldrb	r3, [r7, #23]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d134      	bne.n	800caaa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f7ff feaf 	bl	800c7a4 <dir_find>
 800ca46:	4603      	mov	r3, r0
 800ca48:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca50:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ca52:	7dfb      	ldrb	r3, [r7, #23]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d00a      	beq.n	800ca6e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ca58:	7dfb      	ldrb	r3, [r7, #23]
 800ca5a:	2b04      	cmp	r3, #4
 800ca5c:	d127      	bne.n	800caae <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ca5e:	7afb      	ldrb	r3, [r7, #11]
 800ca60:	f003 0304 	and.w	r3, r3, #4
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d122      	bne.n	800caae <follow_path+0xd2>
 800ca68:	2305      	movs	r3, #5
 800ca6a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ca6c:	e01f      	b.n	800caae <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ca6e:	7afb      	ldrb	r3, [r7, #11]
 800ca70:	f003 0304 	and.w	r3, r3, #4
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d11c      	bne.n	800cab2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	799b      	ldrb	r3, [r3, #6]
 800ca7c:	f003 0310 	and.w	r3, r3, #16
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d102      	bne.n	800ca8a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ca84:	2305      	movs	r3, #5
 800ca86:	75fb      	strb	r3, [r7, #23]
 800ca88:	e014      	b.n	800cab4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	695b      	ldr	r3, [r3, #20]
 800ca94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca98:	4413      	add	r3, r2
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	68f8      	ldr	r0, [r7, #12]
 800ca9e:	f7ff fe42 	bl	800c726 <ld_clust>
 800caa2:	4602      	mov	r2, r0
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800caa8:	e7c0      	b.n	800ca2c <follow_path+0x50>
			if (res != FR_OK) break;
 800caaa:	bf00      	nop
 800caac:	e002      	b.n	800cab4 <follow_path+0xd8>
				break;
 800caae:	bf00      	nop
 800cab0:	e000      	b.n	800cab4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cab2:	bf00      	nop
			}
		}
	}

	return res;
 800cab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3718      	adds	r7, #24
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cabe:	b480      	push	{r7}
 800cac0:	b087      	sub	sp, #28
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800caca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d031      	beq.n	800cb38 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	617b      	str	r3, [r7, #20]
 800cada:	e002      	b.n	800cae2 <get_ldnumber+0x24>
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	3301      	adds	r3, #1
 800cae0:	617b      	str	r3, [r7, #20]
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	2b20      	cmp	r3, #32
 800cae8:	d903      	bls.n	800caf2 <get_ldnumber+0x34>
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	2b3a      	cmp	r3, #58	; 0x3a
 800caf0:	d1f4      	bne.n	800cadc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	2b3a      	cmp	r3, #58	; 0x3a
 800caf8:	d11c      	bne.n	800cb34 <get_ldnumber+0x76>
			tp = *path;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	1c5a      	adds	r2, r3, #1
 800cb04:	60fa      	str	r2, [r7, #12]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	3b30      	subs	r3, #48	; 0x30
 800cb0a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	2b09      	cmp	r3, #9
 800cb10:	d80e      	bhi.n	800cb30 <get_ldnumber+0x72>
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d10a      	bne.n	800cb30 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d107      	bne.n	800cb30 <get_ldnumber+0x72>
					vol = (int)i;
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	3301      	adds	r3, #1
 800cb28:	617b      	str	r3, [r7, #20]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	697a      	ldr	r2, [r7, #20]
 800cb2e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	e002      	b.n	800cb3a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cb34:	2300      	movs	r3, #0
 800cb36:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cb38:	693b      	ldr	r3, [r7, #16]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	371c      	adds	r7, #28
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr
	...

0800cb48 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	70da      	strb	r2, [r3, #3]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb5e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cb60:	6839      	ldr	r1, [r7, #0]
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f7ff f8d8 	bl	800bd18 <move_window>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <check_fs+0x2a>
 800cb6e:	2304      	movs	r3, #4
 800cb70:	e038      	b.n	800cbe4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	3334      	adds	r3, #52	; 0x34
 800cb76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fe fdea 	bl	800b754 <ld_word>
 800cb80:	4603      	mov	r3, r0
 800cb82:	461a      	mov	r2, r3
 800cb84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d001      	beq.n	800cb90 <check_fs+0x48>
 800cb8c:	2303      	movs	r3, #3
 800cb8e:	e029      	b.n	800cbe4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb96:	2be9      	cmp	r3, #233	; 0xe9
 800cb98:	d009      	beq.n	800cbae <check_fs+0x66>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cba0:	2beb      	cmp	r3, #235	; 0xeb
 800cba2:	d11e      	bne.n	800cbe2 <check_fs+0x9a>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800cbaa:	2b90      	cmp	r3, #144	; 0x90
 800cbac:	d119      	bne.n	800cbe2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	3334      	adds	r3, #52	; 0x34
 800cbb2:	3336      	adds	r3, #54	; 0x36
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7fe fde5 	bl	800b784 <ld_dword>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cbc0:	4a0a      	ldr	r2, [pc, #40]	; (800cbec <check_fs+0xa4>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d101      	bne.n	800cbca <check_fs+0x82>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	e00c      	b.n	800cbe4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	3334      	adds	r3, #52	; 0x34
 800cbce:	3352      	adds	r3, #82	; 0x52
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fe fdd7 	bl	800b784 <ld_dword>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	4a05      	ldr	r2, [pc, #20]	; (800cbf0 <check_fs+0xa8>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d101      	bne.n	800cbe2 <check_fs+0x9a>
 800cbde:	2300      	movs	r3, #0
 800cbe0:	e000      	b.n	800cbe4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cbe2:	2302      	movs	r3, #2
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	00544146 	.word	0x00544146
 800cbf0:	33544146 	.word	0x33544146

0800cbf4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b096      	sub	sp, #88	; 0x58
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	4613      	mov	r3, r2
 800cc00:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	2200      	movs	r2, #0
 800cc06:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f7ff ff58 	bl	800cabe <get_ldnumber>
 800cc0e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	da01      	bge.n	800cc1a <find_volume+0x26>
 800cc16:	230b      	movs	r3, #11
 800cc18:	e236      	b.n	800d088 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cc1a:	4aac      	ldr	r2, [pc, #688]	; (800cecc <find_volume+0x2d8>)
 800cc1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc22:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d101      	bne.n	800cc2e <find_volume+0x3a>
 800cc2a:	230c      	movs	r3, #12
 800cc2c:	e22c      	b.n	800d088 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800cc2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc30:	f7fe fe90 	bl	800b954 <lock_fs>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d101      	bne.n	800cc3e <find_volume+0x4a>
 800cc3a:	230f      	movs	r3, #15
 800cc3c:	e224      	b.n	800d088 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cc44:	79fb      	ldrb	r3, [r7, #7]
 800cc46:	f023 0301 	bic.w	r3, r3, #1
 800cc4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d01a      	beq.n	800cc8a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800cc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc56:	785b      	ldrb	r3, [r3, #1]
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fe fcdd 	bl	800b618 <disk_status>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cc64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cc68:	f003 0301 	and.w	r3, r3, #1
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10c      	bne.n	800cc8a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cc70:	79fb      	ldrb	r3, [r7, #7]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d007      	beq.n	800cc86 <find_volume+0x92>
 800cc76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cc7a:	f003 0304 	and.w	r3, r3, #4
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d001      	beq.n	800cc86 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800cc82:	230a      	movs	r3, #10
 800cc84:	e200      	b.n	800d088 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800cc86:	2300      	movs	r3, #0
 800cc88:	e1fe      	b.n	800d088 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cc90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc92:	b2da      	uxtb	r2, r3
 800cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9a:	785b      	ldrb	r3, [r3, #1]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7fe fcd5 	bl	800b64c <disk_initialize>
 800cca2:	4603      	mov	r3, r0
 800cca4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cca8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ccac:	f003 0301 	and.w	r3, r3, #1
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d001      	beq.n	800ccb8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	e1e7      	b.n	800d088 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ccb8:	79fb      	ldrb	r3, [r7, #7]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d007      	beq.n	800ccce <find_volume+0xda>
 800ccbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ccc2:	f003 0304 	and.w	r3, r3, #4
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d001      	beq.n	800ccce <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ccca:	230a      	movs	r3, #10
 800cccc:	e1dc      	b.n	800d088 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ccd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ccd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccd6:	f7ff ff37 	bl	800cb48 <check_fs>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cce0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d14b      	bne.n	800cd80 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cce8:	2300      	movs	r3, #0
 800ccea:	643b      	str	r3, [r7, #64]	; 0x40
 800ccec:	e01f      	b.n	800cd2e <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ccee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ccf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccf6:	011b      	lsls	r3, r3, #4
 800ccf8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ccfc:	4413      	add	r3, r2
 800ccfe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd02:	3304      	adds	r3, #4
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d006      	beq.n	800cd18 <find_volume+0x124>
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0c:	3308      	adds	r3, #8
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7fe fd38 	bl	800b784 <ld_dword>
 800cd14:	4602      	mov	r2, r0
 800cd16:	e000      	b.n	800cd1a <find_volume+0x126>
 800cd18:	2200      	movs	r2, #0
 800cd1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800cd22:	440b      	add	r3, r1
 800cd24:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cd28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	643b      	str	r3, [r7, #64]	; 0x40
 800cd2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd30:	2b03      	cmp	r3, #3
 800cd32:	d9dc      	bls.n	800ccee <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cd34:	2300      	movs	r3, #0
 800cd36:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cd38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d002      	beq.n	800cd44 <find_volume+0x150>
 800cd3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd40:	3b01      	subs	r3, #1
 800cd42:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cd44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cd4c:	4413      	add	r3, r2
 800cd4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cd52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cd54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d005      	beq.n	800cd66 <find_volume+0x172>
 800cd5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cd5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd5e:	f7ff fef3 	bl	800cb48 <check_fs>
 800cd62:	4603      	mov	r3, r0
 800cd64:	e000      	b.n	800cd68 <find_volume+0x174>
 800cd66:	2303      	movs	r3, #3
 800cd68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cd6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d905      	bls.n	800cd80 <find_volume+0x18c>
 800cd74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd76:	3301      	adds	r3, #1
 800cd78:	643b      	str	r3, [r7, #64]	; 0x40
 800cd7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd7c:	2b03      	cmp	r3, #3
 800cd7e:	d9e1      	bls.n	800cd44 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cd80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd84:	2b04      	cmp	r3, #4
 800cd86:	d101      	bne.n	800cd8c <find_volume+0x198>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e17d      	b.n	800d088 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cd8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d901      	bls.n	800cd98 <find_volume+0x1a4>
 800cd94:	230d      	movs	r3, #13
 800cd96:	e177      	b.n	800d088 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9a:	3334      	adds	r3, #52	; 0x34
 800cd9c:	330b      	adds	r3, #11
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fe fcd8 	bl	800b754 <ld_word>
 800cda4:	4603      	mov	r3, r0
 800cda6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdaa:	d001      	beq.n	800cdb0 <find_volume+0x1bc>
 800cdac:	230d      	movs	r3, #13
 800cdae:	e16b      	b.n	800d088 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb2:	3334      	adds	r3, #52	; 0x34
 800cdb4:	3316      	adds	r3, #22
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7fe fccc 	bl	800b754 <ld_word>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cdc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d106      	bne.n	800cdd4 <find_volume+0x1e0>
 800cdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc8:	3334      	adds	r3, #52	; 0x34
 800cdca:	3324      	adds	r3, #36	; 0x24
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7fe fcd9 	bl	800b784 <ld_dword>
 800cdd2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cdd8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cddc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde6:	789b      	ldrb	r3, [r3, #2]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d005      	beq.n	800cdf8 <find_volume+0x204>
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	789b      	ldrb	r3, [r3, #2]
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	d001      	beq.n	800cdf8 <find_volume+0x204>
 800cdf4:	230d      	movs	r3, #13
 800cdf6:	e147      	b.n	800d088 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfa:	789b      	ldrb	r3, [r3, #2]
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce00:	fb02 f303 	mul.w	r3, r2, r3
 800ce04:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ce06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce0c:	b29a      	uxth	r2, r3
 800ce0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce10:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ce12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce14:	895b      	ldrh	r3, [r3, #10]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d008      	beq.n	800ce2c <find_volume+0x238>
 800ce1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1c:	895b      	ldrh	r3, [r3, #10]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce22:	895b      	ldrh	r3, [r3, #10]
 800ce24:	3b01      	subs	r3, #1
 800ce26:	4013      	ands	r3, r2
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d001      	beq.n	800ce30 <find_volume+0x23c>
 800ce2c:	230d      	movs	r3, #13
 800ce2e:	e12b      	b.n	800d088 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	3334      	adds	r3, #52	; 0x34
 800ce34:	3311      	adds	r3, #17
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7fe fc8c 	bl	800b754 <ld_word>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	461a      	mov	r2, r3
 800ce40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce42:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ce44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce46:	891b      	ldrh	r3, [r3, #8]
 800ce48:	f003 030f 	and.w	r3, r3, #15
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d001      	beq.n	800ce56 <find_volume+0x262>
 800ce52:	230d      	movs	r3, #13
 800ce54:	e118      	b.n	800d088 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ce56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce58:	3334      	adds	r3, #52	; 0x34
 800ce5a:	3313      	adds	r3, #19
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fe fc79 	bl	800b754 <ld_word>
 800ce62:	4603      	mov	r3, r0
 800ce64:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ce66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d106      	bne.n	800ce7a <find_volume+0x286>
 800ce6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6e:	3334      	adds	r3, #52	; 0x34
 800ce70:	3320      	adds	r3, #32
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7fe fc86 	bl	800b784 <ld_dword>
 800ce78:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ce7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7c:	3334      	adds	r3, #52	; 0x34
 800ce7e:	330e      	adds	r3, #14
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7fe fc67 	bl	800b754 <ld_word>
 800ce86:	4603      	mov	r3, r0
 800ce88:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ce8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d101      	bne.n	800ce94 <find_volume+0x2a0>
 800ce90:	230d      	movs	r3, #13
 800ce92:	e0f9      	b.n	800d088 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ce94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ce96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce98:	4413      	add	r3, r2
 800ce9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce9c:	8912      	ldrh	r2, [r2, #8]
 800ce9e:	0912      	lsrs	r2, r2, #4
 800cea0:	b292      	uxth	r2, r2
 800cea2:	4413      	add	r3, r2
 800cea4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d201      	bcs.n	800ceb2 <find_volume+0x2be>
 800ceae:	230d      	movs	r3, #13
 800ceb0:	e0ea      	b.n	800d088 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ceb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ceb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb6:	1ad3      	subs	r3, r2, r3
 800ceb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceba:	8952      	ldrh	r2, [r2, #10]
 800cebc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cec0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d103      	bne.n	800ced0 <find_volume+0x2dc>
 800cec8:	230d      	movs	r3, #13
 800ceca:	e0dd      	b.n	800d088 <find_volume+0x494>
 800cecc:	200057d0 	.word	0x200057d0
		fmt = FS_FAT32;
 800ced0:	2303      	movs	r3, #3
 800ced2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ced6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cedc:	4293      	cmp	r3, r2
 800cede:	d802      	bhi.n	800cee6 <find_volume+0x2f2>
 800cee0:	2302      	movs	r3, #2
 800cee2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d802      	bhi.n	800cef6 <find_volume+0x302>
 800cef0:	2301      	movs	r3, #1
 800cef2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef8:	1c9a      	adds	r2, r3, #2
 800cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefc:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800cefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf02:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cf04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cf06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf08:	441a      	add	r2, r3
 800cf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cf0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf12:	441a      	add	r2, r3
 800cf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf16:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800cf18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf1c:	2b03      	cmp	r3, #3
 800cf1e:	d11e      	bne.n	800cf5e <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf22:	3334      	adds	r3, #52	; 0x34
 800cf24:	332a      	adds	r3, #42	; 0x2a
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fe fc14 	bl	800b754 <ld_word>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <find_volume+0x342>
 800cf32:	230d      	movs	r3, #13
 800cf34:	e0a8      	b.n	800d088 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf38:	891b      	ldrh	r3, [r3, #8]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d001      	beq.n	800cf42 <find_volume+0x34e>
 800cf3e:	230d      	movs	r3, #13
 800cf40:	e0a2      	b.n	800d088 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf44:	3334      	adds	r3, #52	; 0x34
 800cf46:	332c      	adds	r3, #44	; 0x2c
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7fe fc1b 	bl	800b784 <ld_dword>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf52:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf56:	699b      	ldr	r3, [r3, #24]
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	647b      	str	r3, [r7, #68]	; 0x44
 800cf5c:	e01f      	b.n	800cf9e <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf60:	891b      	ldrh	r3, [r3, #8]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d101      	bne.n	800cf6a <find_volume+0x376>
 800cf66:	230d      	movs	r3, #13
 800cf68:	e08e      	b.n	800d088 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf70:	441a      	add	r2, r3
 800cf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf74:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cf76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	d103      	bne.n	800cf86 <find_volume+0x392>
 800cf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf80:	699b      	ldr	r3, [r3, #24]
 800cf82:	005b      	lsls	r3, r3, #1
 800cf84:	e00a      	b.n	800cf9c <find_volume+0x3a8>
 800cf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf88:	699a      	ldr	r2, [r3, #24]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	4413      	add	r3, r2
 800cf90:	085a      	lsrs	r2, r3, #1
 800cf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf94:	699b      	ldr	r3, [r3, #24]
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cf9c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa0:	69da      	ldr	r2, [r3, #28]
 800cfa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfa4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cfa8:	0a5b      	lsrs	r3, r3, #9
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d201      	bcs.n	800cfb2 <find_volume+0x3be>
 800cfae:	230d      	movs	r3, #13
 800cfb0:	e06a      	b.n	800d088 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfb8:	615a      	str	r2, [r3, #20]
 800cfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfbc:	695a      	ldr	r2, [r3, #20]
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800cfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc4:	2280      	movs	r2, #128	; 0x80
 800cfc6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cfc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfcc:	2b03      	cmp	r3, #3
 800cfce:	d149      	bne.n	800d064 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd2:	3334      	adds	r3, #52	; 0x34
 800cfd4:	3330      	adds	r3, #48	; 0x30
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fe fbbc 	bl	800b754 <ld_word>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d140      	bne.n	800d064 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cfe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfea:	f7fe fe95 	bl	800bd18 <move_window>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d137      	bne.n	800d064 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800cff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff6:	2200      	movs	r2, #0
 800cff8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffc:	3334      	adds	r3, #52	; 0x34
 800cffe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d002:	4618      	mov	r0, r3
 800d004:	f7fe fba6 	bl	800b754 <ld_word>
 800d008:	4603      	mov	r3, r0
 800d00a:	461a      	mov	r2, r3
 800d00c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d010:	429a      	cmp	r2, r3
 800d012:	d127      	bne.n	800d064 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	3334      	adds	r3, #52	; 0x34
 800d018:	4618      	mov	r0, r3
 800d01a:	f7fe fbb3 	bl	800b784 <ld_dword>
 800d01e:	4603      	mov	r3, r0
 800d020:	4a1b      	ldr	r2, [pc, #108]	; (800d090 <find_volume+0x49c>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d11e      	bne.n	800d064 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d028:	3334      	adds	r3, #52	; 0x34
 800d02a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe fba8 	bl	800b784 <ld_dword>
 800d034:	4603      	mov	r3, r0
 800d036:	4a17      	ldr	r2, [pc, #92]	; (800d094 <find_volume+0x4a0>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d113      	bne.n	800d064 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03e:	3334      	adds	r3, #52	; 0x34
 800d040:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d044:	4618      	mov	r0, r3
 800d046:	f7fe fb9d 	bl	800b784 <ld_dword>
 800d04a:	4602      	mov	r2, r0
 800d04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d052:	3334      	adds	r3, #52	; 0x34
 800d054:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fe fb93 	bl	800b784 <ld_dword>
 800d05e:	4602      	mov	r2, r0
 800d060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d062:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d066:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d06a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d06c:	4b0a      	ldr	r3, [pc, #40]	; (800d098 <find_volume+0x4a4>)
 800d06e:	881b      	ldrh	r3, [r3, #0]
 800d070:	3301      	adds	r3, #1
 800d072:	b29a      	uxth	r2, r3
 800d074:	4b08      	ldr	r3, [pc, #32]	; (800d098 <find_volume+0x4a4>)
 800d076:	801a      	strh	r2, [r3, #0]
 800d078:	4b07      	ldr	r3, [pc, #28]	; (800d098 <find_volume+0x4a4>)
 800d07a:	881a      	ldrh	r2, [r3, #0]
 800d07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d080:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d082:	f7fe fde1 	bl	800bc48 <clear_lock>
#endif
	return FR_OK;
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3758      	adds	r7, #88	; 0x58
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	41615252 	.word	0x41615252
 800d094:	61417272 	.word	0x61417272
 800d098:	200057d4 	.word	0x200057d4

0800d09c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d0a6:	2309      	movs	r3, #9
 800d0a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d02e      	beq.n	800d10e <validate+0x72>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d02a      	beq.n	800d10e <validate+0x72>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d025      	beq.n	800d10e <validate+0x72>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	889a      	ldrh	r2, [r3, #4]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	88db      	ldrh	r3, [r3, #6]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d11e      	bne.n	800d10e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7fe fc3d 	bl	800b954 <lock_fs>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d014      	beq.n	800d10a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	785b      	ldrb	r3, [r3, #1]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7fe fa96 	bl	800b618 <disk_status>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	f003 0301 	and.w	r3, r3, #1
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d102      	bne.n	800d0fc <validate+0x60>
				res = FR_OK;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	73fb      	strb	r3, [r7, #15]
 800d0fa:	e008      	b.n	800d10e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2100      	movs	r1, #0
 800d102:	4618      	mov	r0, r3
 800d104:	f7fe fc3c 	bl	800b980 <unlock_fs>
 800d108:	e001      	b.n	800d10e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d10a:	230f      	movs	r3, #15
 800d10c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d10e:	7bfb      	ldrb	r3, [r7, #15]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d102      	bne.n	800d11a <validate+0x7e>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	e000      	b.n	800d11c <validate+0x80>
 800d11a:	2300      	movs	r3, #0
 800d11c:	683a      	ldr	r2, [r7, #0]
 800d11e:	6013      	str	r3, [r2, #0]
	return res;
 800d120:	7bfb      	ldrb	r3, [r7, #15]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
	...

0800d12c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b088      	sub	sp, #32
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	4613      	mov	r3, r2
 800d138:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d13e:	f107 0310 	add.w	r3, r7, #16
 800d142:	4618      	mov	r0, r3
 800d144:	f7ff fcbb 	bl	800cabe <get_ldnumber>
 800d148:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	da01      	bge.n	800d154 <f_mount+0x28>
 800d150:	230b      	movs	r3, #11
 800d152:	e048      	b.n	800d1e6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d154:	4a26      	ldr	r2, [pc, #152]	; (800d1f0 <f_mount+0xc4>)
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d15c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00f      	beq.n	800d184 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d164:	69b8      	ldr	r0, [r7, #24]
 800d166:	f7fe fd6f 	bl	800bc48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	4618      	mov	r0, r3
 800d170:	f000 fca7 	bl	800dac2 <ff_del_syncobj>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d101      	bne.n	800d17e <f_mount+0x52>
 800d17a:	2302      	movs	r3, #2
 800d17c:	e033      	b.n	800d1e6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	2200      	movs	r2, #0
 800d182:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d00f      	beq.n	800d1aa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2200      	movs	r2, #0
 800d18e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	b2da      	uxtb	r2, r3
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	330c      	adds	r3, #12
 800d198:	4619      	mov	r1, r3
 800d19a:	4610      	mov	r0, r2
 800d19c:	f000 fc71 	bl	800da82 <ff_cre_syncobj>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <f_mount+0x7e>
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	e01d      	b.n	800d1e6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	4910      	ldr	r1, [pc, #64]	; (800d1f0 <f_mount+0xc4>)
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d002      	beq.n	800d1c0 <f_mount+0x94>
 800d1ba:	79fb      	ldrb	r3, [r7, #7]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d001      	beq.n	800d1c4 <f_mount+0x98>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	e010      	b.n	800d1e6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d1c4:	f107 010c 	add.w	r1, r7, #12
 800d1c8:	f107 0308 	add.w	r3, r7, #8
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7ff fd10 	bl	800cbf4 <find_volume>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	7dfa      	ldrb	r2, [r7, #23]
 800d1dc:	4611      	mov	r1, r2
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fe fbce 	bl	800b980 <unlock_fs>
 800d1e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3720      	adds	r7, #32
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	200057d0 	.word	0x200057d0

0800d1f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b098      	sub	sp, #96	; 0x60
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	4613      	mov	r3, r2
 800d200:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d101      	bne.n	800d20c <f_open+0x18>
 800d208:	2309      	movs	r3, #9
 800d20a:	e1b4      	b.n	800d576 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d20c:	79fb      	ldrb	r3, [r7, #7]
 800d20e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d212:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d214:	79fa      	ldrb	r2, [r7, #7]
 800d216:	f107 0110 	add.w	r1, r7, #16
 800d21a:	f107 0308 	add.w	r3, r7, #8
 800d21e:	4618      	mov	r0, r3
 800d220:	f7ff fce8 	bl	800cbf4 <find_volume>
 800d224:	4603      	mov	r3, r0
 800d226:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d22a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f040 8191 	bne.w	800d556 <f_open+0x362>
		dj.obj.fs = fs;
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d238:	68ba      	ldr	r2, [r7, #8]
 800d23a:	f107 0314 	add.w	r3, r7, #20
 800d23e:	4611      	mov	r1, r2
 800d240:	4618      	mov	r0, r3
 800d242:	f7ff fbcb 	bl	800c9dc <follow_path>
 800d246:	4603      	mov	r3, r0
 800d248:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d24c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d250:	2b00      	cmp	r3, #0
 800d252:	d11a      	bne.n	800d28a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d254:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d258:	b25b      	sxtb	r3, r3
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	da03      	bge.n	800d266 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d25e:	2306      	movs	r3, #6
 800d260:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d264:	e011      	b.n	800d28a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d266:	79fb      	ldrb	r3, [r7, #7]
 800d268:	f023 0301 	bic.w	r3, r3, #1
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	bf14      	ite	ne
 800d270:	2301      	movne	r3, #1
 800d272:	2300      	moveq	r3, #0
 800d274:	b2db      	uxtb	r3, r3
 800d276:	461a      	mov	r2, r3
 800d278:	f107 0314 	add.w	r3, r7, #20
 800d27c:	4611      	mov	r1, r2
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe fb9a 	bl	800b9b8 <chk_lock>
 800d284:	4603      	mov	r3, r0
 800d286:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d28a:	79fb      	ldrb	r3, [r7, #7]
 800d28c:	f003 031c 	and.w	r3, r3, #28
 800d290:	2b00      	cmp	r3, #0
 800d292:	d07f      	beq.n	800d394 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d294:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d017      	beq.n	800d2cc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d29c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2a0:	2b04      	cmp	r3, #4
 800d2a2:	d10e      	bne.n	800d2c2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d2a4:	f7fe fbe4 	bl	800ba70 <enq_lock>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d006      	beq.n	800d2bc <f_open+0xc8>
 800d2ae:	f107 0314 	add.w	r3, r7, #20
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7ff facb 	bl	800c84e <dir_register>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	e000      	b.n	800d2be <f_open+0xca>
 800d2bc:	2312      	movs	r3, #18
 800d2be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d2c2:	79fb      	ldrb	r3, [r7, #7]
 800d2c4:	f043 0308 	orr.w	r3, r3, #8
 800d2c8:	71fb      	strb	r3, [r7, #7]
 800d2ca:	e010      	b.n	800d2ee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d2cc:	7ebb      	ldrb	r3, [r7, #26]
 800d2ce:	f003 0311 	and.w	r3, r3, #17
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d003      	beq.n	800d2de <f_open+0xea>
					res = FR_DENIED;
 800d2d6:	2307      	movs	r3, #7
 800d2d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d2dc:	e007      	b.n	800d2ee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d2de:	79fb      	ldrb	r3, [r7, #7]
 800d2e0:	f003 0304 	and.w	r3, r3, #4
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <f_open+0xfa>
 800d2e8:	2308      	movs	r3, #8
 800d2ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d2ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d168      	bne.n	800d3c8 <f_open+0x1d4>
 800d2f6:	79fb      	ldrb	r3, [r7, #7]
 800d2f8:	f003 0308 	and.w	r3, r3, #8
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d063      	beq.n	800d3c8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d300:	f7fd ff1a 	bl	800b138 <get_fattime>
 800d304:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d308:	330e      	adds	r3, #14
 800d30a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fe fa77 	bl	800b800 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d314:	3316      	adds	r3, #22
 800d316:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d318:	4618      	mov	r0, r3
 800d31a:	f7fe fa71 	bl	800b800 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d320:	330b      	adds	r3, #11
 800d322:	2220      	movs	r2, #32
 800d324:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d32a:	4611      	mov	r1, r2
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7ff f9fa 	bl	800c726 <ld_clust>
 800d332:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d338:	2200      	movs	r2, #0
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7ff fa12 	bl	800c764 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d342:	331c      	adds	r3, #28
 800d344:	2100      	movs	r1, #0
 800d346:	4618      	mov	r0, r3
 800d348:	f7fe fa5a 	bl	800b800 <st_dword>
					fs->wflag = 1;
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	2201      	movs	r2, #1
 800d350:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d354:	2b00      	cmp	r3, #0
 800d356:	d037      	beq.n	800d3c8 <f_open+0x1d4>
						dw = fs->winsect;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d35c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d35e:	f107 0314 	add.w	r3, r7, #20
 800d362:	2200      	movs	r2, #0
 800d364:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d366:	4618      	mov	r0, r3
 800d368:	f7fe ff25 	bl	800c1b6 <remove_chain>
 800d36c:	4603      	mov	r3, r0
 800d36e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d372:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d376:	2b00      	cmp	r3, #0
 800d378:	d126      	bne.n	800d3c8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fe fcca 	bl	800bd18 <move_window>
 800d384:	4603      	mov	r3, r0
 800d386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d38e:	3a01      	subs	r2, #1
 800d390:	611a      	str	r2, [r3, #16]
 800d392:	e019      	b.n	800d3c8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d115      	bne.n	800d3c8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d39c:	7ebb      	ldrb	r3, [r7, #26]
 800d39e:	f003 0310 	and.w	r3, r3, #16
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d003      	beq.n	800d3ae <f_open+0x1ba>
					res = FR_NO_FILE;
 800d3a6:	2304      	movs	r3, #4
 800d3a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d3ac:	e00c      	b.n	800d3c8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d3ae:	79fb      	ldrb	r3, [r7, #7]
 800d3b0:	f003 0302 	and.w	r3, r3, #2
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d007      	beq.n	800d3c8 <f_open+0x1d4>
 800d3b8:	7ebb      	ldrb	r3, [r7, #26]
 800d3ba:	f003 0301 	and.w	r3, r3, #1
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d002      	beq.n	800d3c8 <f_open+0x1d4>
						res = FR_DENIED;
 800d3c2:	2307      	movs	r3, #7
 800d3c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d3c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d128      	bne.n	800d422 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d3d0:	79fb      	ldrb	r3, [r7, #7]
 800d3d2:	f003 0308 	and.w	r3, r3, #8
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d003      	beq.n	800d3e2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d3da:	79fb      	ldrb	r3, [r7, #7]
 800d3dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d3ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d3f0:	79fb      	ldrb	r3, [r7, #7]
 800d3f2:	f023 0301 	bic.w	r3, r3, #1
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	bf14      	ite	ne
 800d3fa:	2301      	movne	r3, #1
 800d3fc:	2300      	moveq	r3, #0
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	461a      	mov	r2, r3
 800d402:	f107 0314 	add.w	r3, r7, #20
 800d406:	4611      	mov	r1, r2
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fe fb53 	bl	800bab4 <inc_lock>
 800d40e:	4602      	mov	r2, r0
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d102      	bne.n	800d422 <f_open+0x22e>
 800d41c:	2302      	movs	r3, #2
 800d41e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d426:	2b00      	cmp	r3, #0
 800d428:	f040 8095 	bne.w	800d556 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d430:	4611      	mov	r1, r2
 800d432:	4618      	mov	r0, r3
 800d434:	f7ff f977 	bl	800c726 <ld_clust>
 800d438:	4602      	mov	r2, r0
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d440:	331c      	adds	r3, #28
 800d442:	4618      	mov	r0, r3
 800d444:	f7fe f99e 	bl	800b784 <ld_dword>
 800d448:	4602      	mov	r2, r0
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2200      	movs	r2, #0
 800d452:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d454:	693a      	ldr	r2, [r7, #16]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	88da      	ldrh	r2, [r3, #6]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	79fa      	ldrb	r2, [r7, #7]
 800d466:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2200      	movs	r2, #0
 800d46c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2200      	movs	r2, #0
 800d472:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2200      	movs	r2, #0
 800d478:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	3330      	adds	r3, #48	; 0x30
 800d47e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d482:	2100      	movs	r1, #0
 800d484:	4618      	mov	r0, r3
 800d486:	f7fe fa08 	bl	800b89a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d48a:	79fb      	ldrb	r3, [r7, #7]
 800d48c:	f003 0320 	and.w	r3, r3, #32
 800d490:	2b00      	cmp	r3, #0
 800d492:	d060      	beq.n	800d556 <f_open+0x362>
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	68db      	ldr	r3, [r3, #12]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d05c      	beq.n	800d556 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	68da      	ldr	r2, [r3, #12]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	895b      	ldrh	r3, [r3, #10]
 800d4a8:	025b      	lsls	r3, r3, #9
 800d4aa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	657b      	str	r3, [r7, #84]	; 0x54
 800d4b8:	e016      	b.n	800d4e8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fe fce5 	bl	800be8e <get_fat>
 800d4c4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d4c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d802      	bhi.n	800d4d2 <f_open+0x2de>
 800d4cc:	2302      	movs	r3, #2
 800d4ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d4d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4d8:	d102      	bne.n	800d4e0 <f_open+0x2ec>
 800d4da:	2301      	movs	r3, #1
 800d4dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d4e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d4e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4e4:	1ad3      	subs	r3, r2, r3
 800d4e6:	657b      	str	r3, [r7, #84]	; 0x54
 800d4e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d103      	bne.n	800d4f8 <f_open+0x304>
 800d4f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d4f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d8e0      	bhi.n	800d4ba <f_open+0x2c6>
				}
				fp->clust = clst;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d4fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d4fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d502:	2b00      	cmp	r3, #0
 800d504:	d127      	bne.n	800d556 <f_open+0x362>
 800d506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d022      	beq.n	800d556 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d514:	4618      	mov	r0, r3
 800d516:	f7fe fc9b 	bl	800be50 <clust2sect>
 800d51a:	6478      	str	r0, [r7, #68]	; 0x44
 800d51c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d103      	bne.n	800d52a <f_open+0x336>
						res = FR_INT_ERR;
 800d522:	2302      	movs	r3, #2
 800d524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d528:	e015      	b.n	800d556 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d52c:	0a5a      	lsrs	r2, r3, #9
 800d52e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d530:	441a      	add	r2, r3
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	7858      	ldrb	r0, [r3, #1]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	6a1a      	ldr	r2, [r3, #32]
 800d544:	2301      	movs	r3, #1
 800d546:	f7fe f8a7 	bl	800b698 <disk_read>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <f_open+0x362>
 800d550:	2301      	movs	r3, #1
 800d552:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d002      	beq.n	800d564 <f_open+0x370>
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2200      	movs	r2, #0
 800d562:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800d56a:	4611      	mov	r1, r2
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7fe fa07 	bl	800b980 <unlock_fs>
 800d572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d576:	4618      	mov	r0, r3
 800d578:	3760      	adds	r7, #96	; 0x60
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d57e:	b580      	push	{r7, lr}
 800d580:	b08e      	sub	sp, #56	; 0x38
 800d582:	af00      	add	r7, sp, #0
 800d584:	60f8      	str	r0, [r7, #12]
 800d586:	60b9      	str	r1, [r7, #8]
 800d588:	607a      	str	r2, [r7, #4]
 800d58a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	2200      	movs	r2, #0
 800d594:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f107 0214 	add.w	r2, r7, #20
 800d59c:	4611      	mov	r1, r2
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7ff fd7c 	bl	800d09c <validate>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d5aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d107      	bne.n	800d5c2 <f_read+0x44>
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	7d5b      	ldrb	r3, [r3, #21]
 800d5b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d5ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d009      	beq.n	800d5d6 <f_read+0x58>
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7fe f9d8 	bl	800b980 <unlock_fs>
 800d5d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5d4:	e13d      	b.n	800d852 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	7d1b      	ldrb	r3, [r3, #20]
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d106      	bne.n	800d5f0 <f_read+0x72>
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	2107      	movs	r1, #7
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fe f9ca 	bl	800b980 <unlock_fs>
 800d5ec:	2307      	movs	r3, #7
 800d5ee:	e130      	b.n	800d852 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	68da      	ldr	r2, [r3, #12]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	699b      	ldr	r3, [r3, #24]
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	6a3b      	ldr	r3, [r7, #32]
 800d600:	429a      	cmp	r2, r3
 800d602:	f240 811c 	bls.w	800d83e <f_read+0x2c0>
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d60a:	e118      	b.n	800d83e <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	699b      	ldr	r3, [r3, #24]
 800d610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d614:	2b00      	cmp	r3, #0
 800d616:	f040 80e4 	bne.w	800d7e2 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	699b      	ldr	r3, [r3, #24]
 800d61e:	0a5b      	lsrs	r3, r3, #9
 800d620:	697a      	ldr	r2, [r7, #20]
 800d622:	8952      	ldrh	r2, [r2, #10]
 800d624:	3a01      	subs	r2, #1
 800d626:	4013      	ands	r3, r2
 800d628:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d139      	bne.n	800d6a4 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	699b      	ldr	r3, [r3, #24]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d103      	bne.n	800d640 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	633b      	str	r3, [r7, #48]	; 0x30
 800d63e:	e013      	b.n	800d668 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d644:	2b00      	cmp	r3, #0
 800d646:	d007      	beq.n	800d658 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	699b      	ldr	r3, [r3, #24]
 800d64c:	4619      	mov	r1, r3
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f7fe feae 	bl	800c3b0 <clmt_clust>
 800d654:	6338      	str	r0, [r7, #48]	; 0x30
 800d656:	e007      	b.n	800d668 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d658:	68fa      	ldr	r2, [r7, #12]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	69db      	ldr	r3, [r3, #28]
 800d65e:	4619      	mov	r1, r3
 800d660:	4610      	mov	r0, r2
 800d662:	f7fe fc14 	bl	800be8e <get_fat>
 800d666:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d809      	bhi.n	800d682 <f_read+0x104>
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2202      	movs	r2, #2
 800d672:	755a      	strb	r2, [r3, #21]
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	2102      	movs	r1, #2
 800d678:	4618      	mov	r0, r3
 800d67a:	f7fe f981 	bl	800b980 <unlock_fs>
 800d67e:	2302      	movs	r3, #2
 800d680:	e0e7      	b.n	800d852 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d688:	d109      	bne.n	800d69e <f_read+0x120>
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2201      	movs	r2, #1
 800d68e:	755a      	strb	r2, [r3, #21]
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	2101      	movs	r1, #1
 800d694:	4618      	mov	r0, r3
 800d696:	f7fe f973 	bl	800b980 <unlock_fs>
 800d69a:	2301      	movs	r3, #1
 800d69c:	e0d9      	b.n	800d852 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6a2:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d6a4:	697a      	ldr	r2, [r7, #20]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	69db      	ldr	r3, [r3, #28]
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	f7fe fbcf 	bl	800be50 <clust2sect>
 800d6b2:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d109      	bne.n	800d6ce <f_read+0x150>
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2202      	movs	r2, #2
 800d6be:	755a      	strb	r2, [r3, #21]
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	2102      	movs	r1, #2
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7fe f95b 	bl	800b980 <unlock_fs>
 800d6ca:	2302      	movs	r3, #2
 800d6cc:	e0c1      	b.n	800d852 <f_read+0x2d4>
			sect += csect;
 800d6ce:	69ba      	ldr	r2, [r7, #24]
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	0a5b      	lsrs	r3, r3, #9
 800d6da:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d03e      	beq.n	800d760 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d6e2:	69fa      	ldr	r2, [r7, #28]
 800d6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e6:	4413      	add	r3, r2
 800d6e8:	697a      	ldr	r2, [r7, #20]
 800d6ea:	8952      	ldrh	r2, [r2, #10]
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d905      	bls.n	800d6fc <f_read+0x17e>
					cc = fs->csize - csect;
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	895b      	ldrh	r3, [r3, #10]
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	1ad3      	subs	r3, r2, r3
 800d6fa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	7858      	ldrb	r0, [r3, #1]
 800d700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d702:	69ba      	ldr	r2, [r7, #24]
 800d704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d706:	f7fd ffc7 	bl	800b698 <disk_read>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d009      	beq.n	800d724 <f_read+0x1a6>
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2201      	movs	r2, #1
 800d714:	755a      	strb	r2, [r3, #21]
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	2101      	movs	r1, #1
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7fe f930 	bl	800b980 <unlock_fs>
 800d720:	2301      	movs	r3, #1
 800d722:	e096      	b.n	800d852 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	7d1b      	ldrb	r3, [r3, #20]
 800d728:	b25b      	sxtb	r3, r3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	da14      	bge.n	800d758 <f_read+0x1da>
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	6a1a      	ldr	r2, [r3, #32]
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	1ad3      	subs	r3, r2, r3
 800d736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d738:	429a      	cmp	r2, r3
 800d73a:	d90d      	bls.n	800d758 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6a1a      	ldr	r2, [r3, #32]
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	025b      	lsls	r3, r3, #9
 800d746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d748:	18d0      	adds	r0, r2, r3
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	3330      	adds	r3, #48	; 0x30
 800d74e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d752:	4619      	mov	r1, r3
 800d754:	f7fe f880 	bl	800b858 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75a:	025b      	lsls	r3, r3, #9
 800d75c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d75e:	e05a      	b.n	800d816 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6a1b      	ldr	r3, [r3, #32]
 800d764:	69ba      	ldr	r2, [r7, #24]
 800d766:	429a      	cmp	r2, r3
 800d768:	d038      	beq.n	800d7dc <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	7d1b      	ldrb	r3, [r3, #20]
 800d76e:	b25b      	sxtb	r3, r3
 800d770:	2b00      	cmp	r3, #0
 800d772:	da1d      	bge.n	800d7b0 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	7858      	ldrb	r0, [r3, #1]
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6a1a      	ldr	r2, [r3, #32]
 800d782:	2301      	movs	r3, #1
 800d784:	f7fd ffa8 	bl	800b6d8 <disk_write>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d009      	beq.n	800d7a2 <f_read+0x224>
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2201      	movs	r2, #1
 800d792:	755a      	strb	r2, [r3, #21]
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	2101      	movs	r1, #1
 800d798:	4618      	mov	r0, r3
 800d79a:	f7fe f8f1 	bl	800b980 <unlock_fs>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e057      	b.n	800d852 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	7d1b      	ldrb	r3, [r3, #20]
 800d7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7aa:	b2da      	uxtb	r2, r3
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	7858      	ldrb	r0, [r3, #1]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	69ba      	ldr	r2, [r7, #24]
 800d7be:	f7fd ff6b 	bl	800b698 <disk_read>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d009      	beq.n	800d7dc <f_read+0x25e>
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	755a      	strb	r2, [r3, #21]
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	2101      	movs	r1, #1
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fe f8d4 	bl	800b980 <unlock_fs>
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e03a      	b.n	800d852 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	69ba      	ldr	r2, [r7, #24]
 800d7e0:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	699b      	ldr	r3, [r3, #24]
 800d7e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7ea:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d901      	bls.n	800d7fc <f_read+0x27e>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	699b      	ldr	r3, [r3, #24]
 800d806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d80a:	4413      	add	r3, r2
 800d80c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d80e:	4619      	mov	r1, r3
 800d810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d812:	f7fe f821 	bl	800b858 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81a:	4413      	add	r3, r2
 800d81c:	627b      	str	r3, [r7, #36]	; 0x24
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	699a      	ldr	r2, [r3, #24]
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	441a      	add	r2, r3
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	619a      	str	r2, [r3, #24]
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d830:	441a      	add	r2, r3
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83a:	1ad3      	subs	r3, r2, r3
 800d83c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2b00      	cmp	r3, #0
 800d842:	f47f aee3 	bne.w	800d60c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	2100      	movs	r1, #0
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fe f898 	bl	800b980 <unlock_fs>
 800d850:	2300      	movs	r3, #0
}
 800d852:	4618      	mov	r0, r3
 800d854:	3738      	adds	r7, #56	; 0x38
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b086      	sub	sp, #24
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f107 0208 	add.w	r2, r7, #8
 800d868:	4611      	mov	r1, r2
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7ff fc16 	bl	800d09c <validate>
 800d870:	4603      	mov	r3, r0
 800d872:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d874:	7dfb      	ldrb	r3, [r7, #23]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d16d      	bne.n	800d956 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	7d1b      	ldrb	r3, [r3, #20]
 800d87e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d882:	2b00      	cmp	r3, #0
 800d884:	d067      	beq.n	800d956 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	7d1b      	ldrb	r3, [r3, #20]
 800d88a:	b25b      	sxtb	r3, r3
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	da1a      	bge.n	800d8c6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	7858      	ldrb	r0, [r3, #1]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6a1a      	ldr	r2, [r3, #32]
 800d89e:	2301      	movs	r3, #1
 800d8a0:	f7fd ff1a 	bl	800b6d8 <disk_write>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d006      	beq.n	800d8b8 <f_sync+0x5e>
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	2101      	movs	r1, #1
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fe f866 	bl	800b980 <unlock_fs>
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e055      	b.n	800d964 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	7d1b      	ldrb	r3, [r3, #20]
 800d8bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8c0:	b2da      	uxtb	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d8c6:	f7fd fc37 	bl	800b138 <get_fattime>
 800d8ca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	4610      	mov	r0, r2
 800d8d6:	f7fe fa1f 	bl	800bd18 <move_window>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d8de:	7dfb      	ldrb	r3, [r7, #23]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d138      	bne.n	800d956 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8e8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	330b      	adds	r3, #11
 800d8ee:	781a      	ldrb	r2, [r3, #0]
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	330b      	adds	r3, #11
 800d8f4:	f042 0220 	orr.w	r2, r2, #32
 800d8f8:	b2d2      	uxtb	r2, r2
 800d8fa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6818      	ldr	r0, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	689b      	ldr	r3, [r3, #8]
 800d904:	461a      	mov	r2, r3
 800d906:	68f9      	ldr	r1, [r7, #12]
 800d908:	f7fe ff2c 	bl	800c764 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f103 021c 	add.w	r2, r3, #28
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	4619      	mov	r1, r3
 800d918:	4610      	mov	r0, r2
 800d91a:	f7fd ff71 	bl	800b800 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	3316      	adds	r3, #22
 800d922:	6939      	ldr	r1, [r7, #16]
 800d924:	4618      	mov	r0, r3
 800d926:	f7fd ff6b 	bl	800b800 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	3312      	adds	r3, #18
 800d92e:	2100      	movs	r1, #0
 800d930:	4618      	mov	r0, r3
 800d932:	f7fd ff4a 	bl	800b7ca <st_word>
					fs->wflag = 1;
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	2201      	movs	r2, #1
 800d93a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	4618      	mov	r0, r3
 800d940:	f7fe fa18 	bl	800bd74 <sync_fs>
 800d944:	4603      	mov	r3, r0
 800d946:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	7d1b      	ldrb	r3, [r3, #20]
 800d94c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d950:	b2da      	uxtb	r2, r3
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	7dfa      	ldrb	r2, [r7, #23]
 800d95a:	4611      	mov	r1, r2
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7fe f80f 	bl	800b980 <unlock_fs>
 800d962:	7dfb      	ldrb	r3, [r7, #23]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3718      	adds	r7, #24
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f7ff ff70 	bl	800d85a <f_sync>
 800d97a:	4603      	mov	r3, r0
 800d97c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d11d      	bne.n	800d9c0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f107 0208 	add.w	r2, r7, #8
 800d98a:	4611      	mov	r1, r2
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7ff fb85 	bl	800d09c <validate>
 800d992:	4603      	mov	r3, r0
 800d994:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d996:	7bfb      	ldrb	r3, [r7, #15]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d111      	bne.n	800d9c0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	691b      	ldr	r3, [r3, #16]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fe f915 	bl	800bbd0 <dec_lock>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d9aa:	7bfb      	ldrb	r3, [r7, #15]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d102      	bne.n	800d9b6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fd ffe0 	bl	800b980 <unlock_fs>
#endif
		}
	}
	return res;
 800d9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
	...

0800d9cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b087      	sub	sp, #28
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d9e2:	4b1f      	ldr	r3, [pc, #124]	; (800da60 <FATFS_LinkDriverEx+0x94>)
 800d9e4:	7a5b      	ldrb	r3, [r3, #9]
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d131      	bne.n	800da50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d9ec:	4b1c      	ldr	r3, [pc, #112]	; (800da60 <FATFS_LinkDriverEx+0x94>)
 800d9ee:	7a5b      	ldrb	r3, [r3, #9]
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	4b1a      	ldr	r3, [pc, #104]	; (800da60 <FATFS_LinkDriverEx+0x94>)
 800d9f6:	2100      	movs	r1, #0
 800d9f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d9fa:	4b19      	ldr	r3, [pc, #100]	; (800da60 <FATFS_LinkDriverEx+0x94>)
 800d9fc:	7a5b      	ldrb	r3, [r3, #9]
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	4a17      	ldr	r2, [pc, #92]	; (800da60 <FATFS_LinkDriverEx+0x94>)
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	4413      	add	r3, r2
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800da0a:	4b15      	ldr	r3, [pc, #84]	; (800da60 <FATFS_LinkDriverEx+0x94>)
 800da0c:	7a5b      	ldrb	r3, [r3, #9]
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	461a      	mov	r2, r3
 800da12:	4b13      	ldr	r3, [pc, #76]	; (800da60 <FATFS_LinkDriverEx+0x94>)
 800da14:	4413      	add	r3, r2
 800da16:	79fa      	ldrb	r2, [r7, #7]
 800da18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800da1a:	4b11      	ldr	r3, [pc, #68]	; (800da60 <FATFS_LinkDriverEx+0x94>)
 800da1c:	7a5b      	ldrb	r3, [r3, #9]
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	1c5a      	adds	r2, r3, #1
 800da22:	b2d1      	uxtb	r1, r2
 800da24:	4a0e      	ldr	r2, [pc, #56]	; (800da60 <FATFS_LinkDriverEx+0x94>)
 800da26:	7251      	strb	r1, [r2, #9]
 800da28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800da2a:	7dbb      	ldrb	r3, [r7, #22]
 800da2c:	3330      	adds	r3, #48	; 0x30
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	3301      	adds	r3, #1
 800da38:	223a      	movs	r2, #58	; 0x3a
 800da3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	3302      	adds	r3, #2
 800da40:	222f      	movs	r2, #47	; 0x2f
 800da42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	3303      	adds	r3, #3
 800da48:	2200      	movs	r2, #0
 800da4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800da4c:	2300      	movs	r3, #0
 800da4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800da50:	7dfb      	ldrb	r3, [r7, #23]
}
 800da52:	4618      	mov	r0, r3
 800da54:	371c      	adds	r7, #28
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	200057f8 	.word	0x200057f8

0800da64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800da6e:	2200      	movs	r2, #0
 800da70:	6839      	ldr	r1, [r7, #0]
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7ff ffaa 	bl	800d9cc <FATFS_LinkDriverEx>
 800da78:	4603      	mov	r3, r0
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3708      	adds	r7, #8
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b086      	sub	sp, #24
 800da86:	af00      	add	r7, sp, #0
 800da88:	4603      	mov	r3, r0
 800da8a:	6039      	str	r1, [r7, #0]
 800da8c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800da8e:	2300      	movs	r3, #0
 800da90:	60fb      	str	r3, [r7, #12]
 800da92:	2300      	movs	r3, #0
 800da94:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800da96:	f107 030c 	add.w	r3, r7, #12
 800da9a:	2101      	movs	r1, #1
 800da9c:	4618      	mov	r0, r3
 800da9e:	f000 f8e9 	bl	800dc74 <osSemaphoreCreate>
 800daa2:	4602      	mov	r2, r0
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	bf14      	ite	ne
 800dab0:	2301      	movne	r3, #1
 800dab2:	2300      	moveq	r3, #0
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	617b      	str	r3, [r7, #20]

    return ret;
 800dab8:	697b      	ldr	r3, [r7, #20]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3718      	adds	r7, #24
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b082      	sub	sp, #8
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 f988 	bl	800dde0 <osSemaphoreDelete>
#endif
    return 1;
 800dad0:	2301      	movs	r3, #1
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b084      	sub	sp, #16
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800dae6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 f8f4 	bl	800dcd8 <osSemaphoreWait>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d101      	bne.n	800dafa <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800daf6:	2301      	movs	r3, #1
 800daf8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800dafa:	68fb      	ldr	r3, [r7, #12]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3710      	adds	r7, #16
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 f931 	bl	800dd74 <osSemaphoreRelease>
#endif
}
 800db12:	bf00      	nop
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800db1a:	b480      	push	{r7}
 800db1c:	b085      	sub	sp, #20
 800db1e:	af00      	add	r7, sp, #0
 800db20:	4603      	mov	r3, r0
 800db22:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800db24:	2300      	movs	r3, #0
 800db26:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800db28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db2c:	2b84      	cmp	r3, #132	; 0x84
 800db2e:	d005      	beq.n	800db3c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800db30:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	4413      	add	r3, r2
 800db38:	3303      	adds	r3, #3
 800db3a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800db3c:	68fb      	ldr	r3, [r7, #12]
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3714      	adds	r7, #20
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr

0800db4a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800db4a:	b480      	push	{r7}
 800db4c:	b083      	sub	sp, #12
 800db4e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db50:	f3ef 8305 	mrs	r3, IPSR
 800db54:	607b      	str	r3, [r7, #4]
  return(result);
 800db56:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800db58:	2b00      	cmp	r3, #0
 800db5a:	bf14      	ite	ne
 800db5c:	2301      	movne	r3, #1
 800db5e:	2300      	moveq	r3, #0
 800db60:	b2db      	uxtb	r3, r3
}
 800db62:	4618      	mov	r0, r3
 800db64:	370c      	adds	r7, #12
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr

0800db6e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800db72:	f001 fc43 	bl	800f3fc <vTaskStartScheduler>
  
  return osOK;
 800db76:	2300      	movs	r3, #0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800db80:	f002 f884 	bl	800fc8c <xTaskGetSchedulerState>
 800db84:	4603      	mov	r3, r0
 800db86:	2b01      	cmp	r3, #1
 800db88:	d101      	bne.n	800db8e <osKernelRunning+0x12>
    return 0;
 800db8a:	2300      	movs	r3, #0
 800db8c:	e000      	b.n	800db90 <osKernelRunning+0x14>
  else
    return 1;
 800db8e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800db90:	4618      	mov	r0, r3
 800db92:	bd80      	pop	{r7, pc}

0800db94 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800db98:	f7ff ffd7 	bl	800db4a <inHandlerMode>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d003      	beq.n	800dbaa <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800dba2:	f001 fd55 	bl	800f650 <xTaskGetTickCountFromISR>
 800dba6:	4603      	mov	r3, r0
 800dba8:	e002      	b.n	800dbb0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800dbaa:	f001 fd41 	bl	800f630 <xTaskGetTickCount>
 800dbae:	4603      	mov	r3, r0
  }
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800dbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbb6:	b089      	sub	sp, #36	; 0x24
 800dbb8:	af04      	add	r7, sp, #16
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	695b      	ldr	r3, [r3, #20]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d020      	beq.n	800dc08 <osThreadCreate+0x54>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	699b      	ldr	r3, [r3, #24]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d01c      	beq.n	800dc08 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	685c      	ldr	r4, [r3, #4]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681d      	ldr	r5, [r3, #0]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	691e      	ldr	r6, [r3, #16]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7ff ff9a 	bl	800db1a <makeFreeRtosPriority>
 800dbe6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	695b      	ldr	r3, [r3, #20]
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dbf0:	9202      	str	r2, [sp, #8]
 800dbf2:	9301      	str	r3, [sp, #4]
 800dbf4:	9100      	str	r1, [sp, #0]
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	4632      	mov	r2, r6
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f001 fa15 	bl	800f02c <xTaskCreateStatic>
 800dc02:	4603      	mov	r3, r0
 800dc04:	60fb      	str	r3, [r7, #12]
 800dc06:	e01c      	b.n	800dc42 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	685c      	ldr	r4, [r3, #4]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dc14:	b29e      	uxth	r6, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7ff ff7c 	bl	800db1a <makeFreeRtosPriority>
 800dc22:	4602      	mov	r2, r0
 800dc24:	f107 030c 	add.w	r3, r7, #12
 800dc28:	9301      	str	r3, [sp, #4]
 800dc2a:	9200      	str	r2, [sp, #0]
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	4632      	mov	r2, r6
 800dc30:	4629      	mov	r1, r5
 800dc32:	4620      	mov	r0, r4
 800dc34:	f001 fa5d 	bl	800f0f2 <xTaskCreate>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d001      	beq.n	800dc42 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	e000      	b.n	800dc44 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800dc42:	68fb      	ldr	r3, [r7, #12]
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3714      	adds	r7, #20
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc4c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d001      	beq.n	800dc62 <osDelay+0x16>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	e000      	b.n	800dc64 <osDelay+0x18>
 800dc62:	2301      	movs	r3, #1
 800dc64:	4618      	mov	r0, r3
 800dc66:	f001 fb93 	bl	800f390 <vTaskDelay>
  
  return osOK;
 800dc6a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b086      	sub	sp, #24
 800dc78:	af02      	add	r7, sp, #8
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00f      	beq.n	800dca6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d10a      	bne.n	800dca2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	2203      	movs	r2, #3
 800dc92:	9200      	str	r2, [sp, #0]
 800dc94:	2200      	movs	r2, #0
 800dc96:	2100      	movs	r1, #0
 800dc98:	2001      	movs	r0, #1
 800dc9a:	f000 faaf 	bl	800e1fc <xQueueGenericCreateStatic>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	e016      	b.n	800dcd0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800dca2:	2300      	movs	r3, #0
 800dca4:	e014      	b.n	800dcd0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d110      	bne.n	800dcce <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800dcac:	2203      	movs	r2, #3
 800dcae:	2100      	movs	r1, #0
 800dcb0:	2001      	movs	r0, #1
 800dcb2:	f000 fb25 	bl	800e300 <xQueueGenericCreate>
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d005      	beq.n	800dcca <osSemaphoreCreate+0x56>
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f000 fb7d 	bl	800e3c4 <xQueueGenericSend>
      return sema;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	e000      	b.n	800dcd0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800dcce:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3710      	adds	r7, #16
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800dce2:	2300      	movs	r3, #0
 800dce4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d101      	bne.n	800dcf0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800dcec:	2380      	movs	r3, #128	; 0x80
 800dcee:	e03a      	b.n	800dd66 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcfa:	d103      	bne.n	800dd04 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800dcfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd00:	60fb      	str	r3, [r7, #12]
 800dd02:	e009      	b.n	800dd18 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d006      	beq.n	800dd18 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d101      	bne.n	800dd18 <osSemaphoreWait+0x40>
      ticks = 1;
 800dd14:	2301      	movs	r3, #1
 800dd16:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800dd18:	f7ff ff17 	bl	800db4a <inHandlerMode>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d017      	beq.n	800dd52 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dd22:	f107 0308 	add.w	r3, r7, #8
 800dd26:	461a      	mov	r2, r3
 800dd28:	2100      	movs	r1, #0
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 ff80 	bl	800ec30 <xQueueReceiveFromISR>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d001      	beq.n	800dd3a <osSemaphoreWait+0x62>
      return osErrorOS;
 800dd36:	23ff      	movs	r3, #255	; 0xff
 800dd38:	e015      	b.n	800dd66 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d011      	beq.n	800dd64 <osSemaphoreWait+0x8c>
 800dd40:	4b0b      	ldr	r3, [pc, #44]	; (800dd70 <osSemaphoreWait+0x98>)
 800dd42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd46:	601a      	str	r2, [r3, #0]
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	e008      	b.n	800dd64 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800dd52:	68f9      	ldr	r1, [r7, #12]
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 fe57 	bl	800ea08 <xQueueSemaphoreTake>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d001      	beq.n	800dd64 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800dd60:	23ff      	movs	r3, #255	; 0xff
 800dd62:	e000      	b.n	800dd66 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800dd64:	2300      	movs	r3, #0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	e000ed04 	.word	0xe000ed04

0800dd74 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800dd80:	2300      	movs	r3, #0
 800dd82:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800dd84:	f7ff fee1 	bl	800db4a <inHandlerMode>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d016      	beq.n	800ddbc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dd8e:	f107 0308 	add.w	r3, r7, #8
 800dd92:	4619      	mov	r1, r3
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 fcbb 	bl	800e710 <xQueueGiveFromISR>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d001      	beq.n	800dda4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800dda0:	23ff      	movs	r3, #255	; 0xff
 800dda2:	e017      	b.n	800ddd4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d013      	beq.n	800ddd2 <osSemaphoreRelease+0x5e>
 800ddaa:	4b0c      	ldr	r3, [pc, #48]	; (800dddc <osSemaphoreRelease+0x68>)
 800ddac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddb0:	601a      	str	r2, [r3, #0]
 800ddb2:	f3bf 8f4f 	dsb	sy
 800ddb6:	f3bf 8f6f 	isb	sy
 800ddba:	e00a      	b.n	800ddd2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 fafe 	bl	800e3c4 <xQueueGenericSend>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d001      	beq.n	800ddd2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ddce:	23ff      	movs	r3, #255	; 0xff
 800ddd0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3710      	adds	r7, #16
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	e000ed04 	.word	0xe000ed04

0800dde0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800dde8:	f7ff feaf 	bl	800db4a <inHandlerMode>
 800ddec:	4603      	mov	r3, r0
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800ddf2:	2382      	movs	r3, #130	; 0x82
 800ddf4:	e003      	b.n	800ddfe <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 ffa0 	bl	800ed3c <vQueueDelete>

  return osOK; 
 800ddfc:	2300      	movs	r3, #0
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}

0800de06 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800de06:	b590      	push	{r4, r7, lr}
 800de08:	b085      	sub	sp, #20
 800de0a:	af02      	add	r7, sp, #8
 800de0c:	6078      	str	r0, [r7, #4]
 800de0e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d011      	beq.n	800de3c <osMessageCreate+0x36>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00d      	beq.n	800de3c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6818      	ldr	r0, [r3, #0]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6859      	ldr	r1, [r3, #4]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	689a      	ldr	r2, [r3, #8]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	2400      	movs	r4, #0
 800de32:	9400      	str	r4, [sp, #0]
 800de34:	f000 f9e2 	bl	800e1fc <xQueueGenericCreateStatic>
 800de38:	4603      	mov	r3, r0
 800de3a:	e008      	b.n	800de4e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6818      	ldr	r0, [r3, #0]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	4619      	mov	r1, r3
 800de48:	f000 fa5a 	bl	800e300 <xQueueGenericCreate>
 800de4c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800de4e:	4618      	mov	r0, r3
 800de50:	370c      	adds	r7, #12
 800de52:	46bd      	mov	sp, r7
 800de54:	bd90      	pop	{r4, r7, pc}
	...

0800de58 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b086      	sub	sp, #24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800de64:	2300      	movs	r3, #0
 800de66:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d101      	bne.n	800de76 <osMessagePut+0x1e>
    ticks = 1;
 800de72:	2301      	movs	r3, #1
 800de74:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800de76:	f7ff fe68 	bl	800db4a <inHandlerMode>
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d018      	beq.n	800deb2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800de80:	f107 0210 	add.w	r2, r7, #16
 800de84:	f107 0108 	add.w	r1, r7, #8
 800de88:	2300      	movs	r3, #0
 800de8a:	68f8      	ldr	r0, [r7, #12]
 800de8c:	f000 fba0 	bl	800e5d0 <xQueueGenericSendFromISR>
 800de90:	4603      	mov	r3, r0
 800de92:	2b01      	cmp	r3, #1
 800de94:	d001      	beq.n	800de9a <osMessagePut+0x42>
      return osErrorOS;
 800de96:	23ff      	movs	r3, #255	; 0xff
 800de98:	e018      	b.n	800decc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d014      	beq.n	800deca <osMessagePut+0x72>
 800dea0:	4b0c      	ldr	r3, [pc, #48]	; (800ded4 <osMessagePut+0x7c>)
 800dea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dea6:	601a      	str	r2, [r3, #0]
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	f3bf 8f6f 	isb	sy
 800deb0:	e00b      	b.n	800deca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800deb2:	f107 0108 	add.w	r1, r7, #8
 800deb6:	2300      	movs	r3, #0
 800deb8:	697a      	ldr	r2, [r7, #20]
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	f000 fa82 	bl	800e3c4 <xQueueGenericSend>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d001      	beq.n	800deca <osMessagePut+0x72>
      return osErrorOS;
 800dec6:	23ff      	movs	r3, #255	; 0xff
 800dec8:	e000      	b.n	800decc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800deca:	2300      	movs	r3, #0
}
 800decc:	4618      	mov	r0, r3
 800dece:	3718      	adds	r7, #24
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	e000ed04 	.word	0xe000ed04

0800ded8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ded8:	b590      	push	{r4, r7, lr}
 800deda:	b08b      	sub	sp, #44	; 0x2c
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800dee8:	2300      	movs	r3, #0
 800deea:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d10a      	bne.n	800df08 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800def2:	2380      	movs	r3, #128	; 0x80
 800def4:	617b      	str	r3, [r7, #20]
    return event;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	461c      	mov	r4, r3
 800defa:	f107 0314 	add.w	r3, r7, #20
 800defe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df06:	e054      	b.n	800dfb2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800df08:	2300      	movs	r3, #0
 800df0a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800df0c:	2300      	movs	r3, #0
 800df0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df16:	d103      	bne.n	800df20 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800df18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df1c:	627b      	str	r3, [r7, #36]	; 0x24
 800df1e:	e009      	b.n	800df34 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d006      	beq.n	800df34 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800df2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d101      	bne.n	800df34 <osMessageGet+0x5c>
      ticks = 1;
 800df30:	2301      	movs	r3, #1
 800df32:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800df34:	f7ff fe09 	bl	800db4a <inHandlerMode>
 800df38:	4603      	mov	r3, r0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d01c      	beq.n	800df78 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800df3e:	f107 0220 	add.w	r2, r7, #32
 800df42:	f107 0314 	add.w	r3, r7, #20
 800df46:	3304      	adds	r3, #4
 800df48:	4619      	mov	r1, r3
 800df4a:	68b8      	ldr	r0, [r7, #8]
 800df4c:	f000 fe70 	bl	800ec30 <xQueueReceiveFromISR>
 800df50:	4603      	mov	r3, r0
 800df52:	2b01      	cmp	r3, #1
 800df54:	d102      	bne.n	800df5c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800df56:	2310      	movs	r3, #16
 800df58:	617b      	str	r3, [r7, #20]
 800df5a:	e001      	b.n	800df60 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800df5c:	2300      	movs	r3, #0
 800df5e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800df60:	6a3b      	ldr	r3, [r7, #32]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d01d      	beq.n	800dfa2 <osMessageGet+0xca>
 800df66:	4b15      	ldr	r3, [pc, #84]	; (800dfbc <osMessageGet+0xe4>)
 800df68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df6c:	601a      	str	r2, [r3, #0]
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	e014      	b.n	800dfa2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800df78:	f107 0314 	add.w	r3, r7, #20
 800df7c:	3304      	adds	r3, #4
 800df7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df80:	4619      	mov	r1, r3
 800df82:	68b8      	ldr	r0, [r7, #8]
 800df84:	f000 fc5a 	bl	800e83c <xQueueReceive>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d102      	bne.n	800df94 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800df8e:	2310      	movs	r3, #16
 800df90:	617b      	str	r3, [r7, #20]
 800df92:	e006      	b.n	800dfa2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800df94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df96:	2b00      	cmp	r3, #0
 800df98:	d101      	bne.n	800df9e <osMessageGet+0xc6>
 800df9a:	2300      	movs	r3, #0
 800df9c:	e000      	b.n	800dfa0 <osMessageGet+0xc8>
 800df9e:	2340      	movs	r3, #64	; 0x40
 800dfa0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	461c      	mov	r4, r3
 800dfa6:	f107 0314 	add.w	r3, r7, #20
 800dfaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dfae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	372c      	adds	r7, #44	; 0x2c
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd90      	pop	{r4, r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	e000ed04 	.word	0xe000ed04

0800dfc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f103 0208 	add.w	r2, r3, #8
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f103 0208 	add.w	r2, r3, #8
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f103 0208 	add.w	r2, r3, #8
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2200      	movs	r2, #0
 800dff2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e00e:	bf00      	nop
 800e010:	370c      	adds	r7, #12
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr

0800e01a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e01a:	b480      	push	{r7}
 800e01c:	b085      	sub	sp, #20
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
 800e022:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	68fa      	ldr	r2, [r7, #12]
 800e02e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	689a      	ldr	r2, [r3, #8]
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	683a      	ldr	r2, [r7, #0]
 800e03e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	683a      	ldr	r2, [r7, #0]
 800e044:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	1c5a      	adds	r2, r3, #1
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	601a      	str	r2, [r3, #0]
}
 800e056:	bf00      	nop
 800e058:	3714      	adds	r7, #20
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e062:	b480      	push	{r7}
 800e064:	b085      	sub	sp, #20
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
 800e06a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e078:	d103      	bne.n	800e082 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	691b      	ldr	r3, [r3, #16]
 800e07e:	60fb      	str	r3, [r7, #12]
 800e080:	e00c      	b.n	800e09c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	3308      	adds	r3, #8
 800e086:	60fb      	str	r3, [r7, #12]
 800e088:	e002      	b.n	800e090 <vListInsert+0x2e>
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	60fb      	str	r3, [r7, #12]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	68ba      	ldr	r2, [r7, #8]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d2f6      	bcs.n	800e08a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	685a      	ldr	r2, [r3, #4]
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	683a      	ldr	r2, [r7, #0]
 800e0aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	68fa      	ldr	r2, [r7, #12]
 800e0b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	683a      	ldr	r2, [r7, #0]
 800e0b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	1c5a      	adds	r2, r3, #1
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	601a      	str	r2, [r3, #0]
}
 800e0c8:	bf00      	nop
 800e0ca:	3714      	adds	r7, #20
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b085      	sub	sp, #20
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	691b      	ldr	r3, [r3, #16]
 800e0e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	6892      	ldr	r2, [r2, #8]
 800e0ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	6852      	ldr	r2, [r2, #4]
 800e0f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	685b      	ldr	r3, [r3, #4]
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d103      	bne.n	800e108 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	689a      	ldr	r2, [r3, #8]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	1e5a      	subs	r2, r3, #1
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3714      	adds	r7, #20
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b084      	sub	sp, #16
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d10c      	bne.n	800e156 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e140:	b672      	cpsid	i
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	b662      	cpsie	i
 800e150:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e152:	bf00      	nop
 800e154:	e7fe      	b.n	800e154 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e156:	f002 f8e9 	bl	801032c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e162:	68f9      	ldr	r1, [r7, #12]
 800e164:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e166:	fb01 f303 	mul.w	r3, r1, r3
 800e16a:	441a      	add	r2, r3
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2200      	movs	r2, #0
 800e174:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e186:	3b01      	subs	r3, #1
 800e188:	68f9      	ldr	r1, [r7, #12]
 800e18a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e18c:	fb01 f303 	mul.w	r3, r1, r3
 800e190:	441a      	add	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	22ff      	movs	r2, #255	; 0xff
 800e19a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	22ff      	movs	r2, #255	; 0xff
 800e1a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d114      	bne.n	800e1d6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	691b      	ldr	r3, [r3, #16]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d01a      	beq.n	800e1ea <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	3310      	adds	r3, #16
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f001 fb9f 	bl	800f8fc <xTaskRemoveFromEventList>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d012      	beq.n	800e1ea <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e1c4:	4b0c      	ldr	r3, [pc, #48]	; (800e1f8 <xQueueGenericReset+0xd0>)
 800e1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ca:	601a      	str	r2, [r3, #0]
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	f3bf 8f6f 	isb	sy
 800e1d4:	e009      	b.n	800e1ea <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	3310      	adds	r3, #16
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7ff fef0 	bl	800dfc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	3324      	adds	r3, #36	; 0x24
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7ff feeb 	bl	800dfc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e1ea:	f002 f8d3 	bl	8010394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e1ee:	2301      	movs	r3, #1
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	e000ed04 	.word	0xe000ed04

0800e1fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b08e      	sub	sp, #56	; 0x38
 800e200:	af02      	add	r7, sp, #8
 800e202:	60f8      	str	r0, [r7, #12]
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	607a      	str	r2, [r7, #4]
 800e208:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10c      	bne.n	800e22a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e214:	b672      	cpsid	i
 800e216:	f383 8811 	msr	BASEPRI, r3
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	b662      	cpsie	i
 800e224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e226:	bf00      	nop
 800e228:	e7fe      	b.n	800e228 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d10c      	bne.n	800e24a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e234:	b672      	cpsid	i
 800e236:	f383 8811 	msr	BASEPRI, r3
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	b662      	cpsie	i
 800e244:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e246:	bf00      	nop
 800e248:	e7fe      	b.n	800e248 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d002      	beq.n	800e256 <xQueueGenericCreateStatic+0x5a>
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d001      	beq.n	800e25a <xQueueGenericCreateStatic+0x5e>
 800e256:	2301      	movs	r3, #1
 800e258:	e000      	b.n	800e25c <xQueueGenericCreateStatic+0x60>
 800e25a:	2300      	movs	r3, #0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d10c      	bne.n	800e27a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e264:	b672      	cpsid	i
 800e266:	f383 8811 	msr	BASEPRI, r3
 800e26a:	f3bf 8f6f 	isb	sy
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	b662      	cpsie	i
 800e274:	623b      	str	r3, [r7, #32]
}
 800e276:	bf00      	nop
 800e278:	e7fe      	b.n	800e278 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d102      	bne.n	800e286 <xQueueGenericCreateStatic+0x8a>
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d101      	bne.n	800e28a <xQueueGenericCreateStatic+0x8e>
 800e286:	2301      	movs	r3, #1
 800e288:	e000      	b.n	800e28c <xQueueGenericCreateStatic+0x90>
 800e28a:	2300      	movs	r3, #0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10c      	bne.n	800e2aa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e294:	b672      	cpsid	i
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	b662      	cpsie	i
 800e2a4:	61fb      	str	r3, [r7, #28]
}
 800e2a6:	bf00      	nop
 800e2a8:	e7fe      	b.n	800e2a8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e2aa:	2348      	movs	r3, #72	; 0x48
 800e2ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	2b48      	cmp	r3, #72	; 0x48
 800e2b2:	d00c      	beq.n	800e2ce <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b8:	b672      	cpsid	i
 800e2ba:	f383 8811 	msr	BASEPRI, r3
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f3bf 8f4f 	dsb	sy
 800e2c6:	b662      	cpsie	i
 800e2c8:	61bb      	str	r3, [r7, #24]
}
 800e2ca:	bf00      	nop
 800e2cc:	e7fe      	b.n	800e2cc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e2ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00d      	beq.n	800e2f6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2dc:	2201      	movs	r2, #1
 800e2de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e2e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	68b9      	ldr	r1, [r7, #8]
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f000 f847 	bl	800e384 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3730      	adds	r7, #48	; 0x30
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e300:	b580      	push	{r7, lr}
 800e302:	b08a      	sub	sp, #40	; 0x28
 800e304:	af02      	add	r7, sp, #8
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	4613      	mov	r3, r2
 800e30c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d10c      	bne.n	800e32e <xQueueGenericCreate+0x2e>
	__asm volatile
 800e314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e318:	b672      	cpsid	i
 800e31a:	f383 8811 	msr	BASEPRI, r3
 800e31e:	f3bf 8f6f 	isb	sy
 800e322:	f3bf 8f4f 	dsb	sy
 800e326:	b662      	cpsie	i
 800e328:	613b      	str	r3, [r7, #16]
}
 800e32a:	bf00      	nop
 800e32c:	e7fe      	b.n	800e32c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d102      	bne.n	800e33a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e334:	2300      	movs	r3, #0
 800e336:	61fb      	str	r3, [r7, #28]
 800e338:	e004      	b.n	800e344 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	68ba      	ldr	r2, [r7, #8]
 800e33e:	fb02 f303 	mul.w	r3, r2, r3
 800e342:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	3348      	adds	r3, #72	; 0x48
 800e348:	4618      	mov	r0, r3
 800e34a:	f002 f91b 	bl	8010584 <pvPortMalloc>
 800e34e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d011      	beq.n	800e37a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e356:	69bb      	ldr	r3, [r7, #24]
 800e358:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	3348      	adds	r3, #72	; 0x48
 800e35e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e360:	69bb      	ldr	r3, [r7, #24]
 800e362:	2200      	movs	r2, #0
 800e364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e368:	79fa      	ldrb	r2, [r7, #7]
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	4613      	mov	r3, r2
 800e370:	697a      	ldr	r2, [r7, #20]
 800e372:	68b9      	ldr	r1, [r7, #8]
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f000 f805 	bl	800e384 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e37a:	69bb      	ldr	r3, [r7, #24]
	}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3720      	adds	r7, #32
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	607a      	str	r2, [r7, #4]
 800e390:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d103      	bne.n	800e3a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e398:	69bb      	ldr	r3, [r7, #24]
 800e39a:	69ba      	ldr	r2, [r7, #24]
 800e39c:	601a      	str	r2, [r3, #0]
 800e39e:	e002      	b.n	800e3a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	68ba      	ldr	r2, [r7, #8]
 800e3b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e3b2:	2101      	movs	r1, #1
 800e3b4:	69b8      	ldr	r0, [r7, #24]
 800e3b6:	f7ff feb7 	bl	800e128 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e3ba:	bf00      	nop
 800e3bc:	3710      	adds	r7, #16
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
	...

0800e3c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b08e      	sub	sp, #56	; 0x38
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
 800e3d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d10c      	bne.n	800e3fa <xQueueGenericSend+0x36>
	__asm volatile
 800e3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e4:	b672      	cpsid	i
 800e3e6:	f383 8811 	msr	BASEPRI, r3
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	b662      	cpsie	i
 800e3f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e3f6:	bf00      	nop
 800e3f8:	e7fe      	b.n	800e3f8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d103      	bne.n	800e408 <xQueueGenericSend+0x44>
 800e400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e404:	2b00      	cmp	r3, #0
 800e406:	d101      	bne.n	800e40c <xQueueGenericSend+0x48>
 800e408:	2301      	movs	r3, #1
 800e40a:	e000      	b.n	800e40e <xQueueGenericSend+0x4a>
 800e40c:	2300      	movs	r3, #0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d10c      	bne.n	800e42c <xQueueGenericSend+0x68>
	__asm volatile
 800e412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e416:	b672      	cpsid	i
 800e418:	f383 8811 	msr	BASEPRI, r3
 800e41c:	f3bf 8f6f 	isb	sy
 800e420:	f3bf 8f4f 	dsb	sy
 800e424:	b662      	cpsie	i
 800e426:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e428:	bf00      	nop
 800e42a:	e7fe      	b.n	800e42a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	2b02      	cmp	r3, #2
 800e430:	d103      	bne.n	800e43a <xQueueGenericSend+0x76>
 800e432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e436:	2b01      	cmp	r3, #1
 800e438:	d101      	bne.n	800e43e <xQueueGenericSend+0x7a>
 800e43a:	2301      	movs	r3, #1
 800e43c:	e000      	b.n	800e440 <xQueueGenericSend+0x7c>
 800e43e:	2300      	movs	r3, #0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d10c      	bne.n	800e45e <xQueueGenericSend+0x9a>
	__asm volatile
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	b672      	cpsid	i
 800e44a:	f383 8811 	msr	BASEPRI, r3
 800e44e:	f3bf 8f6f 	isb	sy
 800e452:	f3bf 8f4f 	dsb	sy
 800e456:	b662      	cpsie	i
 800e458:	623b      	str	r3, [r7, #32]
}
 800e45a:	bf00      	nop
 800e45c:	e7fe      	b.n	800e45c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e45e:	f001 fc15 	bl	800fc8c <xTaskGetSchedulerState>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d102      	bne.n	800e46e <xQueueGenericSend+0xaa>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d101      	bne.n	800e472 <xQueueGenericSend+0xae>
 800e46e:	2301      	movs	r3, #1
 800e470:	e000      	b.n	800e474 <xQueueGenericSend+0xb0>
 800e472:	2300      	movs	r3, #0
 800e474:	2b00      	cmp	r3, #0
 800e476:	d10c      	bne.n	800e492 <xQueueGenericSend+0xce>
	__asm volatile
 800e478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47c:	b672      	cpsid	i
 800e47e:	f383 8811 	msr	BASEPRI, r3
 800e482:	f3bf 8f6f 	isb	sy
 800e486:	f3bf 8f4f 	dsb	sy
 800e48a:	b662      	cpsie	i
 800e48c:	61fb      	str	r3, [r7, #28]
}
 800e48e:	bf00      	nop
 800e490:	e7fe      	b.n	800e490 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e492:	f001 ff4b 	bl	801032c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d302      	bcc.n	800e4a8 <xQueueGenericSend+0xe4>
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	d129      	bne.n	800e4fc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4a8:	683a      	ldr	r2, [r7, #0]
 800e4aa:	68b9      	ldr	r1, [r7, #8]
 800e4ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4ae:	f000 fc82 	bl	800edb6 <prvCopyDataToQueue>
 800e4b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d010      	beq.n	800e4de <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4be:	3324      	adds	r3, #36	; 0x24
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f001 fa1b 	bl	800f8fc <xTaskRemoveFromEventList>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d013      	beq.n	800e4f4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e4cc:	4b3f      	ldr	r3, [pc, #252]	; (800e5cc <xQueueGenericSend+0x208>)
 800e4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4d2:	601a      	str	r2, [r3, #0]
 800e4d4:	f3bf 8f4f 	dsb	sy
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	e00a      	b.n	800e4f4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d007      	beq.n	800e4f4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e4e4:	4b39      	ldr	r3, [pc, #228]	; (800e5cc <xQueueGenericSend+0x208>)
 800e4e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4ea:	601a      	str	r2, [r3, #0]
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e4f4:	f001 ff4e 	bl	8010394 <vPortExitCritical>
				return pdPASS;
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	e063      	b.n	800e5c4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d103      	bne.n	800e50a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e502:	f001 ff47 	bl	8010394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e506:	2300      	movs	r3, #0
 800e508:	e05c      	b.n	800e5c4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d106      	bne.n	800e51e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e510:	f107 0314 	add.w	r3, r7, #20
 800e514:	4618      	mov	r0, r3
 800e516:	f001 fa55 	bl	800f9c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e51a:	2301      	movs	r3, #1
 800e51c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e51e:	f001 ff39 	bl	8010394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e522:	f000 ffd9 	bl	800f4d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e526:	f001 ff01 	bl	801032c <vPortEnterCritical>
 800e52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e530:	b25b      	sxtb	r3, r3
 800e532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e536:	d103      	bne.n	800e540 <xQueueGenericSend+0x17c>
 800e538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53a:	2200      	movs	r2, #0
 800e53c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e546:	b25b      	sxtb	r3, r3
 800e548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e54c:	d103      	bne.n	800e556 <xQueueGenericSend+0x192>
 800e54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e550:	2200      	movs	r2, #0
 800e552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e556:	f001 ff1d 	bl	8010394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e55a:	1d3a      	adds	r2, r7, #4
 800e55c:	f107 0314 	add.w	r3, r7, #20
 800e560:	4611      	mov	r1, r2
 800e562:	4618      	mov	r0, r3
 800e564:	f001 fa44 	bl	800f9f0 <xTaskCheckForTimeOut>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d124      	bne.n	800e5b8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e56e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e570:	f000 fd19 	bl	800efa6 <prvIsQueueFull>
 800e574:	4603      	mov	r3, r0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d018      	beq.n	800e5ac <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57c:	3310      	adds	r3, #16
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	4611      	mov	r1, r2
 800e582:	4618      	mov	r0, r3
 800e584:	f001 f994 	bl	800f8b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e58a:	f000 fca4 	bl	800eed6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e58e:	f000 ffb1 	bl	800f4f4 <xTaskResumeAll>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	f47f af7c 	bne.w	800e492 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e59a:	4b0c      	ldr	r3, [pc, #48]	; (800e5cc <xQueueGenericSend+0x208>)
 800e59c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5a0:	601a      	str	r2, [r3, #0]
 800e5a2:	f3bf 8f4f 	dsb	sy
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	e772      	b.n	800e492 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e5ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5ae:	f000 fc92 	bl	800eed6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5b2:	f000 ff9f 	bl	800f4f4 <xTaskResumeAll>
 800e5b6:	e76c      	b.n	800e492 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e5b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5ba:	f000 fc8c 	bl	800eed6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5be:	f000 ff99 	bl	800f4f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e5c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3738      	adds	r7, #56	; 0x38
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	e000ed04 	.word	0xe000ed04

0800e5d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b08e      	sub	sp, #56	; 0x38
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	60f8      	str	r0, [r7, #12]
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	607a      	str	r2, [r7, #4]
 800e5dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d10c      	bne.n	800e602 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ec:	b672      	cpsid	i
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	b662      	cpsie	i
 800e5fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e5fe:	bf00      	nop
 800e600:	e7fe      	b.n	800e600 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d103      	bne.n	800e610 <xQueueGenericSendFromISR+0x40>
 800e608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d101      	bne.n	800e614 <xQueueGenericSendFromISR+0x44>
 800e610:	2301      	movs	r3, #1
 800e612:	e000      	b.n	800e616 <xQueueGenericSendFromISR+0x46>
 800e614:	2300      	movs	r3, #0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10c      	bne.n	800e634 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61e:	b672      	cpsid	i
 800e620:	f383 8811 	msr	BASEPRI, r3
 800e624:	f3bf 8f6f 	isb	sy
 800e628:	f3bf 8f4f 	dsb	sy
 800e62c:	b662      	cpsie	i
 800e62e:	623b      	str	r3, [r7, #32]
}
 800e630:	bf00      	nop
 800e632:	e7fe      	b.n	800e632 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	2b02      	cmp	r3, #2
 800e638:	d103      	bne.n	800e642 <xQueueGenericSendFromISR+0x72>
 800e63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d101      	bne.n	800e646 <xQueueGenericSendFromISR+0x76>
 800e642:	2301      	movs	r3, #1
 800e644:	e000      	b.n	800e648 <xQueueGenericSendFromISR+0x78>
 800e646:	2300      	movs	r3, #0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d10c      	bne.n	800e666 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e650:	b672      	cpsid	i
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	b662      	cpsie	i
 800e660:	61fb      	str	r3, [r7, #28]
}
 800e662:	bf00      	nop
 800e664:	e7fe      	b.n	800e664 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e666:	f001 ff49 	bl	80104fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e66a:	f3ef 8211 	mrs	r2, BASEPRI
 800e66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e672:	b672      	cpsid	i
 800e674:	f383 8811 	msr	BASEPRI, r3
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	f3bf 8f4f 	dsb	sy
 800e680:	b662      	cpsie	i
 800e682:	61ba      	str	r2, [r7, #24]
 800e684:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e686:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e688:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e692:	429a      	cmp	r2, r3
 800e694:	d302      	bcc.n	800e69c <xQueueGenericSendFromISR+0xcc>
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	2b02      	cmp	r3, #2
 800e69a:	d12c      	bne.n	800e6f6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6a6:	683a      	ldr	r2, [r7, #0]
 800e6a8:	68b9      	ldr	r1, [r7, #8]
 800e6aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6ac:	f000 fb83 	bl	800edb6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e6b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e6b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6b8:	d112      	bne.n	800e6e0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d016      	beq.n	800e6f0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c4:	3324      	adds	r3, #36	; 0x24
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f001 f918 	bl	800f8fc <xTaskRemoveFromEventList>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00e      	beq.n	800e6f0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00b      	beq.n	800e6f0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	601a      	str	r2, [r3, #0]
 800e6de:	e007      	b.n	800e6f0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e6e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	b25a      	sxtb	r2, r3
 800e6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e6f4:	e001      	b.n	800e6fa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	637b      	str	r3, [r7, #52]	; 0x34
 800e6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e704:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3738      	adds	r7, #56	; 0x38
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b08e      	sub	sp, #56	; 0x38
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10c      	bne.n	800e73e <xQueueGiveFromISR+0x2e>
	__asm volatile
 800e724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e728:	b672      	cpsid	i
 800e72a:	f383 8811 	msr	BASEPRI, r3
 800e72e:	f3bf 8f6f 	isb	sy
 800e732:	f3bf 8f4f 	dsb	sy
 800e736:	b662      	cpsie	i
 800e738:	623b      	str	r3, [r7, #32]
}
 800e73a:	bf00      	nop
 800e73c:	e7fe      	b.n	800e73c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00c      	beq.n	800e760 <xQueueGiveFromISR+0x50>
	__asm volatile
 800e746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74a:	b672      	cpsid	i
 800e74c:	f383 8811 	msr	BASEPRI, r3
 800e750:	f3bf 8f6f 	isb	sy
 800e754:	f3bf 8f4f 	dsb	sy
 800e758:	b662      	cpsie	i
 800e75a:	61fb      	str	r3, [r7, #28]
}
 800e75c:	bf00      	nop
 800e75e:	e7fe      	b.n	800e75e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d103      	bne.n	800e770 <xQueueGiveFromISR+0x60>
 800e768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d101      	bne.n	800e774 <xQueueGiveFromISR+0x64>
 800e770:	2301      	movs	r3, #1
 800e772:	e000      	b.n	800e776 <xQueueGiveFromISR+0x66>
 800e774:	2300      	movs	r3, #0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10c      	bne.n	800e794 <xQueueGiveFromISR+0x84>
	__asm volatile
 800e77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e77e:	b672      	cpsid	i
 800e780:	f383 8811 	msr	BASEPRI, r3
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	f3bf 8f4f 	dsb	sy
 800e78c:	b662      	cpsie	i
 800e78e:	61bb      	str	r3, [r7, #24]
}
 800e790:	bf00      	nop
 800e792:	e7fe      	b.n	800e792 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e794:	f001 feb2 	bl	80104fc <vPortValidateInterruptPriority>
	__asm volatile
 800e798:	f3ef 8211 	mrs	r2, BASEPRI
 800e79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a0:	b672      	cpsid	i
 800e7a2:	f383 8811 	msr	BASEPRI, r3
 800e7a6:	f3bf 8f6f 	isb	sy
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	b662      	cpsie	i
 800e7b0:	617a      	str	r2, [r7, #20]
 800e7b2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e7b4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7bc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d22b      	bcs.n	800e820 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d4:	1c5a      	adds	r2, r3, #1
 800e7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e7da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e7de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7e2:	d112      	bne.n	800e80a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d016      	beq.n	800e81a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ee:	3324      	adds	r3, #36	; 0x24
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f001 f883 	bl	800f8fc <xTaskRemoveFromEventList>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d00e      	beq.n	800e81a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d00b      	beq.n	800e81a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	2201      	movs	r2, #1
 800e806:	601a      	str	r2, [r3, #0]
 800e808:	e007      	b.n	800e81a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e80a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e80e:	3301      	adds	r3, #1
 800e810:	b2db      	uxtb	r3, r3
 800e812:	b25a      	sxtb	r2, r3
 800e814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e81a:	2301      	movs	r3, #1
 800e81c:	637b      	str	r3, [r7, #52]	; 0x34
 800e81e:	e001      	b.n	800e824 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e820:	2300      	movs	r3, #0
 800e822:	637b      	str	r3, [r7, #52]	; 0x34
 800e824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e826:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f383 8811 	msr	BASEPRI, r3
}
 800e82e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e832:	4618      	mov	r0, r3
 800e834:	3738      	adds	r7, #56	; 0x38
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
	...

0800e83c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b08c      	sub	sp, #48	; 0x30
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e848:	2300      	movs	r3, #0
 800e84a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e852:	2b00      	cmp	r3, #0
 800e854:	d10c      	bne.n	800e870 <xQueueReceive+0x34>
	__asm volatile
 800e856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e85a:	b672      	cpsid	i
 800e85c:	f383 8811 	msr	BASEPRI, r3
 800e860:	f3bf 8f6f 	isb	sy
 800e864:	f3bf 8f4f 	dsb	sy
 800e868:	b662      	cpsie	i
 800e86a:	623b      	str	r3, [r7, #32]
}
 800e86c:	bf00      	nop
 800e86e:	e7fe      	b.n	800e86e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d103      	bne.n	800e87e <xQueueReceive+0x42>
 800e876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d101      	bne.n	800e882 <xQueueReceive+0x46>
 800e87e:	2301      	movs	r3, #1
 800e880:	e000      	b.n	800e884 <xQueueReceive+0x48>
 800e882:	2300      	movs	r3, #0
 800e884:	2b00      	cmp	r3, #0
 800e886:	d10c      	bne.n	800e8a2 <xQueueReceive+0x66>
	__asm volatile
 800e888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88c:	b672      	cpsid	i
 800e88e:	f383 8811 	msr	BASEPRI, r3
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	b662      	cpsie	i
 800e89c:	61fb      	str	r3, [r7, #28]
}
 800e89e:	bf00      	nop
 800e8a0:	e7fe      	b.n	800e8a0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8a2:	f001 f9f3 	bl	800fc8c <xTaskGetSchedulerState>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d102      	bne.n	800e8b2 <xQueueReceive+0x76>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d101      	bne.n	800e8b6 <xQueueReceive+0x7a>
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e000      	b.n	800e8b8 <xQueueReceive+0x7c>
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d10c      	bne.n	800e8d6 <xQueueReceive+0x9a>
	__asm volatile
 800e8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c0:	b672      	cpsid	i
 800e8c2:	f383 8811 	msr	BASEPRI, r3
 800e8c6:	f3bf 8f6f 	isb	sy
 800e8ca:	f3bf 8f4f 	dsb	sy
 800e8ce:	b662      	cpsie	i
 800e8d0:	61bb      	str	r3, [r7, #24]
}
 800e8d2:	bf00      	nop
 800e8d4:	e7fe      	b.n	800e8d4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e8d6:	f001 fd29 	bl	801032c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d01f      	beq.n	800e926 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8e6:	68b9      	ldr	r1, [r7, #8]
 800e8e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8ea:	f000 face 	bl	800ee8a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f0:	1e5a      	subs	r2, r3, #1
 800e8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f8:	691b      	ldr	r3, [r3, #16]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00f      	beq.n	800e91e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e900:	3310      	adds	r3, #16
 800e902:	4618      	mov	r0, r3
 800e904:	f000 fffa 	bl	800f8fc <xTaskRemoveFromEventList>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d007      	beq.n	800e91e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e90e:	4b3d      	ldr	r3, [pc, #244]	; (800ea04 <xQueueReceive+0x1c8>)
 800e910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e914:	601a      	str	r2, [r3, #0]
 800e916:	f3bf 8f4f 	dsb	sy
 800e91a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e91e:	f001 fd39 	bl	8010394 <vPortExitCritical>
				return pdPASS;
 800e922:	2301      	movs	r3, #1
 800e924:	e069      	b.n	800e9fa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d103      	bne.n	800e934 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e92c:	f001 fd32 	bl	8010394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e930:	2300      	movs	r3, #0
 800e932:	e062      	b.n	800e9fa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e936:	2b00      	cmp	r3, #0
 800e938:	d106      	bne.n	800e948 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e93a:	f107 0310 	add.w	r3, r7, #16
 800e93e:	4618      	mov	r0, r3
 800e940:	f001 f840 	bl	800f9c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e944:	2301      	movs	r3, #1
 800e946:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e948:	f001 fd24 	bl	8010394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e94c:	f000 fdc4 	bl	800f4d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e950:	f001 fcec 	bl	801032c <vPortEnterCritical>
 800e954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e956:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e95a:	b25b      	sxtb	r3, r3
 800e95c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e960:	d103      	bne.n	800e96a <xQueueReceive+0x12e>
 800e962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e964:	2200      	movs	r2, #0
 800e966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e970:	b25b      	sxtb	r3, r3
 800e972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e976:	d103      	bne.n	800e980 <xQueueReceive+0x144>
 800e978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97a:	2200      	movs	r2, #0
 800e97c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e980:	f001 fd08 	bl	8010394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e984:	1d3a      	adds	r2, r7, #4
 800e986:	f107 0310 	add.w	r3, r7, #16
 800e98a:	4611      	mov	r1, r2
 800e98c:	4618      	mov	r0, r3
 800e98e:	f001 f82f 	bl	800f9f0 <xTaskCheckForTimeOut>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d123      	bne.n	800e9e0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e99a:	f000 faee 	bl	800ef7a <prvIsQueueEmpty>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d017      	beq.n	800e9d4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a6:	3324      	adds	r3, #36	; 0x24
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	4611      	mov	r1, r2
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f000 ff7f 	bl	800f8b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e9b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9b4:	f000 fa8f 	bl	800eed6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9b8:	f000 fd9c 	bl	800f4f4 <xTaskResumeAll>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d189      	bne.n	800e8d6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800e9c2:	4b10      	ldr	r3, [pc, #64]	; (800ea04 <xQueueReceive+0x1c8>)
 800e9c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9c8:	601a      	str	r2, [r3, #0]
 800e9ca:	f3bf 8f4f 	dsb	sy
 800e9ce:	f3bf 8f6f 	isb	sy
 800e9d2:	e780      	b.n	800e8d6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e9d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9d6:	f000 fa7e 	bl	800eed6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9da:	f000 fd8b 	bl	800f4f4 <xTaskResumeAll>
 800e9de:	e77a      	b.n	800e8d6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e9e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9e2:	f000 fa78 	bl	800eed6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9e6:	f000 fd85 	bl	800f4f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ec:	f000 fac5 	bl	800ef7a <prvIsQueueEmpty>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	f43f af6f 	beq.w	800e8d6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e9f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3730      	adds	r7, #48	; 0x30
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	e000ed04 	.word	0xe000ed04

0800ea08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b08e      	sub	sp, #56	; 0x38
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea12:	2300      	movs	r3, #0
 800ea14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d10c      	bne.n	800ea3e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800ea24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea28:	b672      	cpsid	i
 800ea2a:	f383 8811 	msr	BASEPRI, r3
 800ea2e:	f3bf 8f6f 	isb	sy
 800ea32:	f3bf 8f4f 	dsb	sy
 800ea36:	b662      	cpsie	i
 800ea38:	623b      	str	r3, [r7, #32]
}
 800ea3a:	bf00      	nop
 800ea3c:	e7fe      	b.n	800ea3c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ea3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00c      	beq.n	800ea60 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800ea46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4a:	b672      	cpsid	i
 800ea4c:	f383 8811 	msr	BASEPRI, r3
 800ea50:	f3bf 8f6f 	isb	sy
 800ea54:	f3bf 8f4f 	dsb	sy
 800ea58:	b662      	cpsie	i
 800ea5a:	61fb      	str	r3, [r7, #28]
}
 800ea5c:	bf00      	nop
 800ea5e:	e7fe      	b.n	800ea5e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea60:	f001 f914 	bl	800fc8c <xTaskGetSchedulerState>
 800ea64:	4603      	mov	r3, r0
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d102      	bne.n	800ea70 <xQueueSemaphoreTake+0x68>
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d101      	bne.n	800ea74 <xQueueSemaphoreTake+0x6c>
 800ea70:	2301      	movs	r3, #1
 800ea72:	e000      	b.n	800ea76 <xQueueSemaphoreTake+0x6e>
 800ea74:	2300      	movs	r3, #0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d10c      	bne.n	800ea94 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800ea7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea7e:	b672      	cpsid	i
 800ea80:	f383 8811 	msr	BASEPRI, r3
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	b662      	cpsie	i
 800ea8e:	61bb      	str	r3, [r7, #24]
}
 800ea90:	bf00      	nop
 800ea92:	e7fe      	b.n	800ea92 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea94:	f001 fc4a 	bl	801032c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ea98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ea9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d024      	beq.n	800eaee <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa6:	1e5a      	subs	r2, r3, #1
 800eaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaaa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d104      	bne.n	800eabe <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800eab4:	f001 fab0 	bl	8010018 <pvTaskIncrementMutexHeldCount>
 800eab8:	4602      	mov	r2, r0
 800eaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac0:	691b      	ldr	r3, [r3, #16]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d00f      	beq.n	800eae6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac8:	3310      	adds	r3, #16
 800eaca:	4618      	mov	r0, r3
 800eacc:	f000 ff16 	bl	800f8fc <xTaskRemoveFromEventList>
 800ead0:	4603      	mov	r3, r0
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d007      	beq.n	800eae6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ead6:	4b55      	ldr	r3, [pc, #340]	; (800ec2c <xQueueSemaphoreTake+0x224>)
 800ead8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eadc:	601a      	str	r2, [r3, #0]
 800eade:	f3bf 8f4f 	dsb	sy
 800eae2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eae6:	f001 fc55 	bl	8010394 <vPortExitCritical>
				return pdPASS;
 800eaea:	2301      	movs	r3, #1
 800eaec:	e099      	b.n	800ec22 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d113      	bne.n	800eb1c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eaf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d00c      	beq.n	800eb14 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800eafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eafe:	b672      	cpsid	i
 800eb00:	f383 8811 	msr	BASEPRI, r3
 800eb04:	f3bf 8f6f 	isb	sy
 800eb08:	f3bf 8f4f 	dsb	sy
 800eb0c:	b662      	cpsie	i
 800eb0e:	617b      	str	r3, [r7, #20]
}
 800eb10:	bf00      	nop
 800eb12:	e7fe      	b.n	800eb12 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eb14:	f001 fc3e 	bl	8010394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	e082      	b.n	800ec22 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d106      	bne.n	800eb30 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb22:	f107 030c 	add.w	r3, r7, #12
 800eb26:	4618      	mov	r0, r3
 800eb28:	f000 ff4c 	bl	800f9c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb30:	f001 fc30 	bl	8010394 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb34:	f000 fcd0 	bl	800f4d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb38:	f001 fbf8 	bl	801032c <vPortEnterCritical>
 800eb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb42:	b25b      	sxtb	r3, r3
 800eb44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb48:	d103      	bne.n	800eb52 <xQueueSemaphoreTake+0x14a>
 800eb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb58:	b25b      	sxtb	r3, r3
 800eb5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb5e:	d103      	bne.n	800eb68 <xQueueSemaphoreTake+0x160>
 800eb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb62:	2200      	movs	r2, #0
 800eb64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb68:	f001 fc14 	bl	8010394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb6c:	463a      	mov	r2, r7
 800eb6e:	f107 030c 	add.w	r3, r7, #12
 800eb72:	4611      	mov	r1, r2
 800eb74:	4618      	mov	r0, r3
 800eb76:	f000 ff3b 	bl	800f9f0 <xTaskCheckForTimeOut>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d132      	bne.n	800ebe6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb82:	f000 f9fa 	bl	800ef7a <prvIsQueueEmpty>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d026      	beq.n	800ebda <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d109      	bne.n	800eba8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800eb94:	f001 fbca 	bl	801032c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9a:	689b      	ldr	r3, [r3, #8]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f001 f893 	bl	800fcc8 <xTaskPriorityInherit>
 800eba2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800eba4:	f001 fbf6 	bl	8010394 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebaa:	3324      	adds	r3, #36	; 0x24
 800ebac:	683a      	ldr	r2, [r7, #0]
 800ebae:	4611      	mov	r1, r2
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f000 fe7d 	bl	800f8b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebb8:	f000 f98d 	bl	800eed6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ebbc:	f000 fc9a 	bl	800f4f4 <xTaskResumeAll>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f47f af66 	bne.w	800ea94 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800ebc8:	4b18      	ldr	r3, [pc, #96]	; (800ec2c <xQueueSemaphoreTake+0x224>)
 800ebca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebce:	601a      	str	r2, [r3, #0]
 800ebd0:	f3bf 8f4f 	dsb	sy
 800ebd4:	f3bf 8f6f 	isb	sy
 800ebd8:	e75c      	b.n	800ea94 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ebda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebdc:	f000 f97b 	bl	800eed6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ebe0:	f000 fc88 	bl	800f4f4 <xTaskResumeAll>
 800ebe4:	e756      	b.n	800ea94 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ebe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebe8:	f000 f975 	bl	800eed6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebec:	f000 fc82 	bl	800f4f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebf2:	f000 f9c2 	bl	800ef7a <prvIsQueueEmpty>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	f43f af4b 	beq.w	800ea94 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ebfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d00d      	beq.n	800ec20 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800ec04:	f001 fb92 	bl	801032c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ec08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec0a:	f000 f8bc 	bl	800ed86 <prvGetDisinheritPriorityAfterTimeout>
 800ec0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ec10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec16:	4618      	mov	r0, r3
 800ec18:	f001 f960 	bl	800fedc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ec1c:	f001 fbba 	bl	8010394 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3738      	adds	r7, #56	; 0x38
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	e000ed04 	.word	0xe000ed04

0800ec30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08e      	sub	sp, #56	; 0x38
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ec40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d10c      	bne.n	800ec60 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800ec46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4a:	b672      	cpsid	i
 800ec4c:	f383 8811 	msr	BASEPRI, r3
 800ec50:	f3bf 8f6f 	isb	sy
 800ec54:	f3bf 8f4f 	dsb	sy
 800ec58:	b662      	cpsie	i
 800ec5a:	623b      	str	r3, [r7, #32]
}
 800ec5c:	bf00      	nop
 800ec5e:	e7fe      	b.n	800ec5e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d103      	bne.n	800ec6e <xQueueReceiveFromISR+0x3e>
 800ec66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d101      	bne.n	800ec72 <xQueueReceiveFromISR+0x42>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e000      	b.n	800ec74 <xQueueReceiveFromISR+0x44>
 800ec72:	2300      	movs	r3, #0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d10c      	bne.n	800ec92 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800ec78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7c:	b672      	cpsid	i
 800ec7e:	f383 8811 	msr	BASEPRI, r3
 800ec82:	f3bf 8f6f 	isb	sy
 800ec86:	f3bf 8f4f 	dsb	sy
 800ec8a:	b662      	cpsie	i
 800ec8c:	61fb      	str	r3, [r7, #28]
}
 800ec8e:	bf00      	nop
 800ec90:	e7fe      	b.n	800ec90 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec92:	f001 fc33 	bl	80104fc <vPortValidateInterruptPriority>
	__asm volatile
 800ec96:	f3ef 8211 	mrs	r2, BASEPRI
 800ec9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9e:	b672      	cpsid	i
 800eca0:	f383 8811 	msr	BASEPRI, r3
 800eca4:	f3bf 8f6f 	isb	sy
 800eca8:	f3bf 8f4f 	dsb	sy
 800ecac:	b662      	cpsie	i
 800ecae:	61ba      	str	r2, [r7, #24]
 800ecb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ecb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ecb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ecbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d02f      	beq.n	800ed22 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ecc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ecc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eccc:	68b9      	ldr	r1, [r7, #8]
 800ecce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecd0:	f000 f8db 	bl	800ee8a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	1e5a      	subs	r2, r3, #1
 800ecd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecda:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ecdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ece0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ece4:	d112      	bne.n	800ed0c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ece6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece8:	691b      	ldr	r3, [r3, #16]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d016      	beq.n	800ed1c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf0:	3310      	adds	r3, #16
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f000 fe02 	bl	800f8fc <xTaskRemoveFromEventList>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d00e      	beq.n	800ed1c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d00b      	beq.n	800ed1c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2201      	movs	r2, #1
 800ed08:	601a      	str	r2, [r3, #0]
 800ed0a:	e007      	b.n	800ed1c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ed0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed10:	3301      	adds	r3, #1
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	b25a      	sxtb	r2, r3
 800ed16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ed20:	e001      	b.n	800ed26 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800ed22:	2300      	movs	r3, #0
 800ed24:	637b      	str	r3, [r7, #52]	; 0x34
 800ed26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed28:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	f383 8811 	msr	BASEPRI, r3
}
 800ed30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3738      	adds	r7, #56	; 0x38
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d10c      	bne.n	800ed68 <vQueueDelete+0x2c>
	__asm volatile
 800ed4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed52:	b672      	cpsid	i
 800ed54:	f383 8811 	msr	BASEPRI, r3
 800ed58:	f3bf 8f6f 	isb	sy
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	b662      	cpsie	i
 800ed62:	60bb      	str	r3, [r7, #8]
}
 800ed64:	bf00      	nop
 800ed66:	e7fe      	b.n	800ed66 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ed68:	68f8      	ldr	r0, [r7, #12]
 800ed6a:	f000 f935 	bl	800efd8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d102      	bne.n	800ed7e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800ed78:	68f8      	ldr	r0, [r7, #12]
 800ed7a:	f001 fccd 	bl	8010718 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ed7e:	bf00      	nop
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ed86:	b480      	push	{r7}
 800ed88:	b085      	sub	sp, #20
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d006      	beq.n	800eda4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f1c3 0307 	rsb	r3, r3, #7
 800eda0:	60fb      	str	r3, [r7, #12]
 800eda2:	e001      	b.n	800eda8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800eda4:	2300      	movs	r3, #0
 800eda6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800eda8:	68fb      	ldr	r3, [r7, #12]
	}
 800edaa:	4618      	mov	r0, r3
 800edac:	3714      	adds	r7, #20
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr

0800edb6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800edb6:	b580      	push	{r7, lr}
 800edb8:	b086      	sub	sp, #24
 800edba:	af00      	add	r7, sp, #0
 800edbc:	60f8      	str	r0, [r7, #12]
 800edbe:	60b9      	str	r1, [r7, #8]
 800edc0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800edc2:	2300      	movs	r3, #0
 800edc4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d10d      	bne.n	800edf0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d14d      	bne.n	800ee78 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	4618      	mov	r0, r3
 800ede2:	f000 fff1 	bl	800fdc8 <xTaskPriorityDisinherit>
 800ede6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2200      	movs	r2, #0
 800edec:	609a      	str	r2, [r3, #8]
 800edee:	e043      	b.n	800ee78 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d119      	bne.n	800ee2a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6858      	ldr	r0, [r3, #4]
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edfe:	461a      	mov	r2, r3
 800ee00:	68b9      	ldr	r1, [r7, #8]
 800ee02:	f002 fb21 	bl	8011448 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	685a      	ldr	r2, [r3, #4]
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee0e:	441a      	add	r2, r3
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	685a      	ldr	r2, [r3, #4]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d32b      	bcc.n	800ee78 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	605a      	str	r2, [r3, #4]
 800ee28:	e026      	b.n	800ee78 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	68d8      	ldr	r0, [r3, #12]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee32:	461a      	mov	r2, r3
 800ee34:	68b9      	ldr	r1, [r7, #8]
 800ee36:	f002 fb07 	bl	8011448 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	68da      	ldr	r2, [r3, #12]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee42:	425b      	negs	r3, r3
 800ee44:	441a      	add	r2, r3
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	68da      	ldr	r2, [r3, #12]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d207      	bcs.n	800ee66 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	689a      	ldr	r2, [r3, #8]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee5e:	425b      	negs	r3, r3
 800ee60:	441a      	add	r2, r3
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2b02      	cmp	r3, #2
 800ee6a:	d105      	bne.n	800ee78 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d002      	beq.n	800ee78 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	3b01      	subs	r3, #1
 800ee76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	1c5a      	adds	r2, r3, #1
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ee80:	697b      	ldr	r3, [r7, #20]
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3718      	adds	r7, #24
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}

0800ee8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ee8a:	b580      	push	{r7, lr}
 800ee8c:	b082      	sub	sp, #8
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	6078      	str	r0, [r7, #4]
 800ee92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d018      	beq.n	800eece <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	68da      	ldr	r2, [r3, #12]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea4:	441a      	add	r2, r3
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	68da      	ldr	r2, [r3, #12]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	689b      	ldr	r3, [r3, #8]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d303      	bcc.n	800eebe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	68d9      	ldr	r1, [r3, #12]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eec6:	461a      	mov	r2, r3
 800eec8:	6838      	ldr	r0, [r7, #0]
 800eeca:	f002 fabd 	bl	8011448 <memcpy>
	}
}
 800eece:	bf00      	nop
 800eed0:	3708      	adds	r7, #8
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b084      	sub	sp, #16
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eede:	f001 fa25 	bl	801032c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eee8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eeea:	e011      	b.n	800ef10 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d012      	beq.n	800ef1a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	3324      	adds	r3, #36	; 0x24
 800eef8:	4618      	mov	r0, r3
 800eefa:	f000 fcff 	bl	800f8fc <xTaskRemoveFromEventList>
 800eefe:	4603      	mov	r3, r0
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d001      	beq.n	800ef08 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ef04:	f000 fdda 	bl	800fabc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ef08:	7bfb      	ldrb	r3, [r7, #15]
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	b2db      	uxtb	r3, r3
 800ef0e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	dce9      	bgt.n	800eeec <prvUnlockQueue+0x16>
 800ef18:	e000      	b.n	800ef1c <prvUnlockQueue+0x46>
					break;
 800ef1a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	22ff      	movs	r2, #255	; 0xff
 800ef20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ef24:	f001 fa36 	bl	8010394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ef28:	f001 fa00 	bl	801032c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef32:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef34:	e011      	b.n	800ef5a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	691b      	ldr	r3, [r3, #16]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d012      	beq.n	800ef64 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	3310      	adds	r3, #16
 800ef42:	4618      	mov	r0, r3
 800ef44:	f000 fcda 	bl	800f8fc <xTaskRemoveFromEventList>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d001      	beq.n	800ef52 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ef4e:	f000 fdb5 	bl	800fabc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ef52:	7bbb      	ldrb	r3, [r7, #14]
 800ef54:	3b01      	subs	r3, #1
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	dce9      	bgt.n	800ef36 <prvUnlockQueue+0x60>
 800ef62:	e000      	b.n	800ef66 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ef64:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	22ff      	movs	r2, #255	; 0xff
 800ef6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ef6e:	f001 fa11 	bl	8010394 <vPortExitCritical>
}
 800ef72:	bf00      	nop
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b084      	sub	sp, #16
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ef82:	f001 f9d3 	bl	801032c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d102      	bne.n	800ef94 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	60fb      	str	r3, [r7, #12]
 800ef92:	e001      	b.n	800ef98 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ef94:	2300      	movs	r3, #0
 800ef96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ef98:	f001 f9fc 	bl	8010394 <vPortExitCritical>

	return xReturn;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3710      	adds	r7, #16
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800efa6:	b580      	push	{r7, lr}
 800efa8:	b084      	sub	sp, #16
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800efae:	f001 f9bd 	bl	801032c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efba:	429a      	cmp	r2, r3
 800efbc:	d102      	bne.n	800efc4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800efbe:	2301      	movs	r3, #1
 800efc0:	60fb      	str	r3, [r7, #12]
 800efc2:	e001      	b.n	800efc8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800efc4:	2300      	movs	r3, #0
 800efc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800efc8:	f001 f9e4 	bl	8010394 <vPortExitCritical>

	return xReturn;
 800efcc:	68fb      	ldr	r3, [r7, #12]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3710      	adds	r7, #16
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
	...

0800efd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800efd8:	b480      	push	{r7}
 800efda:	b085      	sub	sp, #20
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800efe0:	2300      	movs	r3, #0
 800efe2:	60fb      	str	r3, [r7, #12]
 800efe4:	e016      	b.n	800f014 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800efe6:	4a10      	ldr	r2, [pc, #64]	; (800f028 <vQueueUnregisterQueue+0x50>)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	00db      	lsls	r3, r3, #3
 800efec:	4413      	add	r3, r2
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d10b      	bne.n	800f00e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800eff6:	4a0c      	ldr	r2, [pc, #48]	; (800f028 <vQueueUnregisterQueue+0x50>)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2100      	movs	r1, #0
 800effc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f000:	4a09      	ldr	r2, [pc, #36]	; (800f028 <vQueueUnregisterQueue+0x50>)
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	00db      	lsls	r3, r3, #3
 800f006:	4413      	add	r3, r2
 800f008:	2200      	movs	r2, #0
 800f00a:	605a      	str	r2, [r3, #4]
				break;
 800f00c:	e006      	b.n	800f01c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3301      	adds	r3, #1
 800f012:	60fb      	str	r3, [r7, #12]
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2b07      	cmp	r3, #7
 800f018:	d9e5      	bls.n	800efe6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f01a:	bf00      	nop
 800f01c:	bf00      	nop
 800f01e:	3714      	adds	r7, #20
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr
 800f028:	20009c14 	.word	0x20009c14

0800f02c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b08e      	sub	sp, #56	; 0x38
 800f030:	af04      	add	r7, sp, #16
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	607a      	str	r2, [r7, #4]
 800f038:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d10c      	bne.n	800f05a <xTaskCreateStatic+0x2e>
	__asm volatile
 800f040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f044:	b672      	cpsid	i
 800f046:	f383 8811 	msr	BASEPRI, r3
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	b662      	cpsie	i
 800f054:	623b      	str	r3, [r7, #32]
}
 800f056:	bf00      	nop
 800f058:	e7fe      	b.n	800f058 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d10c      	bne.n	800f07a <xTaskCreateStatic+0x4e>
	__asm volatile
 800f060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f064:	b672      	cpsid	i
 800f066:	f383 8811 	msr	BASEPRI, r3
 800f06a:	f3bf 8f6f 	isb	sy
 800f06e:	f3bf 8f4f 	dsb	sy
 800f072:	b662      	cpsie	i
 800f074:	61fb      	str	r3, [r7, #28]
}
 800f076:	bf00      	nop
 800f078:	e7fe      	b.n	800f078 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f07a:	23b4      	movs	r3, #180	; 0xb4
 800f07c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	2bb4      	cmp	r3, #180	; 0xb4
 800f082:	d00c      	beq.n	800f09e <xTaskCreateStatic+0x72>
	__asm volatile
 800f084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f088:	b672      	cpsid	i
 800f08a:	f383 8811 	msr	BASEPRI, r3
 800f08e:	f3bf 8f6f 	isb	sy
 800f092:	f3bf 8f4f 	dsb	sy
 800f096:	b662      	cpsie	i
 800f098:	61bb      	str	r3, [r7, #24]
}
 800f09a:	bf00      	nop
 800f09c:	e7fe      	b.n	800f09c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f09e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d01e      	beq.n	800f0e4 <xTaskCreateStatic+0xb8>
 800f0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d01b      	beq.n	800f0e4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b8:	2202      	movs	r2, #2
 800f0ba:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f0be:	2300      	movs	r3, #0
 800f0c0:	9303      	str	r3, [sp, #12]
 800f0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c4:	9302      	str	r3, [sp, #8]
 800f0c6:	f107 0314 	add.w	r3, r7, #20
 800f0ca:	9301      	str	r3, [sp, #4]
 800f0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ce:	9300      	str	r3, [sp, #0]
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	68b9      	ldr	r1, [r7, #8]
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	f000 f850 	bl	800f17c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f0dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0de:	f000 f8ed 	bl	800f2bc <prvAddNewTaskToReadyList>
 800f0e2:	e001      	b.n	800f0e8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f0e8:	697b      	ldr	r3, [r7, #20]
	}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3728      	adds	r7, #40	; 0x28
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b08c      	sub	sp, #48	; 0x30
 800f0f6:	af04      	add	r7, sp, #16
 800f0f8:	60f8      	str	r0, [r7, #12]
 800f0fa:	60b9      	str	r1, [r7, #8]
 800f0fc:	603b      	str	r3, [r7, #0]
 800f0fe:	4613      	mov	r3, r2
 800f100:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f102:	88fb      	ldrh	r3, [r7, #6]
 800f104:	009b      	lsls	r3, r3, #2
 800f106:	4618      	mov	r0, r3
 800f108:	f001 fa3c 	bl	8010584 <pvPortMalloc>
 800f10c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d00e      	beq.n	800f132 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f114:	20b4      	movs	r0, #180	; 0xb4
 800f116:	f001 fa35 	bl	8010584 <pvPortMalloc>
 800f11a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d003      	beq.n	800f12a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	697a      	ldr	r2, [r7, #20]
 800f126:	631a      	str	r2, [r3, #48]	; 0x30
 800f128:	e005      	b.n	800f136 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f12a:	6978      	ldr	r0, [r7, #20]
 800f12c:	f001 faf4 	bl	8010718 <vPortFree>
 800f130:	e001      	b.n	800f136 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f132:	2300      	movs	r3, #0
 800f134:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f136:	69fb      	ldr	r3, [r7, #28]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d017      	beq.n	800f16c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	2200      	movs	r2, #0
 800f140:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f144:	88fa      	ldrh	r2, [r7, #6]
 800f146:	2300      	movs	r3, #0
 800f148:	9303      	str	r3, [sp, #12]
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	9302      	str	r3, [sp, #8]
 800f14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f150:	9301      	str	r3, [sp, #4]
 800f152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	68b9      	ldr	r1, [r7, #8]
 800f15a:	68f8      	ldr	r0, [r7, #12]
 800f15c:	f000 f80e 	bl	800f17c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f160:	69f8      	ldr	r0, [r7, #28]
 800f162:	f000 f8ab 	bl	800f2bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f166:	2301      	movs	r3, #1
 800f168:	61bb      	str	r3, [r7, #24]
 800f16a:	e002      	b.n	800f172 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f16c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f170:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f172:	69bb      	ldr	r3, [r7, #24]
	}
 800f174:	4618      	mov	r0, r3
 800f176:	3720      	adds	r7, #32
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b088      	sub	sp, #32
 800f180:	af00      	add	r7, sp, #0
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	60b9      	str	r1, [r7, #8]
 800f186:	607a      	str	r2, [r7, #4]
 800f188:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f18e:	6879      	ldr	r1, [r7, #4]
 800f190:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f194:	440b      	add	r3, r1
 800f196:	009b      	lsls	r3, r3, #2
 800f198:	4413      	add	r3, r2
 800f19a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f19c:	69bb      	ldr	r3, [r7, #24]
 800f19e:	f023 0307 	bic.w	r3, r3, #7
 800f1a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f1a4:	69bb      	ldr	r3, [r7, #24]
 800f1a6:	f003 0307 	and.w	r3, r3, #7
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d00c      	beq.n	800f1c8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800f1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b2:	b672      	cpsid	i
 800f1b4:	f383 8811 	msr	BASEPRI, r3
 800f1b8:	f3bf 8f6f 	isb	sy
 800f1bc:	f3bf 8f4f 	dsb	sy
 800f1c0:	b662      	cpsie	i
 800f1c2:	617b      	str	r3, [r7, #20]
}
 800f1c4:	bf00      	nop
 800f1c6:	e7fe      	b.n	800f1c6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d01f      	beq.n	800f20e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	61fb      	str	r3, [r7, #28]
 800f1d2:	e012      	b.n	800f1fa <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f1d4:	68ba      	ldr	r2, [r7, #8]
 800f1d6:	69fb      	ldr	r3, [r7, #28]
 800f1d8:	4413      	add	r3, r2
 800f1da:	7819      	ldrb	r1, [r3, #0]
 800f1dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	4413      	add	r3, r2
 800f1e2:	3334      	adds	r3, #52	; 0x34
 800f1e4:	460a      	mov	r2, r1
 800f1e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f1e8:	68ba      	ldr	r2, [r7, #8]
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	4413      	add	r3, r2
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d006      	beq.n	800f202 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	61fb      	str	r3, [r7, #28]
 800f1fa:	69fb      	ldr	r3, [r7, #28]
 800f1fc:	2b0f      	cmp	r3, #15
 800f1fe:	d9e9      	bls.n	800f1d4 <prvInitialiseNewTask+0x58>
 800f200:	e000      	b.n	800f204 <prvInitialiseNewTask+0x88>
			{
				break;
 800f202:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f206:	2200      	movs	r2, #0
 800f208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f20c:	e003      	b.n	800f216 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f210:	2200      	movs	r2, #0
 800f212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f218:	2b06      	cmp	r3, #6
 800f21a:	d901      	bls.n	800f220 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f21c:	2306      	movs	r3, #6
 800f21e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f224:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f22a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22e:	2200      	movs	r2, #0
 800f230:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f234:	3304      	adds	r3, #4
 800f236:	4618      	mov	r0, r3
 800f238:	f7fe fee2 	bl	800e000 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23e:	3318      	adds	r3, #24
 800f240:	4618      	mov	r0, r3
 800f242:	f7fe fedd 	bl	800e000 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f24a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24e:	f1c3 0207 	rsb	r2, r3, #7
 800f252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f254:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f25a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f25e:	2200      	movs	r2, #0
 800f260:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f266:	2200      	movs	r2, #0
 800f268:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26e:	334c      	adds	r3, #76	; 0x4c
 800f270:	2260      	movs	r2, #96	; 0x60
 800f272:	2100      	movs	r1, #0
 800f274:	4618      	mov	r0, r3
 800f276:	f002 f8f5 	bl	8011464 <memset>
 800f27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27c:	4a0c      	ldr	r2, [pc, #48]	; (800f2b0 <prvInitialiseNewTask+0x134>)
 800f27e:	651a      	str	r2, [r3, #80]	; 0x50
 800f280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f282:	4a0c      	ldr	r2, [pc, #48]	; (800f2b4 <prvInitialiseNewTask+0x138>)
 800f284:	655a      	str	r2, [r3, #84]	; 0x54
 800f286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f288:	4a0b      	ldr	r2, [pc, #44]	; (800f2b8 <prvInitialiseNewTask+0x13c>)
 800f28a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f28c:	683a      	ldr	r2, [r7, #0]
 800f28e:	68f9      	ldr	r1, [r7, #12]
 800f290:	69b8      	ldr	r0, [r7, #24]
 800f292:	f000 ff3b 	bl	801010c <pxPortInitialiseStack>
 800f296:	4602      	mov	r2, r0
 800f298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d002      	beq.n	800f2a8 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f2a8:	bf00      	nop
 800f2aa:	3720      	adds	r7, #32
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	08012f5c 	.word	0x08012f5c
 800f2b4:	08012f7c 	.word	0x08012f7c
 800f2b8:	08012f3c 	.word	0x08012f3c

0800f2bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f2c4:	f001 f832 	bl	801032c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f2c8:	4b2a      	ldr	r3, [pc, #168]	; (800f374 <prvAddNewTaskToReadyList+0xb8>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	4a29      	ldr	r2, [pc, #164]	; (800f374 <prvAddNewTaskToReadyList+0xb8>)
 800f2d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f2d2:	4b29      	ldr	r3, [pc, #164]	; (800f378 <prvAddNewTaskToReadyList+0xbc>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d109      	bne.n	800f2ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f2da:	4a27      	ldr	r2, [pc, #156]	; (800f378 <prvAddNewTaskToReadyList+0xbc>)
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f2e0:	4b24      	ldr	r3, [pc, #144]	; (800f374 <prvAddNewTaskToReadyList+0xb8>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d110      	bne.n	800f30a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f2e8:	f000 fc0c 	bl	800fb04 <prvInitialiseTaskLists>
 800f2ec:	e00d      	b.n	800f30a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f2ee:	4b23      	ldr	r3, [pc, #140]	; (800f37c <prvAddNewTaskToReadyList+0xc0>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d109      	bne.n	800f30a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f2f6:	4b20      	ldr	r3, [pc, #128]	; (800f378 <prvAddNewTaskToReadyList+0xbc>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f300:	429a      	cmp	r2, r3
 800f302:	d802      	bhi.n	800f30a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f304:	4a1c      	ldr	r2, [pc, #112]	; (800f378 <prvAddNewTaskToReadyList+0xbc>)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f30a:	4b1d      	ldr	r3, [pc, #116]	; (800f380 <prvAddNewTaskToReadyList+0xc4>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	3301      	adds	r3, #1
 800f310:	4a1b      	ldr	r2, [pc, #108]	; (800f380 <prvAddNewTaskToReadyList+0xc4>)
 800f312:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f318:	2201      	movs	r2, #1
 800f31a:	409a      	lsls	r2, r3
 800f31c:	4b19      	ldr	r3, [pc, #100]	; (800f384 <prvAddNewTaskToReadyList+0xc8>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	4313      	orrs	r3, r2
 800f322:	4a18      	ldr	r2, [pc, #96]	; (800f384 <prvAddNewTaskToReadyList+0xc8>)
 800f324:	6013      	str	r3, [r2, #0]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f32a:	4613      	mov	r3, r2
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	4413      	add	r3, r2
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	4a15      	ldr	r2, [pc, #84]	; (800f388 <prvAddNewTaskToReadyList+0xcc>)
 800f334:	441a      	add	r2, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	3304      	adds	r3, #4
 800f33a:	4619      	mov	r1, r3
 800f33c:	4610      	mov	r0, r2
 800f33e:	f7fe fe6c 	bl	800e01a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f342:	f001 f827 	bl	8010394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f346:	4b0d      	ldr	r3, [pc, #52]	; (800f37c <prvAddNewTaskToReadyList+0xc0>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d00e      	beq.n	800f36c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f34e:	4b0a      	ldr	r3, [pc, #40]	; (800f378 <prvAddNewTaskToReadyList+0xbc>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f358:	429a      	cmp	r2, r3
 800f35a:	d207      	bcs.n	800f36c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f35c:	4b0b      	ldr	r3, [pc, #44]	; (800f38c <prvAddNewTaskToReadyList+0xd0>)
 800f35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f362:	601a      	str	r2, [r3, #0]
 800f364:	f3bf 8f4f 	dsb	sy
 800f368:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f36c:	bf00      	nop
 800f36e:	3708      	adds	r7, #8
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	20005904 	.word	0x20005904
 800f378:	20005804 	.word	0x20005804
 800f37c:	20005910 	.word	0x20005910
 800f380:	20005920 	.word	0x20005920
 800f384:	2000590c 	.word	0x2000590c
 800f388:	20005808 	.word	0x20005808
 800f38c:	e000ed04 	.word	0xe000ed04

0800f390 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f390:	b580      	push	{r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f398:	2300      	movs	r3, #0
 800f39a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d019      	beq.n	800f3d6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f3a2:	4b14      	ldr	r3, [pc, #80]	; (800f3f4 <vTaskDelay+0x64>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d00c      	beq.n	800f3c4 <vTaskDelay+0x34>
	__asm volatile
 800f3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ae:	b672      	cpsid	i
 800f3b0:	f383 8811 	msr	BASEPRI, r3
 800f3b4:	f3bf 8f6f 	isb	sy
 800f3b8:	f3bf 8f4f 	dsb	sy
 800f3bc:	b662      	cpsie	i
 800f3be:	60bb      	str	r3, [r7, #8]
}
 800f3c0:	bf00      	nop
 800f3c2:	e7fe      	b.n	800f3c2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f3c4:	f000 f888 	bl	800f4d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 fe38 	bl	8010040 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f3d0:	f000 f890 	bl	800f4f4 <xTaskResumeAll>
 800f3d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d107      	bne.n	800f3ec <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f3dc:	4b06      	ldr	r3, [pc, #24]	; (800f3f8 <vTaskDelay+0x68>)
 800f3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	f3bf 8f4f 	dsb	sy
 800f3e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f3ec:	bf00      	nop
 800f3ee:	3710      	adds	r7, #16
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	2000592c 	.word	0x2000592c
 800f3f8:	e000ed04 	.word	0xe000ed04

0800f3fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b08a      	sub	sp, #40	; 0x28
 800f400:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f402:	2300      	movs	r3, #0
 800f404:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f406:	2300      	movs	r3, #0
 800f408:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f40a:	463a      	mov	r2, r7
 800f40c:	1d39      	adds	r1, r7, #4
 800f40e:	f107 0308 	add.w	r3, r7, #8
 800f412:	4618      	mov	r0, r3
 800f414:	f7f3 fd64 	bl	8002ee0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f418:	6839      	ldr	r1, [r7, #0]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	68ba      	ldr	r2, [r7, #8]
 800f41e:	9202      	str	r2, [sp, #8]
 800f420:	9301      	str	r3, [sp, #4]
 800f422:	2300      	movs	r3, #0
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	2300      	movs	r3, #0
 800f428:	460a      	mov	r2, r1
 800f42a:	4923      	ldr	r1, [pc, #140]	; (800f4b8 <vTaskStartScheduler+0xbc>)
 800f42c:	4823      	ldr	r0, [pc, #140]	; (800f4bc <vTaskStartScheduler+0xc0>)
 800f42e:	f7ff fdfd 	bl	800f02c <xTaskCreateStatic>
 800f432:	4603      	mov	r3, r0
 800f434:	4a22      	ldr	r2, [pc, #136]	; (800f4c0 <vTaskStartScheduler+0xc4>)
 800f436:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f438:	4b21      	ldr	r3, [pc, #132]	; (800f4c0 <vTaskStartScheduler+0xc4>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d002      	beq.n	800f446 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f440:	2301      	movs	r3, #1
 800f442:	617b      	str	r3, [r7, #20]
 800f444:	e001      	b.n	800f44a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f446:	2300      	movs	r3, #0
 800f448:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d11d      	bne.n	800f48c <vTaskStartScheduler+0x90>
	__asm volatile
 800f450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f454:	b672      	cpsid	i
 800f456:	f383 8811 	msr	BASEPRI, r3
 800f45a:	f3bf 8f6f 	isb	sy
 800f45e:	f3bf 8f4f 	dsb	sy
 800f462:	b662      	cpsie	i
 800f464:	613b      	str	r3, [r7, #16]
}
 800f466:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f468:	4b16      	ldr	r3, [pc, #88]	; (800f4c4 <vTaskStartScheduler+0xc8>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	334c      	adds	r3, #76	; 0x4c
 800f46e:	4a16      	ldr	r2, [pc, #88]	; (800f4c8 <vTaskStartScheduler+0xcc>)
 800f470:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f472:	4b16      	ldr	r3, [pc, #88]	; (800f4cc <vTaskStartScheduler+0xd0>)
 800f474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f478:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f47a:	4b15      	ldr	r3, [pc, #84]	; (800f4d0 <vTaskStartScheduler+0xd4>)
 800f47c:	2201      	movs	r2, #1
 800f47e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f480:	4b14      	ldr	r3, [pc, #80]	; (800f4d4 <vTaskStartScheduler+0xd8>)
 800f482:	2200      	movs	r2, #0
 800f484:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f486:	f000 fed3 	bl	8010230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f48a:	e010      	b.n	800f4ae <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f492:	d10c      	bne.n	800f4ae <vTaskStartScheduler+0xb2>
	__asm volatile
 800f494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f498:	b672      	cpsid	i
 800f49a:	f383 8811 	msr	BASEPRI, r3
 800f49e:	f3bf 8f6f 	isb	sy
 800f4a2:	f3bf 8f4f 	dsb	sy
 800f4a6:	b662      	cpsie	i
 800f4a8:	60fb      	str	r3, [r7, #12]
}
 800f4aa:	bf00      	nop
 800f4ac:	e7fe      	b.n	800f4ac <vTaskStartScheduler+0xb0>
}
 800f4ae:	bf00      	nop
 800f4b0:	3718      	adds	r7, #24
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	08012e80 	.word	0x08012e80
 800f4bc:	0800fad5 	.word	0x0800fad5
 800f4c0:	20005928 	.word	0x20005928
 800f4c4:	20005804 	.word	0x20005804
 800f4c8:	200009dc 	.word	0x200009dc
 800f4cc:	20005924 	.word	0x20005924
 800f4d0:	20005910 	.word	0x20005910
 800f4d4:	20005908 	.word	0x20005908

0800f4d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f4d8:	b480      	push	{r7}
 800f4da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f4dc:	4b04      	ldr	r3, [pc, #16]	; (800f4f0 <vTaskSuspendAll+0x18>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	4a03      	ldr	r2, [pc, #12]	; (800f4f0 <vTaskSuspendAll+0x18>)
 800f4e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f4e6:	bf00      	nop
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr
 800f4f0:	2000592c 	.word	0x2000592c

0800f4f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f4fe:	2300      	movs	r3, #0
 800f500:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f502:	4b42      	ldr	r3, [pc, #264]	; (800f60c <xTaskResumeAll+0x118>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d10c      	bne.n	800f524 <xTaskResumeAll+0x30>
	__asm volatile
 800f50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f50e:	b672      	cpsid	i
 800f510:	f383 8811 	msr	BASEPRI, r3
 800f514:	f3bf 8f6f 	isb	sy
 800f518:	f3bf 8f4f 	dsb	sy
 800f51c:	b662      	cpsie	i
 800f51e:	603b      	str	r3, [r7, #0]
}
 800f520:	bf00      	nop
 800f522:	e7fe      	b.n	800f522 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f524:	f000 ff02 	bl	801032c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f528:	4b38      	ldr	r3, [pc, #224]	; (800f60c <xTaskResumeAll+0x118>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	3b01      	subs	r3, #1
 800f52e:	4a37      	ldr	r2, [pc, #220]	; (800f60c <xTaskResumeAll+0x118>)
 800f530:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f532:	4b36      	ldr	r3, [pc, #216]	; (800f60c <xTaskResumeAll+0x118>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d161      	bne.n	800f5fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f53a:	4b35      	ldr	r3, [pc, #212]	; (800f610 <xTaskResumeAll+0x11c>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d05d      	beq.n	800f5fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f542:	e02e      	b.n	800f5a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f544:	4b33      	ldr	r3, [pc, #204]	; (800f614 <xTaskResumeAll+0x120>)
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	3318      	adds	r3, #24
 800f550:	4618      	mov	r0, r3
 800f552:	f7fe fdbf 	bl	800e0d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	3304      	adds	r3, #4
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fe fdba 	bl	800e0d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f564:	2201      	movs	r2, #1
 800f566:	409a      	lsls	r2, r3
 800f568:	4b2b      	ldr	r3, [pc, #172]	; (800f618 <xTaskResumeAll+0x124>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4313      	orrs	r3, r2
 800f56e:	4a2a      	ldr	r2, [pc, #168]	; (800f618 <xTaskResumeAll+0x124>)
 800f570:	6013      	str	r3, [r2, #0]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f576:	4613      	mov	r3, r2
 800f578:	009b      	lsls	r3, r3, #2
 800f57a:	4413      	add	r3, r2
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	4a27      	ldr	r2, [pc, #156]	; (800f61c <xTaskResumeAll+0x128>)
 800f580:	441a      	add	r2, r3
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	3304      	adds	r3, #4
 800f586:	4619      	mov	r1, r3
 800f588:	4610      	mov	r0, r2
 800f58a:	f7fe fd46 	bl	800e01a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f592:	4b23      	ldr	r3, [pc, #140]	; (800f620 <xTaskResumeAll+0x12c>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f598:	429a      	cmp	r2, r3
 800f59a:	d302      	bcc.n	800f5a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f59c:	4b21      	ldr	r3, [pc, #132]	; (800f624 <xTaskResumeAll+0x130>)
 800f59e:	2201      	movs	r2, #1
 800f5a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f5a2:	4b1c      	ldr	r3, [pc, #112]	; (800f614 <xTaskResumeAll+0x120>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d1cc      	bne.n	800f544 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d001      	beq.n	800f5b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f5b0:	f000 fb4c 	bl	800fc4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f5b4:	4b1c      	ldr	r3, [pc, #112]	; (800f628 <xTaskResumeAll+0x134>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d010      	beq.n	800f5e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f5c0:	f000 f858 	bl	800f674 <xTaskIncrementTick>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d002      	beq.n	800f5d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f5ca:	4b16      	ldr	r3, [pc, #88]	; (800f624 <xTaskResumeAll+0x130>)
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	3b01      	subs	r3, #1
 800f5d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d1f1      	bne.n	800f5c0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800f5dc:	4b12      	ldr	r3, [pc, #72]	; (800f628 <xTaskResumeAll+0x134>)
 800f5de:	2200      	movs	r2, #0
 800f5e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f5e2:	4b10      	ldr	r3, [pc, #64]	; (800f624 <xTaskResumeAll+0x130>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d009      	beq.n	800f5fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f5ee:	4b0f      	ldr	r3, [pc, #60]	; (800f62c <xTaskResumeAll+0x138>)
 800f5f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5f4:	601a      	str	r2, [r3, #0]
 800f5f6:	f3bf 8f4f 	dsb	sy
 800f5fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f5fe:	f000 fec9 	bl	8010394 <vPortExitCritical>

	return xAlreadyYielded;
 800f602:	68bb      	ldr	r3, [r7, #8]
}
 800f604:	4618      	mov	r0, r3
 800f606:	3710      	adds	r7, #16
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	2000592c 	.word	0x2000592c
 800f610:	20005904 	.word	0x20005904
 800f614:	200058c4 	.word	0x200058c4
 800f618:	2000590c 	.word	0x2000590c
 800f61c:	20005808 	.word	0x20005808
 800f620:	20005804 	.word	0x20005804
 800f624:	20005918 	.word	0x20005918
 800f628:	20005914 	.word	0x20005914
 800f62c:	e000ed04 	.word	0xe000ed04

0800f630 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f636:	4b05      	ldr	r3, [pc, #20]	; (800f64c <xTaskGetTickCount+0x1c>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f63c:	687b      	ldr	r3, [r7, #4]
}
 800f63e:	4618      	mov	r0, r3
 800f640:	370c      	adds	r7, #12
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr
 800f64a:	bf00      	nop
 800f64c:	20005908 	.word	0x20005908

0800f650 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f656:	f000 ff51 	bl	80104fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f65a:	2300      	movs	r3, #0
 800f65c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f65e:	4b04      	ldr	r3, [pc, #16]	; (800f670 <xTaskGetTickCountFromISR+0x20>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f664:	683b      	ldr	r3, [r7, #0]
}
 800f666:	4618      	mov	r0, r3
 800f668:	3708      	adds	r7, #8
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	20005908 	.word	0x20005908

0800f674 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b086      	sub	sp, #24
 800f678:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f67a:	2300      	movs	r3, #0
 800f67c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f67e:	4b4f      	ldr	r3, [pc, #316]	; (800f7bc <xTaskIncrementTick+0x148>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	f040 808a 	bne.w	800f79c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f688:	4b4d      	ldr	r3, [pc, #308]	; (800f7c0 <xTaskIncrementTick+0x14c>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	3301      	adds	r3, #1
 800f68e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f690:	4a4b      	ldr	r2, [pc, #300]	; (800f7c0 <xTaskIncrementTick+0x14c>)
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d122      	bne.n	800f6e2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f69c:	4b49      	ldr	r3, [pc, #292]	; (800f7c4 <xTaskIncrementTick+0x150>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d00c      	beq.n	800f6c0 <xTaskIncrementTick+0x4c>
	__asm volatile
 800f6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6aa:	b672      	cpsid	i
 800f6ac:	f383 8811 	msr	BASEPRI, r3
 800f6b0:	f3bf 8f6f 	isb	sy
 800f6b4:	f3bf 8f4f 	dsb	sy
 800f6b8:	b662      	cpsie	i
 800f6ba:	603b      	str	r3, [r7, #0]
}
 800f6bc:	bf00      	nop
 800f6be:	e7fe      	b.n	800f6be <xTaskIncrementTick+0x4a>
 800f6c0:	4b40      	ldr	r3, [pc, #256]	; (800f7c4 <xTaskIncrementTick+0x150>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	60fb      	str	r3, [r7, #12]
 800f6c6:	4b40      	ldr	r3, [pc, #256]	; (800f7c8 <xTaskIncrementTick+0x154>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	4a3e      	ldr	r2, [pc, #248]	; (800f7c4 <xTaskIncrementTick+0x150>)
 800f6cc:	6013      	str	r3, [r2, #0]
 800f6ce:	4a3e      	ldr	r2, [pc, #248]	; (800f7c8 <xTaskIncrementTick+0x154>)
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	6013      	str	r3, [r2, #0]
 800f6d4:	4b3d      	ldr	r3, [pc, #244]	; (800f7cc <xTaskIncrementTick+0x158>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	3301      	adds	r3, #1
 800f6da:	4a3c      	ldr	r2, [pc, #240]	; (800f7cc <xTaskIncrementTick+0x158>)
 800f6dc:	6013      	str	r3, [r2, #0]
 800f6de:	f000 fab5 	bl	800fc4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f6e2:	4b3b      	ldr	r3, [pc, #236]	; (800f7d0 <xTaskIncrementTick+0x15c>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	693a      	ldr	r2, [r7, #16]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d348      	bcc.n	800f77e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6ec:	4b35      	ldr	r3, [pc, #212]	; (800f7c4 <xTaskIncrementTick+0x150>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d104      	bne.n	800f700 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6f6:	4b36      	ldr	r3, [pc, #216]	; (800f7d0 <xTaskIncrementTick+0x15c>)
 800f6f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6fc:	601a      	str	r2, [r3, #0]
					break;
 800f6fe:	e03e      	b.n	800f77e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f700:	4b30      	ldr	r3, [pc, #192]	; (800f7c4 <xTaskIncrementTick+0x150>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	68db      	ldr	r3, [r3, #12]
 800f706:	68db      	ldr	r3, [r3, #12]
 800f708:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f710:	693a      	ldr	r2, [r7, #16]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	429a      	cmp	r2, r3
 800f716:	d203      	bcs.n	800f720 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f718:	4a2d      	ldr	r2, [pc, #180]	; (800f7d0 <xTaskIncrementTick+0x15c>)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f71e:	e02e      	b.n	800f77e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	3304      	adds	r3, #4
 800f724:	4618      	mov	r0, r3
 800f726:	f7fe fcd5 	bl	800e0d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d004      	beq.n	800f73c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	3318      	adds	r3, #24
 800f736:	4618      	mov	r0, r3
 800f738:	f7fe fccc 	bl	800e0d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f740:	2201      	movs	r2, #1
 800f742:	409a      	lsls	r2, r3
 800f744:	4b23      	ldr	r3, [pc, #140]	; (800f7d4 <xTaskIncrementTick+0x160>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4313      	orrs	r3, r2
 800f74a:	4a22      	ldr	r2, [pc, #136]	; (800f7d4 <xTaskIncrementTick+0x160>)
 800f74c:	6013      	str	r3, [r2, #0]
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f752:	4613      	mov	r3, r2
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	4413      	add	r3, r2
 800f758:	009b      	lsls	r3, r3, #2
 800f75a:	4a1f      	ldr	r2, [pc, #124]	; (800f7d8 <xTaskIncrementTick+0x164>)
 800f75c:	441a      	add	r2, r3
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	3304      	adds	r3, #4
 800f762:	4619      	mov	r1, r3
 800f764:	4610      	mov	r0, r2
 800f766:	f7fe fc58 	bl	800e01a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f76e:	4b1b      	ldr	r3, [pc, #108]	; (800f7dc <xTaskIncrementTick+0x168>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f774:	429a      	cmp	r2, r3
 800f776:	d3b9      	bcc.n	800f6ec <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f778:	2301      	movs	r3, #1
 800f77a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f77c:	e7b6      	b.n	800f6ec <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f77e:	4b17      	ldr	r3, [pc, #92]	; (800f7dc <xTaskIncrementTick+0x168>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f784:	4914      	ldr	r1, [pc, #80]	; (800f7d8 <xTaskIncrementTick+0x164>)
 800f786:	4613      	mov	r3, r2
 800f788:	009b      	lsls	r3, r3, #2
 800f78a:	4413      	add	r3, r2
 800f78c:	009b      	lsls	r3, r3, #2
 800f78e:	440b      	add	r3, r1
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	2b01      	cmp	r3, #1
 800f794:	d907      	bls.n	800f7a6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800f796:	2301      	movs	r3, #1
 800f798:	617b      	str	r3, [r7, #20]
 800f79a:	e004      	b.n	800f7a6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f79c:	4b10      	ldr	r3, [pc, #64]	; (800f7e0 <xTaskIncrementTick+0x16c>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	4a0f      	ldr	r2, [pc, #60]	; (800f7e0 <xTaskIncrementTick+0x16c>)
 800f7a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f7a6:	4b0f      	ldr	r3, [pc, #60]	; (800f7e4 <xTaskIncrementTick+0x170>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d001      	beq.n	800f7b2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f7b2:	697b      	ldr	r3, [r7, #20]
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3718      	adds	r7, #24
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	2000592c 	.word	0x2000592c
 800f7c0:	20005908 	.word	0x20005908
 800f7c4:	200058bc 	.word	0x200058bc
 800f7c8:	200058c0 	.word	0x200058c0
 800f7cc:	2000591c 	.word	0x2000591c
 800f7d0:	20005924 	.word	0x20005924
 800f7d4:	2000590c 	.word	0x2000590c
 800f7d8:	20005808 	.word	0x20005808
 800f7dc:	20005804 	.word	0x20005804
 800f7e0:	20005914 	.word	0x20005914
 800f7e4:	20005918 	.word	0x20005918

0800f7e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b087      	sub	sp, #28
 800f7ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f7ee:	4b2a      	ldr	r3, [pc, #168]	; (800f898 <vTaskSwitchContext+0xb0>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d003      	beq.n	800f7fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f7f6:	4b29      	ldr	r3, [pc, #164]	; (800f89c <vTaskSwitchContext+0xb4>)
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f7fc:	e046      	b.n	800f88c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f7fe:	4b27      	ldr	r3, [pc, #156]	; (800f89c <vTaskSwitchContext+0xb4>)
 800f800:	2200      	movs	r2, #0
 800f802:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f804:	4b26      	ldr	r3, [pc, #152]	; (800f8a0 <vTaskSwitchContext+0xb8>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	fab3 f383 	clz	r3, r3
 800f810:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f812:	7afb      	ldrb	r3, [r7, #11]
 800f814:	f1c3 031f 	rsb	r3, r3, #31
 800f818:	617b      	str	r3, [r7, #20]
 800f81a:	4922      	ldr	r1, [pc, #136]	; (800f8a4 <vTaskSwitchContext+0xbc>)
 800f81c:	697a      	ldr	r2, [r7, #20]
 800f81e:	4613      	mov	r3, r2
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	4413      	add	r3, r2
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	440b      	add	r3, r1
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d10c      	bne.n	800f848 <vTaskSwitchContext+0x60>
	__asm volatile
 800f82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f832:	b672      	cpsid	i
 800f834:	f383 8811 	msr	BASEPRI, r3
 800f838:	f3bf 8f6f 	isb	sy
 800f83c:	f3bf 8f4f 	dsb	sy
 800f840:	b662      	cpsie	i
 800f842:	607b      	str	r3, [r7, #4]
}
 800f844:	bf00      	nop
 800f846:	e7fe      	b.n	800f846 <vTaskSwitchContext+0x5e>
 800f848:	697a      	ldr	r2, [r7, #20]
 800f84a:	4613      	mov	r3, r2
 800f84c:	009b      	lsls	r3, r3, #2
 800f84e:	4413      	add	r3, r2
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	4a14      	ldr	r2, [pc, #80]	; (800f8a4 <vTaskSwitchContext+0xbc>)
 800f854:	4413      	add	r3, r2
 800f856:	613b      	str	r3, [r7, #16]
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	685a      	ldr	r2, [r3, #4]
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	605a      	str	r2, [r3, #4]
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	685a      	ldr	r2, [r3, #4]
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	3308      	adds	r3, #8
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d104      	bne.n	800f878 <vTaskSwitchContext+0x90>
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	685a      	ldr	r2, [r3, #4]
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	605a      	str	r2, [r3, #4]
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	68db      	ldr	r3, [r3, #12]
 800f87e:	4a0a      	ldr	r2, [pc, #40]	; (800f8a8 <vTaskSwitchContext+0xc0>)
 800f880:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f882:	4b09      	ldr	r3, [pc, #36]	; (800f8a8 <vTaskSwitchContext+0xc0>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	334c      	adds	r3, #76	; 0x4c
 800f888:	4a08      	ldr	r2, [pc, #32]	; (800f8ac <vTaskSwitchContext+0xc4>)
 800f88a:	6013      	str	r3, [r2, #0]
}
 800f88c:	bf00      	nop
 800f88e:	371c      	adds	r7, #28
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr
 800f898:	2000592c 	.word	0x2000592c
 800f89c:	20005918 	.word	0x20005918
 800f8a0:	2000590c 	.word	0x2000590c
 800f8a4:	20005808 	.word	0x20005808
 800f8a8:	20005804 	.word	0x20005804
 800f8ac:	200009dc 	.word	0x200009dc

0800f8b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d10c      	bne.n	800f8da <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800f8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c4:	b672      	cpsid	i
 800f8c6:	f383 8811 	msr	BASEPRI, r3
 800f8ca:	f3bf 8f6f 	isb	sy
 800f8ce:	f3bf 8f4f 	dsb	sy
 800f8d2:	b662      	cpsie	i
 800f8d4:	60fb      	str	r3, [r7, #12]
}
 800f8d6:	bf00      	nop
 800f8d8:	e7fe      	b.n	800f8d8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f8da:	4b07      	ldr	r3, [pc, #28]	; (800f8f8 <vTaskPlaceOnEventList+0x48>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	3318      	adds	r3, #24
 800f8e0:	4619      	mov	r1, r3
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f7fe fbbd 	bl	800e062 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f8e8:	2101      	movs	r1, #1
 800f8ea:	6838      	ldr	r0, [r7, #0]
 800f8ec:	f000 fba8 	bl	8010040 <prvAddCurrentTaskToDelayedList>
}
 800f8f0:	bf00      	nop
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	20005804 	.word	0x20005804

0800f8fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b086      	sub	sp, #24
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	68db      	ldr	r3, [r3, #12]
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d10c      	bne.n	800f92c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800f912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f916:	b672      	cpsid	i
 800f918:	f383 8811 	msr	BASEPRI, r3
 800f91c:	f3bf 8f6f 	isb	sy
 800f920:	f3bf 8f4f 	dsb	sy
 800f924:	b662      	cpsie	i
 800f926:	60fb      	str	r3, [r7, #12]
}
 800f928:	bf00      	nop
 800f92a:	e7fe      	b.n	800f92a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	3318      	adds	r3, #24
 800f930:	4618      	mov	r0, r3
 800f932:	f7fe fbcf 	bl	800e0d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f936:	4b1d      	ldr	r3, [pc, #116]	; (800f9ac <xTaskRemoveFromEventList+0xb0>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d11c      	bne.n	800f978 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	3304      	adds	r3, #4
 800f942:	4618      	mov	r0, r3
 800f944:	f7fe fbc6 	bl	800e0d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f94c:	2201      	movs	r2, #1
 800f94e:	409a      	lsls	r2, r3
 800f950:	4b17      	ldr	r3, [pc, #92]	; (800f9b0 <xTaskRemoveFromEventList+0xb4>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	4313      	orrs	r3, r2
 800f956:	4a16      	ldr	r2, [pc, #88]	; (800f9b0 <xTaskRemoveFromEventList+0xb4>)
 800f958:	6013      	str	r3, [r2, #0]
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f95e:	4613      	mov	r3, r2
 800f960:	009b      	lsls	r3, r3, #2
 800f962:	4413      	add	r3, r2
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	4a13      	ldr	r2, [pc, #76]	; (800f9b4 <xTaskRemoveFromEventList+0xb8>)
 800f968:	441a      	add	r2, r3
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	3304      	adds	r3, #4
 800f96e:	4619      	mov	r1, r3
 800f970:	4610      	mov	r0, r2
 800f972:	f7fe fb52 	bl	800e01a <vListInsertEnd>
 800f976:	e005      	b.n	800f984 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	3318      	adds	r3, #24
 800f97c:	4619      	mov	r1, r3
 800f97e:	480e      	ldr	r0, [pc, #56]	; (800f9b8 <xTaskRemoveFromEventList+0xbc>)
 800f980:	f7fe fb4b 	bl	800e01a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f988:	4b0c      	ldr	r3, [pc, #48]	; (800f9bc <xTaskRemoveFromEventList+0xc0>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98e:	429a      	cmp	r2, r3
 800f990:	d905      	bls.n	800f99e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f992:	2301      	movs	r3, #1
 800f994:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f996:	4b0a      	ldr	r3, [pc, #40]	; (800f9c0 <xTaskRemoveFromEventList+0xc4>)
 800f998:	2201      	movs	r2, #1
 800f99a:	601a      	str	r2, [r3, #0]
 800f99c:	e001      	b.n	800f9a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f9a2:	697b      	ldr	r3, [r7, #20]
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3718      	adds	r7, #24
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	2000592c 	.word	0x2000592c
 800f9b0:	2000590c 	.word	0x2000590c
 800f9b4:	20005808 	.word	0x20005808
 800f9b8:	200058c4 	.word	0x200058c4
 800f9bc:	20005804 	.word	0x20005804
 800f9c0:	20005918 	.word	0x20005918

0800f9c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f9cc:	4b06      	ldr	r3, [pc, #24]	; (800f9e8 <vTaskInternalSetTimeOutState+0x24>)
 800f9ce:	681a      	ldr	r2, [r3, #0]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f9d4:	4b05      	ldr	r3, [pc, #20]	; (800f9ec <vTaskInternalSetTimeOutState+0x28>)
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	605a      	str	r2, [r3, #4]
}
 800f9dc:	bf00      	nop
 800f9de:	370c      	adds	r7, #12
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr
 800f9e8:	2000591c 	.word	0x2000591c
 800f9ec:	20005908 	.word	0x20005908

0800f9f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b088      	sub	sp, #32
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d10c      	bne.n	800fa1a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800fa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa04:	b672      	cpsid	i
 800fa06:	f383 8811 	msr	BASEPRI, r3
 800fa0a:	f3bf 8f6f 	isb	sy
 800fa0e:	f3bf 8f4f 	dsb	sy
 800fa12:	b662      	cpsie	i
 800fa14:	613b      	str	r3, [r7, #16]
}
 800fa16:	bf00      	nop
 800fa18:	e7fe      	b.n	800fa18 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d10c      	bne.n	800fa3a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800fa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa24:	b672      	cpsid	i
 800fa26:	f383 8811 	msr	BASEPRI, r3
 800fa2a:	f3bf 8f6f 	isb	sy
 800fa2e:	f3bf 8f4f 	dsb	sy
 800fa32:	b662      	cpsie	i
 800fa34:	60fb      	str	r3, [r7, #12]
}
 800fa36:	bf00      	nop
 800fa38:	e7fe      	b.n	800fa38 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800fa3a:	f000 fc77 	bl	801032c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fa3e:	4b1d      	ldr	r3, [pc, #116]	; (800fab4 <xTaskCheckForTimeOut+0xc4>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	69ba      	ldr	r2, [r7, #24]
 800fa4a:	1ad3      	subs	r3, r2, r3
 800fa4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa56:	d102      	bne.n	800fa5e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	61fb      	str	r3, [r7, #28]
 800fa5c:	e023      	b.n	800faa6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681a      	ldr	r2, [r3, #0]
 800fa62:	4b15      	ldr	r3, [pc, #84]	; (800fab8 <xTaskCheckForTimeOut+0xc8>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d007      	beq.n	800fa7a <xTaskCheckForTimeOut+0x8a>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	69ba      	ldr	r2, [r7, #24]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d302      	bcc.n	800fa7a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fa74:	2301      	movs	r3, #1
 800fa76:	61fb      	str	r3, [r7, #28]
 800fa78:	e015      	b.n	800faa6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	697a      	ldr	r2, [r7, #20]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d20b      	bcs.n	800fa9c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	681a      	ldr	r2, [r3, #0]
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	1ad2      	subs	r2, r2, r3
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f7ff ff97 	bl	800f9c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fa96:	2300      	movs	r3, #0
 800fa98:	61fb      	str	r3, [r7, #28]
 800fa9a:	e004      	b.n	800faa6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800faa2:	2301      	movs	r3, #1
 800faa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800faa6:	f000 fc75 	bl	8010394 <vPortExitCritical>

	return xReturn;
 800faaa:	69fb      	ldr	r3, [r7, #28]
}
 800faac:	4618      	mov	r0, r3
 800faae:	3720      	adds	r7, #32
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	20005908 	.word	0x20005908
 800fab8:	2000591c 	.word	0x2000591c

0800fabc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fabc:	b480      	push	{r7}
 800fabe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fac0:	4b03      	ldr	r3, [pc, #12]	; (800fad0 <vTaskMissedYield+0x14>)
 800fac2:	2201      	movs	r2, #1
 800fac4:	601a      	str	r2, [r3, #0]
}
 800fac6:	bf00      	nop
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr
 800fad0:	20005918 	.word	0x20005918

0800fad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fadc:	f000 f852 	bl	800fb84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fae0:	4b06      	ldr	r3, [pc, #24]	; (800fafc <prvIdleTask+0x28>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	2b01      	cmp	r3, #1
 800fae6:	d9f9      	bls.n	800fadc <prvIdleTask+0x8>
			{
				taskYIELD();
 800fae8:	4b05      	ldr	r3, [pc, #20]	; (800fb00 <prvIdleTask+0x2c>)
 800faea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faee:	601a      	str	r2, [r3, #0]
 800faf0:	f3bf 8f4f 	dsb	sy
 800faf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800faf8:	e7f0      	b.n	800fadc <prvIdleTask+0x8>
 800fafa:	bf00      	nop
 800fafc:	20005808 	.word	0x20005808
 800fb00:	e000ed04 	.word	0xe000ed04

0800fb04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	607b      	str	r3, [r7, #4]
 800fb0e:	e00c      	b.n	800fb2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	4613      	mov	r3, r2
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	4413      	add	r3, r2
 800fb18:	009b      	lsls	r3, r3, #2
 800fb1a:	4a12      	ldr	r2, [pc, #72]	; (800fb64 <prvInitialiseTaskLists+0x60>)
 800fb1c:	4413      	add	r3, r2
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7fe fa4e 	bl	800dfc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	3301      	adds	r3, #1
 800fb28:	607b      	str	r3, [r7, #4]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2b06      	cmp	r3, #6
 800fb2e:	d9ef      	bls.n	800fb10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fb30:	480d      	ldr	r0, [pc, #52]	; (800fb68 <prvInitialiseTaskLists+0x64>)
 800fb32:	f7fe fa45 	bl	800dfc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fb36:	480d      	ldr	r0, [pc, #52]	; (800fb6c <prvInitialiseTaskLists+0x68>)
 800fb38:	f7fe fa42 	bl	800dfc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fb3c:	480c      	ldr	r0, [pc, #48]	; (800fb70 <prvInitialiseTaskLists+0x6c>)
 800fb3e:	f7fe fa3f 	bl	800dfc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fb42:	480c      	ldr	r0, [pc, #48]	; (800fb74 <prvInitialiseTaskLists+0x70>)
 800fb44:	f7fe fa3c 	bl	800dfc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fb48:	480b      	ldr	r0, [pc, #44]	; (800fb78 <prvInitialiseTaskLists+0x74>)
 800fb4a:	f7fe fa39 	bl	800dfc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fb4e:	4b0b      	ldr	r3, [pc, #44]	; (800fb7c <prvInitialiseTaskLists+0x78>)
 800fb50:	4a05      	ldr	r2, [pc, #20]	; (800fb68 <prvInitialiseTaskLists+0x64>)
 800fb52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fb54:	4b0a      	ldr	r3, [pc, #40]	; (800fb80 <prvInitialiseTaskLists+0x7c>)
 800fb56:	4a05      	ldr	r2, [pc, #20]	; (800fb6c <prvInitialiseTaskLists+0x68>)
 800fb58:	601a      	str	r2, [r3, #0]
}
 800fb5a:	bf00      	nop
 800fb5c:	3708      	adds	r7, #8
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
 800fb62:	bf00      	nop
 800fb64:	20005808 	.word	0x20005808
 800fb68:	20005894 	.word	0x20005894
 800fb6c:	200058a8 	.word	0x200058a8
 800fb70:	200058c4 	.word	0x200058c4
 800fb74:	200058d8 	.word	0x200058d8
 800fb78:	200058f0 	.word	0x200058f0
 800fb7c:	200058bc 	.word	0x200058bc
 800fb80:	200058c0 	.word	0x200058c0

0800fb84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b082      	sub	sp, #8
 800fb88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb8a:	e019      	b.n	800fbc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb8c:	f000 fbce 	bl	801032c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb90:	4b10      	ldr	r3, [pc, #64]	; (800fbd4 <prvCheckTasksWaitingTermination+0x50>)
 800fb92:	68db      	ldr	r3, [r3, #12]
 800fb94:	68db      	ldr	r3, [r3, #12]
 800fb96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	3304      	adds	r3, #4
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fe fa99 	bl	800e0d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fba2:	4b0d      	ldr	r3, [pc, #52]	; (800fbd8 <prvCheckTasksWaitingTermination+0x54>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	3b01      	subs	r3, #1
 800fba8:	4a0b      	ldr	r2, [pc, #44]	; (800fbd8 <prvCheckTasksWaitingTermination+0x54>)
 800fbaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fbac:	4b0b      	ldr	r3, [pc, #44]	; (800fbdc <prvCheckTasksWaitingTermination+0x58>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	3b01      	subs	r3, #1
 800fbb2:	4a0a      	ldr	r2, [pc, #40]	; (800fbdc <prvCheckTasksWaitingTermination+0x58>)
 800fbb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fbb6:	f000 fbed 	bl	8010394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f000 f810 	bl	800fbe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fbc0:	4b06      	ldr	r3, [pc, #24]	; (800fbdc <prvCheckTasksWaitingTermination+0x58>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d1e1      	bne.n	800fb8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fbc8:	bf00      	nop
 800fbca:	bf00      	nop
 800fbcc:	3708      	adds	r7, #8
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	200058d8 	.word	0x200058d8
 800fbd8:	20005904 	.word	0x20005904
 800fbdc:	200058ec 	.word	0x200058ec

0800fbe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	334c      	adds	r3, #76	; 0x4c
 800fbec:	4618      	mov	r0, r3
 800fbee:	f002 f887 	bl	8011d00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d108      	bne.n	800fc0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc00:	4618      	mov	r0, r3
 800fc02:	f000 fd89 	bl	8010718 <vPortFree>
				vPortFree( pxTCB );
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 fd86 	bl	8010718 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fc0c:	e01a      	b.n	800fc44 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d103      	bne.n	800fc20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f000 fd7d 	bl	8010718 <vPortFree>
	}
 800fc1e:	e011      	b.n	800fc44 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fc26:	2b02      	cmp	r3, #2
 800fc28:	d00c      	beq.n	800fc44 <prvDeleteTCB+0x64>
	__asm volatile
 800fc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2e:	b672      	cpsid	i
 800fc30:	f383 8811 	msr	BASEPRI, r3
 800fc34:	f3bf 8f6f 	isb	sy
 800fc38:	f3bf 8f4f 	dsb	sy
 800fc3c:	b662      	cpsie	i
 800fc3e:	60fb      	str	r3, [r7, #12]
}
 800fc40:	bf00      	nop
 800fc42:	e7fe      	b.n	800fc42 <prvDeleteTCB+0x62>
	}
 800fc44:	bf00      	nop
 800fc46:	3710      	adds	r7, #16
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b083      	sub	sp, #12
 800fc50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc52:	4b0c      	ldr	r3, [pc, #48]	; (800fc84 <prvResetNextTaskUnblockTime+0x38>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d104      	bne.n	800fc66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fc5c:	4b0a      	ldr	r3, [pc, #40]	; (800fc88 <prvResetNextTaskUnblockTime+0x3c>)
 800fc5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fc64:	e008      	b.n	800fc78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc66:	4b07      	ldr	r3, [pc, #28]	; (800fc84 <prvResetNextTaskUnblockTime+0x38>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	68db      	ldr	r3, [r3, #12]
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	4a04      	ldr	r2, [pc, #16]	; (800fc88 <prvResetNextTaskUnblockTime+0x3c>)
 800fc76:	6013      	str	r3, [r2, #0]
}
 800fc78:	bf00      	nop
 800fc7a:	370c      	adds	r7, #12
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr
 800fc84:	200058bc 	.word	0x200058bc
 800fc88:	20005924 	.word	0x20005924

0800fc8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fc92:	4b0b      	ldr	r3, [pc, #44]	; (800fcc0 <xTaskGetSchedulerState+0x34>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d102      	bne.n	800fca0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	607b      	str	r3, [r7, #4]
 800fc9e:	e008      	b.n	800fcb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fca0:	4b08      	ldr	r3, [pc, #32]	; (800fcc4 <xTaskGetSchedulerState+0x38>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d102      	bne.n	800fcae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fca8:	2302      	movs	r3, #2
 800fcaa:	607b      	str	r3, [r7, #4]
 800fcac:	e001      	b.n	800fcb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fcb2:	687b      	ldr	r3, [r7, #4]
	}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	370c      	adds	r7, #12
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr
 800fcc0:	20005910 	.word	0x20005910
 800fcc4:	2000592c 	.word	0x2000592c

0800fcc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d069      	beq.n	800fdb2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fce2:	4b36      	ldr	r3, [pc, #216]	; (800fdbc <xTaskPriorityInherit+0xf4>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d259      	bcs.n	800fda0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	699b      	ldr	r3, [r3, #24]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	db06      	blt.n	800fd02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcf4:	4b31      	ldr	r3, [pc, #196]	; (800fdbc <xTaskPriorityInherit+0xf4>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcfa:	f1c3 0207 	rsb	r2, r3, #7
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	6959      	ldr	r1, [r3, #20]
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd0a:	4613      	mov	r3, r2
 800fd0c:	009b      	lsls	r3, r3, #2
 800fd0e:	4413      	add	r3, r2
 800fd10:	009b      	lsls	r3, r3, #2
 800fd12:	4a2b      	ldr	r2, [pc, #172]	; (800fdc0 <xTaskPriorityInherit+0xf8>)
 800fd14:	4413      	add	r3, r2
 800fd16:	4299      	cmp	r1, r3
 800fd18:	d13a      	bne.n	800fd90 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	3304      	adds	r3, #4
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7fe f9d8 	bl	800e0d4 <uxListRemove>
 800fd24:	4603      	mov	r3, r0
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d115      	bne.n	800fd56 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd2e:	4924      	ldr	r1, [pc, #144]	; (800fdc0 <xTaskPriorityInherit+0xf8>)
 800fd30:	4613      	mov	r3, r2
 800fd32:	009b      	lsls	r3, r3, #2
 800fd34:	4413      	add	r3, r2
 800fd36:	009b      	lsls	r3, r3, #2
 800fd38:	440b      	add	r3, r1
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d10a      	bne.n	800fd56 <xTaskPriorityInherit+0x8e>
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd44:	2201      	movs	r2, #1
 800fd46:	fa02 f303 	lsl.w	r3, r2, r3
 800fd4a:	43da      	mvns	r2, r3
 800fd4c:	4b1d      	ldr	r3, [pc, #116]	; (800fdc4 <xTaskPriorityInherit+0xfc>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4013      	ands	r3, r2
 800fd52:	4a1c      	ldr	r2, [pc, #112]	; (800fdc4 <xTaskPriorityInherit+0xfc>)
 800fd54:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fd56:	4b19      	ldr	r3, [pc, #100]	; (800fdbc <xTaskPriorityInherit+0xf4>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd64:	2201      	movs	r2, #1
 800fd66:	409a      	lsls	r2, r3
 800fd68:	4b16      	ldr	r3, [pc, #88]	; (800fdc4 <xTaskPriorityInherit+0xfc>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	4a15      	ldr	r2, [pc, #84]	; (800fdc4 <xTaskPriorityInherit+0xfc>)
 800fd70:	6013      	str	r3, [r2, #0]
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd76:	4613      	mov	r3, r2
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	4413      	add	r3, r2
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	4a10      	ldr	r2, [pc, #64]	; (800fdc0 <xTaskPriorityInherit+0xf8>)
 800fd80:	441a      	add	r2, r3
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	3304      	adds	r3, #4
 800fd86:	4619      	mov	r1, r3
 800fd88:	4610      	mov	r0, r2
 800fd8a:	f7fe f946 	bl	800e01a <vListInsertEnd>
 800fd8e:	e004      	b.n	800fd9a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fd90:	4b0a      	ldr	r3, [pc, #40]	; (800fdbc <xTaskPriorityInherit+0xf4>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	60fb      	str	r3, [r7, #12]
 800fd9e:	e008      	b.n	800fdb2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fda4:	4b05      	ldr	r3, [pc, #20]	; (800fdbc <xTaskPriorityInherit+0xf4>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d201      	bcs.n	800fdb2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fdae:	2301      	movs	r3, #1
 800fdb0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
	}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	20005804 	.word	0x20005804
 800fdc0:	20005808 	.word	0x20005808
 800fdc4:	2000590c 	.word	0x2000590c

0800fdc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b086      	sub	sp, #24
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d072      	beq.n	800fec4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fdde:	4b3c      	ldr	r3, [pc, #240]	; (800fed0 <xTaskPriorityDisinherit+0x108>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	693a      	ldr	r2, [r7, #16]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d00c      	beq.n	800fe02 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800fde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdec:	b672      	cpsid	i
 800fdee:	f383 8811 	msr	BASEPRI, r3
 800fdf2:	f3bf 8f6f 	isb	sy
 800fdf6:	f3bf 8f4f 	dsb	sy
 800fdfa:	b662      	cpsie	i
 800fdfc:	60fb      	str	r3, [r7, #12]
}
 800fdfe:	bf00      	nop
 800fe00:	e7fe      	b.n	800fe00 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d10c      	bne.n	800fe24 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800fe0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe0e:	b672      	cpsid	i
 800fe10:	f383 8811 	msr	BASEPRI, r3
 800fe14:	f3bf 8f6f 	isb	sy
 800fe18:	f3bf 8f4f 	dsb	sy
 800fe1c:	b662      	cpsie	i
 800fe1e:	60bb      	str	r3, [r7, #8]
}
 800fe20:	bf00      	nop
 800fe22:	e7fe      	b.n	800fe22 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe28:	1e5a      	subs	r2, r3, #1
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe2e:	693b      	ldr	r3, [r7, #16]
 800fe30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d044      	beq.n	800fec4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d140      	bne.n	800fec4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	3304      	adds	r3, #4
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7fe f944 	bl	800e0d4 <uxListRemove>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d115      	bne.n	800fe7e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe56:	491f      	ldr	r1, [pc, #124]	; (800fed4 <xTaskPriorityDisinherit+0x10c>)
 800fe58:	4613      	mov	r3, r2
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	4413      	add	r3, r2
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	440b      	add	r3, r1
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d10a      	bne.n	800fe7e <xTaskPriorityDisinherit+0xb6>
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	fa02 f303 	lsl.w	r3, r2, r3
 800fe72:	43da      	mvns	r2, r3
 800fe74:	4b18      	ldr	r3, [pc, #96]	; (800fed8 <xTaskPriorityDisinherit+0x110>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4013      	ands	r3, r2
 800fe7a:	4a17      	ldr	r2, [pc, #92]	; (800fed8 <xTaskPriorityDisinherit+0x110>)
 800fe7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe8a:	f1c3 0207 	rsb	r2, r3, #7
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe96:	2201      	movs	r2, #1
 800fe98:	409a      	lsls	r2, r3
 800fe9a:	4b0f      	ldr	r3, [pc, #60]	; (800fed8 <xTaskPriorityDisinherit+0x110>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	4313      	orrs	r3, r2
 800fea0:	4a0d      	ldr	r2, [pc, #52]	; (800fed8 <xTaskPriorityDisinherit+0x110>)
 800fea2:	6013      	str	r3, [r2, #0]
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fea8:	4613      	mov	r3, r2
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	4413      	add	r3, r2
 800feae:	009b      	lsls	r3, r3, #2
 800feb0:	4a08      	ldr	r2, [pc, #32]	; (800fed4 <xTaskPriorityDisinherit+0x10c>)
 800feb2:	441a      	add	r2, r3
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	3304      	adds	r3, #4
 800feb8:	4619      	mov	r1, r3
 800feba:	4610      	mov	r0, r2
 800febc:	f7fe f8ad 	bl	800e01a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fec0:	2301      	movs	r3, #1
 800fec2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fec4:	697b      	ldr	r3, [r7, #20]
	}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3718      	adds	r7, #24
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}
 800fece:	bf00      	nop
 800fed0:	20005804 	.word	0x20005804
 800fed4:	20005808 	.word	0x20005808
 800fed8:	2000590c 	.word	0x2000590c

0800fedc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b088      	sub	sp, #32
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800feea:	2301      	movs	r3, #1
 800feec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	f000 8087 	beq.w	8010004 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d10c      	bne.n	800ff18 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800fefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff02:	b672      	cpsid	i
 800ff04:	f383 8811 	msr	BASEPRI, r3
 800ff08:	f3bf 8f6f 	isb	sy
 800ff0c:	f3bf 8f4f 	dsb	sy
 800ff10:	b662      	cpsie	i
 800ff12:	60fb      	str	r3, [r7, #12]
}
 800ff14:	bf00      	nop
 800ff16:	e7fe      	b.n	800ff16 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff1c:	683a      	ldr	r2, [r7, #0]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d902      	bls.n	800ff28 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	61fb      	str	r3, [r7, #28]
 800ff26:	e002      	b.n	800ff2e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff2c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ff2e:	69bb      	ldr	r3, [r7, #24]
 800ff30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff32:	69fa      	ldr	r2, [r7, #28]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d065      	beq.n	8010004 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ff38:	69bb      	ldr	r3, [r7, #24]
 800ff3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff3c:	697a      	ldr	r2, [r7, #20]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d160      	bne.n	8010004 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ff42:	4b32      	ldr	r3, [pc, #200]	; (801000c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	69ba      	ldr	r2, [r7, #24]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d10c      	bne.n	800ff66 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800ff4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff50:	b672      	cpsid	i
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	b662      	cpsie	i
 800ff60:	60bb      	str	r3, [r7, #8]
}
 800ff62:	bf00      	nop
 800ff64:	e7fe      	b.n	800ff64 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff6a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ff6c:	69bb      	ldr	r3, [r7, #24]
 800ff6e:	69fa      	ldr	r2, [r7, #28]
 800ff70:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff72:	69bb      	ldr	r3, [r7, #24]
 800ff74:	699b      	ldr	r3, [r3, #24]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	db04      	blt.n	800ff84 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	f1c3 0207 	rsb	r2, r3, #7
 800ff80:	69bb      	ldr	r3, [r7, #24]
 800ff82:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ff84:	69bb      	ldr	r3, [r7, #24]
 800ff86:	6959      	ldr	r1, [r3, #20]
 800ff88:	693a      	ldr	r2, [r7, #16]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	4413      	add	r3, r2
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	4a1f      	ldr	r2, [pc, #124]	; (8010010 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ff94:	4413      	add	r3, r2
 800ff96:	4299      	cmp	r1, r3
 800ff98:	d134      	bne.n	8010004 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff9a:	69bb      	ldr	r3, [r7, #24]
 800ff9c:	3304      	adds	r3, #4
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7fe f898 	bl	800e0d4 <uxListRemove>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d115      	bne.n	800ffd6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ffaa:	69bb      	ldr	r3, [r7, #24]
 800ffac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffae:	4918      	ldr	r1, [pc, #96]	; (8010010 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ffb0:	4613      	mov	r3, r2
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	4413      	add	r3, r2
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	440b      	add	r3, r1
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d10a      	bne.n	800ffd6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800ffc0:	69bb      	ldr	r3, [r7, #24]
 800ffc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	fa02 f303 	lsl.w	r3, r2, r3
 800ffca:	43da      	mvns	r2, r3
 800ffcc:	4b11      	ldr	r3, [pc, #68]	; (8010014 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4013      	ands	r3, r2
 800ffd2:	4a10      	ldr	r2, [pc, #64]	; (8010014 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ffd4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffda:	2201      	movs	r2, #1
 800ffdc:	409a      	lsls	r2, r3
 800ffde:	4b0d      	ldr	r3, [pc, #52]	; (8010014 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	4313      	orrs	r3, r2
 800ffe4:	4a0b      	ldr	r2, [pc, #44]	; (8010014 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ffe6:	6013      	str	r3, [r2, #0]
 800ffe8:	69bb      	ldr	r3, [r7, #24]
 800ffea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffec:	4613      	mov	r3, r2
 800ffee:	009b      	lsls	r3, r3, #2
 800fff0:	4413      	add	r3, r2
 800fff2:	009b      	lsls	r3, r3, #2
 800fff4:	4a06      	ldr	r2, [pc, #24]	; (8010010 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800fff6:	441a      	add	r2, r3
 800fff8:	69bb      	ldr	r3, [r7, #24]
 800fffa:	3304      	adds	r3, #4
 800fffc:	4619      	mov	r1, r3
 800fffe:	4610      	mov	r0, r2
 8010000:	f7fe f80b 	bl	800e01a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010004:	bf00      	nop
 8010006:	3720      	adds	r7, #32
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	20005804 	.word	0x20005804
 8010010:	20005808 	.word	0x20005808
 8010014:	2000590c 	.word	0x2000590c

08010018 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010018:	b480      	push	{r7}
 801001a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801001c:	4b07      	ldr	r3, [pc, #28]	; (801003c <pvTaskIncrementMutexHeldCount+0x24>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d004      	beq.n	801002e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010024:	4b05      	ldr	r3, [pc, #20]	; (801003c <pvTaskIncrementMutexHeldCount+0x24>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801002a:	3201      	adds	r2, #1
 801002c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801002e:	4b03      	ldr	r3, [pc, #12]	; (801003c <pvTaskIncrementMutexHeldCount+0x24>)
 8010030:	681b      	ldr	r3, [r3, #0]
	}
 8010032:	4618      	mov	r0, r3
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr
 801003c:	20005804 	.word	0x20005804

08010040 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b084      	sub	sp, #16
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801004a:	4b29      	ldr	r3, [pc, #164]	; (80100f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010050:	4b28      	ldr	r3, [pc, #160]	; (80100f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	3304      	adds	r3, #4
 8010056:	4618      	mov	r0, r3
 8010058:	f7fe f83c 	bl	800e0d4 <uxListRemove>
 801005c:	4603      	mov	r3, r0
 801005e:	2b00      	cmp	r3, #0
 8010060:	d10b      	bne.n	801007a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010062:	4b24      	ldr	r3, [pc, #144]	; (80100f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010068:	2201      	movs	r2, #1
 801006a:	fa02 f303 	lsl.w	r3, r2, r3
 801006e:	43da      	mvns	r2, r3
 8010070:	4b21      	ldr	r3, [pc, #132]	; (80100f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4013      	ands	r3, r2
 8010076:	4a20      	ldr	r2, [pc, #128]	; (80100f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010078:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010080:	d10a      	bne.n	8010098 <prvAddCurrentTaskToDelayedList+0x58>
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d007      	beq.n	8010098 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010088:	4b1a      	ldr	r3, [pc, #104]	; (80100f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	3304      	adds	r3, #4
 801008e:	4619      	mov	r1, r3
 8010090:	481a      	ldr	r0, [pc, #104]	; (80100fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8010092:	f7fd ffc2 	bl	800e01a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010096:	e026      	b.n	80100e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4413      	add	r3, r2
 801009e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80100a0:	4b14      	ldr	r3, [pc, #80]	; (80100f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	68ba      	ldr	r2, [r7, #8]
 80100a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80100a8:	68ba      	ldr	r2, [r7, #8]
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d209      	bcs.n	80100c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100b0:	4b13      	ldr	r3, [pc, #76]	; (8010100 <prvAddCurrentTaskToDelayedList+0xc0>)
 80100b2:	681a      	ldr	r2, [r3, #0]
 80100b4:	4b0f      	ldr	r3, [pc, #60]	; (80100f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	3304      	adds	r3, #4
 80100ba:	4619      	mov	r1, r3
 80100bc:	4610      	mov	r0, r2
 80100be:	f7fd ffd0 	bl	800e062 <vListInsert>
}
 80100c2:	e010      	b.n	80100e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100c4:	4b0f      	ldr	r3, [pc, #60]	; (8010104 <prvAddCurrentTaskToDelayedList+0xc4>)
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	4b0a      	ldr	r3, [pc, #40]	; (80100f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	3304      	adds	r3, #4
 80100ce:	4619      	mov	r1, r3
 80100d0:	4610      	mov	r0, r2
 80100d2:	f7fd ffc6 	bl	800e062 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80100d6:	4b0c      	ldr	r3, [pc, #48]	; (8010108 <prvAddCurrentTaskToDelayedList+0xc8>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	68ba      	ldr	r2, [r7, #8]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d202      	bcs.n	80100e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80100e0:	4a09      	ldr	r2, [pc, #36]	; (8010108 <prvAddCurrentTaskToDelayedList+0xc8>)
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	6013      	str	r3, [r2, #0]
}
 80100e6:	bf00      	nop
 80100e8:	3710      	adds	r7, #16
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}
 80100ee:	bf00      	nop
 80100f0:	20005908 	.word	0x20005908
 80100f4:	20005804 	.word	0x20005804
 80100f8:	2000590c 	.word	0x2000590c
 80100fc:	200058f0 	.word	0x200058f0
 8010100:	200058c0 	.word	0x200058c0
 8010104:	200058bc 	.word	0x200058bc
 8010108:	20005924 	.word	0x20005924

0801010c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801010c:	b480      	push	{r7}
 801010e:	b085      	sub	sp, #20
 8010110:	af00      	add	r7, sp, #0
 8010112:	60f8      	str	r0, [r7, #12]
 8010114:	60b9      	str	r1, [r7, #8]
 8010116:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	3b04      	subs	r3, #4
 801011c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	3b04      	subs	r3, #4
 801012a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	f023 0201 	bic.w	r2, r3, #1
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	3b04      	subs	r3, #4
 801013a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801013c:	4a0c      	ldr	r2, [pc, #48]	; (8010170 <pxPortInitialiseStack+0x64>)
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	3b14      	subs	r3, #20
 8010146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	3b04      	subs	r3, #4
 8010152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	f06f 0202 	mvn.w	r2, #2
 801015a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	3b20      	subs	r3, #32
 8010160:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010162:	68fb      	ldr	r3, [r7, #12]
}
 8010164:	4618      	mov	r0, r3
 8010166:	3714      	adds	r7, #20
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr
 8010170:	08010175 	.word	0x08010175

08010174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010174:	b480      	push	{r7}
 8010176:	b085      	sub	sp, #20
 8010178:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801017a:	2300      	movs	r3, #0
 801017c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801017e:	4b14      	ldr	r3, [pc, #80]	; (80101d0 <prvTaskExitError+0x5c>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010186:	d00c      	beq.n	80101a2 <prvTaskExitError+0x2e>
	__asm volatile
 8010188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018c:	b672      	cpsid	i
 801018e:	f383 8811 	msr	BASEPRI, r3
 8010192:	f3bf 8f6f 	isb	sy
 8010196:	f3bf 8f4f 	dsb	sy
 801019a:	b662      	cpsie	i
 801019c:	60fb      	str	r3, [r7, #12]
}
 801019e:	bf00      	nop
 80101a0:	e7fe      	b.n	80101a0 <prvTaskExitError+0x2c>
	__asm volatile
 80101a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a6:	b672      	cpsid	i
 80101a8:	f383 8811 	msr	BASEPRI, r3
 80101ac:	f3bf 8f6f 	isb	sy
 80101b0:	f3bf 8f4f 	dsb	sy
 80101b4:	b662      	cpsie	i
 80101b6:	60bb      	str	r3, [r7, #8]
}
 80101b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80101ba:	bf00      	nop
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d0fc      	beq.n	80101bc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80101c2:	bf00      	nop
 80101c4:	bf00      	nop
 80101c6:	3714      	adds	r7, #20
 80101c8:	46bd      	mov	sp, r7
 80101ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ce:	4770      	bx	lr
 80101d0:	200009d8 	.word	0x200009d8
	...

080101e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80101e0:	4b07      	ldr	r3, [pc, #28]	; (8010200 <pxCurrentTCBConst2>)
 80101e2:	6819      	ldr	r1, [r3, #0]
 80101e4:	6808      	ldr	r0, [r1, #0]
 80101e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101ea:	f380 8809 	msr	PSP, r0
 80101ee:	f3bf 8f6f 	isb	sy
 80101f2:	f04f 0000 	mov.w	r0, #0
 80101f6:	f380 8811 	msr	BASEPRI, r0
 80101fa:	4770      	bx	lr
 80101fc:	f3af 8000 	nop.w

08010200 <pxCurrentTCBConst2>:
 8010200:	20005804 	.word	0x20005804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010204:	bf00      	nop
 8010206:	bf00      	nop

08010208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010208:	4808      	ldr	r0, [pc, #32]	; (801022c <prvPortStartFirstTask+0x24>)
 801020a:	6800      	ldr	r0, [r0, #0]
 801020c:	6800      	ldr	r0, [r0, #0]
 801020e:	f380 8808 	msr	MSP, r0
 8010212:	f04f 0000 	mov.w	r0, #0
 8010216:	f380 8814 	msr	CONTROL, r0
 801021a:	b662      	cpsie	i
 801021c:	b661      	cpsie	f
 801021e:	f3bf 8f4f 	dsb	sy
 8010222:	f3bf 8f6f 	isb	sy
 8010226:	df00      	svc	0
 8010228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801022a:	bf00      	nop
 801022c:	e000ed08 	.word	0xe000ed08

08010230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010236:	4b37      	ldr	r3, [pc, #220]	; (8010314 <xPortStartScheduler+0xe4>)
 8010238:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	b2db      	uxtb	r3, r3
 8010240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	22ff      	movs	r2, #255	; 0xff
 8010246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	b2db      	uxtb	r3, r3
 801024e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010250:	78fb      	ldrb	r3, [r7, #3]
 8010252:	b2db      	uxtb	r3, r3
 8010254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010258:	b2da      	uxtb	r2, r3
 801025a:	4b2f      	ldr	r3, [pc, #188]	; (8010318 <xPortStartScheduler+0xe8>)
 801025c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801025e:	4b2f      	ldr	r3, [pc, #188]	; (801031c <xPortStartScheduler+0xec>)
 8010260:	2207      	movs	r2, #7
 8010262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010264:	e009      	b.n	801027a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010266:	4b2d      	ldr	r3, [pc, #180]	; (801031c <xPortStartScheduler+0xec>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	3b01      	subs	r3, #1
 801026c:	4a2b      	ldr	r2, [pc, #172]	; (801031c <xPortStartScheduler+0xec>)
 801026e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010270:	78fb      	ldrb	r3, [r7, #3]
 8010272:	b2db      	uxtb	r3, r3
 8010274:	005b      	lsls	r3, r3, #1
 8010276:	b2db      	uxtb	r3, r3
 8010278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801027a:	78fb      	ldrb	r3, [r7, #3]
 801027c:	b2db      	uxtb	r3, r3
 801027e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010282:	2b80      	cmp	r3, #128	; 0x80
 8010284:	d0ef      	beq.n	8010266 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010286:	4b25      	ldr	r3, [pc, #148]	; (801031c <xPortStartScheduler+0xec>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	f1c3 0307 	rsb	r3, r3, #7
 801028e:	2b04      	cmp	r3, #4
 8010290:	d00c      	beq.n	80102ac <xPortStartScheduler+0x7c>
	__asm volatile
 8010292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010296:	b672      	cpsid	i
 8010298:	f383 8811 	msr	BASEPRI, r3
 801029c:	f3bf 8f6f 	isb	sy
 80102a0:	f3bf 8f4f 	dsb	sy
 80102a4:	b662      	cpsie	i
 80102a6:	60bb      	str	r3, [r7, #8]
}
 80102a8:	bf00      	nop
 80102aa:	e7fe      	b.n	80102aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80102ac:	4b1b      	ldr	r3, [pc, #108]	; (801031c <xPortStartScheduler+0xec>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	021b      	lsls	r3, r3, #8
 80102b2:	4a1a      	ldr	r2, [pc, #104]	; (801031c <xPortStartScheduler+0xec>)
 80102b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80102b6:	4b19      	ldr	r3, [pc, #100]	; (801031c <xPortStartScheduler+0xec>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80102be:	4a17      	ldr	r2, [pc, #92]	; (801031c <xPortStartScheduler+0xec>)
 80102c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	b2da      	uxtb	r2, r3
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80102ca:	4b15      	ldr	r3, [pc, #84]	; (8010320 <xPortStartScheduler+0xf0>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	4a14      	ldr	r2, [pc, #80]	; (8010320 <xPortStartScheduler+0xf0>)
 80102d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80102d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80102d6:	4b12      	ldr	r3, [pc, #72]	; (8010320 <xPortStartScheduler+0xf0>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4a11      	ldr	r2, [pc, #68]	; (8010320 <xPortStartScheduler+0xf0>)
 80102dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80102e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80102e2:	f000 f8dd 	bl	80104a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80102e6:	4b0f      	ldr	r3, [pc, #60]	; (8010324 <xPortStartScheduler+0xf4>)
 80102e8:	2200      	movs	r2, #0
 80102ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80102ec:	f000 f8fc 	bl	80104e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80102f0:	4b0d      	ldr	r3, [pc, #52]	; (8010328 <xPortStartScheduler+0xf8>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	4a0c      	ldr	r2, [pc, #48]	; (8010328 <xPortStartScheduler+0xf8>)
 80102f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80102fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80102fc:	f7ff ff84 	bl	8010208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010300:	f7ff fa72 	bl	800f7e8 <vTaskSwitchContext>
	prvTaskExitError();
 8010304:	f7ff ff36 	bl	8010174 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010308:	2300      	movs	r3, #0
}
 801030a:	4618      	mov	r0, r3
 801030c:	3710      	adds	r7, #16
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}
 8010312:	bf00      	nop
 8010314:	e000e400 	.word	0xe000e400
 8010318:	20005930 	.word	0x20005930
 801031c:	20005934 	.word	0x20005934
 8010320:	e000ed20 	.word	0xe000ed20
 8010324:	200009d8 	.word	0x200009d8
 8010328:	e000ef34 	.word	0xe000ef34

0801032c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801032c:	b480      	push	{r7}
 801032e:	b083      	sub	sp, #12
 8010330:	af00      	add	r7, sp, #0
	__asm volatile
 8010332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010336:	b672      	cpsid	i
 8010338:	f383 8811 	msr	BASEPRI, r3
 801033c:	f3bf 8f6f 	isb	sy
 8010340:	f3bf 8f4f 	dsb	sy
 8010344:	b662      	cpsie	i
 8010346:	607b      	str	r3, [r7, #4]
}
 8010348:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801034a:	4b10      	ldr	r3, [pc, #64]	; (801038c <vPortEnterCritical+0x60>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	3301      	adds	r3, #1
 8010350:	4a0e      	ldr	r2, [pc, #56]	; (801038c <vPortEnterCritical+0x60>)
 8010352:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010354:	4b0d      	ldr	r3, [pc, #52]	; (801038c <vPortEnterCritical+0x60>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2b01      	cmp	r3, #1
 801035a:	d111      	bne.n	8010380 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801035c:	4b0c      	ldr	r3, [pc, #48]	; (8010390 <vPortEnterCritical+0x64>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	b2db      	uxtb	r3, r3
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00c      	beq.n	8010380 <vPortEnterCritical+0x54>
	__asm volatile
 8010366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801036a:	b672      	cpsid	i
 801036c:	f383 8811 	msr	BASEPRI, r3
 8010370:	f3bf 8f6f 	isb	sy
 8010374:	f3bf 8f4f 	dsb	sy
 8010378:	b662      	cpsie	i
 801037a:	603b      	str	r3, [r7, #0]
}
 801037c:	bf00      	nop
 801037e:	e7fe      	b.n	801037e <vPortEnterCritical+0x52>
	}
}
 8010380:	bf00      	nop
 8010382:	370c      	adds	r7, #12
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr
 801038c:	200009d8 	.word	0x200009d8
 8010390:	e000ed04 	.word	0xe000ed04

08010394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010394:	b480      	push	{r7}
 8010396:	b083      	sub	sp, #12
 8010398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801039a:	4b13      	ldr	r3, [pc, #76]	; (80103e8 <vPortExitCritical+0x54>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d10c      	bne.n	80103bc <vPortExitCritical+0x28>
	__asm volatile
 80103a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a6:	b672      	cpsid	i
 80103a8:	f383 8811 	msr	BASEPRI, r3
 80103ac:	f3bf 8f6f 	isb	sy
 80103b0:	f3bf 8f4f 	dsb	sy
 80103b4:	b662      	cpsie	i
 80103b6:	607b      	str	r3, [r7, #4]
}
 80103b8:	bf00      	nop
 80103ba:	e7fe      	b.n	80103ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80103bc:	4b0a      	ldr	r3, [pc, #40]	; (80103e8 <vPortExitCritical+0x54>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	3b01      	subs	r3, #1
 80103c2:	4a09      	ldr	r2, [pc, #36]	; (80103e8 <vPortExitCritical+0x54>)
 80103c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80103c6:	4b08      	ldr	r3, [pc, #32]	; (80103e8 <vPortExitCritical+0x54>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d105      	bne.n	80103da <vPortExitCritical+0x46>
 80103ce:	2300      	movs	r3, #0
 80103d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	f383 8811 	msr	BASEPRI, r3
}
 80103d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80103da:	bf00      	nop
 80103dc:	370c      	adds	r7, #12
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr
 80103e6:	bf00      	nop
 80103e8:	200009d8 	.word	0x200009d8
 80103ec:	00000000 	.word	0x00000000

080103f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80103f0:	f3ef 8009 	mrs	r0, PSP
 80103f4:	f3bf 8f6f 	isb	sy
 80103f8:	4b15      	ldr	r3, [pc, #84]	; (8010450 <pxCurrentTCBConst>)
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	f01e 0f10 	tst.w	lr, #16
 8010400:	bf08      	it	eq
 8010402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801040a:	6010      	str	r0, [r2, #0]
 801040c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010414:	b672      	cpsid	i
 8010416:	f380 8811 	msr	BASEPRI, r0
 801041a:	f3bf 8f4f 	dsb	sy
 801041e:	f3bf 8f6f 	isb	sy
 8010422:	b662      	cpsie	i
 8010424:	f7ff f9e0 	bl	800f7e8 <vTaskSwitchContext>
 8010428:	f04f 0000 	mov.w	r0, #0
 801042c:	f380 8811 	msr	BASEPRI, r0
 8010430:	bc09      	pop	{r0, r3}
 8010432:	6819      	ldr	r1, [r3, #0]
 8010434:	6808      	ldr	r0, [r1, #0]
 8010436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801043a:	f01e 0f10 	tst.w	lr, #16
 801043e:	bf08      	it	eq
 8010440:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010444:	f380 8809 	msr	PSP, r0
 8010448:	f3bf 8f6f 	isb	sy
 801044c:	4770      	bx	lr
 801044e:	bf00      	nop

08010450 <pxCurrentTCBConst>:
 8010450:	20005804 	.word	0x20005804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010454:	bf00      	nop
 8010456:	bf00      	nop

08010458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
	__asm volatile
 801045e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010462:	b672      	cpsid	i
 8010464:	f383 8811 	msr	BASEPRI, r3
 8010468:	f3bf 8f6f 	isb	sy
 801046c:	f3bf 8f4f 	dsb	sy
 8010470:	b662      	cpsie	i
 8010472:	607b      	str	r3, [r7, #4]
}
 8010474:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010476:	f7ff f8fd 	bl	800f674 <xTaskIncrementTick>
 801047a:	4603      	mov	r3, r0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d003      	beq.n	8010488 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010480:	4b06      	ldr	r3, [pc, #24]	; (801049c <SysTick_Handler+0x44>)
 8010482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010486:	601a      	str	r2, [r3, #0]
 8010488:	2300      	movs	r3, #0
 801048a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	f383 8811 	msr	BASEPRI, r3
}
 8010492:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010494:	bf00      	nop
 8010496:	3708      	adds	r7, #8
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	e000ed04 	.word	0xe000ed04

080104a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80104a0:	b480      	push	{r7}
 80104a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80104a4:	4b0b      	ldr	r3, [pc, #44]	; (80104d4 <vPortSetupTimerInterrupt+0x34>)
 80104a6:	2200      	movs	r2, #0
 80104a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80104aa:	4b0b      	ldr	r3, [pc, #44]	; (80104d8 <vPortSetupTimerInterrupt+0x38>)
 80104ac:	2200      	movs	r2, #0
 80104ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80104b0:	4b0a      	ldr	r3, [pc, #40]	; (80104dc <vPortSetupTimerInterrupt+0x3c>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4a0a      	ldr	r2, [pc, #40]	; (80104e0 <vPortSetupTimerInterrupt+0x40>)
 80104b6:	fba2 2303 	umull	r2, r3, r2, r3
 80104ba:	099b      	lsrs	r3, r3, #6
 80104bc:	4a09      	ldr	r2, [pc, #36]	; (80104e4 <vPortSetupTimerInterrupt+0x44>)
 80104be:	3b01      	subs	r3, #1
 80104c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80104c2:	4b04      	ldr	r3, [pc, #16]	; (80104d4 <vPortSetupTimerInterrupt+0x34>)
 80104c4:	2207      	movs	r2, #7
 80104c6:	601a      	str	r2, [r3, #0]
}
 80104c8:	bf00      	nop
 80104ca:	46bd      	mov	sp, r7
 80104cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d0:	4770      	bx	lr
 80104d2:	bf00      	nop
 80104d4:	e000e010 	.word	0xe000e010
 80104d8:	e000e018 	.word	0xe000e018
 80104dc:	200009cc 	.word	0x200009cc
 80104e0:	10624dd3 	.word	0x10624dd3
 80104e4:	e000e014 	.word	0xe000e014

080104e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80104e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80104f8 <vPortEnableVFP+0x10>
 80104ec:	6801      	ldr	r1, [r0, #0]
 80104ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80104f2:	6001      	str	r1, [r0, #0]
 80104f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80104f6:	bf00      	nop
 80104f8:	e000ed88 	.word	0xe000ed88

080104fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80104fc:	b480      	push	{r7}
 80104fe:	b085      	sub	sp, #20
 8010500:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010502:	f3ef 8305 	mrs	r3, IPSR
 8010506:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2b0f      	cmp	r3, #15
 801050c:	d916      	bls.n	801053c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801050e:	4a19      	ldr	r2, [pc, #100]	; (8010574 <vPortValidateInterruptPriority+0x78>)
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	4413      	add	r3, r2
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010518:	4b17      	ldr	r3, [pc, #92]	; (8010578 <vPortValidateInterruptPriority+0x7c>)
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	7afa      	ldrb	r2, [r7, #11]
 801051e:	429a      	cmp	r2, r3
 8010520:	d20c      	bcs.n	801053c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010526:	b672      	cpsid	i
 8010528:	f383 8811 	msr	BASEPRI, r3
 801052c:	f3bf 8f6f 	isb	sy
 8010530:	f3bf 8f4f 	dsb	sy
 8010534:	b662      	cpsie	i
 8010536:	607b      	str	r3, [r7, #4]
}
 8010538:	bf00      	nop
 801053a:	e7fe      	b.n	801053a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801053c:	4b0f      	ldr	r3, [pc, #60]	; (801057c <vPortValidateInterruptPriority+0x80>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010544:	4b0e      	ldr	r3, [pc, #56]	; (8010580 <vPortValidateInterruptPriority+0x84>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	429a      	cmp	r2, r3
 801054a:	d90c      	bls.n	8010566 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801054c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010550:	b672      	cpsid	i
 8010552:	f383 8811 	msr	BASEPRI, r3
 8010556:	f3bf 8f6f 	isb	sy
 801055a:	f3bf 8f4f 	dsb	sy
 801055e:	b662      	cpsie	i
 8010560:	603b      	str	r3, [r7, #0]
}
 8010562:	bf00      	nop
 8010564:	e7fe      	b.n	8010564 <vPortValidateInterruptPriority+0x68>
	}
 8010566:	bf00      	nop
 8010568:	3714      	adds	r7, #20
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr
 8010572:	bf00      	nop
 8010574:	e000e3f0 	.word	0xe000e3f0
 8010578:	20005930 	.word	0x20005930
 801057c:	e000ed0c 	.word	0xe000ed0c
 8010580:	20005934 	.word	0x20005934

08010584 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b08a      	sub	sp, #40	; 0x28
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801058c:	2300      	movs	r3, #0
 801058e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010590:	f7fe ffa2 	bl	800f4d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010594:	4b5b      	ldr	r3, [pc, #364]	; (8010704 <pvPortMalloc+0x180>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d101      	bne.n	80105a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801059c:	f000 f91a 	bl	80107d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80105a0:	4b59      	ldr	r3, [pc, #356]	; (8010708 <pvPortMalloc+0x184>)
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4013      	ands	r3, r2
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f040 8092 	bne.w	80106d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d01f      	beq.n	80105f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80105b4:	2208      	movs	r2, #8
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	4413      	add	r3, r2
 80105ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f003 0307 	and.w	r3, r3, #7
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d016      	beq.n	80105f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f023 0307 	bic.w	r3, r3, #7
 80105cc:	3308      	adds	r3, #8
 80105ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f003 0307 	and.w	r3, r3, #7
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d00c      	beq.n	80105f4 <pvPortMalloc+0x70>
	__asm volatile
 80105da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105de:	b672      	cpsid	i
 80105e0:	f383 8811 	msr	BASEPRI, r3
 80105e4:	f3bf 8f6f 	isb	sy
 80105e8:	f3bf 8f4f 	dsb	sy
 80105ec:	b662      	cpsie	i
 80105ee:	617b      	str	r3, [r7, #20]
}
 80105f0:	bf00      	nop
 80105f2:	e7fe      	b.n	80105f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d06b      	beq.n	80106d2 <pvPortMalloc+0x14e>
 80105fa:	4b44      	ldr	r3, [pc, #272]	; (801070c <pvPortMalloc+0x188>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	429a      	cmp	r2, r3
 8010602:	d866      	bhi.n	80106d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010604:	4b42      	ldr	r3, [pc, #264]	; (8010710 <pvPortMalloc+0x18c>)
 8010606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010608:	4b41      	ldr	r3, [pc, #260]	; (8010710 <pvPortMalloc+0x18c>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801060e:	e004      	b.n	801061a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	429a      	cmp	r2, r3
 8010622:	d903      	bls.n	801062c <pvPortMalloc+0xa8>
 8010624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d1f1      	bne.n	8010610 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801062c:	4b35      	ldr	r3, [pc, #212]	; (8010704 <pvPortMalloc+0x180>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010632:	429a      	cmp	r2, r3
 8010634:	d04d      	beq.n	80106d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010636:	6a3b      	ldr	r3, [r7, #32]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2208      	movs	r2, #8
 801063c:	4413      	add	r3, r2
 801063e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010642:	681a      	ldr	r2, [r3, #0]
 8010644:	6a3b      	ldr	r3, [r7, #32]
 8010646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064a:	685a      	ldr	r2, [r3, #4]
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	1ad2      	subs	r2, r2, r3
 8010650:	2308      	movs	r3, #8
 8010652:	005b      	lsls	r3, r3, #1
 8010654:	429a      	cmp	r2, r3
 8010656:	d921      	bls.n	801069c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	4413      	add	r3, r2
 801065e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010660:	69bb      	ldr	r3, [r7, #24]
 8010662:	f003 0307 	and.w	r3, r3, #7
 8010666:	2b00      	cmp	r3, #0
 8010668:	d00c      	beq.n	8010684 <pvPortMalloc+0x100>
	__asm volatile
 801066a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066e:	b672      	cpsid	i
 8010670:	f383 8811 	msr	BASEPRI, r3
 8010674:	f3bf 8f6f 	isb	sy
 8010678:	f3bf 8f4f 	dsb	sy
 801067c:	b662      	cpsie	i
 801067e:	613b      	str	r3, [r7, #16]
}
 8010680:	bf00      	nop
 8010682:	e7fe      	b.n	8010682 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010686:	685a      	ldr	r2, [r3, #4]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	1ad2      	subs	r2, r2, r3
 801068c:	69bb      	ldr	r3, [r7, #24]
 801068e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010692:	687a      	ldr	r2, [r7, #4]
 8010694:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010696:	69b8      	ldr	r0, [r7, #24]
 8010698:	f000 f8fe 	bl	8010898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801069c:	4b1b      	ldr	r3, [pc, #108]	; (801070c <pvPortMalloc+0x188>)
 801069e:	681a      	ldr	r2, [r3, #0]
 80106a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	1ad3      	subs	r3, r2, r3
 80106a6:	4a19      	ldr	r2, [pc, #100]	; (801070c <pvPortMalloc+0x188>)
 80106a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80106aa:	4b18      	ldr	r3, [pc, #96]	; (801070c <pvPortMalloc+0x188>)
 80106ac:	681a      	ldr	r2, [r3, #0]
 80106ae:	4b19      	ldr	r3, [pc, #100]	; (8010714 <pvPortMalloc+0x190>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d203      	bcs.n	80106be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80106b6:	4b15      	ldr	r3, [pc, #84]	; (801070c <pvPortMalloc+0x188>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	4a16      	ldr	r2, [pc, #88]	; (8010714 <pvPortMalloc+0x190>)
 80106bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80106be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c0:	685a      	ldr	r2, [r3, #4]
 80106c2:	4b11      	ldr	r3, [pc, #68]	; (8010708 <pvPortMalloc+0x184>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	431a      	orrs	r2, r3
 80106c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80106cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ce:	2200      	movs	r2, #0
 80106d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80106d2:	f7fe ff0f 	bl	800f4f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	f003 0307 	and.w	r3, r3, #7
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d00c      	beq.n	80106fa <pvPortMalloc+0x176>
	__asm volatile
 80106e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e4:	b672      	cpsid	i
 80106e6:	f383 8811 	msr	BASEPRI, r3
 80106ea:	f3bf 8f6f 	isb	sy
 80106ee:	f3bf 8f4f 	dsb	sy
 80106f2:	b662      	cpsie	i
 80106f4:	60fb      	str	r3, [r7, #12]
}
 80106f6:	bf00      	nop
 80106f8:	e7fe      	b.n	80106f8 <pvPortMalloc+0x174>
	return pvReturn;
 80106fa:	69fb      	ldr	r3, [r7, #28]
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3728      	adds	r7, #40	; 0x28
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	20009540 	.word	0x20009540
 8010708:	2000954c 	.word	0x2000954c
 801070c:	20009544 	.word	0x20009544
 8010710:	20009538 	.word	0x20009538
 8010714:	20009548 	.word	0x20009548

08010718 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b086      	sub	sp, #24
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d04c      	beq.n	80107c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801072a:	2308      	movs	r3, #8
 801072c:	425b      	negs	r3, r3
 801072e:	697a      	ldr	r2, [r7, #20]
 8010730:	4413      	add	r3, r2
 8010732:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	685a      	ldr	r2, [r3, #4]
 801073c:	4b23      	ldr	r3, [pc, #140]	; (80107cc <vPortFree+0xb4>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	4013      	ands	r3, r2
 8010742:	2b00      	cmp	r3, #0
 8010744:	d10c      	bne.n	8010760 <vPortFree+0x48>
	__asm volatile
 8010746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801074a:	b672      	cpsid	i
 801074c:	f383 8811 	msr	BASEPRI, r3
 8010750:	f3bf 8f6f 	isb	sy
 8010754:	f3bf 8f4f 	dsb	sy
 8010758:	b662      	cpsie	i
 801075a:	60fb      	str	r3, [r7, #12]
}
 801075c:	bf00      	nop
 801075e:	e7fe      	b.n	801075e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d00c      	beq.n	8010782 <vPortFree+0x6a>
	__asm volatile
 8010768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076c:	b672      	cpsid	i
 801076e:	f383 8811 	msr	BASEPRI, r3
 8010772:	f3bf 8f6f 	isb	sy
 8010776:	f3bf 8f4f 	dsb	sy
 801077a:	b662      	cpsie	i
 801077c:	60bb      	str	r3, [r7, #8]
}
 801077e:	bf00      	nop
 8010780:	e7fe      	b.n	8010780 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	685a      	ldr	r2, [r3, #4]
 8010786:	4b11      	ldr	r3, [pc, #68]	; (80107cc <vPortFree+0xb4>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	4013      	ands	r3, r2
 801078c:	2b00      	cmp	r3, #0
 801078e:	d019      	beq.n	80107c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d115      	bne.n	80107c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	685a      	ldr	r2, [r3, #4]
 801079c:	4b0b      	ldr	r3, [pc, #44]	; (80107cc <vPortFree+0xb4>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	43db      	mvns	r3, r3
 80107a2:	401a      	ands	r2, r3
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80107a8:	f7fe fe96 	bl	800f4d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80107ac:	693b      	ldr	r3, [r7, #16]
 80107ae:	685a      	ldr	r2, [r3, #4]
 80107b0:	4b07      	ldr	r3, [pc, #28]	; (80107d0 <vPortFree+0xb8>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	4413      	add	r3, r2
 80107b6:	4a06      	ldr	r2, [pc, #24]	; (80107d0 <vPortFree+0xb8>)
 80107b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80107ba:	6938      	ldr	r0, [r7, #16]
 80107bc:	f000 f86c 	bl	8010898 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80107c0:	f7fe fe98 	bl	800f4f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80107c4:	bf00      	nop
 80107c6:	3718      	adds	r7, #24
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	2000954c 	.word	0x2000954c
 80107d0:	20009544 	.word	0x20009544

080107d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80107d4:	b480      	push	{r7}
 80107d6:	b085      	sub	sp, #20
 80107d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80107da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80107de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80107e0:	4b27      	ldr	r3, [pc, #156]	; (8010880 <prvHeapInit+0xac>)
 80107e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	f003 0307 	and.w	r3, r3, #7
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00c      	beq.n	8010808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	3307      	adds	r3, #7
 80107f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f023 0307 	bic.w	r3, r3, #7
 80107fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80107fc:	68ba      	ldr	r2, [r7, #8]
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	1ad3      	subs	r3, r2, r3
 8010802:	4a1f      	ldr	r2, [pc, #124]	; (8010880 <prvHeapInit+0xac>)
 8010804:	4413      	add	r3, r2
 8010806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801080c:	4a1d      	ldr	r2, [pc, #116]	; (8010884 <prvHeapInit+0xb0>)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010812:	4b1c      	ldr	r3, [pc, #112]	; (8010884 <prvHeapInit+0xb0>)
 8010814:	2200      	movs	r2, #0
 8010816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	68ba      	ldr	r2, [r7, #8]
 801081c:	4413      	add	r3, r2
 801081e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010820:	2208      	movs	r2, #8
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	1a9b      	subs	r3, r3, r2
 8010826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	f023 0307 	bic.w	r3, r3, #7
 801082e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	4a15      	ldr	r2, [pc, #84]	; (8010888 <prvHeapInit+0xb4>)
 8010834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010836:	4b14      	ldr	r3, [pc, #80]	; (8010888 <prvHeapInit+0xb4>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	2200      	movs	r2, #0
 801083c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801083e:	4b12      	ldr	r3, [pc, #72]	; (8010888 <prvHeapInit+0xb4>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	2200      	movs	r2, #0
 8010844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	68fa      	ldr	r2, [r7, #12]
 801084e:	1ad2      	subs	r2, r2, r3
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010854:	4b0c      	ldr	r3, [pc, #48]	; (8010888 <prvHeapInit+0xb4>)
 8010856:	681a      	ldr	r2, [r3, #0]
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	4a0a      	ldr	r2, [pc, #40]	; (801088c <prvHeapInit+0xb8>)
 8010862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	4a09      	ldr	r2, [pc, #36]	; (8010890 <prvHeapInit+0xbc>)
 801086a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801086c:	4b09      	ldr	r3, [pc, #36]	; (8010894 <prvHeapInit+0xc0>)
 801086e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010872:	601a      	str	r2, [r3, #0]
}
 8010874:	bf00      	nop
 8010876:	3714      	adds	r7, #20
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr
 8010880:	20005938 	.word	0x20005938
 8010884:	20009538 	.word	0x20009538
 8010888:	20009540 	.word	0x20009540
 801088c:	20009548 	.word	0x20009548
 8010890:	20009544 	.word	0x20009544
 8010894:	2000954c 	.word	0x2000954c

08010898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010898:	b480      	push	{r7}
 801089a:	b085      	sub	sp, #20
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80108a0:	4b28      	ldr	r3, [pc, #160]	; (8010944 <prvInsertBlockIntoFreeList+0xac>)
 80108a2:	60fb      	str	r3, [r7, #12]
 80108a4:	e002      	b.n	80108ac <prvInsertBlockIntoFreeList+0x14>
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	60fb      	str	r3, [r7, #12]
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d8f7      	bhi.n	80108a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	68ba      	ldr	r2, [r7, #8]
 80108c0:	4413      	add	r3, r2
 80108c2:	687a      	ldr	r2, [r7, #4]
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d108      	bne.n	80108da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	685a      	ldr	r2, [r3, #4]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	441a      	add	r2, r3
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	68ba      	ldr	r2, [r7, #8]
 80108e4:	441a      	add	r2, r3
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d118      	bne.n	8010920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	4b15      	ldr	r3, [pc, #84]	; (8010948 <prvInsertBlockIntoFreeList+0xb0>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d00d      	beq.n	8010916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	685a      	ldr	r2, [r3, #4]
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	441a      	add	r2, r3
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	681a      	ldr	r2, [r3, #0]
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	601a      	str	r2, [r3, #0]
 8010914:	e008      	b.n	8010928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010916:	4b0c      	ldr	r3, [pc, #48]	; (8010948 <prvInsertBlockIntoFreeList+0xb0>)
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	601a      	str	r2, [r3, #0]
 801091e:	e003      	b.n	8010928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	429a      	cmp	r2, r3
 801092e:	d002      	beq.n	8010936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010936:	bf00      	nop
 8010938:	3714      	adds	r7, #20
 801093a:	46bd      	mov	sp, r7
 801093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010940:	4770      	bx	lr
 8010942:	bf00      	nop
 8010944:	20009538 	.word	0x20009538
 8010948:	20009540 	.word	0x20009540

0801094c <__errno>:
 801094c:	4b01      	ldr	r3, [pc, #4]	; (8010954 <__errno+0x8>)
 801094e:	6818      	ldr	r0, [r3, #0]
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	200009dc 	.word	0x200009dc

08010958 <exit>:
 8010958:	b508      	push	{r3, lr}
 801095a:	4b07      	ldr	r3, [pc, #28]	; (8010978 <exit+0x20>)
 801095c:	4604      	mov	r4, r0
 801095e:	b113      	cbz	r3, 8010966 <exit+0xe>
 8010960:	2100      	movs	r1, #0
 8010962:	f3af 8000 	nop.w
 8010966:	4b05      	ldr	r3, [pc, #20]	; (801097c <exit+0x24>)
 8010968:	6818      	ldr	r0, [r3, #0]
 801096a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801096c:	b103      	cbz	r3, 8010970 <exit+0x18>
 801096e:	4798      	blx	r3
 8010970:	4620      	mov	r0, r4
 8010972:	f7f5 f825 	bl	80059c0 <_exit>
 8010976:	bf00      	nop
 8010978:	00000000 	.word	0x00000000
 801097c:	08012f9c 	.word	0x08012f9c

08010980 <_fclose_r>:
 8010980:	b570      	push	{r4, r5, r6, lr}
 8010982:	4605      	mov	r5, r0
 8010984:	460c      	mov	r4, r1
 8010986:	b911      	cbnz	r1, 801098e <_fclose_r+0xe>
 8010988:	2600      	movs	r6, #0
 801098a:	4630      	mov	r0, r6
 801098c:	bd70      	pop	{r4, r5, r6, pc}
 801098e:	b118      	cbz	r0, 8010998 <_fclose_r+0x18>
 8010990:	6983      	ldr	r3, [r0, #24]
 8010992:	b90b      	cbnz	r3, 8010998 <_fclose_r+0x18>
 8010994:	f000 f994 	bl	8010cc0 <__sinit>
 8010998:	4b2c      	ldr	r3, [pc, #176]	; (8010a4c <_fclose_r+0xcc>)
 801099a:	429c      	cmp	r4, r3
 801099c:	d114      	bne.n	80109c8 <_fclose_r+0x48>
 801099e:	686c      	ldr	r4, [r5, #4]
 80109a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109a2:	07d8      	lsls	r0, r3, #31
 80109a4:	d405      	bmi.n	80109b2 <_fclose_r+0x32>
 80109a6:	89a3      	ldrh	r3, [r4, #12]
 80109a8:	0599      	lsls	r1, r3, #22
 80109aa:	d402      	bmi.n	80109b2 <_fclose_r+0x32>
 80109ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109ae:	f000 fcd5 	bl	801135c <__retarget_lock_acquire_recursive>
 80109b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109b6:	b98b      	cbnz	r3, 80109dc <_fclose_r+0x5c>
 80109b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80109ba:	f016 0601 	ands.w	r6, r6, #1
 80109be:	d1e3      	bne.n	8010988 <_fclose_r+0x8>
 80109c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109c2:	f000 fccc 	bl	801135e <__retarget_lock_release_recursive>
 80109c6:	e7e0      	b.n	801098a <_fclose_r+0xa>
 80109c8:	4b21      	ldr	r3, [pc, #132]	; (8010a50 <_fclose_r+0xd0>)
 80109ca:	429c      	cmp	r4, r3
 80109cc:	d101      	bne.n	80109d2 <_fclose_r+0x52>
 80109ce:	68ac      	ldr	r4, [r5, #8]
 80109d0:	e7e6      	b.n	80109a0 <_fclose_r+0x20>
 80109d2:	4b20      	ldr	r3, [pc, #128]	; (8010a54 <_fclose_r+0xd4>)
 80109d4:	429c      	cmp	r4, r3
 80109d6:	bf08      	it	eq
 80109d8:	68ec      	ldreq	r4, [r5, #12]
 80109da:	e7e1      	b.n	80109a0 <_fclose_r+0x20>
 80109dc:	4621      	mov	r1, r4
 80109de:	4628      	mov	r0, r5
 80109e0:	f000 f842 	bl	8010a68 <__sflush_r>
 80109e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80109e6:	4606      	mov	r6, r0
 80109e8:	b133      	cbz	r3, 80109f8 <_fclose_r+0x78>
 80109ea:	6a21      	ldr	r1, [r4, #32]
 80109ec:	4628      	mov	r0, r5
 80109ee:	4798      	blx	r3
 80109f0:	2800      	cmp	r0, #0
 80109f2:	bfb8      	it	lt
 80109f4:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 80109f8:	89a3      	ldrh	r3, [r4, #12]
 80109fa:	061a      	lsls	r2, r3, #24
 80109fc:	d503      	bpl.n	8010a06 <_fclose_r+0x86>
 80109fe:	6921      	ldr	r1, [r4, #16]
 8010a00:	4628      	mov	r0, r5
 8010a02:	f000 fd37 	bl	8011474 <_free_r>
 8010a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a08:	b141      	cbz	r1, 8010a1c <_fclose_r+0x9c>
 8010a0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a0e:	4299      	cmp	r1, r3
 8010a10:	d002      	beq.n	8010a18 <_fclose_r+0x98>
 8010a12:	4628      	mov	r0, r5
 8010a14:	f000 fd2e 	bl	8011474 <_free_r>
 8010a18:	2300      	movs	r3, #0
 8010a1a:	6363      	str	r3, [r4, #52]	; 0x34
 8010a1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010a1e:	b121      	cbz	r1, 8010a2a <_fclose_r+0xaa>
 8010a20:	4628      	mov	r0, r5
 8010a22:	f000 fd27 	bl	8011474 <_free_r>
 8010a26:	2300      	movs	r3, #0
 8010a28:	64a3      	str	r3, [r4, #72]	; 0x48
 8010a2a:	f000 f931 	bl	8010c90 <__sfp_lock_acquire>
 8010a2e:	2300      	movs	r3, #0
 8010a30:	81a3      	strh	r3, [r4, #12]
 8010a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a34:	07db      	lsls	r3, r3, #31
 8010a36:	d402      	bmi.n	8010a3e <_fclose_r+0xbe>
 8010a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a3a:	f000 fc90 	bl	801135e <__retarget_lock_release_recursive>
 8010a3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a40:	f000 fc8b 	bl	801135a <__retarget_lock_close_recursive>
 8010a44:	f000 f92a 	bl	8010c9c <__sfp_lock_release>
 8010a48:	e79f      	b.n	801098a <_fclose_r+0xa>
 8010a4a:	bf00      	nop
 8010a4c:	08012f5c 	.word	0x08012f5c
 8010a50:	08012f7c 	.word	0x08012f7c
 8010a54:	08012f3c 	.word	0x08012f3c

08010a58 <fclose>:
 8010a58:	4b02      	ldr	r3, [pc, #8]	; (8010a64 <fclose+0xc>)
 8010a5a:	4601      	mov	r1, r0
 8010a5c:	6818      	ldr	r0, [r3, #0]
 8010a5e:	f7ff bf8f 	b.w	8010980 <_fclose_r>
 8010a62:	bf00      	nop
 8010a64:	200009dc 	.word	0x200009dc

08010a68 <__sflush_r>:
 8010a68:	898a      	ldrh	r2, [r1, #12]
 8010a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a6e:	4605      	mov	r5, r0
 8010a70:	0710      	lsls	r0, r2, #28
 8010a72:	460c      	mov	r4, r1
 8010a74:	d458      	bmi.n	8010b28 <__sflush_r+0xc0>
 8010a76:	684b      	ldr	r3, [r1, #4]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	dc05      	bgt.n	8010a88 <__sflush_r+0x20>
 8010a7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	dc02      	bgt.n	8010a88 <__sflush_r+0x20>
 8010a82:	2000      	movs	r0, #0
 8010a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a8a:	2e00      	cmp	r6, #0
 8010a8c:	d0f9      	beq.n	8010a82 <__sflush_r+0x1a>
 8010a8e:	2300      	movs	r3, #0
 8010a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010a94:	682f      	ldr	r7, [r5, #0]
 8010a96:	602b      	str	r3, [r5, #0]
 8010a98:	d032      	beq.n	8010b00 <__sflush_r+0x98>
 8010a9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010a9c:	89a3      	ldrh	r3, [r4, #12]
 8010a9e:	075a      	lsls	r2, r3, #29
 8010aa0:	d505      	bpl.n	8010aae <__sflush_r+0x46>
 8010aa2:	6863      	ldr	r3, [r4, #4]
 8010aa4:	1ac0      	subs	r0, r0, r3
 8010aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010aa8:	b10b      	cbz	r3, 8010aae <__sflush_r+0x46>
 8010aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010aac:	1ac0      	subs	r0, r0, r3
 8010aae:	2300      	movs	r3, #0
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ab4:	6a21      	ldr	r1, [r4, #32]
 8010ab6:	4628      	mov	r0, r5
 8010ab8:	47b0      	blx	r6
 8010aba:	1c43      	adds	r3, r0, #1
 8010abc:	89a3      	ldrh	r3, [r4, #12]
 8010abe:	d106      	bne.n	8010ace <__sflush_r+0x66>
 8010ac0:	6829      	ldr	r1, [r5, #0]
 8010ac2:	291d      	cmp	r1, #29
 8010ac4:	d82c      	bhi.n	8010b20 <__sflush_r+0xb8>
 8010ac6:	4a2a      	ldr	r2, [pc, #168]	; (8010b70 <__sflush_r+0x108>)
 8010ac8:	40ca      	lsrs	r2, r1
 8010aca:	07d6      	lsls	r6, r2, #31
 8010acc:	d528      	bpl.n	8010b20 <__sflush_r+0xb8>
 8010ace:	2200      	movs	r2, #0
 8010ad0:	6062      	str	r2, [r4, #4]
 8010ad2:	04d9      	lsls	r1, r3, #19
 8010ad4:	6922      	ldr	r2, [r4, #16]
 8010ad6:	6022      	str	r2, [r4, #0]
 8010ad8:	d504      	bpl.n	8010ae4 <__sflush_r+0x7c>
 8010ada:	1c42      	adds	r2, r0, #1
 8010adc:	d101      	bne.n	8010ae2 <__sflush_r+0x7a>
 8010ade:	682b      	ldr	r3, [r5, #0]
 8010ae0:	b903      	cbnz	r3, 8010ae4 <__sflush_r+0x7c>
 8010ae2:	6560      	str	r0, [r4, #84]	; 0x54
 8010ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ae6:	602f      	str	r7, [r5, #0]
 8010ae8:	2900      	cmp	r1, #0
 8010aea:	d0ca      	beq.n	8010a82 <__sflush_r+0x1a>
 8010aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010af0:	4299      	cmp	r1, r3
 8010af2:	d002      	beq.n	8010afa <__sflush_r+0x92>
 8010af4:	4628      	mov	r0, r5
 8010af6:	f000 fcbd 	bl	8011474 <_free_r>
 8010afa:	2000      	movs	r0, #0
 8010afc:	6360      	str	r0, [r4, #52]	; 0x34
 8010afe:	e7c1      	b.n	8010a84 <__sflush_r+0x1c>
 8010b00:	6a21      	ldr	r1, [r4, #32]
 8010b02:	2301      	movs	r3, #1
 8010b04:	4628      	mov	r0, r5
 8010b06:	47b0      	blx	r6
 8010b08:	1c41      	adds	r1, r0, #1
 8010b0a:	d1c7      	bne.n	8010a9c <__sflush_r+0x34>
 8010b0c:	682b      	ldr	r3, [r5, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d0c4      	beq.n	8010a9c <__sflush_r+0x34>
 8010b12:	2b1d      	cmp	r3, #29
 8010b14:	d001      	beq.n	8010b1a <__sflush_r+0xb2>
 8010b16:	2b16      	cmp	r3, #22
 8010b18:	d101      	bne.n	8010b1e <__sflush_r+0xb6>
 8010b1a:	602f      	str	r7, [r5, #0]
 8010b1c:	e7b1      	b.n	8010a82 <__sflush_r+0x1a>
 8010b1e:	89a3      	ldrh	r3, [r4, #12]
 8010b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b24:	81a3      	strh	r3, [r4, #12]
 8010b26:	e7ad      	b.n	8010a84 <__sflush_r+0x1c>
 8010b28:	690f      	ldr	r7, [r1, #16]
 8010b2a:	2f00      	cmp	r7, #0
 8010b2c:	d0a9      	beq.n	8010a82 <__sflush_r+0x1a>
 8010b2e:	0793      	lsls	r3, r2, #30
 8010b30:	680e      	ldr	r6, [r1, #0]
 8010b32:	bf08      	it	eq
 8010b34:	694b      	ldreq	r3, [r1, #20]
 8010b36:	600f      	str	r7, [r1, #0]
 8010b38:	bf18      	it	ne
 8010b3a:	2300      	movne	r3, #0
 8010b3c:	eba6 0807 	sub.w	r8, r6, r7
 8010b40:	608b      	str	r3, [r1, #8]
 8010b42:	f1b8 0f00 	cmp.w	r8, #0
 8010b46:	dd9c      	ble.n	8010a82 <__sflush_r+0x1a>
 8010b48:	6a21      	ldr	r1, [r4, #32]
 8010b4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010b4c:	4643      	mov	r3, r8
 8010b4e:	463a      	mov	r2, r7
 8010b50:	4628      	mov	r0, r5
 8010b52:	47b0      	blx	r6
 8010b54:	2800      	cmp	r0, #0
 8010b56:	dc06      	bgt.n	8010b66 <__sflush_r+0xfe>
 8010b58:	89a3      	ldrh	r3, [r4, #12]
 8010b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b5e:	81a3      	strh	r3, [r4, #12]
 8010b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b64:	e78e      	b.n	8010a84 <__sflush_r+0x1c>
 8010b66:	4407      	add	r7, r0
 8010b68:	eba8 0800 	sub.w	r8, r8, r0
 8010b6c:	e7e9      	b.n	8010b42 <__sflush_r+0xda>
 8010b6e:	bf00      	nop
 8010b70:	20400001 	.word	0x20400001

08010b74 <_fflush_r>:
 8010b74:	b538      	push	{r3, r4, r5, lr}
 8010b76:	690b      	ldr	r3, [r1, #16]
 8010b78:	4605      	mov	r5, r0
 8010b7a:	460c      	mov	r4, r1
 8010b7c:	b913      	cbnz	r3, 8010b84 <_fflush_r+0x10>
 8010b7e:	2500      	movs	r5, #0
 8010b80:	4628      	mov	r0, r5
 8010b82:	bd38      	pop	{r3, r4, r5, pc}
 8010b84:	b118      	cbz	r0, 8010b8e <_fflush_r+0x1a>
 8010b86:	6983      	ldr	r3, [r0, #24]
 8010b88:	b90b      	cbnz	r3, 8010b8e <_fflush_r+0x1a>
 8010b8a:	f000 f899 	bl	8010cc0 <__sinit>
 8010b8e:	4b14      	ldr	r3, [pc, #80]	; (8010be0 <_fflush_r+0x6c>)
 8010b90:	429c      	cmp	r4, r3
 8010b92:	d11b      	bne.n	8010bcc <_fflush_r+0x58>
 8010b94:	686c      	ldr	r4, [r5, #4]
 8010b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d0ef      	beq.n	8010b7e <_fflush_r+0xa>
 8010b9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ba0:	07d0      	lsls	r0, r2, #31
 8010ba2:	d404      	bmi.n	8010bae <_fflush_r+0x3a>
 8010ba4:	0599      	lsls	r1, r3, #22
 8010ba6:	d402      	bmi.n	8010bae <_fflush_r+0x3a>
 8010ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010baa:	f000 fbd7 	bl	801135c <__retarget_lock_acquire_recursive>
 8010bae:	4628      	mov	r0, r5
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	f7ff ff59 	bl	8010a68 <__sflush_r>
 8010bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bb8:	07da      	lsls	r2, r3, #31
 8010bba:	4605      	mov	r5, r0
 8010bbc:	d4e0      	bmi.n	8010b80 <_fflush_r+0xc>
 8010bbe:	89a3      	ldrh	r3, [r4, #12]
 8010bc0:	059b      	lsls	r3, r3, #22
 8010bc2:	d4dd      	bmi.n	8010b80 <_fflush_r+0xc>
 8010bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bc6:	f000 fbca 	bl	801135e <__retarget_lock_release_recursive>
 8010bca:	e7d9      	b.n	8010b80 <_fflush_r+0xc>
 8010bcc:	4b05      	ldr	r3, [pc, #20]	; (8010be4 <_fflush_r+0x70>)
 8010bce:	429c      	cmp	r4, r3
 8010bd0:	d101      	bne.n	8010bd6 <_fflush_r+0x62>
 8010bd2:	68ac      	ldr	r4, [r5, #8]
 8010bd4:	e7df      	b.n	8010b96 <_fflush_r+0x22>
 8010bd6:	4b04      	ldr	r3, [pc, #16]	; (8010be8 <_fflush_r+0x74>)
 8010bd8:	429c      	cmp	r4, r3
 8010bda:	bf08      	it	eq
 8010bdc:	68ec      	ldreq	r4, [r5, #12]
 8010bde:	e7da      	b.n	8010b96 <_fflush_r+0x22>
 8010be0:	08012f5c 	.word	0x08012f5c
 8010be4:	08012f7c 	.word	0x08012f7c
 8010be8:	08012f3c 	.word	0x08012f3c

08010bec <fflush>:
 8010bec:	4601      	mov	r1, r0
 8010bee:	b920      	cbnz	r0, 8010bfa <fflush+0xe>
 8010bf0:	4b04      	ldr	r3, [pc, #16]	; (8010c04 <fflush+0x18>)
 8010bf2:	4905      	ldr	r1, [pc, #20]	; (8010c08 <fflush+0x1c>)
 8010bf4:	6818      	ldr	r0, [r3, #0]
 8010bf6:	f000 bafe 	b.w	80111f6 <_fwalk_reent>
 8010bfa:	4b04      	ldr	r3, [pc, #16]	; (8010c0c <fflush+0x20>)
 8010bfc:	6818      	ldr	r0, [r3, #0]
 8010bfe:	f7ff bfb9 	b.w	8010b74 <_fflush_r>
 8010c02:	bf00      	nop
 8010c04:	08012f9c 	.word	0x08012f9c
 8010c08:	08010b75 	.word	0x08010b75
 8010c0c:	200009dc 	.word	0x200009dc

08010c10 <std>:
 8010c10:	2300      	movs	r3, #0
 8010c12:	b510      	push	{r4, lr}
 8010c14:	4604      	mov	r4, r0
 8010c16:	e9c0 3300 	strd	r3, r3, [r0]
 8010c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c1e:	6083      	str	r3, [r0, #8]
 8010c20:	8181      	strh	r1, [r0, #12]
 8010c22:	6643      	str	r3, [r0, #100]	; 0x64
 8010c24:	81c2      	strh	r2, [r0, #14]
 8010c26:	6183      	str	r3, [r0, #24]
 8010c28:	4619      	mov	r1, r3
 8010c2a:	2208      	movs	r2, #8
 8010c2c:	305c      	adds	r0, #92	; 0x5c
 8010c2e:	f000 fc19 	bl	8011464 <memset>
 8010c32:	4b05      	ldr	r3, [pc, #20]	; (8010c48 <std+0x38>)
 8010c34:	6263      	str	r3, [r4, #36]	; 0x24
 8010c36:	4b05      	ldr	r3, [pc, #20]	; (8010c4c <std+0x3c>)
 8010c38:	62a3      	str	r3, [r4, #40]	; 0x28
 8010c3a:	4b05      	ldr	r3, [pc, #20]	; (8010c50 <std+0x40>)
 8010c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010c3e:	4b05      	ldr	r3, [pc, #20]	; (8010c54 <std+0x44>)
 8010c40:	6224      	str	r4, [r4, #32]
 8010c42:	6323      	str	r3, [r4, #48]	; 0x30
 8010c44:	bd10      	pop	{r4, pc}
 8010c46:	bf00      	nop
 8010c48:	08011fa9 	.word	0x08011fa9
 8010c4c:	08011fcb 	.word	0x08011fcb
 8010c50:	08012003 	.word	0x08012003
 8010c54:	08012027 	.word	0x08012027

08010c58 <_cleanup_r>:
 8010c58:	4901      	ldr	r1, [pc, #4]	; (8010c60 <_cleanup_r+0x8>)
 8010c5a:	f000 bacc 	b.w	80111f6 <_fwalk_reent>
 8010c5e:	bf00      	nop
 8010c60:	08010b75 	.word	0x08010b75

08010c64 <__sfmoreglue>:
 8010c64:	b570      	push	{r4, r5, r6, lr}
 8010c66:	1e4a      	subs	r2, r1, #1
 8010c68:	2568      	movs	r5, #104	; 0x68
 8010c6a:	4355      	muls	r5, r2
 8010c6c:	460e      	mov	r6, r1
 8010c6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010c72:	f000 fc4f 	bl	8011514 <_malloc_r>
 8010c76:	4604      	mov	r4, r0
 8010c78:	b140      	cbz	r0, 8010c8c <__sfmoreglue+0x28>
 8010c7a:	2100      	movs	r1, #0
 8010c7c:	e9c0 1600 	strd	r1, r6, [r0]
 8010c80:	300c      	adds	r0, #12
 8010c82:	60a0      	str	r0, [r4, #8]
 8010c84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010c88:	f000 fbec 	bl	8011464 <memset>
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	bd70      	pop	{r4, r5, r6, pc}

08010c90 <__sfp_lock_acquire>:
 8010c90:	4801      	ldr	r0, [pc, #4]	; (8010c98 <__sfp_lock_acquire+0x8>)
 8010c92:	f000 bb63 	b.w	801135c <__retarget_lock_acquire_recursive>
 8010c96:	bf00      	nop
 8010c98:	20009c5c 	.word	0x20009c5c

08010c9c <__sfp_lock_release>:
 8010c9c:	4801      	ldr	r0, [pc, #4]	; (8010ca4 <__sfp_lock_release+0x8>)
 8010c9e:	f000 bb5e 	b.w	801135e <__retarget_lock_release_recursive>
 8010ca2:	bf00      	nop
 8010ca4:	20009c5c 	.word	0x20009c5c

08010ca8 <__sinit_lock_acquire>:
 8010ca8:	4801      	ldr	r0, [pc, #4]	; (8010cb0 <__sinit_lock_acquire+0x8>)
 8010caa:	f000 bb57 	b.w	801135c <__retarget_lock_acquire_recursive>
 8010cae:	bf00      	nop
 8010cb0:	20009c57 	.word	0x20009c57

08010cb4 <__sinit_lock_release>:
 8010cb4:	4801      	ldr	r0, [pc, #4]	; (8010cbc <__sinit_lock_release+0x8>)
 8010cb6:	f000 bb52 	b.w	801135e <__retarget_lock_release_recursive>
 8010cba:	bf00      	nop
 8010cbc:	20009c57 	.word	0x20009c57

08010cc0 <__sinit>:
 8010cc0:	b510      	push	{r4, lr}
 8010cc2:	4604      	mov	r4, r0
 8010cc4:	f7ff fff0 	bl	8010ca8 <__sinit_lock_acquire>
 8010cc8:	69a3      	ldr	r3, [r4, #24]
 8010cca:	b11b      	cbz	r3, 8010cd4 <__sinit+0x14>
 8010ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cd0:	f7ff bff0 	b.w	8010cb4 <__sinit_lock_release>
 8010cd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010cd8:	6523      	str	r3, [r4, #80]	; 0x50
 8010cda:	4b13      	ldr	r3, [pc, #76]	; (8010d28 <__sinit+0x68>)
 8010cdc:	4a13      	ldr	r2, [pc, #76]	; (8010d2c <__sinit+0x6c>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	62a2      	str	r2, [r4, #40]	; 0x28
 8010ce2:	42a3      	cmp	r3, r4
 8010ce4:	bf04      	itt	eq
 8010ce6:	2301      	moveq	r3, #1
 8010ce8:	61a3      	streq	r3, [r4, #24]
 8010cea:	4620      	mov	r0, r4
 8010cec:	f000 f820 	bl	8010d30 <__sfp>
 8010cf0:	6060      	str	r0, [r4, #4]
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	f000 f81c 	bl	8010d30 <__sfp>
 8010cf8:	60a0      	str	r0, [r4, #8]
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f000 f818 	bl	8010d30 <__sfp>
 8010d00:	2200      	movs	r2, #0
 8010d02:	60e0      	str	r0, [r4, #12]
 8010d04:	2104      	movs	r1, #4
 8010d06:	6860      	ldr	r0, [r4, #4]
 8010d08:	f7ff ff82 	bl	8010c10 <std>
 8010d0c:	68a0      	ldr	r0, [r4, #8]
 8010d0e:	2201      	movs	r2, #1
 8010d10:	2109      	movs	r1, #9
 8010d12:	f7ff ff7d 	bl	8010c10 <std>
 8010d16:	68e0      	ldr	r0, [r4, #12]
 8010d18:	2202      	movs	r2, #2
 8010d1a:	2112      	movs	r1, #18
 8010d1c:	f7ff ff78 	bl	8010c10 <std>
 8010d20:	2301      	movs	r3, #1
 8010d22:	61a3      	str	r3, [r4, #24]
 8010d24:	e7d2      	b.n	8010ccc <__sinit+0xc>
 8010d26:	bf00      	nop
 8010d28:	08012f9c 	.word	0x08012f9c
 8010d2c:	08010c59 	.word	0x08010c59

08010d30 <__sfp>:
 8010d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d32:	4607      	mov	r7, r0
 8010d34:	f7ff ffac 	bl	8010c90 <__sfp_lock_acquire>
 8010d38:	4b1e      	ldr	r3, [pc, #120]	; (8010db4 <__sfp+0x84>)
 8010d3a:	681e      	ldr	r6, [r3, #0]
 8010d3c:	69b3      	ldr	r3, [r6, #24]
 8010d3e:	b913      	cbnz	r3, 8010d46 <__sfp+0x16>
 8010d40:	4630      	mov	r0, r6
 8010d42:	f7ff ffbd 	bl	8010cc0 <__sinit>
 8010d46:	3648      	adds	r6, #72	; 0x48
 8010d48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010d4c:	3b01      	subs	r3, #1
 8010d4e:	d503      	bpl.n	8010d58 <__sfp+0x28>
 8010d50:	6833      	ldr	r3, [r6, #0]
 8010d52:	b30b      	cbz	r3, 8010d98 <__sfp+0x68>
 8010d54:	6836      	ldr	r6, [r6, #0]
 8010d56:	e7f7      	b.n	8010d48 <__sfp+0x18>
 8010d58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010d5c:	b9d5      	cbnz	r5, 8010d94 <__sfp+0x64>
 8010d5e:	4b16      	ldr	r3, [pc, #88]	; (8010db8 <__sfp+0x88>)
 8010d60:	60e3      	str	r3, [r4, #12]
 8010d62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010d66:	6665      	str	r5, [r4, #100]	; 0x64
 8010d68:	f000 faf6 	bl	8011358 <__retarget_lock_init_recursive>
 8010d6c:	f7ff ff96 	bl	8010c9c <__sfp_lock_release>
 8010d70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010d74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010d78:	6025      	str	r5, [r4, #0]
 8010d7a:	61a5      	str	r5, [r4, #24]
 8010d7c:	2208      	movs	r2, #8
 8010d7e:	4629      	mov	r1, r5
 8010d80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010d84:	f000 fb6e 	bl	8011464 <memset>
 8010d88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010d8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010d90:	4620      	mov	r0, r4
 8010d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d94:	3468      	adds	r4, #104	; 0x68
 8010d96:	e7d9      	b.n	8010d4c <__sfp+0x1c>
 8010d98:	2104      	movs	r1, #4
 8010d9a:	4638      	mov	r0, r7
 8010d9c:	f7ff ff62 	bl	8010c64 <__sfmoreglue>
 8010da0:	4604      	mov	r4, r0
 8010da2:	6030      	str	r0, [r6, #0]
 8010da4:	2800      	cmp	r0, #0
 8010da6:	d1d5      	bne.n	8010d54 <__sfp+0x24>
 8010da8:	f7ff ff78 	bl	8010c9c <__sfp_lock_release>
 8010dac:	230c      	movs	r3, #12
 8010dae:	603b      	str	r3, [r7, #0]
 8010db0:	e7ee      	b.n	8010d90 <__sfp+0x60>
 8010db2:	bf00      	nop
 8010db4:	08012f9c 	.word	0x08012f9c
 8010db8:	ffff0001 	.word	0xffff0001

08010dbc <_fopen_r>:
 8010dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dbe:	460f      	mov	r7, r1
 8010dc0:	4611      	mov	r1, r2
 8010dc2:	aa01      	add	r2, sp, #4
 8010dc4:	4605      	mov	r5, r0
 8010dc6:	f001 fa15 	bl	80121f4 <__sflags>
 8010dca:	4606      	mov	r6, r0
 8010dcc:	b918      	cbnz	r0, 8010dd6 <_fopen_r+0x1a>
 8010dce:	2400      	movs	r4, #0
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	b003      	add	sp, #12
 8010dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	f7ff ffaa 	bl	8010d30 <__sfp>
 8010ddc:	4604      	mov	r4, r0
 8010dde:	2800      	cmp	r0, #0
 8010de0:	d0f5      	beq.n	8010dce <_fopen_r+0x12>
 8010de2:	4639      	mov	r1, r7
 8010de4:	9a01      	ldr	r2, [sp, #4]
 8010de6:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8010dea:	4628      	mov	r0, r5
 8010dec:	f000 feda 	bl	8011ba4 <_open_r>
 8010df0:	1e07      	subs	r7, r0, #0
 8010df2:	da09      	bge.n	8010e08 <_fopen_r+0x4c>
 8010df4:	2500      	movs	r5, #0
 8010df6:	f7ff ff4b 	bl	8010c90 <__sfp_lock_acquire>
 8010dfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dfc:	81a5      	strh	r5, [r4, #12]
 8010dfe:	f000 faac 	bl	801135a <__retarget_lock_close_recursive>
 8010e02:	f7ff ff4b 	bl	8010c9c <__sfp_lock_release>
 8010e06:	e7e2      	b.n	8010dce <_fopen_r+0x12>
 8010e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e0a:	07db      	lsls	r3, r3, #31
 8010e0c:	d405      	bmi.n	8010e1a <_fopen_r+0x5e>
 8010e0e:	89a3      	ldrh	r3, [r4, #12]
 8010e10:	0598      	lsls	r0, r3, #22
 8010e12:	d402      	bmi.n	8010e1a <_fopen_r+0x5e>
 8010e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e16:	f000 faa1 	bl	801135c <__retarget_lock_acquire_recursive>
 8010e1a:	4b0e      	ldr	r3, [pc, #56]	; (8010e54 <_fopen_r+0x98>)
 8010e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8010e1e:	4b0e      	ldr	r3, [pc, #56]	; (8010e58 <_fopen_r+0x9c>)
 8010e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8010e22:	4b0e      	ldr	r3, [pc, #56]	; (8010e5c <_fopen_r+0xa0>)
 8010e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010e26:	05f1      	lsls	r1, r6, #23
 8010e28:	4b0d      	ldr	r3, [pc, #52]	; (8010e60 <_fopen_r+0xa4>)
 8010e2a:	81e7      	strh	r7, [r4, #14]
 8010e2c:	81a6      	strh	r6, [r4, #12]
 8010e2e:	6224      	str	r4, [r4, #32]
 8010e30:	6323      	str	r3, [r4, #48]	; 0x30
 8010e32:	d505      	bpl.n	8010e40 <_fopen_r+0x84>
 8010e34:	2302      	movs	r3, #2
 8010e36:	2200      	movs	r2, #0
 8010e38:	4621      	mov	r1, r4
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	f000 f8ae 	bl	8010f9c <_fseek_r>
 8010e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e42:	07da      	lsls	r2, r3, #31
 8010e44:	d4c4      	bmi.n	8010dd0 <_fopen_r+0x14>
 8010e46:	89a3      	ldrh	r3, [r4, #12]
 8010e48:	059b      	lsls	r3, r3, #22
 8010e4a:	d4c1      	bmi.n	8010dd0 <_fopen_r+0x14>
 8010e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e4e:	f000 fa86 	bl	801135e <__retarget_lock_release_recursive>
 8010e52:	e7bd      	b.n	8010dd0 <_fopen_r+0x14>
 8010e54:	08011fa9 	.word	0x08011fa9
 8010e58:	08011fcb 	.word	0x08011fcb
 8010e5c:	08012003 	.word	0x08012003
 8010e60:	08012027 	.word	0x08012027

08010e64 <fopen>:
 8010e64:	4b02      	ldr	r3, [pc, #8]	; (8010e70 <fopen+0xc>)
 8010e66:	460a      	mov	r2, r1
 8010e68:	4601      	mov	r1, r0
 8010e6a:	6818      	ldr	r0, [r3, #0]
 8010e6c:	f7ff bfa6 	b.w	8010dbc <_fopen_r>
 8010e70:	200009dc 	.word	0x200009dc

08010e74 <fiprintf>:
 8010e74:	b40e      	push	{r1, r2, r3}
 8010e76:	b503      	push	{r0, r1, lr}
 8010e78:	4601      	mov	r1, r0
 8010e7a:	ab03      	add	r3, sp, #12
 8010e7c:	4805      	ldr	r0, [pc, #20]	; (8010e94 <fiprintf+0x20>)
 8010e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e82:	6800      	ldr	r0, [r0, #0]
 8010e84:	9301      	str	r3, [sp, #4]
 8010e86:	f000 fbc9 	bl	801161c <_vfiprintf_r>
 8010e8a:	b002      	add	sp, #8
 8010e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e90:	b003      	add	sp, #12
 8010e92:	4770      	bx	lr
 8010e94:	200009dc 	.word	0x200009dc

08010e98 <_fread_r>:
 8010e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9c:	461f      	mov	r7, r3
 8010e9e:	4613      	mov	r3, r2
 8010ea0:	437b      	muls	r3, r7
 8010ea2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010ea4:	4606      	mov	r6, r0
 8010ea6:	468a      	mov	sl, r1
 8010ea8:	4691      	mov	r9, r2
 8010eaa:	469b      	mov	fp, r3
 8010eac:	d05f      	beq.n	8010f6e <_fread_r+0xd6>
 8010eae:	b118      	cbz	r0, 8010eb8 <_fread_r+0x20>
 8010eb0:	6983      	ldr	r3, [r0, #24]
 8010eb2:	b90b      	cbnz	r3, 8010eb8 <_fread_r+0x20>
 8010eb4:	f7ff ff04 	bl	8010cc0 <__sinit>
 8010eb8:	4b2e      	ldr	r3, [pc, #184]	; (8010f74 <_fread_r+0xdc>)
 8010eba:	429c      	cmp	r4, r3
 8010ebc:	d128      	bne.n	8010f10 <_fread_r+0x78>
 8010ebe:	6874      	ldr	r4, [r6, #4]
 8010ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ec2:	07db      	lsls	r3, r3, #31
 8010ec4:	d405      	bmi.n	8010ed2 <_fread_r+0x3a>
 8010ec6:	89a3      	ldrh	r3, [r4, #12]
 8010ec8:	059d      	lsls	r5, r3, #22
 8010eca:	d402      	bmi.n	8010ed2 <_fread_r+0x3a>
 8010ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ece:	f000 fa45 	bl	801135c <__retarget_lock_acquire_recursive>
 8010ed2:	6863      	ldr	r3, [r4, #4]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	da01      	bge.n	8010edc <_fread_r+0x44>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	6063      	str	r3, [r4, #4]
 8010edc:	46d8      	mov	r8, fp
 8010ede:	e9d4 1500 	ldrd	r1, r5, [r4]
 8010ee2:	4545      	cmp	r5, r8
 8010ee4:	d31e      	bcc.n	8010f24 <_fread_r+0x8c>
 8010ee6:	4642      	mov	r2, r8
 8010ee8:	4650      	mov	r0, sl
 8010eea:	f000 faad 	bl	8011448 <memcpy>
 8010eee:	6860      	ldr	r0, [r4, #4]
 8010ef0:	6821      	ldr	r1, [r4, #0]
 8010ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ef4:	eba0 0008 	sub.w	r0, r0, r8
 8010ef8:	4441      	add	r1, r8
 8010efa:	07da      	lsls	r2, r3, #31
 8010efc:	6060      	str	r0, [r4, #4]
 8010efe:	6021      	str	r1, [r4, #0]
 8010f00:	d42f      	bmi.n	8010f62 <_fread_r+0xca>
 8010f02:	89a3      	ldrh	r3, [r4, #12]
 8010f04:	059b      	lsls	r3, r3, #22
 8010f06:	d42c      	bmi.n	8010f62 <_fread_r+0xca>
 8010f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f0a:	f000 fa28 	bl	801135e <__retarget_lock_release_recursive>
 8010f0e:	e028      	b.n	8010f62 <_fread_r+0xca>
 8010f10:	4b19      	ldr	r3, [pc, #100]	; (8010f78 <_fread_r+0xe0>)
 8010f12:	429c      	cmp	r4, r3
 8010f14:	d101      	bne.n	8010f1a <_fread_r+0x82>
 8010f16:	68b4      	ldr	r4, [r6, #8]
 8010f18:	e7d2      	b.n	8010ec0 <_fread_r+0x28>
 8010f1a:	4b18      	ldr	r3, [pc, #96]	; (8010f7c <_fread_r+0xe4>)
 8010f1c:	429c      	cmp	r4, r3
 8010f1e:	bf08      	it	eq
 8010f20:	68f4      	ldreq	r4, [r6, #12]
 8010f22:	e7cd      	b.n	8010ec0 <_fread_r+0x28>
 8010f24:	462a      	mov	r2, r5
 8010f26:	4650      	mov	r0, sl
 8010f28:	f000 fa8e 	bl	8011448 <memcpy>
 8010f2c:	6823      	ldr	r3, [r4, #0]
 8010f2e:	442b      	add	r3, r5
 8010f30:	6023      	str	r3, [r4, #0]
 8010f32:	4621      	mov	r1, r4
 8010f34:	eba8 0305 	sub.w	r3, r8, r5
 8010f38:	4630      	mov	r0, r6
 8010f3a:	9301      	str	r3, [sp, #4]
 8010f3c:	f000 ff46 	bl	8011dcc <__srefill_r>
 8010f40:	44aa      	add	sl, r5
 8010f42:	9b01      	ldr	r3, [sp, #4]
 8010f44:	b188      	cbz	r0, 8010f6a <_fread_r+0xd2>
 8010f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f48:	07d8      	lsls	r0, r3, #31
 8010f4a:	d405      	bmi.n	8010f58 <_fread_r+0xc0>
 8010f4c:	89a3      	ldrh	r3, [r4, #12]
 8010f4e:	0599      	lsls	r1, r3, #22
 8010f50:	d402      	bmi.n	8010f58 <_fread_r+0xc0>
 8010f52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f54:	f000 fa03 	bl	801135e <__retarget_lock_release_recursive>
 8010f58:	445d      	add	r5, fp
 8010f5a:	eba5 0308 	sub.w	r3, r5, r8
 8010f5e:	fbb3 f7f9 	udiv	r7, r3, r9
 8010f62:	4638      	mov	r0, r7
 8010f64:	b003      	add	sp, #12
 8010f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f6a:	4698      	mov	r8, r3
 8010f6c:	e7b7      	b.n	8010ede <_fread_r+0x46>
 8010f6e:	461f      	mov	r7, r3
 8010f70:	e7f7      	b.n	8010f62 <_fread_r+0xca>
 8010f72:	bf00      	nop
 8010f74:	08012f5c 	.word	0x08012f5c
 8010f78:	08012f7c 	.word	0x08012f7c
 8010f7c:	08012f3c 	.word	0x08012f3c

08010f80 <fread>:
 8010f80:	b507      	push	{r0, r1, r2, lr}
 8010f82:	9300      	str	r3, [sp, #0]
 8010f84:	4613      	mov	r3, r2
 8010f86:	460a      	mov	r2, r1
 8010f88:	4601      	mov	r1, r0
 8010f8a:	4803      	ldr	r0, [pc, #12]	; (8010f98 <fread+0x18>)
 8010f8c:	6800      	ldr	r0, [r0, #0]
 8010f8e:	f7ff ff83 	bl	8010e98 <_fread_r>
 8010f92:	b003      	add	sp, #12
 8010f94:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f98:	200009dc 	.word	0x200009dc

08010f9c <_fseek_r>:
 8010f9c:	f000 b800 	b.w	8010fa0 <_fseeko_r>

08010fa0 <_fseeko_r>:
 8010fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fa4:	460c      	mov	r4, r1
 8010fa6:	4617      	mov	r7, r2
 8010fa8:	461e      	mov	r6, r3
 8010faa:	4605      	mov	r5, r0
 8010fac:	b118      	cbz	r0, 8010fb6 <_fseeko_r+0x16>
 8010fae:	6983      	ldr	r3, [r0, #24]
 8010fb0:	b90b      	cbnz	r3, 8010fb6 <_fseeko_r+0x16>
 8010fb2:	f7ff fe85 	bl	8010cc0 <__sinit>
 8010fb6:	4b44      	ldr	r3, [pc, #272]	; (80110c8 <_fseeko_r+0x128>)
 8010fb8:	429c      	cmp	r4, r3
 8010fba:	d122      	bne.n	8011002 <_fseeko_r+0x62>
 8010fbc:	686c      	ldr	r4, [r5, #4]
 8010fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fc0:	07d9      	lsls	r1, r3, #31
 8010fc2:	d405      	bmi.n	8010fd0 <_fseeko_r+0x30>
 8010fc4:	89a3      	ldrh	r3, [r4, #12]
 8010fc6:	059a      	lsls	r2, r3, #22
 8010fc8:	d402      	bmi.n	8010fd0 <_fseeko_r+0x30>
 8010fca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fcc:	f000 f9c6 	bl	801135c <__retarget_lock_acquire_recursive>
 8010fd0:	89a3      	ldrh	r3, [r4, #12]
 8010fd2:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8010fd6:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8010fda:	d103      	bne.n	8010fe4 <_fseeko_r+0x44>
 8010fdc:	4621      	mov	r1, r4
 8010fde:	4628      	mov	r0, r5
 8010fe0:	f7ff fdc8 	bl	8010b74 <_fflush_r>
 8010fe4:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8010fe8:	f1b8 0f00 	cmp.w	r8, #0
 8010fec:	d113      	bne.n	8011016 <_fseeko_r+0x76>
 8010fee:	231d      	movs	r3, #29
 8010ff0:	602b      	str	r3, [r5, #0]
 8010ff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ff4:	07d9      	lsls	r1, r3, #31
 8010ff6:	d55d      	bpl.n	80110b4 <_fseeko_r+0x114>
 8010ff8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8010ffc:	4630      	mov	r0, r6
 8010ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011002:	4b32      	ldr	r3, [pc, #200]	; (80110cc <_fseeko_r+0x12c>)
 8011004:	429c      	cmp	r4, r3
 8011006:	d101      	bne.n	801100c <_fseeko_r+0x6c>
 8011008:	68ac      	ldr	r4, [r5, #8]
 801100a:	e7d8      	b.n	8010fbe <_fseeko_r+0x1e>
 801100c:	4b30      	ldr	r3, [pc, #192]	; (80110d0 <_fseeko_r+0x130>)
 801100e:	429c      	cmp	r4, r3
 8011010:	bf08      	it	eq
 8011012:	68ec      	ldreq	r4, [r5, #12]
 8011014:	e7d3      	b.n	8010fbe <_fseeko_r+0x1e>
 8011016:	2e01      	cmp	r6, #1
 8011018:	d036      	beq.n	8011088 <_fseeko_r+0xe8>
 801101a:	f036 0302 	bics.w	r3, r6, #2
 801101e:	d147      	bne.n	80110b0 <_fseeko_r+0x110>
 8011020:	6923      	ldr	r3, [r4, #16]
 8011022:	b91b      	cbnz	r3, 801102c <_fseeko_r+0x8c>
 8011024:	4621      	mov	r1, r4
 8011026:	4628      	mov	r0, r5
 8011028:	f000 f9be 	bl	80113a8 <__smakebuf_r>
 801102c:	4621      	mov	r1, r4
 801102e:	4628      	mov	r0, r5
 8011030:	f7ff fda0 	bl	8010b74 <_fflush_r>
 8011034:	2800      	cmp	r0, #0
 8011036:	d1dc      	bne.n	8010ff2 <_fseeko_r+0x52>
 8011038:	6a21      	ldr	r1, [r4, #32]
 801103a:	4633      	mov	r3, r6
 801103c:	463a      	mov	r2, r7
 801103e:	4628      	mov	r0, r5
 8011040:	47c0      	blx	r8
 8011042:	3001      	adds	r0, #1
 8011044:	d0d5      	beq.n	8010ff2 <_fseeko_r+0x52>
 8011046:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011048:	b141      	cbz	r1, 801105c <_fseeko_r+0xbc>
 801104a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801104e:	4299      	cmp	r1, r3
 8011050:	d002      	beq.n	8011058 <_fseeko_r+0xb8>
 8011052:	4628      	mov	r0, r5
 8011054:	f000 fa0e 	bl	8011474 <_free_r>
 8011058:	2300      	movs	r3, #0
 801105a:	6363      	str	r3, [r4, #52]	; 0x34
 801105c:	6923      	ldr	r3, [r4, #16]
 801105e:	6023      	str	r3, [r4, #0]
 8011060:	89a3      	ldrh	r3, [r4, #12]
 8011062:	2500      	movs	r5, #0
 8011064:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8011068:	6065      	str	r5, [r4, #4]
 801106a:	81a3      	strh	r3, [r4, #12]
 801106c:	2208      	movs	r2, #8
 801106e:	4629      	mov	r1, r5
 8011070:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011074:	f000 f9f6 	bl	8011464 <memset>
 8011078:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801107a:	f016 0601 	ands.w	r6, r6, #1
 801107e:	d120      	bne.n	80110c2 <_fseeko_r+0x122>
 8011080:	89a3      	ldrh	r3, [r4, #12]
 8011082:	059b      	lsls	r3, r3, #22
 8011084:	d4ba      	bmi.n	8010ffc <_fseeko_r+0x5c>
 8011086:	e00c      	b.n	80110a2 <_fseeko_r+0x102>
 8011088:	4621      	mov	r1, r4
 801108a:	4628      	mov	r0, r5
 801108c:	f000 f822 	bl	80110d4 <_ftello_r>
 8011090:	1c43      	adds	r3, r0, #1
 8011092:	4606      	mov	r6, r0
 8011094:	d109      	bne.n	80110aa <_fseeko_r+0x10a>
 8011096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011098:	07dd      	lsls	r5, r3, #31
 801109a:	d4ad      	bmi.n	8010ff8 <_fseeko_r+0x58>
 801109c:	89a3      	ldrh	r3, [r4, #12]
 801109e:	0598      	lsls	r0, r3, #22
 80110a0:	d4aa      	bmi.n	8010ff8 <_fseeko_r+0x58>
 80110a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80110a4:	f000 f95b 	bl	801135e <__retarget_lock_release_recursive>
 80110a8:	e7a8      	b.n	8010ffc <_fseeko_r+0x5c>
 80110aa:	4407      	add	r7, r0
 80110ac:	2600      	movs	r6, #0
 80110ae:	e7b7      	b.n	8011020 <_fseeko_r+0x80>
 80110b0:	2316      	movs	r3, #22
 80110b2:	e79d      	b.n	8010ff0 <_fseeko_r+0x50>
 80110b4:	89a3      	ldrh	r3, [r4, #12]
 80110b6:	059a      	lsls	r2, r3, #22
 80110b8:	d49e      	bmi.n	8010ff8 <_fseeko_r+0x58>
 80110ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80110bc:	f000 f94f 	bl	801135e <__retarget_lock_release_recursive>
 80110c0:	e79a      	b.n	8010ff8 <_fseeko_r+0x58>
 80110c2:	462e      	mov	r6, r5
 80110c4:	e79a      	b.n	8010ffc <_fseeko_r+0x5c>
 80110c6:	bf00      	nop
 80110c8:	08012f5c 	.word	0x08012f5c
 80110cc:	08012f7c 	.word	0x08012f7c
 80110d0:	08012f3c 	.word	0x08012f3c

080110d4 <_ftello_r>:
 80110d4:	b570      	push	{r4, r5, r6, lr}
 80110d6:	460c      	mov	r4, r1
 80110d8:	4605      	mov	r5, r0
 80110da:	b118      	cbz	r0, 80110e4 <_ftello_r+0x10>
 80110dc:	6983      	ldr	r3, [r0, #24]
 80110de:	b90b      	cbnz	r3, 80110e4 <_ftello_r+0x10>
 80110e0:	f7ff fdee 	bl	8010cc0 <__sinit>
 80110e4:	4b32      	ldr	r3, [pc, #200]	; (80111b0 <_ftello_r+0xdc>)
 80110e6:	429c      	cmp	r4, r3
 80110e8:	d114      	bne.n	8011114 <_ftello_r+0x40>
 80110ea:	686c      	ldr	r4, [r5, #4]
 80110ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80110ee:	07da      	lsls	r2, r3, #31
 80110f0:	d405      	bmi.n	80110fe <_ftello_r+0x2a>
 80110f2:	89a3      	ldrh	r3, [r4, #12]
 80110f4:	059b      	lsls	r3, r3, #22
 80110f6:	d402      	bmi.n	80110fe <_ftello_r+0x2a>
 80110f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80110fa:	f000 f92f 	bl	801135c <__retarget_lock_acquire_recursive>
 80110fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011100:	b9ce      	cbnz	r6, 8011136 <_ftello_r+0x62>
 8011102:	231d      	movs	r3, #29
 8011104:	602b      	str	r3, [r5, #0]
 8011106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011108:	07de      	lsls	r6, r3, #31
 801110a:	d50d      	bpl.n	8011128 <_ftello_r+0x54>
 801110c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011110:	4628      	mov	r0, r5
 8011112:	bd70      	pop	{r4, r5, r6, pc}
 8011114:	4b27      	ldr	r3, [pc, #156]	; (80111b4 <_ftello_r+0xe0>)
 8011116:	429c      	cmp	r4, r3
 8011118:	d101      	bne.n	801111e <_ftello_r+0x4a>
 801111a:	68ac      	ldr	r4, [r5, #8]
 801111c:	e7e6      	b.n	80110ec <_ftello_r+0x18>
 801111e:	4b26      	ldr	r3, [pc, #152]	; (80111b8 <_ftello_r+0xe4>)
 8011120:	429c      	cmp	r4, r3
 8011122:	bf08      	it	eq
 8011124:	68ec      	ldreq	r4, [r5, #12]
 8011126:	e7e1      	b.n	80110ec <_ftello_r+0x18>
 8011128:	89a3      	ldrh	r3, [r4, #12]
 801112a:	059d      	lsls	r5, r3, #22
 801112c:	d4ee      	bmi.n	801110c <_ftello_r+0x38>
 801112e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011130:	f000 f915 	bl	801135e <__retarget_lock_release_recursive>
 8011134:	e7ea      	b.n	801110c <_ftello_r+0x38>
 8011136:	89a2      	ldrh	r2, [r4, #12]
 8011138:	f002 030c 	and.w	r3, r2, #12
 801113c:	2b08      	cmp	r3, #8
 801113e:	d119      	bne.n	8011174 <_ftello_r+0xa0>
 8011140:	6823      	ldr	r3, [r4, #0]
 8011142:	b1bb      	cbz	r3, 8011174 <_ftello_r+0xa0>
 8011144:	6921      	ldr	r1, [r4, #16]
 8011146:	1a5b      	subs	r3, r3, r1
 8011148:	2b00      	cmp	r3, #0
 801114a:	dd13      	ble.n	8011174 <_ftello_r+0xa0>
 801114c:	05d0      	lsls	r0, r2, #23
 801114e:	d511      	bpl.n	8011174 <_ftello_r+0xa0>
 8011150:	2302      	movs	r3, #2
 8011152:	2200      	movs	r2, #0
 8011154:	6a21      	ldr	r1, [r4, #32]
 8011156:	4628      	mov	r0, r5
 8011158:	47b0      	blx	r6
 801115a:	1c41      	adds	r1, r0, #1
 801115c:	4605      	mov	r5, r0
 801115e:	d10d      	bne.n	801117c <_ftello_r+0xa8>
 8011160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011162:	07da      	lsls	r2, r3, #31
 8011164:	d4d2      	bmi.n	801110c <_ftello_r+0x38>
 8011166:	89a3      	ldrh	r3, [r4, #12]
 8011168:	059b      	lsls	r3, r3, #22
 801116a:	d4cf      	bmi.n	801110c <_ftello_r+0x38>
 801116c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801116e:	f000 f8f6 	bl	801135e <__retarget_lock_release_recursive>
 8011172:	e7cd      	b.n	8011110 <_ftello_r+0x3c>
 8011174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011178:	d00f      	beq.n	801119a <_ftello_r+0xc6>
 801117a:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801117c:	89a2      	ldrh	r2, [r4, #12]
 801117e:	0756      	lsls	r6, r2, #29
 8011180:	d50d      	bpl.n	801119e <_ftello_r+0xca>
 8011182:	6863      	ldr	r3, [r4, #4]
 8011184:	1aed      	subs	r5, r5, r3
 8011186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011188:	b10b      	cbz	r3, 801118e <_ftello_r+0xba>
 801118a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801118c:	1aed      	subs	r5, r5, r3
 801118e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011190:	07d9      	lsls	r1, r3, #31
 8011192:	d4bd      	bmi.n	8011110 <_ftello_r+0x3c>
 8011194:	0593      	lsls	r3, r2, #22
 8011196:	d4bb      	bmi.n	8011110 <_ftello_r+0x3c>
 8011198:	e7e8      	b.n	801116c <_ftello_r+0x98>
 801119a:	2301      	movs	r3, #1
 801119c:	e7da      	b.n	8011154 <_ftello_r+0x80>
 801119e:	0710      	lsls	r0, r2, #28
 80111a0:	d5f5      	bpl.n	801118e <_ftello_r+0xba>
 80111a2:	6823      	ldr	r3, [r4, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d0f2      	beq.n	801118e <_ftello_r+0xba>
 80111a8:	6921      	ldr	r1, [r4, #16]
 80111aa:	1a5b      	subs	r3, r3, r1
 80111ac:	441d      	add	r5, r3
 80111ae:	e7ee      	b.n	801118e <_ftello_r+0xba>
 80111b0:	08012f5c 	.word	0x08012f5c
 80111b4:	08012f7c 	.word	0x08012f7c
 80111b8:	08012f3c 	.word	0x08012f3c

080111bc <_fwalk>:
 80111bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111c0:	460f      	mov	r7, r1
 80111c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80111c6:	2600      	movs	r6, #0
 80111c8:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80111cc:	f1b8 0801 	subs.w	r8, r8, #1
 80111d0:	d505      	bpl.n	80111de <_fwalk+0x22>
 80111d2:	6824      	ldr	r4, [r4, #0]
 80111d4:	2c00      	cmp	r4, #0
 80111d6:	d1f7      	bne.n	80111c8 <_fwalk+0xc>
 80111d8:	4630      	mov	r0, r6
 80111da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111de:	89ab      	ldrh	r3, [r5, #12]
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d906      	bls.n	80111f2 <_fwalk+0x36>
 80111e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111e8:	3301      	adds	r3, #1
 80111ea:	d002      	beq.n	80111f2 <_fwalk+0x36>
 80111ec:	4628      	mov	r0, r5
 80111ee:	47b8      	blx	r7
 80111f0:	4306      	orrs	r6, r0
 80111f2:	3568      	adds	r5, #104	; 0x68
 80111f4:	e7ea      	b.n	80111cc <_fwalk+0x10>

080111f6 <_fwalk_reent>:
 80111f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111fa:	4606      	mov	r6, r0
 80111fc:	4688      	mov	r8, r1
 80111fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011202:	2700      	movs	r7, #0
 8011204:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011208:	f1b9 0901 	subs.w	r9, r9, #1
 801120c:	d505      	bpl.n	801121a <_fwalk_reent+0x24>
 801120e:	6824      	ldr	r4, [r4, #0]
 8011210:	2c00      	cmp	r4, #0
 8011212:	d1f7      	bne.n	8011204 <_fwalk_reent+0xe>
 8011214:	4638      	mov	r0, r7
 8011216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801121a:	89ab      	ldrh	r3, [r5, #12]
 801121c:	2b01      	cmp	r3, #1
 801121e:	d907      	bls.n	8011230 <_fwalk_reent+0x3a>
 8011220:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011224:	3301      	adds	r3, #1
 8011226:	d003      	beq.n	8011230 <_fwalk_reent+0x3a>
 8011228:	4629      	mov	r1, r5
 801122a:	4630      	mov	r0, r6
 801122c:	47c0      	blx	r8
 801122e:	4307      	orrs	r7, r0
 8011230:	3568      	adds	r5, #104	; 0x68
 8011232:	e7e9      	b.n	8011208 <_fwalk_reent+0x12>

08011234 <_fwrite_r>:
 8011234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011238:	9c08      	ldr	r4, [sp, #32]
 801123a:	4689      	mov	r9, r1
 801123c:	4617      	mov	r7, r2
 801123e:	fb02 f803 	mul.w	r8, r2, r3
 8011242:	4605      	mov	r5, r0
 8011244:	b118      	cbz	r0, 801124e <_fwrite_r+0x1a>
 8011246:	6983      	ldr	r3, [r0, #24]
 8011248:	b90b      	cbnz	r3, 801124e <_fwrite_r+0x1a>
 801124a:	f7ff fd39 	bl	8010cc0 <__sinit>
 801124e:	4b26      	ldr	r3, [pc, #152]	; (80112e8 <_fwrite_r+0xb4>)
 8011250:	429c      	cmp	r4, r3
 8011252:	d123      	bne.n	801129c <_fwrite_r+0x68>
 8011254:	686c      	ldr	r4, [r5, #4]
 8011256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011258:	07de      	lsls	r6, r3, #31
 801125a:	d405      	bmi.n	8011268 <_fwrite_r+0x34>
 801125c:	89a3      	ldrh	r3, [r4, #12]
 801125e:	0598      	lsls	r0, r3, #22
 8011260:	d402      	bmi.n	8011268 <_fwrite_r+0x34>
 8011262:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011264:	f000 f87a 	bl	801135c <__retarget_lock_acquire_recursive>
 8011268:	89a3      	ldrh	r3, [r4, #12]
 801126a:	0719      	lsls	r1, r3, #28
 801126c:	d520      	bpl.n	80112b0 <_fwrite_r+0x7c>
 801126e:	6923      	ldr	r3, [r4, #16]
 8011270:	b1f3      	cbz	r3, 80112b0 <_fwrite_r+0x7c>
 8011272:	2600      	movs	r6, #0
 8011274:	4546      	cmp	r6, r8
 8011276:	d029      	beq.n	80112cc <_fwrite_r+0x98>
 8011278:	68a0      	ldr	r0, [r4, #8]
 801127a:	f819 1006 	ldrb.w	r1, [r9, r6]
 801127e:	3801      	subs	r0, #1
 8011280:	2800      	cmp	r0, #0
 8011282:	60a0      	str	r0, [r4, #8]
 8011284:	da04      	bge.n	8011290 <_fwrite_r+0x5c>
 8011286:	69a3      	ldr	r3, [r4, #24]
 8011288:	4298      	cmp	r0, r3
 801128a:	db19      	blt.n	80112c0 <_fwrite_r+0x8c>
 801128c:	290a      	cmp	r1, #10
 801128e:	d017      	beq.n	80112c0 <_fwrite_r+0x8c>
 8011290:	6823      	ldr	r3, [r4, #0]
 8011292:	1c5a      	adds	r2, r3, #1
 8011294:	6022      	str	r2, [r4, #0]
 8011296:	7019      	strb	r1, [r3, #0]
 8011298:	3601      	adds	r6, #1
 801129a:	e7eb      	b.n	8011274 <_fwrite_r+0x40>
 801129c:	4b13      	ldr	r3, [pc, #76]	; (80112ec <_fwrite_r+0xb8>)
 801129e:	429c      	cmp	r4, r3
 80112a0:	d101      	bne.n	80112a6 <_fwrite_r+0x72>
 80112a2:	68ac      	ldr	r4, [r5, #8]
 80112a4:	e7d7      	b.n	8011256 <_fwrite_r+0x22>
 80112a6:	4b12      	ldr	r3, [pc, #72]	; (80112f0 <_fwrite_r+0xbc>)
 80112a8:	429c      	cmp	r4, r3
 80112aa:	bf08      	it	eq
 80112ac:	68ec      	ldreq	r4, [r5, #12]
 80112ae:	e7d2      	b.n	8011256 <_fwrite_r+0x22>
 80112b0:	4621      	mov	r1, r4
 80112b2:	4628      	mov	r0, r5
 80112b4:	f000 ff20 	bl	80120f8 <__swsetup_r>
 80112b8:	2800      	cmp	r0, #0
 80112ba:	d0da      	beq.n	8011272 <_fwrite_r+0x3e>
 80112bc:	2600      	movs	r6, #0
 80112be:	e005      	b.n	80112cc <_fwrite_r+0x98>
 80112c0:	4622      	mov	r2, r4
 80112c2:	4628      	mov	r0, r5
 80112c4:	f000 feb4 	bl	8012030 <__swbuf_r>
 80112c8:	3001      	adds	r0, #1
 80112ca:	d1e5      	bne.n	8011298 <_fwrite_r+0x64>
 80112cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112ce:	07da      	lsls	r2, r3, #31
 80112d0:	d405      	bmi.n	80112de <_fwrite_r+0xaa>
 80112d2:	89a3      	ldrh	r3, [r4, #12]
 80112d4:	059b      	lsls	r3, r3, #22
 80112d6:	d402      	bmi.n	80112de <_fwrite_r+0xaa>
 80112d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112da:	f000 f840 	bl	801135e <__retarget_lock_release_recursive>
 80112de:	fbb6 f0f7 	udiv	r0, r6, r7
 80112e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112e6:	bf00      	nop
 80112e8:	08012f5c 	.word	0x08012f5c
 80112ec:	08012f7c 	.word	0x08012f7c
 80112f0:	08012f3c 	.word	0x08012f3c

080112f4 <fwrite>:
 80112f4:	b507      	push	{r0, r1, r2, lr}
 80112f6:	9300      	str	r3, [sp, #0]
 80112f8:	4613      	mov	r3, r2
 80112fa:	460a      	mov	r2, r1
 80112fc:	4601      	mov	r1, r0
 80112fe:	4803      	ldr	r0, [pc, #12]	; (801130c <fwrite+0x18>)
 8011300:	6800      	ldr	r0, [r0, #0]
 8011302:	f7ff ff97 	bl	8011234 <_fwrite_r>
 8011306:	b003      	add	sp, #12
 8011308:	f85d fb04 	ldr.w	pc, [sp], #4
 801130c:	200009dc 	.word	0x200009dc

08011310 <__libc_init_array>:
 8011310:	b570      	push	{r4, r5, r6, lr}
 8011312:	4d0d      	ldr	r5, [pc, #52]	; (8011348 <__libc_init_array+0x38>)
 8011314:	4c0d      	ldr	r4, [pc, #52]	; (801134c <__libc_init_array+0x3c>)
 8011316:	1b64      	subs	r4, r4, r5
 8011318:	10a4      	asrs	r4, r4, #2
 801131a:	2600      	movs	r6, #0
 801131c:	42a6      	cmp	r6, r4
 801131e:	d109      	bne.n	8011334 <__libc_init_array+0x24>
 8011320:	4d0b      	ldr	r5, [pc, #44]	; (8011350 <__libc_init_array+0x40>)
 8011322:	4c0c      	ldr	r4, [pc, #48]	; (8011354 <__libc_init_array+0x44>)
 8011324:	f001 f992 	bl	801264c <_init>
 8011328:	1b64      	subs	r4, r4, r5
 801132a:	10a4      	asrs	r4, r4, #2
 801132c:	2600      	movs	r6, #0
 801132e:	42a6      	cmp	r6, r4
 8011330:	d105      	bne.n	801133e <__libc_init_array+0x2e>
 8011332:	bd70      	pop	{r4, r5, r6, pc}
 8011334:	f855 3b04 	ldr.w	r3, [r5], #4
 8011338:	4798      	blx	r3
 801133a:	3601      	adds	r6, #1
 801133c:	e7ee      	b.n	801131c <__libc_init_array+0xc>
 801133e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011342:	4798      	blx	r3
 8011344:	3601      	adds	r6, #1
 8011346:	e7f2      	b.n	801132e <__libc_init_array+0x1e>
 8011348:	08012fdc 	.word	0x08012fdc
 801134c:	08012fdc 	.word	0x08012fdc
 8011350:	08012fdc 	.word	0x08012fdc
 8011354:	08012fe0 	.word	0x08012fe0

08011358 <__retarget_lock_init_recursive>:
 8011358:	4770      	bx	lr

0801135a <__retarget_lock_close_recursive>:
 801135a:	4770      	bx	lr

0801135c <__retarget_lock_acquire_recursive>:
 801135c:	4770      	bx	lr

0801135e <__retarget_lock_release_recursive>:
 801135e:	4770      	bx	lr

08011360 <__swhatbuf_r>:
 8011360:	b570      	push	{r4, r5, r6, lr}
 8011362:	460e      	mov	r6, r1
 8011364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011368:	2900      	cmp	r1, #0
 801136a:	b096      	sub	sp, #88	; 0x58
 801136c:	4614      	mov	r4, r2
 801136e:	461d      	mov	r5, r3
 8011370:	da07      	bge.n	8011382 <__swhatbuf_r+0x22>
 8011372:	2300      	movs	r3, #0
 8011374:	602b      	str	r3, [r5, #0]
 8011376:	89b3      	ldrh	r3, [r6, #12]
 8011378:	061a      	lsls	r2, r3, #24
 801137a:	d410      	bmi.n	801139e <__swhatbuf_r+0x3e>
 801137c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011380:	e00e      	b.n	80113a0 <__swhatbuf_r+0x40>
 8011382:	466a      	mov	r2, sp
 8011384:	f000 ff6c 	bl	8012260 <_fstat_r>
 8011388:	2800      	cmp	r0, #0
 801138a:	dbf2      	blt.n	8011372 <__swhatbuf_r+0x12>
 801138c:	9a01      	ldr	r2, [sp, #4]
 801138e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011392:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011396:	425a      	negs	r2, r3
 8011398:	415a      	adcs	r2, r3
 801139a:	602a      	str	r2, [r5, #0]
 801139c:	e7ee      	b.n	801137c <__swhatbuf_r+0x1c>
 801139e:	2340      	movs	r3, #64	; 0x40
 80113a0:	2000      	movs	r0, #0
 80113a2:	6023      	str	r3, [r4, #0]
 80113a4:	b016      	add	sp, #88	; 0x58
 80113a6:	bd70      	pop	{r4, r5, r6, pc}

080113a8 <__smakebuf_r>:
 80113a8:	898b      	ldrh	r3, [r1, #12]
 80113aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113ac:	079d      	lsls	r5, r3, #30
 80113ae:	4606      	mov	r6, r0
 80113b0:	460c      	mov	r4, r1
 80113b2:	d507      	bpl.n	80113c4 <__smakebuf_r+0x1c>
 80113b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113b8:	6023      	str	r3, [r4, #0]
 80113ba:	6123      	str	r3, [r4, #16]
 80113bc:	2301      	movs	r3, #1
 80113be:	6163      	str	r3, [r4, #20]
 80113c0:	b002      	add	sp, #8
 80113c2:	bd70      	pop	{r4, r5, r6, pc}
 80113c4:	ab01      	add	r3, sp, #4
 80113c6:	466a      	mov	r2, sp
 80113c8:	f7ff ffca 	bl	8011360 <__swhatbuf_r>
 80113cc:	9900      	ldr	r1, [sp, #0]
 80113ce:	4605      	mov	r5, r0
 80113d0:	4630      	mov	r0, r6
 80113d2:	f000 f89f 	bl	8011514 <_malloc_r>
 80113d6:	b948      	cbnz	r0, 80113ec <__smakebuf_r+0x44>
 80113d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113dc:	059a      	lsls	r2, r3, #22
 80113de:	d4ef      	bmi.n	80113c0 <__smakebuf_r+0x18>
 80113e0:	f023 0303 	bic.w	r3, r3, #3
 80113e4:	f043 0302 	orr.w	r3, r3, #2
 80113e8:	81a3      	strh	r3, [r4, #12]
 80113ea:	e7e3      	b.n	80113b4 <__smakebuf_r+0xc>
 80113ec:	4b0d      	ldr	r3, [pc, #52]	; (8011424 <__smakebuf_r+0x7c>)
 80113ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80113f0:	89a3      	ldrh	r3, [r4, #12]
 80113f2:	6020      	str	r0, [r4, #0]
 80113f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113f8:	81a3      	strh	r3, [r4, #12]
 80113fa:	9b00      	ldr	r3, [sp, #0]
 80113fc:	6163      	str	r3, [r4, #20]
 80113fe:	9b01      	ldr	r3, [sp, #4]
 8011400:	6120      	str	r0, [r4, #16]
 8011402:	b15b      	cbz	r3, 801141c <__smakebuf_r+0x74>
 8011404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011408:	4630      	mov	r0, r6
 801140a:	f000 ff3b 	bl	8012284 <_isatty_r>
 801140e:	b128      	cbz	r0, 801141c <__smakebuf_r+0x74>
 8011410:	89a3      	ldrh	r3, [r4, #12]
 8011412:	f023 0303 	bic.w	r3, r3, #3
 8011416:	f043 0301 	orr.w	r3, r3, #1
 801141a:	81a3      	strh	r3, [r4, #12]
 801141c:	89a0      	ldrh	r0, [r4, #12]
 801141e:	4305      	orrs	r5, r0
 8011420:	81a5      	strh	r5, [r4, #12]
 8011422:	e7cd      	b.n	80113c0 <__smakebuf_r+0x18>
 8011424:	08010c59 	.word	0x08010c59

08011428 <malloc>:
 8011428:	4b02      	ldr	r3, [pc, #8]	; (8011434 <malloc+0xc>)
 801142a:	4601      	mov	r1, r0
 801142c:	6818      	ldr	r0, [r3, #0]
 801142e:	f000 b871 	b.w	8011514 <_malloc_r>
 8011432:	bf00      	nop
 8011434:	200009dc 	.word	0x200009dc

08011438 <free>:
 8011438:	4b02      	ldr	r3, [pc, #8]	; (8011444 <free+0xc>)
 801143a:	4601      	mov	r1, r0
 801143c:	6818      	ldr	r0, [r3, #0]
 801143e:	f000 b819 	b.w	8011474 <_free_r>
 8011442:	bf00      	nop
 8011444:	200009dc 	.word	0x200009dc

08011448 <memcpy>:
 8011448:	440a      	add	r2, r1
 801144a:	4291      	cmp	r1, r2
 801144c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011450:	d100      	bne.n	8011454 <memcpy+0xc>
 8011452:	4770      	bx	lr
 8011454:	b510      	push	{r4, lr}
 8011456:	f811 4b01 	ldrb.w	r4, [r1], #1
 801145a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801145e:	4291      	cmp	r1, r2
 8011460:	d1f9      	bne.n	8011456 <memcpy+0xe>
 8011462:	bd10      	pop	{r4, pc}

08011464 <memset>:
 8011464:	4402      	add	r2, r0
 8011466:	4603      	mov	r3, r0
 8011468:	4293      	cmp	r3, r2
 801146a:	d100      	bne.n	801146e <memset+0xa>
 801146c:	4770      	bx	lr
 801146e:	f803 1b01 	strb.w	r1, [r3], #1
 8011472:	e7f9      	b.n	8011468 <memset+0x4>

08011474 <_free_r>:
 8011474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011476:	2900      	cmp	r1, #0
 8011478:	d048      	beq.n	801150c <_free_r+0x98>
 801147a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801147e:	9001      	str	r0, [sp, #4]
 8011480:	2b00      	cmp	r3, #0
 8011482:	f1a1 0404 	sub.w	r4, r1, #4
 8011486:	bfb8      	it	lt
 8011488:	18e4      	addlt	r4, r4, r3
 801148a:	f000 ff37 	bl	80122fc <__malloc_lock>
 801148e:	4a20      	ldr	r2, [pc, #128]	; (8011510 <_free_r+0x9c>)
 8011490:	9801      	ldr	r0, [sp, #4]
 8011492:	6813      	ldr	r3, [r2, #0]
 8011494:	4615      	mov	r5, r2
 8011496:	b933      	cbnz	r3, 80114a6 <_free_r+0x32>
 8011498:	6063      	str	r3, [r4, #4]
 801149a:	6014      	str	r4, [r2, #0]
 801149c:	b003      	add	sp, #12
 801149e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114a2:	f000 bf31 	b.w	8012308 <__malloc_unlock>
 80114a6:	42a3      	cmp	r3, r4
 80114a8:	d90b      	bls.n	80114c2 <_free_r+0x4e>
 80114aa:	6821      	ldr	r1, [r4, #0]
 80114ac:	1862      	adds	r2, r4, r1
 80114ae:	4293      	cmp	r3, r2
 80114b0:	bf04      	itt	eq
 80114b2:	681a      	ldreq	r2, [r3, #0]
 80114b4:	685b      	ldreq	r3, [r3, #4]
 80114b6:	6063      	str	r3, [r4, #4]
 80114b8:	bf04      	itt	eq
 80114ba:	1852      	addeq	r2, r2, r1
 80114bc:	6022      	streq	r2, [r4, #0]
 80114be:	602c      	str	r4, [r5, #0]
 80114c0:	e7ec      	b.n	801149c <_free_r+0x28>
 80114c2:	461a      	mov	r2, r3
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	b10b      	cbz	r3, 80114cc <_free_r+0x58>
 80114c8:	42a3      	cmp	r3, r4
 80114ca:	d9fa      	bls.n	80114c2 <_free_r+0x4e>
 80114cc:	6811      	ldr	r1, [r2, #0]
 80114ce:	1855      	adds	r5, r2, r1
 80114d0:	42a5      	cmp	r5, r4
 80114d2:	d10b      	bne.n	80114ec <_free_r+0x78>
 80114d4:	6824      	ldr	r4, [r4, #0]
 80114d6:	4421      	add	r1, r4
 80114d8:	1854      	adds	r4, r2, r1
 80114da:	42a3      	cmp	r3, r4
 80114dc:	6011      	str	r1, [r2, #0]
 80114de:	d1dd      	bne.n	801149c <_free_r+0x28>
 80114e0:	681c      	ldr	r4, [r3, #0]
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	6053      	str	r3, [r2, #4]
 80114e6:	4421      	add	r1, r4
 80114e8:	6011      	str	r1, [r2, #0]
 80114ea:	e7d7      	b.n	801149c <_free_r+0x28>
 80114ec:	d902      	bls.n	80114f4 <_free_r+0x80>
 80114ee:	230c      	movs	r3, #12
 80114f0:	6003      	str	r3, [r0, #0]
 80114f2:	e7d3      	b.n	801149c <_free_r+0x28>
 80114f4:	6825      	ldr	r5, [r4, #0]
 80114f6:	1961      	adds	r1, r4, r5
 80114f8:	428b      	cmp	r3, r1
 80114fa:	bf04      	itt	eq
 80114fc:	6819      	ldreq	r1, [r3, #0]
 80114fe:	685b      	ldreq	r3, [r3, #4]
 8011500:	6063      	str	r3, [r4, #4]
 8011502:	bf04      	itt	eq
 8011504:	1949      	addeq	r1, r1, r5
 8011506:	6021      	streq	r1, [r4, #0]
 8011508:	6054      	str	r4, [r2, #4]
 801150a:	e7c7      	b.n	801149c <_free_r+0x28>
 801150c:	b003      	add	sp, #12
 801150e:	bd30      	pop	{r4, r5, pc}
 8011510:	20009550 	.word	0x20009550

08011514 <_malloc_r>:
 8011514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011516:	1ccd      	adds	r5, r1, #3
 8011518:	f025 0503 	bic.w	r5, r5, #3
 801151c:	3508      	adds	r5, #8
 801151e:	2d0c      	cmp	r5, #12
 8011520:	bf38      	it	cc
 8011522:	250c      	movcc	r5, #12
 8011524:	2d00      	cmp	r5, #0
 8011526:	4606      	mov	r6, r0
 8011528:	db01      	blt.n	801152e <_malloc_r+0x1a>
 801152a:	42a9      	cmp	r1, r5
 801152c:	d903      	bls.n	8011536 <_malloc_r+0x22>
 801152e:	230c      	movs	r3, #12
 8011530:	6033      	str	r3, [r6, #0]
 8011532:	2000      	movs	r0, #0
 8011534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011536:	f000 fee1 	bl	80122fc <__malloc_lock>
 801153a:	4921      	ldr	r1, [pc, #132]	; (80115c0 <_malloc_r+0xac>)
 801153c:	680a      	ldr	r2, [r1, #0]
 801153e:	4614      	mov	r4, r2
 8011540:	b99c      	cbnz	r4, 801156a <_malloc_r+0x56>
 8011542:	4f20      	ldr	r7, [pc, #128]	; (80115c4 <_malloc_r+0xb0>)
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	b923      	cbnz	r3, 8011552 <_malloc_r+0x3e>
 8011548:	4621      	mov	r1, r4
 801154a:	4630      	mov	r0, r6
 801154c:	f000 fcc8 	bl	8011ee0 <_sbrk_r>
 8011550:	6038      	str	r0, [r7, #0]
 8011552:	4629      	mov	r1, r5
 8011554:	4630      	mov	r0, r6
 8011556:	f000 fcc3 	bl	8011ee0 <_sbrk_r>
 801155a:	1c43      	adds	r3, r0, #1
 801155c:	d123      	bne.n	80115a6 <_malloc_r+0x92>
 801155e:	230c      	movs	r3, #12
 8011560:	6033      	str	r3, [r6, #0]
 8011562:	4630      	mov	r0, r6
 8011564:	f000 fed0 	bl	8012308 <__malloc_unlock>
 8011568:	e7e3      	b.n	8011532 <_malloc_r+0x1e>
 801156a:	6823      	ldr	r3, [r4, #0]
 801156c:	1b5b      	subs	r3, r3, r5
 801156e:	d417      	bmi.n	80115a0 <_malloc_r+0x8c>
 8011570:	2b0b      	cmp	r3, #11
 8011572:	d903      	bls.n	801157c <_malloc_r+0x68>
 8011574:	6023      	str	r3, [r4, #0]
 8011576:	441c      	add	r4, r3
 8011578:	6025      	str	r5, [r4, #0]
 801157a:	e004      	b.n	8011586 <_malloc_r+0x72>
 801157c:	6863      	ldr	r3, [r4, #4]
 801157e:	42a2      	cmp	r2, r4
 8011580:	bf0c      	ite	eq
 8011582:	600b      	streq	r3, [r1, #0]
 8011584:	6053      	strne	r3, [r2, #4]
 8011586:	4630      	mov	r0, r6
 8011588:	f000 febe 	bl	8012308 <__malloc_unlock>
 801158c:	f104 000b 	add.w	r0, r4, #11
 8011590:	1d23      	adds	r3, r4, #4
 8011592:	f020 0007 	bic.w	r0, r0, #7
 8011596:	1ac2      	subs	r2, r0, r3
 8011598:	d0cc      	beq.n	8011534 <_malloc_r+0x20>
 801159a:	1a1b      	subs	r3, r3, r0
 801159c:	50a3      	str	r3, [r4, r2]
 801159e:	e7c9      	b.n	8011534 <_malloc_r+0x20>
 80115a0:	4622      	mov	r2, r4
 80115a2:	6864      	ldr	r4, [r4, #4]
 80115a4:	e7cc      	b.n	8011540 <_malloc_r+0x2c>
 80115a6:	1cc4      	adds	r4, r0, #3
 80115a8:	f024 0403 	bic.w	r4, r4, #3
 80115ac:	42a0      	cmp	r0, r4
 80115ae:	d0e3      	beq.n	8011578 <_malloc_r+0x64>
 80115b0:	1a21      	subs	r1, r4, r0
 80115b2:	4630      	mov	r0, r6
 80115b4:	f000 fc94 	bl	8011ee0 <_sbrk_r>
 80115b8:	3001      	adds	r0, #1
 80115ba:	d1dd      	bne.n	8011578 <_malloc_r+0x64>
 80115bc:	e7cf      	b.n	801155e <_malloc_r+0x4a>
 80115be:	bf00      	nop
 80115c0:	20009550 	.word	0x20009550
 80115c4:	20009554 	.word	0x20009554

080115c8 <__sfputc_r>:
 80115c8:	6893      	ldr	r3, [r2, #8]
 80115ca:	3b01      	subs	r3, #1
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	b410      	push	{r4}
 80115d0:	6093      	str	r3, [r2, #8]
 80115d2:	da08      	bge.n	80115e6 <__sfputc_r+0x1e>
 80115d4:	6994      	ldr	r4, [r2, #24]
 80115d6:	42a3      	cmp	r3, r4
 80115d8:	db01      	blt.n	80115de <__sfputc_r+0x16>
 80115da:	290a      	cmp	r1, #10
 80115dc:	d103      	bne.n	80115e6 <__sfputc_r+0x1e>
 80115de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115e2:	f000 bd25 	b.w	8012030 <__swbuf_r>
 80115e6:	6813      	ldr	r3, [r2, #0]
 80115e8:	1c58      	adds	r0, r3, #1
 80115ea:	6010      	str	r0, [r2, #0]
 80115ec:	7019      	strb	r1, [r3, #0]
 80115ee:	4608      	mov	r0, r1
 80115f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115f4:	4770      	bx	lr

080115f6 <__sfputs_r>:
 80115f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115f8:	4606      	mov	r6, r0
 80115fa:	460f      	mov	r7, r1
 80115fc:	4614      	mov	r4, r2
 80115fe:	18d5      	adds	r5, r2, r3
 8011600:	42ac      	cmp	r4, r5
 8011602:	d101      	bne.n	8011608 <__sfputs_r+0x12>
 8011604:	2000      	movs	r0, #0
 8011606:	e007      	b.n	8011618 <__sfputs_r+0x22>
 8011608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801160c:	463a      	mov	r2, r7
 801160e:	4630      	mov	r0, r6
 8011610:	f7ff ffda 	bl	80115c8 <__sfputc_r>
 8011614:	1c43      	adds	r3, r0, #1
 8011616:	d1f3      	bne.n	8011600 <__sfputs_r+0xa>
 8011618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801161c <_vfiprintf_r>:
 801161c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011620:	460d      	mov	r5, r1
 8011622:	b09d      	sub	sp, #116	; 0x74
 8011624:	4614      	mov	r4, r2
 8011626:	4698      	mov	r8, r3
 8011628:	4606      	mov	r6, r0
 801162a:	b118      	cbz	r0, 8011634 <_vfiprintf_r+0x18>
 801162c:	6983      	ldr	r3, [r0, #24]
 801162e:	b90b      	cbnz	r3, 8011634 <_vfiprintf_r+0x18>
 8011630:	f7ff fb46 	bl	8010cc0 <__sinit>
 8011634:	4b89      	ldr	r3, [pc, #548]	; (801185c <_vfiprintf_r+0x240>)
 8011636:	429d      	cmp	r5, r3
 8011638:	d11b      	bne.n	8011672 <_vfiprintf_r+0x56>
 801163a:	6875      	ldr	r5, [r6, #4]
 801163c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801163e:	07d9      	lsls	r1, r3, #31
 8011640:	d405      	bmi.n	801164e <_vfiprintf_r+0x32>
 8011642:	89ab      	ldrh	r3, [r5, #12]
 8011644:	059a      	lsls	r2, r3, #22
 8011646:	d402      	bmi.n	801164e <_vfiprintf_r+0x32>
 8011648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801164a:	f7ff fe87 	bl	801135c <__retarget_lock_acquire_recursive>
 801164e:	89ab      	ldrh	r3, [r5, #12]
 8011650:	071b      	lsls	r3, r3, #28
 8011652:	d501      	bpl.n	8011658 <_vfiprintf_r+0x3c>
 8011654:	692b      	ldr	r3, [r5, #16]
 8011656:	b9eb      	cbnz	r3, 8011694 <_vfiprintf_r+0x78>
 8011658:	4629      	mov	r1, r5
 801165a:	4630      	mov	r0, r6
 801165c:	f000 fd4c 	bl	80120f8 <__swsetup_r>
 8011660:	b1c0      	cbz	r0, 8011694 <_vfiprintf_r+0x78>
 8011662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011664:	07dc      	lsls	r4, r3, #31
 8011666:	d50e      	bpl.n	8011686 <_vfiprintf_r+0x6a>
 8011668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801166c:	b01d      	add	sp, #116	; 0x74
 801166e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011672:	4b7b      	ldr	r3, [pc, #492]	; (8011860 <_vfiprintf_r+0x244>)
 8011674:	429d      	cmp	r5, r3
 8011676:	d101      	bne.n	801167c <_vfiprintf_r+0x60>
 8011678:	68b5      	ldr	r5, [r6, #8]
 801167a:	e7df      	b.n	801163c <_vfiprintf_r+0x20>
 801167c:	4b79      	ldr	r3, [pc, #484]	; (8011864 <_vfiprintf_r+0x248>)
 801167e:	429d      	cmp	r5, r3
 8011680:	bf08      	it	eq
 8011682:	68f5      	ldreq	r5, [r6, #12]
 8011684:	e7da      	b.n	801163c <_vfiprintf_r+0x20>
 8011686:	89ab      	ldrh	r3, [r5, #12]
 8011688:	0598      	lsls	r0, r3, #22
 801168a:	d4ed      	bmi.n	8011668 <_vfiprintf_r+0x4c>
 801168c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801168e:	f7ff fe66 	bl	801135e <__retarget_lock_release_recursive>
 8011692:	e7e9      	b.n	8011668 <_vfiprintf_r+0x4c>
 8011694:	2300      	movs	r3, #0
 8011696:	9309      	str	r3, [sp, #36]	; 0x24
 8011698:	2320      	movs	r3, #32
 801169a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801169e:	f8cd 800c 	str.w	r8, [sp, #12]
 80116a2:	2330      	movs	r3, #48	; 0x30
 80116a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011868 <_vfiprintf_r+0x24c>
 80116a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116ac:	f04f 0901 	mov.w	r9, #1
 80116b0:	4623      	mov	r3, r4
 80116b2:	469a      	mov	sl, r3
 80116b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116b8:	b10a      	cbz	r2, 80116be <_vfiprintf_r+0xa2>
 80116ba:	2a25      	cmp	r2, #37	; 0x25
 80116bc:	d1f9      	bne.n	80116b2 <_vfiprintf_r+0x96>
 80116be:	ebba 0b04 	subs.w	fp, sl, r4
 80116c2:	d00b      	beq.n	80116dc <_vfiprintf_r+0xc0>
 80116c4:	465b      	mov	r3, fp
 80116c6:	4622      	mov	r2, r4
 80116c8:	4629      	mov	r1, r5
 80116ca:	4630      	mov	r0, r6
 80116cc:	f7ff ff93 	bl	80115f6 <__sfputs_r>
 80116d0:	3001      	adds	r0, #1
 80116d2:	f000 80aa 	beq.w	801182a <_vfiprintf_r+0x20e>
 80116d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116d8:	445a      	add	r2, fp
 80116da:	9209      	str	r2, [sp, #36]	; 0x24
 80116dc:	f89a 3000 	ldrb.w	r3, [sl]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f000 80a2 	beq.w	801182a <_vfiprintf_r+0x20e>
 80116e6:	2300      	movs	r3, #0
 80116e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116f0:	f10a 0a01 	add.w	sl, sl, #1
 80116f4:	9304      	str	r3, [sp, #16]
 80116f6:	9307      	str	r3, [sp, #28]
 80116f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80116fc:	931a      	str	r3, [sp, #104]	; 0x68
 80116fe:	4654      	mov	r4, sl
 8011700:	2205      	movs	r2, #5
 8011702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011706:	4858      	ldr	r0, [pc, #352]	; (8011868 <_vfiprintf_r+0x24c>)
 8011708:	f7ee fd9a 	bl	8000240 <memchr>
 801170c:	9a04      	ldr	r2, [sp, #16]
 801170e:	b9d8      	cbnz	r0, 8011748 <_vfiprintf_r+0x12c>
 8011710:	06d1      	lsls	r1, r2, #27
 8011712:	bf44      	itt	mi
 8011714:	2320      	movmi	r3, #32
 8011716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801171a:	0713      	lsls	r3, r2, #28
 801171c:	bf44      	itt	mi
 801171e:	232b      	movmi	r3, #43	; 0x2b
 8011720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011724:	f89a 3000 	ldrb.w	r3, [sl]
 8011728:	2b2a      	cmp	r3, #42	; 0x2a
 801172a:	d015      	beq.n	8011758 <_vfiprintf_r+0x13c>
 801172c:	9a07      	ldr	r2, [sp, #28]
 801172e:	4654      	mov	r4, sl
 8011730:	2000      	movs	r0, #0
 8011732:	f04f 0c0a 	mov.w	ip, #10
 8011736:	4621      	mov	r1, r4
 8011738:	f811 3b01 	ldrb.w	r3, [r1], #1
 801173c:	3b30      	subs	r3, #48	; 0x30
 801173e:	2b09      	cmp	r3, #9
 8011740:	d94e      	bls.n	80117e0 <_vfiprintf_r+0x1c4>
 8011742:	b1b0      	cbz	r0, 8011772 <_vfiprintf_r+0x156>
 8011744:	9207      	str	r2, [sp, #28]
 8011746:	e014      	b.n	8011772 <_vfiprintf_r+0x156>
 8011748:	eba0 0308 	sub.w	r3, r0, r8
 801174c:	fa09 f303 	lsl.w	r3, r9, r3
 8011750:	4313      	orrs	r3, r2
 8011752:	9304      	str	r3, [sp, #16]
 8011754:	46a2      	mov	sl, r4
 8011756:	e7d2      	b.n	80116fe <_vfiprintf_r+0xe2>
 8011758:	9b03      	ldr	r3, [sp, #12]
 801175a:	1d19      	adds	r1, r3, #4
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	9103      	str	r1, [sp, #12]
 8011760:	2b00      	cmp	r3, #0
 8011762:	bfbb      	ittet	lt
 8011764:	425b      	neglt	r3, r3
 8011766:	f042 0202 	orrlt.w	r2, r2, #2
 801176a:	9307      	strge	r3, [sp, #28]
 801176c:	9307      	strlt	r3, [sp, #28]
 801176e:	bfb8      	it	lt
 8011770:	9204      	strlt	r2, [sp, #16]
 8011772:	7823      	ldrb	r3, [r4, #0]
 8011774:	2b2e      	cmp	r3, #46	; 0x2e
 8011776:	d10c      	bne.n	8011792 <_vfiprintf_r+0x176>
 8011778:	7863      	ldrb	r3, [r4, #1]
 801177a:	2b2a      	cmp	r3, #42	; 0x2a
 801177c:	d135      	bne.n	80117ea <_vfiprintf_r+0x1ce>
 801177e:	9b03      	ldr	r3, [sp, #12]
 8011780:	1d1a      	adds	r2, r3, #4
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	9203      	str	r2, [sp, #12]
 8011786:	2b00      	cmp	r3, #0
 8011788:	bfb8      	it	lt
 801178a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801178e:	3402      	adds	r4, #2
 8011790:	9305      	str	r3, [sp, #20]
 8011792:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011878 <_vfiprintf_r+0x25c>
 8011796:	7821      	ldrb	r1, [r4, #0]
 8011798:	2203      	movs	r2, #3
 801179a:	4650      	mov	r0, sl
 801179c:	f7ee fd50 	bl	8000240 <memchr>
 80117a0:	b140      	cbz	r0, 80117b4 <_vfiprintf_r+0x198>
 80117a2:	2340      	movs	r3, #64	; 0x40
 80117a4:	eba0 000a 	sub.w	r0, r0, sl
 80117a8:	fa03 f000 	lsl.w	r0, r3, r0
 80117ac:	9b04      	ldr	r3, [sp, #16]
 80117ae:	4303      	orrs	r3, r0
 80117b0:	3401      	adds	r4, #1
 80117b2:	9304      	str	r3, [sp, #16]
 80117b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117b8:	482c      	ldr	r0, [pc, #176]	; (801186c <_vfiprintf_r+0x250>)
 80117ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117be:	2206      	movs	r2, #6
 80117c0:	f7ee fd3e 	bl	8000240 <memchr>
 80117c4:	2800      	cmp	r0, #0
 80117c6:	d03f      	beq.n	8011848 <_vfiprintf_r+0x22c>
 80117c8:	4b29      	ldr	r3, [pc, #164]	; (8011870 <_vfiprintf_r+0x254>)
 80117ca:	bb1b      	cbnz	r3, 8011814 <_vfiprintf_r+0x1f8>
 80117cc:	9b03      	ldr	r3, [sp, #12]
 80117ce:	3307      	adds	r3, #7
 80117d0:	f023 0307 	bic.w	r3, r3, #7
 80117d4:	3308      	adds	r3, #8
 80117d6:	9303      	str	r3, [sp, #12]
 80117d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117da:	443b      	add	r3, r7
 80117dc:	9309      	str	r3, [sp, #36]	; 0x24
 80117de:	e767      	b.n	80116b0 <_vfiprintf_r+0x94>
 80117e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80117e4:	460c      	mov	r4, r1
 80117e6:	2001      	movs	r0, #1
 80117e8:	e7a5      	b.n	8011736 <_vfiprintf_r+0x11a>
 80117ea:	2300      	movs	r3, #0
 80117ec:	3401      	adds	r4, #1
 80117ee:	9305      	str	r3, [sp, #20]
 80117f0:	4619      	mov	r1, r3
 80117f2:	f04f 0c0a 	mov.w	ip, #10
 80117f6:	4620      	mov	r0, r4
 80117f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117fc:	3a30      	subs	r2, #48	; 0x30
 80117fe:	2a09      	cmp	r2, #9
 8011800:	d903      	bls.n	801180a <_vfiprintf_r+0x1ee>
 8011802:	2b00      	cmp	r3, #0
 8011804:	d0c5      	beq.n	8011792 <_vfiprintf_r+0x176>
 8011806:	9105      	str	r1, [sp, #20]
 8011808:	e7c3      	b.n	8011792 <_vfiprintf_r+0x176>
 801180a:	fb0c 2101 	mla	r1, ip, r1, r2
 801180e:	4604      	mov	r4, r0
 8011810:	2301      	movs	r3, #1
 8011812:	e7f0      	b.n	80117f6 <_vfiprintf_r+0x1da>
 8011814:	ab03      	add	r3, sp, #12
 8011816:	9300      	str	r3, [sp, #0]
 8011818:	462a      	mov	r2, r5
 801181a:	4b16      	ldr	r3, [pc, #88]	; (8011874 <_vfiprintf_r+0x258>)
 801181c:	a904      	add	r1, sp, #16
 801181e:	4630      	mov	r0, r6
 8011820:	f3af 8000 	nop.w
 8011824:	4607      	mov	r7, r0
 8011826:	1c78      	adds	r0, r7, #1
 8011828:	d1d6      	bne.n	80117d8 <_vfiprintf_r+0x1bc>
 801182a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801182c:	07d9      	lsls	r1, r3, #31
 801182e:	d405      	bmi.n	801183c <_vfiprintf_r+0x220>
 8011830:	89ab      	ldrh	r3, [r5, #12]
 8011832:	059a      	lsls	r2, r3, #22
 8011834:	d402      	bmi.n	801183c <_vfiprintf_r+0x220>
 8011836:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011838:	f7ff fd91 	bl	801135e <__retarget_lock_release_recursive>
 801183c:	89ab      	ldrh	r3, [r5, #12]
 801183e:	065b      	lsls	r3, r3, #25
 8011840:	f53f af12 	bmi.w	8011668 <_vfiprintf_r+0x4c>
 8011844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011846:	e711      	b.n	801166c <_vfiprintf_r+0x50>
 8011848:	ab03      	add	r3, sp, #12
 801184a:	9300      	str	r3, [sp, #0]
 801184c:	462a      	mov	r2, r5
 801184e:	4b09      	ldr	r3, [pc, #36]	; (8011874 <_vfiprintf_r+0x258>)
 8011850:	a904      	add	r1, sp, #16
 8011852:	4630      	mov	r0, r6
 8011854:	f000 f880 	bl	8011958 <_printf_i>
 8011858:	e7e4      	b.n	8011824 <_vfiprintf_r+0x208>
 801185a:	bf00      	nop
 801185c:	08012f5c 	.word	0x08012f5c
 8011860:	08012f7c 	.word	0x08012f7c
 8011864:	08012f3c 	.word	0x08012f3c
 8011868:	08012fa0 	.word	0x08012fa0
 801186c:	08012faa 	.word	0x08012faa
 8011870:	00000000 	.word	0x00000000
 8011874:	080115f7 	.word	0x080115f7
 8011878:	08012fa6 	.word	0x08012fa6

0801187c <_printf_common>:
 801187c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011880:	4616      	mov	r6, r2
 8011882:	4699      	mov	r9, r3
 8011884:	688a      	ldr	r2, [r1, #8]
 8011886:	690b      	ldr	r3, [r1, #16]
 8011888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801188c:	4293      	cmp	r3, r2
 801188e:	bfb8      	it	lt
 8011890:	4613      	movlt	r3, r2
 8011892:	6033      	str	r3, [r6, #0]
 8011894:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011898:	4607      	mov	r7, r0
 801189a:	460c      	mov	r4, r1
 801189c:	b10a      	cbz	r2, 80118a2 <_printf_common+0x26>
 801189e:	3301      	adds	r3, #1
 80118a0:	6033      	str	r3, [r6, #0]
 80118a2:	6823      	ldr	r3, [r4, #0]
 80118a4:	0699      	lsls	r1, r3, #26
 80118a6:	bf42      	ittt	mi
 80118a8:	6833      	ldrmi	r3, [r6, #0]
 80118aa:	3302      	addmi	r3, #2
 80118ac:	6033      	strmi	r3, [r6, #0]
 80118ae:	6825      	ldr	r5, [r4, #0]
 80118b0:	f015 0506 	ands.w	r5, r5, #6
 80118b4:	d106      	bne.n	80118c4 <_printf_common+0x48>
 80118b6:	f104 0a19 	add.w	sl, r4, #25
 80118ba:	68e3      	ldr	r3, [r4, #12]
 80118bc:	6832      	ldr	r2, [r6, #0]
 80118be:	1a9b      	subs	r3, r3, r2
 80118c0:	42ab      	cmp	r3, r5
 80118c2:	dc26      	bgt.n	8011912 <_printf_common+0x96>
 80118c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80118c8:	1e13      	subs	r3, r2, #0
 80118ca:	6822      	ldr	r2, [r4, #0]
 80118cc:	bf18      	it	ne
 80118ce:	2301      	movne	r3, #1
 80118d0:	0692      	lsls	r2, r2, #26
 80118d2:	d42b      	bmi.n	801192c <_printf_common+0xb0>
 80118d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80118d8:	4649      	mov	r1, r9
 80118da:	4638      	mov	r0, r7
 80118dc:	47c0      	blx	r8
 80118de:	3001      	adds	r0, #1
 80118e0:	d01e      	beq.n	8011920 <_printf_common+0xa4>
 80118e2:	6823      	ldr	r3, [r4, #0]
 80118e4:	68e5      	ldr	r5, [r4, #12]
 80118e6:	6832      	ldr	r2, [r6, #0]
 80118e8:	f003 0306 	and.w	r3, r3, #6
 80118ec:	2b04      	cmp	r3, #4
 80118ee:	bf08      	it	eq
 80118f0:	1aad      	subeq	r5, r5, r2
 80118f2:	68a3      	ldr	r3, [r4, #8]
 80118f4:	6922      	ldr	r2, [r4, #16]
 80118f6:	bf0c      	ite	eq
 80118f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80118fc:	2500      	movne	r5, #0
 80118fe:	4293      	cmp	r3, r2
 8011900:	bfc4      	itt	gt
 8011902:	1a9b      	subgt	r3, r3, r2
 8011904:	18ed      	addgt	r5, r5, r3
 8011906:	2600      	movs	r6, #0
 8011908:	341a      	adds	r4, #26
 801190a:	42b5      	cmp	r5, r6
 801190c:	d11a      	bne.n	8011944 <_printf_common+0xc8>
 801190e:	2000      	movs	r0, #0
 8011910:	e008      	b.n	8011924 <_printf_common+0xa8>
 8011912:	2301      	movs	r3, #1
 8011914:	4652      	mov	r2, sl
 8011916:	4649      	mov	r1, r9
 8011918:	4638      	mov	r0, r7
 801191a:	47c0      	blx	r8
 801191c:	3001      	adds	r0, #1
 801191e:	d103      	bne.n	8011928 <_printf_common+0xac>
 8011920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011928:	3501      	adds	r5, #1
 801192a:	e7c6      	b.n	80118ba <_printf_common+0x3e>
 801192c:	18e1      	adds	r1, r4, r3
 801192e:	1c5a      	adds	r2, r3, #1
 8011930:	2030      	movs	r0, #48	; 0x30
 8011932:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011936:	4422      	add	r2, r4
 8011938:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801193c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011940:	3302      	adds	r3, #2
 8011942:	e7c7      	b.n	80118d4 <_printf_common+0x58>
 8011944:	2301      	movs	r3, #1
 8011946:	4622      	mov	r2, r4
 8011948:	4649      	mov	r1, r9
 801194a:	4638      	mov	r0, r7
 801194c:	47c0      	blx	r8
 801194e:	3001      	adds	r0, #1
 8011950:	d0e6      	beq.n	8011920 <_printf_common+0xa4>
 8011952:	3601      	adds	r6, #1
 8011954:	e7d9      	b.n	801190a <_printf_common+0x8e>
	...

08011958 <_printf_i>:
 8011958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801195c:	460c      	mov	r4, r1
 801195e:	4691      	mov	r9, r2
 8011960:	7e27      	ldrb	r7, [r4, #24]
 8011962:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011964:	2f78      	cmp	r7, #120	; 0x78
 8011966:	4680      	mov	r8, r0
 8011968:	469a      	mov	sl, r3
 801196a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801196e:	d807      	bhi.n	8011980 <_printf_i+0x28>
 8011970:	2f62      	cmp	r7, #98	; 0x62
 8011972:	d80a      	bhi.n	801198a <_printf_i+0x32>
 8011974:	2f00      	cmp	r7, #0
 8011976:	f000 80d8 	beq.w	8011b2a <_printf_i+0x1d2>
 801197a:	2f58      	cmp	r7, #88	; 0x58
 801197c:	f000 80a3 	beq.w	8011ac6 <_printf_i+0x16e>
 8011980:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011988:	e03a      	b.n	8011a00 <_printf_i+0xa8>
 801198a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801198e:	2b15      	cmp	r3, #21
 8011990:	d8f6      	bhi.n	8011980 <_printf_i+0x28>
 8011992:	a001      	add	r0, pc, #4	; (adr r0, 8011998 <_printf_i+0x40>)
 8011994:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011998:	080119f1 	.word	0x080119f1
 801199c:	08011a05 	.word	0x08011a05
 80119a0:	08011981 	.word	0x08011981
 80119a4:	08011981 	.word	0x08011981
 80119a8:	08011981 	.word	0x08011981
 80119ac:	08011981 	.word	0x08011981
 80119b0:	08011a05 	.word	0x08011a05
 80119b4:	08011981 	.word	0x08011981
 80119b8:	08011981 	.word	0x08011981
 80119bc:	08011981 	.word	0x08011981
 80119c0:	08011981 	.word	0x08011981
 80119c4:	08011b11 	.word	0x08011b11
 80119c8:	08011a35 	.word	0x08011a35
 80119cc:	08011af3 	.word	0x08011af3
 80119d0:	08011981 	.word	0x08011981
 80119d4:	08011981 	.word	0x08011981
 80119d8:	08011b33 	.word	0x08011b33
 80119dc:	08011981 	.word	0x08011981
 80119e0:	08011a35 	.word	0x08011a35
 80119e4:	08011981 	.word	0x08011981
 80119e8:	08011981 	.word	0x08011981
 80119ec:	08011afb 	.word	0x08011afb
 80119f0:	680b      	ldr	r3, [r1, #0]
 80119f2:	1d1a      	adds	r2, r3, #4
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	600a      	str	r2, [r1, #0]
 80119f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80119fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011a00:	2301      	movs	r3, #1
 8011a02:	e0a3      	b.n	8011b4c <_printf_i+0x1f4>
 8011a04:	6825      	ldr	r5, [r4, #0]
 8011a06:	6808      	ldr	r0, [r1, #0]
 8011a08:	062e      	lsls	r6, r5, #24
 8011a0a:	f100 0304 	add.w	r3, r0, #4
 8011a0e:	d50a      	bpl.n	8011a26 <_printf_i+0xce>
 8011a10:	6805      	ldr	r5, [r0, #0]
 8011a12:	600b      	str	r3, [r1, #0]
 8011a14:	2d00      	cmp	r5, #0
 8011a16:	da03      	bge.n	8011a20 <_printf_i+0xc8>
 8011a18:	232d      	movs	r3, #45	; 0x2d
 8011a1a:	426d      	negs	r5, r5
 8011a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a20:	485e      	ldr	r0, [pc, #376]	; (8011b9c <_printf_i+0x244>)
 8011a22:	230a      	movs	r3, #10
 8011a24:	e019      	b.n	8011a5a <_printf_i+0x102>
 8011a26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011a2a:	6805      	ldr	r5, [r0, #0]
 8011a2c:	600b      	str	r3, [r1, #0]
 8011a2e:	bf18      	it	ne
 8011a30:	b22d      	sxthne	r5, r5
 8011a32:	e7ef      	b.n	8011a14 <_printf_i+0xbc>
 8011a34:	680b      	ldr	r3, [r1, #0]
 8011a36:	6825      	ldr	r5, [r4, #0]
 8011a38:	1d18      	adds	r0, r3, #4
 8011a3a:	6008      	str	r0, [r1, #0]
 8011a3c:	0628      	lsls	r0, r5, #24
 8011a3e:	d501      	bpl.n	8011a44 <_printf_i+0xec>
 8011a40:	681d      	ldr	r5, [r3, #0]
 8011a42:	e002      	b.n	8011a4a <_printf_i+0xf2>
 8011a44:	0669      	lsls	r1, r5, #25
 8011a46:	d5fb      	bpl.n	8011a40 <_printf_i+0xe8>
 8011a48:	881d      	ldrh	r5, [r3, #0]
 8011a4a:	4854      	ldr	r0, [pc, #336]	; (8011b9c <_printf_i+0x244>)
 8011a4c:	2f6f      	cmp	r7, #111	; 0x6f
 8011a4e:	bf0c      	ite	eq
 8011a50:	2308      	moveq	r3, #8
 8011a52:	230a      	movne	r3, #10
 8011a54:	2100      	movs	r1, #0
 8011a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a5a:	6866      	ldr	r6, [r4, #4]
 8011a5c:	60a6      	str	r6, [r4, #8]
 8011a5e:	2e00      	cmp	r6, #0
 8011a60:	bfa2      	ittt	ge
 8011a62:	6821      	ldrge	r1, [r4, #0]
 8011a64:	f021 0104 	bicge.w	r1, r1, #4
 8011a68:	6021      	strge	r1, [r4, #0]
 8011a6a:	b90d      	cbnz	r5, 8011a70 <_printf_i+0x118>
 8011a6c:	2e00      	cmp	r6, #0
 8011a6e:	d04d      	beq.n	8011b0c <_printf_i+0x1b4>
 8011a70:	4616      	mov	r6, r2
 8011a72:	fbb5 f1f3 	udiv	r1, r5, r3
 8011a76:	fb03 5711 	mls	r7, r3, r1, r5
 8011a7a:	5dc7      	ldrb	r7, [r0, r7]
 8011a7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011a80:	462f      	mov	r7, r5
 8011a82:	42bb      	cmp	r3, r7
 8011a84:	460d      	mov	r5, r1
 8011a86:	d9f4      	bls.n	8011a72 <_printf_i+0x11a>
 8011a88:	2b08      	cmp	r3, #8
 8011a8a:	d10b      	bne.n	8011aa4 <_printf_i+0x14c>
 8011a8c:	6823      	ldr	r3, [r4, #0]
 8011a8e:	07df      	lsls	r7, r3, #31
 8011a90:	d508      	bpl.n	8011aa4 <_printf_i+0x14c>
 8011a92:	6923      	ldr	r3, [r4, #16]
 8011a94:	6861      	ldr	r1, [r4, #4]
 8011a96:	4299      	cmp	r1, r3
 8011a98:	bfde      	ittt	le
 8011a9a:	2330      	movle	r3, #48	; 0x30
 8011a9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011aa0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8011aa4:	1b92      	subs	r2, r2, r6
 8011aa6:	6122      	str	r2, [r4, #16]
 8011aa8:	f8cd a000 	str.w	sl, [sp]
 8011aac:	464b      	mov	r3, r9
 8011aae:	aa03      	add	r2, sp, #12
 8011ab0:	4621      	mov	r1, r4
 8011ab2:	4640      	mov	r0, r8
 8011ab4:	f7ff fee2 	bl	801187c <_printf_common>
 8011ab8:	3001      	adds	r0, #1
 8011aba:	d14c      	bne.n	8011b56 <_printf_i+0x1fe>
 8011abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ac0:	b004      	add	sp, #16
 8011ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ac6:	4835      	ldr	r0, [pc, #212]	; (8011b9c <_printf_i+0x244>)
 8011ac8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011acc:	6823      	ldr	r3, [r4, #0]
 8011ace:	680e      	ldr	r6, [r1, #0]
 8011ad0:	061f      	lsls	r7, r3, #24
 8011ad2:	f856 5b04 	ldr.w	r5, [r6], #4
 8011ad6:	600e      	str	r6, [r1, #0]
 8011ad8:	d514      	bpl.n	8011b04 <_printf_i+0x1ac>
 8011ada:	07d9      	lsls	r1, r3, #31
 8011adc:	bf44      	itt	mi
 8011ade:	f043 0320 	orrmi.w	r3, r3, #32
 8011ae2:	6023      	strmi	r3, [r4, #0]
 8011ae4:	b91d      	cbnz	r5, 8011aee <_printf_i+0x196>
 8011ae6:	6823      	ldr	r3, [r4, #0]
 8011ae8:	f023 0320 	bic.w	r3, r3, #32
 8011aec:	6023      	str	r3, [r4, #0]
 8011aee:	2310      	movs	r3, #16
 8011af0:	e7b0      	b.n	8011a54 <_printf_i+0xfc>
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	f043 0320 	orr.w	r3, r3, #32
 8011af8:	6023      	str	r3, [r4, #0]
 8011afa:	2378      	movs	r3, #120	; 0x78
 8011afc:	4828      	ldr	r0, [pc, #160]	; (8011ba0 <_printf_i+0x248>)
 8011afe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011b02:	e7e3      	b.n	8011acc <_printf_i+0x174>
 8011b04:	065e      	lsls	r6, r3, #25
 8011b06:	bf48      	it	mi
 8011b08:	b2ad      	uxthmi	r5, r5
 8011b0a:	e7e6      	b.n	8011ada <_printf_i+0x182>
 8011b0c:	4616      	mov	r6, r2
 8011b0e:	e7bb      	b.n	8011a88 <_printf_i+0x130>
 8011b10:	680b      	ldr	r3, [r1, #0]
 8011b12:	6826      	ldr	r6, [r4, #0]
 8011b14:	6960      	ldr	r0, [r4, #20]
 8011b16:	1d1d      	adds	r5, r3, #4
 8011b18:	600d      	str	r5, [r1, #0]
 8011b1a:	0635      	lsls	r5, r6, #24
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	d501      	bpl.n	8011b24 <_printf_i+0x1cc>
 8011b20:	6018      	str	r0, [r3, #0]
 8011b22:	e002      	b.n	8011b2a <_printf_i+0x1d2>
 8011b24:	0671      	lsls	r1, r6, #25
 8011b26:	d5fb      	bpl.n	8011b20 <_printf_i+0x1c8>
 8011b28:	8018      	strh	r0, [r3, #0]
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	6123      	str	r3, [r4, #16]
 8011b2e:	4616      	mov	r6, r2
 8011b30:	e7ba      	b.n	8011aa8 <_printf_i+0x150>
 8011b32:	680b      	ldr	r3, [r1, #0]
 8011b34:	1d1a      	adds	r2, r3, #4
 8011b36:	600a      	str	r2, [r1, #0]
 8011b38:	681e      	ldr	r6, [r3, #0]
 8011b3a:	6862      	ldr	r2, [r4, #4]
 8011b3c:	2100      	movs	r1, #0
 8011b3e:	4630      	mov	r0, r6
 8011b40:	f7ee fb7e 	bl	8000240 <memchr>
 8011b44:	b108      	cbz	r0, 8011b4a <_printf_i+0x1f2>
 8011b46:	1b80      	subs	r0, r0, r6
 8011b48:	6060      	str	r0, [r4, #4]
 8011b4a:	6863      	ldr	r3, [r4, #4]
 8011b4c:	6123      	str	r3, [r4, #16]
 8011b4e:	2300      	movs	r3, #0
 8011b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b54:	e7a8      	b.n	8011aa8 <_printf_i+0x150>
 8011b56:	6923      	ldr	r3, [r4, #16]
 8011b58:	4632      	mov	r2, r6
 8011b5a:	4649      	mov	r1, r9
 8011b5c:	4640      	mov	r0, r8
 8011b5e:	47d0      	blx	sl
 8011b60:	3001      	adds	r0, #1
 8011b62:	d0ab      	beq.n	8011abc <_printf_i+0x164>
 8011b64:	6823      	ldr	r3, [r4, #0]
 8011b66:	079b      	lsls	r3, r3, #30
 8011b68:	d413      	bmi.n	8011b92 <_printf_i+0x23a>
 8011b6a:	68e0      	ldr	r0, [r4, #12]
 8011b6c:	9b03      	ldr	r3, [sp, #12]
 8011b6e:	4298      	cmp	r0, r3
 8011b70:	bfb8      	it	lt
 8011b72:	4618      	movlt	r0, r3
 8011b74:	e7a4      	b.n	8011ac0 <_printf_i+0x168>
 8011b76:	2301      	movs	r3, #1
 8011b78:	4632      	mov	r2, r6
 8011b7a:	4649      	mov	r1, r9
 8011b7c:	4640      	mov	r0, r8
 8011b7e:	47d0      	blx	sl
 8011b80:	3001      	adds	r0, #1
 8011b82:	d09b      	beq.n	8011abc <_printf_i+0x164>
 8011b84:	3501      	adds	r5, #1
 8011b86:	68e3      	ldr	r3, [r4, #12]
 8011b88:	9903      	ldr	r1, [sp, #12]
 8011b8a:	1a5b      	subs	r3, r3, r1
 8011b8c:	42ab      	cmp	r3, r5
 8011b8e:	dcf2      	bgt.n	8011b76 <_printf_i+0x21e>
 8011b90:	e7eb      	b.n	8011b6a <_printf_i+0x212>
 8011b92:	2500      	movs	r5, #0
 8011b94:	f104 0619 	add.w	r6, r4, #25
 8011b98:	e7f5      	b.n	8011b86 <_printf_i+0x22e>
 8011b9a:	bf00      	nop
 8011b9c:	08012fb1 	.word	0x08012fb1
 8011ba0:	08012fc2 	.word	0x08012fc2

08011ba4 <_open_r>:
 8011ba4:	b538      	push	{r3, r4, r5, lr}
 8011ba6:	4d07      	ldr	r5, [pc, #28]	; (8011bc4 <_open_r+0x20>)
 8011ba8:	4604      	mov	r4, r0
 8011baa:	4608      	mov	r0, r1
 8011bac:	4611      	mov	r1, r2
 8011bae:	2200      	movs	r2, #0
 8011bb0:	602a      	str	r2, [r5, #0]
 8011bb2:	461a      	mov	r2, r3
 8011bb4:	f7f3 ff5f 	bl	8005a76 <_open>
 8011bb8:	1c43      	adds	r3, r0, #1
 8011bba:	d102      	bne.n	8011bc2 <_open_r+0x1e>
 8011bbc:	682b      	ldr	r3, [r5, #0]
 8011bbe:	b103      	cbz	r3, 8011bc2 <_open_r+0x1e>
 8011bc0:	6023      	str	r3, [r4, #0]
 8011bc2:	bd38      	pop	{r3, r4, r5, pc}
 8011bc4:	20009c60 	.word	0x20009c60

08011bc8 <iprintf>:
 8011bc8:	b40f      	push	{r0, r1, r2, r3}
 8011bca:	4b0a      	ldr	r3, [pc, #40]	; (8011bf4 <iprintf+0x2c>)
 8011bcc:	b513      	push	{r0, r1, r4, lr}
 8011bce:	681c      	ldr	r4, [r3, #0]
 8011bd0:	b124      	cbz	r4, 8011bdc <iprintf+0x14>
 8011bd2:	69a3      	ldr	r3, [r4, #24]
 8011bd4:	b913      	cbnz	r3, 8011bdc <iprintf+0x14>
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	f7ff f872 	bl	8010cc0 <__sinit>
 8011bdc:	ab05      	add	r3, sp, #20
 8011bde:	9a04      	ldr	r2, [sp, #16]
 8011be0:	68a1      	ldr	r1, [r4, #8]
 8011be2:	9301      	str	r3, [sp, #4]
 8011be4:	4620      	mov	r0, r4
 8011be6:	f7ff fd19 	bl	801161c <_vfiprintf_r>
 8011bea:	b002      	add	sp, #8
 8011bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bf0:	b004      	add	sp, #16
 8011bf2:	4770      	bx	lr
 8011bf4:	200009dc 	.word	0x200009dc

08011bf8 <_puts_r>:
 8011bf8:	b570      	push	{r4, r5, r6, lr}
 8011bfa:	460e      	mov	r6, r1
 8011bfc:	4605      	mov	r5, r0
 8011bfe:	b118      	cbz	r0, 8011c08 <_puts_r+0x10>
 8011c00:	6983      	ldr	r3, [r0, #24]
 8011c02:	b90b      	cbnz	r3, 8011c08 <_puts_r+0x10>
 8011c04:	f7ff f85c 	bl	8010cc0 <__sinit>
 8011c08:	69ab      	ldr	r3, [r5, #24]
 8011c0a:	68ac      	ldr	r4, [r5, #8]
 8011c0c:	b913      	cbnz	r3, 8011c14 <_puts_r+0x1c>
 8011c0e:	4628      	mov	r0, r5
 8011c10:	f7ff f856 	bl	8010cc0 <__sinit>
 8011c14:	4b2c      	ldr	r3, [pc, #176]	; (8011cc8 <_puts_r+0xd0>)
 8011c16:	429c      	cmp	r4, r3
 8011c18:	d120      	bne.n	8011c5c <_puts_r+0x64>
 8011c1a:	686c      	ldr	r4, [r5, #4]
 8011c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c1e:	07db      	lsls	r3, r3, #31
 8011c20:	d405      	bmi.n	8011c2e <_puts_r+0x36>
 8011c22:	89a3      	ldrh	r3, [r4, #12]
 8011c24:	0598      	lsls	r0, r3, #22
 8011c26:	d402      	bmi.n	8011c2e <_puts_r+0x36>
 8011c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c2a:	f7ff fb97 	bl	801135c <__retarget_lock_acquire_recursive>
 8011c2e:	89a3      	ldrh	r3, [r4, #12]
 8011c30:	0719      	lsls	r1, r3, #28
 8011c32:	d51d      	bpl.n	8011c70 <_puts_r+0x78>
 8011c34:	6923      	ldr	r3, [r4, #16]
 8011c36:	b1db      	cbz	r3, 8011c70 <_puts_r+0x78>
 8011c38:	3e01      	subs	r6, #1
 8011c3a:	68a3      	ldr	r3, [r4, #8]
 8011c3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011c40:	3b01      	subs	r3, #1
 8011c42:	60a3      	str	r3, [r4, #8]
 8011c44:	bb39      	cbnz	r1, 8011c96 <_puts_r+0x9e>
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	da38      	bge.n	8011cbc <_puts_r+0xc4>
 8011c4a:	4622      	mov	r2, r4
 8011c4c:	210a      	movs	r1, #10
 8011c4e:	4628      	mov	r0, r5
 8011c50:	f000 f9ee 	bl	8012030 <__swbuf_r>
 8011c54:	3001      	adds	r0, #1
 8011c56:	d011      	beq.n	8011c7c <_puts_r+0x84>
 8011c58:	250a      	movs	r5, #10
 8011c5a:	e011      	b.n	8011c80 <_puts_r+0x88>
 8011c5c:	4b1b      	ldr	r3, [pc, #108]	; (8011ccc <_puts_r+0xd4>)
 8011c5e:	429c      	cmp	r4, r3
 8011c60:	d101      	bne.n	8011c66 <_puts_r+0x6e>
 8011c62:	68ac      	ldr	r4, [r5, #8]
 8011c64:	e7da      	b.n	8011c1c <_puts_r+0x24>
 8011c66:	4b1a      	ldr	r3, [pc, #104]	; (8011cd0 <_puts_r+0xd8>)
 8011c68:	429c      	cmp	r4, r3
 8011c6a:	bf08      	it	eq
 8011c6c:	68ec      	ldreq	r4, [r5, #12]
 8011c6e:	e7d5      	b.n	8011c1c <_puts_r+0x24>
 8011c70:	4621      	mov	r1, r4
 8011c72:	4628      	mov	r0, r5
 8011c74:	f000 fa40 	bl	80120f8 <__swsetup_r>
 8011c78:	2800      	cmp	r0, #0
 8011c7a:	d0dd      	beq.n	8011c38 <_puts_r+0x40>
 8011c7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c82:	07da      	lsls	r2, r3, #31
 8011c84:	d405      	bmi.n	8011c92 <_puts_r+0x9a>
 8011c86:	89a3      	ldrh	r3, [r4, #12]
 8011c88:	059b      	lsls	r3, r3, #22
 8011c8a:	d402      	bmi.n	8011c92 <_puts_r+0x9a>
 8011c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c8e:	f7ff fb66 	bl	801135e <__retarget_lock_release_recursive>
 8011c92:	4628      	mov	r0, r5
 8011c94:	bd70      	pop	{r4, r5, r6, pc}
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	da04      	bge.n	8011ca4 <_puts_r+0xac>
 8011c9a:	69a2      	ldr	r2, [r4, #24]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	dc06      	bgt.n	8011cae <_puts_r+0xb6>
 8011ca0:	290a      	cmp	r1, #10
 8011ca2:	d004      	beq.n	8011cae <_puts_r+0xb6>
 8011ca4:	6823      	ldr	r3, [r4, #0]
 8011ca6:	1c5a      	adds	r2, r3, #1
 8011ca8:	6022      	str	r2, [r4, #0]
 8011caa:	7019      	strb	r1, [r3, #0]
 8011cac:	e7c5      	b.n	8011c3a <_puts_r+0x42>
 8011cae:	4622      	mov	r2, r4
 8011cb0:	4628      	mov	r0, r5
 8011cb2:	f000 f9bd 	bl	8012030 <__swbuf_r>
 8011cb6:	3001      	adds	r0, #1
 8011cb8:	d1bf      	bne.n	8011c3a <_puts_r+0x42>
 8011cba:	e7df      	b.n	8011c7c <_puts_r+0x84>
 8011cbc:	6823      	ldr	r3, [r4, #0]
 8011cbe:	250a      	movs	r5, #10
 8011cc0:	1c5a      	adds	r2, r3, #1
 8011cc2:	6022      	str	r2, [r4, #0]
 8011cc4:	701d      	strb	r5, [r3, #0]
 8011cc6:	e7db      	b.n	8011c80 <_puts_r+0x88>
 8011cc8:	08012f5c 	.word	0x08012f5c
 8011ccc:	08012f7c 	.word	0x08012f7c
 8011cd0:	08012f3c 	.word	0x08012f3c

08011cd4 <puts>:
 8011cd4:	4b02      	ldr	r3, [pc, #8]	; (8011ce0 <puts+0xc>)
 8011cd6:	4601      	mov	r1, r0
 8011cd8:	6818      	ldr	r0, [r3, #0]
 8011cda:	f7ff bf8d 	b.w	8011bf8 <_puts_r>
 8011cde:	bf00      	nop
 8011ce0:	200009dc 	.word	0x200009dc

08011ce4 <cleanup_glue>:
 8011ce4:	b538      	push	{r3, r4, r5, lr}
 8011ce6:	460c      	mov	r4, r1
 8011ce8:	6809      	ldr	r1, [r1, #0]
 8011cea:	4605      	mov	r5, r0
 8011cec:	b109      	cbz	r1, 8011cf2 <cleanup_glue+0xe>
 8011cee:	f7ff fff9 	bl	8011ce4 <cleanup_glue>
 8011cf2:	4621      	mov	r1, r4
 8011cf4:	4628      	mov	r0, r5
 8011cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cfa:	f7ff bbbb 	b.w	8011474 <_free_r>
	...

08011d00 <_reclaim_reent>:
 8011d00:	4b2c      	ldr	r3, [pc, #176]	; (8011db4 <_reclaim_reent+0xb4>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	4283      	cmp	r3, r0
 8011d06:	b570      	push	{r4, r5, r6, lr}
 8011d08:	4604      	mov	r4, r0
 8011d0a:	d051      	beq.n	8011db0 <_reclaim_reent+0xb0>
 8011d0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011d0e:	b143      	cbz	r3, 8011d22 <_reclaim_reent+0x22>
 8011d10:	68db      	ldr	r3, [r3, #12]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d14a      	bne.n	8011dac <_reclaim_reent+0xac>
 8011d16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d18:	6819      	ldr	r1, [r3, #0]
 8011d1a:	b111      	cbz	r1, 8011d22 <_reclaim_reent+0x22>
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	f7ff fba9 	bl	8011474 <_free_r>
 8011d22:	6961      	ldr	r1, [r4, #20]
 8011d24:	b111      	cbz	r1, 8011d2c <_reclaim_reent+0x2c>
 8011d26:	4620      	mov	r0, r4
 8011d28:	f7ff fba4 	bl	8011474 <_free_r>
 8011d2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011d2e:	b111      	cbz	r1, 8011d36 <_reclaim_reent+0x36>
 8011d30:	4620      	mov	r0, r4
 8011d32:	f7ff fb9f 	bl	8011474 <_free_r>
 8011d36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011d38:	b111      	cbz	r1, 8011d40 <_reclaim_reent+0x40>
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	f7ff fb9a 	bl	8011474 <_free_r>
 8011d40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011d42:	b111      	cbz	r1, 8011d4a <_reclaim_reent+0x4a>
 8011d44:	4620      	mov	r0, r4
 8011d46:	f7ff fb95 	bl	8011474 <_free_r>
 8011d4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011d4c:	b111      	cbz	r1, 8011d54 <_reclaim_reent+0x54>
 8011d4e:	4620      	mov	r0, r4
 8011d50:	f7ff fb90 	bl	8011474 <_free_r>
 8011d54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011d56:	b111      	cbz	r1, 8011d5e <_reclaim_reent+0x5e>
 8011d58:	4620      	mov	r0, r4
 8011d5a:	f7ff fb8b 	bl	8011474 <_free_r>
 8011d5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011d60:	b111      	cbz	r1, 8011d68 <_reclaim_reent+0x68>
 8011d62:	4620      	mov	r0, r4
 8011d64:	f7ff fb86 	bl	8011474 <_free_r>
 8011d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d6a:	b111      	cbz	r1, 8011d72 <_reclaim_reent+0x72>
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	f7ff fb81 	bl	8011474 <_free_r>
 8011d72:	69a3      	ldr	r3, [r4, #24]
 8011d74:	b1e3      	cbz	r3, 8011db0 <_reclaim_reent+0xb0>
 8011d76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011d78:	4620      	mov	r0, r4
 8011d7a:	4798      	blx	r3
 8011d7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011d7e:	b1b9      	cbz	r1, 8011db0 <_reclaim_reent+0xb0>
 8011d80:	4620      	mov	r0, r4
 8011d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d86:	f7ff bfad 	b.w	8011ce4 <cleanup_glue>
 8011d8a:	5949      	ldr	r1, [r1, r5]
 8011d8c:	b941      	cbnz	r1, 8011da0 <_reclaim_reent+0xa0>
 8011d8e:	3504      	adds	r5, #4
 8011d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d92:	2d80      	cmp	r5, #128	; 0x80
 8011d94:	68d9      	ldr	r1, [r3, #12]
 8011d96:	d1f8      	bne.n	8011d8a <_reclaim_reent+0x8a>
 8011d98:	4620      	mov	r0, r4
 8011d9a:	f7ff fb6b 	bl	8011474 <_free_r>
 8011d9e:	e7ba      	b.n	8011d16 <_reclaim_reent+0x16>
 8011da0:	680e      	ldr	r6, [r1, #0]
 8011da2:	4620      	mov	r0, r4
 8011da4:	f7ff fb66 	bl	8011474 <_free_r>
 8011da8:	4631      	mov	r1, r6
 8011daa:	e7ef      	b.n	8011d8c <_reclaim_reent+0x8c>
 8011dac:	2500      	movs	r5, #0
 8011dae:	e7ef      	b.n	8011d90 <_reclaim_reent+0x90>
 8011db0:	bd70      	pop	{r4, r5, r6, pc}
 8011db2:	bf00      	nop
 8011db4:	200009dc 	.word	0x200009dc

08011db8 <lflush>:
 8011db8:	8983      	ldrh	r3, [r0, #12]
 8011dba:	f003 0309 	and.w	r3, r3, #9
 8011dbe:	2b09      	cmp	r3, #9
 8011dc0:	d101      	bne.n	8011dc6 <lflush+0xe>
 8011dc2:	f7fe bf13 	b.w	8010bec <fflush>
 8011dc6:	2000      	movs	r0, #0
 8011dc8:	4770      	bx	lr
	...

08011dcc <__srefill_r>:
 8011dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dce:	460c      	mov	r4, r1
 8011dd0:	4605      	mov	r5, r0
 8011dd2:	b118      	cbz	r0, 8011ddc <__srefill_r+0x10>
 8011dd4:	6983      	ldr	r3, [r0, #24]
 8011dd6:	b90b      	cbnz	r3, 8011ddc <__srefill_r+0x10>
 8011dd8:	f7fe ff72 	bl	8010cc0 <__sinit>
 8011ddc:	4b3b      	ldr	r3, [pc, #236]	; (8011ecc <__srefill_r+0x100>)
 8011dde:	429c      	cmp	r4, r3
 8011de0:	d10a      	bne.n	8011df8 <__srefill_r+0x2c>
 8011de2:	686c      	ldr	r4, [r5, #4]
 8011de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011de8:	2300      	movs	r3, #0
 8011dea:	6063      	str	r3, [r4, #4]
 8011dec:	89a3      	ldrh	r3, [r4, #12]
 8011dee:	069e      	lsls	r6, r3, #26
 8011df0:	d50c      	bpl.n	8011e0c <__srefill_r+0x40>
 8011df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011df6:	e066      	b.n	8011ec6 <__srefill_r+0xfa>
 8011df8:	4b35      	ldr	r3, [pc, #212]	; (8011ed0 <__srefill_r+0x104>)
 8011dfa:	429c      	cmp	r4, r3
 8011dfc:	d101      	bne.n	8011e02 <__srefill_r+0x36>
 8011dfe:	68ac      	ldr	r4, [r5, #8]
 8011e00:	e7f0      	b.n	8011de4 <__srefill_r+0x18>
 8011e02:	4b34      	ldr	r3, [pc, #208]	; (8011ed4 <__srefill_r+0x108>)
 8011e04:	429c      	cmp	r4, r3
 8011e06:	bf08      	it	eq
 8011e08:	68ec      	ldreq	r4, [r5, #12]
 8011e0a:	e7eb      	b.n	8011de4 <__srefill_r+0x18>
 8011e0c:	0758      	lsls	r0, r3, #29
 8011e0e:	d448      	bmi.n	8011ea2 <__srefill_r+0xd6>
 8011e10:	06d9      	lsls	r1, r3, #27
 8011e12:	d405      	bmi.n	8011e20 <__srefill_r+0x54>
 8011e14:	2309      	movs	r3, #9
 8011e16:	602b      	str	r3, [r5, #0]
 8011e18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011e1c:	81a3      	strh	r3, [r4, #12]
 8011e1e:	e7e8      	b.n	8011df2 <__srefill_r+0x26>
 8011e20:	071a      	lsls	r2, r3, #28
 8011e22:	d50b      	bpl.n	8011e3c <__srefill_r+0x70>
 8011e24:	4621      	mov	r1, r4
 8011e26:	4628      	mov	r0, r5
 8011e28:	f7fe fea4 	bl	8010b74 <_fflush_r>
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	d1e0      	bne.n	8011df2 <__srefill_r+0x26>
 8011e30:	89a3      	ldrh	r3, [r4, #12]
 8011e32:	60a0      	str	r0, [r4, #8]
 8011e34:	f023 0308 	bic.w	r3, r3, #8
 8011e38:	81a3      	strh	r3, [r4, #12]
 8011e3a:	61a0      	str	r0, [r4, #24]
 8011e3c:	89a3      	ldrh	r3, [r4, #12]
 8011e3e:	f043 0304 	orr.w	r3, r3, #4
 8011e42:	81a3      	strh	r3, [r4, #12]
 8011e44:	6923      	ldr	r3, [r4, #16]
 8011e46:	b91b      	cbnz	r3, 8011e50 <__srefill_r+0x84>
 8011e48:	4621      	mov	r1, r4
 8011e4a:	4628      	mov	r0, r5
 8011e4c:	f7ff faac 	bl	80113a8 <__smakebuf_r>
 8011e50:	89a6      	ldrh	r6, [r4, #12]
 8011e52:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8011e56:	07b3      	lsls	r3, r6, #30
 8011e58:	d00f      	beq.n	8011e7a <__srefill_r+0xae>
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	81a3      	strh	r3, [r4, #12]
 8011e5e:	4b1e      	ldr	r3, [pc, #120]	; (8011ed8 <__srefill_r+0x10c>)
 8011e60:	491e      	ldr	r1, [pc, #120]	; (8011edc <__srefill_r+0x110>)
 8011e62:	6818      	ldr	r0, [r3, #0]
 8011e64:	f006 0609 	and.w	r6, r6, #9
 8011e68:	f7ff f9a8 	bl	80111bc <_fwalk>
 8011e6c:	2e09      	cmp	r6, #9
 8011e6e:	81a7      	strh	r7, [r4, #12]
 8011e70:	d103      	bne.n	8011e7a <__srefill_r+0xae>
 8011e72:	4621      	mov	r1, r4
 8011e74:	4628      	mov	r0, r5
 8011e76:	f7fe fdf7 	bl	8010a68 <__sflush_r>
 8011e7a:	6922      	ldr	r2, [r4, #16]
 8011e7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011e7e:	6963      	ldr	r3, [r4, #20]
 8011e80:	6a21      	ldr	r1, [r4, #32]
 8011e82:	6022      	str	r2, [r4, #0]
 8011e84:	4628      	mov	r0, r5
 8011e86:	47b0      	blx	r6
 8011e88:	2800      	cmp	r0, #0
 8011e8a:	6060      	str	r0, [r4, #4]
 8011e8c:	dc1c      	bgt.n	8011ec8 <__srefill_r+0xfc>
 8011e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e92:	bf17      	itett	ne
 8011e94:	2200      	movne	r2, #0
 8011e96:	f043 0320 	orreq.w	r3, r3, #32
 8011e9a:	6062      	strne	r2, [r4, #4]
 8011e9c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8011ea0:	e7bc      	b.n	8011e1c <__srefill_r+0x50>
 8011ea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ea4:	2900      	cmp	r1, #0
 8011ea6:	d0cd      	beq.n	8011e44 <__srefill_r+0x78>
 8011ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011eac:	4299      	cmp	r1, r3
 8011eae:	d002      	beq.n	8011eb6 <__srefill_r+0xea>
 8011eb0:	4628      	mov	r0, r5
 8011eb2:	f7ff fadf 	bl	8011474 <_free_r>
 8011eb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011eb8:	6063      	str	r3, [r4, #4]
 8011eba:	2000      	movs	r0, #0
 8011ebc:	6360      	str	r0, [r4, #52]	; 0x34
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d0c0      	beq.n	8011e44 <__srefill_r+0x78>
 8011ec2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011ec4:	6023      	str	r3, [r4, #0]
 8011ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ec8:	2000      	movs	r0, #0
 8011eca:	e7fc      	b.n	8011ec6 <__srefill_r+0xfa>
 8011ecc:	08012f5c 	.word	0x08012f5c
 8011ed0:	08012f7c 	.word	0x08012f7c
 8011ed4:	08012f3c 	.word	0x08012f3c
 8011ed8:	08012f9c 	.word	0x08012f9c
 8011edc:	08011db9 	.word	0x08011db9

08011ee0 <_sbrk_r>:
 8011ee0:	b538      	push	{r3, r4, r5, lr}
 8011ee2:	4d06      	ldr	r5, [pc, #24]	; (8011efc <_sbrk_r+0x1c>)
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	4604      	mov	r4, r0
 8011ee8:	4608      	mov	r0, r1
 8011eea:	602b      	str	r3, [r5, #0]
 8011eec:	f7f3 fdd2 	bl	8005a94 <_sbrk>
 8011ef0:	1c43      	adds	r3, r0, #1
 8011ef2:	d102      	bne.n	8011efa <_sbrk_r+0x1a>
 8011ef4:	682b      	ldr	r3, [r5, #0]
 8011ef6:	b103      	cbz	r3, 8011efa <_sbrk_r+0x1a>
 8011ef8:	6023      	str	r3, [r4, #0]
 8011efa:	bd38      	pop	{r3, r4, r5, pc}
 8011efc:	20009c60 	.word	0x20009c60

08011f00 <sniprintf>:
 8011f00:	b40c      	push	{r2, r3}
 8011f02:	b530      	push	{r4, r5, lr}
 8011f04:	4b17      	ldr	r3, [pc, #92]	; (8011f64 <sniprintf+0x64>)
 8011f06:	1e0c      	subs	r4, r1, #0
 8011f08:	681d      	ldr	r5, [r3, #0]
 8011f0a:	b09d      	sub	sp, #116	; 0x74
 8011f0c:	da08      	bge.n	8011f20 <sniprintf+0x20>
 8011f0e:	238b      	movs	r3, #139	; 0x8b
 8011f10:	602b      	str	r3, [r5, #0]
 8011f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f16:	b01d      	add	sp, #116	; 0x74
 8011f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f1c:	b002      	add	sp, #8
 8011f1e:	4770      	bx	lr
 8011f20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011f24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011f28:	bf14      	ite	ne
 8011f2a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011f2e:	4623      	moveq	r3, r4
 8011f30:	9304      	str	r3, [sp, #16]
 8011f32:	9307      	str	r3, [sp, #28]
 8011f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011f38:	9002      	str	r0, [sp, #8]
 8011f3a:	9006      	str	r0, [sp, #24]
 8011f3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011f40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011f42:	ab21      	add	r3, sp, #132	; 0x84
 8011f44:	a902      	add	r1, sp, #8
 8011f46:	4628      	mov	r0, r5
 8011f48:	9301      	str	r3, [sp, #4]
 8011f4a:	f000 fa65 	bl	8012418 <_svfiprintf_r>
 8011f4e:	1c43      	adds	r3, r0, #1
 8011f50:	bfbc      	itt	lt
 8011f52:	238b      	movlt	r3, #139	; 0x8b
 8011f54:	602b      	strlt	r3, [r5, #0]
 8011f56:	2c00      	cmp	r4, #0
 8011f58:	d0dd      	beq.n	8011f16 <sniprintf+0x16>
 8011f5a:	9b02      	ldr	r3, [sp, #8]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	701a      	strb	r2, [r3, #0]
 8011f60:	e7d9      	b.n	8011f16 <sniprintf+0x16>
 8011f62:	bf00      	nop
 8011f64:	200009dc 	.word	0x200009dc

08011f68 <siprintf>:
 8011f68:	b40e      	push	{r1, r2, r3}
 8011f6a:	b500      	push	{lr}
 8011f6c:	b09c      	sub	sp, #112	; 0x70
 8011f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8011f70:	9002      	str	r0, [sp, #8]
 8011f72:	9006      	str	r0, [sp, #24]
 8011f74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011f78:	4809      	ldr	r0, [pc, #36]	; (8011fa0 <siprintf+0x38>)
 8011f7a:	9107      	str	r1, [sp, #28]
 8011f7c:	9104      	str	r1, [sp, #16]
 8011f7e:	4909      	ldr	r1, [pc, #36]	; (8011fa4 <siprintf+0x3c>)
 8011f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f84:	9105      	str	r1, [sp, #20]
 8011f86:	6800      	ldr	r0, [r0, #0]
 8011f88:	9301      	str	r3, [sp, #4]
 8011f8a:	a902      	add	r1, sp, #8
 8011f8c:	f000 fa44 	bl	8012418 <_svfiprintf_r>
 8011f90:	9b02      	ldr	r3, [sp, #8]
 8011f92:	2200      	movs	r2, #0
 8011f94:	701a      	strb	r2, [r3, #0]
 8011f96:	b01c      	add	sp, #112	; 0x70
 8011f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f9c:	b003      	add	sp, #12
 8011f9e:	4770      	bx	lr
 8011fa0:	200009dc 	.word	0x200009dc
 8011fa4:	ffff0208 	.word	0xffff0208

08011fa8 <__sread>:
 8011fa8:	b510      	push	{r4, lr}
 8011faa:	460c      	mov	r4, r1
 8011fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fb0:	f000 fb32 	bl	8012618 <_read_r>
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	bfab      	itete	ge
 8011fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011fba:	89a3      	ldrhlt	r3, [r4, #12]
 8011fbc:	181b      	addge	r3, r3, r0
 8011fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011fc2:	bfac      	ite	ge
 8011fc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8011fc6:	81a3      	strhlt	r3, [r4, #12]
 8011fc8:	bd10      	pop	{r4, pc}

08011fca <__swrite>:
 8011fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fce:	461f      	mov	r7, r3
 8011fd0:	898b      	ldrh	r3, [r1, #12]
 8011fd2:	05db      	lsls	r3, r3, #23
 8011fd4:	4605      	mov	r5, r0
 8011fd6:	460c      	mov	r4, r1
 8011fd8:	4616      	mov	r6, r2
 8011fda:	d505      	bpl.n	8011fe8 <__swrite+0x1e>
 8011fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fe0:	2302      	movs	r3, #2
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	f000 f95e 	bl	80122a4 <_lseek_r>
 8011fe8:	89a3      	ldrh	r3, [r4, #12]
 8011fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ff2:	81a3      	strh	r3, [r4, #12]
 8011ff4:	4632      	mov	r2, r6
 8011ff6:	463b      	mov	r3, r7
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffe:	f000 b869 	b.w	80120d4 <_write_r>

08012002 <__sseek>:
 8012002:	b510      	push	{r4, lr}
 8012004:	460c      	mov	r4, r1
 8012006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801200a:	f000 f94b 	bl	80122a4 <_lseek_r>
 801200e:	1c43      	adds	r3, r0, #1
 8012010:	89a3      	ldrh	r3, [r4, #12]
 8012012:	bf15      	itete	ne
 8012014:	6560      	strne	r0, [r4, #84]	; 0x54
 8012016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801201a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801201e:	81a3      	strheq	r3, [r4, #12]
 8012020:	bf18      	it	ne
 8012022:	81a3      	strhne	r3, [r4, #12]
 8012024:	bd10      	pop	{r4, pc}

08012026 <__sclose>:
 8012026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801202a:	f000 b8d3 	b.w	80121d4 <_close_r>
	...

08012030 <__swbuf_r>:
 8012030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012032:	460e      	mov	r6, r1
 8012034:	4614      	mov	r4, r2
 8012036:	4605      	mov	r5, r0
 8012038:	b118      	cbz	r0, 8012042 <__swbuf_r+0x12>
 801203a:	6983      	ldr	r3, [r0, #24]
 801203c:	b90b      	cbnz	r3, 8012042 <__swbuf_r+0x12>
 801203e:	f7fe fe3f 	bl	8010cc0 <__sinit>
 8012042:	4b21      	ldr	r3, [pc, #132]	; (80120c8 <__swbuf_r+0x98>)
 8012044:	429c      	cmp	r4, r3
 8012046:	d12b      	bne.n	80120a0 <__swbuf_r+0x70>
 8012048:	686c      	ldr	r4, [r5, #4]
 801204a:	69a3      	ldr	r3, [r4, #24]
 801204c:	60a3      	str	r3, [r4, #8]
 801204e:	89a3      	ldrh	r3, [r4, #12]
 8012050:	071a      	lsls	r2, r3, #28
 8012052:	d52f      	bpl.n	80120b4 <__swbuf_r+0x84>
 8012054:	6923      	ldr	r3, [r4, #16]
 8012056:	b36b      	cbz	r3, 80120b4 <__swbuf_r+0x84>
 8012058:	6923      	ldr	r3, [r4, #16]
 801205a:	6820      	ldr	r0, [r4, #0]
 801205c:	1ac0      	subs	r0, r0, r3
 801205e:	6963      	ldr	r3, [r4, #20]
 8012060:	b2f6      	uxtb	r6, r6
 8012062:	4283      	cmp	r3, r0
 8012064:	4637      	mov	r7, r6
 8012066:	dc04      	bgt.n	8012072 <__swbuf_r+0x42>
 8012068:	4621      	mov	r1, r4
 801206a:	4628      	mov	r0, r5
 801206c:	f7fe fd82 	bl	8010b74 <_fflush_r>
 8012070:	bb30      	cbnz	r0, 80120c0 <__swbuf_r+0x90>
 8012072:	68a3      	ldr	r3, [r4, #8]
 8012074:	3b01      	subs	r3, #1
 8012076:	60a3      	str	r3, [r4, #8]
 8012078:	6823      	ldr	r3, [r4, #0]
 801207a:	1c5a      	adds	r2, r3, #1
 801207c:	6022      	str	r2, [r4, #0]
 801207e:	701e      	strb	r6, [r3, #0]
 8012080:	6963      	ldr	r3, [r4, #20]
 8012082:	3001      	adds	r0, #1
 8012084:	4283      	cmp	r3, r0
 8012086:	d004      	beq.n	8012092 <__swbuf_r+0x62>
 8012088:	89a3      	ldrh	r3, [r4, #12]
 801208a:	07db      	lsls	r3, r3, #31
 801208c:	d506      	bpl.n	801209c <__swbuf_r+0x6c>
 801208e:	2e0a      	cmp	r6, #10
 8012090:	d104      	bne.n	801209c <__swbuf_r+0x6c>
 8012092:	4621      	mov	r1, r4
 8012094:	4628      	mov	r0, r5
 8012096:	f7fe fd6d 	bl	8010b74 <_fflush_r>
 801209a:	b988      	cbnz	r0, 80120c0 <__swbuf_r+0x90>
 801209c:	4638      	mov	r0, r7
 801209e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120a0:	4b0a      	ldr	r3, [pc, #40]	; (80120cc <__swbuf_r+0x9c>)
 80120a2:	429c      	cmp	r4, r3
 80120a4:	d101      	bne.n	80120aa <__swbuf_r+0x7a>
 80120a6:	68ac      	ldr	r4, [r5, #8]
 80120a8:	e7cf      	b.n	801204a <__swbuf_r+0x1a>
 80120aa:	4b09      	ldr	r3, [pc, #36]	; (80120d0 <__swbuf_r+0xa0>)
 80120ac:	429c      	cmp	r4, r3
 80120ae:	bf08      	it	eq
 80120b0:	68ec      	ldreq	r4, [r5, #12]
 80120b2:	e7ca      	b.n	801204a <__swbuf_r+0x1a>
 80120b4:	4621      	mov	r1, r4
 80120b6:	4628      	mov	r0, r5
 80120b8:	f000 f81e 	bl	80120f8 <__swsetup_r>
 80120bc:	2800      	cmp	r0, #0
 80120be:	d0cb      	beq.n	8012058 <__swbuf_r+0x28>
 80120c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80120c4:	e7ea      	b.n	801209c <__swbuf_r+0x6c>
 80120c6:	bf00      	nop
 80120c8:	08012f5c 	.word	0x08012f5c
 80120cc:	08012f7c 	.word	0x08012f7c
 80120d0:	08012f3c 	.word	0x08012f3c

080120d4 <_write_r>:
 80120d4:	b538      	push	{r3, r4, r5, lr}
 80120d6:	4d07      	ldr	r5, [pc, #28]	; (80120f4 <_write_r+0x20>)
 80120d8:	4604      	mov	r4, r0
 80120da:	4608      	mov	r0, r1
 80120dc:	4611      	mov	r1, r2
 80120de:	2200      	movs	r2, #0
 80120e0:	602a      	str	r2, [r5, #0]
 80120e2:	461a      	mov	r2, r3
 80120e4:	f7f1 fa1e 	bl	8003524 <_write>
 80120e8:	1c43      	adds	r3, r0, #1
 80120ea:	d102      	bne.n	80120f2 <_write_r+0x1e>
 80120ec:	682b      	ldr	r3, [r5, #0]
 80120ee:	b103      	cbz	r3, 80120f2 <_write_r+0x1e>
 80120f0:	6023      	str	r3, [r4, #0]
 80120f2:	bd38      	pop	{r3, r4, r5, pc}
 80120f4:	20009c60 	.word	0x20009c60

080120f8 <__swsetup_r>:
 80120f8:	4b32      	ldr	r3, [pc, #200]	; (80121c4 <__swsetup_r+0xcc>)
 80120fa:	b570      	push	{r4, r5, r6, lr}
 80120fc:	681d      	ldr	r5, [r3, #0]
 80120fe:	4606      	mov	r6, r0
 8012100:	460c      	mov	r4, r1
 8012102:	b125      	cbz	r5, 801210e <__swsetup_r+0x16>
 8012104:	69ab      	ldr	r3, [r5, #24]
 8012106:	b913      	cbnz	r3, 801210e <__swsetup_r+0x16>
 8012108:	4628      	mov	r0, r5
 801210a:	f7fe fdd9 	bl	8010cc0 <__sinit>
 801210e:	4b2e      	ldr	r3, [pc, #184]	; (80121c8 <__swsetup_r+0xd0>)
 8012110:	429c      	cmp	r4, r3
 8012112:	d10f      	bne.n	8012134 <__swsetup_r+0x3c>
 8012114:	686c      	ldr	r4, [r5, #4]
 8012116:	89a3      	ldrh	r3, [r4, #12]
 8012118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801211c:	0719      	lsls	r1, r3, #28
 801211e:	d42c      	bmi.n	801217a <__swsetup_r+0x82>
 8012120:	06dd      	lsls	r5, r3, #27
 8012122:	d411      	bmi.n	8012148 <__swsetup_r+0x50>
 8012124:	2309      	movs	r3, #9
 8012126:	6033      	str	r3, [r6, #0]
 8012128:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801212c:	81a3      	strh	r3, [r4, #12]
 801212e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012132:	e03e      	b.n	80121b2 <__swsetup_r+0xba>
 8012134:	4b25      	ldr	r3, [pc, #148]	; (80121cc <__swsetup_r+0xd4>)
 8012136:	429c      	cmp	r4, r3
 8012138:	d101      	bne.n	801213e <__swsetup_r+0x46>
 801213a:	68ac      	ldr	r4, [r5, #8]
 801213c:	e7eb      	b.n	8012116 <__swsetup_r+0x1e>
 801213e:	4b24      	ldr	r3, [pc, #144]	; (80121d0 <__swsetup_r+0xd8>)
 8012140:	429c      	cmp	r4, r3
 8012142:	bf08      	it	eq
 8012144:	68ec      	ldreq	r4, [r5, #12]
 8012146:	e7e6      	b.n	8012116 <__swsetup_r+0x1e>
 8012148:	0758      	lsls	r0, r3, #29
 801214a:	d512      	bpl.n	8012172 <__swsetup_r+0x7a>
 801214c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801214e:	b141      	cbz	r1, 8012162 <__swsetup_r+0x6a>
 8012150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012154:	4299      	cmp	r1, r3
 8012156:	d002      	beq.n	801215e <__swsetup_r+0x66>
 8012158:	4630      	mov	r0, r6
 801215a:	f7ff f98b 	bl	8011474 <_free_r>
 801215e:	2300      	movs	r3, #0
 8012160:	6363      	str	r3, [r4, #52]	; 0x34
 8012162:	89a3      	ldrh	r3, [r4, #12]
 8012164:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012168:	81a3      	strh	r3, [r4, #12]
 801216a:	2300      	movs	r3, #0
 801216c:	6063      	str	r3, [r4, #4]
 801216e:	6923      	ldr	r3, [r4, #16]
 8012170:	6023      	str	r3, [r4, #0]
 8012172:	89a3      	ldrh	r3, [r4, #12]
 8012174:	f043 0308 	orr.w	r3, r3, #8
 8012178:	81a3      	strh	r3, [r4, #12]
 801217a:	6923      	ldr	r3, [r4, #16]
 801217c:	b94b      	cbnz	r3, 8012192 <__swsetup_r+0x9a>
 801217e:	89a3      	ldrh	r3, [r4, #12]
 8012180:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012188:	d003      	beq.n	8012192 <__swsetup_r+0x9a>
 801218a:	4621      	mov	r1, r4
 801218c:	4630      	mov	r0, r6
 801218e:	f7ff f90b 	bl	80113a8 <__smakebuf_r>
 8012192:	89a0      	ldrh	r0, [r4, #12]
 8012194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012198:	f010 0301 	ands.w	r3, r0, #1
 801219c:	d00a      	beq.n	80121b4 <__swsetup_r+0xbc>
 801219e:	2300      	movs	r3, #0
 80121a0:	60a3      	str	r3, [r4, #8]
 80121a2:	6963      	ldr	r3, [r4, #20]
 80121a4:	425b      	negs	r3, r3
 80121a6:	61a3      	str	r3, [r4, #24]
 80121a8:	6923      	ldr	r3, [r4, #16]
 80121aa:	b943      	cbnz	r3, 80121be <__swsetup_r+0xc6>
 80121ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80121b0:	d1ba      	bne.n	8012128 <__swsetup_r+0x30>
 80121b2:	bd70      	pop	{r4, r5, r6, pc}
 80121b4:	0781      	lsls	r1, r0, #30
 80121b6:	bf58      	it	pl
 80121b8:	6963      	ldrpl	r3, [r4, #20]
 80121ba:	60a3      	str	r3, [r4, #8]
 80121bc:	e7f4      	b.n	80121a8 <__swsetup_r+0xb0>
 80121be:	2000      	movs	r0, #0
 80121c0:	e7f7      	b.n	80121b2 <__swsetup_r+0xba>
 80121c2:	bf00      	nop
 80121c4:	200009dc 	.word	0x200009dc
 80121c8:	08012f5c 	.word	0x08012f5c
 80121cc:	08012f7c 	.word	0x08012f7c
 80121d0:	08012f3c 	.word	0x08012f3c

080121d4 <_close_r>:
 80121d4:	b538      	push	{r3, r4, r5, lr}
 80121d6:	4d06      	ldr	r5, [pc, #24]	; (80121f0 <_close_r+0x1c>)
 80121d8:	2300      	movs	r3, #0
 80121da:	4604      	mov	r4, r0
 80121dc:	4608      	mov	r0, r1
 80121de:	602b      	str	r3, [r5, #0]
 80121e0:	f7f3 fc15 	bl	8005a0e <_close>
 80121e4:	1c43      	adds	r3, r0, #1
 80121e6:	d102      	bne.n	80121ee <_close_r+0x1a>
 80121e8:	682b      	ldr	r3, [r5, #0]
 80121ea:	b103      	cbz	r3, 80121ee <_close_r+0x1a>
 80121ec:	6023      	str	r3, [r4, #0]
 80121ee:	bd38      	pop	{r3, r4, r5, pc}
 80121f0:	20009c60 	.word	0x20009c60

080121f4 <__sflags>:
 80121f4:	780b      	ldrb	r3, [r1, #0]
 80121f6:	2b72      	cmp	r3, #114	; 0x72
 80121f8:	b530      	push	{r4, r5, lr}
 80121fa:	d022      	beq.n	8012242 <__sflags+0x4e>
 80121fc:	2b77      	cmp	r3, #119	; 0x77
 80121fe:	d024      	beq.n	801224a <__sflags+0x56>
 8012200:	2b61      	cmp	r3, #97	; 0x61
 8012202:	d027      	beq.n	8012254 <__sflags+0x60>
 8012204:	2316      	movs	r3, #22
 8012206:	6003      	str	r3, [r0, #0]
 8012208:	2000      	movs	r0, #0
 801220a:	bd30      	pop	{r4, r5, pc}
 801220c:	2d62      	cmp	r5, #98	; 0x62
 801220e:	d012      	beq.n	8012236 <__sflags+0x42>
 8012210:	2d78      	cmp	r5, #120	; 0x78
 8012212:	d013      	beq.n	801223c <__sflags+0x48>
 8012214:	2d2b      	cmp	r5, #43	; 0x2b
 8012216:	d107      	bne.n	8012228 <__sflags+0x34>
 8012218:	f020 001c 	bic.w	r0, r0, #28
 801221c:	f023 0303 	bic.w	r3, r3, #3
 8012220:	f040 0010 	orr.w	r0, r0, #16
 8012224:	f043 0302 	orr.w	r3, r3, #2
 8012228:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801222c:	2d00      	cmp	r5, #0
 801222e:	d1ed      	bne.n	801220c <__sflags+0x18>
 8012230:	4323      	orrs	r3, r4
 8012232:	6013      	str	r3, [r2, #0]
 8012234:	e7e9      	b.n	801220a <__sflags+0x16>
 8012236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801223a:	e7f5      	b.n	8012228 <__sflags+0x34>
 801223c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012240:	e7f2      	b.n	8012228 <__sflags+0x34>
 8012242:	2400      	movs	r4, #0
 8012244:	4623      	mov	r3, r4
 8012246:	2004      	movs	r0, #4
 8012248:	e7ee      	b.n	8012228 <__sflags+0x34>
 801224a:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801224e:	2301      	movs	r3, #1
 8012250:	2008      	movs	r0, #8
 8012252:	e7e9      	b.n	8012228 <__sflags+0x34>
 8012254:	f44f 7402 	mov.w	r4, #520	; 0x208
 8012258:	2301      	movs	r3, #1
 801225a:	f44f 7084 	mov.w	r0, #264	; 0x108
 801225e:	e7e3      	b.n	8012228 <__sflags+0x34>

08012260 <_fstat_r>:
 8012260:	b538      	push	{r3, r4, r5, lr}
 8012262:	4d07      	ldr	r5, [pc, #28]	; (8012280 <_fstat_r+0x20>)
 8012264:	2300      	movs	r3, #0
 8012266:	4604      	mov	r4, r0
 8012268:	4608      	mov	r0, r1
 801226a:	4611      	mov	r1, r2
 801226c:	602b      	str	r3, [r5, #0]
 801226e:	f7f3 fbda 	bl	8005a26 <_fstat>
 8012272:	1c43      	adds	r3, r0, #1
 8012274:	d102      	bne.n	801227c <_fstat_r+0x1c>
 8012276:	682b      	ldr	r3, [r5, #0]
 8012278:	b103      	cbz	r3, 801227c <_fstat_r+0x1c>
 801227a:	6023      	str	r3, [r4, #0]
 801227c:	bd38      	pop	{r3, r4, r5, pc}
 801227e:	bf00      	nop
 8012280:	20009c60 	.word	0x20009c60

08012284 <_isatty_r>:
 8012284:	b538      	push	{r3, r4, r5, lr}
 8012286:	4d06      	ldr	r5, [pc, #24]	; (80122a0 <_isatty_r+0x1c>)
 8012288:	2300      	movs	r3, #0
 801228a:	4604      	mov	r4, r0
 801228c:	4608      	mov	r0, r1
 801228e:	602b      	str	r3, [r5, #0]
 8012290:	f7f3 fbd9 	bl	8005a46 <_isatty>
 8012294:	1c43      	adds	r3, r0, #1
 8012296:	d102      	bne.n	801229e <_isatty_r+0x1a>
 8012298:	682b      	ldr	r3, [r5, #0]
 801229a:	b103      	cbz	r3, 801229e <_isatty_r+0x1a>
 801229c:	6023      	str	r3, [r4, #0]
 801229e:	bd38      	pop	{r3, r4, r5, pc}
 80122a0:	20009c60 	.word	0x20009c60

080122a4 <_lseek_r>:
 80122a4:	b538      	push	{r3, r4, r5, lr}
 80122a6:	4d07      	ldr	r5, [pc, #28]	; (80122c4 <_lseek_r+0x20>)
 80122a8:	4604      	mov	r4, r0
 80122aa:	4608      	mov	r0, r1
 80122ac:	4611      	mov	r1, r2
 80122ae:	2200      	movs	r2, #0
 80122b0:	602a      	str	r2, [r5, #0]
 80122b2:	461a      	mov	r2, r3
 80122b4:	f7f3 fbd2 	bl	8005a5c <_lseek>
 80122b8:	1c43      	adds	r3, r0, #1
 80122ba:	d102      	bne.n	80122c2 <_lseek_r+0x1e>
 80122bc:	682b      	ldr	r3, [r5, #0]
 80122be:	b103      	cbz	r3, 80122c2 <_lseek_r+0x1e>
 80122c0:	6023      	str	r3, [r4, #0]
 80122c2:	bd38      	pop	{r3, r4, r5, pc}
 80122c4:	20009c60 	.word	0x20009c60

080122c8 <memmove>:
 80122c8:	4288      	cmp	r0, r1
 80122ca:	b510      	push	{r4, lr}
 80122cc:	eb01 0402 	add.w	r4, r1, r2
 80122d0:	d902      	bls.n	80122d8 <memmove+0x10>
 80122d2:	4284      	cmp	r4, r0
 80122d4:	4623      	mov	r3, r4
 80122d6:	d807      	bhi.n	80122e8 <memmove+0x20>
 80122d8:	1e43      	subs	r3, r0, #1
 80122da:	42a1      	cmp	r1, r4
 80122dc:	d008      	beq.n	80122f0 <memmove+0x28>
 80122de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122e6:	e7f8      	b.n	80122da <memmove+0x12>
 80122e8:	4402      	add	r2, r0
 80122ea:	4601      	mov	r1, r0
 80122ec:	428a      	cmp	r2, r1
 80122ee:	d100      	bne.n	80122f2 <memmove+0x2a>
 80122f0:	bd10      	pop	{r4, pc}
 80122f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80122f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80122fa:	e7f7      	b.n	80122ec <memmove+0x24>

080122fc <__malloc_lock>:
 80122fc:	4801      	ldr	r0, [pc, #4]	; (8012304 <__malloc_lock+0x8>)
 80122fe:	f7ff b82d 	b.w	801135c <__retarget_lock_acquire_recursive>
 8012302:	bf00      	nop
 8012304:	20009c58 	.word	0x20009c58

08012308 <__malloc_unlock>:
 8012308:	4801      	ldr	r0, [pc, #4]	; (8012310 <__malloc_unlock+0x8>)
 801230a:	f7ff b828 	b.w	801135e <__retarget_lock_release_recursive>
 801230e:	bf00      	nop
 8012310:	20009c58 	.word	0x20009c58

08012314 <_realloc_r>:
 8012314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012316:	4607      	mov	r7, r0
 8012318:	4614      	mov	r4, r2
 801231a:	460e      	mov	r6, r1
 801231c:	b921      	cbnz	r1, 8012328 <_realloc_r+0x14>
 801231e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012322:	4611      	mov	r1, r2
 8012324:	f7ff b8f6 	b.w	8011514 <_malloc_r>
 8012328:	b922      	cbnz	r2, 8012334 <_realloc_r+0x20>
 801232a:	f7ff f8a3 	bl	8011474 <_free_r>
 801232e:	4625      	mov	r5, r4
 8012330:	4628      	mov	r0, r5
 8012332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012334:	f000 f982 	bl	801263c <_malloc_usable_size_r>
 8012338:	42a0      	cmp	r0, r4
 801233a:	d20f      	bcs.n	801235c <_realloc_r+0x48>
 801233c:	4621      	mov	r1, r4
 801233e:	4638      	mov	r0, r7
 8012340:	f7ff f8e8 	bl	8011514 <_malloc_r>
 8012344:	4605      	mov	r5, r0
 8012346:	2800      	cmp	r0, #0
 8012348:	d0f2      	beq.n	8012330 <_realloc_r+0x1c>
 801234a:	4631      	mov	r1, r6
 801234c:	4622      	mov	r2, r4
 801234e:	f7ff f87b 	bl	8011448 <memcpy>
 8012352:	4631      	mov	r1, r6
 8012354:	4638      	mov	r0, r7
 8012356:	f7ff f88d 	bl	8011474 <_free_r>
 801235a:	e7e9      	b.n	8012330 <_realloc_r+0x1c>
 801235c:	4635      	mov	r5, r6
 801235e:	e7e7      	b.n	8012330 <_realloc_r+0x1c>

08012360 <__ssputs_r>:
 8012360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012364:	688e      	ldr	r6, [r1, #8]
 8012366:	429e      	cmp	r6, r3
 8012368:	4682      	mov	sl, r0
 801236a:	460c      	mov	r4, r1
 801236c:	4690      	mov	r8, r2
 801236e:	461f      	mov	r7, r3
 8012370:	d838      	bhi.n	80123e4 <__ssputs_r+0x84>
 8012372:	898a      	ldrh	r2, [r1, #12]
 8012374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012378:	d032      	beq.n	80123e0 <__ssputs_r+0x80>
 801237a:	6825      	ldr	r5, [r4, #0]
 801237c:	6909      	ldr	r1, [r1, #16]
 801237e:	eba5 0901 	sub.w	r9, r5, r1
 8012382:	6965      	ldr	r5, [r4, #20]
 8012384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801238c:	3301      	adds	r3, #1
 801238e:	444b      	add	r3, r9
 8012390:	106d      	asrs	r5, r5, #1
 8012392:	429d      	cmp	r5, r3
 8012394:	bf38      	it	cc
 8012396:	461d      	movcc	r5, r3
 8012398:	0553      	lsls	r3, r2, #21
 801239a:	d531      	bpl.n	8012400 <__ssputs_r+0xa0>
 801239c:	4629      	mov	r1, r5
 801239e:	f7ff f8b9 	bl	8011514 <_malloc_r>
 80123a2:	4606      	mov	r6, r0
 80123a4:	b950      	cbnz	r0, 80123bc <__ssputs_r+0x5c>
 80123a6:	230c      	movs	r3, #12
 80123a8:	f8ca 3000 	str.w	r3, [sl]
 80123ac:	89a3      	ldrh	r3, [r4, #12]
 80123ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123b2:	81a3      	strh	r3, [r4, #12]
 80123b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123bc:	6921      	ldr	r1, [r4, #16]
 80123be:	464a      	mov	r2, r9
 80123c0:	f7ff f842 	bl	8011448 <memcpy>
 80123c4:	89a3      	ldrh	r3, [r4, #12]
 80123c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80123ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123ce:	81a3      	strh	r3, [r4, #12]
 80123d0:	6126      	str	r6, [r4, #16]
 80123d2:	6165      	str	r5, [r4, #20]
 80123d4:	444e      	add	r6, r9
 80123d6:	eba5 0509 	sub.w	r5, r5, r9
 80123da:	6026      	str	r6, [r4, #0]
 80123dc:	60a5      	str	r5, [r4, #8]
 80123de:	463e      	mov	r6, r7
 80123e0:	42be      	cmp	r6, r7
 80123e2:	d900      	bls.n	80123e6 <__ssputs_r+0x86>
 80123e4:	463e      	mov	r6, r7
 80123e6:	4632      	mov	r2, r6
 80123e8:	6820      	ldr	r0, [r4, #0]
 80123ea:	4641      	mov	r1, r8
 80123ec:	f7ff ff6c 	bl	80122c8 <memmove>
 80123f0:	68a3      	ldr	r3, [r4, #8]
 80123f2:	6822      	ldr	r2, [r4, #0]
 80123f4:	1b9b      	subs	r3, r3, r6
 80123f6:	4432      	add	r2, r6
 80123f8:	60a3      	str	r3, [r4, #8]
 80123fa:	6022      	str	r2, [r4, #0]
 80123fc:	2000      	movs	r0, #0
 80123fe:	e7db      	b.n	80123b8 <__ssputs_r+0x58>
 8012400:	462a      	mov	r2, r5
 8012402:	f7ff ff87 	bl	8012314 <_realloc_r>
 8012406:	4606      	mov	r6, r0
 8012408:	2800      	cmp	r0, #0
 801240a:	d1e1      	bne.n	80123d0 <__ssputs_r+0x70>
 801240c:	6921      	ldr	r1, [r4, #16]
 801240e:	4650      	mov	r0, sl
 8012410:	f7ff f830 	bl	8011474 <_free_r>
 8012414:	e7c7      	b.n	80123a6 <__ssputs_r+0x46>
	...

08012418 <_svfiprintf_r>:
 8012418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801241c:	4698      	mov	r8, r3
 801241e:	898b      	ldrh	r3, [r1, #12]
 8012420:	061b      	lsls	r3, r3, #24
 8012422:	b09d      	sub	sp, #116	; 0x74
 8012424:	4607      	mov	r7, r0
 8012426:	460d      	mov	r5, r1
 8012428:	4614      	mov	r4, r2
 801242a:	d50e      	bpl.n	801244a <_svfiprintf_r+0x32>
 801242c:	690b      	ldr	r3, [r1, #16]
 801242e:	b963      	cbnz	r3, 801244a <_svfiprintf_r+0x32>
 8012430:	2140      	movs	r1, #64	; 0x40
 8012432:	f7ff f86f 	bl	8011514 <_malloc_r>
 8012436:	6028      	str	r0, [r5, #0]
 8012438:	6128      	str	r0, [r5, #16]
 801243a:	b920      	cbnz	r0, 8012446 <_svfiprintf_r+0x2e>
 801243c:	230c      	movs	r3, #12
 801243e:	603b      	str	r3, [r7, #0]
 8012440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012444:	e0d1      	b.n	80125ea <_svfiprintf_r+0x1d2>
 8012446:	2340      	movs	r3, #64	; 0x40
 8012448:	616b      	str	r3, [r5, #20]
 801244a:	2300      	movs	r3, #0
 801244c:	9309      	str	r3, [sp, #36]	; 0x24
 801244e:	2320      	movs	r3, #32
 8012450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012454:	f8cd 800c 	str.w	r8, [sp, #12]
 8012458:	2330      	movs	r3, #48	; 0x30
 801245a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012604 <_svfiprintf_r+0x1ec>
 801245e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012462:	f04f 0901 	mov.w	r9, #1
 8012466:	4623      	mov	r3, r4
 8012468:	469a      	mov	sl, r3
 801246a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801246e:	b10a      	cbz	r2, 8012474 <_svfiprintf_r+0x5c>
 8012470:	2a25      	cmp	r2, #37	; 0x25
 8012472:	d1f9      	bne.n	8012468 <_svfiprintf_r+0x50>
 8012474:	ebba 0b04 	subs.w	fp, sl, r4
 8012478:	d00b      	beq.n	8012492 <_svfiprintf_r+0x7a>
 801247a:	465b      	mov	r3, fp
 801247c:	4622      	mov	r2, r4
 801247e:	4629      	mov	r1, r5
 8012480:	4638      	mov	r0, r7
 8012482:	f7ff ff6d 	bl	8012360 <__ssputs_r>
 8012486:	3001      	adds	r0, #1
 8012488:	f000 80aa 	beq.w	80125e0 <_svfiprintf_r+0x1c8>
 801248c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801248e:	445a      	add	r2, fp
 8012490:	9209      	str	r2, [sp, #36]	; 0x24
 8012492:	f89a 3000 	ldrb.w	r3, [sl]
 8012496:	2b00      	cmp	r3, #0
 8012498:	f000 80a2 	beq.w	80125e0 <_svfiprintf_r+0x1c8>
 801249c:	2300      	movs	r3, #0
 801249e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80124a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124a6:	f10a 0a01 	add.w	sl, sl, #1
 80124aa:	9304      	str	r3, [sp, #16]
 80124ac:	9307      	str	r3, [sp, #28]
 80124ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80124b2:	931a      	str	r3, [sp, #104]	; 0x68
 80124b4:	4654      	mov	r4, sl
 80124b6:	2205      	movs	r2, #5
 80124b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124bc:	4851      	ldr	r0, [pc, #324]	; (8012604 <_svfiprintf_r+0x1ec>)
 80124be:	f7ed febf 	bl	8000240 <memchr>
 80124c2:	9a04      	ldr	r2, [sp, #16]
 80124c4:	b9d8      	cbnz	r0, 80124fe <_svfiprintf_r+0xe6>
 80124c6:	06d0      	lsls	r0, r2, #27
 80124c8:	bf44      	itt	mi
 80124ca:	2320      	movmi	r3, #32
 80124cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124d0:	0711      	lsls	r1, r2, #28
 80124d2:	bf44      	itt	mi
 80124d4:	232b      	movmi	r3, #43	; 0x2b
 80124d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124da:	f89a 3000 	ldrb.w	r3, [sl]
 80124de:	2b2a      	cmp	r3, #42	; 0x2a
 80124e0:	d015      	beq.n	801250e <_svfiprintf_r+0xf6>
 80124e2:	9a07      	ldr	r2, [sp, #28]
 80124e4:	4654      	mov	r4, sl
 80124e6:	2000      	movs	r0, #0
 80124e8:	f04f 0c0a 	mov.w	ip, #10
 80124ec:	4621      	mov	r1, r4
 80124ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124f2:	3b30      	subs	r3, #48	; 0x30
 80124f4:	2b09      	cmp	r3, #9
 80124f6:	d94e      	bls.n	8012596 <_svfiprintf_r+0x17e>
 80124f8:	b1b0      	cbz	r0, 8012528 <_svfiprintf_r+0x110>
 80124fa:	9207      	str	r2, [sp, #28]
 80124fc:	e014      	b.n	8012528 <_svfiprintf_r+0x110>
 80124fe:	eba0 0308 	sub.w	r3, r0, r8
 8012502:	fa09 f303 	lsl.w	r3, r9, r3
 8012506:	4313      	orrs	r3, r2
 8012508:	9304      	str	r3, [sp, #16]
 801250a:	46a2      	mov	sl, r4
 801250c:	e7d2      	b.n	80124b4 <_svfiprintf_r+0x9c>
 801250e:	9b03      	ldr	r3, [sp, #12]
 8012510:	1d19      	adds	r1, r3, #4
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	9103      	str	r1, [sp, #12]
 8012516:	2b00      	cmp	r3, #0
 8012518:	bfbb      	ittet	lt
 801251a:	425b      	neglt	r3, r3
 801251c:	f042 0202 	orrlt.w	r2, r2, #2
 8012520:	9307      	strge	r3, [sp, #28]
 8012522:	9307      	strlt	r3, [sp, #28]
 8012524:	bfb8      	it	lt
 8012526:	9204      	strlt	r2, [sp, #16]
 8012528:	7823      	ldrb	r3, [r4, #0]
 801252a:	2b2e      	cmp	r3, #46	; 0x2e
 801252c:	d10c      	bne.n	8012548 <_svfiprintf_r+0x130>
 801252e:	7863      	ldrb	r3, [r4, #1]
 8012530:	2b2a      	cmp	r3, #42	; 0x2a
 8012532:	d135      	bne.n	80125a0 <_svfiprintf_r+0x188>
 8012534:	9b03      	ldr	r3, [sp, #12]
 8012536:	1d1a      	adds	r2, r3, #4
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	9203      	str	r2, [sp, #12]
 801253c:	2b00      	cmp	r3, #0
 801253e:	bfb8      	it	lt
 8012540:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012544:	3402      	adds	r4, #2
 8012546:	9305      	str	r3, [sp, #20]
 8012548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012614 <_svfiprintf_r+0x1fc>
 801254c:	7821      	ldrb	r1, [r4, #0]
 801254e:	2203      	movs	r2, #3
 8012550:	4650      	mov	r0, sl
 8012552:	f7ed fe75 	bl	8000240 <memchr>
 8012556:	b140      	cbz	r0, 801256a <_svfiprintf_r+0x152>
 8012558:	2340      	movs	r3, #64	; 0x40
 801255a:	eba0 000a 	sub.w	r0, r0, sl
 801255e:	fa03 f000 	lsl.w	r0, r3, r0
 8012562:	9b04      	ldr	r3, [sp, #16]
 8012564:	4303      	orrs	r3, r0
 8012566:	3401      	adds	r4, #1
 8012568:	9304      	str	r3, [sp, #16]
 801256a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801256e:	4826      	ldr	r0, [pc, #152]	; (8012608 <_svfiprintf_r+0x1f0>)
 8012570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012574:	2206      	movs	r2, #6
 8012576:	f7ed fe63 	bl	8000240 <memchr>
 801257a:	2800      	cmp	r0, #0
 801257c:	d038      	beq.n	80125f0 <_svfiprintf_r+0x1d8>
 801257e:	4b23      	ldr	r3, [pc, #140]	; (801260c <_svfiprintf_r+0x1f4>)
 8012580:	bb1b      	cbnz	r3, 80125ca <_svfiprintf_r+0x1b2>
 8012582:	9b03      	ldr	r3, [sp, #12]
 8012584:	3307      	adds	r3, #7
 8012586:	f023 0307 	bic.w	r3, r3, #7
 801258a:	3308      	adds	r3, #8
 801258c:	9303      	str	r3, [sp, #12]
 801258e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012590:	4433      	add	r3, r6
 8012592:	9309      	str	r3, [sp, #36]	; 0x24
 8012594:	e767      	b.n	8012466 <_svfiprintf_r+0x4e>
 8012596:	fb0c 3202 	mla	r2, ip, r2, r3
 801259a:	460c      	mov	r4, r1
 801259c:	2001      	movs	r0, #1
 801259e:	e7a5      	b.n	80124ec <_svfiprintf_r+0xd4>
 80125a0:	2300      	movs	r3, #0
 80125a2:	3401      	adds	r4, #1
 80125a4:	9305      	str	r3, [sp, #20]
 80125a6:	4619      	mov	r1, r3
 80125a8:	f04f 0c0a 	mov.w	ip, #10
 80125ac:	4620      	mov	r0, r4
 80125ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125b2:	3a30      	subs	r2, #48	; 0x30
 80125b4:	2a09      	cmp	r2, #9
 80125b6:	d903      	bls.n	80125c0 <_svfiprintf_r+0x1a8>
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d0c5      	beq.n	8012548 <_svfiprintf_r+0x130>
 80125bc:	9105      	str	r1, [sp, #20]
 80125be:	e7c3      	b.n	8012548 <_svfiprintf_r+0x130>
 80125c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80125c4:	4604      	mov	r4, r0
 80125c6:	2301      	movs	r3, #1
 80125c8:	e7f0      	b.n	80125ac <_svfiprintf_r+0x194>
 80125ca:	ab03      	add	r3, sp, #12
 80125cc:	9300      	str	r3, [sp, #0]
 80125ce:	462a      	mov	r2, r5
 80125d0:	4b0f      	ldr	r3, [pc, #60]	; (8012610 <_svfiprintf_r+0x1f8>)
 80125d2:	a904      	add	r1, sp, #16
 80125d4:	4638      	mov	r0, r7
 80125d6:	f3af 8000 	nop.w
 80125da:	1c42      	adds	r2, r0, #1
 80125dc:	4606      	mov	r6, r0
 80125de:	d1d6      	bne.n	801258e <_svfiprintf_r+0x176>
 80125e0:	89ab      	ldrh	r3, [r5, #12]
 80125e2:	065b      	lsls	r3, r3, #25
 80125e4:	f53f af2c 	bmi.w	8012440 <_svfiprintf_r+0x28>
 80125e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125ea:	b01d      	add	sp, #116	; 0x74
 80125ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125f0:	ab03      	add	r3, sp, #12
 80125f2:	9300      	str	r3, [sp, #0]
 80125f4:	462a      	mov	r2, r5
 80125f6:	4b06      	ldr	r3, [pc, #24]	; (8012610 <_svfiprintf_r+0x1f8>)
 80125f8:	a904      	add	r1, sp, #16
 80125fa:	4638      	mov	r0, r7
 80125fc:	f7ff f9ac 	bl	8011958 <_printf_i>
 8012600:	e7eb      	b.n	80125da <_svfiprintf_r+0x1c2>
 8012602:	bf00      	nop
 8012604:	08012fa0 	.word	0x08012fa0
 8012608:	08012faa 	.word	0x08012faa
 801260c:	00000000 	.word	0x00000000
 8012610:	08012361 	.word	0x08012361
 8012614:	08012fa6 	.word	0x08012fa6

08012618 <_read_r>:
 8012618:	b538      	push	{r3, r4, r5, lr}
 801261a:	4d07      	ldr	r5, [pc, #28]	; (8012638 <_read_r+0x20>)
 801261c:	4604      	mov	r4, r0
 801261e:	4608      	mov	r0, r1
 8012620:	4611      	mov	r1, r2
 8012622:	2200      	movs	r2, #0
 8012624:	602a      	str	r2, [r5, #0]
 8012626:	461a      	mov	r2, r3
 8012628:	f7f3 f9d4 	bl	80059d4 <_read>
 801262c:	1c43      	adds	r3, r0, #1
 801262e:	d102      	bne.n	8012636 <_read_r+0x1e>
 8012630:	682b      	ldr	r3, [r5, #0]
 8012632:	b103      	cbz	r3, 8012636 <_read_r+0x1e>
 8012634:	6023      	str	r3, [r4, #0]
 8012636:	bd38      	pop	{r3, r4, r5, pc}
 8012638:	20009c60 	.word	0x20009c60

0801263c <_malloc_usable_size_r>:
 801263c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012640:	1f18      	subs	r0, r3, #4
 8012642:	2b00      	cmp	r3, #0
 8012644:	bfbc      	itt	lt
 8012646:	580b      	ldrlt	r3, [r1, r0]
 8012648:	18c0      	addlt	r0, r0, r3
 801264a:	4770      	bx	lr

0801264c <_init>:
 801264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801264e:	bf00      	nop
 8012650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012652:	bc08      	pop	{r3}
 8012654:	469e      	mov	lr, r3
 8012656:	4770      	bx	lr

08012658 <_fini>:
 8012658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801265a:	bf00      	nop
 801265c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801265e:	bc08      	pop	{r3}
 8012660:	469e      	mov	lr, r3
 8012662:	4770      	bx	lr
