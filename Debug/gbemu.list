
gbemu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f044  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b74  0800f244  0800f244  0001f244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdb8  0800fdb8  00020b38  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdb8  0800fdb8  0001fdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdc0  0800fdc0  00020b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdc0  0800fdc0  0001fdc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fdc4  0800fdc4  0001fdc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b38  20000000  0800fdc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005188  20000b38  08010900  00020b38  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20005cc0  08010900  00025cc0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020b38  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029fe5  00000000  00000000  00020b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000064d2  00000000  00000000  0004ab4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  00051020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  00052640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034b04  00000000  00000000  00053a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002084b  00000000  00000000  00088504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b1d2  00000000  00000000  000a8d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c3f21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d8  00000000  00000000  001c3f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000b38 	.word	0x20000b38
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f22c 	.word	0x0800f22c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000b3c 	.word	0x20000b3c
 800023c:	0800f22c 	.word	0x0800f22c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <bus_read>:
// 0xFE00 - 0xFE9F : Object Attribute Memory
// 0xFEA0 - 0xFEFF : Reserved - Unusable
// 0xFF00 - 0xFF7F : I/O Registers
// 0xFF80 - 0xFFFE : Zero Page

u8 bus_read(u16 address) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
    if (address < 0x8000) {
 80005e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db05      	blt.n	80005f6 <bus_read+0x1e>
        //ROM Data
        return cart_read(address);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fb65 	bl	8000cbc <cart_read>
 80005f2:	4603      	mov	r3, r0
 80005f4:	e054      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xA000) {
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80005fc:	d205      	bcs.n	800060a <bus_read+0x32>
        //Char/Map Data
        return ppu_vram_read(address);
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	4618      	mov	r0, r3
 8000602:	f004 f84b 	bl	800469c <ppu_vram_read>
 8000606:	4603      	mov	r3, r0
 8000608:	e04a      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xC000) {
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000610:	d205      	bcs.n	800061e <bus_read+0x46>
        //Cartridge RAM
        return cart_read(address);
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fb51 	bl	8000cbc <cart_read>
 800061a:	4603      	mov	r3, r0
 800061c:	e040      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xE000) {
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8000624:	d205      	bcs.n	8000632 <bus_read+0x5a>
        //WRAM (Working RAM)
        return wram_read(address);
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	4618      	mov	r0, r3
 800062a:	f005 f883 	bl	8005734 <wram_read>
 800062e:	4603      	mov	r3, r0
 8000630:	e036      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xFE00) {
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 8000638:	d201      	bcs.n	800063e <bus_read+0x66>
        //reserved echo ram...
        return 0;
 800063a:	2300      	movs	r3, #0
 800063c:	e030      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xFEA0) {
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	f64f 629f 	movw	r2, #65183	; 0xfe9f
 8000644:	4293      	cmp	r3, r2
 8000646:	d80c      	bhi.n	8000662 <bus_read+0x8a>
        //OAM
        if (dma_transferring()) {
 8000648:	f002 fbfc 	bl	8002e44 <dma_transferring>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <bus_read+0x7e>
            return 0xFF;
 8000652:	23ff      	movs	r3, #255	; 0xff
 8000654:	e024      	b.n	80006a0 <bus_read+0xc8>
        }

        return ppu_oam_read(address);
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	4618      	mov	r0, r3
 800065a:	f003 ffeb 	bl	8004634 <ppu_oam_read>
 800065e:	4603      	mov	r3, r0
 8000660:	e01e      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xFF00) {
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8000668:	d201      	bcs.n	800066e <bus_read+0x96>
        //reserved unusable...
        return 0;
 800066a:	2300      	movs	r3, #0
 800066c:	e018      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xFF80) {
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8000674:	4293      	cmp	r3, r2
 8000676:	d805      	bhi.n	8000684 <bus_read+0xac>
        //IO Registers...
        return io_read(address);
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	4618      	mov	r0, r3
 800067c:	f002 fff8 	bl	8003670 <io_read>
 8000680:	4603      	mov	r3, r0
 8000682:	e00d      	b.n	80006a0 <bus_read+0xc8>
    } else if (address == 0xFFFF) {
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800068a:	4293      	cmp	r3, r2
 800068c:	d103      	bne.n	8000696 <bus_read+0xbe>
        //CPU ENABLE REGISTER...
        return cpu_get_ie_register();
 800068e:	f000 fd5d 	bl	800114c <cpu_get_ie_register>
 8000692:	4603      	mov	r3, r0
 8000694:	e004      	b.n	80006a0 <bus_read+0xc8>
    }

    //NO_IMPL
    return hram_read(address);
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	4618      	mov	r0, r3
 800069a:	f005 f887 	bl	80057ac <hram_read>
 800069e:	4603      	mov	r3, r0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <bus_write>:

void bus_write(u16 address, u8 value) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	460a      	mov	r2, r1
 80006b2:	80fb      	strh	r3, [r7, #6]
 80006b4:	4613      	mov	r3, r2
 80006b6:	717b      	strb	r3, [r7, #5]
    if (address < 0x8000) {
 80006b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db06      	blt.n	80006ce <bus_write+0x26>
        //ROM Data
        cart_write(address, value);
 80006c0:	797a      	ldrb	r2, [r7, #5]
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fb3e 	bl	8000d48 <cart_write>
 80006cc:	e057      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xA000) {
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80006d4:	d206      	bcs.n	80006e4 <bus_write+0x3c>
        //Char/Map Data
        ppu_vram_write(address, value);
 80006d6:	797a      	ldrb	r2, [r7, #5]
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 ffc5 	bl	800466c <ppu_vram_write>
 80006e2:	e04c      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xC000) {
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80006ea:	d206      	bcs.n	80006fa <bus_write+0x52>
        //EXT-RAM
        cart_write(address, value);
 80006ec:	797a      	ldrb	r2, [r7, #5]
 80006ee:	88fb      	ldrh	r3, [r7, #6]
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fb28 	bl	8000d48 <cart_write>
 80006f8:	e041      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xE000) {
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8000700:	d206      	bcs.n	8000710 <bus_write+0x68>
        //WRAM
        wram_write(address, value);
 8000702:	797a      	ldrb	r2, [r7, #5]
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f005 f837 	bl	800577c <wram_write>
 800070e:	e036      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xFE00) {
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 8000716:	d332      	bcc.n	800077e <bus_write+0xd6>
        //reserved echo ram
    } else if (address < 0xFEA0) {
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	f64f 629f 	movw	r2, #65183	; 0xfe9f
 800071e:	4293      	cmp	r3, r2
 8000720:	d80b      	bhi.n	800073a <bus_write+0x92>
        //OAM
        if (dma_transferring()) {
 8000722:	f002 fb8f 	bl	8002e44 <dma_transferring>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d127      	bne.n	800077c <bus_write+0xd4>
            return;
        }
        
        ppu_oam_write(address, value);
 800072c:	797a      	ldrb	r2, [r7, #5]
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f003 ff5e 	bl	80045f4 <ppu_oam_write>
 8000738:	e021      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xFF00) {
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8000740:	d31d      	bcc.n	800077e <bus_write+0xd6>
        //unusable reserved
    } else if (address < 0xFF80) {
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8000748:	4293      	cmp	r3, r2
 800074a:	d806      	bhi.n	800075a <bus_write+0xb2>
        //IO Registers...
        io_write(address, value);
 800074c:	797a      	ldrb	r2, [r7, #5]
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f002 ffec 	bl	8003730 <io_write>
 8000758:	e011      	b.n	800077e <bus_write+0xd6>
    } else if (address == 0xFFFF) {
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000760:	4293      	cmp	r3, r2
 8000762:	d104      	bne.n	800076e <bus_write+0xc6>
        //CPU SET ENABLE REGISTER
        
        cpu_set_ie_register(value);
 8000764:	797b      	ldrb	r3, [r7, #5]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fcfc 	bl	8001164 <cpu_set_ie_register>
 800076c:	e007      	b.n	800077e <bus_write+0xd6>
    } else {
        hram_write(address, value);
 800076e:	797a      	ldrb	r2, [r7, #5]
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	4611      	mov	r1, r2
 8000774:	4618      	mov	r0, r3
 8000776:	f005 f82f 	bl	80057d8 <hram_write>
 800077a:	e000      	b.n	800077e <bus_write+0xd6>
            return;
 800077c:	bf00      	nop
    }
}
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <bus_write16>:
    u16 hi = bus_read(address + 1);

    return lo | (hi << 8);
}

void bus_write16(u16 address, u16 value) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	80fb      	strh	r3, [r7, #6]
 8000790:	4613      	mov	r3, r2
 8000792:	80bb      	strh	r3, [r7, #4]
    bus_write(address + 1, (value >> 8) & 0xFF);
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	3301      	adds	r3, #1
 8000798:	b29a      	uxth	r2, r3
 800079a:	88bb      	ldrh	r3, [r7, #4]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	b29b      	uxth	r3, r3
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	4619      	mov	r1, r3
 80007a4:	4610      	mov	r0, r2
 80007a6:	f7ff ff7f 	bl	80006a8 <bus_write>
    bus_write(address, value & 0xFF);
 80007aa:	88bb      	ldrh	r3, [r7, #4]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff78 	bl	80006a8 <bus_write>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <cart_need_save>:
    bool need_save; //should save battery backup.
} cart_context;

static cart_context ctx;

bool cart_need_save() {
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
    return ctx.need_save;
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <cart_need_save+0x14>)
 80007c6:	f893 345d 	ldrb.w	r3, [r3, #1117]	; 0x45d
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	20000b54 	.word	0x20000b54

080007d8 <cart_mbc1>:

bool cart_mbc1() {
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
    return BETWEEN(ctx.header->type, 1, 3);
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <cart_mbc1+0x38>)
 80007de:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80007e2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d008      	beq.n	80007fc <cart_mbc1+0x24>
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <cart_mbc1+0x38>)
 80007ec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80007f0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d801      	bhi.n	80007fc <cart_mbc1+0x24>
 80007f8:	2301      	movs	r3, #1
 80007fa:	e000      	b.n	80007fe <cart_mbc1+0x26>
 80007fc:	2300      	movs	r3, #0
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	b2db      	uxtb	r3, r3
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000b54 	.word	0x20000b54

08000814 <cart_battery>:

bool cart_battery() {
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
    //mbc1 only for now...
    return ctx.header->type == 3;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <cart_battery+0x24>)
 800081a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800081e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000822:	2b03      	cmp	r3, #3
 8000824:	bf0c      	ite	eq
 8000826:	2301      	moveq	r3, #1
 8000828:	2300      	movne	r3, #0
 800082a:	b2db      	uxtb	r3, r3
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000b54 	.word	0x20000b54

0800083c <cart_lic_name>:
    [0x97] = "Kaneko",
    [0x99] = "Pack in soft",
    [0xA4] = "Konami (Yu-Gi-Oh!)"
};

const char *cart_lic_name() {
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
    if (ctx.header->new_lic_code <= 0xA4) {
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <cart_lic_name+0x34>)
 8000842:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000846:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800084a:	2ba4      	cmp	r3, #164	; 0xa4
 800084c:	d809      	bhi.n	8000862 <cart_lic_name+0x26>
        return LIC_CODE[ctx.header->lic_code];
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <cart_lic_name+0x34>)
 8000850:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000854:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8000858:	461a      	mov	r2, r3
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <cart_lic_name+0x38>)
 800085c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000860:	e000      	b.n	8000864 <cart_lic_name+0x28>
    }

    return "UNKNOWN";
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <cart_lic_name+0x3c>)
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000b54 	.word	0x20000b54
 8000874:	2000008c 	.word	0x2000008c
 8000878:	0800f6c0 	.word	0x0800f6c0

0800087c <cart_type_name>:

const char *cart_type_name() {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
    if (ctx.header->type <= 0x22) {
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <cart_type_name+0x34>)
 8000882:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000886:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800088a:	2b22      	cmp	r3, #34	; 0x22
 800088c:	d809      	bhi.n	80008a2 <cart_type_name+0x26>
        return ROM_TYPES[ctx.header->type];
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <cart_type_name+0x34>)
 8000890:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000894:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000898:	461a      	mov	r2, r3
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <cart_type_name+0x38>)
 800089c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a0:	e000      	b.n	80008a4 <cart_type_name+0x28>
    }

    return "UNKNOWN";
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <cart_type_name+0x3c>)
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000b54 	.word	0x20000b54
 80008b4:	20000000 	.word	0x20000000
 80008b8:	0800f6c0 	.word	0x0800f6c0

080008bc <cart_setup_banking>:

void cart_setup_banking() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
    for (int i=0; i<16; i++) {
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	e04c      	b.n	8000962 <cart_setup_banking+0xa6>
        ctx.ram_banks[i] = 0;
 80008c8:	4a30      	ldr	r2, [pc, #192]	; (800098c <cart_setup_banking+0xd0>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f503 7383 	add.w	r3, r3, #262	; 0x106
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]

        if ((ctx.header->ram_size == 2 && i == 0) ||
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <cart_setup_banking+0xd0>)
 80008da:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80008de:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d102      	bne.n	80008ec <cart_setup_banking+0x30>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d01d      	beq.n	8000928 <cart_setup_banking+0x6c>
            (ctx.header->ram_size == 3 && i < 4) || 
 80008ec:	4b27      	ldr	r3, [pc, #156]	; (800098c <cart_setup_banking+0xd0>)
 80008ee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80008f2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
        if ((ctx.header->ram_size == 2 && i == 0) ||
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d102      	bne.n	8000900 <cart_setup_banking+0x44>
            (ctx.header->ram_size == 3 && i < 4) || 
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	dd13      	ble.n	8000928 <cart_setup_banking+0x6c>
            (ctx.header->ram_size == 4 && i < 16) || 
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <cart_setup_banking+0xd0>)
 8000902:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000906:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
            (ctx.header->ram_size == 3 && i < 4) || 
 800090a:	2b04      	cmp	r3, #4
 800090c:	d102      	bne.n	8000914 <cart_setup_banking+0x58>
            (ctx.header->ram_size == 4 && i < 16) || 
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	dd09      	ble.n	8000928 <cart_setup_banking+0x6c>
            (ctx.header->ram_size == 5 && i < 8)) {
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <cart_setup_banking+0xd0>)
 8000916:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800091a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
            (ctx.header->ram_size == 4 && i < 16) || 
 800091e:	2b05      	cmp	r3, #5
 8000920:	d11c      	bne.n	800095c <cart_setup_banking+0xa0>
            (ctx.header->ram_size == 5 && i < 8)) {
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b07      	cmp	r3, #7
 8000926:	dc19      	bgt.n	800095c <cart_setup_banking+0xa0>
            ctx.ram_banks[i] = malloc(0x2000);
 8000928:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800092c:	f00d fbd6 	bl	800e0dc <malloc>
 8000930:	4603      	mov	r3, r0
 8000932:	4619      	mov	r1, r3
 8000934:	4a15      	ldr	r2, [pc, #84]	; (800098c <cart_setup_banking+0xd0>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f503 7383 	add.w	r3, r3, #262	; 0x106
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	6059      	str	r1, [r3, #4]
            memset(ctx.ram_banks[i], 0, 0x2000);
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <cart_setup_banking+0xd0>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f503 7383 	add.w	r3, r3, #262	; 0x106
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f00d fbde 	bl	800e118 <memset>
    for (int i=0; i<16; i++) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3301      	adds	r3, #1
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	ddaf      	ble.n	80008c8 <cart_setup_banking+0xc>
        }
    }

    ctx.ram_bank = ctx.ram_banks[0];
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <cart_setup_banking+0xd0>)
 800096a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800096e:	4a07      	ldr	r2, [pc, #28]	; (800098c <cart_setup_banking+0xd0>)
 8000970:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
    ctx.rom_bank_x = ctx.rom_data + 0x4000; //rom bank 1
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <cart_setup_banking+0xd0>)
 8000976:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800097a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800097e:	4a03      	ldr	r2, [pc, #12]	; (800098c <cart_setup_banking+0xd0>)
 8000980:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000b54 	.word	0x20000b54

08000990 <cart_load>:

bool cart_load(char *cart) {
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  snprintf(ctx.filename, sizeof(ctx.filename), "%s", cart);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a72      	ldr	r2, [pc, #456]	; (8000b64 <cart_load+0x1d4>)
 800099c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a0:	4871      	ldr	r0, [pc, #452]	; (8000b68 <cart_load+0x1d8>)
 80009a2:	f00e f89d 	bl	800eae0 <sniprintf>

  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80009a6:	2200      	movs	r2, #0
 80009a8:	4970      	ldr	r1, [pc, #448]	; (8000b6c <cart_load+0x1dc>)
 80009aa:	4871      	ldr	r0, [pc, #452]	; (8000b70 <cart_load+0x1e0>)
 80009ac:	f00c f9e0 	bl	800cd70 <f_mount>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <cart_load+0x2a>
  {
      Error_Handler();
 80009b6:	f003 fd57 	bl	8004468 <Error_Handler>
  }

  //Open file for writing (Create)
  if(f_open(&SDFile, "Tetris.gb", FA_READ) != FR_OK)
 80009ba:	2201      	movs	r2, #1
 80009bc:	496d      	ldr	r1, [pc, #436]	; (8000b74 <cart_load+0x1e4>)
 80009be:	486e      	ldr	r0, [pc, #440]	; (8000b78 <cart_load+0x1e8>)
 80009c0:	f00c fa1c 	bl	800cdfc <f_open>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d005      	beq.n	80009d6 <cart_load+0x46>
  {
      printf("Failed to open: %s\n", cart);
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	486b      	ldr	r0, [pc, #428]	; (8000b7c <cart_load+0x1ec>)
 80009ce:	f00d ff55 	bl	800e87c <iprintf>
      Error_Handler();
 80009d2:	f003 fd49 	bl	8004468 <Error_Handler>
  }

  printf("Opened: %s\n", ctx.filename);
 80009d6:	4964      	ldr	r1, [pc, #400]	; (8000b68 <cart_load+0x1d8>)
 80009d8:	4869      	ldr	r0, [pc, #420]	; (8000b80 <cart_load+0x1f0>)
 80009da:	f00d ff4f 	bl	800e87c <iprintf>


  ctx.rom_size = f_size(&SDFile);
 80009de:	4b66      	ldr	r3, [pc, #408]	; (8000b78 <cart_load+0x1e8>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	4a61      	ldr	r2, [pc, #388]	; (8000b68 <cart_load+0x1d8>)
 80009e4:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400


  ctx.rom_data = malloc(ctx.rom_size);
 80009e8:	4b5f      	ldr	r3, [pc, #380]	; (8000b68 <cart_load+0x1d8>)
 80009ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00d fb74 	bl	800e0dc <malloc>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b5b      	ldr	r3, [pc, #364]	; (8000b68 <cart_load+0x1d8>)
 80009fa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  res = f_read(&SDFile, ctx.rom_data, ctx.rom_size, (void *)&bytesread);
 80009fe:	4b5a      	ldr	r3, [pc, #360]	; (8000b68 <cart_load+0x1d8>)
 8000a00:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 8000a04:	4b58      	ldr	r3, [pc, #352]	; (8000b68 <cart_load+0x1d8>)
 8000a06:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000a0a:	4b5e      	ldr	r3, [pc, #376]	; (8000b84 <cart_load+0x1f4>)
 8000a0c:	485a      	ldr	r0, [pc, #360]	; (8000b78 <cart_load+0x1e8>)
 8000a0e:	f00c fbb3 	bl	800d178 <f_read>
 8000a12:	4603      	mov	r3, r0
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b5c      	ldr	r3, [pc, #368]	; (8000b88 <cart_load+0x1f8>)
 8000a18:	701a      	strb	r2, [r3, #0]
  if(res != FR_OK)
 8000a1a:	4b5b      	ldr	r3, [pc, #364]	; (8000b88 <cart_load+0x1f8>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <cart_load+0x98>
  {
      Error_Handler();
 8000a22:	f003 fd21 	bl	8004468 <Error_Handler>
 8000a26:	e002      	b.n	8000a2e <cart_load+0x9e>
  }
  else
  {
      f_close(&SDFile);
 8000a28:	4853      	ldr	r0, [pc, #332]	; (8000b78 <cart_load+0x1e8>)
 8000a2a:	f00c fd62 	bl	800d4f2 <f_close>
  }

  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	484f      	ldr	r0, [pc, #316]	; (8000b70 <cart_load+0x1e0>)
 8000a34:	f00c f99c 	bl	800cd70 <f_mount>

  ctx.header = (rom_header *)(ctx.rom_data + 0x100);
 8000a38:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <cart_load+0x1d8>)
 8000a3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000a3e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a42:	4a49      	ldr	r2, [pc, #292]	; (8000b68 <cart_load+0x1d8>)
 8000a44:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
  ctx.header->title[15] = 0;
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <cart_load+0x1d8>)
 8000a4a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  ctx.battery = cart_battery();
 8000a54:	f7ff fede 	bl	8000814 <cart_battery>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b42      	ldr	r3, [pc, #264]	; (8000b68 <cart_load+0x1d8>)
 8000a5e:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
  ctx.need_save = false;
 8000a62:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <cart_load+0x1d8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d

  printf("Cartridge Loaded:\n");
 8000a6a:	4848      	ldr	r0, [pc, #288]	; (8000b8c <cart_load+0x1fc>)
 8000a6c:	f00d ff8c 	bl	800e988 <puts>
  printf("\t Title    : %s\n", ctx.header->title);
 8000a70:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <cart_load+0x1d8>)
 8000a72:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a76:	3334      	adds	r3, #52	; 0x34
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4845      	ldr	r0, [pc, #276]	; (8000b90 <cart_load+0x200>)
 8000a7c:	f00d fefe 	bl	800e87c <iprintf>
  printf("\t Type     : %2.2X (%s)\n", ctx.header->type, cart_type_name());
 8000a80:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <cart_load+0x1d8>)
 8000a82:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a86:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000a8a:	461c      	mov	r4, r3
 8000a8c:	f7ff fef6 	bl	800087c <cart_type_name>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	4621      	mov	r1, r4
 8000a96:	483f      	ldr	r0, [pc, #252]	; (8000b94 <cart_load+0x204>)
 8000a98:	f00d fef0 	bl	800e87c <iprintf>
  printf("\t ROM Size : %d KB\n", 32 << ctx.header->rom_size);
 8000a9c:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <cart_load+0x1d8>)
 8000a9e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000aa2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	4093      	lsls	r3, r2
 8000aac:	4619      	mov	r1, r3
 8000aae:	483a      	ldr	r0, [pc, #232]	; (8000b98 <cart_load+0x208>)
 8000ab0:	f00d fee4 	bl	800e87c <iprintf>
  printf("\t RAM Size : %2.2X\n", ctx.header->ram_size);
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <cart_load+0x1d8>)
 8000ab6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000aba:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4836      	ldr	r0, [pc, #216]	; (8000b9c <cart_load+0x20c>)
 8000ac2:	f00d fedb 	bl	800e87c <iprintf>
  printf("\t LIC Code : %2.2X (%s)\n", ctx.header->lic_code, cart_lic_name());
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <cart_load+0x1d8>)
 8000ac8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000acc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8000ad0:	461c      	mov	r4, r3
 8000ad2:	f7ff feb3 	bl	800083c <cart_lic_name>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4621      	mov	r1, r4
 8000adc:	4830      	ldr	r0, [pc, #192]	; (8000ba0 <cart_load+0x210>)
 8000ade:	f00d fecd 	bl	800e87c <iprintf>
  printf("\t ROM Vers : %2.2X\n", ctx.header->version);
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <cart_load+0x1d8>)
 8000ae4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000ae8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000aec:	4619      	mov	r1, r3
 8000aee:	482d      	ldr	r0, [pc, #180]	; (8000ba4 <cart_load+0x214>)
 8000af0:	f00d fec4 	bl	800e87c <iprintf>

  cart_setup_banking();
 8000af4:	f7ff fee2 	bl	80008bc <cart_setup_banking>

  u16 x = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	81fb      	strh	r3, [r7, #14]
  for (u16 i=0x0134; i<=0x014C; i++) {
 8000afc:	f44f 739a 	mov.w	r3, #308	; 0x134
 8000b00:	81bb      	strh	r3, [r7, #12]
 8000b02:	e00e      	b.n	8000b22 <cart_load+0x192>
      x = x - ctx.rom_data[i] - 1;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <cart_load+0x1d8>)
 8000b06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000b0a:	89bb      	ldrh	r3, [r7, #12]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	89fa      	ldrh	r2, [r7, #14]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	81fb      	strh	r3, [r7, #14]
  for (u16 i=0x0134; i<=0x014C; i++) {
 8000b1c:	89bb      	ldrh	r3, [r7, #12]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	81bb      	strh	r3, [r7, #12]
 8000b22:	89bb      	ldrh	r3, [r7, #12]
 8000b24:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 8000b28:	d9ec      	bls.n	8000b04 <cart_load+0x174>
  }

  printf("\t Checksum : %2.2X (%s)\n", ctx.header->checksum, (x & 0xFF) ? "PASSED" : "FAILED");
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <cart_load+0x1d8>)
 8000b2c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000b30:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000b34:	4619      	mov	r1, r3
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <cart_load+0x1b2>
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <cart_load+0x218>)
 8000b40:	e000      	b.n	8000b44 <cart_load+0x1b4>
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <cart_load+0x21c>)
 8000b44:	461a      	mov	r2, r3
 8000b46:	481a      	ldr	r0, [pc, #104]	; (8000bb0 <cart_load+0x220>)
 8000b48:	f00d fe98 	bl	800e87c <iprintf>

  if (ctx.battery) {
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <cart_load+0x1d8>)
 8000b4e:	f893 345c 	ldrb.w	r3, [r3, #1116]	; 0x45c
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <cart_load+0x1ca>
      cart_battery_load();
 8000b56:	f000 f82d 	bl	8000bb4 <cart_battery_load>
  }

  return true;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	0800f6c8 	.word	0x0800f6c8
 8000b68:	20000b54 	.word	0x20000b54
 8000b6c:	2000584c 	.word	0x2000584c
 8000b70:	20005a80 	.word	0x20005a80
 8000b74:	0800f6cc 	.word	0x0800f6cc
 8000b78:	20005850 	.word	0x20005850
 8000b7c:	0800f6d8 	.word	0x0800f6d8
 8000b80:	0800f6ec 	.word	0x0800f6ec
 8000b84:	20005650 	.word	0x20005650
 8000b88:	20005654 	.word	0x20005654
 8000b8c:	0800f6f8 	.word	0x0800f6f8
 8000b90:	0800f70c 	.word	0x0800f70c
 8000b94:	0800f720 	.word	0x0800f720
 8000b98:	0800f73c 	.word	0x0800f73c
 8000b9c:	0800f750 	.word	0x0800f750
 8000ba0:	0800f764 	.word	0x0800f764
 8000ba4:	0800f780 	.word	0x0800f780
 8000ba8:	0800f794 	.word	0x0800f794
 8000bac:	0800f79c 	.word	0x0800f79c
 8000bb0:	0800f7a4 	.word	0x0800f7a4

08000bb4 <cart_battery_load>:

void cart_battery_load() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000bba:	af00      	add	r7, sp, #0
    if (!ctx.ram_bank) {
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <cart_battery_load+0x70>)
 8000bbe:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d028      	beq.n	8000c18 <cart_battery_load+0x64>
        return;
    }

    char fn[1048];
    sprintf(fn, "%s.battery", ctx.filename);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <cart_battery_load+0x70>)
 8000bca:	4917      	ldr	r1, [pc, #92]	; (8000c28 <cart_battery_load+0x74>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00d ffbb 	bl	800eb48 <siprintf>
    FILE *fp = fopen(fn, "rb");
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4915      	ldr	r1, [pc, #84]	; (8000c2c <cart_battery_load+0x78>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f00c ff9e 	bl	800db18 <fopen>
 8000bdc:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c

    if (!fp) {
 8000be0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d108      	bne.n	8000bfa <cart_battery_load+0x46>
        fprintf(stderr, "FAILED TO OPEN: %s\n", fn);
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <cart_battery_load+0x7c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	1d3a      	adds	r2, r7, #4
 8000bf0:	4910      	ldr	r1, [pc, #64]	; (8000c34 <cart_battery_load+0x80>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f00c ff98 	bl	800db28 <fiprintf>
        return;
 8000bf8:	e00f      	b.n	8000c1a <cart_battery_load+0x66>
    }

    fread(ctx.ram_bank, 0x2000, 1, fp);
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <cart_battery_load+0x70>)
 8000bfc:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 8000c00:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	f00d f813 	bl	800dc34 <fread>
    fclose(fp);
 8000c0e:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8000c12:	f00c fd7b 	bl	800d70c <fclose>
 8000c16:	e000      	b.n	8000c1a <cart_battery_load+0x66>
        return;
 8000c18:	bf00      	nop
}
 8000c1a:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000b54 	.word	0x20000b54
 8000c28:	0800f7c0 	.word	0x0800f7c0
 8000c2c:	0800f7cc 	.word	0x0800f7cc
 8000c30:	20000ad4 	.word	0x20000ad4
 8000c34:	0800f7d0 	.word	0x0800f7d0

08000c38 <cart_battery_save>:

void cart_battery_save() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000c3e:	af00      	add	r7, sp, #0
    if (!ctx.ram_bank) {
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <cart_battery_save+0x70>)
 8000c42:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d028      	beq.n	8000c9c <cart_battery_save+0x64>
        return;
    }

    char fn[1048];
    sprintf(fn, "%s.battery", ctx.filename);
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <cart_battery_save+0x70>)
 8000c4e:	4917      	ldr	r1, [pc, #92]	; (8000cac <cart_battery_save+0x74>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f00d ff79 	bl	800eb48 <siprintf>
    FILE *fp = fopen(fn, "wb");
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4915      	ldr	r1, [pc, #84]	; (8000cb0 <cart_battery_save+0x78>)
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f00c ff5c 	bl	800db18 <fopen>
 8000c60:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c

    if (!fp) {
 8000c64:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d108      	bne.n	8000c7e <cart_battery_save+0x46>
        fprintf(stderr, "FAILED TO OPEN: %s\n", fn);
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <cart_battery_save+0x7c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	1d3a      	adds	r2, r7, #4
 8000c74:	4910      	ldr	r1, [pc, #64]	; (8000cb8 <cart_battery_save+0x80>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f00c ff56 	bl	800db28 <fiprintf>
        return;
 8000c7c:	e00f      	b.n	8000c9e <cart_battery_save+0x66>
    }

    fwrite(ctx.ram_bank, 0x2000, 1, fp);
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <cart_battery_save+0x70>)
 8000c80:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 8000c84:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8e:	f00d f98b 	bl	800dfa8 <fwrite>
    fclose(fp);
 8000c92:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8000c96:	f00c fd39 	bl	800d70c <fclose>
 8000c9a:	e000      	b.n	8000c9e <cart_battery_save+0x66>
        return;
 8000c9c:	bf00      	nop
}
 8000c9e:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000b54 	.word	0x20000b54
 8000cac:	0800f7c0 	.word	0x0800f7c0
 8000cb0:	0800f7e4 	.word	0x0800f7e4
 8000cb4:	20000ad4 	.word	0x20000ad4
 8000cb8:	0800f7d0 	.word	0x0800f7d0

08000cbc <cart_read>:

u8 cart_read(u16 address) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
    if (!cart_mbc1() || address < 0x4000) {
 8000cc6:	f7ff fd87 	bl	80007d8 <cart_mbc1>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f083 0301 	eor.w	r3, r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <cart_read+0x22>
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cdc:	d206      	bcs.n	8000cec <cart_read+0x30>
        return ctx.rom_data[address];
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <cart_read+0x88>)
 8000ce0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	e027      	b.n	8000d3c <cart_read+0x80>
    }

    if ((address & 0xE000) == 0xA000) {
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000cf2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000cf6:	d119      	bne.n	8000d2c <cart_read+0x70>
        if (!ctx.ram_enabled) {
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <cart_read+0x88>)
 8000cfa:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000cfe:	f083 0301 	eor.w	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <cart_read+0x50>
            return 0xFF;
 8000d08:	23ff      	movs	r3, #255	; 0xff
 8000d0a:	e017      	b.n	8000d3c <cart_read+0x80>
        }

        if (!ctx.ram_bank) {
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <cart_read+0x88>)
 8000d0e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <cart_read+0x5e>
            return 0xFF;
 8000d16:	23ff      	movs	r3, #255	; 0xff
 8000d18:	e010      	b.n	8000d3c <cart_read+0x80>
        }

        return ctx.ram_bank[address - 0xA000];
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <cart_read+0x88>)
 8000d1c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
 8000d26:	4413      	add	r3, r2
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	e007      	b.n	8000d3c <cart_read+0x80>
    }

    return ctx.rom_bank_x[address - 0x4000];
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <cart_read+0x88>)
 8000d2e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000d38:	4413      	add	r3, r2
 8000d3a:	781b      	ldrb	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000b54 	.word	0x20000b54

08000d48 <cart_write>:

void cart_write(u16 address, u8 value) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	80fb      	strh	r3, [r7, #6]
 8000d54:	4613      	mov	r3, r2
 8000d56:	717b      	strb	r3, [r7, #5]
    if (!cart_mbc1()) {
 8000d58:	f7ff fd3e 	bl	80007d8 <cart_mbc1>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f083 0301 	eor.w	r3, r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f040 80a8 	bne.w	8000eba <cart_write+0x172>
        return;
    }

    if (address < 0x2000) {
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d70:	d20a      	bcs.n	8000d88 <cart_write+0x40>
        ctx.ram_enabled = ((value & 0xF) == 0xA);
 8000d72:	797b      	ldrb	r3, [r7, #5]
 8000d74:	f003 030f 	and.w	r3, r3, #15
 8000d78:	2b0a      	cmp	r3, #10
 8000d7a:	bf0c      	ite	eq
 8000d7c:	2301      	moveq	r3, #1
 8000d7e:	2300      	movne	r3, #0
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <cart_write+0x184>)
 8000d84:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    }

    if ((address & 0xE000) == 0x2000) {
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d92:	d117      	bne.n	8000dc4 <cart_write+0x7c>
        //rom bank number
        if (value == 0) {
 8000d94:	797b      	ldrb	r3, [r7, #5]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <cart_write+0x56>
            value = 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	717b      	strb	r3, [r7, #5]
        }

        value &= 0b11111;
 8000d9e:	797b      	ldrb	r3, [r7, #5]
 8000da0:	f003 031f 	and.w	r3, r3, #31
 8000da4:	717b      	strb	r3, [r7, #5]

        ctx.rom_bank_value = value;
 8000da6:	4a49      	ldr	r2, [pc, #292]	; (8000ecc <cart_write+0x184>)
 8000da8:	797b      	ldrb	r3, [r7, #5]
 8000daa:	f882 3415 	strb.w	r3, [r2, #1045]	; 0x415
        ctx.rom_bank_x = ctx.rom_data + (0x4000 * ctx.rom_bank_value);
 8000dae:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <cart_write+0x184>)
 8000db0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000db4:	4a45      	ldr	r2, [pc, #276]	; (8000ecc <cart_write+0x184>)
 8000db6:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8000dba:	0392      	lsls	r2, r2, #14
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a43      	ldr	r2, [pc, #268]	; (8000ecc <cart_write+0x184>)
 8000dc0:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
    }

    if ((address & 0xE000) == 0x4000) {
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dce:	d11e      	bne.n	8000e0e <cart_write+0xc6>
        //ram bank number
        ctx.ram_bank_value = value & 0b11;
 8000dd0:	797b      	ldrb	r3, [r7, #5]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <cart_write+0x184>)
 8000dda:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

        if (ctx.ram_banking) {
 8000dde:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <cart_write+0x184>)
 8000de0:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d012      	beq.n	8000e0e <cart_write+0xc6>
            if (cart_need_save()) {
 8000de8:	f7ff fcea 	bl	80007c0 <cart_need_save>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <cart_write+0xae>
                cart_battery_save();
 8000df2:	f7ff ff21 	bl	8000c38 <cart_battery_save>
            }

            ctx.ram_bank = ctx.ram_banks[ctx.ram_bank_value];
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <cart_write+0x184>)
 8000df8:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 8000dfc:	4a33      	ldr	r2, [pc, #204]	; (8000ecc <cart_write+0x184>)
 8000dfe:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	4a30      	ldr	r2, [pc, #192]	; (8000ecc <cart_write+0x184>)
 8000e0a:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
        }
    }

    if ((address & 0xE000) == 0x6000) {
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000e14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8000e18:	d129      	bne.n	8000e6e <cart_write+0x126>
        //banking mode select
        ctx.banking_mode = value & 1;
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <cart_write+0x184>)
 8000e24:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        ctx.ram_banking = ctx.banking_mode;
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <cart_write+0x184>)
 8000e2a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bf14      	ite	ne
 8000e32:	2301      	movne	r3, #1
 8000e34:	2300      	moveq	r3, #0
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <cart_write+0x184>)
 8000e3a:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d

        if (ctx.ram_banking) {
 8000e3e:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <cart_write+0x184>)
 8000e40:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d012      	beq.n	8000e6e <cart_write+0x126>
            if (cart_need_save()) {
 8000e48:	f7ff fcba 	bl	80007c0 <cart_need_save>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <cart_write+0x10e>
                cart_battery_save();
 8000e52:	f7ff fef1 	bl	8000c38 <cart_battery_save>
            }
            
            ctx.ram_bank = ctx.ram_banks[ctx.ram_bank_value];
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <cart_write+0x184>)
 8000e58:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <cart_write+0x184>)
 8000e5e:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <cart_write+0x184>)
 8000e6a:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
        }
    }

    if ((address & 0xE000) == 0xA000) {
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000e74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000e78:	d124      	bne.n	8000ec4 <cart_write+0x17c>
        if (!ctx.ram_enabled) {
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <cart_write+0x184>)
 8000e7c:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000e80:	f083 0301 	eor.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d119      	bne.n	8000ebe <cart_write+0x176>
            return;
        }

        if (!ctx.ram_bank) {
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <cart_write+0x184>)
 8000e8c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d016      	beq.n	8000ec2 <cart_write+0x17a>
            return;
        }

        ctx.ram_bank[address - 0xA000] = value;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <cart_write+0x184>)
 8000e96:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
 8000ea0:	4413      	add	r3, r2
 8000ea2:	797a      	ldrb	r2, [r7, #5]
 8000ea4:	701a      	strb	r2, [r3, #0]

        if (ctx.battery) {
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <cart_write+0x184>)
 8000ea8:	f893 345c 	ldrb.w	r3, [r3, #1116]	; 0x45c
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d009      	beq.n	8000ec4 <cart_write+0x17c>
            ctx.need_save = true;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <cart_write+0x184>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
 8000eb8:	e004      	b.n	8000ec4 <cart_write+0x17c>
        return;
 8000eba:	bf00      	nop
 8000ebc:	e002      	b.n	8000ec4 <cart_write+0x17c>
            return;
 8000ebe:	bf00      	nop
 8000ec0:	e000      	b.n	8000ec4 <cart_write+0x17c>
            return;
 8000ec2:	bf00      	nop
        }
    }
}
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000b54 	.word	0x20000b54

08000ed0 <cpu_init>:

cpu_context ctx = {0};

#define CPU_DEBUG 1

void cpu_init() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
    ctx.regs.pc = 0x100;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <cpu_init+0x5c>)
 8000ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eda:	811a      	strh	r2, [r3, #8]
    ctx.regs.sp = 0xFFFE;
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <cpu_init+0x5c>)
 8000ede:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ee2:	815a      	strh	r2, [r3, #10]
    *((short *)&ctx.regs.a) = 0xB001;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <cpu_init+0x5c>)
 8000ee6:	f24b 0201 	movw	r2, #45057	; 0xb001
 8000eea:	801a      	strh	r2, [r3, #0]
    *((short *)&ctx.regs.b) = 0x1300;
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <cpu_init+0x60>)
 8000eee:	f44f 5298 	mov.w	r2, #4864	; 0x1300
 8000ef2:	801a      	strh	r2, [r3, #0]
    *((short *)&ctx.regs.d) = 0xD800;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <cpu_init+0x64>)
 8000ef6:	f44f 4258 	mov.w	r2, #55296	; 0xd800
 8000efa:	801a      	strh	r2, [r3, #0]
    *((short *)&ctx.regs.h) = 0x4D01;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <cpu_init+0x68>)
 8000efe:	f644 5201 	movw	r2, #19713	; 0x4d01
 8000f02:	801a      	strh	r2, [r3, #0]
    ctx.ie_register = 0;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <cpu_init+0x5c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	771a      	strb	r2, [r3, #28]
    ctx.int_flags = 0;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <cpu_init+0x5c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	775a      	strb	r2, [r3, #29]
    ctx.int_master_enabled = false;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <cpu_init+0x5c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	769a      	strb	r2, [r3, #26]
    ctx.enabling_ime = false;
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <cpu_init+0x5c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	76da      	strb	r2, [r3, #27]

    timer_get_context()->div = 0xABCC;
 8000f1c:	f004 ffa4 	bl	8005e68 <timer_get_context>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f64a 32cc 	movw	r2, #43980	; 0xabcc
 8000f26:	801a      	strh	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000fb4 	.word	0x20000fb4
 8000f30:	20000fb6 	.word	0x20000fb6
 8000f34:	20000fb8 	.word	0x20000fb8
 8000f38:	20000fba 	.word	0x20000fba

08000f3c <fetch_instruction>:

static void fetch_instruction() {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
    ctx.cur_opcode = bus_read(ctx.regs.pc++);
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <fetch_instruction+0x34>)
 8000f42:	891b      	ldrh	r3, [r3, #8]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	b291      	uxth	r1, r2
 8000f48:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <fetch_instruction+0x34>)
 8000f4a:	8111      	strh	r1, [r2, #8]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fb43 	bl	80005d8 <bus_read>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <fetch_instruction+0x34>)
 8000f58:	745a      	strb	r2, [r3, #17]
    ctx.cur_inst = instruction_by_opcode(ctx.cur_opcode);
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <fetch_instruction+0x34>)
 8000f5c:	7c5b      	ldrb	r3, [r3, #17]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 f8de 	bl	8003120 <instruction_by_opcode>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a02      	ldr	r2, [pc, #8]	; (8000f70 <fetch_instruction+0x34>)
 8000f68:	6153      	str	r3, [r2, #20]
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000fb4 	.word	0x20000fb4

08000f74 <execute>:

void fetch_data();

static void execute() {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
    IN_PROC proc = inst_get_processor(ctx.cur_inst->type);
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <execute+0x40>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fcb7 	bl	80028f4 <inst_get_processor>
 8000f86:	6078      	str	r0, [r7, #4]

    if (!proc) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10b      	bne.n	8000fa6 <execute+0x32>
        NO_IMPL
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <execute+0x44>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2214      	movs	r2, #20
 8000f96:	2101      	movs	r1, #1
 8000f98:	4808      	ldr	r0, [pc, #32]	; (8000fbc <execute+0x48>)
 8000f9a:	f00d f805 	bl	800dfa8 <fwrite>
 8000f9e:	f06f 0004 	mvn.w	r0, #4
 8000fa2:	f00c fb33 	bl	800d60c <exit>
    }

    proc(&ctx);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <execute+0x40>)
 8000faa:	4798      	blx	r3
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000fb4 	.word	0x20000fb4
 8000fb8:	20000ad4 	.word	0x20000ad4
 8000fbc:	0800f7e8 	.word	0x0800f7e8

08000fc0 <cpu_step>:

bool cpu_step() {
 8000fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc4:	b098      	sub	sp, #96	; 0x60
 8000fc6:	af0a      	add	r7, sp, #40	; 0x28
    
    if (!ctx.halted) {
 8000fc8:	4b5c      	ldr	r3, [pc, #368]	; (800113c <cpu_step+0x17c>)
 8000fca:	7e1b      	ldrb	r3, [r3, #24]
 8000fcc:	f083 0301 	eor.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 8090 	beq.w	80010f8 <cpu_step+0x138>
        u16 pc = ctx.regs.pc;
 8000fd8:	4b58      	ldr	r3, [pc, #352]	; (800113c <cpu_step+0x17c>)
 8000fda:	891b      	ldrh	r3, [r3, #8]
 8000fdc:	86fb      	strh	r3, [r7, #54]	; 0x36

        fetch_instruction();
 8000fde:	f7ff ffad 	bl	8000f3c <fetch_instruction>
        emu_cycles(1);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f001 ffc0 	bl	8002f68 <emu_cycles>
        fetch_data();
 8000fe8:	f000 f8e0 	bl	80011ac <fetch_data>

#if CPU_DEBUG == 1
        char flags[16];
        sprintf(flags, "%c%c%c%c", 
            ctx.regs.f & (1 << 7) ? 'Z' : '-',
 8000fec:	4b53      	ldr	r3, [pc, #332]	; (800113c <cpu_step+0x17c>)
 8000fee:	785b      	ldrb	r3, [r3, #1]
 8000ff0:	b25b      	sxtb	r3, r3
        sprintf(flags, "%c%c%c%c", 
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	da01      	bge.n	8000ffa <cpu_step+0x3a>
 8000ff6:	215a      	movs	r1, #90	; 0x5a
 8000ff8:	e000      	b.n	8000ffc <cpu_step+0x3c>
 8000ffa:	212d      	movs	r1, #45	; 0x2d
            ctx.regs.f & (1 << 6) ? 'N' : '-',
 8000ffc:	4b4f      	ldr	r3, [pc, #316]	; (800113c <cpu_step+0x17c>)
 8000ffe:	785b      	ldrb	r3, [r3, #1]
 8001000:	f003 0340 	and.w	r3, r3, #64	; 0x40
        sprintf(flags, "%c%c%c%c", 
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <cpu_step+0x4c>
 8001008:	244e      	movs	r4, #78	; 0x4e
 800100a:	e000      	b.n	800100e <cpu_step+0x4e>
 800100c:	242d      	movs	r4, #45	; 0x2d
            ctx.regs.f & (1 << 5) ? 'H' : '-',
 800100e:	4b4b      	ldr	r3, [pc, #300]	; (800113c <cpu_step+0x17c>)
 8001010:	785b      	ldrb	r3, [r3, #1]
 8001012:	f003 0320 	and.w	r3, r3, #32
        sprintf(flags, "%c%c%c%c", 
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <cpu_step+0x5e>
 800101a:	2348      	movs	r3, #72	; 0x48
 800101c:	e000      	b.n	8001020 <cpu_step+0x60>
 800101e:	232d      	movs	r3, #45	; 0x2d
            ctx.regs.f & (1 << 4) ? 'C' : '-'
 8001020:	4a46      	ldr	r2, [pc, #280]	; (800113c <cpu_step+0x17c>)
 8001022:	7852      	ldrb	r2, [r2, #1]
 8001024:	f002 0210 	and.w	r2, r2, #16
        sprintf(flags, "%c%c%c%c", 
 8001028:	2a00      	cmp	r2, #0
 800102a:	d001      	beq.n	8001030 <cpu_step+0x70>
 800102c:	2243      	movs	r2, #67	; 0x43
 800102e:	e000      	b.n	8001032 <cpu_step+0x72>
 8001030:	222d      	movs	r2, #45	; 0x2d
 8001032:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	4623      	mov	r3, r4
 800103c:	460a      	mov	r2, r1
 800103e:	4940      	ldr	r1, [pc, #256]	; (8001140 <cpu_step+0x180>)
 8001040:	f00d fd82 	bl	800eb48 <siprintf>
        );

        char inst[16];
        inst_to_str(&ctx, inst);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	483c      	ldr	r0, [pc, #240]	; (800113c <cpu_step+0x17c>)
 800104c:	f002 f88e 	bl	800316c <inst_to_str>

        printf("%04X: %-12s (%02X %02X %02X) A: %02X F: %s BC: %02X%02X DE: %02X%02X HL: %02X%02X\n",
 8001050:	8efc      	ldrh	r4, [r7, #54]	; 0x36
            pc, inst, ctx.cur_opcode,
 8001052:	4b3a      	ldr	r3, [pc, #232]	; (800113c <cpu_step+0x17c>)
 8001054:	7c5b      	ldrb	r3, [r3, #17]
        printf("%04X: %-12s (%02X %02X %02X) A: %02X F: %s BC: %02X%02X DE: %02X%02X HL: %02X%02X\n",
 8001056:	4698      	mov	r8, r3
            bus_read(pc + 1), bus_read(pc + 2), ctx.regs.a, flags, ctx.regs.b, ctx.regs.c,
 8001058:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800105a:	3301      	adds	r3, #1
 800105c:	b29b      	uxth	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff faba 	bl	80005d8 <bus_read>
 8001064:	4603      	mov	r3, r0
        printf("%04X: %-12s (%02X %02X %02X) A: %02X F: %s BC: %02X%02X DE: %02X%02X HL: %02X%02X\n",
 8001066:	461d      	mov	r5, r3
            bus_read(pc + 1), bus_read(pc + 2), ctx.regs.a, flags, ctx.regs.b, ctx.regs.c,
 8001068:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800106a:	3302      	adds	r3, #2
 800106c:	b29b      	uxth	r3, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fab2 	bl	80005d8 <bus_read>
 8001074:	4603      	mov	r3, r0
        printf("%04X: %-12s (%02X %02X %02X) A: %02X F: %s BC: %02X%02X DE: %02X%02X HL: %02X%02X\n",
 8001076:	4619      	mov	r1, r3
            bus_read(pc + 1), bus_read(pc + 2), ctx.regs.a, flags, ctx.regs.b, ctx.regs.c,
 8001078:	4b30      	ldr	r3, [pc, #192]	; (800113c <cpu_step+0x17c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
        printf("%04X: %-12s (%02X %02X %02X) A: %02X F: %s BC: %02X%02X DE: %02X%02X HL: %02X%02X\n",
 800107c:	4618      	mov	r0, r3
            bus_read(pc + 1), bus_read(pc + 2), ctx.regs.a, flags, ctx.regs.b, ctx.regs.c,
 800107e:	4b2f      	ldr	r3, [pc, #188]	; (800113c <cpu_step+0x17c>)
 8001080:	789b      	ldrb	r3, [r3, #2]
        printf("%04X: %-12s (%02X %02X %02X) A: %02X F: %s BC: %02X%02X DE: %02X%02X HL: %02X%02X\n",
 8001082:	461e      	mov	r6, r3
            bus_read(pc + 1), bus_read(pc + 2), ctx.regs.a, flags, ctx.regs.b, ctx.regs.c,
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <cpu_step+0x17c>)
 8001086:	78db      	ldrb	r3, [r3, #3]
        printf("%04X: %-12s (%02X %02X %02X) A: %02X F: %s BC: %02X%02X DE: %02X%02X HL: %02X%02X\n",
 8001088:	60fb      	str	r3, [r7, #12]
            ctx.regs.d, ctx.regs.e, ctx.regs.h, ctx.regs.l);
 800108a:	4b2c      	ldr	r3, [pc, #176]	; (800113c <cpu_step+0x17c>)
 800108c:	791b      	ldrb	r3, [r3, #4]
        printf("%04X: %-12s (%02X %02X %02X) A: %02X F: %s BC: %02X%02X DE: %02X%02X HL: %02X%02X\n",
 800108e:	60bb      	str	r3, [r7, #8]
            ctx.regs.d, ctx.regs.e, ctx.regs.h, ctx.regs.l);
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <cpu_step+0x17c>)
 8001092:	795b      	ldrb	r3, [r3, #5]
        printf("%04X: %-12s (%02X %02X %02X) A: %02X F: %s BC: %02X%02X DE: %02X%02X HL: %02X%02X\n",
 8001094:	607b      	str	r3, [r7, #4]
            ctx.regs.d, ctx.regs.e, ctx.regs.h, ctx.regs.l);
 8001096:	4b29      	ldr	r3, [pc, #164]	; (800113c <cpu_step+0x17c>)
 8001098:	799b      	ldrb	r3, [r3, #6]
        printf("%04X: %-12s (%02X %02X %02X) A: %02X F: %s BC: %02X%02X DE: %02X%02X HL: %02X%02X\n",
 800109a:	603b      	str	r3, [r7, #0]
            ctx.regs.d, ctx.regs.e, ctx.regs.h, ctx.regs.l);
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <cpu_step+0x17c>)
 800109e:	79db      	ldrb	r3, [r3, #7]
        printf("%04X: %-12s (%02X %02X %02X) A: %02X F: %s BC: %02X%02X DE: %02X%02X HL: %02X%02X\n",
 80010a0:	f107 0214 	add.w	r2, r7, #20
 80010a4:	9309      	str	r3, [sp, #36]	; 0x24
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	9308      	str	r3, [sp, #32]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	9307      	str	r3, [sp, #28]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	9306      	str	r3, [sp, #24]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	9305      	str	r3, [sp, #20]
 80010b6:	9604      	str	r6, [sp, #16]
 80010b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010bc:	9303      	str	r3, [sp, #12]
 80010be:	9002      	str	r0, [sp, #8]
 80010c0:	9101      	str	r1, [sp, #4]
 80010c2:	9500      	str	r5, [sp, #0]
 80010c4:	4643      	mov	r3, r8
 80010c6:	4621      	mov	r1, r4
 80010c8:	481e      	ldr	r0, [pc, #120]	; (8001144 <cpu_step+0x184>)
 80010ca:	f00d fbd7 	bl	800e87c <iprintf>
#endif

        if (ctx.cur_inst == NULL) {
 80010ce:	4b1b      	ldr	r3, [pc, #108]	; (800113c <cpu_step+0x17c>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <cpu_step+0x12a>
            printf("Unknown Instruction! %02X\n", ctx.cur_opcode);
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <cpu_step+0x17c>)
 80010d8:	7c5b      	ldrb	r3, [r3, #17]
 80010da:	4619      	mov	r1, r3
 80010dc:	481a      	ldr	r0, [pc, #104]	; (8001148 <cpu_step+0x188>)
 80010de:	f00d fbcd 	bl	800e87c <iprintf>
            exit(-7);
 80010e2:	f06f 0006 	mvn.w	r0, #6
 80010e6:	f00c fa91 	bl	800d60c <exit>
        }

        dbg_update();
 80010ea:	f001 fe25 	bl	8002d38 <dbg_update>
        dbg_print();
 80010ee:	f001 fe49 	bl	8002d84 <dbg_print>

        execute();
 80010f2:	f7ff ff3f 	bl	8000f74 <execute>
 80010f6:	e009      	b.n	800110c <cpu_step+0x14c>
    } else {
        //is halted...
        emu_cycles(1);
 80010f8:	2001      	movs	r0, #1
 80010fa:	f001 ff35 	bl	8002f68 <emu_cycles>

        if (ctx.int_flags) {
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <cpu_step+0x17c>)
 8001100:	7f5b      	ldrb	r3, [r3, #29]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <cpu_step+0x14c>
            ctx.halted = false;
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <cpu_step+0x17c>)
 8001108:	2200      	movs	r2, #0
 800110a:	761a      	strb	r2, [r3, #24]
        }
    }

    if (ctx.int_master_enabled) {
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <cpu_step+0x17c>)
 800110e:	7e9b      	ldrb	r3, [r3, #26]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <cpu_step+0x160>
        cpu_handle_interrupts(&ctx);
 8001114:	4809      	ldr	r0, [pc, #36]	; (800113c <cpu_step+0x17c>)
 8001116:	f002 fa7d 	bl	8003614 <cpu_handle_interrupts>
        ctx.enabling_ime = false;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <cpu_step+0x17c>)
 800111c:	2200      	movs	r2, #0
 800111e:	76da      	strb	r2, [r3, #27]
    }

    if (ctx.enabling_ime) {
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <cpu_step+0x17c>)
 8001122:	7edb      	ldrb	r3, [r3, #27]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <cpu_step+0x16e>
        ctx.int_master_enabled = true;
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <cpu_step+0x17c>)
 800112a:	2201      	movs	r2, #1
 800112c:	769a      	strb	r2, [r3, #26]
    }

    return true;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3738      	adds	r7, #56	; 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800113a:	bf00      	nop
 800113c:	20000fb4 	.word	0x20000fb4
 8001140:	0800f800 	.word	0x0800f800
 8001144:	0800f80c 	.word	0x0800f80c
 8001148:	0800f860 	.word	0x0800f860

0800114c <cpu_get_ie_register>:

u8 cpu_get_ie_register() {
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
    return ctx.ie_register;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <cpu_get_ie_register+0x14>)
 8001152:	7f1b      	ldrb	r3, [r3, #28]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000fb4 	.word	0x20000fb4

08001164 <cpu_set_ie_register>:

void cpu_set_ie_register(u8 n) {
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
    ctx.ie_register = n;
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <cpu_set_ie_register+0x1c>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	7713      	strb	r3, [r2, #28]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	20000fb4 	.word	0x20000fb4

08001184 <cpu_request_interrupt>:

void cpu_request_interrupt(interrupt_type t) {
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
    ctx.int_flags |= t;
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <cpu_request_interrupt+0x24>)
 8001190:	7f5a      	ldrb	r2, [r3, #29]
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4313      	orrs	r3, r2
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <cpu_request_interrupt+0x24>)
 800119a:	775a      	strb	r2, [r3, #29]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	20000fb4 	.word	0x20000fb4

080011ac <fetch_data>:
#include <bus.h>
#include <emu.h>

extern cpu_context ctx;

void fetch_data() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
    ctx.mem_dest = 0;
 80011b2:	4bb0      	ldr	r3, [pc, #704]	; (8001474 <fetch_data+0x2c8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	81da      	strh	r2, [r3, #14]
    ctx.dest_is_mem = false;
 80011b8:	4bae      	ldr	r3, [pc, #696]	; (8001474 <fetch_data+0x2c8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	741a      	strb	r2, [r3, #16]
    
    if (ctx.cur_inst == NULL) {
 80011be:	4bad      	ldr	r3, [pc, #692]	; (8001474 <fetch_data+0x2c8>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 8249 	beq.w	800165a <fetch_data+0x4ae>
        return;
    }

    switch(ctx.cur_inst->mode) {
 80011c8:	4baa      	ldr	r3, [pc, #680]	; (8001474 <fetch_data+0x2c8>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	785b      	ldrb	r3, [r3, #1]
 80011ce:	2b14      	cmp	r3, #20
 80011d0:	f200 8235 	bhi.w	800163e <fetch_data+0x492>
 80011d4:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <fetch_data+0x30>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	0800165f 	.word	0x0800165f
 80011e0:	08001283 	.word	0x08001283
 80011e4:	08001247 	.word	0x08001247
 80011e8:	080012d1 	.word	0x080012d1
 80011ec:	08001231 	.word	0x08001231
 80011f0:	0800125d 	.word	0x0800125d
 80011f4:	0800131b 	.word	0x0800131b
 80011f8:	08001355 	.word	0x08001355
 80011fc:	0800138d 	.word	0x0800138d
 8001200:	080013c5 	.word	0x080013c5
 8001204:	08001409 	.word	0x08001409
 8001208:	0800144d 	.word	0x0800144d
 800120c:	08001479 	.word	0x08001479
 8001210:	080014ad 	.word	0x080014ad
 8001214:	08001283 	.word	0x08001283
 8001218:	080014d3 	.word	0x080014d3
 800121c:	080014f9 	.word	0x080014f9
 8001220:	08001561 	.word	0x08001561
 8001224:	080015a1 	.word	0x080015a1
 8001228:	080014f9 	.word	0x080014f9
 800122c:	080015df 	.word	0x080015df
        case AM_IMP: return;

        case AM_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_1);
 8001230:	4b90      	ldr	r3, [pc, #576]	; (8001474 <fetch_data+0x2c8>)
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	789b      	ldrb	r3, [r3, #2]
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fb84 	bl	8002944 <cpu_read_reg>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b8c      	ldr	r3, [pc, #560]	; (8001474 <fetch_data+0x2c8>)
 8001242:	819a      	strh	r2, [r3, #12]
            return;
 8001244:	e20e      	b.n	8001664 <fetch_data+0x4b8>

        case AM_R_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 8001246:	4b8b      	ldr	r3, [pc, #556]	; (8001474 <fetch_data+0x2c8>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	78db      	ldrb	r3, [r3, #3]
 800124c:	4618      	mov	r0, r3
 800124e:	f001 fb79 	bl	8002944 <cpu_read_reg>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	4b87      	ldr	r3, [pc, #540]	; (8001474 <fetch_data+0x2c8>)
 8001258:	819a      	strh	r2, [r3, #12]
            return;
 800125a:	e203      	b.n	8001664 <fetch_data+0x4b8>

        case AM_R_D8:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 800125c:	4b85      	ldr	r3, [pc, #532]	; (8001474 <fetch_data+0x2c8>)
 800125e:	891b      	ldrh	r3, [r3, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f9b9 	bl	80005d8 <bus_read>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b82      	ldr	r3, [pc, #520]	; (8001474 <fetch_data+0x2c8>)
 800126c:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f001 fe7a 	bl	8002f68 <emu_cycles>
            ctx.regs.pc++;
 8001274:	4b7f      	ldr	r3, [pc, #508]	; (8001474 <fetch_data+0x2c8>)
 8001276:	891b      	ldrh	r3, [r3, #8]
 8001278:	3301      	adds	r3, #1
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b7d      	ldr	r3, [pc, #500]	; (8001474 <fetch_data+0x2c8>)
 800127e:	811a      	strh	r2, [r3, #8]
            return;
 8001280:	e1f0      	b.n	8001664 <fetch_data+0x4b8>

        case AM_R_D16:
        case AM_D16: {
            u16 lo = bus_read(ctx.regs.pc);
 8001282:	4b7c      	ldr	r3, [pc, #496]	; (8001474 <fetch_data+0x2c8>)
 8001284:	891b      	ldrh	r3, [r3, #8]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f9a6 	bl	80005d8 <bus_read>
 800128c:	4603      	mov	r3, r0
 800128e:	807b      	strh	r3, [r7, #2]
            emu_cycles(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f001 fe69 	bl	8002f68 <emu_cycles>

            u16 hi = bus_read(ctx.regs.pc + 1);
 8001296:	4b77      	ldr	r3, [pc, #476]	; (8001474 <fetch_data+0x2c8>)
 8001298:	891b      	ldrh	r3, [r3, #8]
 800129a:	3301      	adds	r3, #1
 800129c:	b29b      	uxth	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f99a 	bl	80005d8 <bus_read>
 80012a4:	4603      	mov	r3, r0
 80012a6:	803b      	strh	r3, [r7, #0]
            emu_cycles(1);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f001 fe5d 	bl	8002f68 <emu_cycles>

            ctx.fetched_data = lo | (hi << 8);
 80012ae:	883b      	ldrh	r3, [r7, #0]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	b29a      	uxth	r2, r3
 80012be:	4b6d      	ldr	r3, [pc, #436]	; (8001474 <fetch_data+0x2c8>)
 80012c0:	819a      	strh	r2, [r3, #12]

            ctx.regs.pc += 2;
 80012c2:	4b6c      	ldr	r3, [pc, #432]	; (8001474 <fetch_data+0x2c8>)
 80012c4:	891b      	ldrh	r3, [r3, #8]
 80012c6:	3302      	adds	r3, #2
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b6a      	ldr	r3, [pc, #424]	; (8001474 <fetch_data+0x2c8>)
 80012cc:	811a      	strh	r2, [r3, #8]

            return;
 80012ce:	e1c9      	b.n	8001664 <fetch_data+0x4b8>
        }

        case AM_MR_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 80012d0:	4b68      	ldr	r3, [pc, #416]	; (8001474 <fetch_data+0x2c8>)
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	78db      	ldrb	r3, [r3, #3]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fb34 	bl	8002944 <cpu_read_reg>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	4b64      	ldr	r3, [pc, #400]	; (8001474 <fetch_data+0x2c8>)
 80012e2:	819a      	strh	r2, [r3, #12]
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 80012e4:	4b63      	ldr	r3, [pc, #396]	; (8001474 <fetch_data+0x2c8>)
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	789b      	ldrb	r3, [r3, #2]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 fb2a 	bl	8002944 <cpu_read_reg>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <fetch_data+0x2c8>)
 80012f6:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 80012f8:	4b5e      	ldr	r3, [pc, #376]	; (8001474 <fetch_data+0x2c8>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	741a      	strb	r2, [r3, #16]

            if (ctx.cur_inst->reg_1 == RT_C) {
 80012fe:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <fetch_data+0x2c8>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	789b      	ldrb	r3, [r3, #2]
 8001304:	2b04      	cmp	r3, #4
 8001306:	f040 81ac 	bne.w	8001662 <fetch_data+0x4b6>
                ctx.mem_dest |= 0xFF00;
 800130a:	4b5a      	ldr	r3, [pc, #360]	; (8001474 <fetch_data+0x2c8>)
 800130c:	89db      	ldrh	r3, [r3, #14]
 800130e:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b57      	ldr	r3, [pc, #348]	; (8001474 <fetch_data+0x2c8>)
 8001316:	81da      	strh	r2, [r3, #14]
            }

            return;
 8001318:	e1a3      	b.n	8001662 <fetch_data+0x4b6>

        case AM_R_MR: {
            u16 addr = cpu_read_reg(ctx.cur_inst->reg_2);
 800131a:	4b56      	ldr	r3, [pc, #344]	; (8001474 <fetch_data+0x2c8>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	4618      	mov	r0, r3
 8001322:	f001 fb0f 	bl	8002944 <cpu_read_reg>
 8001326:	4603      	mov	r3, r0
 8001328:	81fb      	strh	r3, [r7, #14]

            if (ctx.cur_inst->reg_2 == RT_C) {
 800132a:	4b52      	ldr	r3, [pc, #328]	; (8001474 <fetch_data+0x2c8>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	78db      	ldrb	r3, [r3, #3]
 8001330:	2b04      	cmp	r3, #4
 8001332:	d103      	bne.n	800133c <fetch_data+0x190>
                addr |= 0xFF00;
 8001334:	89fb      	ldrh	r3, [r7, #14]
 8001336:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800133a:	81fb      	strh	r3, [r7, #14]
            }

            ctx.fetched_data = bus_read(addr);
 800133c:	89fb      	ldrh	r3, [r7, #14]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f94a 	bl	80005d8 <bus_read>
 8001344:	4603      	mov	r3, r0
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <fetch_data+0x2c8>)
 800134a:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f001 fe0b 	bl	8002f68 <emu_cycles>

        } return;
 8001352:	e187      	b.n	8001664 <fetch_data+0x4b8>

        case AM_R_HLI:
            ctx.fetched_data = bus_read(cpu_read_reg(ctx.cur_inst->reg_2));
 8001354:	4b47      	ldr	r3, [pc, #284]	; (8001474 <fetch_data+0x2c8>)
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	78db      	ldrb	r3, [r3, #3]
 800135a:	4618      	mov	r0, r3
 800135c:	f001 faf2 	bl	8002944 <cpu_read_reg>
 8001360:	4603      	mov	r3, r0
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f938 	bl	80005d8 <bus_read>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b41      	ldr	r3, [pc, #260]	; (8001474 <fetch_data+0x2c8>)
 800136e:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f001 fdf9 	bl	8002f68 <emu_cycles>
            cpu_set_reg(RT_HL, cpu_read_reg(RT_HL) + 1);
 8001376:	200c      	movs	r0, #12
 8001378:	f001 fae4 	bl	8002944 <cpu_read_reg>
 800137c:	4603      	mov	r3, r0
 800137e:	3301      	adds	r3, #1
 8001380:	b29b      	uxth	r3, r3
 8001382:	4619      	mov	r1, r3
 8001384:	200c      	movs	r0, #12
 8001386:	f001 fb55 	bl	8002a34 <cpu_set_reg>
            return;
 800138a:	e16b      	b.n	8001664 <fetch_data+0x4b8>

        case AM_R_HLD:
            ctx.fetched_data = bus_read(cpu_read_reg(ctx.cur_inst->reg_2));
 800138c:	4b39      	ldr	r3, [pc, #228]	; (8001474 <fetch_data+0x2c8>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	78db      	ldrb	r3, [r3, #3]
 8001392:	4618      	mov	r0, r3
 8001394:	f001 fad6 	bl	8002944 <cpu_read_reg>
 8001398:	4603      	mov	r3, r0
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f91c 	bl	80005d8 <bus_read>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <fetch_data+0x2c8>)
 80013a6:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f001 fddd 	bl	8002f68 <emu_cycles>
            cpu_set_reg(RT_HL, cpu_read_reg(RT_HL) - 1);
 80013ae:	200c      	movs	r0, #12
 80013b0:	f001 fac8 	bl	8002944 <cpu_read_reg>
 80013b4:	4603      	mov	r3, r0
 80013b6:	3b01      	subs	r3, #1
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4619      	mov	r1, r3
 80013bc:	200c      	movs	r0, #12
 80013be:	f001 fb39 	bl	8002a34 <cpu_set_reg>
            return;
 80013c2:	e14f      	b.n	8001664 <fetch_data+0x4b8>

        case AM_HLI_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <fetch_data+0x2c8>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	78db      	ldrb	r3, [r3, #3]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 faba 	bl	8002944 <cpu_read_reg>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <fetch_data+0x2c8>)
 80013d6:	819a      	strh	r2, [r3, #12]
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <fetch_data+0x2c8>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	789b      	ldrb	r3, [r3, #2]
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 fab0 	bl	8002944 <cpu_read_reg>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <fetch_data+0x2c8>)
 80013ea:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <fetch_data+0x2c8>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	741a      	strb	r2, [r3, #16]
            cpu_set_reg(RT_HL, cpu_read_reg(RT_HL) + 1);
 80013f2:	200c      	movs	r0, #12
 80013f4:	f001 faa6 	bl	8002944 <cpu_read_reg>
 80013f8:	4603      	mov	r3, r0
 80013fa:	3301      	adds	r3, #1
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	4619      	mov	r1, r3
 8001400:	200c      	movs	r0, #12
 8001402:	f001 fb17 	bl	8002a34 <cpu_set_reg>
            return;
 8001406:	e12d      	b.n	8001664 <fetch_data+0x4b8>

        case AM_HLD_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <fetch_data+0x2c8>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	78db      	ldrb	r3, [r3, #3]
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fa98 	bl	8002944 <cpu_read_reg>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <fetch_data+0x2c8>)
 800141a:	819a      	strh	r2, [r3, #12]
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <fetch_data+0x2c8>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	789b      	ldrb	r3, [r3, #2]
 8001422:	4618      	mov	r0, r3
 8001424:	f001 fa8e 	bl	8002944 <cpu_read_reg>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <fetch_data+0x2c8>)
 800142e:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <fetch_data+0x2c8>)
 8001432:	2201      	movs	r2, #1
 8001434:	741a      	strb	r2, [r3, #16]
            cpu_set_reg(RT_HL, cpu_read_reg(RT_HL) - 1);
 8001436:	200c      	movs	r0, #12
 8001438:	f001 fa84 	bl	8002944 <cpu_read_reg>
 800143c:	4603      	mov	r3, r0
 800143e:	3b01      	subs	r3, #1
 8001440:	b29b      	uxth	r3, r3
 8001442:	4619      	mov	r1, r3
 8001444:	200c      	movs	r0, #12
 8001446:	f001 faf5 	bl	8002a34 <cpu_set_reg>
            return;
 800144a:	e10b      	b.n	8001664 <fetch_data+0x4b8>

        case AM_R_A8:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <fetch_data+0x2c8>)
 800144e:	891b      	ldrh	r3, [r3, #8]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f8c1 	bl	80005d8 <bus_read>
 8001456:	4603      	mov	r3, r0
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <fetch_data+0x2c8>)
 800145c:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 800145e:	2001      	movs	r0, #1
 8001460:	f001 fd82 	bl	8002f68 <emu_cycles>
            ctx.regs.pc++;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <fetch_data+0x2c8>)
 8001466:	891b      	ldrh	r3, [r3, #8]
 8001468:	3301      	adds	r3, #1
 800146a:	b29a      	uxth	r2, r3
 800146c:	4b01      	ldr	r3, [pc, #4]	; (8001474 <fetch_data+0x2c8>)
 800146e:	811a      	strh	r2, [r3, #8]
            return;
 8001470:	e0f8      	b.n	8001664 <fetch_data+0x4b8>
 8001472:	bf00      	nop
 8001474:	20000fb4 	.word	0x20000fb4

        case AM_A8_R:
            ctx.mem_dest = bus_read(ctx.regs.pc) | 0xFF00;
 8001478:	4b7c      	ldr	r3, [pc, #496]	; (800166c <fetch_data+0x4c0>)
 800147a:	891b      	ldrh	r3, [r3, #8]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f8ab 	bl	80005d8 <bus_read>
 8001482:	4603      	mov	r3, r0
 8001484:	b21b      	sxth	r3, r3
 8001486:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800148a:	b21b      	sxth	r3, r3
 800148c:	b29a      	uxth	r2, r3
 800148e:	4b77      	ldr	r3, [pc, #476]	; (800166c <fetch_data+0x4c0>)
 8001490:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 8001492:	4b76      	ldr	r3, [pc, #472]	; (800166c <fetch_data+0x4c0>)
 8001494:	2201      	movs	r2, #1
 8001496:	741a      	strb	r2, [r3, #16]
            emu_cycles(1);
 8001498:	2001      	movs	r0, #1
 800149a:	f001 fd65 	bl	8002f68 <emu_cycles>
            ctx.regs.pc++;
 800149e:	4b73      	ldr	r3, [pc, #460]	; (800166c <fetch_data+0x4c0>)
 80014a0:	891b      	ldrh	r3, [r3, #8]
 80014a2:	3301      	adds	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b71      	ldr	r3, [pc, #452]	; (800166c <fetch_data+0x4c0>)
 80014a8:	811a      	strh	r2, [r3, #8]
            return;
 80014aa:	e0db      	b.n	8001664 <fetch_data+0x4b8>

        case AM_HL_SPR:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 80014ac:	4b6f      	ldr	r3, [pc, #444]	; (800166c <fetch_data+0x4c0>)
 80014ae:	891b      	ldrh	r3, [r3, #8]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f891 	bl	80005d8 <bus_read>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b6c      	ldr	r3, [pc, #432]	; (800166c <fetch_data+0x4c0>)
 80014bc:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 80014be:	2001      	movs	r0, #1
 80014c0:	f001 fd52 	bl	8002f68 <emu_cycles>
            ctx.regs.pc++;
 80014c4:	4b69      	ldr	r3, [pc, #420]	; (800166c <fetch_data+0x4c0>)
 80014c6:	891b      	ldrh	r3, [r3, #8]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b67      	ldr	r3, [pc, #412]	; (800166c <fetch_data+0x4c0>)
 80014ce:	811a      	strh	r2, [r3, #8]
            return;
 80014d0:	e0c8      	b.n	8001664 <fetch_data+0x4b8>

        case AM_D8:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 80014d2:	4b66      	ldr	r3, [pc, #408]	; (800166c <fetch_data+0x4c0>)
 80014d4:	891b      	ldrh	r3, [r3, #8]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f87e 	bl	80005d8 <bus_read>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b62      	ldr	r3, [pc, #392]	; (800166c <fetch_data+0x4c0>)
 80014e2:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 80014e4:	2001      	movs	r0, #1
 80014e6:	f001 fd3f 	bl	8002f68 <emu_cycles>
            ctx.regs.pc++;
 80014ea:	4b60      	ldr	r3, [pc, #384]	; (800166c <fetch_data+0x4c0>)
 80014ec:	891b      	ldrh	r3, [r3, #8]
 80014ee:	3301      	adds	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b5e      	ldr	r3, [pc, #376]	; (800166c <fetch_data+0x4c0>)
 80014f4:	811a      	strh	r2, [r3, #8]
            return;
 80014f6:	e0b5      	b.n	8001664 <fetch_data+0x4b8>

        case AM_A16_R:
        case AM_D16_R: {
            u16 lo = bus_read(ctx.regs.pc);
 80014f8:	4b5c      	ldr	r3, [pc, #368]	; (800166c <fetch_data+0x4c0>)
 80014fa:	891b      	ldrh	r3, [r3, #8]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f86b 	bl	80005d8 <bus_read>
 8001502:	4603      	mov	r3, r0
 8001504:	80fb      	strh	r3, [r7, #6]
            emu_cycles(1);
 8001506:	2001      	movs	r0, #1
 8001508:	f001 fd2e 	bl	8002f68 <emu_cycles>

            u16 hi = bus_read(ctx.regs.pc + 1);
 800150c:	4b57      	ldr	r3, [pc, #348]	; (800166c <fetch_data+0x4c0>)
 800150e:	891b      	ldrh	r3, [r3, #8]
 8001510:	3301      	adds	r3, #1
 8001512:	b29b      	uxth	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f85f 	bl	80005d8 <bus_read>
 800151a:	4603      	mov	r3, r0
 800151c:	80bb      	strh	r3, [r7, #4]
            emu_cycles(1);
 800151e:	2001      	movs	r0, #1
 8001520:	f001 fd22 	bl	8002f68 <emu_cycles>

            ctx.mem_dest = lo | (hi << 8);
 8001524:	88bb      	ldrh	r3, [r7, #4]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152e:	4313      	orrs	r3, r2
 8001530:	b21b      	sxth	r3, r3
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b4d      	ldr	r3, [pc, #308]	; (800166c <fetch_data+0x4c0>)
 8001536:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 8001538:	4b4c      	ldr	r3, [pc, #304]	; (800166c <fetch_data+0x4c0>)
 800153a:	2201      	movs	r2, #1
 800153c:	741a      	strb	r2, [r3, #16]

            ctx.regs.pc += 2;
 800153e:	4b4b      	ldr	r3, [pc, #300]	; (800166c <fetch_data+0x4c0>)
 8001540:	891b      	ldrh	r3, [r3, #8]
 8001542:	3302      	adds	r3, #2
 8001544:	b29a      	uxth	r2, r3
 8001546:	4b49      	ldr	r3, [pc, #292]	; (800166c <fetch_data+0x4c0>)
 8001548:	811a      	strh	r2, [r3, #8]
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 800154a:	4b48      	ldr	r3, [pc, #288]	; (800166c <fetch_data+0x4c0>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	4618      	mov	r0, r3
 8001552:	f001 f9f7 	bl	8002944 <cpu_read_reg>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	4b44      	ldr	r3, [pc, #272]	; (800166c <fetch_data+0x4c0>)
 800155c:	819a      	strh	r2, [r3, #12]

        } return;
 800155e:	e081      	b.n	8001664 <fetch_data+0x4b8>

        case AM_MR_D8:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 8001560:	4b42      	ldr	r3, [pc, #264]	; (800166c <fetch_data+0x4c0>)
 8001562:	891b      	ldrh	r3, [r3, #8]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f837 	bl	80005d8 <bus_read>
 800156a:	4603      	mov	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b3f      	ldr	r3, [pc, #252]	; (800166c <fetch_data+0x4c0>)
 8001570:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 8001572:	2001      	movs	r0, #1
 8001574:	f001 fcf8 	bl	8002f68 <emu_cycles>
            ctx.regs.pc++;
 8001578:	4b3c      	ldr	r3, [pc, #240]	; (800166c <fetch_data+0x4c0>)
 800157a:	891b      	ldrh	r3, [r3, #8]
 800157c:	3301      	adds	r3, #1
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b3a      	ldr	r3, [pc, #232]	; (800166c <fetch_data+0x4c0>)
 8001582:	811a      	strh	r2, [r3, #8]
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 8001584:	4b39      	ldr	r3, [pc, #228]	; (800166c <fetch_data+0x4c0>)
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	789b      	ldrb	r3, [r3, #2]
 800158a:	4618      	mov	r0, r3
 800158c:	f001 f9da 	bl	8002944 <cpu_read_reg>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <fetch_data+0x4c0>)
 8001596:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 8001598:	4b34      	ldr	r3, [pc, #208]	; (800166c <fetch_data+0x4c0>)
 800159a:	2201      	movs	r2, #1
 800159c:	741a      	strb	r2, [r3, #16]
            return;
 800159e:	e061      	b.n	8001664 <fetch_data+0x4b8>

        case AM_MR:
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 80015a0:	4b32      	ldr	r3, [pc, #200]	; (800166c <fetch_data+0x4c0>)
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	789b      	ldrb	r3, [r3, #2]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 f9cc 	bl	8002944 <cpu_read_reg>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <fetch_data+0x4c0>)
 80015b2:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <fetch_data+0x4c0>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	741a      	strb	r2, [r3, #16]
            ctx.fetched_data = bus_read(cpu_read_reg(ctx.cur_inst->reg_1));
 80015ba:	4b2c      	ldr	r3, [pc, #176]	; (800166c <fetch_data+0x4c0>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	789b      	ldrb	r3, [r3, #2]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 f9bf 	bl	8002944 <cpu_read_reg>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff f805 	bl	80005d8 <bus_read>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <fetch_data+0x4c0>)
 80015d4:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f001 fcc6 	bl	8002f68 <emu_cycles>
            return;
 80015dc:	e042      	b.n	8001664 <fetch_data+0x4b8>

        case AM_R_A16: {
            u16 lo = bus_read(ctx.regs.pc);
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <fetch_data+0x4c0>)
 80015e0:	891b      	ldrh	r3, [r3, #8]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe fff8 	bl	80005d8 <bus_read>
 80015e8:	4603      	mov	r3, r0
 80015ea:	81bb      	strh	r3, [r7, #12]
            emu_cycles(1);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f001 fcbb 	bl	8002f68 <emu_cycles>

            u16 hi = bus_read(ctx.regs.pc + 1);
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <fetch_data+0x4c0>)
 80015f4:	891b      	ldrh	r3, [r3, #8]
 80015f6:	3301      	adds	r3, #1
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ffec 	bl	80005d8 <bus_read>
 8001600:	4603      	mov	r3, r0
 8001602:	817b      	strh	r3, [r7, #10]
            emu_cycles(1);
 8001604:	2001      	movs	r0, #1
 8001606:	f001 fcaf 	bl	8002f68 <emu_cycles>

            u16 addr = lo | (hi << 8);
 800160a:	897b      	ldrh	r3, [r7, #10]
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b21a      	sxth	r2, r3
 8001610:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	b21b      	sxth	r3, r3
 8001618:	813b      	strh	r3, [r7, #8]

            ctx.regs.pc += 2;
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <fetch_data+0x4c0>)
 800161c:	891b      	ldrh	r3, [r3, #8]
 800161e:	3302      	adds	r3, #2
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <fetch_data+0x4c0>)
 8001624:	811a      	strh	r2, [r3, #8]
            ctx.fetched_data = bus_read(addr);
 8001626:	893b      	ldrh	r3, [r7, #8]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ffd5 	bl	80005d8 <bus_read>
 800162e:	4603      	mov	r3, r0
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <fetch_data+0x4c0>)
 8001634:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 8001636:	2001      	movs	r0, #1
 8001638:	f001 fc96 	bl	8002f68 <emu_cycles>

            return;
 800163c:	e012      	b.n	8001664 <fetch_data+0x4b8>
        }

        default:
            printf("Unknown Addressing Mode! %d (%02X)\n", ctx.cur_inst->mode, ctx.cur_opcode);
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <fetch_data+0x4c0>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	785b      	ldrb	r3, [r3, #1]
 8001644:	4619      	mov	r1, r3
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <fetch_data+0x4c0>)
 8001648:	7c5b      	ldrb	r3, [r3, #17]
 800164a:	461a      	mov	r2, r3
 800164c:	4808      	ldr	r0, [pc, #32]	; (8001670 <fetch_data+0x4c4>)
 800164e:	f00d f915 	bl	800e87c <iprintf>
            exit(-7);
 8001652:	f06f 0006 	mvn.w	r0, #6
 8001656:	f00b ffd9 	bl	800d60c <exit>
        return;
 800165a:	bf00      	nop
 800165c:	e002      	b.n	8001664 <fetch_data+0x4b8>
        case AM_IMP: return;
 800165e:	bf00      	nop
 8001660:	e000      	b.n	8001664 <fetch_data+0x4b8>
            return;
 8001662:	bf00      	nop
            return;
    }
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000fb4 	.word	0x20000fb4
 8001670:	0800f87c 	.word	0x0800f87c

08001674 <cpu_set_flags>:
#include <bus.h>
#include <stack.h>

//processes CPU instructions...

void cpu_set_flags(cpu_context *ctx, int8_t z, int8_t n, int8_t h, int8_t c) {
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	4608      	mov	r0, r1
 800167e:	4611      	mov	r1, r2
 8001680:	461a      	mov	r2, r3
 8001682:	4603      	mov	r3, r0
 8001684:	70fb      	strb	r3, [r7, #3]
 8001686:	460b      	mov	r3, r1
 8001688:	70bb      	strb	r3, [r7, #2]
 800168a:	4613      	mov	r3, r2
 800168c:	707b      	strb	r3, [r7, #1]
    if (z != -1) {
 800168e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001696:	d012      	beq.n	80016be <cpu_set_flags+0x4a>
        BIT_SET(ctx->regs.f, 7, z);
 8001698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <cpu_set_flags+0x3c>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	705a      	strb	r2, [r3, #1]
 80016ae:	e006      	b.n	80016be <cpu_set_flags+0x4a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	705a      	strb	r2, [r3, #1]
    }

    if (n != -1) {
 80016be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016c6:	d012      	beq.n	80016ee <cpu_set_flags+0x7a>
        BIT_SET(ctx->regs.f, 6, n);
 80016c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d007      	beq.n	80016e0 <cpu_set_flags+0x6c>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	705a      	strb	r2, [r3, #1]
 80016de:	e006      	b.n	80016ee <cpu_set_flags+0x7a>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	785b      	ldrb	r3, [r3, #1]
 80016e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	705a      	strb	r2, [r3, #1]
    }

    if (h != -1) {
 80016ee:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80016f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016f6:	d012      	beq.n	800171e <cpu_set_flags+0xaa>
        BIT_SET(ctx->regs.f, 5, h);
 80016f8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d007      	beq.n	8001710 <cpu_set_flags+0x9c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	785b      	ldrb	r3, [r3, #1]
 8001704:	f043 0320 	orr.w	r3, r3, #32
 8001708:	b2da      	uxtb	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	705a      	strb	r2, [r3, #1]
 800170e:	e006      	b.n	800171e <cpu_set_flags+0xaa>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	f023 0320 	bic.w	r3, r3, #32
 8001718:	b2da      	uxtb	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	705a      	strb	r2, [r3, #1]
    }

    if (c != -1) {
 800171e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001726:	d012      	beq.n	800174e <cpu_set_flags+0xda>
        BIT_SET(ctx->regs.f, 4, c);
 8001728:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <cpu_set_flags+0xcc>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	785b      	ldrb	r3, [r3, #1]
 8001734:	f043 0310 	orr.w	r3, r3, #16
 8001738:	b2da      	uxtb	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	705a      	strb	r2, [r3, #1]
    }
}
 800173e:	e006      	b.n	800174e <cpu_set_flags+0xda>
        BIT_SET(ctx->regs.f, 4, c);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	f023 0310 	bic.w	r3, r3, #16
 8001748:	b2da      	uxtb	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	705a      	strb	r2, [r3, #1]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <proc_none>:

static void proc_none(cpu_context *ctx) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    printf("INVALID INSTRUCTION!\n");
 8001764:	4803      	ldr	r0, [pc, #12]	; (8001774 <proc_none+0x18>)
 8001766:	f00d f90f 	bl	800e988 <puts>
    exit(-7);
 800176a:	f06f 0006 	mvn.w	r0, #6
 800176e:	f00b ff4d 	bl	800d60c <exit>
 8001772:	bf00      	nop
 8001774:	0800f8a0 	.word	0x0800f8a0

08001778 <proc_nop>:
}

static void proc_nop(cpu_context *ctx) {
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <decode_reg>:
    RT_L,
    RT_HL,
    RT_A
};

reg_type decode_reg(u8 reg) {
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
    if (reg > 0b111) {
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b07      	cmp	r3, #7
 800179a:	d901      	bls.n	80017a0 <decode_reg+0x14>
        return RT_NONE;
 800179c:	2300      	movs	r3, #0
 800179e:	e002      	b.n	80017a6 <decode_reg+0x1a>
    }

    return rt_lookup[reg];
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <decode_reg+0x28>)
 80017a4:	5cd3      	ldrb	r3, [r2, r3]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000320 	.word	0x20000320

080017b8 <proc_cb>:

static void proc_cb(cpu_context *ctx) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af02      	add	r7, sp, #8
 80017be:	6078      	str	r0, [r7, #4]
    u8 op = ctx->fetched_data;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	899b      	ldrh	r3, [r3, #12]
 80017c4:	757b      	strb	r3, [r7, #21]
    reg_type reg = decode_reg(op & 0b111);
 80017c6:	7d7b      	ldrb	r3, [r7, #21]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ffdc 	bl	800178c <decode_reg>
 80017d4:	4603      	mov	r3, r0
 80017d6:	753b      	strb	r3, [r7, #20]
    u8 bit = (op >> 3) & 0b111;
 80017d8:	7d7b      	ldrb	r3, [r7, #21]
 80017da:	08db      	lsrs	r3, r3, #3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	74fb      	strb	r3, [r7, #19]
    u8 bit_op = (op >> 6) & 0b11;
 80017e4:	7d7b      	ldrb	r3, [r7, #21]
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	74bb      	strb	r3, [r7, #18]
    u8 reg_val = cpu_read_reg8(reg);
 80017ea:	7d3b      	ldrb	r3, [r7, #20]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 f9ab 	bl	8002b48 <cpu_read_reg8>
 80017f2:	4603      	mov	r3, r0
 80017f4:	747b      	strb	r3, [r7, #17]

    emu_cycles(1);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f001 fbb6 	bl	8002f68 <emu_cycles>

    if (reg == RT_HL) {
 80017fc:	7d3b      	ldrb	r3, [r7, #20]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d102      	bne.n	8001808 <proc_cb+0x50>
        emu_cycles(2);
 8001802:	2002      	movs	r0, #2
 8001804:	f001 fbb0 	bl	8002f68 <emu_cycles>
    }

    switch(bit_op) {
 8001808:	7cbb      	ldrb	r3, [r7, #18]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d02e      	beq.n	800186c <proc_cb+0xb4>
 800180e:	2b03      	cmp	r3, #3
 8001810:	dc3d      	bgt.n	800188e <proc_cb+0xd6>
 8001812:	2b01      	cmp	r3, #1
 8001814:	d002      	beq.n	800181c <proc_cb+0x64>
 8001816:	2b02      	cmp	r3, #2
 8001818:	d015      	beq.n	8001846 <proc_cb+0x8e>
 800181a:	e038      	b.n	800188e <proc_cb+0xd6>
        case 1:
            //BIT
            cpu_set_flags(ctx, !(reg_val & (1 << bit)), 0, 1, -1);
 800181c:	7c7a      	ldrb	r2, [r7, #17]
 800181e:	7cfb      	ldrb	r3, [r7, #19]
 8001820:	fa42 f303 	asr.w	r3, r2, r3
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf0c      	ite	eq
 800182c:	2301      	moveq	r3, #1
 800182e:	2300      	movne	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	b259      	sxtb	r1, r3
 8001834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2301      	movs	r3, #1
 800183c:	2200      	movs	r2, #0
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff18 	bl	8001674 <cpu_set_flags>
            return;
 8001844:	e164      	b.n	8001b10 <proc_cb+0x358>

        case 2:
            //RST
            reg_val &= ~(1 << bit);
 8001846:	7cfb      	ldrb	r3, [r7, #19]
 8001848:	2201      	movs	r2, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	b25b      	sxtb	r3, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	b25a      	sxtb	r2, r3
 8001854:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001858:	4013      	ands	r3, r2
 800185a:	b25b      	sxtb	r3, r3
 800185c:	747b      	strb	r3, [r7, #17]
            cpu_set_reg8(reg, reg_val);
 800185e:	7c7a      	ldrb	r2, [r7, #17]
 8001860:	7d3b      	ldrb	r3, [r7, #20]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f001 f9d1 	bl	8002c0c <cpu_set_reg8>
            return;
 800186a:	e151      	b.n	8001b10 <proc_cb+0x358>

        case 3:
            //SET
            reg_val |= (1 << bit);
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	2201      	movs	r2, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	b25a      	sxtb	r2, r3
 8001876:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800187a:	4313      	orrs	r3, r2
 800187c:	b25b      	sxtb	r3, r3
 800187e:	747b      	strb	r3, [r7, #17]
            cpu_set_reg8(reg, reg_val);
 8001880:	7c7a      	ldrb	r2, [r7, #17]
 8001882:	7d3b      	ldrb	r3, [r7, #20]
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f001 f9c0 	bl	8002c0c <cpu_set_reg8>
            return;
 800188c:	e140      	b.n	8001b10 <proc_cb+0x358>
    }

    bool flagC = CPU_FLAG_C;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	785b      	ldrb	r3, [r3, #1]
 8001892:	111b      	asrs	r3, r3, #4
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	743b      	strb	r3, [r7, #16]

    switch(bit) {
 80018a2:	7cfb      	ldrb	r3, [r7, #19]
 80018a4:	2b07      	cmp	r3, #7
 80018a6:	f200 811f 	bhi.w	8001ae8 <proc_cb+0x330>
 80018aa:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <proc_cb+0xf8>)
 80018ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b0:	080018d1 	.word	0x080018d1
 80018b4:	0800191b 	.word	0x0800191b
 80018b8:	08001967 	.word	0x08001967
 80018bc:	080019ad 	.word	0x080019ad
 80018c0:	080019f9 	.word	0x080019f9
 80018c4:	08001a37 	.word	0x08001a37
 80018c8:	08001a73 	.word	0x08001a73
 80018cc:	08001ab1 	.word	0x08001ab1
        case 0: {
            //RLC
            bool setC = false;
 80018d0:	2300      	movs	r3, #0
 80018d2:	75fb      	strb	r3, [r7, #23]
            u8 result = (reg_val << 1) & 0xFF;
 80018d4:	7c7b      	ldrb	r3, [r7, #17]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	75bb      	strb	r3, [r7, #22]

            if ((reg_val & (1 << 7)) != 0) {
 80018da:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da05      	bge.n	80018ee <proc_cb+0x136>
                result |= 1;
 80018e2:	7dbb      	ldrb	r3, [r7, #22]
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	75bb      	strb	r3, [r7, #22]
                setC = true;
 80018ea:	2301      	movs	r3, #1
 80018ec:	75fb      	strb	r3, [r7, #23]
            }

            cpu_set_reg8(reg, result);
 80018ee:	7dba      	ldrb	r2, [r7, #22]
 80018f0:	7d3b      	ldrb	r3, [r7, #20]
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f001 f989 	bl	8002c0c <cpu_set_reg8>
            cpu_set_flags(ctx, result == 0, false, false, setC);
 80018fa:	7dbb      	ldrb	r3, [r7, #22]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf0c      	ite	eq
 8001900:	2301      	moveq	r3, #1
 8001902:	2300      	movne	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	b259      	sxtb	r1, r3
 8001908:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2300      	movs	r3, #0
 8001910:	2200      	movs	r2, #0
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff feae 	bl	8001674 <cpu_set_flags>
        } return;
 8001918:	e0fa      	b.n	8001b10 <proc_cb+0x358>

        case 1: {
            //RRC
            u8 old = reg_val;
 800191a:	7c7b      	ldrb	r3, [r7, #17]
 800191c:	72bb      	strb	r3, [r7, #10]
            reg_val >>= 1;
 800191e:	7c7b      	ldrb	r3, [r7, #17]
 8001920:	085b      	lsrs	r3, r3, #1
 8001922:	747b      	strb	r3, [r7, #17]
            reg_val |= (old << 7);
 8001924:	7abb      	ldrb	r3, [r7, #10]
 8001926:	01db      	lsls	r3, r3, #7
 8001928:	b25a      	sxtb	r2, r3
 800192a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800192e:	4313      	orrs	r3, r2
 8001930:	b25b      	sxtb	r3, r3
 8001932:	747b      	strb	r3, [r7, #17]

            cpu_set_reg8(reg, reg_val);
 8001934:	7c7a      	ldrb	r2, [r7, #17]
 8001936:	7d3b      	ldrb	r3, [r7, #20]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f001 f966 	bl	8002c0c <cpu_set_reg8>
            cpu_set_flags(ctx, !reg_val, false, false, old & 1);
 8001940:	7c7b      	ldrb	r3, [r7, #17]
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf0c      	ite	eq
 8001946:	2301      	moveq	r3, #1
 8001948:	2300      	movne	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	b259      	sxtb	r1, r3
 800194e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	b25b      	sxtb	r3, r3
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2300      	movs	r3, #0
 800195c:	2200      	movs	r2, #0
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fe88 	bl	8001674 <cpu_set_flags>
        } return;
 8001964:	e0d4      	b.n	8001b10 <proc_cb+0x358>

        case 2: {
            //RL
            u8 old = reg_val;
 8001966:	7c7b      	ldrb	r3, [r7, #17]
 8001968:	72fb      	strb	r3, [r7, #11]
            reg_val <<= 1;
 800196a:	7c7b      	ldrb	r3, [r7, #17]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	747b      	strb	r3, [r7, #17]
            reg_val |= flagC;
 8001970:	7c3a      	ldrb	r2, [r7, #16]
 8001972:	7c7b      	ldrb	r3, [r7, #17]
 8001974:	4313      	orrs	r3, r2
 8001976:	747b      	strb	r3, [r7, #17]

            cpu_set_reg8(reg, reg_val);
 8001978:	7c7a      	ldrb	r2, [r7, #17]
 800197a:	7d3b      	ldrb	r3, [r7, #20]
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f001 f944 	bl	8002c0c <cpu_set_reg8>
            cpu_set_flags(ctx, !reg_val, false, false, !!(old & 0x80));
 8001984:	7c7b      	ldrb	r3, [r7, #17]
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf0c      	ite	eq
 800198a:	2301      	moveq	r3, #1
 800198c:	2300      	movne	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	b259      	sxtb	r1, r3
 8001992:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	09db      	lsrs	r3, r3, #7
 800199a:	b2db      	uxtb	r3, r3
 800199c:	b25b      	sxtb	r3, r3
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2300      	movs	r3, #0
 80019a2:	2200      	movs	r2, #0
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fe65 	bl	8001674 <cpu_set_flags>
        } return;
 80019aa:	e0b1      	b.n	8001b10 <proc_cb+0x358>

        case 3: {
            //RR
            u8 old = reg_val;
 80019ac:	7c7b      	ldrb	r3, [r7, #17]
 80019ae:	733b      	strb	r3, [r7, #12]
            reg_val >>= 1;
 80019b0:	7c7b      	ldrb	r3, [r7, #17]
 80019b2:	085b      	lsrs	r3, r3, #1
 80019b4:	747b      	strb	r3, [r7, #17]

            reg_val |= (flagC << 7);
 80019b6:	7c3b      	ldrb	r3, [r7, #16]
 80019b8:	01db      	lsls	r3, r3, #7
 80019ba:	b25a      	sxtb	r2, r3
 80019bc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	747b      	strb	r3, [r7, #17]

            cpu_set_reg8(reg, reg_val);
 80019c6:	7c7a      	ldrb	r2, [r7, #17]
 80019c8:	7d3b      	ldrb	r3, [r7, #20]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f001 f91d 	bl	8002c0c <cpu_set_reg8>
            cpu_set_flags(ctx, !reg_val, false, false, old & 1);
 80019d2:	7c7b      	ldrb	r3, [r7, #17]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bf0c      	ite	eq
 80019d8:	2301      	moveq	r3, #1
 80019da:	2300      	movne	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	b259      	sxtb	r1, r3
 80019e0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2300      	movs	r3, #0
 80019ee:	2200      	movs	r2, #0
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff fe3f 	bl	8001674 <cpu_set_flags>
        } return;
 80019f6:	e08b      	b.n	8001b10 <proc_cb+0x358>

        case 4: {
            //SLA
            u8 old = reg_val;
 80019f8:	7c7b      	ldrb	r3, [r7, #17]
 80019fa:	737b      	strb	r3, [r7, #13]
            reg_val <<= 1;
 80019fc:	7c7b      	ldrb	r3, [r7, #17]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	747b      	strb	r3, [r7, #17]

            cpu_set_reg8(reg, reg_val);
 8001a02:	7c7a      	ldrb	r2, [r7, #17]
 8001a04:	7d3b      	ldrb	r3, [r7, #20]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f001 f8ff 	bl	8002c0c <cpu_set_reg8>
            cpu_set_flags(ctx, !reg_val, false, false, !!(old & 0x80));
 8001a0e:	7c7b      	ldrb	r3, [r7, #17]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	b259      	sxtb	r1, r3
 8001a1c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	09db      	lsrs	r3, r3, #7
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fe20 	bl	8001674 <cpu_set_flags>
        } return;
 8001a34:	e06c      	b.n	8001b10 <proc_cb+0x358>

        case 5: {
            //SRA
            u8 u = (int8_t)reg_val >> 1;
 8001a36:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001a3a:	105b      	asrs	r3, r3, #1
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	73bb      	strb	r3, [r7, #14]
            cpu_set_reg8(reg, u);
 8001a40:	7bba      	ldrb	r2, [r7, #14]
 8001a42:	7d3b      	ldrb	r3, [r7, #20]
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f001 f8e0 	bl	8002c0c <cpu_set_reg8>
            cpu_set_flags(ctx, !u, 0, 0, reg_val & 1);
 8001a4c:	7bbb      	ldrb	r3, [r7, #14]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf0c      	ite	eq
 8001a52:	2301      	moveq	r3, #1
 8001a54:	2300      	movne	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	b259      	sxtb	r1, r3
 8001a5a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2300      	movs	r3, #0
 8001a68:	2200      	movs	r2, #0
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fe02 	bl	8001674 <cpu_set_flags>
        } return;
 8001a70:	e04e      	b.n	8001b10 <proc_cb+0x358>

        case 6: {
            //SWAP
            reg_val = ((reg_val & 0xF0) >> 4) | ((reg_val & 0xF) << 4);
 8001a72:	7c7b      	ldrb	r3, [r7, #17]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	b25a      	sxtb	r2, r3
 8001a7a:	7c7b      	ldrb	r3, [r7, #17]
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	747b      	strb	r3, [r7, #17]
            cpu_set_reg8(reg, reg_val);
 8001a86:	7c7a      	ldrb	r2, [r7, #17]
 8001a88:	7d3b      	ldrb	r3, [r7, #20]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 f8bd 	bl	8002c0c <cpu_set_reg8>
            cpu_set_flags(ctx, reg_val == 0, false, false, false);
 8001a92:	7c7b      	ldrb	r3, [r7, #17]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	b259      	sxtb	r1, r3
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fde3 	bl	8001674 <cpu_set_flags>
        } return;
 8001aae:	e02f      	b.n	8001b10 <proc_cb+0x358>

        case 7: {
            //SRL
            u8 u = reg_val >> 1;
 8001ab0:	7c7b      	ldrb	r3, [r7, #17]
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
            cpu_set_reg8(reg, u);
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	7d3b      	ldrb	r3, [r7, #20]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 f8a5 	bl	8002c0c <cpu_set_reg8>
            cpu_set_flags(ctx, !u, 0, 0, reg_val & 1);
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	b259      	sxtb	r1, r3
 8001ad0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	b25b      	sxtb	r3, r3
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2300      	movs	r3, #0
 8001ade:	2200      	movs	r2, #0
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fdc7 	bl	8001674 <cpu_set_flags>
        } return;
 8001ae6:	e013      	b.n	8001b10 <proc_cb+0x358>
    }

    fprintf(stderr, "ERROR: INVALID CB: %02X", op);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <proc_cb+0x360>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	7d7a      	ldrb	r2, [r7, #21]
 8001af0:	490a      	ldr	r1, [pc, #40]	; (8001b1c <proc_cb+0x364>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f00c f818 	bl	800db28 <fiprintf>
    NO_IMPL
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <proc_cb+0x360>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2214      	movs	r2, #20
 8001b00:	2101      	movs	r1, #1
 8001b02:	4807      	ldr	r0, [pc, #28]	; (8001b20 <proc_cb+0x368>)
 8001b04:	f00c fa50 	bl	800dfa8 <fwrite>
 8001b08:	f06f 0004 	mvn.w	r0, #4
 8001b0c:	f00b fd7e 	bl	800d60c <exit>
}
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000ad4 	.word	0x20000ad4
 8001b1c:	0800f8b8 	.word	0x0800f8b8
 8001b20:	0800f8d0 	.word	0x0800f8d0

08001b24 <proc_rlca>:

static void proc_rlca(cpu_context *ctx) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	6078      	str	r0, [r7, #4]
    u8 u = ctx->regs.a;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	73fb      	strb	r3, [r7, #15]
    bool c = (u >> 7) & 1;
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	09db      	lsrs	r3, r3, #7
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf14      	ite	ne
 8001b40:	2301      	movne	r3, #1
 8001b42:	2300      	moveq	r3, #0
 8001b44:	73bb      	strb	r3, [r7, #14]
    u = (u << 1) | c;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	b25a      	sxtb	r2, r3
 8001b4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	73fb      	strb	r3, [r7, #15]
    ctx->regs.a = u;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, 0, 0, 0, c);
 8001b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2300      	movs	r3, #0
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fd83 	bl	8001674 <cpu_set_flags>
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <proc_rrca>:

static void proc_rrca(cpu_context *ctx) {
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af02      	add	r7, sp, #8
 8001b7c:	6078      	str	r0, [r7, #4]
    u8 b = ctx->regs.a & 1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
    ctx->regs.a >>= 1;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	085b      	lsrs	r3, r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	701a      	strb	r2, [r3, #0]
    ctx->regs.a |= (b << 7);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b25a      	sxtb	r2, r3
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	01db      	lsls	r3, r3, #7
 8001b9e:	b25b      	sxtb	r3, r3
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, 0, 0, 0, b);
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fd5c 	bl	8001674 <cpu_set_flags>
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <proc_rla>:


static void proc_rla(cpu_context *ctx) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	6078      	str	r0, [r7, #4]
    u8 u = ctx->regs.a;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	73fb      	strb	r3, [r7, #15]
    u8 cf = CPU_FLAG_C;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	111b      	asrs	r3, r3, #4
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	73bb      	strb	r3, [r7, #14]
    u8 c = (u >> 7) & 1;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	09db      	lsrs	r3, r3, #7
 8001be4:	737b      	strb	r3, [r7, #13]

    ctx->regs.a = (u << 1) | cf;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	b25a      	sxtb	r2, r3
 8001bec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b25b      	sxtb	r3, r3
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, 0, 0, 0, c);
 8001bfa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2300      	movs	r3, #0
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fd34 	bl	8001674 <cpu_set_flags>
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <proc_stop>:

static void proc_stop(cpu_context *ctx) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
    fprintf(stderr, "STOPPING!\n");
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <proc_stop+0x20>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	220a      	movs	r2, #10
 8001c24:	2101      	movs	r1, #1
 8001c26:	4804      	ldr	r0, [pc, #16]	; (8001c38 <proc_stop+0x24>)
 8001c28:	f00c f9be 	bl	800dfa8 <fwrite>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000ad4 	.word	0x20000ad4
 8001c38:	0800f8e8 	.word	0x0800f8e8

08001c3c <proc_daa>:

static void proc_daa(cpu_context *ctx) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	6078      	str	r0, [r7, #4]
    u8 u = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
    int fc = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]

    if (CPU_FLAG_H || (!CPU_FLAG_N && (ctx->regs.a & 0xF) > 9)) {
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	785b      	ldrb	r3, [r3, #1]
 8001c50:	115b      	asrs	r3, r3, #5
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10b      	bne.n	8001c74 <proc_daa+0x38>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	785b      	ldrb	r3, [r3, #1]
 8001c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <proc_daa+0x3c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	2b09      	cmp	r3, #9
 8001c72:	dd01      	ble.n	8001c78 <proc_daa+0x3c>
        u = 6;
 8001c74:	2306      	movs	r3, #6
 8001c76:	73fb      	strb	r3, [r7, #15]
    }

    if (CPU_FLAG_C || (!CPU_FLAG_N && ctx->regs.a > 0x99)) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	111b      	asrs	r3, r3, #4
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <proc_daa+0x60>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	785b      	ldrb	r3, [r3, #1]
 8001c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <proc_daa+0x6c>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b99      	cmp	r3, #153	; 0x99
 8001c9a:	d905      	bls.n	8001ca8 <proc_daa+0x6c>
        u |= 0x60;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ca2:	73fb      	strb	r3, [r7, #15]
        fc = 1;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
    }

    ctx->regs.a += CPU_FLAG_N ? -u : u;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	785b      	ldrb	r3, [r3, #1]
 8001cb0:	119b      	asrs	r3, r3, #6
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <proc_daa+0x88>
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	425b      	negs	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	e000      	b.n	8001cc6 <proc_daa+0x8a>
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, ctx->regs.a == 0, -1, 0, fc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bf0c      	ite	eq
 8001cd6:	2301      	moveq	r3, #1
 8001cd8:	2300      	movne	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	b259      	sxtb	r1, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fcc2 	bl	8001674 <cpu_set_flags>
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <proc_cpl>:

static void proc_cpl(cpu_context *ctx) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	6078      	str	r0, [r7, #4]
    ctx->regs.a = ~ctx->regs.a;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, -1, 1, 1, -1);
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2301      	movs	r3, #1
 8001d14:	2201      	movs	r2, #1
 8001d16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff fcaa 	bl	8001674 <cpu_set_flags>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <proc_scf>:

static void proc_scf(cpu_context *ctx) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	6078      	str	r0, [r7, #4]
    cpu_set_flags(ctx, -1, 0, 0, 1);
 8001d30:	2301      	movs	r3, #1
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2300      	movs	r3, #0
 8001d36:	2200      	movs	r2, #0
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fc99 	bl	8001674 <cpu_set_flags>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <proc_ccf>:

static void proc_ccf(cpu_context *ctx) {
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af02      	add	r7, sp, #8
 8001d50:	6078      	str	r0, [r7, #4]
    cpu_set_flags(ctx, -1, 0, 0, CPU_FLAG_C ^ 1);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	785b      	ldrb	r3, [r3, #1]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bf0c      	ite	eq
 8001d5e:	2301      	moveq	r3, #1
 8001d60:	2300      	movne	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	b25b      	sxtb	r3, r3
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff fc7f 	bl	8001674 <cpu_set_flags>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <proc_halt>:

static void proc_halt(cpu_context *ctx) {
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
    ctx->halted = true;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <proc_rra>:

static void proc_rra(cpu_context *ctx) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	6078      	str	r0, [r7, #4]
    u8 carry = CPU_FLAG_C;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	785b      	ldrb	r3, [r3, #1]
 8001da4:	111b      	asrs	r3, r3, #4
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	73fb      	strb	r3, [r7, #15]
    u8 new_c = ctx->regs.a & 1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	73bb      	strb	r3, [r7, #14]

    ctx->regs.a >>= 1;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	701a      	strb	r2, [r3, #0]
    ctx->regs.a |= (carry << 7);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b25a      	sxtb	r2, r3
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	01db      	lsls	r3, r3, #7
 8001dce:	b25b      	sxtb	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, 0, 0, 0, new_c);
 8001dda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2300      	movs	r3, #0
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fc44 	bl	8001674 <cpu_set_flags>
}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <proc_and>:

static void proc_and(cpu_context *ctx) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	6078      	str	r0, [r7, #4]
    ctx->regs.a &= ctx->fetched_data;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	899b      	ldrh	r3, [r3, #12]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	4013      	ands	r3, r2
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 1, 0);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf0c      	ite	eq
 8001e16:	2301      	moveq	r3, #1
 8001e18:	2300      	movne	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	b259      	sxtb	r1, r3
 8001e1e:	2300      	movs	r3, #0
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2301      	movs	r3, #1
 8001e24:	2200      	movs	r2, #0
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fc24 	bl	8001674 <cpu_set_flags>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <proc_xor>:

static void proc_xor(cpu_context *ctx) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	6078      	str	r0, [r7, #4]
    ctx->regs.a ^= ctx->fetched_data & 0xFF;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b25a      	sxtb	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	899b      	ldrh	r3, [r3, #12]
 8001e46:	b25b      	sxtb	r3, r3
 8001e48:	4053      	eors	r3, r2
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 0, 0);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bf0c      	ite	eq
 8001e5a:	2301      	moveq	r3, #1
 8001e5c:	2300      	movne	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	b259      	sxtb	r1, r3
 8001e62:	2300      	movs	r3, #0
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fc02 	bl	8001674 <cpu_set_flags>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <proc_or>:

static void proc_or(cpu_context *ctx) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	6078      	str	r0, [r7, #4]
    ctx->regs.a |= ctx->fetched_data & 0xFF;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b25a      	sxtb	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	899b      	ldrh	r3, [r3, #12]
 8001e8a:	b25b      	sxtb	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b25b      	sxtb	r3, r3
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 0, 0);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	b259      	sxtb	r1, r3
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2200      	movs	r2, #0
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fbe0 	bl	8001674 <cpu_set_flags>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <proc_cp>:

static void proc_cp(cpu_context *ctx) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	6078      	str	r0, [r7, #4]
    int n = (int)ctx->regs.a - (int)ctx->fetched_data;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	899b      	ldrh	r3, [r3, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	60fb      	str	r3, [r7, #12]

    cpu_set_flags(ctx, n == 0, 1, 
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	b259      	sxtb	r1, r3
        ((int)ctx->regs.a & 0x0F) - ((int)ctx->fetched_data & 0x0F) < 0, n < 0);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	f003 020f 	and.w	r2, r3, #15
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	899b      	ldrh	r3, [r3, #12]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	1ad3      	subs	r3, r2, r3
    cpu_set_flags(ctx, n == 0, 1, 
 8001ef2:	0fdb      	lsrs	r3, r3, #31
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	b25a      	sxtb	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	0fdb      	lsrs	r3, r3, #31
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	b25b      	sxtb	r3, r3
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	4613      	mov	r3, r2
 8001f04:	2201      	movs	r2, #1
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fbb4 	bl	8001674 <cpu_set_flags>
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <proc_di>:

static void proc_di(cpu_context *ctx) {
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
    ctx->int_master_enabled = false;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	769a      	strb	r2, [r3, #26]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <proc_ei>:

static void proc_ei(cpu_context *ctx) {
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
    ctx->enabling_ime = true;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	76da      	strb	r2, [r3, #27]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <is_16_bit>:

static bool is_16_bit(reg_type rt) {
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
    return rt >= RT_AF;
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	bf8c      	ite	hi
 8001f58:	2301      	movhi	r3, #1
 8001f5a:	2300      	movls	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <proc_ld>:

static void proc_ld(cpu_context *ctx) {
 8001f6a:	b590      	push	{r4, r7, lr}
 8001f6c:	b087      	sub	sp, #28
 8001f6e:	af02      	add	r7, sp, #8
 8001f70:	6078      	str	r0, [r7, #4]
    if (ctx->dest_is_mem) {
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7c1b      	ldrb	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d021      	beq.n	8001fbe <proc_ld+0x54>
        //LD (BC), A for instance...

        if (is_16_bit(ctx->cur_inst->reg_2)) {
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	78db      	ldrb	r3, [r3, #3]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ffe1 	bl	8001f48 <is_16_bit>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00b      	beq.n	8001fa4 <proc_ld+0x3a>
            //if 16 bit register...
            emu_cycles(1);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f000 ffeb 	bl	8002f68 <emu_cycles>
            bus_write16(ctx->mem_dest, ctx->fetched_data);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	89da      	ldrh	r2, [r3, #14]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	899b      	ldrh	r3, [r3, #12]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f7fe fbf1 	bl	8000784 <bus_write16>
 8001fa2:	e008      	b.n	8001fb6 <proc_ld+0x4c>
        } else {
            bus_write(ctx->mem_dest, ctx->fetched_data);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	89da      	ldrh	r2, [r3, #14]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	899b      	ldrh	r3, [r3, #12]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f7fe fb79 	bl	80006a8 <bus_write>
        }

        emu_cycles(1);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f000 ffd6 	bl	8002f68 <emu_cycles>

        return;
 8001fbc:	e054      	b.n	8002068 <proc_ld+0xfe>
    }

    if (ctx->cur_inst->mode == AM_HL_SPR) {
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	785b      	ldrb	r3, [r3, #1]
 8001fc4:	2b0d      	cmp	r3, #13
 8001fc6:	d146      	bne.n	8002056 <proc_ld+0xec>
        u8 hflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xF) + 
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	78db      	ldrb	r3, [r3, #3]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fcb8 	bl	8002944 <cpu_read_reg>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f003 020f 	and.w	r2, r3, #15
            (ctx->fetched_data & 0xF) >= 0x10;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	899b      	ldrh	r3, [r3, #12]
 8001fde:	f003 030f 	and.w	r3, r3, #15
        u8 hflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xF) + 
 8001fe2:	4413      	add	r3, r2
            (ctx->fetched_data & 0xF) >= 0x10;
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	bfcc      	ite	gt
 8001fe8:	2301      	movgt	r3, #1
 8001fea:	2300      	movle	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
        u8 hflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xF) + 
 8001fee:	73fb      	strb	r3, [r7, #15]

        u8 cflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xFF) + 
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	78db      	ldrb	r3, [r3, #3]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fca4 	bl	8002944 <cpu_read_reg>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	b2da      	uxtb	r2, r3
            (ctx->fetched_data & 0xFF) >= 0x100;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	899b      	ldrh	r3, [r3, #12]
 8002004:	b2db      	uxtb	r3, r3
        u8 cflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xFF) + 
 8002006:	4413      	add	r3, r2
            (ctx->fetched_data & 0xFF) >= 0x100;
 8002008:	2bff      	cmp	r3, #255	; 0xff
 800200a:	bfcc      	ite	gt
 800200c:	2301      	movgt	r3, #1
 800200e:	2300      	movle	r3, #0
 8002010:	b2db      	uxtb	r3, r3
        u8 cflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xFF) + 
 8002012:	73bb      	strb	r3, [r7, #14]

        cpu_set_flags(ctx, 0, 0, hflag, cflag);
 8002014:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	4613      	mov	r3, r2
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fb25 	bl	8001674 <cpu_set_flags>
        cpu_set_reg(ctx->cur_inst->reg_1, 
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	789c      	ldrb	r4, [r3, #2]
            cpu_read_reg(ctx->cur_inst->reg_2) + (int8_t)ctx->fetched_data);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	78db      	ldrb	r3, [r3, #3]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fc84 	bl	8002944 <cpu_read_reg>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	899b      	ldrh	r3, [r3, #12]
 8002044:	b25b      	sxtb	r3, r3
 8002046:	b29b      	uxth	r3, r3
        cpu_set_reg(ctx->cur_inst->reg_1, 
 8002048:	4413      	add	r3, r2
 800204a:	b29b      	uxth	r3, r3
 800204c:	4619      	mov	r1, r3
 800204e:	4620      	mov	r0, r4
 8002050:	f000 fcf0 	bl	8002a34 <cpu_set_reg>

        return;
 8002054:	e008      	b.n	8002068 <proc_ld+0xfe>
    }

    cpu_set_reg(ctx->cur_inst->reg_1, ctx->fetched_data);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	789a      	ldrb	r2, [r3, #2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	899b      	ldrh	r3, [r3, #12]
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f000 fce6 	bl	8002a34 <cpu_set_reg>
}
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}

0800206e <proc_ldh>:

static void proc_ldh(cpu_context *ctx) {
 800206e:	b590      	push	{r4, r7, lr}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
    if (ctx->cur_inst->reg_1 == RT_A) {
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	789b      	ldrb	r3, [r3, #2]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d111      	bne.n	80020a4 <proc_ldh+0x36>
        cpu_set_reg(ctx->cur_inst->reg_1, bus_read(0xFF00 | ctx->fetched_data));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	789c      	ldrb	r4, [r3, #2]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	899b      	ldrh	r3, [r3, #12]
 800208a:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800208e:	b29b      	uxth	r3, r3
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe faa1 	bl	80005d8 <bus_read>
 8002096:	4603      	mov	r3, r0
 8002098:	b29b      	uxth	r3, r3
 800209a:	4619      	mov	r1, r3
 800209c:	4620      	mov	r0, r4
 800209e:	f000 fcc9 	bl	8002a34 <cpu_set_reg>
 80020a2:	e007      	b.n	80020b4 <proc_ldh+0x46>
    } else {
        bus_write(ctx->mem_dest, ctx->regs.a);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	89da      	ldrh	r2, [r3, #14]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	4610      	mov	r0, r2
 80020b0:	f7fe fafa 	bl	80006a8 <bus_write>
    }

    emu_cycles(1);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f000 ff57 	bl	8002f68 <emu_cycles>
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd90      	pop	{r4, r7, pc}
	...

080020c4 <check_cond>:


static bool check_cond(cpu_context *ctx) {
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
    bool z = CPU_FLAG_Z;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	785b      	ldrb	r3, [r3, #1]
 80020d0:	b25b      	sxtb	r3, r3
 80020d2:	11db      	asrs	r3, r3, #7
 80020d4:	b25b      	sxtb	r3, r3
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
    bool c = CPU_FLAG_C;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	785b      	ldrb	r3, [r3, #1]
 80020e8:	111b      	asrs	r3, r3, #4
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bf14      	ite	ne
 80020f2:	2301      	movne	r3, #1
 80020f4:	2300      	moveq	r3, #0
 80020f6:	73bb      	strb	r3, [r7, #14]

    switch(ctx->cur_inst->cond) {
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	791b      	ldrb	r3, [r3, #4]
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d82c      	bhi.n	800215c <check_cond+0x98>
 8002102:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <check_cond+0x44>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	0800211d 	.word	0x0800211d
 800210c:	08002143 	.word	0x08002143
 8002110:	0800213f 	.word	0x0800213f
 8002114:	08002125 	.word	0x08002125
 8002118:	08002121 	.word	0x08002121
        case CT_NONE: return true;
 800211c:	2301      	movs	r3, #1
 800211e:	e01e      	b.n	800215e <check_cond+0x9a>
        case CT_C: return c;
 8002120:	7bbb      	ldrb	r3, [r7, #14]
 8002122:	e01c      	b.n	800215e <check_cond+0x9a>
        case CT_NC: return !c;
 8002124:	7bbb      	ldrb	r3, [r7, #14]
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf14      	ite	ne
 800212a:	2301      	movne	r3, #1
 800212c:	2300      	moveq	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f083 0301 	eor.w	r3, r3, #1
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	e00f      	b.n	800215e <check_cond+0x9a>
        case CT_Z: return z;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	e00d      	b.n	800215e <check_cond+0x9a>
        case CT_NZ: return !z;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf14      	ite	ne
 8002148:	2301      	movne	r3, #1
 800214a:	2300      	moveq	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f083 0301 	eor.w	r3, r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	e000      	b.n	800215e <check_cond+0x9a>
    }

    return false;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <goto_addr>:

static void goto_addr(cpu_context *ctx, u16 addr, bool pushpc) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	707b      	strb	r3, [r7, #1]
    if (check_cond(ctx)) {
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ffa1 	bl	80020c4 <check_cond>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d010      	beq.n	80021aa <goto_addr+0x3e>
        if (pushpc) {
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <goto_addr+0x32>
            emu_cycles(2);
 800218e:	2002      	movs	r0, #2
 8002190:	f000 feea 	bl	8002f68 <emu_cycles>
            stack_push16(ctx->regs.pc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	891b      	ldrh	r3, [r3, #8]
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fb50 	bl	800583e <stack_push16>
        }

        ctx->regs.pc = addr;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	887a      	ldrh	r2, [r7, #2]
 80021a2:	811a      	strh	r2, [r3, #8]
        emu_cycles(1);
 80021a4:	2001      	movs	r0, #1
 80021a6:	f000 fedf 	bl	8002f68 <emu_cycles>
    }
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <proc_jp>:

static void proc_jp(cpu_context *ctx) {
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
    goto_addr(ctx, ctx->fetched_data, false);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	899b      	ldrh	r3, [r3, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	4619      	mov	r1, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffd2 	bl	800216c <goto_addr>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <proc_jr>:

static void proc_jr(cpu_context *ctx) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
    int8_t rel = (int8_t)(ctx->fetched_data & 0xFF);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	899b      	ldrh	r3, [r3, #12]
 80021dc:	73fb      	strb	r3, [r7, #15]
    u16 addr = ctx->regs.pc + rel;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	891a      	ldrh	r2, [r3, #8]
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	81bb      	strh	r3, [r7, #12]
    goto_addr(ctx, addr, false);
 80021ec:	89bb      	ldrh	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	4619      	mov	r1, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffba 	bl	800216c <goto_addr>
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <proc_call>:

static void proc_call(cpu_context *ctx) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    goto_addr(ctx, ctx->fetched_data, true);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	899b      	ldrh	r3, [r3, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	4619      	mov	r1, r3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ffab 	bl	800216c <goto_addr>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <proc_rst>:

static void proc_rst(cpu_context *ctx) {
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
    goto_addr(ctx, ctx->cur_inst->param, true);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	795b      	ldrb	r3, [r3, #5]
 800222c:	b29b      	uxth	r3, r3
 800222e:	2201      	movs	r2, #1
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff9a 	bl	800216c <goto_addr>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <proc_ret>:

static void proc_ret(cpu_context *ctx) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    if (ctx->cur_inst->cond != CT_NONE) {
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	791b      	ldrb	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <proc_ret+0x18>
        emu_cycles(1);
 8002252:	2001      	movs	r0, #1
 8002254:	f000 fe88 	bl	8002f68 <emu_cycles>
    }

    if (check_cond(ctx)) {
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff33 	bl	80020c4 <check_cond>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d01b      	beq.n	800229c <proc_ret+0x5c>
        u16 lo = stack_pop();
 8002264:	f003 fb00 	bl	8005868 <stack_pop>
 8002268:	4603      	mov	r3, r0
 800226a:	81fb      	strh	r3, [r7, #14]
        emu_cycles(1);
 800226c:	2001      	movs	r0, #1
 800226e:	f000 fe7b 	bl	8002f68 <emu_cycles>
        u16 hi = stack_pop();
 8002272:	f003 faf9 	bl	8005868 <stack_pop>
 8002276:	4603      	mov	r3, r0
 8002278:	81bb      	strh	r3, [r7, #12]
        emu_cycles(1);
 800227a:	2001      	movs	r0, #1
 800227c:	f000 fe74 	bl	8002f68 <emu_cycles>

        u16 n = (hi << 8) | lo;
 8002280:	89bb      	ldrh	r3, [r7, #12]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	b21a      	sxth	r2, r3
 8002286:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800228a:	4313      	orrs	r3, r2
 800228c:	b21b      	sxth	r3, r3
 800228e:	817b      	strh	r3, [r7, #10]
        ctx->regs.pc = n;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	897a      	ldrh	r2, [r7, #10]
 8002294:	811a      	strh	r2, [r3, #8]

        emu_cycles(1);
 8002296:	2001      	movs	r0, #1
 8002298:	f000 fe66 	bl	8002f68 <emu_cycles>
    }
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <proc_reti>:

static void proc_reti(cpu_context *ctx) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
    ctx->int_master_enabled = true;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	769a      	strb	r2, [r3, #26]
    proc_ret(ctx);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffc4 	bl	8002240 <proc_ret>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <proc_pop>:

static void proc_pop(cpu_context *ctx) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    u16 lo = stack_pop();
 80022c8:	f003 face 	bl	8005868 <stack_pop>
 80022cc:	4603      	mov	r3, r0
 80022ce:	81fb      	strh	r3, [r7, #14]
    emu_cycles(1);
 80022d0:	2001      	movs	r0, #1
 80022d2:	f000 fe49 	bl	8002f68 <emu_cycles>
    u16 hi = stack_pop();
 80022d6:	f003 fac7 	bl	8005868 <stack_pop>
 80022da:	4603      	mov	r3, r0
 80022dc:	81bb      	strh	r3, [r7, #12]
    emu_cycles(1);
 80022de:	2001      	movs	r0, #1
 80022e0:	f000 fe42 	bl	8002f68 <emu_cycles>

    u16 n = (hi << 8) | lo;
 80022e4:	89bb      	ldrh	r3, [r7, #12]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	b21a      	sxth	r2, r3
 80022ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	817b      	strh	r3, [r7, #10]

    cpu_set_reg(ctx->cur_inst->reg_1, n);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	789b      	ldrb	r3, [r3, #2]
 80022fa:	897a      	ldrh	r2, [r7, #10]
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fb98 	bl	8002a34 <cpu_set_reg>

    if (ctx->cur_inst->reg_1 == RT_AF) {
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	789b      	ldrb	r3, [r3, #2]
 800230a:	2b09      	cmp	r3, #9
 800230c:	d10a      	bne.n	8002324 <proc_pop+0x64>
        cpu_set_reg(ctx->cur_inst->reg_1, n & 0xFFF0);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	789a      	ldrb	r2, [r3, #2]
 8002314:	897b      	ldrh	r3, [r7, #10]
 8002316:	f023 030f 	bic.w	r3, r3, #15
 800231a:	b29b      	uxth	r3, r3
 800231c:	4619      	mov	r1, r3
 800231e:	4610      	mov	r0, r2
 8002320:	f000 fb88 	bl	8002a34 <cpu_set_reg>
    }
}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <proc_push>:

static void proc_push(cpu_context *ctx) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    u16 hi = (cpu_read_reg(ctx->cur_inst->reg_1) >> 8) & 0xFF;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	789b      	ldrb	r3, [r3, #2]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fb02 	bl	8002944 <cpu_read_reg>
 8002340:	4603      	mov	r3, r0
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	b29b      	uxth	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	81fb      	strh	r3, [r7, #14]
    emu_cycles(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f000 fe0c 	bl	8002f68 <emu_cycles>
    stack_push(hi);
 8002350:	89fb      	ldrh	r3, [r7, #14]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4618      	mov	r0, r3
 8002356:	f003 fa59 	bl	800580c <stack_push>

    u16 lo = cpu_read_reg(ctx->cur_inst->reg_1) & 0xFF;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	789b      	ldrb	r3, [r3, #2]
 8002360:	4618      	mov	r0, r3
 8002362:	f000 faef 	bl	8002944 <cpu_read_reg>
 8002366:	4603      	mov	r3, r0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	81bb      	strh	r3, [r7, #12]
    emu_cycles(1);
 800236c:	2001      	movs	r0, #1
 800236e:	f000 fdfb 	bl	8002f68 <emu_cycles>
    stack_push(lo);
 8002372:	89bb      	ldrh	r3, [r7, #12]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	4618      	mov	r0, r3
 8002378:	f003 fa48 	bl	800580c <stack_push>
    
    emu_cycles(1);
 800237c:	2001      	movs	r0, #1
 800237e:	f000 fdf3 	bl	8002f68 <emu_cycles>
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <proc_inc>:

static void proc_inc(cpu_context *ctx) {
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af02      	add	r7, sp, #8
 8002390:	6078      	str	r0, [r7, #4]
    u16 val = cpu_read_reg(ctx->cur_inst->reg_1) + 1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	789b      	ldrb	r3, [r3, #2]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fad3 	bl	8002944 <cpu_read_reg>
 800239e:	4603      	mov	r3, r0
 80023a0:	3301      	adds	r3, #1
 80023a2:	81fb      	strh	r3, [r7, #14]

    if (is_16_bit(ctx->cur_inst->reg_1)) {
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	789b      	ldrb	r3, [r3, #2]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fdcc 	bl	8001f48 <is_16_bit>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <proc_inc+0x32>
        emu_cycles(1);
 80023b6:	2001      	movs	r0, #1
 80023b8:	f000 fdd6 	bl	8002f68 <emu_cycles>
    }

    if (ctx->cur_inst->reg_1 == RT_HL && ctx->cur_inst->mode == AM_MR) {
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	789b      	ldrb	r3, [r3, #2]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d11e      	bne.n	8002404 <proc_inc+0x7a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	785b      	ldrb	r3, [r3, #1]
 80023cc:	2b12      	cmp	r3, #18
 80023ce:	d119      	bne.n	8002404 <proc_inc+0x7a>
        val = bus_read(cpu_read_reg(RT_HL)) + 1;
 80023d0:	200c      	movs	r0, #12
 80023d2:	f000 fab7 	bl	8002944 <cpu_read_reg>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f8fd 	bl	80005d8 <bus_read>
 80023de:	4603      	mov	r3, r0
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	81fb      	strh	r3, [r7, #14]
        val &= 0xFF;
 80023e6:	89fb      	ldrh	r3, [r7, #14]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	81fb      	strh	r3, [r7, #14]
        bus_write(cpu_read_reg(RT_HL), val);
 80023ec:	200c      	movs	r0, #12
 80023ee:	f000 faa9 	bl	8002944 <cpu_read_reg>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f7fe f953 	bl	80006a8 <bus_write>
 8002402:	e00f      	b.n	8002424 <proc_inc+0x9a>
    } else {
        cpu_set_reg(ctx->cur_inst->reg_1, val);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	789b      	ldrb	r3, [r3, #2]
 800240a:	89fa      	ldrh	r2, [r7, #14]
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fb10 	bl	8002a34 <cpu_set_reg>
        val = cpu_read_reg(ctx->cur_inst->reg_1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	789b      	ldrb	r3, [r3, #2]
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fa92 	bl	8002944 <cpu_read_reg>
 8002420:	4603      	mov	r3, r0
 8002422:	81fb      	strh	r3, [r7, #14]
    }

    if ((ctx->cur_opcode & 0x03) == 0x03) {
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7c5b      	ldrb	r3, [r3, #17]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b03      	cmp	r3, #3
 800242e:	d017      	beq.n	8002460 <proc_inc+0xd6>
        return;
    }

    cpu_set_flags(ctx, val == 0, 0, (val & 0x0F) == 0, -1);
 8002430:	89fb      	ldrh	r3, [r7, #14]
 8002432:	2b00      	cmp	r3, #0
 8002434:	bf0c      	ite	eq
 8002436:	2301      	moveq	r3, #1
 8002438:	2300      	movne	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	b259      	sxtb	r1, r3
 800243e:	89fb      	ldrh	r3, [r7, #14]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	b25b      	sxtb	r3, r3
 8002450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002454:	9200      	str	r2, [sp, #0]
 8002456:	2200      	movs	r2, #0
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff f90b 	bl	8001674 <cpu_set_flags>
 800245e:	e000      	b.n	8002462 <proc_inc+0xd8>
        return;
 8002460:	bf00      	nop
}
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <proc_dec>:

static void proc_dec(cpu_context *ctx) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af02      	add	r7, sp, #8
 800246e:	6078      	str	r0, [r7, #4]
    u16 val = cpu_read_reg(ctx->cur_inst->reg_1) - 1;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	789b      	ldrb	r3, [r3, #2]
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fa64 	bl	8002944 <cpu_read_reg>
 800247c:	4603      	mov	r3, r0
 800247e:	3b01      	subs	r3, #1
 8002480:	81fb      	strh	r3, [r7, #14]

    if (is_16_bit(ctx->cur_inst->reg_1)) {
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	789b      	ldrb	r3, [r3, #2]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fd5d 	bl	8001f48 <is_16_bit>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <proc_dec+0x32>
        emu_cycles(1);
 8002494:	2001      	movs	r0, #1
 8002496:	f000 fd67 	bl	8002f68 <emu_cycles>
    }

    if (ctx->cur_inst->reg_1 == RT_HL && ctx->cur_inst->mode == AM_MR) {
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	789b      	ldrb	r3, [r3, #2]
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	d11b      	bne.n	80024dc <proc_dec+0x74>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	785b      	ldrb	r3, [r3, #1]
 80024aa:	2b12      	cmp	r3, #18
 80024ac:	d116      	bne.n	80024dc <proc_dec+0x74>
        val = bus_read(cpu_read_reg(RT_HL)) - 1;
 80024ae:	200c      	movs	r0, #12
 80024b0:	f000 fa48 	bl	8002944 <cpu_read_reg>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f88e 	bl	80005d8 <bus_read>
 80024bc:	4603      	mov	r3, r0
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	81fb      	strh	r3, [r7, #14]
        bus_write(cpu_read_reg(RT_HL), val);
 80024c4:	200c      	movs	r0, #12
 80024c6:	f000 fa3d 	bl	8002944 <cpu_read_reg>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	89fb      	ldrh	r3, [r7, #14]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	4610      	mov	r0, r2
 80024d6:	f7fe f8e7 	bl	80006a8 <bus_write>
 80024da:	e00f      	b.n	80024fc <proc_dec+0x94>
    } else {
        cpu_set_reg(ctx->cur_inst->reg_1, val);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	789b      	ldrb	r3, [r3, #2]
 80024e2:	89fa      	ldrh	r2, [r7, #14]
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 faa4 	bl	8002a34 <cpu_set_reg>
        val = cpu_read_reg(ctx->cur_inst->reg_1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	789b      	ldrb	r3, [r3, #2]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fa26 	bl	8002944 <cpu_read_reg>
 80024f8:	4603      	mov	r3, r0
 80024fa:	81fb      	strh	r3, [r7, #14]
    }

    if ((ctx->cur_opcode & 0x0B) == 0x0B) {
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7c5b      	ldrb	r3, [r3, #17]
 8002500:	f003 030b 	and.w	r3, r3, #11
 8002504:	2b0b      	cmp	r3, #11
 8002506:	d017      	beq.n	8002538 <proc_dec+0xd0>
        return;
    }

    cpu_set_flags(ctx, val == 0, 1, (val & 0x0F) == 0x0F, -1);
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	b259      	sxtb	r1, r3
 8002516:	89fb      	ldrh	r3, [r7, #14]
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	2b0f      	cmp	r3, #15
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	b25b      	sxtb	r3, r3
 8002528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800252c:	9200      	str	r2, [sp, #0]
 800252e:	2201      	movs	r2, #1
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff f89f 	bl	8001674 <cpu_set_flags>
 8002536:	e000      	b.n	800253a <proc_dec+0xd2>
        return;
 8002538:	bf00      	nop
}
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <proc_sub>:

static void proc_sub(cpu_context *ctx) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af02      	add	r7, sp, #8
 8002546:	6078      	str	r0, [r7, #4]
    u16 val = cpu_read_reg(ctx->cur_inst->reg_1) - ctx->fetched_data;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	789b      	ldrb	r3, [r3, #2]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f9f8 	bl	8002944 <cpu_read_reg>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	899b      	ldrh	r3, [r3, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	82fb      	strh	r3, [r7, #22]

    int z = val == 0;
 8002560:	8afb      	ldrh	r3, [r7, #22]
 8002562:	2b00      	cmp	r3, #0
 8002564:	bf0c      	ite	eq
 8002566:	2301      	moveq	r3, #1
 8002568:	2300      	movne	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	613b      	str	r3, [r7, #16]
    int h = ((int)cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) - ((int)ctx->fetched_data & 0xF) < 0;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	789b      	ldrb	r3, [r3, #2]
 8002574:	4618      	mov	r0, r3
 8002576:	f000 f9e5 	bl	8002944 <cpu_read_reg>
 800257a:	4603      	mov	r3, r0
 800257c:	f003 020f 	and.w	r2, r3, #15
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	899b      	ldrh	r3, [r3, #12]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	0fdb      	lsrs	r3, r3, #31
 800258c:	b2db      	uxtb	r3, r3
 800258e:	60fb      	str	r3, [r7, #12]
    int c = ((int)cpu_read_reg(ctx->cur_inst->reg_1)) - ((int)ctx->fetched_data) < 0;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	789b      	ldrb	r3, [r3, #2]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f9d4 	bl	8002944 <cpu_read_reg>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	899b      	ldrh	r3, [r3, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	0fdb      	lsrs	r3, r3, #31
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	60bb      	str	r3, [r7, #8]

    cpu_set_reg(ctx->cur_inst->reg_1, val);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	789b      	ldrb	r3, [r3, #2]
 80025b2:	8afa      	ldrh	r2, [r7, #22]
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fa3c 	bl	8002a34 <cpu_set_reg>
    cpu_set_flags(ctx, z, 1, h, c);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	b259      	sxtb	r1, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	b25a      	sxtb	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	b25b      	sxtb	r3, r3
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	4613      	mov	r3, r2
 80025cc:	2201      	movs	r2, #1
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff f850 	bl	8001674 <cpu_set_flags>
}
 80025d4:	bf00      	nop
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <proc_sbc>:

static void proc_sbc(cpu_context *ctx) {
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	6078      	str	r0, [r7, #4]
    u8 val = ctx->fetched_data + CPU_FLAG_C;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	899b      	ldrh	r3, [r3, #12]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	111b      	asrs	r3, r3, #4
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	75fb      	strb	r3, [r7, #23]

    int z = cpu_read_reg(ctx->cur_inst->reg_1) - val == 0;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	789b      	ldrb	r3, [r3, #2]
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f99e 	bl	8002944 <cpu_read_reg>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	b29b      	uxth	r3, r3
 8002610:	429a      	cmp	r2, r3
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	613b      	str	r3, [r7, #16]

    int h = ((int)cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) 
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	789b      	ldrb	r3, [r3, #2]
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f98e 	bl	8002944 <cpu_read_reg>
 8002628:	4603      	mov	r3, r0
 800262a:	f003 020f 	and.w	r2, r3, #15
        - ((int)ctx->fetched_data & 0xF) - ((int)CPU_FLAG_C) < 0;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	899b      	ldrh	r3, [r3, #12]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	1ad2      	subs	r2, r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	111b      	asrs	r3, r3, #4
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	0fdb      	lsrs	r3, r3, #31
 8002646:	b2db      	uxtb	r3, r3
    int h = ((int)cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) 
 8002648:	60fb      	str	r3, [r7, #12]
    int c = ((int)cpu_read_reg(ctx->cur_inst->reg_1)) 
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	789b      	ldrb	r3, [r3, #2]
 8002650:	4618      	mov	r0, r3
 8002652:	f000 f977 	bl	8002944 <cpu_read_reg>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
        - ((int)ctx->fetched_data) - ((int)CPU_FLAG_C) < 0;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	899b      	ldrh	r3, [r3, #12]
 800265e:	1ad2      	subs	r2, r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	111b      	asrs	r3, r3, #4
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	0fdb      	lsrs	r3, r3, #31
 800266e:	b2db      	uxtb	r3, r3
    int c = ((int)cpu_read_reg(ctx->cur_inst->reg_1)) 
 8002670:	60bb      	str	r3, [r7, #8]

    cpu_set_reg(ctx->cur_inst->reg_1, cpu_read_reg(ctx->cur_inst->reg_1) - val);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	789c      	ldrb	r4, [r3, #2]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	789b      	ldrb	r3, [r3, #2]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f960 	bl	8002944 <cpu_read_reg>
 8002684:	4603      	mov	r3, r0
 8002686:	461a      	mov	r2, r3
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	b29b      	uxth	r3, r3
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	b29b      	uxth	r3, r3
 8002690:	4619      	mov	r1, r3
 8002692:	4620      	mov	r0, r4
 8002694:	f000 f9ce 	bl	8002a34 <cpu_set_reg>
    cpu_set_flags(ctx, z, 1, h, c);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	b259      	sxtb	r1, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	b25a      	sxtb	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	b25b      	sxtb	r3, r3
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	4613      	mov	r3, r2
 80026a8:	2201      	movs	r2, #1
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7fe ffe2 	bl	8001674 <cpu_set_flags>
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd90      	pop	{r4, r7, pc}

080026b8 <proc_adc>:

static void proc_adc(cpu_context *ctx) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af02      	add	r7, sp, #8
 80026be:	6078      	str	r0, [r7, #4]
    u16 u = ctx->fetched_data;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	899b      	ldrh	r3, [r3, #12]
 80026c4:	81fb      	strh	r3, [r7, #14]
    u16 a = ctx->regs.a;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	81bb      	strh	r3, [r7, #12]
    u16 c = CPU_FLAG_C;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	785b      	ldrb	r3, [r3, #1]
 80026d0:	111b      	asrs	r3, r3, #4
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	817b      	strh	r3, [r7, #10]

    ctx->regs.a = (a + u + c) & 0xFF;
 80026da:	89bb      	ldrh	r3, [r7, #12]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	89fb      	ldrh	r3, [r7, #14]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	897b      	ldrh	r3, [r7, #10]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	b259      	sxtb	r1, r3
        (a & 0xF) + (u & 0xF) + c > 0xF,
 8002702:	89bb      	ldrh	r3, [r7, #12]
 8002704:	f003 020f 	and.w	r2, r3, #15
 8002708:	89fb      	ldrh	r3, [r7, #14]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	441a      	add	r2, r3
 8002710:	897b      	ldrh	r3, [r7, #10]
 8002712:	4413      	add	r3, r2
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 
 8002714:	2b0f      	cmp	r3, #15
 8002716:	bfcc      	ite	gt
 8002718:	2301      	movgt	r3, #1
 800271a:	2300      	movle	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	b258      	sxtb	r0, r3
        a + u + c > 0xFF);
 8002720:	89ba      	ldrh	r2, [r7, #12]
 8002722:	89fb      	ldrh	r3, [r7, #14]
 8002724:	441a      	add	r2, r3
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	4413      	add	r3, r2
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 
 800272a:	2bff      	cmp	r3, #255	; 0xff
 800272c:	bfcc      	ite	gt
 800272e:	2301      	movgt	r3, #1
 8002730:	2300      	movle	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	b25b      	sxtb	r3, r3
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	4603      	mov	r3, r0
 800273a:	2200      	movs	r2, #0
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7fe ff99 	bl	8001674 <cpu_set_flags>
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <proc_add>:

static void proc_add(cpu_context *ctx) {
 800274a:	b580      	push	{r7, lr}
 800274c:	b08a      	sub	sp, #40	; 0x28
 800274e:	af02      	add	r7, sp, #8
 8002750:	6078      	str	r0, [r7, #4]
    u32 val = cpu_read_reg(ctx->cur_inst->reg_1) + ctx->fetched_data;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	789b      	ldrb	r3, [r3, #2]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 f8f3 	bl	8002944 <cpu_read_reg>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	899b      	ldrh	r3, [r3, #12]
 8002766:	4413      	add	r3, r2
 8002768:	61fb      	str	r3, [r7, #28]

    bool is_16bit = is_16_bit(ctx->cur_inst->reg_1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	789b      	ldrb	r3, [r3, #2]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fbe9 	bl	8001f48 <is_16_bit>
 8002776:	4603      	mov	r3, r0
 8002778:	73fb      	strb	r3, [r7, #15]

    if (is_16bit) {
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <proc_add+0x3c>
        emu_cycles(1);
 8002780:	2001      	movs	r0, #1
 8002782:	f000 fbf1 	bl	8002f68 <emu_cycles>
    }

    if (ctx->cur_inst->reg_1 == RT_SP) {
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	789b      	ldrb	r3, [r3, #2]
 800278c:	2b0d      	cmp	r3, #13
 800278e:	d10c      	bne.n	80027aa <proc_add+0x60>
        val = cpu_read_reg(ctx->cur_inst->reg_1) + (int8_t)ctx->fetched_data;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	789b      	ldrb	r3, [r3, #2]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f8d4 	bl	8002944 <cpu_read_reg>
 800279c:	4603      	mov	r3, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	899b      	ldrh	r3, [r3, #12]
 80027a4:	b25b      	sxtb	r3, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	61fb      	str	r3, [r7, #28]
    }

    int z = (val & 0xFF) == 0;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	61bb      	str	r3, [r7, #24]
    int h = (cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) + (ctx->fetched_data & 0xF) >= 0x10;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	789b      	ldrb	r3, [r3, #2]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 f8bf 	bl	8002944 <cpu_read_reg>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f003 020f 	and.w	r2, r3, #15
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	899b      	ldrh	r3, [r3, #12]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	4413      	add	r3, r2
 80027d6:	2b0f      	cmp	r3, #15
 80027d8:	bfcc      	ite	gt
 80027da:	2301      	movgt	r3, #1
 80027dc:	2300      	movle	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	617b      	str	r3, [r7, #20]
    int c = (int)(cpu_read_reg(ctx->cur_inst->reg_1) & 0xFF) + (int)(ctx->fetched_data & 0xFF) >= 0x100;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	789b      	ldrb	r3, [r3, #2]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 f8ab 	bl	8002944 <cpu_read_reg>
 80027ee:	4603      	mov	r3, r0
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	899b      	ldrh	r3, [r3, #12]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	2bff      	cmp	r3, #255	; 0xff
 80027fc:	bfcc      	ite	gt
 80027fe:	2301      	movgt	r3, #1
 8002800:	2300      	movle	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	613b      	str	r3, [r7, #16]

    if (is_16bit) {
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d02d      	beq.n	8002868 <proc_add+0x11e>
        z = -1;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002810:	61bb      	str	r3, [r7, #24]
        h = (cpu_read_reg(ctx->cur_inst->reg_1) & 0xFFF) + (ctx->fetched_data & 0xFFF) >= 0x1000;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	789b      	ldrb	r3, [r3, #2]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f893 	bl	8002944 <cpu_read_reg>
 800281e:	4603      	mov	r3, r0
 8002820:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	899b      	ldrh	r3, [r3, #12]
 8002828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282c:	4413      	add	r3, r2
 800282e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002832:	4293      	cmp	r3, r2
 8002834:	bfcc      	ite	gt
 8002836:	2301      	movgt	r3, #1
 8002838:	2300      	movle	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	617b      	str	r3, [r7, #20]
        u32 n = ((u32)cpu_read_reg(ctx->cur_inst->reg_1)) + ((u32)ctx->fetched_data);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	789b      	ldrb	r3, [r3, #2]
 8002844:	4618      	mov	r0, r3
 8002846:	f000 f87d 	bl	8002944 <cpu_read_reg>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	899b      	ldrh	r3, [r3, #12]
 8002852:	4413      	add	r3, r2
 8002854:	60bb      	str	r3, [r7, #8]
        c = n >= 0x10000;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800285c:	4293      	cmp	r3, r2
 800285e:	bf8c      	ite	hi
 8002860:	2301      	movhi	r3, #1
 8002862:	2300      	movls	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	613b      	str	r3, [r7, #16]
    }

    if (ctx->cur_inst->reg_1 == RT_SP) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	789b      	ldrb	r3, [r3, #2]
 800286e:	2b0d      	cmp	r3, #13
 8002870:	d127      	bne.n	80028c2 <proc_add+0x178>
        z = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
        h = (cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) + (ctx->fetched_data & 0xF) >= 0x10;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	789b      	ldrb	r3, [r3, #2]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 f861 	bl	8002944 <cpu_read_reg>
 8002882:	4603      	mov	r3, r0
 8002884:	f003 020f 	and.w	r2, r3, #15
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	899b      	ldrh	r3, [r3, #12]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	4413      	add	r3, r2
 8002892:	2b0f      	cmp	r3, #15
 8002894:	bfcc      	ite	gt
 8002896:	2301      	movgt	r3, #1
 8002898:	2300      	movle	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	617b      	str	r3, [r7, #20]
        c = (int)(cpu_read_reg(ctx->cur_inst->reg_1) & 0xFF) + (int)(ctx->fetched_data & 0xFF) >= 0x100;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	789b      	ldrb	r3, [r3, #2]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 f84d 	bl	8002944 <cpu_read_reg>
 80028aa:	4603      	mov	r3, r0
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	899b      	ldrh	r3, [r3, #12]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	2bff      	cmp	r3, #255	; 0xff
 80028b8:	bfcc      	ite	gt
 80028ba:	2301      	movgt	r3, #1
 80028bc:	2300      	movle	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	613b      	str	r3, [r7, #16]
    }

    cpu_set_reg(ctx->cur_inst->reg_1, val & 0xFFFF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	789b      	ldrb	r3, [r3, #2]
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	b292      	uxth	r2, r2
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f8b0 	bl	8002a34 <cpu_set_reg>
    cpu_set_flags(ctx, z, 0, h, c);
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	b259      	sxtb	r1, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	b25a      	sxtb	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	b25b      	sxtb	r3, r3
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	4613      	mov	r3, r2
 80028e4:	2200      	movs	r2, #0
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fec4 	bl	8001674 <cpu_set_flags>
}
 80028ec:	bf00      	nop
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <inst_get_processor>:
    [IN_CCF] = proc_ccf,
    [IN_EI] = proc_ei,
    [IN_RETI] = proc_reti
};

IN_PROC inst_get_processor(in_type type) {
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
    return processors[type];
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	4a04      	ldr	r2, [pc, #16]	; (8002914 <inst_get_processor+0x20>)
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000328 	.word	0x20000328

08002918 <reverse>:
#include <cpu.h>
#include <bus.h>

extern cpu_context ctx;

u16 reverse(u16 n) {
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	80fb      	strh	r3, [r7, #6]
    return ((n & 0xFF00) >> 8) | ((n & 0x00FF) << 8);
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	b29b      	uxth	r3, r3
 8002928:	b21a      	sxth	r2, r3
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	b21b      	sxth	r3, r3
 8002930:	4313      	orrs	r3, r2
 8002932:	b21b      	sxth	r3, r3
 8002934:	b29b      	uxth	r3, r3
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <cpu_read_reg>:

u16 cpu_read_reg(reg_type rt) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
    switch(rt) {
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	3b01      	subs	r3, #1
 8002952:	2b0d      	cmp	r3, #13
 8002954:	d860      	bhi.n	8002a18 <cpu_read_reg+0xd4>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <cpu_read_reg+0x18>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	08002995 	.word	0x08002995
 8002960:	0800299d 	.word	0x0800299d
 8002964:	080029a5 	.word	0x080029a5
 8002968:	080029ad 	.word	0x080029ad
 800296c:	080029b5 	.word	0x080029b5
 8002970:	080029bd 	.word	0x080029bd
 8002974:	080029c5 	.word	0x080029c5
 8002978:	080029cd 	.word	0x080029cd
 800297c:	080029d5 	.word	0x080029d5
 8002980:	080029e3 	.word	0x080029e3
 8002984:	080029f1 	.word	0x080029f1
 8002988:	080029ff 	.word	0x080029ff
 800298c:	08002a13 	.word	0x08002a13
 8002990:	08002a0d 	.word	0x08002a0d
        case RT_A: return ctx.regs.a;
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <cpu_read_reg+0xe0>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	e03e      	b.n	8002a1a <cpu_read_reg+0xd6>
        case RT_F: return ctx.regs.f;
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <cpu_read_reg+0xe0>)
 800299e:	785b      	ldrb	r3, [r3, #1]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	e03a      	b.n	8002a1a <cpu_read_reg+0xd6>
        case RT_B: return ctx.regs.b;
 80029a4:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <cpu_read_reg+0xe0>)
 80029a6:	789b      	ldrb	r3, [r3, #2]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	e036      	b.n	8002a1a <cpu_read_reg+0xd6>
        case RT_C: return ctx.regs.c;
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <cpu_read_reg+0xe0>)
 80029ae:	78db      	ldrb	r3, [r3, #3]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	e032      	b.n	8002a1a <cpu_read_reg+0xd6>
        case RT_D: return ctx.regs.d;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <cpu_read_reg+0xe0>)
 80029b6:	791b      	ldrb	r3, [r3, #4]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	e02e      	b.n	8002a1a <cpu_read_reg+0xd6>
        case RT_E: return ctx.regs.e;
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <cpu_read_reg+0xe0>)
 80029be:	795b      	ldrb	r3, [r3, #5]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	e02a      	b.n	8002a1a <cpu_read_reg+0xd6>
        case RT_H: return ctx.regs.h;
 80029c4:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <cpu_read_reg+0xe0>)
 80029c6:	799b      	ldrb	r3, [r3, #6]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	e026      	b.n	8002a1a <cpu_read_reg+0xd6>
        case RT_L: return ctx.regs.l;
 80029cc:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <cpu_read_reg+0xe0>)
 80029ce:	79db      	ldrb	r3, [r3, #7]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	e022      	b.n	8002a1a <cpu_read_reg+0xd6>

        case RT_AF: return reverse(*((u16 *)&ctx.regs.a));
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <cpu_read_reg+0xe0>)
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff9d 	bl	8002918 <reverse>
 80029de:	4603      	mov	r3, r0
 80029e0:	e01b      	b.n	8002a1a <cpu_read_reg+0xd6>
        case RT_BC: return reverse(*((u16 *)&ctx.regs.b));
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <cpu_read_reg+0xe4>)
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff96 	bl	8002918 <reverse>
 80029ec:	4603      	mov	r3, r0
 80029ee:	e014      	b.n	8002a1a <cpu_read_reg+0xd6>
        case RT_DE: return reverse(*((u16 *)&ctx.regs.d));
 80029f0:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <cpu_read_reg+0xe8>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff8f 	bl	8002918 <reverse>
 80029fa:	4603      	mov	r3, r0
 80029fc:	e00d      	b.n	8002a1a <cpu_read_reg+0xd6>
        case RT_HL: return reverse(*((u16 *)&ctx.regs.h));
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <cpu_read_reg+0xec>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ff88 	bl	8002918 <reverse>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	e006      	b.n	8002a1a <cpu_read_reg+0xd6>

        case RT_PC: return ctx.regs.pc;
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <cpu_read_reg+0xe0>)
 8002a0e:	891b      	ldrh	r3, [r3, #8]
 8002a10:	e003      	b.n	8002a1a <cpu_read_reg+0xd6>
        case RT_SP: return ctx.regs.sp;
 8002a12:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <cpu_read_reg+0xe0>)
 8002a14:	895b      	ldrh	r3, [r3, #10]
 8002a16:	e000      	b.n	8002a1a <cpu_read_reg+0xd6>
        default: return 0;
 8002a18:	2300      	movs	r3, #0
    }
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000fb4 	.word	0x20000fb4
 8002a28:	20000fb6 	.word	0x20000fb6
 8002a2c:	20000fb8 	.word	0x20000fb8
 8002a30:	20000fba 	.word	0x20000fba

08002a34 <cpu_set_reg>:

void cpu_set_reg(reg_type rt, u16 val) {
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	460a      	mov	r2, r1
 8002a3e:	71fb      	strb	r3, [r7, #7]
 8002a40:	4613      	mov	r3, r2
 8002a42:	80bb      	strh	r3, [r7, #4]
    switch(rt) {
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	2b0e      	cmp	r3, #14
 8002a48:	d871      	bhi.n	8002b2e <cpu_set_reg+0xfa>
 8002a4a:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <cpu_set_reg+0x1c>)
 8002a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a50:	08002b2d 	.word	0x08002b2d
 8002a54:	08002a8d 	.word	0x08002a8d
 8002a58:	08002a97 	.word	0x08002a97
 8002a5c:	08002aa1 	.word	0x08002aa1
 8002a60:	08002aab 	.word	0x08002aab
 8002a64:	08002ab5 	.word	0x08002ab5
 8002a68:	08002abf 	.word	0x08002abf
 8002a6c:	08002ac9 	.word	0x08002ac9
 8002a70:	08002ad3 	.word	0x08002ad3
 8002a74:	08002add 	.word	0x08002add
 8002a78:	08002aed 	.word	0x08002aed
 8002a7c:	08002afd 	.word	0x08002afd
 8002a80:	08002b0d 	.word	0x08002b0d
 8002a84:	08002b25 	.word	0x08002b25
 8002a88:	08002b1d 	.word	0x08002b1d
        case RT_A: ctx.regs.a = val & 0xFF; break;
 8002a8c:	88bb      	ldrh	r3, [r7, #4]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <cpu_set_reg+0x104>)
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e04b      	b.n	8002b2e <cpu_set_reg+0xfa>
        case RT_F: ctx.regs.f = val & 0xFF; break;
 8002a96:	88bb      	ldrh	r3, [r7, #4]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <cpu_set_reg+0x104>)
 8002a9c:	705a      	strb	r2, [r3, #1]
 8002a9e:	e046      	b.n	8002b2e <cpu_set_reg+0xfa>
        case RT_B: ctx.regs.b = val & 0xFF; break;
 8002aa0:	88bb      	ldrh	r3, [r7, #4]
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <cpu_set_reg+0x104>)
 8002aa6:	709a      	strb	r2, [r3, #2]
 8002aa8:	e041      	b.n	8002b2e <cpu_set_reg+0xfa>
        case RT_C: {
             ctx.regs.c = val & 0xFF;
 8002aaa:	88bb      	ldrh	r3, [r7, #4]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <cpu_set_reg+0x104>)
 8002ab0:	70da      	strb	r2, [r3, #3]
        } break;
 8002ab2:	e03c      	b.n	8002b2e <cpu_set_reg+0xfa>
        case RT_D: ctx.regs.d = val & 0xFF; break;
 8002ab4:	88bb      	ldrh	r3, [r7, #4]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <cpu_set_reg+0x104>)
 8002aba:	711a      	strb	r2, [r3, #4]
 8002abc:	e037      	b.n	8002b2e <cpu_set_reg+0xfa>
        case RT_E: ctx.regs.e = val & 0xFF; break;
 8002abe:	88bb      	ldrh	r3, [r7, #4]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <cpu_set_reg+0x104>)
 8002ac4:	715a      	strb	r2, [r3, #5]
 8002ac6:	e032      	b.n	8002b2e <cpu_set_reg+0xfa>
        case RT_H: ctx.regs.h = val & 0xFF; break;
 8002ac8:	88bb      	ldrh	r3, [r7, #4]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <cpu_set_reg+0x104>)
 8002ace:	719a      	strb	r2, [r3, #6]
 8002ad0:	e02d      	b.n	8002b2e <cpu_set_reg+0xfa>
        case RT_L: ctx.regs.l = val & 0xFF; break;
 8002ad2:	88bb      	ldrh	r3, [r7, #4]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <cpu_set_reg+0x104>)
 8002ad8:	71da      	strb	r2, [r3, #7]
 8002ada:	e028      	b.n	8002b2e <cpu_set_reg+0xfa>

        case RT_AF: *((u16 *)&ctx.regs.a) = reverse(val); break;
 8002adc:	4c16      	ldr	r4, [pc, #88]	; (8002b38 <cpu_set_reg+0x104>)
 8002ade:	88bb      	ldrh	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff19 	bl	8002918 <reverse>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	8023      	strh	r3, [r4, #0]
 8002aea:	e020      	b.n	8002b2e <cpu_set_reg+0xfa>
        case RT_BC: *((u16 *)&ctx.regs.b) = reverse(val); break;
 8002aec:	4c13      	ldr	r4, [pc, #76]	; (8002b3c <cpu_set_reg+0x108>)
 8002aee:	88bb      	ldrh	r3, [r7, #4]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff11 	bl	8002918 <reverse>
 8002af6:	4603      	mov	r3, r0
 8002af8:	8023      	strh	r3, [r4, #0]
 8002afa:	e018      	b.n	8002b2e <cpu_set_reg+0xfa>
        case RT_DE: *((u16 *)&ctx.regs.d) = reverse(val); break;
 8002afc:	4c10      	ldr	r4, [pc, #64]	; (8002b40 <cpu_set_reg+0x10c>)
 8002afe:	88bb      	ldrh	r3, [r7, #4]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff09 	bl	8002918 <reverse>
 8002b06:	4603      	mov	r3, r0
 8002b08:	8023      	strh	r3, [r4, #0]
 8002b0a:	e010      	b.n	8002b2e <cpu_set_reg+0xfa>
        case RT_HL: {
         *((u16 *)&ctx.regs.h) = reverse(val); 
 8002b0c:	4c0d      	ldr	r4, [pc, #52]	; (8002b44 <cpu_set_reg+0x110>)
 8002b0e:	88bb      	ldrh	r3, [r7, #4]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff01 	bl	8002918 <reverse>
 8002b16:	4603      	mov	r3, r0
 8002b18:	8023      	strh	r3, [r4, #0]
         break;
 8002b1a:	e008      	b.n	8002b2e <cpu_set_reg+0xfa>
        }

        case RT_PC: ctx.regs.pc = val; break;
 8002b1c:	4a06      	ldr	r2, [pc, #24]	; (8002b38 <cpu_set_reg+0x104>)
 8002b1e:	88bb      	ldrh	r3, [r7, #4]
 8002b20:	8113      	strh	r3, [r2, #8]
 8002b22:	e004      	b.n	8002b2e <cpu_set_reg+0xfa>
        case RT_SP: ctx.regs.sp = val; break;
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <cpu_set_reg+0x104>)
 8002b26:	88bb      	ldrh	r3, [r7, #4]
 8002b28:	8153      	strh	r3, [r2, #10]
 8002b2a:	e000      	b.n	8002b2e <cpu_set_reg+0xfa>
        case RT_NONE: break;
 8002b2c:	bf00      	nop
    }
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd90      	pop	{r4, r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000fb4 	.word	0x20000fb4
 8002b3c:	20000fb6 	.word	0x20000fb6
 8002b40:	20000fb8 	.word	0x20000fb8
 8002b44:	20000fba 	.word	0x20000fba

08002b48 <cpu_read_reg8>:


u8 cpu_read_reg8(reg_type rt) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
    switch(rt) {
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	2b0b      	cmp	r3, #11
 8002b58:	d83b      	bhi.n	8002bd2 <cpu_read_reg8+0x8a>
 8002b5a:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <cpu_read_reg8+0x18>)
 8002b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b60:	08002b91 	.word	0x08002b91
 8002b64:	08002b97 	.word	0x08002b97
 8002b68:	08002b9d 	.word	0x08002b9d
 8002b6c:	08002ba3 	.word	0x08002ba3
 8002b70:	08002ba9 	.word	0x08002ba9
 8002b74:	08002baf 	.word	0x08002baf
 8002b78:	08002bb5 	.word	0x08002bb5
 8002b7c:	08002bbb 	.word	0x08002bbb
 8002b80:	08002bd3 	.word	0x08002bd3
 8002b84:	08002bd3 	.word	0x08002bd3
 8002b88:	08002bd3 	.word	0x08002bd3
 8002b8c:	08002bc1 	.word	0x08002bc1
        case RT_A: return ctx.regs.a;
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <cpu_read_reg8+0xb4>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	e02e      	b.n	8002bf4 <cpu_read_reg8+0xac>
        case RT_F: return ctx.regs.f;
 8002b96:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <cpu_read_reg8+0xb4>)
 8002b98:	785b      	ldrb	r3, [r3, #1]
 8002b9a:	e02b      	b.n	8002bf4 <cpu_read_reg8+0xac>
        case RT_B: return ctx.regs.b;
 8002b9c:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <cpu_read_reg8+0xb4>)
 8002b9e:	789b      	ldrb	r3, [r3, #2]
 8002ba0:	e028      	b.n	8002bf4 <cpu_read_reg8+0xac>
        case RT_C: return ctx.regs.c;
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <cpu_read_reg8+0xb4>)
 8002ba4:	78db      	ldrb	r3, [r3, #3]
 8002ba6:	e025      	b.n	8002bf4 <cpu_read_reg8+0xac>
        case RT_D: return ctx.regs.d;
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <cpu_read_reg8+0xb4>)
 8002baa:	791b      	ldrb	r3, [r3, #4]
 8002bac:	e022      	b.n	8002bf4 <cpu_read_reg8+0xac>
        case RT_E: return ctx.regs.e;
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <cpu_read_reg8+0xb4>)
 8002bb0:	795b      	ldrb	r3, [r3, #5]
 8002bb2:	e01f      	b.n	8002bf4 <cpu_read_reg8+0xac>
        case RT_H: return ctx.regs.h;
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <cpu_read_reg8+0xb4>)
 8002bb6:	799b      	ldrb	r3, [r3, #6]
 8002bb8:	e01c      	b.n	8002bf4 <cpu_read_reg8+0xac>
        case RT_L: return ctx.regs.l;
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <cpu_read_reg8+0xb4>)
 8002bbc:	79db      	ldrb	r3, [r3, #7]
 8002bbe:	e019      	b.n	8002bf4 <cpu_read_reg8+0xac>
        case RT_HL: {
            return bus_read(cpu_read_reg(RT_HL));
 8002bc0:	200c      	movs	r0, #12
 8002bc2:	f7ff febf 	bl	8002944 <cpu_read_reg>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fd05 	bl	80005d8 <bus_read>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	e010      	b.n	8002bf4 <cpu_read_reg8+0xac>
        }
        default:
            printf("**ERR INVALID REG8: %d\n", rt);
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	480a      	ldr	r0, [pc, #40]	; (8002c00 <cpu_read_reg8+0xb8>)
 8002bd8:	f00b fe50 	bl	800e87c <iprintf>
            NO_IMPL
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <cpu_read_reg8+0xbc>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2214      	movs	r2, #20
 8002be4:	2101      	movs	r1, #1
 8002be6:	4808      	ldr	r0, [pc, #32]	; (8002c08 <cpu_read_reg8+0xc0>)
 8002be8:	f00b f9de 	bl	800dfa8 <fwrite>
 8002bec:	f06f 0004 	mvn.w	r0, #4
 8002bf0:	f00a fd0c 	bl	800d60c <exit>
    }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000fb4 	.word	0x20000fb4
 8002c00:	0800f8f4 	.word	0x0800f8f4
 8002c04:	20000ad4 	.word	0x20000ad4
 8002c08:	0800f90c 	.word	0x0800f90c

08002c0c <cpu_set_reg8>:

void cpu_set_reg8(reg_type rt, u8 val) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	460a      	mov	r2, r1
 8002c16:	71fb      	strb	r3, [r7, #7]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	71bb      	strb	r3, [r7, #6]
    switch(rt) {
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	2b0b      	cmp	r3, #11
 8002c22:	d846      	bhi.n	8002cb2 <cpu_set_reg8+0xa6>
 8002c24:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <cpu_set_reg8+0x20>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c5d 	.word	0x08002c5d
 8002c30:	08002c65 	.word	0x08002c65
 8002c34:	08002c6d 	.word	0x08002c6d
 8002c38:	08002c75 	.word	0x08002c75
 8002c3c:	08002c7d 	.word	0x08002c7d
 8002c40:	08002c85 	.word	0x08002c85
 8002c44:	08002c8d 	.word	0x08002c8d
 8002c48:	08002c95 	.word	0x08002c95
 8002c4c:	08002cb3 	.word	0x08002cb3
 8002c50:	08002cb3 	.word	0x08002cb3
 8002c54:	08002cb3 	.word	0x08002cb3
 8002c58:	08002c9d 	.word	0x08002c9d
        case RT_A: ctx.regs.a = val & 0xFF; break;
 8002c5c:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <cpu_set_reg8+0xd0>)
 8002c5e:	79bb      	ldrb	r3, [r7, #6]
 8002c60:	7013      	strb	r3, [r2, #0]
 8002c62:	e037      	b.n	8002cd4 <cpu_set_reg8+0xc8>
        case RT_F: ctx.regs.f = val & 0xFF; break;
 8002c64:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <cpu_set_reg8+0xd0>)
 8002c66:	79bb      	ldrb	r3, [r7, #6]
 8002c68:	7053      	strb	r3, [r2, #1]
 8002c6a:	e033      	b.n	8002cd4 <cpu_set_reg8+0xc8>
        case RT_B: ctx.regs.b = val & 0xFF; break;
 8002c6c:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <cpu_set_reg8+0xd0>)
 8002c6e:	79bb      	ldrb	r3, [r7, #6]
 8002c70:	7093      	strb	r3, [r2, #2]
 8002c72:	e02f      	b.n	8002cd4 <cpu_set_reg8+0xc8>
        case RT_C: ctx.regs.c = val & 0xFF; break;
 8002c74:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <cpu_set_reg8+0xd0>)
 8002c76:	79bb      	ldrb	r3, [r7, #6]
 8002c78:	70d3      	strb	r3, [r2, #3]
 8002c7a:	e02b      	b.n	8002cd4 <cpu_set_reg8+0xc8>
        case RT_D: ctx.regs.d = val & 0xFF; break;
 8002c7c:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <cpu_set_reg8+0xd0>)
 8002c7e:	79bb      	ldrb	r3, [r7, #6]
 8002c80:	7113      	strb	r3, [r2, #4]
 8002c82:	e027      	b.n	8002cd4 <cpu_set_reg8+0xc8>
        case RT_E: ctx.regs.e = val & 0xFF; break;
 8002c84:	4a15      	ldr	r2, [pc, #84]	; (8002cdc <cpu_set_reg8+0xd0>)
 8002c86:	79bb      	ldrb	r3, [r7, #6]
 8002c88:	7153      	strb	r3, [r2, #5]
 8002c8a:	e023      	b.n	8002cd4 <cpu_set_reg8+0xc8>
        case RT_H: ctx.regs.h = val & 0xFF; break;
 8002c8c:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <cpu_set_reg8+0xd0>)
 8002c8e:	79bb      	ldrb	r3, [r7, #6]
 8002c90:	7193      	strb	r3, [r2, #6]
 8002c92:	e01f      	b.n	8002cd4 <cpu_set_reg8+0xc8>
        case RT_L: ctx.regs.l = val & 0xFF; break;
 8002c94:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <cpu_set_reg8+0xd0>)
 8002c96:	79bb      	ldrb	r3, [r7, #6]
 8002c98:	71d3      	strb	r3, [r2, #7]
 8002c9a:	e01b      	b.n	8002cd4 <cpu_set_reg8+0xc8>
        case RT_HL: bus_write(cpu_read_reg(RT_HL), val); break;
 8002c9c:	200c      	movs	r0, #12
 8002c9e:	f7ff fe51 	bl	8002944 <cpu_read_reg>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	79bb      	ldrb	r3, [r7, #6]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f7fd fcfc 	bl	80006a8 <bus_write>
 8002cb0:	e010      	b.n	8002cd4 <cpu_set_reg8+0xc8>
        default:
            printf("**ERR INVALID REG8: %d\n", rt);
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	480a      	ldr	r0, [pc, #40]	; (8002ce0 <cpu_set_reg8+0xd4>)
 8002cb8:	f00b fde0 	bl	800e87c <iprintf>
            NO_IMPL
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <cpu_set_reg8+0xd8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2214      	movs	r2, #20
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	4808      	ldr	r0, [pc, #32]	; (8002ce8 <cpu_set_reg8+0xdc>)
 8002cc8:	f00b f96e 	bl	800dfa8 <fwrite>
 8002ccc:	f06f 0004 	mvn.w	r0, #4
 8002cd0:	f00a fc9c 	bl	800d60c <exit>
    }
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000fb4 	.word	0x20000fb4
 8002ce0:	0800f8f4 	.word	0x0800f8f4
 8002ce4:	20000ad4 	.word	0x20000ad4
 8002ce8:	0800f90c 	.word	0x0800f90c

08002cec <cpu_get_regs>:

cpu_registers *cpu_get_regs() {
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
    return &ctx.regs;
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <cpu_get_regs+0x10>)
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	20000fb4 	.word	0x20000fb4

08002d00 <cpu_get_int_flags>:

u8 cpu_get_int_flags() {
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
    return ctx.int_flags;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <cpu_get_int_flags+0x14>)
 8002d06:	7f5b      	ldrb	r3, [r3, #29]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000fb4 	.word	0x20000fb4

08002d18 <cpu_set_int_flags>:

void cpu_set_int_flags(u8 value) {
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
    ctx.int_flags = value;
 8002d22:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <cpu_set_int_flags+0x1c>)
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	7753      	strb	r3, [r2, #29]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	20000fb4 	.word	0x20000fb4

08002d38 <dbg_update>:
#include <bus.h>

static char dbg_msg[1024] = {0};
static int msg_size = 0;

void dbg_update() {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
    if (bus_read(0xFF02) == 0x81) {
 8002d3e:	f64f 7002 	movw	r0, #65282	; 0xff02
 8002d42:	f7fd fc49 	bl	80005d8 <bus_read>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b81      	cmp	r3, #129	; 0x81
 8002d4a:	d112      	bne.n	8002d72 <dbg_update+0x3a>
        char c = bus_read(0xFF01);
 8002d4c:	f64f 7001 	movw	r0, #65281	; 0xff01
 8002d50:	f7fd fc42 	bl	80005d8 <bus_read>
 8002d54:	4603      	mov	r3, r0
 8002d56:	71fb      	strb	r3, [r7, #7]

        dbg_msg[msg_size++] = c;
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <dbg_update+0x44>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	4907      	ldr	r1, [pc, #28]	; (8002d7c <dbg_update+0x44>)
 8002d60:	600a      	str	r2, [r1, #0]
 8002d62:	4907      	ldr	r1, [pc, #28]	; (8002d80 <dbg_update+0x48>)
 8002d64:	79fa      	ldrb	r2, [r7, #7]
 8002d66:	54ca      	strb	r2, [r1, r3]

        bus_write(0xFF02, 0);
 8002d68:	2100      	movs	r1, #0
 8002d6a:	f64f 7002 	movw	r0, #65282	; 0xff02
 8002d6e:	f7fd fc9b 	bl	80006a8 <bus_write>
    }
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200013d4 	.word	0x200013d4
 8002d80:	20000fd4 	.word	0x20000fd4

08002d84 <dbg_print>:

void dbg_print() {
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
    if (dbg_msg[0]) {
        //printf("DBG: %s\n", dbg_msg);
    }
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <dma_start>:
    u8 start_delay;
} dma_context;

static dma_context ctx;

void dma_start(u8 start) {
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
    ctx.active = true;
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <dma_start+0x30>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
    ctx.byte = 0;
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <dma_start+0x30>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	705a      	strb	r2, [r3, #1]
    ctx.start_delay = 2;
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <dma_start+0x30>)
 8002dac:	2202      	movs	r2, #2
 8002dae:	70da      	strb	r2, [r3, #3]
    ctx.value = start;
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <dma_start+0x30>)
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	7093      	strb	r3, [r2, #2]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	200013d8 	.word	0x200013d8

08002dc8 <dma_tick>:

void dma_tick() {
 8002dc8:	b598      	push	{r3, r4, r7, lr}
 8002dca:	af00      	add	r7, sp, #0
    if (!ctx.active) {
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <dma_tick+0x78>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	f083 0301 	eor.w	r3, r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d12f      	bne.n	8002e3a <dma_tick+0x72>
        return;
    }

    if (ctx.start_delay) {
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <dma_tick+0x78>)
 8002ddc:	78db      	ldrb	r3, [r3, #3]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d006      	beq.n	8002df0 <dma_tick+0x28>
        ctx.start_delay--;
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <dma_tick+0x78>)
 8002de4:	78db      	ldrb	r3, [r3, #3]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <dma_tick+0x78>)
 8002dec:	70da      	strb	r2, [r3, #3]
        return;
 8002dee:	e025      	b.n	8002e3c <dma_tick+0x74>
    }

    ppu_oam_write(ctx.byte, bus_read((ctx.value * 0x100) + ctx.byte));
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <dma_tick+0x78>)
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	b29c      	uxth	r4, r3
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <dma_tick+0x78>)
 8002df8:	789b      	ldrb	r3, [r3, #2]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <dma_tick+0x78>)
 8002e02:	785b      	ldrb	r3, [r3, #1]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd fbe4 	bl	80005d8 <bus_read>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4619      	mov	r1, r3
 8002e14:	4620      	mov	r0, r4
 8002e16:	f001 fbed 	bl	80045f4 <ppu_oam_write>

    ctx.byte++;
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <dma_tick+0x78>)
 8002e1c:	785b      	ldrb	r3, [r3, #1]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <dma_tick+0x78>)
 8002e24:	705a      	strb	r2, [r3, #1]

    ctx.active = ctx.byte < 0xA0;
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <dma_tick+0x78>)
 8002e28:	785b      	ldrb	r3, [r3, #1]
 8002e2a:	2b9f      	cmp	r3, #159	; 0x9f
 8002e2c:	bf94      	ite	ls
 8002e2e:	2301      	movls	r3, #1
 8002e30:	2300      	movhi	r3, #0
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	4b02      	ldr	r3, [pc, #8]	; (8002e40 <dma_tick+0x78>)
 8002e36:	701a      	strb	r2, [r3, #0]
 8002e38:	e000      	b.n	8002e3c <dma_tick+0x74>
        return;
 8002e3a:	bf00      	nop
}
 8002e3c:	bd98      	pop	{r3, r4, r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200013d8 	.word	0x200013d8

08002e44 <dma_transferring>:

bool dma_transferring() {
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
    return ctx.active;
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <dma_transferring+0x14>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	200013d8 	.word	0x200013d8

08002e5c <cpu_run>:

emu_context *emu_get_context() {
    return &ctx;
}

void *cpu_run(void *p) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
    timer_init();
 8002e64:	f003 f80a 	bl	8005e7c <timer_init>
    cpu_init();
 8002e68:	f7fe f832 	bl	8000ed0 <cpu_init>
    ppu_init();
 8002e6c:	f001 fb0c 	bl	8004488 <ppu_init>

    ctx.running = true;
 8002e70:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <cpu_run+0x6c>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	705a      	strb	r2, [r3, #1]
    ctx.paused = false;
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <cpu_run+0x6c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
    ctx.ticks = 0;
 8002e7c:	4912      	ldr	r1, [pc, #72]	; (8002ec8 <cpu_run+0x6c>)
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9c1 2302 	strd	r2, r3, [r1, #8]

    while(ctx.running) {
 8002e8a:	e014      	b.n	8002eb6 <cpu_run+0x5a>
        if (ctx.paused) {
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <cpu_run+0x6c>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <cpu_run+0x40>
            delay(10);
 8002e94:	200a      	movs	r0, #10
 8002e96:	f003 f8f8 	bl	800608a <delay>
            continue;
 8002e9a:	e00c      	b.n	8002eb6 <cpu_run+0x5a>
        }

        if (!cpu_step()) {
 8002e9c:	f7fe f890 	bl	8000fc0 <cpu_step>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f083 0301 	eor.w	r3, r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d004      	beq.n	8002eb6 <cpu_run+0x5a>
            printf("CPU Stopped\n");
 8002eac:	4807      	ldr	r0, [pc, #28]	; (8002ecc <cpu_run+0x70>)
 8002eae:	f00b fd6b 	bl	800e988 <puts>
            return 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e004      	b.n	8002ec0 <cpu_run+0x64>
    while(ctx.running) {
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <cpu_run+0x6c>)
 8002eb8:	785b      	ldrb	r3, [r3, #1]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1e6      	bne.n	8002e8c <cpu_run+0x30>
        }
    }

    return 0;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	200013e0 	.word	0x200013e0
 8002ecc:	0800f924 	.word	0x0800f924

08002ed0 <emu_run>:

int emu_run(char *argv) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

    if (!cart_load(argv)) {
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7fd fd59 	bl	8000990 <cart_load>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f083 0301 	eor.w	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d006      	beq.n	8002ef8 <emu_run+0x28>
        printf("Failed to load ROM file: %s\n", argv);
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	481b      	ldr	r0, [pc, #108]	; (8002f5c <emu_run+0x8c>)
 8002eee:	f00b fcc5 	bl	800e87c <iprintf>
        return -2;
 8002ef2:	f06f 0301 	mvn.w	r3, #1
 8002ef6:	e02c      	b.n	8002f52 <emu_run+0x82>
    }

    printf("Cart loaded..\n");
 8002ef8:	4819      	ldr	r0, [pc, #100]	; (8002f60 <emu_run+0x90>)
 8002efa:	f00b fd45 	bl	800e988 <puts>

    ui_init();
 8002efe:	f003 f8bd 	bl	800607c <ui_init>
    cpu_run(NULL);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7ff ffaa 	bl	8002e5c <cpu_run>
//    if (pthread_create(&t1, NULL, cpu_run, NULL)) {
//        fprintf(stderr, "FAILED TO START MAIN CPU THREAD!\n");
//        return -1;
//    }

    u32 prev_frame = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]

    while(!ctx.die) {
 8002f0c:	e019      	b.n	8002f42 <emu_run+0x72>
        //usleep(500);
        HAL_Delay(500);
 8002f0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f12:	f003 f961 	bl	80061d8 <HAL_Delay>
        ui_handle_events();
 8002f16:	f003 f8d1 	bl	80060bc <ui_handle_events>

        if (prev_frame != ppu_get_context()->current_frame) {
 8002f1a:	f001 faab 	bl	8004474 <ppu_get_context>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	f242 132c 	movw	r3, #8492	; 0x212c
 8002f24:	4413      	add	r3, r2
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d001      	beq.n	8002f32 <emu_run+0x62>
            ui_update();
 8002f2e:	f003 f8be 	bl	80060ae <ui_update>
        }

        prev_frame = ppu_get_context()->current_frame;
 8002f32:	f001 fa9f 	bl	8004474 <ppu_get_context>
 8002f36:	4602      	mov	r2, r0
 8002f38:	f242 132c 	movw	r3, #8492	; 0x212c
 8002f3c:	4413      	add	r3, r2
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
    while(!ctx.die) {
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <emu_run+0x94>)
 8002f44:	789b      	ldrb	r3, [r3, #2]
 8002f46:	f083 0301 	eor.w	r3, r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1de      	bne.n	8002f0e <emu_run+0x3e>
    }

    return 0;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	0800f930 	.word	0x0800f930
 8002f60:	0800f950 	.word	0x0800f950
 8002f64:	200013e0 	.word	0x200013e0

08002f68 <emu_cycles>:

void emu_cycles(int cpu_cycles) {
 8002f68:	b5b0      	push	{r4, r5, r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
    
    for (int i=0; i<cpu_cycles; i++) {
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	e01a      	b.n	8002fac <emu_cycles+0x44>
        for (int n=0; n<4; n++) {
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	e00f      	b.n	8002f9c <emu_cycles+0x34>
            ctx.ticks++;
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <emu_cycles+0x58>)
 8002f7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f82:	1c54      	adds	r4, r2, #1
 8002f84:	f143 0500 	adc.w	r5, r3, #0
 8002f88:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <emu_cycles+0x58>)
 8002f8a:	e9c3 4502 	strd	r4, r5, [r3, #8]
            timer_tick();
 8002f8e:	f002 ff83 	bl	8005e98 <timer_tick>
            ppu_tick();
 8002f92:	f001 faff 	bl	8004594 <ppu_tick>
        for (int n=0; n<4; n++) {
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	ddec      	ble.n	8002f7c <emu_cycles+0x14>
        }

        dma_tick();
 8002fa2:	f7ff ff11 	bl	8002dc8 <dma_tick>
    for (int i=0; i<cpu_cycles; i++) {
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	dbe0      	blt.n	8002f76 <emu_cycles+0xe>
    }
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200013e0 	.word	0x200013e0

08002fc4 <gamepad_button_sel>:
    gamepad_state controller;
} gamepad_context;

static gamepad_context ctx = {0};

bool gamepad_button_sel() {
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
    return ctx.button_sel;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <gamepad_button_sel+0x14>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	200013f0 	.word	0x200013f0

08002fdc <gamepad_dir_sel>:

bool gamepad_dir_sel() {
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
    return ctx.dir_sel;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <gamepad_dir_sel+0x14>)
 8002fe2:	785b      	ldrb	r3, [r3, #1]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	200013f0 	.word	0x200013f0

08002ff4 <gamepad_set_sel>:

void gamepad_set_sel(u8 value) {
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
    ctx.button_sel = value & 0x20;
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <gamepad_set_sel+0x40>)
 8003010:	701a      	strb	r2, [r3, #0]
    ctx.dir_sel = value & 0x10;
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4b04      	ldr	r3, [pc, #16]	; (8003034 <gamepad_set_sel+0x40>)
 8003024:	705a      	strb	r2, [r3, #1]
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	200013f0 	.word	0x200013f0

08003038 <gamepad_get_state>:

gamepad_state *gamepad_get_state() {
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
    return &ctx.controller;
 800303c:	4b02      	ldr	r3, [pc, #8]	; (8003048 <gamepad_get_state+0x10>)
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	200013f2 	.word	0x200013f2

0800304c <gamepad_get_output>:

u8 gamepad_get_output() {
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
    u8 output = 0xCF;
 8003052:	23cf      	movs	r3, #207	; 0xcf
 8003054:	71fb      	strb	r3, [r7, #7]

    if (!gamepad_button_sel()) {
 8003056:	f7ff ffb5 	bl	8002fc4 <gamepad_button_sel>
 800305a:	4603      	mov	r3, r0
 800305c:	f083 0301 	eor.w	r3, r3, #1
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d027      	beq.n	80030b6 <gamepad_get_output+0x6a>
        if (gamepad_get_state()->start) {
 8003066:	f7ff ffe7 	bl	8003038 <gamepad_get_state>
 800306a:	4603      	mov	r3, r0
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <gamepad_get_output+0x2e>
            output &= ~(1 << 3);
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	f023 0308 	bic.w	r3, r3, #8
 8003078:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->select) {
 800307a:	f7ff ffdd 	bl	8003038 <gamepad_get_state>
 800307e:	4603      	mov	r3, r0
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <gamepad_get_output+0x42>
            output &= ~(1 << 2);
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	f023 0304 	bic.w	r3, r3, #4
 800308c:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->a) {
 800308e:	f7ff ffd3 	bl	8003038 <gamepad_get_state>
 8003092:	4603      	mov	r3, r0
 8003094:	789b      	ldrb	r3, [r3, #2]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <gamepad_get_output+0x56>
            output &= ~(1 << 0);
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->b) {
 80030a2:	f7ff ffc9 	bl	8003038 <gamepad_get_state>
 80030a6:	4603      	mov	r3, r0
 80030a8:	78db      	ldrb	r3, [r3, #3]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <gamepad_get_output+0x6a>
            output &= ~(1 << 1);
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f023 0302 	bic.w	r3, r3, #2
 80030b4:	71fb      	strb	r3, [r7, #7]
        }
    }

    if (!gamepad_dir_sel()) {
 80030b6:	f7ff ff91 	bl	8002fdc <gamepad_dir_sel>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f083 0301 	eor.w	r3, r3, #1
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d027      	beq.n	8003116 <gamepad_get_output+0xca>
        if (gamepad_get_state()->left) {
 80030c6:	f7ff ffb7 	bl	8003038 <gamepad_get_state>
 80030ca:	4603      	mov	r3, r0
 80030cc:	799b      	ldrb	r3, [r3, #6]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <gamepad_get_output+0x8e>
            output &= ~(1 << 1);
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	f023 0302 	bic.w	r3, r3, #2
 80030d8:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->right) {
 80030da:	f7ff ffad 	bl	8003038 <gamepad_get_state>
 80030de:	4603      	mov	r3, r0
 80030e0:	79db      	ldrb	r3, [r3, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <gamepad_get_output+0xa2>
            output &= ~(1 << 0);
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->up) {
 80030ee:	f7ff ffa3 	bl	8003038 <gamepad_get_state>
 80030f2:	4603      	mov	r3, r0
 80030f4:	791b      	ldrb	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <gamepad_get_output+0xb6>
            output &= ~(1 << 2);
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	f023 0304 	bic.w	r3, r3, #4
 8003100:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->down) {
 8003102:	f7ff ff99 	bl	8003038 <gamepad_get_state>
 8003106:	4603      	mov	r3, r0
 8003108:	795b      	ldrb	r3, [r3, #5]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <gamepad_get_output+0xca>
            output &= ~(1 << 3);
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	f023 0308 	bic.w	r3, r3, #8
 8003114:	71fb      	strb	r3, [r7, #7]
        }
    }

    return output;
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <instruction_by_opcode>:
    [0xFF] = {IN_RST, AM_IMP, RT_NONE, RT_NONE, CT_NONE, 0x38},
};



instruction *instruction_by_opcode(u8 opcode) {
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
    return &instructions[opcode];
 800312a:	79fa      	ldrb	r2, [r7, #7]
 800312c:	4613      	mov	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4413      	add	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4a03      	ldr	r2, [pc, #12]	; (8003144 <instruction_by_opcode+0x24>)
 8003136:	4413      	add	r3, r2
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	200003b8 	.word	0x200003b8

08003148 <inst_name>:
    "IN_BIT", 
    "IN_RES", 
    "IN_SET"
};

char *inst_name(in_type t) {
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
    return inst_lookup[t];
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	4a04      	ldr	r2, [pc, #16]	; (8003168 <inst_name+0x20>)
 8003156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	200009b8 	.word	0x200009b8

0800316c <inst_to_str>:
    "HL",
    "SP",
    "PC"
};

void inst_to_str(cpu_context *ctx, char *str) {
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b087      	sub	sp, #28
 8003170:	af02      	add	r7, sp, #8
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
    instruction *inst = ctx->cur_inst;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	60fb      	str	r3, [r7, #12]
    sprintf(str, "%s ", inst_name(inst->type));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ffe1 	bl	8003148 <inst_name>
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	49ac      	ldr	r1, [pc, #688]	; (800343c <inst_to_str+0x2d0>)
 800318c:	6838      	ldr	r0, [r7, #0]
 800318e:	f00b fcdb 	bl	800eb48 <siprintf>

    switch(inst->mode) {
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	2b14      	cmp	r3, #20
 8003198:	f200 81cb 	bhi.w	8003532 <inst_to_str+0x3c6>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <inst_to_str+0x38>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	0800355d 	.word	0x0800355d
 80031a8:	080031f9 	.word	0x080031f9
 80031ac:	08003247 	.word	0x08003247
 80031b0:	0800327b 	.word	0x0800327b
 80031b4:	08003225 	.word	0x08003225
 80031b8:	08003305 	.word	0x08003305
 80031bc:	080032d1 	.word	0x080032d1
 80031c0:	08003333 	.word	0x08003333
 80031c4:	08003367 	.word	0x08003367
 80031c8:	0800339b 	.word	0x0800339b
 80031cc:	080033cf 	.word	0x080033cf
 80031d0:	08003305 	.word	0x08003305
 80031d4:	08003403 	.word	0x08003403
 80031d8:	08003475 	.word	0x08003475
 80031dc:	080034bf 	.word	0x080034bf
 80031e0:	080034a3 	.word	0x080034a3
 80031e4:	08003533 	.word	0x08003533
 80031e8:	080034d9 	.word	0x080034d9
 80031ec:	080032af 	.word	0x080032af
 80031f0:	08003507 	.word	0x08003507
 80031f4:	080031f9 	.word	0x080031f9
        case AM_IMP:
            return;

        case AM_R_D16:
        case AM_R_A16:
            sprintf(str, "%s %s,$%04X", inst_name(inst->type), 
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ffa3 	bl	8003148 <inst_name>
 8003202:	4601      	mov	r1, r0
                rt_lookup[inst->reg_1], ctx->fetched_data);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	789b      	ldrb	r3, [r3, #2]
 8003208:	461a      	mov	r2, r3
            sprintf(str, "%s %s,$%04X", inst_name(inst->type), 
 800320a:	4b8d      	ldr	r3, [pc, #564]	; (8003440 <inst_to_str+0x2d4>)
 800320c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                rt_lookup[inst->reg_1], ctx->fetched_data);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	899b      	ldrh	r3, [r3, #12]
            sprintf(str, "%s %s,$%04X", inst_name(inst->type), 
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4613      	mov	r3, r2
 8003218:	460a      	mov	r2, r1
 800321a:	498a      	ldr	r1, [pc, #552]	; (8003444 <inst_to_str+0x2d8>)
 800321c:	6838      	ldr	r0, [r7, #0]
 800321e:	f00b fc93 	bl	800eb48 <siprintf>
            return;
 8003222:	e19c      	b.n	800355e <inst_to_str+0x3f2>

        case AM_R:
            sprintf(str, "%s %s", inst_name(inst->type), 
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff8d 	bl	8003148 <inst_name>
 800322e:	4602      	mov	r2, r0
                rt_lookup[inst->reg_1]);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	789b      	ldrb	r3, [r3, #2]
 8003234:	4619      	mov	r1, r3
            sprintf(str, "%s %s", inst_name(inst->type), 
 8003236:	4b82      	ldr	r3, [pc, #520]	; (8003440 <inst_to_str+0x2d4>)
 8003238:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800323c:	4982      	ldr	r1, [pc, #520]	; (8003448 <inst_to_str+0x2dc>)
 800323e:	6838      	ldr	r0, [r7, #0]
 8003240:	f00b fc82 	bl	800eb48 <siprintf>
            return;
 8003244:	e18b      	b.n	800355e <inst_to_str+0x3f2>

        case AM_R_R: 
            sprintf(str, "%s %s,%s", inst_name(inst->type), 
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ff7c 	bl	8003148 <inst_name>
 8003250:	4601      	mov	r1, r0
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	789b      	ldrb	r3, [r3, #2]
 8003256:	461a      	mov	r2, r3
            sprintf(str, "%s %s,%s", inst_name(inst->type), 
 8003258:	4b79      	ldr	r3, [pc, #484]	; (8003440 <inst_to_str+0x2d4>)
 800325a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	78db      	ldrb	r3, [r3, #3]
 8003262:	4618      	mov	r0, r3
            sprintf(str, "%s %s,%s", inst_name(inst->type), 
 8003264:	4b76      	ldr	r3, [pc, #472]	; (8003440 <inst_to_str+0x2d4>)
 8003266:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	460a      	mov	r2, r1
 8003270:	4976      	ldr	r1, [pc, #472]	; (800344c <inst_to_str+0x2e0>)
 8003272:	6838      	ldr	r0, [r7, #0]
 8003274:	f00b fc68 	bl	800eb48 <siprintf>
            return;
 8003278:	e171      	b.n	800355e <inst_to_str+0x3f2>

        case AM_MR_R:
            sprintf(str, "%s (%s),%s", inst_name(inst->type), 
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff62 	bl	8003148 <inst_name>
 8003284:	4601      	mov	r1, r0
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	789b      	ldrb	r3, [r3, #2]
 800328a:	461a      	mov	r2, r3
            sprintf(str, "%s (%s),%s", inst_name(inst->type), 
 800328c:	4b6c      	ldr	r3, [pc, #432]	; (8003440 <inst_to_str+0x2d4>)
 800328e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	78db      	ldrb	r3, [r3, #3]
 8003296:	4618      	mov	r0, r3
            sprintf(str, "%s (%s),%s", inst_name(inst->type), 
 8003298:	4b69      	ldr	r3, [pc, #420]	; (8003440 <inst_to_str+0x2d4>)
 800329a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	460a      	mov	r2, r1
 80032a4:	496a      	ldr	r1, [pc, #424]	; (8003450 <inst_to_str+0x2e4>)
 80032a6:	6838      	ldr	r0, [r7, #0]
 80032a8:	f00b fc4e 	bl	800eb48 <siprintf>
            return;
 80032ac:	e157      	b.n	800355e <inst_to_str+0x3f2>

        case AM_MR:
            sprintf(str, "%s (%s)", inst_name(inst->type), 
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff ff48 	bl	8003148 <inst_name>
 80032b8:	4602      	mov	r2, r0
                rt_lookup[inst->reg_1]);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	789b      	ldrb	r3, [r3, #2]
 80032be:	4619      	mov	r1, r3
            sprintf(str, "%s (%s)", inst_name(inst->type), 
 80032c0:	4b5f      	ldr	r3, [pc, #380]	; (8003440 <inst_to_str+0x2d4>)
 80032c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032c6:	4963      	ldr	r1, [pc, #396]	; (8003454 <inst_to_str+0x2e8>)
 80032c8:	6838      	ldr	r0, [r7, #0]
 80032ca:	f00b fc3d 	bl	800eb48 <siprintf>
            return;
 80032ce:	e146      	b.n	800355e <inst_to_str+0x3f2>

        case AM_R_MR:
            sprintf(str, "%s %s,(%s)", inst_name(inst->type), 
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff37 	bl	8003148 <inst_name>
 80032da:	4601      	mov	r1, r0
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	789b      	ldrb	r3, [r3, #2]
 80032e0:	461a      	mov	r2, r3
            sprintf(str, "%s %s,(%s)", inst_name(inst->type), 
 80032e2:	4b57      	ldr	r3, [pc, #348]	; (8003440 <inst_to_str+0x2d4>)
 80032e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	78db      	ldrb	r3, [r3, #3]
 80032ec:	4618      	mov	r0, r3
            sprintf(str, "%s %s,(%s)", inst_name(inst->type), 
 80032ee:	4b54      	ldr	r3, [pc, #336]	; (8003440 <inst_to_str+0x2d4>)
 80032f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	460a      	mov	r2, r1
 80032fa:	4957      	ldr	r1, [pc, #348]	; (8003458 <inst_to_str+0x2ec>)
 80032fc:	6838      	ldr	r0, [r7, #0]
 80032fe:	f00b fc23 	bl	800eb48 <siprintf>
            return;
 8003302:	e12c      	b.n	800355e <inst_to_str+0x3f2>

        case AM_R_D8:
        case AM_R_A8:
            sprintf(str, "%s %s,$%02X", inst_name(inst->type), 
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff1d 	bl	8003148 <inst_name>
 800330e:	4601      	mov	r1, r0
                rt_lookup[inst->reg_1], ctx->fetched_data & 0xFF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	789b      	ldrb	r3, [r3, #2]
 8003314:	461a      	mov	r2, r3
            sprintf(str, "%s %s,$%02X", inst_name(inst->type), 
 8003316:	4b4a      	ldr	r3, [pc, #296]	; (8003440 <inst_to_str+0x2d4>)
 8003318:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                rt_lookup[inst->reg_1], ctx->fetched_data & 0xFF);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	899b      	ldrh	r3, [r3, #12]
            sprintf(str, "%s %s,$%02X", inst_name(inst->type), 
 8003320:	b2db      	uxtb	r3, r3
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	460a      	mov	r2, r1
 8003328:	494c      	ldr	r1, [pc, #304]	; (800345c <inst_to_str+0x2f0>)
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	f00b fc0c 	bl	800eb48 <siprintf>
            return;
 8003330:	e115      	b.n	800355e <inst_to_str+0x3f2>

        case AM_R_HLI:
            sprintf(str, "%s %s,(%s+)", inst_name(inst->type), 
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff ff06 	bl	8003148 <inst_name>
 800333c:	4601      	mov	r1, r0
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	789b      	ldrb	r3, [r3, #2]
 8003342:	461a      	mov	r2, r3
            sprintf(str, "%s %s,(%s+)", inst_name(inst->type), 
 8003344:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <inst_to_str+0x2d4>)
 8003346:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	78db      	ldrb	r3, [r3, #3]
 800334e:	4618      	mov	r0, r3
            sprintf(str, "%s %s,(%s+)", inst_name(inst->type), 
 8003350:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <inst_to_str+0x2d4>)
 8003352:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	460a      	mov	r2, r1
 800335c:	4940      	ldr	r1, [pc, #256]	; (8003460 <inst_to_str+0x2f4>)
 800335e:	6838      	ldr	r0, [r7, #0]
 8003360:	f00b fbf2 	bl	800eb48 <siprintf>
            return;
 8003364:	e0fb      	b.n	800355e <inst_to_str+0x3f2>

        case AM_R_HLD:
            sprintf(str, "%s %s,(%s-)", inst_name(inst->type), 
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff feec 	bl	8003148 <inst_name>
 8003370:	4601      	mov	r1, r0
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	789b      	ldrb	r3, [r3, #2]
 8003376:	461a      	mov	r2, r3
            sprintf(str, "%s %s,(%s-)", inst_name(inst->type), 
 8003378:	4b31      	ldr	r3, [pc, #196]	; (8003440 <inst_to_str+0x2d4>)
 800337a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	78db      	ldrb	r3, [r3, #3]
 8003382:	4618      	mov	r0, r3
            sprintf(str, "%s %s,(%s-)", inst_name(inst->type), 
 8003384:	4b2e      	ldr	r3, [pc, #184]	; (8003440 <inst_to_str+0x2d4>)
 8003386:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	460a      	mov	r2, r1
 8003390:	4934      	ldr	r1, [pc, #208]	; (8003464 <inst_to_str+0x2f8>)
 8003392:	6838      	ldr	r0, [r7, #0]
 8003394:	f00b fbd8 	bl	800eb48 <siprintf>
            return;
 8003398:	e0e1      	b.n	800355e <inst_to_str+0x3f2>

        case AM_HLI_R:
            sprintf(str, "%s (%s+),%s", inst_name(inst->type), 
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fed2 	bl	8003148 <inst_name>
 80033a4:	4601      	mov	r1, r0
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	789b      	ldrb	r3, [r3, #2]
 80033aa:	461a      	mov	r2, r3
            sprintf(str, "%s (%s+),%s", inst_name(inst->type), 
 80033ac:	4b24      	ldr	r3, [pc, #144]	; (8003440 <inst_to_str+0x2d4>)
 80033ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	78db      	ldrb	r3, [r3, #3]
 80033b6:	4618      	mov	r0, r3
            sprintf(str, "%s (%s+),%s", inst_name(inst->type), 
 80033b8:	4b21      	ldr	r3, [pc, #132]	; (8003440 <inst_to_str+0x2d4>)
 80033ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	460a      	mov	r2, r1
 80033c4:	4928      	ldr	r1, [pc, #160]	; (8003468 <inst_to_str+0x2fc>)
 80033c6:	6838      	ldr	r0, [r7, #0]
 80033c8:	f00b fbbe 	bl	800eb48 <siprintf>
            return;
 80033cc:	e0c7      	b.n	800355e <inst_to_str+0x3f2>

        case AM_HLD_R:
            sprintf(str, "%s (%s-),%s", inst_name(inst->type), 
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff feb8 	bl	8003148 <inst_name>
 80033d8:	4601      	mov	r1, r0
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	789b      	ldrb	r3, [r3, #2]
 80033de:	461a      	mov	r2, r3
            sprintf(str, "%s (%s-),%s", inst_name(inst->type), 
 80033e0:	4b17      	ldr	r3, [pc, #92]	; (8003440 <inst_to_str+0x2d4>)
 80033e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                rt_lookup[inst->reg_1], rt_lookup[inst->reg_2]);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	78db      	ldrb	r3, [r3, #3]
 80033ea:	4618      	mov	r0, r3
            sprintf(str, "%s (%s-),%s", inst_name(inst->type), 
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <inst_to_str+0x2d4>)
 80033ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	460a      	mov	r2, r1
 80033f8:	491c      	ldr	r1, [pc, #112]	; (800346c <inst_to_str+0x300>)
 80033fa:	6838      	ldr	r0, [r7, #0]
 80033fc:	f00b fba4 	bl	800eb48 <siprintf>
            return;
 8003400:	e0ad      	b.n	800355e <inst_to_str+0x3f2>

        case AM_A8_R:
            sprintf(str, "%s $%02X,%s", inst_name(inst->type), 
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fe9e 	bl	8003148 <inst_name>
 800340c:	4604      	mov	r4, r0
                bus_read(ctx->regs.pc - 1), rt_lookup[inst->reg_2]);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	891b      	ldrh	r3, [r3, #8]
 8003412:	3b01      	subs	r3, #1
 8003414:	b29b      	uxth	r3, r3
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd f8de 	bl	80005d8 <bus_read>
 800341c:	4603      	mov	r3, r0
            sprintf(str, "%s $%02X,%s", inst_name(inst->type), 
 800341e:	4619      	mov	r1, r3
                bus_read(ctx->regs.pc - 1), rt_lookup[inst->reg_2]);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	78db      	ldrb	r3, [r3, #3]
 8003424:	461a      	mov	r2, r3
            sprintf(str, "%s $%02X,%s", inst_name(inst->type), 
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <inst_to_str+0x2d4>)
 8003428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	460b      	mov	r3, r1
 8003430:	4622      	mov	r2, r4
 8003432:	490f      	ldr	r1, [pc, #60]	; (8003470 <inst_to_str+0x304>)
 8003434:	6838      	ldr	r0, [r7, #0]
 8003436:	f00b fb87 	bl	800eb48 <siprintf>

            return;
 800343a:	e090      	b.n	800355e <inst_to_str+0x3f2>
 800343c:	0800faac 	.word	0x0800faac
 8003440:	20000a78 	.word	0x20000a78
 8003444:	0800fab0 	.word	0x0800fab0
 8003448:	0800fabc 	.word	0x0800fabc
 800344c:	0800fac4 	.word	0x0800fac4
 8003450:	0800fad0 	.word	0x0800fad0
 8003454:	0800fadc 	.word	0x0800fadc
 8003458:	0800fae4 	.word	0x0800fae4
 800345c:	0800faf0 	.word	0x0800faf0
 8003460:	0800fafc 	.word	0x0800fafc
 8003464:	0800fb08 	.word	0x0800fb08
 8003468:	0800fb14 	.word	0x0800fb14
 800346c:	0800fb20 	.word	0x0800fb20
 8003470:	0800fb2c 	.word	0x0800fb2c

        case AM_HL_SPR:
            sprintf(str, "%s (%s),SP+%d", inst_name(inst->type), 
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fe65 	bl	8003148 <inst_name>
 800347e:	4601      	mov	r1, r0
                rt_lookup[inst->reg_1], ctx->fetched_data & 0xFF);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	789b      	ldrb	r3, [r3, #2]
 8003484:	461a      	mov	r2, r3
            sprintf(str, "%s (%s),SP+%d", inst_name(inst->type), 
 8003486:	4b37      	ldr	r3, [pc, #220]	; (8003564 <inst_to_str+0x3f8>)
 8003488:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                rt_lookup[inst->reg_1], ctx->fetched_data & 0xFF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	899b      	ldrh	r3, [r3, #12]
            sprintf(str, "%s (%s),SP+%d", inst_name(inst->type), 
 8003490:	b2db      	uxtb	r3, r3
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	460a      	mov	r2, r1
 8003498:	4933      	ldr	r1, [pc, #204]	; (8003568 <inst_to_str+0x3fc>)
 800349a:	6838      	ldr	r0, [r7, #0]
 800349c:	f00b fb54 	bl	800eb48 <siprintf>
            return;
 80034a0:	e05d      	b.n	800355e <inst_to_str+0x3f2>

        case AM_D8:
            sprintf(str, "%s $%02X", inst_name(inst->type), 
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fe4e 	bl	8003148 <inst_name>
 80034ac:	4602      	mov	r2, r0
                ctx->fetched_data & 0xFF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	899b      	ldrh	r3, [r3, #12]
            sprintf(str, "%s $%02X", inst_name(inst->type), 
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	492d      	ldr	r1, [pc, #180]	; (800356c <inst_to_str+0x400>)
 80034b6:	6838      	ldr	r0, [r7, #0]
 80034b8:	f00b fb46 	bl	800eb48 <siprintf>
            return;
 80034bc:	e04f      	b.n	800355e <inst_to_str+0x3f2>

        case AM_D16:
            sprintf(str, "%s $%04X", inst_name(inst->type), 
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fe40 	bl	8003148 <inst_name>
 80034c8:	4602      	mov	r2, r0
                ctx->fetched_data);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	899b      	ldrh	r3, [r3, #12]
            sprintf(str, "%s $%04X", inst_name(inst->type), 
 80034ce:	4928      	ldr	r1, [pc, #160]	; (8003570 <inst_to_str+0x404>)
 80034d0:	6838      	ldr	r0, [r7, #0]
 80034d2:	f00b fb39 	bl	800eb48 <siprintf>
            return;
 80034d6:	e042      	b.n	800355e <inst_to_str+0x3f2>

        case AM_MR_D8:
            sprintf(str, "%s (%s),$%02X", inst_name(inst->type), 
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fe33 	bl	8003148 <inst_name>
 80034e2:	4601      	mov	r1, r0
                rt_lookup[inst->reg_1], ctx->fetched_data & 0xFF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	789b      	ldrb	r3, [r3, #2]
 80034e8:	461a      	mov	r2, r3
            sprintf(str, "%s (%s),$%02X", inst_name(inst->type), 
 80034ea:	4b1e      	ldr	r3, [pc, #120]	; (8003564 <inst_to_str+0x3f8>)
 80034ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                rt_lookup[inst->reg_1], ctx->fetched_data & 0xFF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	899b      	ldrh	r3, [r3, #12]
            sprintf(str, "%s (%s),$%02X", inst_name(inst->type), 
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	460a      	mov	r2, r1
 80034fc:	491d      	ldr	r1, [pc, #116]	; (8003574 <inst_to_str+0x408>)
 80034fe:	6838      	ldr	r0, [r7, #0]
 8003500:	f00b fb22 	bl	800eb48 <siprintf>
            return;
 8003504:	e02b      	b.n	800355e <inst_to_str+0x3f2>

        case AM_A16_R:
            sprintf(str, "%s ($%04X),%s", inst_name(inst->type), 
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fe1c 	bl	8003148 <inst_name>
 8003510:	4602      	mov	r2, r0
                ctx->fetched_data, rt_lookup[inst->reg_2]);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	899b      	ldrh	r3, [r3, #12]
            sprintf(str, "%s ($%04X),%s", inst_name(inst->type), 
 8003516:	4618      	mov	r0, r3
                ctx->fetched_data, rt_lookup[inst->reg_2]);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	78db      	ldrb	r3, [r3, #3]
 800351c:	4619      	mov	r1, r3
            sprintf(str, "%s ($%04X),%s", inst_name(inst->type), 
 800351e:	4b11      	ldr	r3, [pc, #68]	; (8003564 <inst_to_str+0x3f8>)
 8003520:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	4603      	mov	r3, r0
 8003528:	4913      	ldr	r1, [pc, #76]	; (8003578 <inst_to_str+0x40c>)
 800352a:	6838      	ldr	r0, [r7, #0]
 800352c:	f00b fb0c 	bl	800eb48 <siprintf>
            return;
 8003530:	e015      	b.n	800355e <inst_to_str+0x3f2>

        default:
            fprintf(stderr, "INVALID AM: %d\n", inst->mode);
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <inst_to_str+0x410>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68d8      	ldr	r0, [r3, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	785b      	ldrb	r3, [r3, #1]
 800353c:	461a      	mov	r2, r3
 800353e:	4910      	ldr	r1, [pc, #64]	; (8003580 <inst_to_str+0x414>)
 8003540:	f00a faf2 	bl	800db28 <fiprintf>
            NO_IMPL
 8003544:	4b0d      	ldr	r3, [pc, #52]	; (800357c <inst_to_str+0x410>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2214      	movs	r2, #20
 800354c:	2101      	movs	r1, #1
 800354e:	480d      	ldr	r0, [pc, #52]	; (8003584 <inst_to_str+0x418>)
 8003550:	f00a fd2a 	bl	800dfa8 <fwrite>
 8003554:	f06f 0004 	mvn.w	r0, #4
 8003558:	f00a f858 	bl	800d60c <exit>
            return;
 800355c:	bf00      	nop
    }
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	bd90      	pop	{r4, r7, pc}
 8003564:	20000a78 	.word	0x20000a78
 8003568:	0800fb38 	.word	0x0800fb38
 800356c:	0800fb48 	.word	0x0800fb48
 8003570:	0800fb54 	.word	0x0800fb54
 8003574:	0800fb60 	.word	0x0800fb60
 8003578:	0800fb70 	.word	0x0800fb70
 800357c:	20000ad4 	.word	0x20000ad4
 8003580:	0800fb80 	.word	0x0800fb80
 8003584:	0800fb90 	.word	0x0800fb90

08003588 <int_handle>:
#include <cpu.h>
#include <stack.h>
#include <interrupts.h>

void int_handle(cpu_context *ctx, u16 address) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]
    stack_push16(ctx->regs.pc);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	891b      	ldrh	r3, [r3, #8]
 8003598:	4618      	mov	r0, r3
 800359a:	f002 f950 	bl	800583e <stack_push16>
    ctx->regs.pc = address;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	887a      	ldrh	r2, [r7, #2]
 80035a2:	811a      	strh	r2, [r3, #8]
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <int_check>:

bool int_check(cpu_context *ctx, u16 address, interrupt_type it) {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
 80035b8:	4613      	mov	r3, r2
 80035ba:	707b      	strb	r3, [r7, #1]
    if (ctx->int_flags & it && ctx->ie_register & it) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	7f5a      	ldrb	r2, [r3, #29]
 80035c0:	787b      	ldrb	r3, [r7, #1]
 80035c2:	4013      	ands	r3, r2
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01f      	beq.n	800360a <int_check+0x5e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	7f1a      	ldrb	r2, [r3, #28]
 80035ce:	787b      	ldrb	r3, [r7, #1]
 80035d0:	4013      	ands	r3, r2
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d018      	beq.n	800360a <int_check+0x5e>
        int_handle(ctx, address);
 80035d8:	887b      	ldrh	r3, [r7, #2]
 80035da:	4619      	mov	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ffd3 	bl	8003588 <int_handle>
        ctx->int_flags &= ~it;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7f5b      	ldrb	r3, [r3, #29]
 80035e6:	b25a      	sxtb	r2, r3
 80035e8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	4013      	ands	r3, r2
 80035f2:	b25b      	sxtb	r3, r3
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	775a      	strb	r2, [r3, #29]
        ctx->halted = false;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	761a      	strb	r2, [r3, #24]
        ctx->int_master_enabled = false;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	769a      	strb	r2, [r3, #26]

        return true;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <int_check+0x60>
    }

    return false;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <cpu_handle_interrupts>:

void cpu_handle_interrupts(cpu_context *ctx) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
    if (int_check(ctx, 0x40, IT_VBLANK)) {
 800361c:	2201      	movs	r2, #1
 800361e:	2140      	movs	r1, #64	; 0x40
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff ffc3 	bl	80035ac <int_check>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11c      	bne.n	8003666 <cpu_handle_interrupts+0x52>

    } else if (int_check(ctx, 0x48, IT_LCD_STAT)) {
 800362c:	2202      	movs	r2, #2
 800362e:	2148      	movs	r1, #72	; 0x48
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ffbb 	bl	80035ac <int_check>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d114      	bne.n	8003666 <cpu_handle_interrupts+0x52>

    } else if (int_check(ctx, 0x50, IT_TIMER)) {
 800363c:	2204      	movs	r2, #4
 800363e:	2150      	movs	r1, #80	; 0x50
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ffb3 	bl	80035ac <int_check>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10c      	bne.n	8003666 <cpu_handle_interrupts+0x52>

    }  else if (int_check(ctx, 0x58, IT_SERIAL)) {
 800364c:	2208      	movs	r2, #8
 800364e:	2158      	movs	r1, #88	; 0x58
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ffab 	bl	80035ac <int_check>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d104      	bne.n	8003666 <cpu_handle_interrupts+0x52>

    }  else if (int_check(ctx, 0x60, IT_JOYPAD)) {
 800365c:	2210      	movs	r2, #16
 800365e:	2160      	movs	r1, #96	; 0x60
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ffa3 	bl	80035ac <int_check>

    } 
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <io_read>:
#include <cpu.h>
#include <gamepad.h>

static char serial_data[2];

u8 io_read(u16 address) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	80fb      	strh	r3, [r7, #6]
    if (address == 0xFF00) {
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8003680:	d103      	bne.n	800368a <io_read+0x1a>
        return gamepad_get_output();
 8003682:	f7ff fce3 	bl	800304c <gamepad_get_output>
 8003686:	4603      	mov	r3, r0
 8003688:	e04a      	b.n	8003720 <io_read+0xb0>
    }

    if (address == 0xFF01) {
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	f64f 7201 	movw	r2, #65281	; 0xff01
 8003690:	4293      	cmp	r3, r2
 8003692:	d102      	bne.n	800369a <io_read+0x2a>
        return serial_data[0];
 8003694:	4b24      	ldr	r3, [pc, #144]	; (8003728 <io_read+0xb8>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	e042      	b.n	8003720 <io_read+0xb0>
    }

    if (address == 0xFF02) {
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	f64f 7202 	movw	r2, #65282	; 0xff02
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d102      	bne.n	80036aa <io_read+0x3a>
        return serial_data[1];
 80036a4:	4b20      	ldr	r3, [pc, #128]	; (8003728 <io_read+0xb8>)
 80036a6:	785b      	ldrb	r3, [r3, #1]
 80036a8:	e03a      	b.n	8003720 <io_read+0xb0>
    }

    if (BETWEEN(address, 0xFF04, 0xFF07)) {
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	f64f 7203 	movw	r2, #65283	; 0xff03
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d90a      	bls.n	80036ca <io_read+0x5a>
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	f64f 7207 	movw	r2, #65287	; 0xff07
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d805      	bhi.n	80036ca <io_read+0x5a>
        return timer_read(address);
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f002 fcab 	bl	800601c <timer_read>
 80036c6:	4603      	mov	r3, r0
 80036c8:	e02a      	b.n	8003720 <io_read+0xb0>
    }

    if (address == 0xFF0F) {
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d103      	bne.n	80036dc <io_read+0x6c>
        return cpu_get_int_flags();
 80036d4:	f7ff fb14 	bl	8002d00 <cpu_get_int_flags>
 80036d8:	4603      	mov	r3, r0
 80036da:	e021      	b.n	8003720 <io_read+0xb0>
    }

    if (BETWEEN(address, 0xFF10, 0xFF3F)) {
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d906      	bls.n	80036f4 <io_read+0x84>
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	f64f 723f 	movw	r2, #65343	; 0xff3f
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d801      	bhi.n	80036f4 <io_read+0x84>
        //ignore sound
        return 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e015      	b.n	8003720 <io_read+0xb0>
    }

    if (BETWEEN(address, 0xFF40, 0xFF4B)) {
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	f64f 723f 	movw	r2, #65343	; 0xff3f
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d90a      	bls.n	8003714 <io_read+0xa4>
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	f64f 724b 	movw	r2, #65355	; 0xff4b
 8003704:	4293      	cmp	r3, r2
 8003706:	d805      	bhi.n	8003714 <io_read+0xa4>
        return lcd_read(address);
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f8d6 	bl	80038bc <lcd_read>
 8003710:	4603      	mov	r3, r0
 8003712:	e005      	b.n	8003720 <io_read+0xb0>
    }

    printf("UNSUPPORTED bus_read(%04X)\n", address);
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	4619      	mov	r1, r3
 8003718:	4804      	ldr	r0, [pc, #16]	; (800372c <io_read+0xbc>)
 800371a:	f00b f8af 	bl	800e87c <iprintf>
    return 0;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200013fc 	.word	0x200013fc
 800372c:	0800fba8 	.word	0x0800fba8

08003730 <io_write>:

void io_write(u16 address, u8 value) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	460a      	mov	r2, r1
 800373a:	80fb      	strh	r3, [r7, #6]
 800373c:	4613      	mov	r3, r2
 800373e:	717b      	strb	r3, [r7, #5]
    if (address == 0xFF00) {
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8003746:	d104      	bne.n	8003752 <io_write+0x22>
        gamepad_set_sel(value);
 8003748:	797b      	ldrb	r3, [r7, #5]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fc52 	bl	8002ff4 <gamepad_set_sel>
        return;
 8003750:	e04e      	b.n	80037f0 <io_write+0xc0>
    }
    
    if (address == 0xFF01) {
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	f64f 7201 	movw	r2, #65281	; 0xff01
 8003758:	4293      	cmp	r3, r2
 800375a:	d103      	bne.n	8003764 <io_write+0x34>
        serial_data[0] = value;
 800375c:	4a26      	ldr	r2, [pc, #152]	; (80037f8 <io_write+0xc8>)
 800375e:	797b      	ldrb	r3, [r7, #5]
 8003760:	7013      	strb	r3, [r2, #0]
        return;
 8003762:	e045      	b.n	80037f0 <io_write+0xc0>
    }

    if (address == 0xFF02) {
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	f64f 7202 	movw	r2, #65282	; 0xff02
 800376a:	4293      	cmp	r3, r2
 800376c:	d103      	bne.n	8003776 <io_write+0x46>
        serial_data[1] = value;
 800376e:	4a22      	ldr	r2, [pc, #136]	; (80037f8 <io_write+0xc8>)
 8003770:	797b      	ldrb	r3, [r7, #5]
 8003772:	7053      	strb	r3, [r2, #1]
        return;
 8003774:	e03c      	b.n	80037f0 <io_write+0xc0>
    }

    if (BETWEEN(address, 0xFF04, 0xFF07)) {
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	f64f 7203 	movw	r2, #65283	; 0xff03
 800377c:	4293      	cmp	r3, r2
 800377e:	d90b      	bls.n	8003798 <io_write+0x68>
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	f64f 7207 	movw	r2, #65287	; 0xff07
 8003786:	4293      	cmp	r3, r2
 8003788:	d806      	bhi.n	8003798 <io_write+0x68>
        timer_write(address, value);
 800378a:	797a      	ldrb	r2, [r7, #5]
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f002 fc11 	bl	8005fb8 <timer_write>
        return;
 8003796:	e02b      	b.n	80037f0 <io_write+0xc0>
    }
    
    if (address == 0xFF0F) {
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	f64f 720f 	movw	r2, #65295	; 0xff0f
 800379e:	4293      	cmp	r3, r2
 80037a0:	d104      	bne.n	80037ac <io_write+0x7c>
        cpu_set_int_flags(value);
 80037a2:	797b      	ldrb	r3, [r7, #5]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fab7 	bl	8002d18 <cpu_set_int_flags>
        return;
 80037aa:	e021      	b.n	80037f0 <io_write+0xc0>
    }

    if (BETWEEN(address, 0xFF10, 0xFF3F)) {
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d904      	bls.n	80037c0 <io_write+0x90>
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	f64f 723f 	movw	r2, #65343	; 0xff3f
 80037bc:	4293      	cmp	r3, r2
 80037be:	d916      	bls.n	80037ee <io_write+0xbe>
        //ignore sound
        return;
    }

    if (BETWEEN(address, 0xFF40, 0xFF4B)) {
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	f64f 723f 	movw	r2, #65343	; 0xff3f
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d90b      	bls.n	80037e2 <io_write+0xb2>
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	f64f 724b 	movw	r2, #65355	; 0xff4b
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d806      	bhi.n	80037e2 <io_write+0xb2>
        lcd_write(address, value);
 80037d4:	797a      	ldrb	r2, [r7, #5]
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	4611      	mov	r1, r2
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f8d4 	bl	8003988 <lcd_write>
        return;
 80037e0:	e006      	b.n	80037f0 <io_write+0xc0>
    }

    printf("UNSUPPORTED bus_write(%04X)\n", address);
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	4619      	mov	r1, r3
 80037e6:	4805      	ldr	r0, [pc, #20]	; (80037fc <io_write+0xcc>)
 80037e8:	f00b f848 	bl	800e87c <iprintf>
 80037ec:	e000      	b.n	80037f0 <io_write+0xc0>
        return;
 80037ee:	bf00      	nop
}
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	200013fc 	.word	0x200013fc
 80037fc:	0800fbc4 	.word	0x0800fbc4

08003800 <lcd_init>:
static lcd_context ctx;

static unsigned long colors_default[4] = {0xFFFFFFFF, 0xFFAAAAAA, 0xFF555555, 0xFF000000};
//static unsigned long ogbc_default[4] = {0xFF9BBC0F, 0xFF8BAC0F, 0xFF306230, 0xFF0F380F};

void lcd_init() {
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
    ctx.lcdc = 0x91;
 8003806:	4b26      	ldr	r3, [pc, #152]	; (80038a0 <lcd_init+0xa0>)
 8003808:	2291      	movs	r2, #145	; 0x91
 800380a:	701a      	strb	r2, [r3, #0]
    ctx.scroll_x = 0;
 800380c:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <lcd_init+0xa0>)
 800380e:	2200      	movs	r2, #0
 8003810:	70da      	strb	r2, [r3, #3]
    ctx.scroll_y = 0;
 8003812:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <lcd_init+0xa0>)
 8003814:	2200      	movs	r2, #0
 8003816:	709a      	strb	r2, [r3, #2]
    ctx.ly = 0;
 8003818:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <lcd_init+0xa0>)
 800381a:	2200      	movs	r2, #0
 800381c:	711a      	strb	r2, [r3, #4]
    ctx.ly_compare = 0;
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <lcd_init+0xa0>)
 8003820:	2200      	movs	r2, #0
 8003822:	715a      	strb	r2, [r3, #5]
    ctx.bg_palette = 0xFC;
 8003824:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <lcd_init+0xa0>)
 8003826:	22fc      	movs	r2, #252	; 0xfc
 8003828:	71da      	strb	r2, [r3, #7]
    ctx.obj_palette[0] = 0xFF;
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <lcd_init+0xa0>)
 800382c:	22ff      	movs	r2, #255	; 0xff
 800382e:	721a      	strb	r2, [r3, #8]
    ctx.obj_palette[1] = 0xFF;
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <lcd_init+0xa0>)
 8003832:	22ff      	movs	r2, #255	; 0xff
 8003834:	725a      	strb	r2, [r3, #9]
    ctx.win_y = 0;
 8003836:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <lcd_init+0xa0>)
 8003838:	2200      	movs	r2, #0
 800383a:	729a      	strb	r2, [r3, #10]
    ctx.win_x = 0;
 800383c:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <lcd_init+0xa0>)
 800383e:	2200      	movs	r2, #0
 8003840:	72da      	strb	r2, [r3, #11]

    for (int i=0; i<4; i++) {
 8003842:	2300      	movs	r3, #0
 8003844:	607b      	str	r3, [r7, #4]
 8003846:	e020      	b.n	800388a <lcd_init+0x8a>
        ctx.bg_colors[i] = colors_default[i];
 8003848:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <lcd_init+0xa4>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003850:	4913      	ldr	r1, [pc, #76]	; (80038a0 <lcd_init+0xa0>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3302      	adds	r3, #2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	605a      	str	r2, [r3, #4]
        ctx.sp1_colors[i] = colors_default[i];
 800385c:	4a11      	ldr	r2, [pc, #68]	; (80038a4 <lcd_init+0xa4>)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003864:	490e      	ldr	r1, [pc, #56]	; (80038a0 <lcd_init+0xa0>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3306      	adds	r3, #6
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	605a      	str	r2, [r3, #4]
        ctx.sp2_colors[i] = colors_default[i];
 8003870:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <lcd_init+0xa4>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003878:	4909      	ldr	r1, [pc, #36]	; (80038a0 <lcd_init+0xa0>)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	330a      	adds	r3, #10
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	605a      	str	r2, [r3, #4]
    for (int i=0; i<4; i++) {
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3301      	adds	r3, #1
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b03      	cmp	r3, #3
 800388e:	dddb      	ble.n	8003848 <lcd_init+0x48>
    }
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20001400 	.word	0x20001400
 80038a4:	20000ab4 	.word	0x20000ab4

080038a8 <lcd_get_context>:

lcd_context *lcd_get_context() {
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
    return &ctx;
 80038ac:	4b02      	ldr	r3, [pc, #8]	; (80038b8 <lcd_get_context+0x10>)
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	20001400 	.word	0x20001400

080038bc <lcd_read>:

u8 lcd_read(u16 address) {
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	80fb      	strh	r3, [r7, #6]
    u8 offset = (address - 0xFF40);
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	3b40      	subs	r3, #64	; 0x40
 80038cc:	73fb      	strb	r3, [r7, #15]
    u8 *p = (u8 *)&ctx;
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <lcd_read+0x2c>)
 80038d0:	60bb      	str	r3, [r7, #8]

    return p[offset];
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	4413      	add	r3, r2
 80038d8:	781b      	ldrb	r3, [r3, #0]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20001400 	.word	0x20001400

080038ec <update_palette>:

void update_palette(u8 palette_data, u8 pal) {
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	460a      	mov	r2, r1
 80038f6:	71fb      	strb	r3, [r7, #7]
 80038f8:	4613      	mov	r3, r2
 80038fa:	71bb      	strb	r3, [r7, #6]
    u32 *p_colors = ctx.bg_colors;
 80038fc:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <update_palette+0x8c>)
 80038fe:	60fb      	str	r3, [r7, #12]

    switch(pal) {
 8003900:	79bb      	ldrb	r3, [r7, #6]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d002      	beq.n	800390c <update_palette+0x20>
 8003906:	2b02      	cmp	r3, #2
 8003908:	d003      	beq.n	8003912 <update_palette+0x26>
 800390a:	e005      	b.n	8003918 <update_palette+0x2c>
        case 1:
            p_colors = ctx.sp1_colors;
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <update_palette+0x90>)
 800390e:	60fb      	str	r3, [r7, #12]
            break;
 8003910:	e002      	b.n	8003918 <update_palette+0x2c>
        case 2:
            p_colors = ctx.sp2_colors;
 8003912:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <update_palette+0x94>)
 8003914:	60fb      	str	r3, [r7, #12]
            break;
 8003916:	bf00      	nop
    }

    p_colors[0] = colors_default[palette_data & 0b11];
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	4a19      	ldr	r2, [pc, #100]	; (8003984 <update_palette+0x98>)
 8003920:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	601a      	str	r2, [r3, #0]
    p_colors[1] = colors_default[(palette_data >> 2) & 0b11];
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f003 0203 	and.w	r2, r3, #3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3304      	adds	r3, #4
 8003936:	4913      	ldr	r1, [pc, #76]	; (8003984 <update_palette+0x98>)
 8003938:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800393c:	601a      	str	r2, [r3, #0]
    p_colors[2] = colors_default[(palette_data >> 4) & 0b11];
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f003 0203 	and.w	r2, r3, #3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	3308      	adds	r3, #8
 800394c:	490d      	ldr	r1, [pc, #52]	; (8003984 <update_palette+0x98>)
 800394e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003952:	601a      	str	r2, [r3, #0]
    p_colors[3] = colors_default[(palette_data >> 6) & 0b11];
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	099b      	lsrs	r3, r3, #6
 8003958:	b2db      	uxtb	r3, r3
 800395a:	f003 0203 	and.w	r2, r3, #3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	330c      	adds	r3, #12
 8003962:	4908      	ldr	r1, [pc, #32]	; (8003984 <update_palette+0x98>)
 8003964:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003968:	601a      	str	r2, [r3, #0]
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	2000140c 	.word	0x2000140c
 800397c:	2000141c 	.word	0x2000141c
 8003980:	2000142c 	.word	0x2000142c
 8003984:	20000ab4 	.word	0x20000ab4

08003988 <lcd_write>:

void lcd_write(u16 address, u8 value) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	460a      	mov	r2, r1
 8003992:	80fb      	strh	r3, [r7, #6]
 8003994:	4613      	mov	r3, r2
 8003996:	717b      	strb	r3, [r7, #5]

    u8 offset = (address - 0xFF40);
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	3b40      	subs	r3, #64	; 0x40
 800399e:	73fb      	strb	r3, [r7, #15]
    u8 *p = (u8 *)&ctx;
 80039a0:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <lcd_write+0x88>)
 80039a2:	60bb      	str	r3, [r7, #8]
    p[offset] = value;
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	4413      	add	r3, r2
 80039aa:	797a      	ldrb	r2, [r7, #5]
 80039ac:	701a      	strb	r2, [r3, #0]

    if (offset == 6) { 
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	2b06      	cmp	r3, #6
 80039b2:	d103      	bne.n	80039bc <lcd_write+0x34>
        //0xFF46 = DMA
        dma_start(value);
 80039b4:	797b      	ldrb	r3, [r7, #5]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff f9ec 	bl	8002d94 <dma_start>
    }

    if (address == 0xFF47) {
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	f64f 7247 	movw	r2, #65351	; 0xff47
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d105      	bne.n	80039d2 <lcd_write+0x4a>
        update_palette(value, 0);
 80039c6:	797b      	ldrb	r3, [r7, #5]
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ff8e 	bl	80038ec <update_palette>
    } else if (address == 0xFF48) {
        update_palette(value & 0b11111100, 1);
    } else if (address == 0xFF49) {
        update_palette(value & 0b11111100, 2);
    }
}
 80039d0:	e01a      	b.n	8003a08 <lcd_write+0x80>
    } else if (address == 0xFF48) {
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	f64f 7248 	movw	r2, #65352	; 0xff48
 80039d8:	4293      	cmp	r3, r2
 80039da:	d108      	bne.n	80039ee <lcd_write+0x66>
        update_palette(value & 0b11111100, 1);
 80039dc:	797b      	ldrb	r3, [r7, #5]
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ff80 	bl	80038ec <update_palette>
}
 80039ec:	e00c      	b.n	8003a08 <lcd_write+0x80>
    } else if (address == 0xFF49) {
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	f64f 7249 	movw	r2, #65353	; 0xff49
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d107      	bne.n	8003a08 <lcd_write+0x80>
        update_palette(value & 0b11111100, 2);
 80039f8:	797b      	ldrb	r3, [r7, #5]
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2102      	movs	r1, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ff72 	bl	80038ec <update_palette>
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20001400 	.word	0x20001400

08003a14 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	4804      	ldr	r0, [pc, #16]	; (8003a3c <_write+0x28>)
 8003a2c:	f005 ffe5 	bl	80099fa <HAL_UART_Transmit>
  return len;
 8003a30:	687b      	ldr	r3, [r7, #4]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200057c0 	.word	0x200057c0

08003a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a44:	f002 fb6b 	bl	800611e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a48:	f000 f812 	bl	8003a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a4c:	f000 f91a 	bl	8003c84 <MX_GPIO_Init>
  MX_SDMMC2_SD_Init();
 8003a50:	f000 f8a2 	bl	8003b98 <MX_SDMMC2_SD_Init>
  MX_DMA_Init();
 8003a54:	f000 f8f0 	bl	8003c38 <MX_DMA_Init>
  MX_FATFS_Init();
 8003a58:	f007 f9ea 	bl	800ae30 <MX_FATFS_Init>
  MX_CRC_Init();
 8003a5c:	f000 f87a 	bl	8003b54 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8003a60:	f000 f8ba 	bl	8003bd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  emu_run("Tetris.gb");
 8003a64:	4801      	ldr	r0, [pc, #4]	; (8003a6c <main+0x2c>)
 8003a66:	f7ff fa33 	bl	8002ed0 <emu_run>
//  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003a6a:	e7fe      	b.n	8003a6a <main+0x2a>
 8003a6c:	0800fbe4 	.word	0x0800fbe4

08003a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b094      	sub	sp, #80	; 0x50
 8003a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a76:	f107 031c 	add.w	r3, r7, #28
 8003a7a:	2234      	movs	r2, #52	; 0x34
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f00a fb4a 	bl	800e118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a84:	f107 0308 	add.w	r3, r7, #8
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a94:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <SystemClock_Config+0xdc>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	4a2c      	ldr	r2, [pc, #176]	; (8003b4c <SystemClock_Config+0xdc>)
 8003a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa0:	4b2a      	ldr	r3, [pc, #168]	; (8003b4c <SystemClock_Config+0xdc>)
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003aac:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <SystemClock_Config+0xe0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ab4:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <SystemClock_Config+0xe0>)
 8003ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <SystemClock_Config+0xe0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ac4:	603b      	str	r3, [r7, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ad0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ad6:	2310      	movs	r3, #16
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ada:	2302      	movs	r3, #2
 8003adc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003ae4:	230c      	movs	r3, #12
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 93;
 8003ae8:	235d      	movs	r3, #93	; 0x5d
 8003aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003aec:	2304      	movs	r3, #4
 8003aee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003af0:	2304      	movs	r3, #4
 8003af2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003af4:	2302      	movs	r3, #2
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003af8:	f107 031c 	add.w	r3, r7, #28
 8003afc:	4618      	mov	r0, r3
 8003afe:	f003 faf5 	bl	80070ec <HAL_RCC_OscConfig>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003b08:	f000 fcae 	bl	8004468 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b0c:	230f      	movs	r3, #15
 8003b0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b10:	2302      	movs	r3, #2
 8003b12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003b24:	f107 0308 	add.w	r3, r7, #8
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f003 fd8c 	bl	8007648 <HAL_RCC_ClockConfig>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003b36:	f000 fc97 	bl	8004468 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	2000      	movs	r0, #0
 8003b40:	f003 fe6e 	bl	8007820 <HAL_RCC_MCOConfig>
}
 8003b44:	bf00      	nop
 8003b46:	3750      	adds	r7, #80	; 0x50
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40007000 	.word	0x40007000

08003b54 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <MX_CRC_Init+0x3c>)
 8003b5a:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <MX_CRC_Init+0x40>)
 8003b5c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <MX_CRC_Init+0x3c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003b64:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <MX_CRC_Init+0x3c>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <MX_CRC_Init+0x3c>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <MX_CRC_Init+0x3c>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <MX_CRC_Init+0x3c>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003b7c:	4804      	ldr	r0, [pc, #16]	; (8003b90 <MX_CRC_Init+0x3c>)
 8003b7e:	f002 fc61 	bl	8006444 <HAL_CRC_Init>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003b88:	f000 fc6e 	bl	8004468 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003b8c:	bf00      	nop
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	200056b8 	.word	0x200056b8
 8003b94:	40023000 	.word	0x40023000

08003b98 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <MX_SDMMC2_SD_Init+0x38>)
 8003b9e:	4a0d      	ldr	r2, [pc, #52]	; (8003bd4 <MX_SDMMC2_SD_Init+0x3c>)
 8003ba0:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <MX_SDMMC2_SD_Init+0x38>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <MX_SDMMC2_SD_Init+0x38>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <MX_SDMMC2_SD_Init+0x38>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <MX_SDMMC2_SD_Init+0x38>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <MX_SDMMC2_SD_Init+0x38>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <MX_SDMMC2_SD_Init+0x38>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8003bc6:	bf00      	nop
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	200056dc 	.word	0x200056dc
 8003bd4:	40011c00 	.word	0x40011c00

08003bd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003bdc:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <MX_USART1_UART_Init+0x58>)
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <MX_USART1_UART_Init+0x5c>)
 8003be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003be2:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <MX_USART1_UART_Init+0x58>)
 8003be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003be8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bea:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <MX_USART1_UART_Init+0x58>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <MX_USART1_UART_Init+0x58>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bf6:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <MX_USART1_UART_Init+0x58>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <MX_USART1_UART_Init+0x58>)
 8003bfe:	220c      	movs	r2, #12
 8003c00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c02:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <MX_USART1_UART_Init+0x58>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c08:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <MX_USART1_UART_Init+0x58>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <MX_USART1_UART_Init+0x58>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <MX_USART1_UART_Init+0x58>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c1a:	4805      	ldr	r0, [pc, #20]	; (8003c30 <MX_USART1_UART_Init+0x58>)
 8003c1c:	f005 fe9f 	bl	800995e <HAL_UART_Init>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003c26:	f000 fc1f 	bl	8004468 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	200057c0 	.word	0x200057c0
 8003c34:	40011000 	.word	0x40011000

08003c38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <MX_DMA_Init+0x48>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4a0f      	ldr	r2, [pc, #60]	; (8003c80 <MX_DMA_Init+0x48>)
 8003c44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c48:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <MX_DMA_Init+0x48>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	2038      	movs	r0, #56	; 0x38
 8003c5c:	f002 fbbb 	bl	80063d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003c60:	2038      	movs	r0, #56	; 0x38
 8003c62:	f002 fbd4 	bl	800640e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8003c66:	2200      	movs	r2, #0
 8003c68:	2100      	movs	r1, #0
 8003c6a:	2044      	movs	r0, #68	; 0x44
 8003c6c:	f002 fbb3 	bl	80063d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003c70:	2044      	movs	r0, #68	; 0x44
 8003c72:	f002 fbcc 	bl	800640e <HAL_NVIC_EnableIRQ>

}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b090      	sub	sp, #64	; 0x40
 8003c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	60da      	str	r2, [r3, #12]
 8003c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c9a:	4bab      	ldr	r3, [pc, #684]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	4aaa      	ldr	r2, [pc, #680]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003ca0:	f043 0310 	orr.w	r3, r3, #16
 8003ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca6:	4ba8      	ldr	r3, [pc, #672]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cb2:	4ba5      	ldr	r3, [pc, #660]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	4aa4      	ldr	r2, [pc, #656]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbe:	4ba2      	ldr	r3, [pc, #648]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cca:	4b9f      	ldr	r3, [pc, #636]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	4a9e      	ldr	r2, [pc, #632]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cd0:	f043 0302 	orr.w	r3, r3, #2
 8003cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd6:	4b9c      	ldr	r3, [pc, #624]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	623b      	str	r3, [r7, #32]
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ce2:	4b99      	ldr	r3, [pc, #612]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	4a98      	ldr	r2, [pc, #608]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003ce8:	f043 0308 	orr.w	r3, r3, #8
 8003cec:	6313      	str	r3, [r2, #48]	; 0x30
 8003cee:	4b96      	ldr	r3, [pc, #600]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cfa:	4b93      	ldr	r3, [pc, #588]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	4a92      	ldr	r2, [pc, #584]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d00:	f043 0304 	orr.w	r3, r3, #4
 8003d04:	6313      	str	r3, [r2, #48]	; 0x30
 8003d06:	4b90      	ldr	r3, [pc, #576]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d12:	4b8d      	ldr	r3, [pc, #564]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	4a8c      	ldr	r2, [pc, #560]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1e:	4b8a      	ldr	r3, [pc, #552]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003d2a:	4b87      	ldr	r3, [pc, #540]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	4a86      	ldr	r2, [pc, #536]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d34:	6313      	str	r3, [r2, #48]	; 0x30
 8003d36:	4b84      	ldr	r3, [pc, #528]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003d42:	4b81      	ldr	r3, [pc, #516]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	4a80      	ldr	r2, [pc, #512]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4e:	4b7e      	ldr	r3, [pc, #504]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003d5a:	4b7b      	ldr	r3, [pc, #492]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	4a7a      	ldr	r2, [pc, #488]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d64:	6313      	str	r3, [r2, #48]	; 0x30
 8003d66:	4b78      	ldr	r3, [pc, #480]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d72:	4b75      	ldr	r3, [pc, #468]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	4a74      	ldr	r2, [pc, #464]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d78:	f043 0320 	orr.w	r3, r3, #32
 8003d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7e:	4b72      	ldr	r3, [pc, #456]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d8a:	4b6f      	ldr	r3, [pc, #444]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	4a6e      	ldr	r2, [pc, #440]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d94:	6313      	str	r3, [r2, #48]	; 0x30
 8003d96:	4b6c      	ldr	r3, [pc, #432]	; (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8003da2:	2378      	movs	r3, #120	; 0x78
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da6:	2302      	movs	r3, #2
 8003da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dae:	2300      	movs	r3, #0
 8003db0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003db2:	2306      	movs	r3, #6
 8003db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4863      	ldr	r0, [pc, #396]	; (8003f4c <MX_GPIO_Init+0x2c8>)
 8003dbe:	f002 ffd1 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003dd2:	2309      	movs	r3, #9
 8003dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dda:	4619      	mov	r1, r3
 8003ddc:	485b      	ldr	r0, [pc, #364]	; (8003f4c <MX_GPIO_Init+0x2c8>)
 8003dde:	f002 ffc1 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003de2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de8:	2302      	movs	r3, #2
 8003dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df0:	2303      	movs	r3, #3
 8003df2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003df4:	230b      	movs	r3, #11
 8003df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4854      	ldr	r0, [pc, #336]	; (8003f50 <MX_GPIO_Init+0x2cc>)
 8003e00:	f002 ffb0 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003e04:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e12:	2303      	movs	r3, #3
 8003e14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e16:	230c      	movs	r3, #12
 8003e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e1e:	4619      	mov	r1, r3
 8003e20:	484a      	ldr	r0, [pc, #296]	; (8003f4c <MX_GPIO_Init+0x2c8>)
 8003e22:	f002 ff9f 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003e26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e2c:	2312      	movs	r3, #18
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e34:	2300      	movs	r3, #0
 8003e36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e38:	2304      	movs	r3, #4
 8003e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e40:	4619      	mov	r1, r3
 8003e42:	4844      	ldr	r0, [pc, #272]	; (8003f54 <MX_GPIO_Init+0x2d0>)
 8003e44:	f002 ff8e 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8003e48:	f643 4323 	movw	r3, #15395	; 0x3c23
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e56:	2303      	movs	r3, #3
 8003e58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003e5a:	230a      	movs	r3, #10
 8003e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e62:	4619      	mov	r1, r3
 8003e64:	483b      	ldr	r0, [pc, #236]	; (8003f54 <MX_GPIO_Init+0x2d0>)
 8003e66:	f002 ff7d 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RX_Pin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8003e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e70:	2302      	movs	r3, #2
 8003e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003e7c:	2308      	movs	r3, #8
 8003e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8003e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e84:	4619      	mov	r1, r3
 8003e86:	4834      	ldr	r0, [pc, #208]	; (8003f58 <MX_GPIO_Init+0x2d4>)
 8003e88:	f002 ff6c 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_Pin */
  GPIO_InitStruct.Pin = CEC_Pin;
 8003e8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e92:	2312      	movs	r3, #18
 8003e94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8003ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	482c      	ldr	r0, [pc, #176]	; (8003f5c <MX_GPIO_Init+0x2d8>)
 8003eaa:	f002 ff5b 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SDA_Pin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003eb2:	2312      	movs	r3, #18
 8003eb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8003ebe:	230b      	movs	r3, #11
 8003ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8003ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4822      	ldr	r0, [pc, #136]	; (8003f54 <MX_GPIO_Init+0x2d0>)
 8003eca:	f002 ff4b 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003ece:	2340      	movs	r3, #64	; 0x40
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eda:	2303      	movs	r3, #3
 8003edc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003ede:	230a      	movs	r3, #10
 8003ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	481a      	ldr	r0, [pc, #104]	; (8003f54 <MX_GPIO_Init+0x2d0>)
 8003eea:	f002 ff3b 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A12_Pin
                           FMC_A10_Pin FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8003eee:	f248 1337 	movw	r3, #33079	; 0x8137
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efc:	2303      	movs	r3, #3
 8003efe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f00:	230c      	movs	r3, #12
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4811      	ldr	r0, [pc, #68]	; (8003f50 <MX_GPIO_Init+0x2cc>)
 8003f0c:	f002 ff2a 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin DSI_RESET_Pin
                           ARD_D8_Pin LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin
                           ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin
 8003f10:	f24f 033b 	movw	r3, #61499	; 0xf03b
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARD_D8_Pin|LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f16:	2300      	movs	r3, #0
 8003f18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f22:	4619      	mov	r1, r3
 8003f24:	480e      	ldr	r0, [pc, #56]	; (8003f60 <MX_GPIO_Init+0x2dc>)
 8003f26:	f002 ff1d 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003f2a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f30:	2302      	movs	r3, #2
 8003f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f3c:	230c      	movs	r3, #12
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f44:	4619      	mov	r1, r3
 8003f46:	e00d      	b.n	8003f64 <MX_GPIO_Init+0x2e0>
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40021800 	.word	0x40021800
 8003f54:	40020400 	.word	0x40020400
 8003f58:	40020800 	.word	0x40020800
 8003f5c:	40020000 	.word	0x40020000
 8003f60:	40022400 	.word	0x40022400
 8003f64:	48bb      	ldr	r0, [pc, #748]	; (8004254 <MX_GPIO_Init+0x5d0>)
 8003f66:	f002 fefd 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM_DATIN5_Pin DFSDM_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8003f6a:	f640 0308 	movw	r3, #2056	; 0x808
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f70:	2302      	movs	r3, #2
 8003f72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f84:	4619      	mov	r1, r3
 8003f86:	48b4      	ldr	r0, [pc, #720]	; (8004258 <MX_GPIO_Init+0x5d4>)
 8003f88:	f002 feec 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8003f8c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f92:	2302      	movs	r3, #2
 8003f94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003f9e:	2309      	movs	r3, #9
 8003fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	48ab      	ldr	r0, [pc, #684]	; (8004258 <MX_GPIO_Init+0x5d4>)
 8003faa:	f002 fedb 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8003fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fc0:	2305      	movs	r3, #5
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8003fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fc8:	4619      	mov	r1, r3
 8003fca:	48a4      	ldr	r0, [pc, #656]	; (800425c <MX_GPIO_Init+0x5d8>)
 8003fcc:	f002 feca 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8003fd0:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	489e      	ldr	r0, [pc, #632]	; (8004260 <MX_GPIO_Init+0x5dc>)
 8003fe6:	f002 febd 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL2_Pin D27_Pin D26_Pin FMC_NBL3_Pin
                           D29_Pin D31_Pin D28_Pin D25_Pin
                           D30_Pin D24_Pin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8003fea:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ffc:	230c      	movs	r3, #12
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004004:	4619      	mov	r1, r3
 8004006:	4896      	ldr	r0, [pc, #600]	; (8004260 <MX_GPIO_Init+0x5dc>)
 8004008:	f002 feac 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 800400c:	23f8      	movs	r3, #248	; 0xf8
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004010:	2300      	movs	r3, #0
 8004012:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004014:	2300      	movs	r3, #0
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004018:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800401c:	4619      	mov	r1, r3
 800401e:	4891      	ldr	r0, [pc, #580]	; (8004264 <MX_GPIO_Init+0x5e0>)
 8004020:	f002 fea0 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8004024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402a:	2302      	movs	r3, #2
 800402c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402e:	2300      	movs	r3, #0
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004032:	2300      	movs	r3, #0
 8004034:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8004036:	2307      	movs	r3, #7
 8004038:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 800403a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800403e:	4619      	mov	r1, r3
 8004040:	4889      	ldr	r0, [pc, #548]	; (8004268 <MX_GPIO_Init+0x5e4>)
 8004042:	f002 fe8f 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8004046:	2330      	movs	r3, #48	; 0x30
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800404a:	2300      	movs	r3, #0
 800404c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404e:	2300      	movs	r3, #0
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004056:	4619      	mov	r1, r3
 8004058:	487e      	ldr	r0, [pc, #504]	; (8004254 <MX_GPIO_Init+0x5d0>)
 800405a:	f002 fe83 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 800405e:	2308      	movs	r3, #8
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004062:	2302      	movs	r3, #2
 8004064:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004066:	2300      	movs	r3, #0
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406a:	2300      	movs	r3, #0
 800406c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800406e:	2303      	movs	r3, #3
 8004070:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8004072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004076:	4619      	mov	r1, r3
 8004078:	4876      	ldr	r0, [pc, #472]	; (8004254 <MX_GPIO_Init+0x5d0>)
 800407a:	f002 fe73 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800407e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004084:	2302      	movs	r3, #2
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	2300      	movs	r3, #0
 800408a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800408c:	2303      	movs	r3, #3
 800408e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004090:	2305      	movs	r3, #5
 8004092:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8004094:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004098:	4619      	mov	r1, r3
 800409a:	4870      	ldr	r0, [pc, #448]	; (800425c <MX_GPIO_Init+0x5d8>)
 800409c:	f002 fe62 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80040a0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a6:	2302      	movs	r3, #2
 80040a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ae:	2303      	movs	r3, #3
 80040b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040b2:	230c      	movs	r3, #12
 80040b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ba:	4619      	mov	r1, r3
 80040bc:	486b      	ldr	r0, [pc, #428]	; (800426c <MX_GPIO_Init+0x5e8>)
 80040be:	f002 fe51 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_TX_Pin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 80040c2:	2304      	movs	r3, #4
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c6:	2302      	movs	r3, #2
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ce:	2303      	movs	r3, #3
 80040d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80040d2:	2308      	movs	r3, #8
 80040d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 80040d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040da:	4619      	mov	r1, r3
 80040dc:	485d      	ldr	r0, [pc, #372]	; (8004254 <MX_GPIO_Init+0x5d0>)
 80040de:	f002 fe41 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : D23_Pin D21_Pin D22_Pin FMC_SDNME_Pin
                           FMC_SDNE0_Pin FMC_SDCKE0_Pin D20_Pin FMC_D_7_Pin
                           FMC_D19_Pin FMC_D16_Pin FMC_D18_Pin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 80040e2:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e8:	2302      	movs	r3, #2
 80040ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f0:	2303      	movs	r3, #3
 80040f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040f4:	230c      	movs	r3, #12
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80040f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040fc:	4619      	mov	r1, r3
 80040fe:	485c      	ldr	r0, [pc, #368]	; (8004270 <MX_GPIO_Init+0x5ec>)
 8004100:	f002 fe30 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8004104:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410a:	2302      	movs	r3, #2
 800410c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410e:	2300      	movs	r3, #0
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004112:	2303      	movs	r3, #3
 8004114:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004116:	230a      	movs	r3, #10
 8004118:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 800411a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800411e:	4619      	mov	r1, r3
 8004120:	484f      	ldr	r0, [pc, #316]	; (8004260 <MX_GPIO_Init+0x5dc>)
 8004122:	f002 fe1f 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8004126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800412a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412c:	2302      	movs	r3, #2
 800412e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004134:	2300      	movs	r3, #0
 8004136:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004138:	2300      	movs	r3, #0
 800413a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 800413c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004140:	4619      	mov	r1, r3
 8004142:	4846      	ldr	r0, [pc, #280]	; (800425c <MX_GPIO_Init+0x5d8>)
 8004144:	f002 fe0e 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8004148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800414e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8004152:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8004158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800415c:	4619      	mov	r1, r3
 800415e:	4840      	ldr	r0, [pc, #256]	; (8004260 <MX_GPIO_Init+0x5dc>)
 8004160:	f002 fe00 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8004164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416a:	2302      	movs	r3, #2
 800416c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004172:	2300      	movs	r3, #0
 8004174:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004176:	2302      	movs	r3, #2
 8004178:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 800417a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800417e:	4619      	mov	r1, r3
 8004180:	4835      	ldr	r0, [pc, #212]	; (8004258 <MX_GPIO_Init+0x5d4>)
 8004182:	f002 fdef 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_RX_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8004186:	23c0      	movs	r3, #192	; 0xc0
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418a:	2302      	movs	r3, #2
 800418c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004192:	2303      	movs	r3, #3
 8004194:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004196:	2308      	movs	r3, #8
 8004198:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800419a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800419e:	4619      	mov	r1, r3
 80041a0:	482d      	ldr	r0, [pc, #180]	; (8004258 <MX_GPIO_Init+0x5d4>)
 80041a2:	f002 fddf 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80041a6:	2310      	movs	r3, #16
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041aa:	2302      	movs	r3, #2
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b2:	2303      	movs	r3, #3
 80041b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80041b6:	230a      	movs	r3, #10
 80041b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80041ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041be:	4619      	mov	r1, r3
 80041c0:	482b      	ldr	r0, [pc, #172]	; (8004270 <MX_GPIO_Init+0x5ec>)
 80041c2:	f002 fdcf 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80041c6:	2380      	movs	r3, #128	; 0x80
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ca:	2302      	movs	r3, #2
 80041cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d2:	2300      	movs	r3, #0
 80041d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80041d6:	2306      	movs	r3, #6
 80041d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80041da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041de:	4619      	mov	r1, r3
 80041e0:	4821      	ldr	r0, [pc, #132]	; (8004268 <MX_GPIO_Init+0x5e4>)
 80041e2:	f002 fdbf 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 80041e6:	2348      	movs	r3, #72	; 0x48
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041ea:	2300      	movs	r3, #0
 80041ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80041f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041f6:	4619      	mov	r1, r3
 80041f8:	481b      	ldr	r0, [pc, #108]	; (8004268 <MX_GPIO_Init+0x5e4>)
 80041fa:	f002 fdb3 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004202:	2302      	movs	r3, #2
 8004204:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	2300      	movs	r3, #0
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420a:	2300      	movs	r3, #0
 800420c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800420e:	2303      	movs	r3, #3
 8004210:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8004212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004216:	4619      	mov	r1, r3
 8004218:	4814      	ldr	r0, [pc, #80]	; (800426c <MX_GPIO_Init+0x5e8>)
 800421a:	f002 fda3 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 800421e:	2340      	movs	r3, #64	; 0x40
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004222:	2302      	movs	r3, #2
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004226:	2300      	movs	r3, #0
 8004228:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422a:	2300      	movs	r3, #0
 800422c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800422e:	2303      	movs	r3, #3
 8004230:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8004232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004236:	4619      	mov	r1, r3
 8004238:	480c      	ldr	r0, [pc, #48]	; (800426c <MX_GPIO_Init+0x5e8>)
 800423a:	f002 fd93 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 800423e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004244:	2303      	movs	r3, #3
 8004246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	2300      	movs	r3, #0
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800424c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004250:	4619      	mov	r1, r3
 8004252:	e00f      	b.n	8004274 <MX_GPIO_Init+0x5f0>
 8004254:	40020c00 	.word	0x40020c00
 8004258:	40020800 	.word	0x40020800
 800425c:	40020000 	.word	0x40020000
 8004260:	40022000 	.word	0x40022000
 8004264:	40022800 	.word	0x40022800
 8004268:	40021800 	.word	0x40021800
 800426c:	40021400 	.word	0x40021400
 8004270:	40021c00 	.word	0x40021c00
 8004274:	4875      	ldr	r0, [pc, #468]	; (800444c <MX_GPIO_Init+0x7c8>)
 8004276:	f002 fd75 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 800427a:	2301      	movs	r3, #1
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427e:	2302      	movs	r3, #2
 8004280:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004282:	2300      	movs	r3, #0
 8004284:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004286:	2303      	movs	r3, #3
 8004288:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800428a:	230a      	movs	r3, #10
 800428c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 800428e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004292:	4619      	mov	r1, r3
 8004294:	486e      	ldr	r0, [pc, #440]	; (8004450 <MX_GPIO_Init+0x7cc>)
 8004296:	f002 fd65 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800429a:	2332      	movs	r3, #50	; 0x32
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429e:	2302      	movs	r3, #2
 80042a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a6:	2303      	movs	r3, #3
 80042a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042aa:	230b      	movs	r3, #11
 80042ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042b2:	4619      	mov	r1, r3
 80042b4:	4866      	ldr	r0, [pc, #408]	; (8004450 <MX_GPIO_Init+0x7cc>)
 80042b6:	f002 fd55 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 80042ba:	2304      	movs	r3, #4
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042be:	2303      	movs	r3, #3
 80042c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 80042c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042ca:	4619      	mov	r1, r3
 80042cc:	4860      	ldr	r0, [pc, #384]	; (8004450 <MX_GPIO_Init+0x7cc>)
 80042ce:	f002 fd49 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042d2:	2304      	movs	r3, #4
 80042d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d6:	2302      	movs	r3, #2
 80042d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042de:	2303      	movs	r3, #3
 80042e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80042e2:	2309      	movs	r3, #9
 80042e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042ea:	4619      	mov	r1, r3
 80042ec:	4859      	ldr	r0, [pc, #356]	; (8004454 <MX_GPIO_Init+0x7d0>)
 80042ee:	f002 fd39 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SCL_Pin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 80042f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042f8:	2312      	movs	r3, #18
 80042fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004300:	2303      	movs	r3, #3
 8004302:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004304:	2304      	movs	r3, #4
 8004306:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8004308:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800430c:	4619      	mov	r1, r3
 800430e:	4852      	ldr	r0, [pc, #328]	; (8004458 <MX_GPIO_Init+0x7d4>)
 8004310:	f002 fd28 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8004314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431a:	2302      	movs	r3, #2
 800431c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431e:	2300      	movs	r3, #0
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004322:	2303      	movs	r3, #3
 8004324:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004326:	2309      	movs	r3, #9
 8004328:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 800432a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800432e:	4619      	mov	r1, r3
 8004330:	4849      	ldr	r0, [pc, #292]	; (8004458 <MX_GPIO_Init+0x7d4>)
 8004332:	f002 fd17 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004336:	2386      	movs	r3, #134	; 0x86
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433a:	2302      	movs	r3, #2
 800433c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433e:	2300      	movs	r3, #0
 8004340:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004342:	2303      	movs	r3, #3
 8004344:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004346:	230b      	movs	r3, #11
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800434a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800434e:	4619      	mov	r1, r3
 8004350:	4842      	ldr	r0, [pc, #264]	; (800445c <MX_GPIO_Init+0x7d8>)
 8004352:	f002 fd07 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8004356:	2301      	movs	r3, #1
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800435a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800435e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004360:	2300      	movs	r3, #0
 8004362:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8004364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004368:	4619      	mov	r1, r3
 800436a:	483c      	ldr	r0, [pc, #240]	; (800445c <MX_GPIO_Init+0x7d8>)
 800436c:	f002 fcfa 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8004370:	2350      	movs	r3, #80	; 0x50
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004374:	2303      	movs	r3, #3
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004380:	4619      	mov	r1, r3
 8004382:	4836      	ldr	r0, [pc, #216]	; (800445c <MX_GPIO_Init+0x7d8>)
 8004384:	f002 fcee 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_TX_Pin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8004388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438e:	2302      	movs	r3, #2
 8004390:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004392:	2300      	movs	r3, #0
 8004394:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004396:	2300      	movs	r3, #0
 8004398:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800439a:	230a      	movs	r3, #10
 800439c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 800439e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043a2:	4619      	mov	r1, r3
 80043a4:	482c      	ldr	r0, [pc, #176]	; (8004458 <MX_GPIO_Init+0x7d4>)
 80043a6:	f002 fcdd 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043ae:	2300      	movs	r3, #0
 80043b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 80043b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043ba:	4619      	mov	r1, r3
 80043bc:	4828      	ldr	r0, [pc, #160]	; (8004460 <MX_GPIO_Init+0x7dc>)
 80043be:	f002 fcd1 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80043c2:	2328      	movs	r3, #40	; 0x28
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c6:	2302      	movs	r3, #2
 80043c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ce:	2303      	movs	r3, #3
 80043d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80043d2:	230a      	movs	r3, #10
 80043d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043da:	4619      	mov	r1, r3
 80043dc:	481f      	ldr	r0, [pc, #124]	; (800445c <MX_GPIO_Init+0x7d8>)
 80043de:	f002 fcc1 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSIHOST_TE_Pin */
  GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 80043e2:	2304      	movs	r3, #4
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e6:	2302      	movs	r3, #2
 80043e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ee:	2300      	movs	r3, #0
 80043f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80043f2:	230d      	movs	r3, #13
 80043f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 80043f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043fa:	4619      	mov	r1, r3
 80043fc:	4819      	ldr	r0, [pc, #100]	; (8004464 <MX_GPIO_Init+0x7e0>)
 80043fe:	f002 fcb1 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004402:	2340      	movs	r3, #64	; 0x40
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004406:	2302      	movs	r3, #2
 8004408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440e:	2300      	movs	r3, #0
 8004410:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004412:	2309      	movs	r3, #9
 8004414:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8004416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800441a:	4619      	mov	r1, r3
 800441c:	4810      	ldr	r0, [pc, #64]	; (8004460 <MX_GPIO_Init+0x7dc>)
 800441e:	f002 fca1 	bl	8006d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004422:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004428:	2302      	movs	r3, #2
 800442a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004430:	2300      	movs	r3, #0
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004434:	2305      	movs	r3, #5
 8004436:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800443c:	4619      	mov	r1, r3
 800443e:	4805      	ldr	r0, [pc, #20]	; (8004454 <MX_GPIO_Init+0x7d0>)
 8004440:	f002 fc90 	bl	8006d64 <HAL_GPIO_Init>

}
 8004444:	bf00      	nop
 8004446:	3740      	adds	r7, #64	; 0x40
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021400 	.word	0x40021400
 8004450:	40020800 	.word	0x40020800
 8004454:	40020400 	.word	0x40020400
 8004458:	40020c00 	.word	0x40020c00
 800445c:	40020000 	.word	0x40020000
 8004460:	40021c00 	.word	0x40021c00
 8004464:	40022400 	.word	0x40022400

08004468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800446c:	b672      	cpsid	i
}
 800446e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004470:	e7fe      	b.n	8004470 <Error_Handler+0x8>
	...

08004474 <ppu_get_context>:
void pipeline_fifo_reset();
void pipeline_process();

static ppu_context ctx;

ppu_context *ppu_get_context() {
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
    return &ctx;
 8004478:	4b02      	ldr	r3, [pc, #8]	; (8004484 <ppu_get_context+0x10>)
}
 800447a:	4618      	mov	r0, r3
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	2000143c 	.word	0x2000143c

08004488 <ppu_init>:

void ppu_init() {
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
    ctx.current_frame = 0;
 800448c:	4a40      	ldr	r2, [pc, #256]	; (8004590 <ppu_init+0x108>)
 800448e:	f242 132c 	movw	r3, #8492	; 0x212c
 8004492:	4413      	add	r3, r2
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
    ctx.line_ticks = 0;
 8004498:	4a3d      	ldr	r2, [pc, #244]	; (8004590 <ppu_init+0x108>)
 800449a:	f242 1330 	movw	r3, #8496	; 0x2130
 800449e:	4413      	add	r3, r2
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
    ctx.video_buffer = malloc(YRES * XRES * sizeof(32));
 80044a4:	2390      	movs	r3, #144	; 0x90
 80044a6:	22a0      	movs	r2, #160	; 0xa0
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f009 fe14 	bl	800e0dc <malloc>
 80044b4:	4603      	mov	r3, r0
 80044b6:	4619      	mov	r1, r3
 80044b8:	4a35      	ldr	r2, [pc, #212]	; (8004590 <ppu_init+0x108>)
 80044ba:	f242 1334 	movw	r3, #8500	; 0x2134
 80044be:	4413      	add	r3, r2
 80044c0:	6019      	str	r1, [r3, #0]

    ctx.pfc.line_x = 0;
 80044c2:	4a33      	ldr	r2, [pc, #204]	; (8004590 <ppu_init+0x108>)
 80044c4:	f242 03b0 	movw	r3, #8368	; 0x20b0
 80044c8:	4413      	add	r3, r2
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
    ctx.pfc.pushed_x = 0;
 80044ce:	4a30      	ldr	r2, [pc, #192]	; (8004590 <ppu_init+0x108>)
 80044d0:	f242 03b1 	movw	r3, #8369	; 0x20b1
 80044d4:	4413      	add	r3, r2
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]
    ctx.pfc.fetch_x = 0;
 80044da:	4a2d      	ldr	r2, [pc, #180]	; (8004590 <ppu_init+0x108>)
 80044dc:	f242 03b2 	movw	r3, #8370	; 0x20b2
 80044e0:	4413      	add	r3, r2
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
    ctx.pfc.pixel_fifo.size = 0;
 80044e6:	4a2a      	ldr	r2, [pc, #168]	; (8004590 <ppu_init+0x108>)
 80044e8:	f242 03ac 	movw	r3, #8364	; 0x20ac
 80044ec:	4413      	add	r3, r2
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
    ctx.pfc.pixel_fifo.head = ctx.pfc.pixel_fifo.tail = NULL;
 80044f2:	4a27      	ldr	r2, [pc, #156]	; (8004590 <ppu_init+0x108>)
 80044f4:	f242 03a8 	movw	r3, #8360	; 0x20a8
 80044f8:	4413      	add	r3, r2
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	4a24      	ldr	r2, [pc, #144]	; (8004590 <ppu_init+0x108>)
 8004500:	f242 03a8 	movw	r3, #8360	; 0x20a8
 8004504:	4413      	add	r3, r2
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4921      	ldr	r1, [pc, #132]	; (8004590 <ppu_init+0x108>)
 800450a:	f242 03a4 	movw	r3, #8356	; 0x20a4
 800450e:	440b      	add	r3, r1
 8004510:	601a      	str	r2, [r3, #0]
    ctx.pfc.cur_fetch_state = FS_TILE;
 8004512:	4a1f      	ldr	r2, [pc, #124]	; (8004590 <ppu_init+0x108>)
 8004514:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004518:	4413      	add	r3, r2
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]

    ctx.line_sprites = 0;
 800451e:	4a1c      	ldr	r2, [pc, #112]	; (8004590 <ppu_init+0x108>)
 8004520:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004524:	4413      	add	r3, r2
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
    ctx.fetched_entry_count = 0;
 800452a:	4a19      	ldr	r2, [pc, #100]	; (8004590 <ppu_init+0x108>)
 800452c:	f242 1318 	movw	r3, #8472	; 0x2118
 8004530:	4413      	add	r3, r2
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
    ctx.window_line = 0;
 8004536:	4a16      	ldr	r2, [pc, #88]	; (8004590 <ppu_init+0x108>)
 8004538:	f242 1328 	movw	r3, #8488	; 0x2128
 800453c:	4413      	add	r3, r2
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]

    lcd_init();
 8004542:	f7ff f95d 	bl	8003800 <lcd_init>
    LCDS_MODE_SET(MODE_OAM);
 8004546:	f7ff f9af 	bl	80038a8 <lcd_get_context>
 800454a:	4603      	mov	r3, r0
 800454c:	785a      	ldrb	r2, [r3, #1]
 800454e:	f022 0203 	bic.w	r2, r2, #3
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	705a      	strb	r2, [r3, #1]
 8004556:	f7ff f9a7 	bl	80038a8 <lcd_get_context>
 800455a:	4603      	mov	r3, r0
 800455c:	785a      	ldrb	r2, [r3, #1]
 800455e:	f042 0202 	orr.w	r2, r2, #2
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	705a      	strb	r2, [r3, #1]

    memset(ctx.oam_ram, 0, sizeof(ctx.oam_ram));
 8004566:	22a0      	movs	r2, #160	; 0xa0
 8004568:	2100      	movs	r1, #0
 800456a:	4809      	ldr	r0, [pc, #36]	; (8004590 <ppu_init+0x108>)
 800456c:	f009 fdd4 	bl	800e118 <memset>
    memset(ctx.video_buffer, 0, YRES * XRES * sizeof(u32));
 8004570:	4a07      	ldr	r2, [pc, #28]	; (8004590 <ppu_init+0x108>)
 8004572:	f242 1334 	movw	r3, #8500	; 0x2134
 8004576:	4413      	add	r3, r2
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2290      	movs	r2, #144	; 0x90
 800457c:	21a0      	movs	r1, #160	; 0xa0
 800457e:	fb01 f202 	mul.w	r2, r1, r2
 8004582:	0092      	lsls	r2, r2, #2
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f009 fdc6 	bl	800e118 <memset>
}
 800458c:	bf00      	nop
 800458e:	bd80      	pop	{r7, pc}
 8004590:	2000143c 	.word	0x2000143c

08004594 <ppu_tick>:

void ppu_tick() {
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
    ctx.line_ticks++;
 8004598:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <ppu_tick+0x5c>)
 800459a:	f242 1330 	movw	r3, #8496	; 0x2130
 800459e:	4413      	add	r3, r2
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	4912      	ldr	r1, [pc, #72]	; (80045f0 <ppu_tick+0x5c>)
 80045a6:	f242 1330 	movw	r3, #8496	; 0x2130
 80045aa:	440b      	add	r3, r1
 80045ac:	601a      	str	r2, [r3, #0]

    switch(LCDS_MODE) {
 80045ae:	f7ff f97b 	bl	80038a8 <lcd_get_context>
 80045b2:	4603      	mov	r3, r0
 80045b4:	785b      	ldrb	r3, [r3, #1]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d816      	bhi.n	80045ec <ppu_tick+0x58>
 80045be:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <ppu_tick+0x30>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045e7 	.word	0x080045e7
 80045c8:	080045e1 	.word	0x080045e1
 80045cc:	080045d5 	.word	0x080045d5
 80045d0:	080045db 	.word	0x080045db
    case MODE_OAM:
        ppu_mode_oam();
 80045d4:	f000 ff40 	bl	8005458 <ppu_mode_oam>
        break;
 80045d8:	e008      	b.n	80045ec <ppu_tick+0x58>
    case MODE_XFER:
        ppu_mode_xfer();
 80045da:	f000 ff9c 	bl	8005516 <ppu_mode_xfer>
        break;
 80045de:	e005      	b.n	80045ec <ppu_tick+0x58>
    case MODE_VBLANK:
        ppu_mode_vblank();
 80045e0:	f000 ffc4 	bl	800556c <ppu_mode_vblank>
        break;
 80045e4:	e002      	b.n	80045ec <ppu_tick+0x58>
    case MODE_HBLANK:
        ppu_mode_hblank();
 80045e6:	f000 ffff 	bl	80055e8 <ppu_mode_hblank>
        break;
 80045ea:	bf00      	nop
    }
}
 80045ec:	bf00      	nop
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	2000143c 	.word	0x2000143c

080045f4 <ppu_oam_write>:


void ppu_oam_write(u16 address, u8 value) {
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	460a      	mov	r2, r1
 80045fe:	80fb      	strh	r3, [r7, #6]
 8004600:	4613      	mov	r3, r2
 8004602:	717b      	strb	r3, [r7, #5]
    if (address >= 0xFE00) {
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 800460a:	d303      	bcc.n	8004614 <ppu_oam_write+0x20>
        address -= 0xFE00;
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004612:	80fb      	strh	r3, [r7, #6]
    }

    u8 *p = (u8 *)ctx.oam_ram;
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <ppu_oam_write+0x3c>)
 8004616:	60fb      	str	r3, [r7, #12]
    p[address] = value;
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4413      	add	r3, r2
 800461e:	797a      	ldrb	r2, [r7, #5]
 8004620:	701a      	strb	r2, [r3, #0]
}
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	2000143c 	.word	0x2000143c

08004634 <ppu_oam_read>:

u8 ppu_oam_read(u16 address) {
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	80fb      	strh	r3, [r7, #6]
    if (address >= 0xFE00) {
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 8004644:	d303      	bcc.n	800464e <ppu_oam_read+0x1a>
        address -= 0xFE00;
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800464c:	80fb      	strh	r3, [r7, #6]
    }

    u8 *p = (u8 *)ctx.oam_ram;
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <ppu_oam_read+0x34>)
 8004650:	60fb      	str	r3, [r7, #12]
    return p[address];
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	781b      	ldrb	r3, [r3, #0]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	2000143c 	.word	0x2000143c

0800466c <ppu_vram_write>:

void ppu_vram_write(u16 address, u8 value) {
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	460a      	mov	r2, r1
 8004676:	80fb      	strh	r3, [r7, #6]
 8004678:	4613      	mov	r3, r2
 800467a:	717b      	strb	r3, [r7, #5]
    ctx.vram[address - 0x8000] = value;
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8004682:	4a05      	ldr	r2, [pc, #20]	; (8004698 <ppu_vram_write+0x2c>)
 8004684:	4413      	add	r3, r2
 8004686:	797a      	ldrb	r2, [r7, #5]
 8004688:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	2000143c 	.word	0x2000143c

0800469c <ppu_vram_read>:

u8 ppu_vram_read(u16 address) {
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	80fb      	strh	r3, [r7, #6]
    return ctx.vram[address - 0x8000];
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80046ac:	4a04      	ldr	r2, [pc, #16]	; (80046c0 <ppu_vram_read+0x24>)
 80046ae:	4413      	add	r3, r2
 80046b0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	2000143c 	.word	0x2000143c

080046c4 <window_visible>:
#include <ppu.h>
#include <lcd.h>
#include <bus.h>

bool window_visible() {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
    return LCDC_WIN_ENABLE && lcd_get_context()->win_x >= 0 &&
 80046c8:	f7ff f8ee 	bl	80038a8 <lcd_get_context>
 80046cc:	4603      	mov	r3, r0
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	f003 0320 	and.w	r3, r3, #32
        lcd_get_context()->win_x <= 166 && lcd_get_context()->win_y >= 0 &&
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d013      	beq.n	8004700 <window_visible+0x3c>
    return LCDC_WIN_ENABLE && lcd_get_context()->win_x >= 0 &&
 80046d8:	f7ff f8e6 	bl	80038a8 <lcd_get_context>
        lcd_get_context()->win_x <= 166 && lcd_get_context()->win_y >= 0 &&
 80046dc:	f7ff f8e4 	bl	80038a8 <lcd_get_context>
 80046e0:	4603      	mov	r3, r0
 80046e2:	7adb      	ldrb	r3, [r3, #11]
    return LCDC_WIN_ENABLE && lcd_get_context()->win_x >= 0 &&
 80046e4:	2ba6      	cmp	r3, #166	; 0xa6
 80046e6:	d80b      	bhi.n	8004700 <window_visible+0x3c>
        lcd_get_context()->win_x <= 166 && lcd_get_context()->win_y >= 0 &&
 80046e8:	f7ff f8de 	bl	80038a8 <lcd_get_context>
        lcd_get_context()->win_y < YRES;
 80046ec:	f7ff f8dc 	bl	80038a8 <lcd_get_context>
 80046f0:	4603      	mov	r3, r0
 80046f2:	7a9b      	ldrb	r3, [r3, #10]
 80046f4:	461a      	mov	r2, r3
 80046f6:	2390      	movs	r3, #144	; 0x90
        lcd_get_context()->win_x <= 166 && lcd_get_context()->win_y >= 0 &&
 80046f8:	429a      	cmp	r2, r3
 80046fa:	da01      	bge.n	8004700 <window_visible+0x3c>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <window_visible+0x3e>
 8004700:	2300      	movs	r3, #0
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	b2db      	uxtb	r3, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}

0800470c <pixel_fifo_push>:

void pixel_fifo_push(u32 value) {
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
    fifo_entry *next = malloc(sizeof(fifo_entry));
 8004714:	2008      	movs	r0, #8
 8004716:	f009 fce1 	bl	800e0dc <malloc>
 800471a:	4603      	mov	r3, r0
 800471c:	60fb      	str	r3, [r7, #12]
    next->next = NULL;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
    next->value = value;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	605a      	str	r2, [r3, #4]

    if (!ppu_get_context()->pfc.pixel_fifo.head) {
 800472a:	f7ff fea3 	bl	8004474 <ppu_get_context>
 800472e:	4602      	mov	r2, r0
 8004730:	f242 03a4 	movw	r3, #8356	; 0x20a4
 8004734:	4413      	add	r3, r2
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d113      	bne.n	8004764 <pixel_fifo_push+0x58>
        //first entry...
        ppu_get_context()->pfc.pixel_fifo.head = ppu_get_context()->pfc.pixel_fifo.tail = next;
 800473c:	f7ff fe9a 	bl	8004474 <ppu_get_context>
 8004740:	4604      	mov	r4, r0
 8004742:	f242 03a8 	movw	r3, #8360	; 0x20a8
 8004746:	4423      	add	r3, r4
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	f7ff fe92 	bl	8004474 <ppu_get_context>
 8004750:	4601      	mov	r1, r0
 8004752:	f242 03a8 	movw	r3, #8360	; 0x20a8
 8004756:	4423      	add	r3, r4
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	f242 03a4 	movw	r3, #8356	; 0x20a4
 800475e:	440b      	add	r3, r1
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	e010      	b.n	8004786 <pixel_fifo_push+0x7a>
    } else {
        ppu_get_context()->pfc.pixel_fifo.tail->next = next;
 8004764:	f7ff fe86 	bl	8004474 <ppu_get_context>
 8004768:	4602      	mov	r2, r0
 800476a:	f242 03a8 	movw	r3, #8360	; 0x20a8
 800476e:	4413      	add	r3, r2
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	601a      	str	r2, [r3, #0]
        ppu_get_context()->pfc.pixel_fifo.tail = next;
 8004776:	f7ff fe7d 	bl	8004474 <ppu_get_context>
 800477a:	4602      	mov	r2, r0
 800477c:	f242 03a8 	movw	r3, #8360	; 0x20a8
 8004780:	4413      	add	r3, r2
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	601a      	str	r2, [r3, #0]
    }

    ppu_get_context()->pfc.pixel_fifo.size++;
 8004786:	f7ff fe75 	bl	8004474 <ppu_get_context>
 800478a:	4602      	mov	r2, r0
 800478c:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8004790:	4413      	add	r3, r2
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	1c59      	adds	r1, r3, #1
 8004796:	f242 03ac 	movw	r3, #8364	; 0x20ac
 800479a:	4413      	add	r3, r2
 800479c:	6019      	str	r1, [r3, #0]
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd90      	pop	{r4, r7, pc}
	...

080047a8 <pixel_fifo_pop>:

u32 pixel_fifo_pop() {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
    if (ppu_get_context()->pfc.pixel_fifo.size <= 0) {
 80047ae:	f7ff fe61 	bl	8004474 <ppu_get_context>
 80047b2:	4602      	mov	r2, r0
 80047b4:	f242 03ac 	movw	r3, #8364	; 0x20ac
 80047b8:	4413      	add	r3, r2
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10b      	bne.n	80047d8 <pixel_fifo_pop+0x30>
        fprintf(stderr, "ERR IN PIXEL FIFO!\n");
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <pixel_fifo_pop+0x80>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2213      	movs	r2, #19
 80047c8:	2101      	movs	r1, #1
 80047ca:	4818      	ldr	r0, [pc, #96]	; (800482c <pixel_fifo_pop+0x84>)
 80047cc:	f009 fbec 	bl	800dfa8 <fwrite>
        exit(-8);
 80047d0:	f06f 0007 	mvn.w	r0, #7
 80047d4:	f008 ff1a 	bl	800d60c <exit>
    }

    fifo_entry *popped = ppu_get_context()->pfc.pixel_fifo.head;
 80047d8:	f7ff fe4c 	bl	8004474 <ppu_get_context>
 80047dc:	4602      	mov	r2, r0
 80047de:	f242 03a4 	movw	r3, #8356	; 0x20a4
 80047e2:	4413      	add	r3, r2
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	607b      	str	r3, [r7, #4]
    ppu_get_context()->pfc.pixel_fifo.head = popped->next;
 80047e8:	f7ff fe44 	bl	8004474 <ppu_get_context>
 80047ec:	4601      	mov	r1, r0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	f242 03a4 	movw	r3, #8356	; 0x20a4
 80047f6:	440b      	add	r3, r1
 80047f8:	601a      	str	r2, [r3, #0]
    ppu_get_context()->pfc.pixel_fifo.size--;
 80047fa:	f7ff fe3b 	bl	8004474 <ppu_get_context>
 80047fe:	4602      	mov	r2, r0
 8004800:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8004804:	4413      	add	r3, r2
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	1e59      	subs	r1, r3, #1
 800480a:	f242 03ac 	movw	r3, #8364	; 0x20ac
 800480e:	4413      	add	r3, r2
 8004810:	6019      	str	r1, [r3, #0]

    u32 val = popped->value;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	603b      	str	r3, [r7, #0]
    free(popped);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f009 fc67 	bl	800e0ec <free>

    return val;
 800481e:	683b      	ldr	r3, [r7, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000ad4 	.word	0x20000ad4
 800482c:	0800fbf0 	.word	0x0800fbf0

08004830 <fetch_sprite_pixels>:

u32 fetch_sprite_pixels(int bit, u32 color, u8 bg_color) {
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	4613      	mov	r3, r2
 800483c:	71fb      	strb	r3, [r7, #7]
    for (int i=0; i<ppu_get_context()->fetched_entry_count; i++) {
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	e0c8      	b.n	80049d6 <fetch_sprite_pixels+0x1a6>
        int sp_x = (ppu_get_context()->fetched_entries[i].x - 8) + 
 8004844:	f7ff fe16 	bl	8004474 <ppu_get_context>
 8004848:	4602      	mov	r2, r0
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	795b      	ldrb	r3, [r3, #5]
 8004856:	f1a3 0408 	sub.w	r4, r3, #8
            ((lcd_get_context()->scroll_x % 8));
 800485a:	f7ff f825 	bl	80038a8 <lcd_get_context>
 800485e:	4603      	mov	r3, r0
 8004860:	78db      	ldrb	r3, [r3, #3]
 8004862:	f003 0307 	and.w	r3, r3, #7
        int sp_x = (ppu_get_context()->fetched_entries[i].x - 8) + 
 8004866:	4423      	add	r3, r4
 8004868:	61bb      	str	r3, [r7, #24]
        
        if (sp_x + 8 < ppu_get_context()->pfc.fifo_x) {
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f103 0408 	add.w	r4, r3, #8
 8004870:	f7ff fe00 	bl	8004474 <ppu_get_context>
 8004874:	4602      	mov	r2, r0
 8004876:	f242 03bf 	movw	r3, #8383	; 0x20bf
 800487a:	4413      	add	r3, r2
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	429c      	cmp	r4, r3
 8004880:	f2c0 80a1 	blt.w	80049c6 <fetch_sprite_pixels+0x196>
            //past pixel point already...
            continue;
        }

        int offset = ppu_get_context()->pfc.fifo_x - sp_x;
 8004884:	f7ff fdf6 	bl	8004474 <ppu_get_context>
 8004888:	4602      	mov	r2, r0
 800488a:	f242 03bf 	movw	r3, #8383	; 0x20bf
 800488e:	4413      	add	r3, r2
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]

        if (offset < 0 || offset > 7) {
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f2c0 8094 	blt.w	80049ca <fetch_sprite_pixels+0x19a>
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b07      	cmp	r3, #7
 80048a6:	f300 8090 	bgt.w	80049ca <fetch_sprite_pixels+0x19a>
            //out of bounds..
            continue;
        }

        bit = (7 - offset);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f1c3 0307 	rsb	r3, r3, #7
 80048b0:	60fb      	str	r3, [r7, #12]

        if (ppu_get_context()->fetched_entries[i].f_x_flip) {
 80048b2:	f7ff fddf 	bl	8004474 <ppu_get_context>
 80048b6:	4602      	mov	r2, r0
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f603 0346 	addw	r3, r3, #2118	; 0x846
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	79db      	ldrb	r3, [r3, #7]
 80048c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <fetch_sprite_pixels+0xa2>
            bit = offset;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	60fb      	str	r3, [r7, #12]
        }

        u8 hi = !!(ppu_get_context()->pfc.fetch_entry_data[i * 2] & (1 << bit));
 80048d2:	f7ff fdcf 	bl	8004474 <ppu_get_context>
 80048d6:	4602      	mov	r2, r0
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	441a      	add	r2, r3
 80048de:	f242 03b6 	movw	r3, #8374	; 0x20b6
 80048e2:	4413      	add	r3, r2
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	fa42 f303 	asr.w	r3, r2, r3
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bf14      	ite	ne
 80048f6:	2301      	movne	r3, #1
 80048f8:	2300      	moveq	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	74fb      	strb	r3, [r7, #19]
        u8 lo = !!(ppu_get_context()->pfc.fetch_entry_data[(i * 2) + 1] & (1 << bit)) << 1;
 80048fe:	f7ff fdb9 	bl	8004474 <ppu_get_context>
 8004902:	4602      	mov	r2, r0
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	3301      	adds	r3, #1
 800490a:	441a      	add	r2, r3
 800490c:	f242 03b6 	movw	r3, #8374	; 0x20b6
 8004910:	4413      	add	r3, r2
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	fa42 f303 	asr.w	r3, r2, r3
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <fetch_sprite_pixels+0xf8>
 8004924:	2302      	movs	r3, #2
 8004926:	e000      	b.n	800492a <fetch_sprite_pixels+0xfa>
 8004928:	2300      	movs	r3, #0
 800492a:	74bb      	strb	r3, [r7, #18]

        bool bg_priority = ppu_get_context()->fetched_entries[i].f_bgp;
 800492c:	f7ff fda2 	bl	8004474 <ppu_get_context>
 8004930:	4602      	mov	r2, r0
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	79db      	ldrb	r3, [r3, #7]
 800493e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	bf14      	ite	ne
 8004948:	2301      	movne	r3, #1
 800494a:	2300      	moveq	r3, #0
 800494c:	747b      	strb	r3, [r7, #17]

        if (!(hi|lo)) {
 800494e:	7cfa      	ldrb	r2, [r7, #19]
 8004950:	7cbb      	ldrb	r3, [r7, #18]
 8004952:	4313      	orrs	r3, r2
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d039      	beq.n	80049ce <fetch_sprite_pixels+0x19e>
            //transparent
            continue;
        }

        if (!bg_priority || bg_color == 0) {
 800495a:	7c7b      	ldrb	r3, [r7, #17]
 800495c:	f083 0301 	eor.w	r3, r3, #1
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d102      	bne.n	800496c <fetch_sprite_pixels+0x13c>
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d131      	bne.n	80049d0 <fetch_sprite_pixels+0x1a0>
            color = (ppu_get_context()->fetched_entries[i].f_pn) ? 
 800496c:	f7ff fd82 	bl	8004474 <ppu_get_context>
 8004970:	4602      	mov	r2, r0
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	79db      	ldrb	r3, [r3, #7]
 800497e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004982:	b2db      	uxtb	r3, r3
                lcd_get_context()->sp2_colors[hi|lo] : lcd_get_context()->sp1_colors[hi|lo];
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00b      	beq.n	80049a0 <fetch_sprite_pixels+0x170>
 8004988:	f7fe ff8e 	bl	80038a8 <lcd_get_context>
 800498c:	4601      	mov	r1, r0
 800498e:	7cfa      	ldrb	r2, [r7, #19]
 8004990:	7cbb      	ldrb	r3, [r7, #18]
 8004992:	4313      	orrs	r3, r2
 8004994:	b2db      	uxtb	r3, r3
 8004996:	330a      	adds	r3, #10
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	e00a      	b.n	80049b6 <fetch_sprite_pixels+0x186>
 80049a0:	f7fe ff82 	bl	80038a8 <lcd_get_context>
 80049a4:	4601      	mov	r1, r0
 80049a6:	7cfa      	ldrb	r2, [r7, #19]
 80049a8:	7cbb      	ldrb	r3, [r7, #18]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	3306      	adds	r3, #6
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	685b      	ldr	r3, [r3, #4]
            color = (ppu_get_context()->fetched_entries[i].f_pn) ? 
 80049b6:	60bb      	str	r3, [r7, #8]

            if (hi|lo) {
 80049b8:	7cfa      	ldrb	r2, [r7, #19]
 80049ba:	7cbb      	ldrb	r3, [r7, #18]
 80049bc:	4313      	orrs	r3, r2
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d115      	bne.n	80049f0 <fetch_sprite_pixels+0x1c0>
 80049c4:	e004      	b.n	80049d0 <fetch_sprite_pixels+0x1a0>
            continue;
 80049c6:	bf00      	nop
 80049c8:	e002      	b.n	80049d0 <fetch_sprite_pixels+0x1a0>
            continue;
 80049ca:	bf00      	nop
 80049cc:	e000      	b.n	80049d0 <fetch_sprite_pixels+0x1a0>
            continue;
 80049ce:	bf00      	nop
    for (int i=0; i<ppu_get_context()->fetched_entry_count; i++) {
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	3301      	adds	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
 80049d6:	f7ff fd4d 	bl	8004474 <ppu_get_context>
 80049da:	4602      	mov	r2, r0
 80049dc:	f242 1318 	movw	r3, #8472	; 0x2118
 80049e0:	4413      	add	r3, r2
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4293      	cmp	r3, r2
 80049ea:	f6ff af2b 	blt.w	8004844 <fetch_sprite_pixels+0x14>
 80049ee:	e000      	b.n	80049f2 <fetch_sprite_pixels+0x1c2>
                break;
 80049f0:	bf00      	nop
            }
        }
    }

    return color;
 80049f2:	68bb      	ldr	r3, [r7, #8]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3724      	adds	r7, #36	; 0x24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd90      	pop	{r4, r7, pc}

080049fc <pipeline_fifo_add>:

bool pipeline_fifo_add() {
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
    if (ppu_get_context()->pfc.pixel_fifo.size > 8) {
 8004a02:	f7ff fd37 	bl	8004474 <ppu_get_context>
 8004a06:	4602      	mov	r2, r0
 8004a08:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8004a0c:	4413      	add	r3, r2
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d901      	bls.n	8004a18 <pipeline_fifo_add+0x1c>
        //fifo is full!
        return false;
 8004a14:	2300      	movs	r3, #0
 8004a16:	e084      	b.n	8004b22 <pipeline_fifo_add+0x126>
    }

    int x = ppu_get_context()->pfc.fetch_x - (8 - (lcd_get_context()->scroll_x % 8));
 8004a18:	f7ff fd2c 	bl	8004474 <ppu_get_context>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004a22:	4413      	add	r3, r2
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	461c      	mov	r4, r3
 8004a28:	f7fe ff3e 	bl	80038a8 <lcd_get_context>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	78db      	ldrb	r3, [r3, #3]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	f1c3 0308 	rsb	r3, r3, #8
 8004a38:	1ae3      	subs	r3, r4, r3
 8004a3a:	60fb      	str	r3, [r7, #12]

    for (int i=0; i<8; i++) {
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e06b      	b.n	8004b1a <pipeline_fifo_add+0x11e>
        int bit = 7 - i;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f1c3 0307 	rsb	r3, r3, #7
 8004a48:	60bb      	str	r3, [r7, #8]
        u8 hi = !!(ppu_get_context()->pfc.bgw_fetch_data[1] & (1 << bit));
 8004a4a:	f7ff fd13 	bl	8004474 <ppu_get_context>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	f242 03b4 	movw	r3, #8372	; 0x20b4
 8004a54:	4413      	add	r3, r2
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	fa42 f303 	asr.w	r3, r2, r3
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bf14      	ite	ne
 8004a68:	2301      	movne	r3, #1
 8004a6a:	2300      	moveq	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	71fb      	strb	r3, [r7, #7]
        u8 lo = !!(ppu_get_context()->pfc.bgw_fetch_data[2] & (1 << bit)) << 1;
 8004a70:	f7ff fd00 	bl	8004474 <ppu_get_context>
 8004a74:	4602      	mov	r2, r0
 8004a76:	f242 03b5 	movw	r3, #8373	; 0x20b5
 8004a7a:	4413      	add	r3, r2
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	fa42 f303 	asr.w	r3, r2, r3
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <pipeline_fifo_add+0x96>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e000      	b.n	8004a94 <pipeline_fifo_add+0x98>
 8004a92:	2300      	movs	r3, #0
 8004a94:	71bb      	strb	r3, [r7, #6]
        u32 color = lcd_get_context()->bg_colors[hi | lo];
 8004a96:	f7fe ff07 	bl	80038a8 <lcd_get_context>
 8004a9a:	4601      	mov	r1, r0
 8004a9c:	79fa      	ldrb	r2, [r7, #7]
 8004a9e:	79bb      	ldrb	r3, [r7, #6]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	613b      	str	r3, [r7, #16]

        if (!LCDC_BGW_ENABLE) {
 8004aae:	f7fe fefb 	bl	80038a8 <lcd_get_context>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d104      	bne.n	8004ac8 <pipeline_fifo_add+0xcc>
            color = lcd_get_context()->bg_colors[0];
 8004abe:	f7fe fef3 	bl	80038a8 <lcd_get_context>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	613b      	str	r3, [r7, #16]
        }

        if (LCDC_OBJ_ENABLE) {
 8004ac8:	f7fe feee 	bl	80038a8 <lcd_get_context>
 8004acc:	4603      	mov	r3, r0
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d009      	beq.n	8004aec <pipeline_fifo_add+0xf0>
            color = fetch_sprite_pixels(bit, color, hi | lo);
 8004ad8:	79fa      	ldrb	r2, [r7, #7]
 8004ada:	79bb      	ldrb	r3, [r7, #6]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	6939      	ldr	r1, [r7, #16]
 8004ae4:	68b8      	ldr	r0, [r7, #8]
 8004ae6:	f7ff fea3 	bl	8004830 <fetch_sprite_pixels>
 8004aea:	6138      	str	r0, [r7, #16]
        }

        if (x >= 0) {
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	db10      	blt.n	8004b14 <pipeline_fifo_add+0x118>
            pixel_fifo_push(color);
 8004af2:	6938      	ldr	r0, [r7, #16]
 8004af4:	f7ff fe0a 	bl	800470c <pixel_fifo_push>
            ppu_get_context()->pfc.fifo_x++;
 8004af8:	f7ff fcbc 	bl	8004474 <ppu_get_context>
 8004afc:	4602      	mov	r2, r0
 8004afe:	f242 03bf 	movw	r3, #8383	; 0x20bf
 8004b02:	4413      	add	r3, r2
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	3301      	adds	r3, #1
 8004b08:	b2d9      	uxtb	r1, r3
 8004b0a:	f242 03bf 	movw	r3, #8383	; 0x20bf
 8004b0e:	4413      	add	r3, r2
 8004b10:	460a      	mov	r2, r1
 8004b12:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<8; i++) {
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	3301      	adds	r3, #1
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b07      	cmp	r3, #7
 8004b1e:	dd90      	ble.n	8004a42 <pipeline_fifo_add+0x46>
        }
    }

    return true;
 8004b20:	2301      	movs	r3, #1
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd90      	pop	{r4, r7, pc}

08004b2a <pipeline_load_sprite_tile>:

void pipeline_load_sprite_tile() {
 8004b2a:	b590      	push	{r4, r7, lr}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
    oam_line_entry *le = ppu_get_context()->line_sprites;
 8004b30:	f7ff fca0 	bl	8004474 <ppu_get_context>
 8004b34:	4602      	mov	r2, r0
 8004b36:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004b3a:	4413      	add	r3, r2
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	607b      	str	r3, [r7, #4]

    while(le) {
 8004b40:	e060      	b.n	8004c04 <pipeline_load_sprite_tile+0xda>
        int sp_x = (le->entry.x - 8) + (lcd_get_context()->scroll_x % 8);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	785b      	ldrb	r3, [r3, #1]
 8004b46:	f1a3 0408 	sub.w	r4, r3, #8
 8004b4a:	f7fe fead 	bl	80038a8 <lcd_get_context>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	78db      	ldrb	r3, [r3, #3]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	4423      	add	r3, r4
 8004b58:	603b      	str	r3, [r7, #0]

        if ((sp_x >= ppu_get_context()->pfc.fetch_x && sp_x < ppu_get_context()->pfc.fetch_x + 8) ||
 8004b5a:	f7ff fc8b 	bl	8004474 <ppu_get_context>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004b64:	4413      	add	r3, r2
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	db0a      	blt.n	8004b86 <pipeline_load_sprite_tile+0x5c>
 8004b70:	f7ff fc80 	bl	8004474 <ppu_get_context>
 8004b74:	4602      	mov	r2, r0
 8004b76:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	3307      	adds	r3, #7
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	dd16      	ble.n	8004bb4 <pipeline_load_sprite_tile+0x8a>
            ((sp_x + 8) >= ppu_get_context()->pfc.fetch_x && (sp_x + 8) < ppu_get_context()->pfc.fetch_x + 8)) {
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f103 0408 	add.w	r4, r3, #8
 8004b8c:	f7ff fc72 	bl	8004474 <ppu_get_context>
 8004b90:	4602      	mov	r2, r0
 8004b92:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004b96:	4413      	add	r3, r2
 8004b98:	781b      	ldrb	r3, [r3, #0]
        if ((sp_x >= ppu_get_context()->pfc.fetch_x && sp_x < ppu_get_context()->pfc.fetch_x + 8) ||
 8004b9a:	429c      	cmp	r4, r3
 8004b9c:	db23      	blt.n	8004be6 <pipeline_load_sprite_tile+0xbc>
            ((sp_x + 8) >= ppu_get_context()->pfc.fetch_x && (sp_x + 8) < ppu_get_context()->pfc.fetch_x + 8)) {
 8004b9e:	f7ff fc69 	bl	8004474 <ppu_get_context>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004ba8:	4413      	add	r3, r2
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	da18      	bge.n	8004be6 <pipeline_load_sprite_tile+0xbc>
            //need to add entry
            ppu_get_context()->fetched_entries[ppu_get_context()->fetched_entry_count++] = le->entry;
 8004bb4:	f7ff fc5e 	bl	8004474 <ppu_get_context>
 8004bb8:	4604      	mov	r4, r0
 8004bba:	f7ff fc5b 	bl	8004474 <ppu_get_context>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	f242 1318 	movw	r3, #8472	; 0x2118
 8004bc4:	4413      	add	r3, r2
 8004bc6:	7819      	ldrb	r1, [r3, #0]
 8004bc8:	1c4b      	adds	r3, r1, #1
 8004bca:	b2d8      	uxtb	r0, r3
 8004bcc:	f242 1318 	movw	r3, #8472	; 0x2118
 8004bd0:	4413      	add	r3, r2
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4423      	add	r3, r4
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	605a      	str	r2, [r3, #4]
        }

        le = le->next;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	607b      	str	r3, [r7, #4]

        if (!le || ppu_get_context()->fetched_entry_count >= 3) {
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <pipeline_load_sprite_tile+0xe0>
 8004bf2:	f7ff fc3f 	bl	8004474 <ppu_get_context>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	f242 1318 	movw	r3, #8472	; 0x2118
 8004bfc:	4413      	add	r3, r2
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d802      	bhi.n	8004c0a <pipeline_load_sprite_tile+0xe0>
    while(le) {
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d19b      	bne.n	8004b42 <pipeline_load_sprite_tile+0x18>
            //max checking 3 sprites on pixels
            break;
        }
    }
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd90      	pop	{r4, r7, pc}

08004c12 <pipeline_load_sprite_data>:

void pipeline_load_sprite_data(u8 offset) {
 8004c12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c14:	b087      	sub	sp, #28
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	4603      	mov	r3, r0
 8004c1a:	71fb      	strb	r3, [r7, #7]
    int cur_y = lcd_get_context()->ly;
 8004c1c:	f7fe fe44 	bl	80038a8 <lcd_get_context>
 8004c20:	4603      	mov	r3, r0
 8004c22:	791b      	ldrb	r3, [r3, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
    u8 sprite_height = LCDC_OBJ_HEIGHT;
 8004c26:	f7fe fe3f 	bl	80038a8 <lcd_get_context>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <pipeline_load_sprite_data+0x28>
 8004c36:	2310      	movs	r3, #16
 8004c38:	e000      	b.n	8004c3c <pipeline_load_sprite_data+0x2a>
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	72fb      	strb	r3, [r7, #11]

    for (int i=0; i<ppu_get_context()->fetched_entry_count; i++) {
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	e059      	b.n	8004cf8 <pipeline_load_sprite_data+0xe6>
        u8 ty = ((cur_y + 16) - ppu_get_context()->fetched_entries[i].y) * 2;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f103 0410 	add.w	r4, r3, #16
 8004c4a:	f7ff fc13 	bl	8004474 <ppu_get_context>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	791b      	ldrb	r3, [r3, #4]
 8004c5c:	1ae3      	subs	r3, r4, r3
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	74fb      	strb	r3, [r7, #19]

        if (ppu_get_context()->fetched_entries[i].f_y_flip) {
 8004c64:	f7ff fc06 	bl	8004474 <ppu_get_context>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	79db      	ldrb	r3, [r3, #7]
 8004c76:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <pipeline_load_sprite_data+0x7e>
            //flipped upside down...
            ty = ((sprite_height * 2) - 2) - ty;
 8004c80:	7afb      	ldrb	r3, [r7, #11]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	7cfb      	ldrb	r3, [r7, #19]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	74fb      	strb	r3, [r7, #19]
        }

        u8 tile_index = ppu_get_context()->fetched_entries[i].tile;
 8004c90:	f7ff fbf0 	bl	8004474 <ppu_get_context>
 8004c94:	4602      	mov	r2, r0
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	799b      	ldrb	r3, [r3, #6]
 8004ca2:	74bb      	strb	r3, [r7, #18]

        if (sprite_height == 16) {
 8004ca4:	7afb      	ldrb	r3, [r7, #11]
 8004ca6:	2b10      	cmp	r3, #16
 8004ca8:	d103      	bne.n	8004cb2 <pipeline_load_sprite_data+0xa0>
            tile_index &= ~(1); //remove last bit...
 8004caa:	7cbb      	ldrb	r3, [r7, #18]
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	74bb      	strb	r3, [r7, #18]
        }

        ppu_get_context()->pfc.fetch_entry_data[(i * 2) + offset] = 
            bus_read(0x8000 + (tile_index * 16) + ty + offset);
 8004cb2:	7cbb      	ldrb	r3, [r7, #18]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	7cfb      	ldrb	r3, [r7, #19]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	4413      	add	r3, r2
 8004ccc:	b29e      	uxth	r6, r3
        ppu_get_context()->pfc.fetch_entry_data[(i * 2) + offset] = 
 8004cce:	f7ff fbd1 	bl	8004474 <ppu_get_context>
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	005a      	lsls	r2, r3, #1
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	18d4      	adds	r4, r2, r3
            bus_read(0x8000 + (tile_index * 16) + ty + offset);
 8004cdc:	4630      	mov	r0, r6
 8004cde:	f7fb fc7b 	bl	80005d8 <bus_read>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	4619      	mov	r1, r3
        ppu_get_context()->pfc.fetch_entry_data[(i * 2) + offset] = 
 8004ce6:	192a      	adds	r2, r5, r4
 8004ce8:	f242 03b6 	movw	r3, #8374	; 0x20b6
 8004cec:	4413      	add	r3, r2
 8004cee:	460a      	mov	r2, r1
 8004cf0:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<ppu_get_context()->fetched_entry_count; i++) {
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	f7ff fbbc 	bl	8004474 <ppu_get_context>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	f242 1318 	movw	r3, #8472	; 0x2118
 8004d02:	4413      	add	r3, r2
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	db9a      	blt.n	8004c44 <pipeline_load_sprite_data+0x32>
    }
}
 8004d0e:	bf00      	nop
 8004d10:	bf00      	nop
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d18 <pipeline_load_window_tile>:

void pipeline_load_window_tile() {
 8004d18:	b5b0      	push	{r4, r5, r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
    if (!window_visible()) {
 8004d1e:	f7ff fcd1 	bl	80046c4 <window_visible>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f083 0301 	eor.w	r3, r3, #1
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f040 8088 	bne.w	8004e40 <pipeline_load_window_tile+0x128>
        return;
    }
    
    u8 window_y = lcd_get_context()->win_y;
 8004d30:	f7fe fdba 	bl	80038a8 <lcd_get_context>
 8004d34:	4603      	mov	r3, r0
 8004d36:	7a9b      	ldrb	r3, [r3, #10]
 8004d38:	71fb      	strb	r3, [r7, #7]

    if (ppu_get_context()->pfc.fetch_x + 7 >= lcd_get_context()->win_x &&
 8004d3a:	f7ff fb9b 	bl	8004474 <ppu_get_context>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004d44:	4413      	add	r3, r2
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	1ddc      	adds	r4, r3, #7
 8004d4a:	f7fe fdad 	bl	80038a8 <lcd_get_context>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	7adb      	ldrb	r3, [r3, #11]
 8004d52:	429c      	cmp	r4, r3
 8004d54:	db75      	blt.n	8004e42 <pipeline_load_window_tile+0x12a>
            ppu_get_context()->pfc.fetch_x + 7 < lcd_get_context()->win_x + YRES + 14) {
 8004d56:	f7fe fda7 	bl	80038a8 <lcd_get_context>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	7adb      	ldrb	r3, [r3, #11]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	2390      	movs	r3, #144	; 0x90
 8004d62:	4413      	add	r3, r2
 8004d64:	1d9c      	adds	r4, r3, #6
 8004d66:	f7ff fb85 	bl	8004474 <ppu_get_context>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004d70:	4413      	add	r3, r2
 8004d72:	781b      	ldrb	r3, [r3, #0]
    if (ppu_get_context()->pfc.fetch_x + 7 >= lcd_get_context()->win_x &&
 8004d74:	429c      	cmp	r4, r3
 8004d76:	db64      	blt.n	8004e42 <pipeline_load_window_tile+0x12a>
        if (lcd_get_context()->ly >= window_y && lcd_get_context()->ly < window_y + XRES) {
 8004d78:	f7fe fd96 	bl	80038a8 <lcd_get_context>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	791b      	ldrb	r3, [r3, #4]
 8004d80:	79fa      	ldrb	r2, [r7, #7]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d85d      	bhi.n	8004e42 <pipeline_load_window_tile+0x12a>
 8004d86:	f7fe fd8f 	bl	80038a8 <lcd_get_context>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	791b      	ldrb	r3, [r3, #4]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	22a0      	movs	r2, #160	; 0xa0
 8004d94:	4413      	add	r3, r2
 8004d96:	4299      	cmp	r1, r3
 8004d98:	da53      	bge.n	8004e42 <pipeline_load_window_tile+0x12a>
            u8 w_tile_y = ppu_get_context()->window_line / 8;
 8004d9a:	f7ff fb6b 	bl	8004474 <ppu_get_context>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	f242 1328 	movw	r3, #8488	; 0x2128
 8004da4:	4413      	add	r3, r2
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	08db      	lsrs	r3, r3, #3
 8004daa:	71bb      	strb	r3, [r7, #6]

            ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_WIN_MAP_AREA + 
 8004dac:	f7fe fd7c 	bl	80038a8 <lcd_get_context>
 8004db0:	4603      	mov	r3, r0
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <pipeline_load_window_tile+0xaa>
 8004dbc:	f44f 441c 	mov.w	r4, #39936	; 0x9c00
 8004dc0:	e001      	b.n	8004dc6 <pipeline_load_window_tile+0xae>
 8004dc2:	f44f 4418 	mov.w	r4, #38912	; 0x9800
                ((ppu_get_context()->pfc.fetch_x + 7 - lcd_get_context()->win_x) / 8) +
 8004dc6:	f7ff fb55 	bl	8004474 <ppu_get_context>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	1ddd      	adds	r5, r3, #7
 8004dd6:	f7fe fd67 	bl	80038a8 <lcd_get_context>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	7adb      	ldrb	r3, [r3, #11]
 8004dde:	1aeb      	subs	r3, r5, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da00      	bge.n	8004de6 <pipeline_load_window_tile+0xce>
 8004de4:	3307      	adds	r3, #7
 8004de6:	10db      	asrs	r3, r3, #3
            ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_WIN_MAP_AREA + 
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	4423      	add	r3, r4
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	79bb      	ldrb	r3, [r7, #6]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	015b      	lsls	r3, r3, #5
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	4413      	add	r3, r2
 8004df8:	b29d      	uxth	r5, r3
 8004dfa:	f7ff fb3b 	bl	8004474 <ppu_get_context>
 8004dfe:	4604      	mov	r4, r0
 8004e00:	4628      	mov	r0, r5
 8004e02:	f7fb fbe9 	bl	80005d8 <bus_read>
 8004e06:	4603      	mov	r3, r0
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004e0e:	4423      	add	r3, r4
 8004e10:	701a      	strb	r2, [r3, #0]
                (w_tile_y * 32));

            if (LCDC_BGW_DATA_AREA == 0x8800) {
 8004e12:	f7fe fd49 	bl	80038a8 <lcd_get_context>
 8004e16:	4603      	mov	r3, r0
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10f      	bne.n	8004e42 <pipeline_load_window_tile+0x12a>
                ppu_get_context()->pfc.bgw_fetch_data[0] += 128;
 8004e22:	f7ff fb27 	bl	8004474 <ppu_get_context>
 8004e26:	4602      	mov	r2, r0
 8004e28:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	3b80      	subs	r3, #128	; 0x80
 8004e32:	b2d9      	uxtb	r1, r3
 8004e34:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004e38:	4413      	add	r3, r2
 8004e3a:	460a      	mov	r2, r1
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	e000      	b.n	8004e42 <pipeline_load_window_tile+0x12a>
        return;
 8004e40:	bf00      	nop
            }
        }
    }
}
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bdb0      	pop	{r4, r5, r7, pc}

08004e48 <pipeline_fetch>:

void pipeline_fetch() {
 8004e48:	b5b0      	push	{r4, r5, r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
    switch(ppu_get_context()->pfc.cur_fetch_state) {
 8004e4c:	f7ff fb12 	bl	8004474 <ppu_get_context>
 8004e50:	4602      	mov	r2, r0
 8004e52:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004e56:	4413      	add	r3, r2
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	f200 8122 	bhi.w	80050a4 <pipeline_fetch+0x25c>
 8004e60:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <pipeline_fetch+0x20>)
 8004e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e66:	bf00      	nop
 8004e68:	08004e7d 	.word	0x08004e7d
 8004e6c:	08004f87 	.word	0x08004f87
 8004e70:	08004ffd 	.word	0x08004ffd
 8004e74:	08005077 	.word	0x08005077
 8004e78:	08005089 	.word	0x08005089
        case FS_TILE: {
            ppu_get_context()->fetched_entry_count = 0;
 8004e7c:	f7ff fafa 	bl	8004474 <ppu_get_context>
 8004e80:	4602      	mov	r2, r0
 8004e82:	f242 1318 	movw	r3, #8472	; 0x2118
 8004e86:	4413      	add	r3, r2
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]

            if (LCDC_BGW_ENABLE) {
 8004e8c:	f7fe fd0c 	bl	80038a8 <lcd_get_context>
 8004e90:	4603      	mov	r3, r0
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d04a      	beq.n	8004f32 <pipeline_fetch+0xea>
                ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_BG_MAP_AREA + 
 8004e9c:	f7fe fd04 	bl	80038a8 <lcd_get_context>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <pipeline_fetch+0x6a>
 8004eac:	f44f 441c 	mov.w	r4, #39936	; 0x9c00
 8004eb0:	e001      	b.n	8004eb6 <pipeline_fetch+0x6e>
 8004eb2:	f44f 4418 	mov.w	r4, #38912	; 0x9800
                    (ppu_get_context()->pfc.map_x / 8) + 
 8004eb6:	f7ff fadd 	bl	8004474 <ppu_get_context>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	f242 03bd 	movw	r3, #8381	; 0x20bd
 8004ec0:	4413      	add	r3, r2
 8004ec2:	781b      	ldrb	r3, [r3, #0]
                ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_BG_MAP_AREA + 
 8004ec4:	08db      	lsrs	r3, r3, #3
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4423      	add	r3, r4
 8004ecc:	b29c      	uxth	r4, r3
                    (((ppu_get_context()->pfc.map_y / 8)) * 32));
 8004ece:	f7ff fad1 	bl	8004474 <ppu_get_context>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	f242 03bc 	movw	r3, #8380	; 0x20bc
 8004ed8:	4413      	add	r3, r2
 8004eda:	781b      	ldrb	r3, [r3, #0]
                ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_BG_MAP_AREA + 
 8004edc:	08db      	lsrs	r3, r3, #3
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	015b      	lsls	r3, r3, #5
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	4423      	add	r3, r4
 8004ee8:	b29d      	uxth	r5, r3
 8004eea:	f7ff fac3 	bl	8004474 <ppu_get_context>
 8004eee:	4604      	mov	r4, r0
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f7fb fb71 	bl	80005d8 <bus_read>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004efe:	4423      	add	r3, r4
 8004f00:	701a      	strb	r2, [r3, #0]
            
                if (LCDC_BGW_DATA_AREA == 0x8800) {
 8004f02:	f7fe fcd1 	bl	80038a8 <lcd_get_context>
 8004f06:	4603      	mov	r3, r0
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10d      	bne.n	8004f2e <pipeline_fetch+0xe6>
                    ppu_get_context()->pfc.bgw_fetch_data[0] += 128;
 8004f12:	f7ff faaf 	bl	8004474 <ppu_get_context>
 8004f16:	4602      	mov	r2, r0
 8004f18:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	3b80      	subs	r3, #128	; 0x80
 8004f22:	b2d9      	uxtb	r1, r3
 8004f24:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004f28:	4413      	add	r3, r2
 8004f2a:	460a      	mov	r2, r1
 8004f2c:	701a      	strb	r2, [r3, #0]
                }

                pipeline_load_window_tile();
 8004f2e:	f7ff fef3 	bl	8004d18 <pipeline_load_window_tile>
            }

            if (LCDC_OBJ_ENABLE && ppu_get_context()->line_sprites) {
 8004f32:	f7fe fcb9 	bl	80038a8 <lcd_get_context>
 8004f36:	4603      	mov	r3, r0
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <pipeline_fetch+0x110>
 8004f42:	f7ff fa97 	bl	8004474 <ppu_get_context>
 8004f46:	4602      	mov	r2, r0
 8004f48:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004f4c:	4413      	add	r3, r2
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <pipeline_fetch+0x110>
                pipeline_load_sprite_tile();
 8004f54:	f7ff fde9 	bl	8004b2a <pipeline_load_sprite_tile>
            }

            ppu_get_context()->pfc.cur_fetch_state = FS_DATA0;
 8004f58:	f7ff fa8c 	bl	8004474 <ppu_get_context>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004f62:	4413      	add	r3, r2
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
            ppu_get_context()->pfc.fetch_x += 8;
 8004f68:	f7ff fa84 	bl	8004474 <ppu_get_context>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004f72:	4413      	add	r3, r2
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	3308      	adds	r3, #8
 8004f78:	b2d9      	uxtb	r1, r3
 8004f7a:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004f7e:	4413      	add	r3, r2
 8004f80:	460a      	mov	r2, r1
 8004f82:	701a      	strb	r2, [r3, #0]
        } break;
 8004f84:	e08e      	b.n	80050a4 <pipeline_fetch+0x25c>

        case FS_DATA0: {
            ppu_get_context()->pfc.bgw_fetch_data[1] = bus_read(LCDC_BGW_DATA_AREA +
 8004f86:	f7fe fc8f 	bl	80038a8 <lcd_get_context>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <pipeline_fetch+0x154>
 8004f96:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8004f9a:	e001      	b.n	8004fa0 <pipeline_fetch+0x158>
 8004f9c:	f44f 4408 	mov.w	r4, #34816	; 0x8800
                (ppu_get_context()->pfc.bgw_fetch_data[0] * 16) + 
 8004fa0:	f7ff fa68 	bl	8004474 <ppu_get_context>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004faa:	4413      	add	r3, r2
 8004fac:	781b      	ldrb	r3, [r3, #0]
            ppu_get_context()->pfc.bgw_fetch_data[1] = bus_read(LCDC_BGW_DATA_AREA +
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	4423      	add	r3, r4
 8004fb6:	b29c      	uxth	r4, r3
                ppu_get_context()->pfc.tile_y);
 8004fb8:	f7ff fa5c 	bl	8004474 <ppu_get_context>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	f242 03be 	movw	r3, #8382	; 0x20be
 8004fc2:	4413      	add	r3, r2
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
            ppu_get_context()->pfc.bgw_fetch_data[1] = bus_read(LCDC_BGW_DATA_AREA +
 8004fc8:	4423      	add	r3, r4
 8004fca:	b29d      	uxth	r5, r3
 8004fcc:	f7ff fa52 	bl	8004474 <ppu_get_context>
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f7fb fb00 	bl	80005d8 <bus_read>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f242 03b4 	movw	r3, #8372	; 0x20b4
 8004fe0:	4423      	add	r3, r4
 8004fe2:	701a      	strb	r2, [r3, #0]

            pipeline_load_sprite_data(0);
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f7ff fe14 	bl	8004c12 <pipeline_load_sprite_data>

            ppu_get_context()->pfc.cur_fetch_state = FS_DATA1;
 8004fea:	f7ff fa43 	bl	8004474 <ppu_get_context>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004ff4:	4413      	add	r3, r2
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	701a      	strb	r2, [r3, #0]
        } break;
 8004ffa:	e053      	b.n	80050a4 <pipeline_fetch+0x25c>

        case FS_DATA1: {
            ppu_get_context()->pfc.bgw_fetch_data[2] = bus_read(LCDC_BGW_DATA_AREA +
 8004ffc:	f7fe fc54 	bl	80038a8 <lcd_get_context>
 8005000:	4603      	mov	r3, r0
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <pipeline_fetch+0x1ca>
 800500c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8005010:	e001      	b.n	8005016 <pipeline_fetch+0x1ce>
 8005012:	f44f 4408 	mov.w	r4, #34816	; 0x8800
                (ppu_get_context()->pfc.bgw_fetch_data[0] * 16) + 
 8005016:	f7ff fa2d 	bl	8004474 <ppu_get_context>
 800501a:	4602      	mov	r2, r0
 800501c:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8005020:	4413      	add	r3, r2
 8005022:	781b      	ldrb	r3, [r3, #0]
            ppu_get_context()->pfc.bgw_fetch_data[2] = bus_read(LCDC_BGW_DATA_AREA +
 8005024:	b29b      	uxth	r3, r3
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	b29b      	uxth	r3, r3
 800502a:	4423      	add	r3, r4
 800502c:	b29c      	uxth	r4, r3
                ppu_get_context()->pfc.tile_y + 1);
 800502e:	f7ff fa21 	bl	8004474 <ppu_get_context>
 8005032:	4602      	mov	r2, r0
 8005034:	f242 03be 	movw	r3, #8382	; 0x20be
 8005038:	4413      	add	r3, r2
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
                (ppu_get_context()->pfc.bgw_fetch_data[0] * 16) + 
 800503e:	4423      	add	r3, r4
 8005040:	b29b      	uxth	r3, r3
            ppu_get_context()->pfc.bgw_fetch_data[2] = bus_read(LCDC_BGW_DATA_AREA +
 8005042:	3301      	adds	r3, #1
 8005044:	b29d      	uxth	r5, r3
 8005046:	f7ff fa15 	bl	8004474 <ppu_get_context>
 800504a:	4604      	mov	r4, r0
 800504c:	4628      	mov	r0, r5
 800504e:	f7fb fac3 	bl	80005d8 <bus_read>
 8005052:	4603      	mov	r3, r0
 8005054:	461a      	mov	r2, r3
 8005056:	f242 03b5 	movw	r3, #8373	; 0x20b5
 800505a:	4423      	add	r3, r4
 800505c:	701a      	strb	r2, [r3, #0]

            pipeline_load_sprite_data(1);
 800505e:	2001      	movs	r0, #1
 8005060:	f7ff fdd7 	bl	8004c12 <pipeline_load_sprite_data>

            ppu_get_context()->pfc.cur_fetch_state = FS_IDLE;
 8005064:	f7ff fa06 	bl	8004474 <ppu_get_context>
 8005068:	4602      	mov	r2, r0
 800506a:	f242 03a0 	movw	r3, #8352	; 0x20a0
 800506e:	4413      	add	r3, r2
 8005070:	2203      	movs	r2, #3
 8005072:	701a      	strb	r2, [r3, #0]

        } break;
 8005074:	e016      	b.n	80050a4 <pipeline_fetch+0x25c>

        case FS_IDLE: {
            ppu_get_context()->pfc.cur_fetch_state = FS_PUSH;
 8005076:	f7ff f9fd 	bl	8004474 <ppu_get_context>
 800507a:	4602      	mov	r2, r0
 800507c:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8005080:	4413      	add	r3, r2
 8005082:	2204      	movs	r2, #4
 8005084:	701a      	strb	r2, [r3, #0]
        } break;
 8005086:	e00d      	b.n	80050a4 <pipeline_fetch+0x25c>

        case FS_PUSH: {
            if (pipeline_fifo_add()) {
 8005088:	f7ff fcb8 	bl	80049fc <pipeline_fifo_add>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <pipeline_fetch+0x25a>
                ppu_get_context()->pfc.cur_fetch_state = FS_TILE;
 8005092:	f7ff f9ef 	bl	8004474 <ppu_get_context>
 8005096:	4602      	mov	r2, r0
 8005098:	f242 03a0 	movw	r3, #8352	; 0x20a0
 800509c:	4413      	add	r3, r2
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
            }

        } break;
 80050a2:	bf00      	nop

    }
}
 80050a4:	bf00      	nop
 80050a6:	bdb0      	pop	{r4, r5, r7, pc}

080050a8 <pipeline_push_pixel>:

void pipeline_push_pixel() {
 80050a8:	b5b0      	push	{r4, r5, r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
    if (ppu_get_context()->pfc.pixel_fifo.size > 8) {
 80050ae:	f7ff f9e1 	bl	8004474 <ppu_get_context>
 80050b2:	4602      	mov	r2, r0
 80050b4:	f242 03ac 	movw	r3, #8364	; 0x20ac
 80050b8:	4413      	add	r3, r2
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d94a      	bls.n	8005156 <pipeline_push_pixel+0xae>
        u32 pixel_data = pixel_fifo_pop();
 80050c0:	f7ff fb72 	bl	80047a8 <pixel_fifo_pop>
 80050c4:	6078      	str	r0, [r7, #4]

        if (ppu_get_context()->pfc.line_x >= (lcd_get_context()->scroll_x % 8)) {
 80050c6:	f7ff f9d5 	bl	8004474 <ppu_get_context>
 80050ca:	4602      	mov	r2, r0
 80050cc:	f242 03b0 	movw	r3, #8368	; 0x20b0
 80050d0:	4413      	add	r3, r2
 80050d2:	781c      	ldrb	r4, [r3, #0]
 80050d4:	f7fe fbe8 	bl	80038a8 <lcd_get_context>
 80050d8:	4603      	mov	r3, r0
 80050da:	78db      	ldrb	r3, [r3, #3]
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	429c      	cmp	r4, r3
 80050e4:	d329      	bcc.n	800513a <pipeline_push_pixel+0x92>
            ppu_get_context()->video_buffer[ppu_get_context()->pfc.pushed_x + 
 80050e6:	f7ff f9c5 	bl	8004474 <ppu_get_context>
 80050ea:	4602      	mov	r2, r0
 80050ec:	f242 1334 	movw	r3, #8500	; 0x2134
 80050f0:	4413      	add	r3, r2
 80050f2:	681c      	ldr	r4, [r3, #0]
 80050f4:	f7ff f9be 	bl	8004474 <ppu_get_context>
 80050f8:	4602      	mov	r2, r0
 80050fa:	f242 03b1 	movw	r3, #8369	; 0x20b1
 80050fe:	4413      	add	r3, r2
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	461d      	mov	r5, r3
                (lcd_get_context()->ly * XRES)] = pixel_data;
 8005104:	f7fe fbd0 	bl	80038a8 <lcd_get_context>
 8005108:	4603      	mov	r3, r0
 800510a:	791b      	ldrb	r3, [r3, #4]
 800510c:	461a      	mov	r2, r3
 800510e:	23a0      	movs	r3, #160	; 0xa0
 8005110:	fb03 f302 	mul.w	r3, r3, r2
            ppu_get_context()->video_buffer[ppu_get_context()->pfc.pushed_x + 
 8005114:	442b      	add	r3, r5
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4423      	add	r3, r4
                (lcd_get_context()->ly * XRES)] = pixel_data;
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	601a      	str	r2, [r3, #0]

            ppu_get_context()->pfc.pushed_x++;
 800511e:	f7ff f9a9 	bl	8004474 <ppu_get_context>
 8005122:	4602      	mov	r2, r0
 8005124:	f242 03b1 	movw	r3, #8369	; 0x20b1
 8005128:	4413      	add	r3, r2
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	3301      	adds	r3, #1
 800512e:	b2d9      	uxtb	r1, r3
 8005130:	f242 03b1 	movw	r3, #8369	; 0x20b1
 8005134:	4413      	add	r3, r2
 8005136:	460a      	mov	r2, r1
 8005138:	701a      	strb	r2, [r3, #0]
        }

        ppu_get_context()->pfc.line_x++;
 800513a:	f7ff f99b 	bl	8004474 <ppu_get_context>
 800513e:	4602      	mov	r2, r0
 8005140:	f242 03b0 	movw	r3, #8368	; 0x20b0
 8005144:	4413      	add	r3, r2
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	3301      	adds	r3, #1
 800514a:	b2d9      	uxtb	r1, r3
 800514c:	f242 03b0 	movw	r3, #8368	; 0x20b0
 8005150:	4413      	add	r3, r2
 8005152:	460a      	mov	r2, r1
 8005154:	701a      	strb	r2, [r3, #0]
    }
}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bdb0      	pop	{r4, r5, r7, pc}

0800515e <pipeline_process>:

void pipeline_process() {
 800515e:	b5b0      	push	{r4, r5, r7, lr}
 8005160:	af00      	add	r7, sp, #0
    ppu_get_context()->pfc.map_y = (lcd_get_context()->ly + lcd_get_context()->scroll_y);
 8005162:	f7fe fba1 	bl	80038a8 <lcd_get_context>
 8005166:	4603      	mov	r3, r0
 8005168:	791d      	ldrb	r5, [r3, #4]
 800516a:	f7fe fb9d 	bl	80038a8 <lcd_get_context>
 800516e:	4603      	mov	r3, r0
 8005170:	789c      	ldrb	r4, [r3, #2]
 8005172:	f7ff f97f 	bl	8004474 <ppu_get_context>
 8005176:	4602      	mov	r2, r0
 8005178:	192b      	adds	r3, r5, r4
 800517a:	b2d9      	uxtb	r1, r3
 800517c:	f242 03bc 	movw	r3, #8380	; 0x20bc
 8005180:	4413      	add	r3, r2
 8005182:	460a      	mov	r2, r1
 8005184:	701a      	strb	r2, [r3, #0]
    ppu_get_context()->pfc.map_x = (ppu_get_context()->pfc.fetch_x + lcd_get_context()->scroll_x);
 8005186:	f7ff f975 	bl	8004474 <ppu_get_context>
 800518a:	4602      	mov	r2, r0
 800518c:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8005190:	4413      	add	r3, r2
 8005192:	781d      	ldrb	r5, [r3, #0]
 8005194:	f7fe fb88 	bl	80038a8 <lcd_get_context>
 8005198:	4603      	mov	r3, r0
 800519a:	78dc      	ldrb	r4, [r3, #3]
 800519c:	f7ff f96a 	bl	8004474 <ppu_get_context>
 80051a0:	4602      	mov	r2, r0
 80051a2:	192b      	adds	r3, r5, r4
 80051a4:	b2d9      	uxtb	r1, r3
 80051a6:	f242 03bd 	movw	r3, #8381	; 0x20bd
 80051aa:	4413      	add	r3, r2
 80051ac:	460a      	mov	r2, r1
 80051ae:	701a      	strb	r2, [r3, #0]
    ppu_get_context()->pfc.tile_y = ((lcd_get_context()->ly + lcd_get_context()->scroll_y) % 8) * 2;
 80051b0:	f7fe fb7a 	bl	80038a8 <lcd_get_context>
 80051b4:	4603      	mov	r3, r0
 80051b6:	791c      	ldrb	r4, [r3, #4]
 80051b8:	f7fe fb76 	bl	80038a8 <lcd_get_context>
 80051bc:	4603      	mov	r3, r0
 80051be:	789b      	ldrb	r3, [r3, #2]
 80051c0:	4423      	add	r3, r4
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	b2dc      	uxtb	r4, r3
 80051ca:	f7ff f953 	bl	8004474 <ppu_get_context>
 80051ce:	4602      	mov	r2, r0
 80051d0:	0063      	lsls	r3, r4, #1
 80051d2:	b2d9      	uxtb	r1, r3
 80051d4:	f242 03be 	movw	r3, #8382	; 0x20be
 80051d8:	4413      	add	r3, r2
 80051da:	460a      	mov	r2, r1
 80051dc:	701a      	strb	r2, [r3, #0]

    if (!(ppu_get_context()->line_ticks & 1)) {
 80051de:	f7ff f949 	bl	8004474 <ppu_get_context>
 80051e2:	4602      	mov	r2, r0
 80051e4:	f242 1330 	movw	r3, #8496	; 0x2130
 80051e8:	4413      	add	r3, r2
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <pipeline_process+0x9a>
        pipeline_fetch();
 80051f4:	f7ff fe28 	bl	8004e48 <pipeline_fetch>
    }

    pipeline_push_pixel();
 80051f8:	f7ff ff56 	bl	80050a8 <pipeline_push_pixel>
}
 80051fc:	bf00      	nop
 80051fe:	bdb0      	pop	{r4, r5, r7, pc}

08005200 <pipeline_fifo_reset>:

void pipeline_fifo_reset() {
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
    while(ppu_get_context()->pfc.pixel_fifo.size) {
 8005204:	e001      	b.n	800520a <pipeline_fifo_reset+0xa>
        pixel_fifo_pop();
 8005206:	f7ff facf 	bl	80047a8 <pixel_fifo_pop>
    while(ppu_get_context()->pfc.pixel_fifo.size) {
 800520a:	f7ff f933 	bl	8004474 <ppu_get_context>
 800520e:	4602      	mov	r2, r0
 8005210:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8005214:	4413      	add	r3, r2
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f4      	bne.n	8005206 <pipeline_fifo_reset+0x6>
    }

    ppu_get_context()->pfc.pixel_fifo.head = 0;
 800521c:	f7ff f92a 	bl	8004474 <ppu_get_context>
 8005220:	4602      	mov	r2, r0
 8005222:	f242 03a4 	movw	r3, #8356	; 0x20a4
 8005226:	4413      	add	r3, r2
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	bf00      	nop
 800522e:	bd80      	pop	{r7, pc}

08005230 <increment_ly>:

void pipeline_fifo_reset();
void pipeline_process();
bool window_visible();

void increment_ly() {
 8005230:	b598      	push	{r3, r4, r7, lr}
 8005232:	af00      	add	r7, sp, #0
    if (window_visible() && lcd_get_context()->ly >= lcd_get_context()->win_y &&
 8005234:	f7ff fa46 	bl	80046c4 <window_visible>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d025      	beq.n	800528a <increment_ly+0x5a>
 800523e:	f7fe fb33 	bl	80038a8 <lcd_get_context>
 8005242:	4603      	mov	r3, r0
 8005244:	791c      	ldrb	r4, [r3, #4]
 8005246:	f7fe fb2f 	bl	80038a8 <lcd_get_context>
 800524a:	4603      	mov	r3, r0
 800524c:	7a9b      	ldrb	r3, [r3, #10]
 800524e:	429c      	cmp	r4, r3
 8005250:	d31b      	bcc.n	800528a <increment_ly+0x5a>
        lcd_get_context()->ly < lcd_get_context()->win_y + YRES) {
 8005252:	f7fe fb29 	bl	80038a8 <lcd_get_context>
 8005256:	4603      	mov	r3, r0
 8005258:	791b      	ldrb	r3, [r3, #4]
 800525a:	461c      	mov	r4, r3
 800525c:	f7fe fb24 	bl	80038a8 <lcd_get_context>
 8005260:	4603      	mov	r3, r0
 8005262:	7a9b      	ldrb	r3, [r3, #10]
 8005264:	461a      	mov	r2, r3
 8005266:	2390      	movs	r3, #144	; 0x90
 8005268:	4413      	add	r3, r2
    if (window_visible() && lcd_get_context()->ly >= lcd_get_context()->win_y &&
 800526a:	429c      	cmp	r4, r3
 800526c:	da0d      	bge.n	800528a <increment_ly+0x5a>
            ppu_get_context()->window_line++;
 800526e:	f7ff f901 	bl	8004474 <ppu_get_context>
 8005272:	4602      	mov	r2, r0
 8005274:	f242 1328 	movw	r3, #8488	; 0x2128
 8005278:	4413      	add	r3, r2
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	3301      	adds	r3, #1
 800527e:	b2d9      	uxtb	r1, r3
 8005280:	f242 1328 	movw	r3, #8488	; 0x2128
 8005284:	4413      	add	r3, r2
 8005286:	460a      	mov	r2, r1
 8005288:	701a      	strb	r2, [r3, #0]
    }

    lcd_get_context()->ly++;
 800528a:	f7fe fb0d 	bl	80038a8 <lcd_get_context>
 800528e:	4603      	mov	r3, r0
 8005290:	791a      	ldrb	r2, [r3, #4]
 8005292:	3201      	adds	r2, #1
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	711a      	strb	r2, [r3, #4]

    if (lcd_get_context()->ly == lcd_get_context()->ly_compare) {
 8005298:	f7fe fb06 	bl	80038a8 <lcd_get_context>
 800529c:	4603      	mov	r3, r0
 800529e:	791c      	ldrb	r4, [r3, #4]
 80052a0:	f7fe fb02 	bl	80038a8 <lcd_get_context>
 80052a4:	4603      	mov	r3, r0
 80052a6:	795b      	ldrb	r3, [r3, #5]
 80052a8:	429c      	cmp	r4, r3
 80052aa:	d113      	bne.n	80052d4 <increment_ly+0xa4>
        LCDS_LYC_SET(1);
 80052ac:	f7fe fafc 	bl	80038a8 <lcd_get_context>
 80052b0:	4603      	mov	r3, r0
 80052b2:	785a      	ldrb	r2, [r3, #1]
 80052b4:	f042 0204 	orr.w	r2, r2, #4
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	705a      	strb	r2, [r3, #1]

        if (LCDS_STAT_INT(SS_LYC)) {
 80052bc:	f7fe faf4 	bl	80038a8 <lcd_get_context>
 80052c0:	4603      	mov	r3, r0
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00b      	beq.n	80052e4 <increment_ly+0xb4>
            cpu_request_interrupt(IT_LCD_STAT);
 80052cc:	2002      	movs	r0, #2
 80052ce:	f7fb ff59 	bl	8001184 <cpu_request_interrupt>
        }
    } else {
        LCDS_LYC_SET(0);
    }
}
 80052d2:	e007      	b.n	80052e4 <increment_ly+0xb4>
        LCDS_LYC_SET(0);
 80052d4:	f7fe fae8 	bl	80038a8 <lcd_get_context>
 80052d8:	4603      	mov	r3, r0
 80052da:	785a      	ldrb	r2, [r3, #1]
 80052dc:	f022 0204 	bic.w	r2, r2, #4
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	705a      	strb	r2, [r3, #1]
}
 80052e4:	bf00      	nop
 80052e6:	bd98      	pop	{r3, r4, r7, pc}

080052e8 <load_line_sprites>:

void load_line_sprites() {
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b089      	sub	sp, #36	; 0x24
 80052ec:	af00      	add	r7, sp, #0
    int cur_y = lcd_get_context()->ly;
 80052ee:	f7fe fadb 	bl	80038a8 <lcd_get_context>
 80052f2:	4603      	mov	r3, r0
 80052f4:	791b      	ldrb	r3, [r3, #4]
 80052f6:	613b      	str	r3, [r7, #16]

    u8 sprite_height = LCDC_OBJ_HEIGHT;
 80052f8:	f7fe fad6 	bl	80038a8 <lcd_get_context>
 80052fc:	4603      	mov	r3, r0
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <load_line_sprites+0x24>
 8005308:	2310      	movs	r3, #16
 800530a:	e000      	b.n	800530e <load_line_sprites+0x26>
 800530c:	2308      	movs	r3, #8
 800530e:	73fb      	strb	r3, [r7, #15]
    memset(ppu_get_context()->line_entry_array, 0, 
 8005310:	f7ff f8b0 	bl	8004474 <ppu_get_context>
 8005314:	4602      	mov	r2, r0
 8005316:	f242 03c8 	movw	r3, #8392	; 0x20c8
 800531a:	4413      	add	r3, r2
 800531c:	2250      	movs	r2, #80	; 0x50
 800531e:	2100      	movs	r1, #0
 8005320:	4618      	mov	r0, r3
 8005322:	f008 fef9 	bl	800e118 <memset>
        sizeof(ppu_get_context()->line_entry_array));

    for (int i=0; i<40; i++) {
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
 800532a:	e08d      	b.n	8005448 <load_line_sprites+0x160>
        oam_entry e = ppu_get_context()->oam_ram[i];
 800532c:	f7ff f8a2 	bl	8004474 <ppu_get_context>
 8005330:	4602      	mov	r2, r0
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005338:	607b      	str	r3, [r7, #4]

        if (!e.x) {
 800533a:	797b      	ldrb	r3, [r7, #5]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d07f      	beq.n	8005440 <load_line_sprites+0x158>
            //x = 0 means not visible...
            continue;
        }

        if (ppu_get_context()->line_sprite_count >= 10) {
 8005340:	f7ff f898 	bl	8004474 <ppu_get_context>
 8005344:	4603      	mov	r3, r0
 8005346:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b09      	cmp	r3, #9
 800534e:	d901      	bls.n	8005354 <load_line_sprites+0x6c>
            //max 10 sprites per line...
            break;
 8005350:	bf00      	nop
                prev = le;
                le = le->next;
            }
        }
    }
}
 8005352:	e07d      	b.n	8005450 <load_line_sprites+0x168>
        if (e.y <= cur_y + 16 && e.y + sprite_height > cur_y + 16) {
 8005354:	793b      	ldrb	r3, [r7, #4]
 8005356:	461a      	mov	r2, r3
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	3310      	adds	r3, #16
 800535c:	429a      	cmp	r2, r3
 800535e:	dc70      	bgt.n	8005442 <load_line_sprites+0x15a>
 8005360:	793b      	ldrb	r3, [r7, #4]
 8005362:	461a      	mov	r2, r3
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	441a      	add	r2, r3
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	3310      	adds	r3, #16
 800536c:	429a      	cmp	r2, r3
 800536e:	dd68      	ble.n	8005442 <load_line_sprites+0x15a>
            oam_line_entry *entry = &ppu_get_context()->line_entry_array[
 8005370:	f7ff f880 	bl	8004474 <ppu_get_context>
 8005374:	4604      	mov	r4, r0
                ppu_get_context()->line_sprite_count++
 8005376:	f7ff f87d 	bl	8004474 <ppu_get_context>
 800537a:	4603      	mov	r3, r0
 800537c:	f503 5203 	add.w	r2, r3, #8384	; 0x20c0
 8005380:	7812      	ldrb	r2, [r2, #0]
 8005382:	1c51      	adds	r1, r2, #1
 8005384:	b2c9      	uxtb	r1, r1
 8005386:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800538a:	7019      	strb	r1, [r3, #0]
 800538c:	4613      	mov	r3, r2
            oam_line_entry *entry = &ppu_get_context()->line_entry_array[
 800538e:	f203 4319 	addw	r3, r3, #1049	; 0x419
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4423      	add	r3, r4
 8005396:	60bb      	str	r3, [r7, #8]
            entry->entry = e;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	601a      	str	r2, [r3, #0]
            entry->next = NULL;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2200      	movs	r2, #0
 80053a2:	605a      	str	r2, [r3, #4]
            if (!ppu_get_context()->line_sprites ||
 80053a4:	f7ff f866 	bl	8004474 <ppu_get_context>
 80053a8:	4602      	mov	r2, r0
 80053aa:	f242 03c4 	movw	r3, #8388	; 0x20c4
 80053ae:	4413      	add	r3, r2
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <load_line_sprites+0xe4>
                    ppu_get_context()->line_sprites->entry.x > e.x) {
 80053b6:	f7ff f85d 	bl	8004474 <ppu_get_context>
 80053ba:	4602      	mov	r2, r0
 80053bc:	f242 03c4 	movw	r3, #8388	; 0x20c4
 80053c0:	4413      	add	r3, r2
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	785a      	ldrb	r2, [r3, #1]
 80053c6:	797b      	ldrb	r3, [r7, #5]
            if (!ppu_get_context()->line_sprites ||
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d911      	bls.n	80053f0 <load_line_sprites+0x108>
                entry->next = ppu_get_context()->line_sprites;
 80053cc:	f7ff f852 	bl	8004474 <ppu_get_context>
 80053d0:	4602      	mov	r2, r0
 80053d2:	f242 03c4 	movw	r3, #8388	; 0x20c4
 80053d6:	4413      	add	r3, r2
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	605a      	str	r2, [r3, #4]
                ppu_get_context()->line_sprites = entry;
 80053de:	f7ff f849 	bl	8004474 <ppu_get_context>
 80053e2:	4602      	mov	r2, r0
 80053e4:	f242 03c4 	movw	r3, #8388	; 0x20c4
 80053e8:	4413      	add	r3, r2
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	601a      	str	r2, [r3, #0]
                continue;
 80053ee:	e028      	b.n	8005442 <load_line_sprites+0x15a>
            oam_line_entry *le = ppu_get_context()->line_sprites;
 80053f0:	f7ff f840 	bl	8004474 <ppu_get_context>
 80053f4:	4602      	mov	r2, r0
 80053f6:	f242 03c4 	movw	r3, #8388	; 0x20c4
 80053fa:	4413      	add	r3, r2
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	61bb      	str	r3, [r7, #24]
            oam_line_entry *prev = le;
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	617b      	str	r3, [r7, #20]
            while(le) {
 8005404:	e018      	b.n	8005438 <load_line_sprites+0x150>
                if (le->entry.x > e.x) {
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	785a      	ldrb	r2, [r3, #1]
 800540a:	797b      	ldrb	r3, [r7, #5]
 800540c:	429a      	cmp	r2, r3
 800540e:	d906      	bls.n	800541e <load_line_sprites+0x136>
                    prev->next = entry;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	605a      	str	r2, [r3, #4]
                    entry->next = le;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	605a      	str	r2, [r3, #4]
                    break;
 800541c:	e011      	b.n	8005442 <load_line_sprites+0x15a>
                if (!le->next) {
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d103      	bne.n	800542e <load_line_sprites+0x146>
                    le->next = entry;
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	605a      	str	r2, [r3, #4]
                    break;
 800542c:	e009      	b.n	8005442 <load_line_sprites+0x15a>
                prev = le;
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	617b      	str	r3, [r7, #20]
                le = le->next;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	61bb      	str	r3, [r7, #24]
            while(le) {
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e3      	bne.n	8005406 <load_line_sprites+0x11e>
 800543e:	e000      	b.n	8005442 <load_line_sprites+0x15a>
            continue;
 8005440:	bf00      	nop
    for (int i=0; i<40; i++) {
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	3301      	adds	r3, #1
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	2b27      	cmp	r3, #39	; 0x27
 800544c:	f77f af6e 	ble.w	800532c <load_line_sprites+0x44>
}
 8005450:	bf00      	nop
 8005452:	3724      	adds	r7, #36	; 0x24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd90      	pop	{r4, r7, pc}

08005458 <ppu_mode_oam>:

void ppu_mode_oam() {
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
    if (ppu_get_context()->line_ticks >= 80) {
 800545c:	f7ff f80a 	bl	8004474 <ppu_get_context>
 8005460:	4602      	mov	r2, r0
 8005462:	f242 1330 	movw	r3, #8496	; 0x2130
 8005466:	4413      	add	r3, r2
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b4f      	cmp	r3, #79	; 0x4f
 800546c:	d937      	bls.n	80054de <ppu_mode_oam+0x86>
        LCDS_MODE_SET(MODE_XFER);
 800546e:	f7fe fa1b 	bl	80038a8 <lcd_get_context>
 8005472:	4603      	mov	r3, r0
 8005474:	785a      	ldrb	r2, [r3, #1]
 8005476:	f022 0203 	bic.w	r2, r2, #3
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	705a      	strb	r2, [r3, #1]
 800547e:	f7fe fa13 	bl	80038a8 <lcd_get_context>
 8005482:	4603      	mov	r3, r0
 8005484:	785a      	ldrb	r2, [r3, #1]
 8005486:	f042 0203 	orr.w	r2, r2, #3
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	705a      	strb	r2, [r3, #1]

        ppu_get_context()->pfc.cur_fetch_state = FS_TILE;
 800548e:	f7fe fff1 	bl	8004474 <ppu_get_context>
 8005492:	4602      	mov	r2, r0
 8005494:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8005498:	4413      	add	r3, r2
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]
        ppu_get_context()->pfc.line_x = 0;
 800549e:	f7fe ffe9 	bl	8004474 <ppu_get_context>
 80054a2:	4602      	mov	r2, r0
 80054a4:	f242 03b0 	movw	r3, #8368	; 0x20b0
 80054a8:	4413      	add	r3, r2
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
        ppu_get_context()->pfc.fetch_x = 0;
 80054ae:	f7fe ffe1 	bl	8004474 <ppu_get_context>
 80054b2:	4602      	mov	r2, r0
 80054b4:	f242 03b2 	movw	r3, #8370	; 0x20b2
 80054b8:	4413      	add	r3, r2
 80054ba:	2200      	movs	r2, #0
 80054bc:	701a      	strb	r2, [r3, #0]
        ppu_get_context()->pfc.pushed_x = 0;
 80054be:	f7fe ffd9 	bl	8004474 <ppu_get_context>
 80054c2:	4602      	mov	r2, r0
 80054c4:	f242 03b1 	movw	r3, #8369	; 0x20b1
 80054c8:	4413      	add	r3, r2
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]
        ppu_get_context()->pfc.fifo_x = 0;
 80054ce:	f7fe ffd1 	bl	8004474 <ppu_get_context>
 80054d2:	4602      	mov	r2, r0
 80054d4:	f242 03bf 	movw	r3, #8383	; 0x20bf
 80054d8:	4413      	add	r3, r2
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]
    }

    if (ppu_get_context()->line_ticks == 1) {
 80054de:	f7fe ffc9 	bl	8004474 <ppu_get_context>
 80054e2:	4602      	mov	r2, r0
 80054e4:	f242 1330 	movw	r3, #8496	; 0x2130
 80054e8:	4413      	add	r3, r2
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d110      	bne.n	8005512 <ppu_mode_oam+0xba>
        //read oam on the first tick only...
        ppu_get_context()->line_sprites = 0;
 80054f0:	f7fe ffc0 	bl	8004474 <ppu_get_context>
 80054f4:	4602      	mov	r2, r0
 80054f6:	f242 03c4 	movw	r3, #8388	; 0x20c4
 80054fa:	4413      	add	r3, r2
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
        ppu_get_context()->line_sprite_count = 0;
 8005500:	f7fe ffb8 	bl	8004474 <ppu_get_context>
 8005504:	4603      	mov	r3, r0
 8005506:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]

        load_line_sprites();
 800550e:	f7ff feeb 	bl	80052e8 <load_line_sprites>
    }
}
 8005512:	bf00      	nop
 8005514:	bd80      	pop	{r7, pc}

08005516 <ppu_mode_xfer>:

void ppu_mode_xfer() {
 8005516:	b580      	push	{r7, lr}
 8005518:	af00      	add	r7, sp, #0
    pipeline_process();
 800551a:	f7ff fe20 	bl	800515e <pipeline_process>

    if (ppu_get_context()->pfc.pushed_x >= XRES) {
 800551e:	f7fe ffa9 	bl	8004474 <ppu_get_context>
 8005522:	4602      	mov	r2, r0
 8005524:	f242 03b1 	movw	r3, #8369	; 0x20b1
 8005528:	4413      	add	r3, r2
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	23a0      	movs	r3, #160	; 0xa0
 8005530:	429a      	cmp	r2, r3
 8005532:	db19      	blt.n	8005568 <ppu_mode_xfer+0x52>
        pipeline_fifo_reset();
 8005534:	f7ff fe64 	bl	8005200 <pipeline_fifo_reset>

        LCDS_MODE_SET(MODE_HBLANK);
 8005538:	f7fe f9b6 	bl	80038a8 <lcd_get_context>
 800553c:	4603      	mov	r3, r0
 800553e:	785a      	ldrb	r2, [r3, #1]
 8005540:	f022 0203 	bic.w	r2, r2, #3
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	705a      	strb	r2, [r3, #1]
 8005548:	f7fe f9ae 	bl	80038a8 <lcd_get_context>
 800554c:	4603      	mov	r3, r0
 800554e:	785a      	ldrb	r2, [r3, #1]
 8005550:	705a      	strb	r2, [r3, #1]

        if (LCDS_STAT_INT(SS_HBLANK)) {
 8005552:	f7fe f9a9 	bl	80038a8 <lcd_get_context>
 8005556:	4603      	mov	r3, r0
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <ppu_mode_xfer+0x52>
            cpu_request_interrupt(IT_LCD_STAT);
 8005562:	2002      	movs	r0, #2
 8005564:	f7fb fe0e 	bl	8001184 <cpu_request_interrupt>
        }
    }
}
 8005568:	bf00      	nop
 800556a:	bd80      	pop	{r7, pc}

0800556c <ppu_mode_vblank>:

void ppu_mode_vblank() {
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
    if (ppu_get_context()->line_ticks >= TICKS_PER_LINE) {
 8005570:	f7fe ff80 	bl	8004474 <ppu_get_context>
 8005574:	4602      	mov	r2, r0
 8005576:	f242 1330 	movw	r3, #8496	; 0x2130
 800557a:	4413      	add	r3, r2
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8005582:	4293      	cmp	r3, r2
 8005584:	d32e      	bcc.n	80055e4 <ppu_mode_vblank+0x78>
        increment_ly();
 8005586:	f7ff fe53 	bl	8005230 <increment_ly>

        if (lcd_get_context()->ly >= LINES_PER_FRAME) {
 800558a:	f7fe f98d 	bl	80038a8 <lcd_get_context>
 800558e:	4603      	mov	r3, r0
 8005590:	791b      	ldrb	r3, [r3, #4]
 8005592:	461a      	mov	r2, r3
 8005594:	239a      	movs	r3, #154	; 0x9a
 8005596:	429a      	cmp	r2, r3
 8005598:	db1c      	blt.n	80055d4 <ppu_mode_vblank+0x68>
            LCDS_MODE_SET(MODE_OAM);
 800559a:	f7fe f985 	bl	80038a8 <lcd_get_context>
 800559e:	4603      	mov	r3, r0
 80055a0:	785a      	ldrb	r2, [r3, #1]
 80055a2:	f022 0203 	bic.w	r2, r2, #3
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	705a      	strb	r2, [r3, #1]
 80055aa:	f7fe f97d 	bl	80038a8 <lcd_get_context>
 80055ae:	4603      	mov	r3, r0
 80055b0:	785a      	ldrb	r2, [r3, #1]
 80055b2:	f042 0202 	orr.w	r2, r2, #2
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	705a      	strb	r2, [r3, #1]
            lcd_get_context()->ly = 0;
 80055ba:	f7fe f975 	bl	80038a8 <lcd_get_context>
 80055be:	4603      	mov	r3, r0
 80055c0:	2200      	movs	r2, #0
 80055c2:	711a      	strb	r2, [r3, #4]
            ppu_get_context()->window_line = 0;
 80055c4:	f7fe ff56 	bl	8004474 <ppu_get_context>
 80055c8:	4602      	mov	r2, r0
 80055ca:	f242 1328 	movw	r3, #8488	; 0x2128
 80055ce:	4413      	add	r3, r2
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
        }

        ppu_get_context()->line_ticks = 0;
 80055d4:	f7fe ff4e 	bl	8004474 <ppu_get_context>
 80055d8:	4602      	mov	r2, r0
 80055da:	f242 1330 	movw	r3, #8496	; 0x2130
 80055de:	4413      	add	r3, r2
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
    }
}
 80055e4:	bf00      	nop
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <ppu_mode_hblank>:
static u32 target_frame_time = 1000 / 58;
static long prev_frame_time = 0;
static long start_timer = 0;
static long frame_count = 0;

void ppu_mode_hblank() {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
    if (ppu_get_context()->line_ticks >= TICKS_PER_LINE) {
 80055ee:	f7fe ff41 	bl	8004474 <ppu_get_context>
 80055f2:	4602      	mov	r2, r0
 80055f4:	f242 1330 	movw	r3, #8496	; 0x2130
 80055f8:	4413      	add	r3, r2
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8005600:	4293      	cmp	r3, r2
 8005602:	f0c0 8089 	bcc.w	8005718 <ppu_mode_hblank+0x130>
        increment_ly();
 8005606:	f7ff fe13 	bl	8005230 <increment_ly>

        if (lcd_get_context()->ly >= YRES) {
 800560a:	f7fe f94d 	bl	80038a8 <lcd_get_context>
 800560e:	4603      	mov	r3, r0
 8005610:	791b      	ldrb	r3, [r3, #4]
 8005612:	461a      	mov	r2, r3
 8005614:	2390      	movs	r3, #144	; 0x90
 8005616:	429a      	cmp	r2, r3
 8005618:	db66      	blt.n	80056e8 <ppu_mode_hblank+0x100>
            LCDS_MODE_SET(MODE_VBLANK);
 800561a:	f7fe f945 	bl	80038a8 <lcd_get_context>
 800561e:	4603      	mov	r3, r0
 8005620:	785a      	ldrb	r2, [r3, #1]
 8005622:	f022 0203 	bic.w	r2, r2, #3
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	705a      	strb	r2, [r3, #1]
 800562a:	f7fe f93d 	bl	80038a8 <lcd_get_context>
 800562e:	4603      	mov	r3, r0
 8005630:	785a      	ldrb	r2, [r3, #1]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	705a      	strb	r2, [r3, #1]

            cpu_request_interrupt(IT_VBLANK);
 800563a:	2001      	movs	r0, #1
 800563c:	f7fb fda2 	bl	8001184 <cpu_request_interrupt>

            if (LCDS_STAT_INT(SS_VBLANK)) {
 8005640:	f7fe f932 	bl	80038a8 <lcd_get_context>
 8005644:	4603      	mov	r3, r0
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <ppu_mode_hblank+0x6e>
                cpu_request_interrupt(IT_LCD_STAT);
 8005650:	2002      	movs	r0, #2
 8005652:	f7fb fd97 	bl	8001184 <cpu_request_interrupt>
            }

            ppu_get_context()->current_frame++;
 8005656:	f7fe ff0d 	bl	8004474 <ppu_get_context>
 800565a:	4602      	mov	r2, r0
 800565c:	f242 132c 	movw	r3, #8492	; 0x212c
 8005660:	4413      	add	r3, r2
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	1c59      	adds	r1, r3, #1
 8005666:	f242 132c 	movw	r3, #8492	; 0x212c
 800566a:	4413      	add	r3, r2
 800566c:	6019      	str	r1, [r3, #0]

            //calc FPS...
            u32 end = get_ticks();
 800566e:	f000 fd16 	bl	800609e <get_ticks>
 8005672:	60f8      	str	r0, [r7, #12]
            u32 frame_time = end - prev_frame_time;
 8005674:	4b2a      	ldr	r3, [pc, #168]	; (8005720 <ppu_mode_hblank+0x138>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	60bb      	str	r3, [r7, #8]

            if (frame_time < target_frame_time) {
 8005680:	4b28      	ldr	r3, [pc, #160]	; (8005724 <ppu_mode_hblank+0x13c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	429a      	cmp	r2, r3
 8005688:	d206      	bcs.n	8005698 <ppu_mode_hblank+0xb0>
                delay((target_frame_time - frame_time));
 800568a:	4b26      	ldr	r3, [pc, #152]	; (8005724 <ppu_mode_hblank+0x13c>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fcf9 	bl	800608a <delay>
            }

            if (end - start_timer >= 1000) {
 8005698:	4b23      	ldr	r3, [pc, #140]	; (8005728 <ppu_mode_hblank+0x140>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056a6:	d313      	bcc.n	80056d0 <ppu_mode_hblank+0xe8>
                u32 fps = frame_count;
 80056a8:	4b20      	ldr	r3, [pc, #128]	; (800572c <ppu_mode_hblank+0x144>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	607b      	str	r3, [r7, #4]
                start_timer = end;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4a1d      	ldr	r2, [pc, #116]	; (8005728 <ppu_mode_hblank+0x140>)
 80056b2:	6013      	str	r3, [r2, #0]
                frame_count = 0;
 80056b4:	4b1d      	ldr	r3, [pc, #116]	; (800572c <ppu_mode_hblank+0x144>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]

                printf("FPS: %lu\n", fps);
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	481c      	ldr	r0, [pc, #112]	; (8005730 <ppu_mode_hblank+0x148>)
 80056be:	f009 f8dd 	bl	800e87c <iprintf>

                if (cart_need_save()) {
 80056c2:	f7fb f87d 	bl	80007c0 <cart_need_save>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <ppu_mode_hblank+0xe8>
                    cart_battery_save();
 80056cc:	f7fb fab4 	bl	8000c38 <cart_battery_save>
                }
            }

            frame_count++;
 80056d0:	4b16      	ldr	r3, [pc, #88]	; (800572c <ppu_mode_hblank+0x144>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	4a15      	ldr	r2, [pc, #84]	; (800572c <ppu_mode_hblank+0x144>)
 80056d8:	6013      	str	r3, [r2, #0]
            prev_frame_time = get_ticks();
 80056da:	f000 fce0 	bl	800609e <get_ticks>
 80056de:	4603      	mov	r3, r0
 80056e0:	461a      	mov	r2, r3
 80056e2:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <ppu_mode_hblank+0x138>)
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	e00f      	b.n	8005708 <ppu_mode_hblank+0x120>

        } else {
            LCDS_MODE_SET(MODE_OAM);
 80056e8:	f7fe f8de 	bl	80038a8 <lcd_get_context>
 80056ec:	4603      	mov	r3, r0
 80056ee:	785a      	ldrb	r2, [r3, #1]
 80056f0:	f022 0203 	bic.w	r2, r2, #3
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	705a      	strb	r2, [r3, #1]
 80056f8:	f7fe f8d6 	bl	80038a8 <lcd_get_context>
 80056fc:	4603      	mov	r3, r0
 80056fe:	785a      	ldrb	r2, [r3, #1]
 8005700:	f042 0202 	orr.w	r2, r2, #2
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	705a      	strb	r2, [r3, #1]
        }

        ppu_get_context()->line_ticks = 0;
 8005708:	f7fe feb4 	bl	8004474 <ppu_get_context>
 800570c:	4602      	mov	r2, r0
 800570e:	f242 1330 	movw	r3, #8496	; 0x2130
 8005712:	4413      	add	r3, r2
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
    }
}
 8005718:	bf00      	nop
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20003574 	.word	0x20003574
 8005724:	20000ac4 	.word	0x20000ac4
 8005728:	20003578 	.word	0x20003578
 800572c:	2000357c 	.word	0x2000357c
 8005730:	0800fc04 	.word	0x0800fc04

08005734 <wram_read>:
    u8 hram[0x80];
} ram_context;

static ram_context ctx;

u8 wram_read(u16 address) {
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	80fb      	strh	r3, [r7, #6]
    address -= 0xC000;
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8005744:	80fb      	strh	r3, [r7, #6]

    if (address >= 0x2000) {
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800574c:	d30a      	bcc.n	8005764 <wram_read+0x30>
        printf("INVALID WRAM ADDR %08X\n", address + 0xC000);
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8005754:	4619      	mov	r1, r3
 8005756:	4807      	ldr	r0, [pc, #28]	; (8005774 <wram_read+0x40>)
 8005758:	f009 f890 	bl	800e87c <iprintf>
        exit(-1);
 800575c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005760:	f007 ff54 	bl	800d60c <exit>
    }

    return ctx.wram[address];
 8005764:	88fb      	ldrh	r3, [r7, #6]
 8005766:	4a04      	ldr	r2, [pc, #16]	; (8005778 <wram_read+0x44>)
 8005768:	5cd3      	ldrb	r3, [r2, r3]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	0800fc10 	.word	0x0800fc10
 8005778:	20003580 	.word	0x20003580

0800577c <wram_write>:

void wram_write(u16 address, u8 value) {
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	460a      	mov	r2, r1
 8005786:	80fb      	strh	r3, [r7, #6]
 8005788:	4613      	mov	r3, r2
 800578a:	717b      	strb	r3, [r7, #5]
    address -= 0xC000;
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8005792:	80fb      	strh	r3, [r7, #6]

    ctx.wram[address] = value;
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	4904      	ldr	r1, [pc, #16]	; (80057a8 <wram_write+0x2c>)
 8005798:	797a      	ldrb	r2, [r7, #5]
 800579a:	54ca      	strb	r2, [r1, r3]
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	20003580 	.word	0x20003580

080057ac <hram_read>:

u8 hram_read(u16 address) {
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	80fb      	strh	r3, [r7, #6]
    address -= 0xFF80;
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	3380      	adds	r3, #128	; 0x80
 80057ba:	80fb      	strh	r3, [r7, #6]

    return ctx.hram[address];
 80057bc:	88fb      	ldrh	r3, [r7, #6]
 80057be:	4a05      	ldr	r2, [pc, #20]	; (80057d4 <hram_read+0x28>)
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80057c6:	781b      	ldrb	r3, [r3, #0]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	20003580 	.word	0x20003580

080057d8 <hram_write>:

void hram_write(u16 address, u8 value) {
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	4603      	mov	r3, r0
 80057e0:	460a      	mov	r2, r1
 80057e2:	80fb      	strh	r3, [r7, #6]
 80057e4:	4613      	mov	r3, r2
 80057e6:	717b      	strb	r3, [r7, #5]
    address -= 0xFF80;
 80057e8:	88fb      	ldrh	r3, [r7, #6]
 80057ea:	3380      	adds	r3, #128	; 0x80
 80057ec:	80fb      	strh	r3, [r7, #6]

    ctx.hram[address] = value;
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	4a05      	ldr	r2, [pc, #20]	; (8005808 <hram_write+0x30>)
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80057f8:	797a      	ldrb	r2, [r7, #5]
 80057fa:	701a      	strb	r2, [r3, #0]
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	20003580 	.word	0x20003580

0800580c <stack_push>:
    0xDFFD: 88 <- SP
    0xDFFE: 55 
    0xDFFF: 00
*/

void stack_push(u8 data) {
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	71fb      	strb	r3, [r7, #7]
    cpu_get_regs()->sp--;
 8005816:	f7fd fa69 	bl	8002cec <cpu_get_regs>
 800581a:	4603      	mov	r3, r0
 800581c:	895a      	ldrh	r2, [r3, #10]
 800581e:	3a01      	subs	r2, #1
 8005820:	b292      	uxth	r2, r2
 8005822:	815a      	strh	r2, [r3, #10]
    bus_write(cpu_get_regs()->sp, data);
 8005824:	f7fd fa62 	bl	8002cec <cpu_get_regs>
 8005828:	4603      	mov	r3, r0
 800582a:	895b      	ldrh	r3, [r3, #10]
 800582c:	79fa      	ldrb	r2, [r7, #7]
 800582e:	4611      	mov	r1, r2
 8005830:	4618      	mov	r0, r3
 8005832:	f7fa ff39 	bl	80006a8 <bus_write>
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <stack_push16>:

void stack_push16(u16 data) {
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	4603      	mov	r3, r0
 8005846:	80fb      	strh	r3, [r7, #6]
    stack_push((data >> 8) & 0xFF);
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	b29b      	uxth	r3, r3
 800584e:	b2db      	uxtb	r3, r3
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff ffdb 	bl	800580c <stack_push>
    stack_push(data & 0xFF);
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff ffd6 	bl	800580c <stack_push>
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <stack_pop>:

u8 stack_pop() {
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
    return bus_read(cpu_get_regs()->sp++);
 800586c:	f7fd fa3e 	bl	8002cec <cpu_get_regs>
 8005870:	4602      	mov	r2, r0
 8005872:	8953      	ldrh	r3, [r2, #10]
 8005874:	1c59      	adds	r1, r3, #1
 8005876:	b289      	uxth	r1, r1
 8005878:	8151      	strh	r1, [r2, #10]
 800587a:	4618      	mov	r0, r3
 800587c:	f7fa feac 	bl	80005d8 <bus_read>
 8005880:	4603      	mov	r3, r0
}
 8005882:	4618      	mov	r0, r3
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800588e:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <HAL_MspInit+0x44>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	4a0e      	ldr	r2, [pc, #56]	; (80058cc <HAL_MspInit+0x44>)
 8005894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005898:	6413      	str	r3, [r2, #64]	; 0x40
 800589a:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <HAL_MspInit+0x44>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a2:	607b      	str	r3, [r7, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058a6:	4b09      	ldr	r3, [pc, #36]	; (80058cc <HAL_MspInit+0x44>)
 80058a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058aa:	4a08      	ldr	r2, [pc, #32]	; (80058cc <HAL_MspInit+0x44>)
 80058ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058b0:	6453      	str	r3, [r2, #68]	; 0x44
 80058b2:	4b06      	ldr	r3, [pc, #24]	; (80058cc <HAL_MspInit+0x44>)
 80058b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40023800 	.word	0x40023800

080058d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a0a      	ldr	r2, [pc, #40]	; (8005908 <HAL_CRC_MspInit+0x38>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d10b      	bne.n	80058fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80058e2:	4b0a      	ldr	r3, [pc, #40]	; (800590c <HAL_CRC_MspInit+0x3c>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	4a09      	ldr	r2, [pc, #36]	; (800590c <HAL_CRC_MspInit+0x3c>)
 80058e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058ec:	6313      	str	r3, [r2, #48]	; 0x30
 80058ee:	4b07      	ldr	r3, [pc, #28]	; (800590c <HAL_CRC_MspInit+0x3c>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80058fa:	bf00      	nop
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40023000 	.word	0x40023000
 800590c:	40023800 	.word	0x40023800

08005910 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b0b0      	sub	sp, #192	; 0xc0
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005918:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	605a      	str	r2, [r3, #4]
 8005922:	609a      	str	r2, [r3, #8]
 8005924:	60da      	str	r2, [r3, #12]
 8005926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005928:	f107 031c 	add.w	r3, r7, #28
 800592c:	2290      	movs	r2, #144	; 0x90
 800592e:	2100      	movs	r1, #0
 8005930:	4618      	mov	r0, r3
 8005932:	f008 fbf1 	bl	800e118 <memset>
  if(hsd->Instance==SDMMC2)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a83      	ldr	r2, [pc, #524]	; (8005b48 <HAL_SD_MspInit+0x238>)
 800593c:	4293      	cmp	r3, r2
 800593e:	f040 80ff 	bne.w	8005b40 <HAL_SD_MspInit+0x230>
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC2;
 8005942:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005946:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_SYSCLK;
 8005948:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800594c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005950:	f107 031c 	add.w	r3, r7, #28
 8005954:	4618      	mov	r0, r3
 8005956:	f002 f8b1 	bl	8007abc <HAL_RCCEx_PeriphCLKConfig>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8005960:	f7fe fd82 	bl	8004468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8005964:	4b79      	ldr	r3, [pc, #484]	; (8005b4c <HAL_SD_MspInit+0x23c>)
 8005966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005968:	4a78      	ldr	r2, [pc, #480]	; (8005b4c <HAL_SD_MspInit+0x23c>)
 800596a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800596e:	6453      	str	r3, [r2, #68]	; 0x44
 8005970:	4b76      	ldr	r3, [pc, #472]	; (8005b4c <HAL_SD_MspInit+0x23c>)
 8005972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800597c:	4b73      	ldr	r3, [pc, #460]	; (8005b4c <HAL_SD_MspInit+0x23c>)
 800597e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005980:	4a72      	ldr	r2, [pc, #456]	; (8005b4c <HAL_SD_MspInit+0x23c>)
 8005982:	f043 0302 	orr.w	r3, r3, #2
 8005986:	6313      	str	r3, [r2, #48]	; 0x30
 8005988:	4b70      	ldr	r3, [pc, #448]	; (8005b4c <HAL_SD_MspInit+0x23c>)
 800598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005994:	4b6d      	ldr	r3, [pc, #436]	; (8005b4c <HAL_SD_MspInit+0x23c>)
 8005996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005998:	4a6c      	ldr	r2, [pc, #432]	; (8005b4c <HAL_SD_MspInit+0x23c>)
 800599a:	f043 0308 	orr.w	r3, r3, #8
 800599e:	6313      	str	r3, [r2, #48]	; 0x30
 80059a0:	4b6a      	ldr	r3, [pc, #424]	; (8005b4c <HAL_SD_MspInit+0x23c>)
 80059a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	613b      	str	r3, [r7, #16]
 80059aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80059ac:	4b67      	ldr	r3, [pc, #412]	; (8005b4c <HAL_SD_MspInit+0x23c>)
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	4a66      	ldr	r2, [pc, #408]	; (8005b4c <HAL_SD_MspInit+0x23c>)
 80059b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059b6:	6313      	str	r3, [r2, #48]	; 0x30
 80059b8:	4b64      	ldr	r3, [pc, #400]	; (8005b4c <HAL_SD_MspInit+0x23c>)
 80059ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0
    */
    GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 80059c4:	2318      	movs	r3, #24
 80059c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ca:	2302      	movs	r3, #2
 80059cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059d6:	2303      	movs	r3, #3
 80059d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80059dc:	230a      	movs	r3, #10
 80059de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80059e6:	4619      	mov	r1, r3
 80059e8:	4859      	ldr	r0, [pc, #356]	; (8005b50 <HAL_SD_MspInit+0x240>)
 80059ea:	f001 f9bb 	bl	8006d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 80059ee:	23c0      	movs	r3, #192	; 0xc0
 80059f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f4:	2302      	movs	r3, #2
 80059f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a00:	2303      	movs	r3, #3
 8005a02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8005a06:	230b      	movs	r3, #11
 8005a08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005a10:	4619      	mov	r1, r3
 8005a12:	4850      	ldr	r0, [pc, #320]	; (8005b54 <HAL_SD_MspInit+0x244>)
 8005a14:	f001 f9a6 	bl	8006d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8005a18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a20:	2302      	movs	r3, #2
 8005a22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8005a32:	230b      	movs	r3, #11
 8005a34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4846      	ldr	r0, [pc, #280]	; (8005b58 <HAL_SD_MspInit+0x248>)
 8005a40:	f001 f990 	bl	8006d64 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 8005a44:	4b45      	ldr	r3, [pc, #276]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005a46:	4a46      	ldr	r2, [pc, #280]	; (8005b60 <HAL_SD_MspInit+0x250>)
 8005a48:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 8005a4a:	4b44      	ldr	r3, [pc, #272]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005a4c:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8005a50:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a52:	4b42      	ldr	r3, [pc, #264]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a58:	4b40      	ldr	r3, [pc, #256]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a5e:	4b3f      	ldr	r3, [pc, #252]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a64:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a66:	4b3d      	ldr	r3, [pc, #244]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005a68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a6c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005a6e:	4b3b      	ldr	r3, [pc, #236]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005a70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a74:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 8005a76:	4b39      	ldr	r3, [pc, #228]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005a78:	2220      	movs	r2, #32
 8005a7a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a7c:	4b37      	ldr	r3, [pc, #220]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005a82:	4b36      	ldr	r3, [pc, #216]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005a84:	2204      	movs	r2, #4
 8005a86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005a88:	4b34      	ldr	r3, [pc, #208]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005a8e:	4b33      	ldr	r3, [pc, #204]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005a90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005a94:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005a96:	4b31      	ldr	r3, [pc, #196]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005a98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 8005a9e:	482f      	ldr	r0, [pc, #188]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005aa0:	f000 fdba 	bl	8006618 <HAL_DMA_Init>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8005aaa:	f7fe fcdd 	bl	8004468 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a2a      	ldr	r2, [pc, #168]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005ab2:	641a      	str	r2, [r3, #64]	; 0x40
 8005ab4:	4a29      	ldr	r2, [pc, #164]	; (8005b5c <HAL_SD_MspInit+0x24c>)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 8005aba:	4b2a      	ldr	r3, [pc, #168]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005abc:	4a2a      	ldr	r2, [pc, #168]	; (8005b68 <HAL_SD_MspInit+0x258>)
 8005abe:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 8005ac0:	4b28      	ldr	r3, [pc, #160]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005ac2:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8005ac6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ac8:	4b26      	ldr	r3, [pc, #152]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005aca:	2240      	movs	r2, #64	; 0x40
 8005acc:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ace:	4b25      	ldr	r3, [pc, #148]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ad4:	4b23      	ldr	r3, [pc, #140]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ada:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005adc:	4b21      	ldr	r3, [pc, #132]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ae2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005ae4:	4b1f      	ldr	r3, [pc, #124]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005aea:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8005aec:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005aee:	2220      	movs	r2, #32
 8005af0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005af2:	4b1c      	ldr	r3, [pc, #112]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005af8:	4b1a      	ldr	r3, [pc, #104]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005afa:	2204      	movs	r2, #4
 8005afc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005afe:	4b19      	ldr	r3, [pc, #100]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005b00:	2203      	movs	r2, #3
 8005b02:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005b04:	4b17      	ldr	r3, [pc, #92]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005b06:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005b0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005b0c:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005b0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8005b14:	4813      	ldr	r0, [pc, #76]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005b16:	f000 fd7f 	bl	8006618 <HAL_DMA_Init>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <HAL_SD_MspInit+0x214>
    {
      Error_Handler();
 8005b20:	f7fe fca2 	bl	8004468 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc2_tx);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a0f      	ldr	r2, [pc, #60]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005b28:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b2a:	4a0e      	ldr	r2, [pc, #56]	; (8005b64 <HAL_SD_MspInit+0x254>)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8005b30:	2200      	movs	r2, #0
 8005b32:	2100      	movs	r1, #0
 8005b34:	2067      	movs	r0, #103	; 0x67
 8005b36:	f000 fc4e 	bl	80063d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8005b3a:	2067      	movs	r0, #103	; 0x67
 8005b3c:	f000 fc67 	bl	800640e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8005b40:	bf00      	nop
 8005b42:	37c0      	adds	r7, #192	; 0xc0
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40011c00 	.word	0x40011c00
 8005b4c:	40023800 	.word	0x40023800
 8005b50:	40020400 	.word	0x40020400
 8005b54:	40020c00 	.word	0x40020c00
 8005b58:	40021800 	.word	0x40021800
 8005b5c:	20005760 	.word	0x20005760
 8005b60:	40026410 	.word	0x40026410
 8005b64:	20005658 	.word	0x20005658
 8005b68:	40026488 	.word	0x40026488

08005b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b0ae      	sub	sp, #184	; 0xb8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	609a      	str	r2, [r3, #8]
 8005b80:	60da      	str	r2, [r3, #12]
 8005b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005b84:	f107 0314 	add.w	r3, r7, #20
 8005b88:	2290      	movs	r2, #144	; 0x90
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f008 fac3 	bl	800e118 <memset>
  if(huart->Instance==USART1)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a2c      	ldr	r2, [pc, #176]	; (8005c48 <HAL_UART_MspInit+0xdc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d151      	bne.n	8005c40 <HAL_UART_MspInit+0xd4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005b9c:	2340      	movs	r3, #64	; 0x40
 8005b9e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ba4:	f107 0314 	add.w	r3, r7, #20
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f001 ff87 	bl	8007abc <HAL_RCCEx_PeriphCLKConfig>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005bb4:	f7fe fc58 	bl	8004468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005bb8:	4b24      	ldr	r3, [pc, #144]	; (8005c4c <HAL_UART_MspInit+0xe0>)
 8005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbc:	4a23      	ldr	r2, [pc, #140]	; (8005c4c <HAL_UART_MspInit+0xe0>)
 8005bbe:	f043 0310 	orr.w	r3, r3, #16
 8005bc2:	6453      	str	r3, [r2, #68]	; 0x44
 8005bc4:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <HAL_UART_MspInit+0xe0>)
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bd0:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <HAL_UART_MspInit+0xe0>)
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <HAL_UART_MspInit+0xe0>)
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	6313      	str	r3, [r2, #48]	; 0x30
 8005bdc:	4b1b      	ldr	r3, [pc, #108]	; (8005c4c <HAL_UART_MspInit+0xe0>)
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c02:	2307      	movs	r3, #7
 8005c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005c08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4810      	ldr	r0, [pc, #64]	; (8005c50 <HAL_UART_MspInit+0xe4>)
 8005c10:	f001 f8a8 	bl	8006d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c2e:	2307      	movs	r3, #7
 8005c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005c34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4805      	ldr	r0, [pc, #20]	; (8005c50 <HAL_UART_MspInit+0xe4>)
 8005c3c:	f001 f892 	bl	8006d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005c40:	bf00      	nop
 8005c42:	37b8      	adds	r7, #184	; 0xb8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40011000 	.word	0x40011000
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	40020000 	.word	0x40020000

08005c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c58:	e7fe      	b.n	8005c58 <NMI_Handler+0x4>

08005c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c5e:	e7fe      	b.n	8005c5e <HardFault_Handler+0x4>

08005c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c64:	e7fe      	b.n	8005c64 <MemManage_Handler+0x4>

08005c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c66:	b480      	push	{r7}
 8005c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c6a:	e7fe      	b.n	8005c6a <BusFault_Handler+0x4>

08005c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c70:	e7fe      	b.n	8005c70 <UsageFault_Handler+0x4>

08005c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c72:	b480      	push	{r7}
 8005c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c76:	bf00      	nop
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c84:	bf00      	nop
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c92:	bf00      	nop
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ca0:	f000 fa7a 	bl	8006198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ca4:	bf00      	nop
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 8005cac:	4802      	ldr	r0, [pc, #8]	; (8005cb8 <DMA2_Stream0_IRQHandler+0x10>)
 8005cae:	f000 fde3 	bl	8006878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005cb2:	bf00      	nop
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20005760 	.word	0x20005760

08005cbc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8005cc0:	4802      	ldr	r0, [pc, #8]	; (8005ccc <DMA2_Stream5_IRQHandler+0x10>)
 8005cc2:	f000 fdd9 	bl	8006878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8005cc6:	bf00      	nop
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20005658 	.word	0x20005658

08005cd0 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8005cd4:	4802      	ldr	r0, [pc, #8]	; (8005ce0 <SDMMC2_IRQHandler+0x10>)
 8005cd6:	f002 fd99 	bl	800880c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8005cda:	bf00      	nop
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	200056dc 	.word	0x200056dc

08005ce4 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005cee:	f007 fc87 	bl	800d600 <__errno>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2216      	movs	r2, #22
 8005cf6:	601a      	str	r2, [r3, #0]
	return -1;
 8005cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <_exit>:

void _exit (int status)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7ff ffe7 	bl	8005ce4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005d16:	e7fe      	b.n	8005d16 <_exit+0x12>

08005d18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d24:	2300      	movs	r3, #0
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	e00a      	b.n	8005d40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005d2a:	f3af 8000 	nop.w
 8005d2e:	4601      	mov	r1, r0
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	60ba      	str	r2, [r7, #8]
 8005d36:	b2ca      	uxtb	r2, r1
 8005d38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	617b      	str	r3, [r7, #20]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	dbf0      	blt.n	8005d2a <_read+0x12>
	}

return len;
 8005d48:	687b      	ldr	r3, [r7, #4]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
	return -1;
 8005d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d7a:	605a      	str	r2, [r3, #4]
	return 0;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <_isatty>:

int _isatty(int file)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
	return 1;
 8005d92:	2301      	movs	r3, #1
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
	return 0;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <_open>:

int _open(char *path, int flags, ...)
{
 8005dba:	b40e      	push	{r1, r2, r3}
 8005dbc:	b480      	push	{r7}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8005dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	b003      	add	sp, #12
 8005dd4:	4770      	bx	lr
	...

08005dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005de0:	4a14      	ldr	r2, [pc, #80]	; (8005e34 <_sbrk+0x5c>)
 8005de2:	4b15      	ldr	r3, [pc, #84]	; (8005e38 <_sbrk+0x60>)
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005dec:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <_sbrk+0x64>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005df4:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <_sbrk+0x64>)
 8005df6:	4a12      	ldr	r2, [pc, #72]	; (8005e40 <_sbrk+0x68>)
 8005df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005dfa:	4b10      	ldr	r3, [pc, #64]	; (8005e3c <_sbrk+0x64>)
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4413      	add	r3, r2
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d207      	bcs.n	8005e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e08:	f007 fbfa 	bl	800d600 <__errno>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	220c      	movs	r2, #12
 8005e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e16:	e009      	b.n	8005e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e18:	4b08      	ldr	r3, [pc, #32]	; (8005e3c <_sbrk+0x64>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e1e:	4b07      	ldr	r3, [pc, #28]	; (8005e3c <_sbrk+0x64>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4413      	add	r3, r2
 8005e26:	4a05      	ldr	r2, [pc, #20]	; (8005e3c <_sbrk+0x64>)
 8005e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20080000 	.word	0x20080000
 8005e38:	00000800 	.word	0x00000800
 8005e3c:	20005600 	.word	0x20005600
 8005e40:	20005cc0 	.word	0x20005cc0

08005e44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e48:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <SystemInit+0x20>)
 8005e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4e:	4a05      	ldr	r2, [pc, #20]	; (8005e64 <SystemInit+0x20>)
 8005e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e58:	bf00      	nop
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	e000ed00 	.word	0xe000ed00

08005e68 <timer_get_context>:
#include <timer.h>
#include <interrupts.h>

static timer_context ctx = {0};

timer_context *timer_get_context() {
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
    return &ctx;
 8005e6c:	4b02      	ldr	r3, [pc, #8]	; (8005e78 <timer_get_context+0x10>)
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	20005604 	.word	0x20005604

08005e7c <timer_init>:

void timer_init() {
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
    ctx.div = 0xAC00;
 8005e80:	4b04      	ldr	r3, [pc, #16]	; (8005e94 <timer_init+0x18>)
 8005e82:	f44f 422c 	mov.w	r2, #44032	; 0xac00
 8005e86:	801a      	strh	r2, [r3, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	20005604 	.word	0x20005604

08005e98 <timer_tick>:

void timer_tick() {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
    u16 prev_div = ctx.div;
 8005e9e:	4b45      	ldr	r3, [pc, #276]	; (8005fb4 <timer_tick+0x11c>)
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	80bb      	strh	r3, [r7, #4]

    ctx.div++;
 8005ea4:	4b43      	ldr	r3, [pc, #268]	; (8005fb4 <timer_tick+0x11c>)
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	4b41      	ldr	r3, [pc, #260]	; (8005fb4 <timer_tick+0x11c>)
 8005eae:	801a      	strh	r2, [r3, #0]

    bool timer_update = false;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	71fb      	strb	r3, [r7, #7]

    switch(ctx.tac & (0b11)) {
 8005eb4:	4b3f      	ldr	r3, [pc, #252]	; (8005fb4 <timer_tick+0x11c>)
 8005eb6:	791b      	ldrb	r3, [r3, #4]
 8005eb8:	f003 0303 	and.w	r3, r3, #3
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d85b      	bhi.n	8005f78 <timer_tick+0xe0>
 8005ec0:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <timer_tick+0x30>)
 8005ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec6:	bf00      	nop
 8005ec8:	08005ed9 	.word	0x08005ed9
 8005ecc:	08005f01 	.word	0x08005f01
 8005ed0:	08005f29 	.word	0x08005f29
 8005ed4:	08005f51 	.word	0x08005f51
        case 0b00:
            timer_update = (prev_div & (1 << 9)) && (!(ctx.div & (1 << 9)));
 8005ed8:	88bb      	ldrh	r3, [r7, #4]
 8005eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <timer_tick+0x5a>
 8005ee2:	4b34      	ldr	r3, [pc, #208]	; (8005fb4 <timer_tick+0x11c>)
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <timer_tick+0x5a>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <timer_tick+0x5c>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	71fb      	strb	r3, [r7, #7]
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	71fb      	strb	r3, [r7, #7]
            break;
 8005efe:	e03b      	b.n	8005f78 <timer_tick+0xe0>
        case 0b01:
            timer_update = (prev_div & (1 << 3)) && (!(ctx.div & (1 << 3)));
 8005f00:	88bb      	ldrh	r3, [r7, #4]
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <timer_tick+0x82>
 8005f0a:	4b2a      	ldr	r3, [pc, #168]	; (8005fb4 <timer_tick+0x11c>)
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <timer_tick+0x82>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <timer_tick+0x84>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	71fb      	strb	r3, [r7, #7]
 8005f1e:	79fb      	ldrb	r3, [r7, #7]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	71fb      	strb	r3, [r7, #7]
            break;
 8005f26:	e027      	b.n	8005f78 <timer_tick+0xe0>
        case 0b10:
            timer_update = (prev_div & (1 << 5)) && (!(ctx.div & (1 << 5)));
 8005f28:	88bb      	ldrh	r3, [r7, #4]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d007      	beq.n	8005f42 <timer_tick+0xaa>
 8005f32:	4b20      	ldr	r3, [pc, #128]	; (8005fb4 <timer_tick+0x11c>)
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <timer_tick+0xaa>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <timer_tick+0xac>
 8005f42:	2300      	movs	r3, #0
 8005f44:	71fb      	strb	r3, [r7, #7]
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	71fb      	strb	r3, [r7, #7]
            break;
 8005f4e:	e013      	b.n	8005f78 <timer_tick+0xe0>
        case 0b11:
            timer_update = (prev_div & (1 << 7)) && (!(ctx.div & (1 << 7)));
 8005f50:	88bb      	ldrh	r3, [r7, #4]
 8005f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d007      	beq.n	8005f6a <timer_tick+0xd2>
 8005f5a:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <timer_tick+0x11c>)
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <timer_tick+0xd2>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <timer_tick+0xd4>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	71fb      	strb	r3, [r7, #7]
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	71fb      	strb	r3, [r7, #7]
            break;
 8005f76:	bf00      	nop
    }

    if (timer_update && ctx.tac & (1 << 2)) {
 8005f78:	79fb      	ldrb	r3, [r7, #7]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d016      	beq.n	8005fac <timer_tick+0x114>
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <timer_tick+0x11c>)
 8005f80:	791b      	ldrb	r3, [r3, #4]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d010      	beq.n	8005fac <timer_tick+0x114>
        ctx.tima++;
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <timer_tick+0x11c>)
 8005f8c:	789b      	ldrb	r3, [r3, #2]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <timer_tick+0x11c>)
 8005f94:	709a      	strb	r2, [r3, #2]

        if (ctx.tima == 0xFF) {
 8005f96:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <timer_tick+0x11c>)
 8005f98:	789b      	ldrb	r3, [r3, #2]
 8005f9a:	2bff      	cmp	r3, #255	; 0xff
 8005f9c:	d106      	bne.n	8005fac <timer_tick+0x114>
            ctx.tima = ctx.tma;
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <timer_tick+0x11c>)
 8005fa0:	78da      	ldrb	r2, [r3, #3]
 8005fa2:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <timer_tick+0x11c>)
 8005fa4:	709a      	strb	r2, [r3, #2]

            cpu_request_interrupt(IT_TIMER);
 8005fa6:	2004      	movs	r0, #4
 8005fa8:	f7fb f8ec 	bl	8001184 <cpu_request_interrupt>
        }
    }
}
 8005fac:	bf00      	nop
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20005604 	.word	0x20005604

08005fb8 <timer_write>:

void timer_write(u16 address, u8 value) {
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	460a      	mov	r2, r1
 8005fc2:	80fb      	strh	r3, [r7, #6]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	717b      	strb	r3, [r7, #5]
    switch(address) {
 8005fc8:	88fa      	ldrh	r2, [r7, #6]
 8005fca:	4b12      	ldr	r3, [pc, #72]	; (8006014 <timer_write+0x5c>)
 8005fcc:	4413      	add	r3, r2
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d81a      	bhi.n	8006008 <timer_write+0x50>
 8005fd2:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <timer_write+0x20>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	08005fe9 	.word	0x08005fe9
 8005fdc:	08005ff1 	.word	0x08005ff1
 8005fe0:	08005ff9 	.word	0x08005ff9
 8005fe4:	08006001 	.word	0x08006001
        case 0xFF04:
            //DIV
            ctx.div = 0;
 8005fe8:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <timer_write+0x60>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	801a      	strh	r2, [r3, #0]
            break;
 8005fee:	e00b      	b.n	8006008 <timer_write+0x50>

        case 0xFF05:
            //TIMA
            ctx.tima = value;
 8005ff0:	4a09      	ldr	r2, [pc, #36]	; (8006018 <timer_write+0x60>)
 8005ff2:	797b      	ldrb	r3, [r7, #5]
 8005ff4:	7093      	strb	r3, [r2, #2]
            break;
 8005ff6:	e007      	b.n	8006008 <timer_write+0x50>

        case 0xFF06:
            //TMA
            ctx.tma = value;
 8005ff8:	4a07      	ldr	r2, [pc, #28]	; (8006018 <timer_write+0x60>)
 8005ffa:	797b      	ldrb	r3, [r7, #5]
 8005ffc:	70d3      	strb	r3, [r2, #3]
            break;
 8005ffe:	e003      	b.n	8006008 <timer_write+0x50>

        case 0xFF07:
            //TAC
            ctx.tac = value;
 8006000:	4a05      	ldr	r2, [pc, #20]	; (8006018 <timer_write+0x60>)
 8006002:	797b      	ldrb	r3, [r7, #5]
 8006004:	7113      	strb	r3, [r2, #4]
            break;
 8006006:	bf00      	nop
    }
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	ffff00fc 	.word	0xffff00fc
 8006018:	20005604 	.word	0x20005604

0800601c <timer_read>:

u8 timer_read(u16 address) {
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	80fb      	strh	r3, [r7, #6]
    switch(address) {
 8006026:	88fa      	ldrh	r2, [r7, #6]
 8006028:	4b12      	ldr	r3, [pc, #72]	; (8006074 <timer_read+0x58>)
 800602a:	4413      	add	r3, r2
 800602c:	2b03      	cmp	r3, #3
 800602e:	d81a      	bhi.n	8006066 <timer_read+0x4a>
 8006030:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <timer_read+0x1c>)
 8006032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006036:	bf00      	nop
 8006038:	08006049 	.word	0x08006049
 800603c:	08006055 	.word	0x08006055
 8006040:	0800605b 	.word	0x0800605b
 8006044:	08006061 	.word	0x08006061
        case 0xFF04:
            return ctx.div >> 8;
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <timer_read+0x5c>)
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	0a1b      	lsrs	r3, r3, #8
 800604e:	b29b      	uxth	r3, r3
 8006050:	b2db      	uxtb	r3, r3
 8006052:	e009      	b.n	8006068 <timer_read+0x4c>
        case 0xFF05:
            return ctx.tima;
 8006054:	4b08      	ldr	r3, [pc, #32]	; (8006078 <timer_read+0x5c>)
 8006056:	789b      	ldrb	r3, [r3, #2]
 8006058:	e006      	b.n	8006068 <timer_read+0x4c>
        case 0xFF06:
            return ctx.tma;
 800605a:	4b07      	ldr	r3, [pc, #28]	; (8006078 <timer_read+0x5c>)
 800605c:	78db      	ldrb	r3, [r3, #3]
 800605e:	e003      	b.n	8006068 <timer_read+0x4c>
        case 0xFF07:
            return ctx.tac;
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <timer_read+0x5c>)
 8006062:	791b      	ldrb	r3, [r3, #4]
 8006064:	e000      	b.n	8006068 <timer_read+0x4c>
    }
    return 0;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	ffff00fc 	.word	0xffff00fc
 8006078:	20005604 	.word	0x20005604

0800607c <ui_init>:
//SDL_Surface *debugScreen;

//static int scale = 6;
//static int sde = 0;

void ui_init() {
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
//                                            (32 * 8 * scale) + (64 * scale));
//
//    int x, y;
//    SDL_GetWindowPosition(sdlWindow, &x, &y);
//    SDL_SetWindowPosition(sdlDebugWindow, x + SCREEN_WIDTH + 10, y);
}
 8006080:	bf00      	nop
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <delay>:

void delay(u32 ms) {
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
    //SDL_Delay(ms);
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <get_ticks>:

u32 get_ticks() {
 800609e:	b480      	push	{r7}
 80060a0:	af00      	add	r7, sp, #0
    return 0;//SDL_GetTicks();
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <ui_update>:
//	SDL_RenderClear(sdlDebugRenderer);
//	SDL_RenderCopy(sdlDebugRenderer, sdlDebugTexture, NULL, NULL);
//	SDL_RenderPresent(sdlDebugRenderer);
}

void ui_update() {
 80060ae:	b480      	push	{r7}
 80060b0:	af00      	add	r7, sp, #0
//    SDL_RenderClear(sdlRenderer);
//    SDL_RenderCopy(sdlRenderer, sdlTexture, NULL, NULL);
//    SDL_RenderPresent(sdlRenderer);
//
//    update_dbg_window();
}
 80060b2:	bf00      	nop
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <ui_handle_events>:
//        case SDLK_RIGHT: gamepad_get_state()->right = down; break;
//    }

}

void ui_handle_events() {
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
//
//        if (e.type == SDL_WINDOWEVENT && e.window.event == SDL_WINDOWEVENT_CLOSE) {
//            emu_get_context()->die = true;
//        }
//    }
}
 80060c0:	bf00      	nop
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
	...

080060cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80060cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006104 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80060d0:	480d      	ldr	r0, [pc, #52]	; (8006108 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80060d2:	490e      	ldr	r1, [pc, #56]	; (800610c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80060d4:	4a0e      	ldr	r2, [pc, #56]	; (8006110 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80060d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060d8:	e002      	b.n	80060e0 <LoopCopyDataInit>

080060da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80060dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80060de:	3304      	adds	r3, #4

080060e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80060e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80060e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060e4:	d3f9      	bcc.n	80060da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060e6:	4a0b      	ldr	r2, [pc, #44]	; (8006114 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80060e8:	4c0b      	ldr	r4, [pc, #44]	; (8006118 <LoopFillZerobss+0x26>)
  movs r3, #0
 80060ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060ec:	e001      	b.n	80060f2 <LoopFillZerobss>

080060ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060f0:	3204      	adds	r2, #4

080060f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060f4:	d3fb      	bcc.n	80060ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80060f6:	f7ff fea5 	bl	8005e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060fa:	f007 ff63 	bl	800dfc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80060fe:	f7fd fc9f 	bl	8003a40 <main>
  bx  lr    
 8006102:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006104:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8006108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800610c:	20000b38 	.word	0x20000b38
  ldr r2, =_sidata
 8006110:	0800fdc8 	.word	0x0800fdc8
  ldr r2, =_sbss
 8006114:	20000b38 	.word	0x20000b38
  ldr r4, =_ebss
 8006118:	20005cc0 	.word	0x20005cc0

0800611c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800611c:	e7fe      	b.n	800611c <ADC_IRQHandler>

0800611e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006122:	2003      	movs	r0, #3
 8006124:	f000 f94c 	bl	80063c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006128:	2000      	movs	r0, #0
 800612a:	f000 f805 	bl	8006138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800612e:	f7ff fbab 	bl	8005888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006140:	4b12      	ldr	r3, [pc, #72]	; (800618c <HAL_InitTick+0x54>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	4b12      	ldr	r3, [pc, #72]	; (8006190 <HAL_InitTick+0x58>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	4619      	mov	r1, r3
 800614a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800614e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006152:	fbb2 f3f3 	udiv	r3, r2, r3
 8006156:	4618      	mov	r0, r3
 8006158:	f000 f967 	bl	800642a <HAL_SYSTICK_Config>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e00e      	b.n	8006184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b0f      	cmp	r3, #15
 800616a:	d80a      	bhi.n	8006182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800616c:	2200      	movs	r2, #0
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006174:	f000 f92f 	bl	80063d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006178:	4a06      	ldr	r2, [pc, #24]	; (8006194 <HAL_InitTick+0x5c>)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	e000      	b.n	8006184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
}
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20000ac8 	.word	0x20000ac8
 8006190:	20000ad0 	.word	0x20000ad0
 8006194:	20000acc 	.word	0x20000acc

08006198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800619c:	4b06      	ldr	r3, [pc, #24]	; (80061b8 <HAL_IncTick+0x20>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <HAL_IncTick+0x24>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4413      	add	r3, r2
 80061a8:	4a04      	ldr	r2, [pc, #16]	; (80061bc <HAL_IncTick+0x24>)
 80061aa:	6013      	str	r3, [r2, #0]
}
 80061ac:	bf00      	nop
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	20000ad0 	.word	0x20000ad0
 80061bc:	20005844 	.word	0x20005844

080061c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
  return uwTick;
 80061c4:	4b03      	ldr	r3, [pc, #12]	; (80061d4 <HAL_GetTick+0x14>)
 80061c6:	681b      	ldr	r3, [r3, #0]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20005844 	.word	0x20005844

080061d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80061e0:	f7ff ffee 	bl	80061c0 <HAL_GetTick>
 80061e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f0:	d005      	beq.n	80061fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80061f2:	4b0a      	ldr	r3, [pc, #40]	; (800621c <HAL_Delay+0x44>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4413      	add	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80061fe:	bf00      	nop
 8006200:	f7ff ffde 	bl	80061c0 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	429a      	cmp	r2, r3
 800620e:	d8f7      	bhi.n	8006200 <HAL_Delay+0x28>
  {
  }
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000ad0 	.word	0x20000ad0

08006220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <__NVIC_SetPriorityGrouping+0x40>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800623c:	4013      	ands	r3, r2
 800623e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006248:	4b06      	ldr	r3, [pc, #24]	; (8006264 <__NVIC_SetPriorityGrouping+0x44>)
 800624a:	4313      	orrs	r3, r2
 800624c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800624e:	4a04      	ldr	r2, [pc, #16]	; (8006260 <__NVIC_SetPriorityGrouping+0x40>)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	60d3      	str	r3, [r2, #12]
}
 8006254:	bf00      	nop
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	e000ed00 	.word	0xe000ed00
 8006264:	05fa0000 	.word	0x05fa0000

08006268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <__NVIC_GetPriorityGrouping+0x18>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	0a1b      	lsrs	r3, r3, #8
 8006272:	f003 0307 	and.w	r3, r3, #7
}
 8006276:	4618      	mov	r0, r3
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	e000ed00 	.word	0xe000ed00

08006284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800628e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006292:	2b00      	cmp	r3, #0
 8006294:	db0b      	blt.n	80062ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	f003 021f 	and.w	r2, r3, #31
 800629c:	4907      	ldr	r1, [pc, #28]	; (80062bc <__NVIC_EnableIRQ+0x38>)
 800629e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a2:	095b      	lsrs	r3, r3, #5
 80062a4:	2001      	movs	r0, #1
 80062a6:	fa00 f202 	lsl.w	r2, r0, r2
 80062aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	e000e100 	.word	0xe000e100

080062c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	6039      	str	r1, [r7, #0]
 80062ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	db0a      	blt.n	80062ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	490c      	ldr	r1, [pc, #48]	; (800630c <__NVIC_SetPriority+0x4c>)
 80062da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062de:	0112      	lsls	r2, r2, #4
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	440b      	add	r3, r1
 80062e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062e8:	e00a      	b.n	8006300 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	4908      	ldr	r1, [pc, #32]	; (8006310 <__NVIC_SetPriority+0x50>)
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	3b04      	subs	r3, #4
 80062f8:	0112      	lsls	r2, r2, #4
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	440b      	add	r3, r1
 80062fe:	761a      	strb	r2, [r3, #24]
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	e000e100 	.word	0xe000e100
 8006310:	e000ed00 	.word	0xe000ed00

08006314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006314:	b480      	push	{r7}
 8006316:	b089      	sub	sp, #36	; 0x24
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	f1c3 0307 	rsb	r3, r3, #7
 800632e:	2b04      	cmp	r3, #4
 8006330:	bf28      	it	cs
 8006332:	2304      	movcs	r3, #4
 8006334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	3304      	adds	r3, #4
 800633a:	2b06      	cmp	r3, #6
 800633c:	d902      	bls.n	8006344 <NVIC_EncodePriority+0x30>
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	3b03      	subs	r3, #3
 8006342:	e000      	b.n	8006346 <NVIC_EncodePriority+0x32>
 8006344:	2300      	movs	r3, #0
 8006346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	fa02 f303 	lsl.w	r3, r2, r3
 8006352:	43da      	mvns	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	401a      	ands	r2, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800635c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	fa01 f303 	lsl.w	r3, r1, r3
 8006366:	43d9      	mvns	r1, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800636c:	4313      	orrs	r3, r2
         );
}
 800636e:	4618      	mov	r0, r3
 8006370:	3724      	adds	r7, #36	; 0x24
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
	...

0800637c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3b01      	subs	r3, #1
 8006388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800638c:	d301      	bcc.n	8006392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800638e:	2301      	movs	r3, #1
 8006390:	e00f      	b.n	80063b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006392:	4a0a      	ldr	r2, [pc, #40]	; (80063bc <SysTick_Config+0x40>)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3b01      	subs	r3, #1
 8006398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800639a:	210f      	movs	r1, #15
 800639c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063a0:	f7ff ff8e 	bl	80062c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063a4:	4b05      	ldr	r3, [pc, #20]	; (80063bc <SysTick_Config+0x40>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063aa:	4b04      	ldr	r3, [pc, #16]	; (80063bc <SysTick_Config+0x40>)
 80063ac:	2207      	movs	r2, #7
 80063ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	e000e010 	.word	0xe000e010

080063c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff ff29 	bl	8006220 <__NVIC_SetPriorityGrouping>
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b086      	sub	sp, #24
 80063da:	af00      	add	r7, sp, #0
 80063dc:	4603      	mov	r3, r0
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063e8:	f7ff ff3e 	bl	8006268 <__NVIC_GetPriorityGrouping>
 80063ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	6978      	ldr	r0, [r7, #20]
 80063f4:	f7ff ff8e 	bl	8006314 <NVIC_EncodePriority>
 80063f8:	4602      	mov	r2, r0
 80063fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063fe:	4611      	mov	r1, r2
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff ff5d 	bl	80062c0 <__NVIC_SetPriority>
}
 8006406:	bf00      	nop
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b082      	sub	sp, #8
 8006412:	af00      	add	r7, sp, #0
 8006414:	4603      	mov	r3, r0
 8006416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff ff31 	bl	8006284 <__NVIC_EnableIRQ>
}
 8006422:	bf00      	nop
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff ffa2 	bl	800637c <SysTick_Config>
 8006438:	4603      	mov	r3, r0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
	...

08006444 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e054      	b.n	8006500 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	7f5b      	ldrb	r3, [r3, #29]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d105      	bne.n	800646c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff fa32 	bl	80058d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	791b      	ldrb	r3, [r3, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10c      	bne.n	8006494 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a22      	ldr	r2, [pc, #136]	; (8006508 <HAL_CRC_Init+0xc4>)
 8006480:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0218 	bic.w	r2, r2, #24
 8006490:	609a      	str	r2, [r3, #8]
 8006492:	e00c      	b.n	80064ae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6899      	ldr	r1, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	461a      	mov	r2, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f834 	bl	800650c <HAL_CRCEx_Polynomial_Set>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e028      	b.n	8006500 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	795b      	ldrb	r3, [r3, #5]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d105      	bne.n	80064c2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064be:	611a      	str	r2, [r3, #16]
 80064c0:	e004      	b.n	80064cc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6912      	ldr	r2, [r2, #16]
 80064ca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	695a      	ldr	r2, [r3, #20]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699a      	ldr	r2, [r3, #24]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	04c11db7 	.word	0x04c11db7

0800650c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800651c:	231f      	movs	r3, #31
 800651e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006520:	bf00      	nop
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1e5a      	subs	r2, r3, #1
 8006526:	613a      	str	r2, [r7, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d009      	beq.n	8006540 <HAL_CRCEx_Polynomial_Set+0x34>
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	fa22 f303 	lsr.w	r3, r2, r3
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_CRCEx_Polynomial_Set+0x16>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b18      	cmp	r3, #24
 8006544:	d846      	bhi.n	80065d4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006546:	a201      	add	r2, pc, #4	; (adr r2, 800654c <HAL_CRCEx_Polynomial_Set+0x40>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	080065db 	.word	0x080065db
 8006550:	080065d5 	.word	0x080065d5
 8006554:	080065d5 	.word	0x080065d5
 8006558:	080065d5 	.word	0x080065d5
 800655c:	080065d5 	.word	0x080065d5
 8006560:	080065d5 	.word	0x080065d5
 8006564:	080065d5 	.word	0x080065d5
 8006568:	080065d5 	.word	0x080065d5
 800656c:	080065c9 	.word	0x080065c9
 8006570:	080065d5 	.word	0x080065d5
 8006574:	080065d5 	.word	0x080065d5
 8006578:	080065d5 	.word	0x080065d5
 800657c:	080065d5 	.word	0x080065d5
 8006580:	080065d5 	.word	0x080065d5
 8006584:	080065d5 	.word	0x080065d5
 8006588:	080065d5 	.word	0x080065d5
 800658c:	080065bd 	.word	0x080065bd
 8006590:	080065d5 	.word	0x080065d5
 8006594:	080065d5 	.word	0x080065d5
 8006598:	080065d5 	.word	0x080065d5
 800659c:	080065d5 	.word	0x080065d5
 80065a0:	080065d5 	.word	0x080065d5
 80065a4:	080065d5 	.word	0x080065d5
 80065a8:	080065d5 	.word	0x080065d5
 80065ac:	080065b1 	.word	0x080065b1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	2b06      	cmp	r3, #6
 80065b4:	d913      	bls.n	80065de <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80065ba:	e010      	b.n	80065de <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b07      	cmp	r3, #7
 80065c0:	d90f      	bls.n	80065e2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80065c6:	e00c      	b.n	80065e2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b0f      	cmp	r3, #15
 80065cc:	d90b      	bls.n	80065e6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80065d2:	e008      	b.n	80065e6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
      break;
 80065d8:	e006      	b.n	80065e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80065da:	bf00      	nop
 80065dc:	e004      	b.n	80065e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80065de:	bf00      	nop
 80065e0:	e002      	b.n	80065e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80065e2:	bf00      	nop
 80065e4:	e000      	b.n	80065e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80065e6:	bf00      	nop
  }
  if (status == HAL_OK)
 80065e8:	7dfb      	ldrb	r3, [r7, #23]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10d      	bne.n	800660a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f023 0118 	bic.w	r1, r3, #24
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	430a      	orrs	r2, r1
 8006608:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800660a:	7dfb      	ldrb	r3, [r7, #23]
}
 800660c:	4618      	mov	r0, r3
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006624:	f7ff fdcc 	bl	80061c0 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e099      	b.n	8006768 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0201 	bic.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006654:	e00f      	b.n	8006676 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006656:	f7ff fdb3 	bl	80061c0 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b05      	cmp	r3, #5
 8006662:	d908      	bls.n	8006676 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2203      	movs	r2, #3
 800666e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e078      	b.n	8006768 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e8      	bne.n	8006656 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4b38      	ldr	r3, [pc, #224]	; (8006770 <HAL_DMA_Init+0x158>)
 8006690:	4013      	ands	r3, r2
 8006692:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d107      	bne.n	80066e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d8:	4313      	orrs	r3, r2
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f023 0307 	bic.w	r3, r3, #7
 80066f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	2b04      	cmp	r3, #4
 8006708:	d117      	bne.n	800673a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00e      	beq.n	800673a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 faa5 	bl	8006c6c <DMA_CheckFifoParam>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2240      	movs	r2, #64	; 0x40
 800672c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006736:	2301      	movs	r3, #1
 8006738:	e016      	b.n	8006768 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fa5c 	bl	8006c00 <DMA_CalcBaseAndBitshift>
 8006748:	4603      	mov	r3, r0
 800674a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006750:	223f      	movs	r2, #63	; 0x3f
 8006752:	409a      	lsls	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	e010803f 	.word	0xe010803f

08006774 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_DMA_Start_IT+0x26>
 8006796:	2302      	movs	r3, #2
 8006798:	e048      	b.n	800682c <HAL_DMA_Start_IT+0xb8>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d137      	bne.n	800681e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2202      	movs	r2, #2
 80067b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 f9ee 	bl	8006ba4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067cc:	223f      	movs	r2, #63	; 0x3f
 80067ce:	409a      	lsls	r2, r3
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0216 	orr.w	r2, r2, #22
 80067e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695a      	ldr	r2, [r3, #20]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0208 	orr.w	r2, r2, #8
 800680a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0201 	orr.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	e005      	b.n	800682a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006826:	2302      	movs	r3, #2
 8006828:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d004      	beq.n	8006852 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2280      	movs	r2, #128	; 0x80
 800684c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e00c      	b.n	800686c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2205      	movs	r2, #5
 8006856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0201 	bic.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006884:	4b92      	ldr	r3, [pc, #584]	; (8006ad0 <HAL_DMA_IRQHandler+0x258>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a92      	ldr	r2, [pc, #584]	; (8006ad4 <HAL_DMA_IRQHandler+0x25c>)
 800688a:	fba2 2303 	umull	r2, r3, r2, r3
 800688e:	0a9b      	lsrs	r3, r3, #10
 8006890:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006896:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a2:	2208      	movs	r2, #8
 80068a4:	409a      	lsls	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4013      	ands	r3, r2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01a      	beq.n	80068e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d013      	beq.n	80068e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0204 	bic.w	r2, r2, #4
 80068ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d0:	2208      	movs	r2, #8
 80068d2:	409a      	lsls	r2, r3
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068dc:	f043 0201 	orr.w	r2, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e8:	2201      	movs	r2, #1
 80068ea:	409a      	lsls	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4013      	ands	r3, r2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d012      	beq.n	800691a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006906:	2201      	movs	r2, #1
 8006908:	409a      	lsls	r2, r3
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006912:	f043 0202 	orr.w	r2, r3, #2
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691e:	2204      	movs	r2, #4
 8006920:	409a      	lsls	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4013      	ands	r3, r2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d012      	beq.n	8006950 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693c:	2204      	movs	r2, #4
 800693e:	409a      	lsls	r2, r3
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006948:	f043 0204 	orr.w	r2, r3, #4
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006954:	2210      	movs	r2, #16
 8006956:	409a      	lsls	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4013      	ands	r3, r2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d043      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d03c      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006972:	2210      	movs	r2, #16
 8006974:	409a      	lsls	r2, r3
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d018      	beq.n	80069ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d108      	bne.n	80069a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d024      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
 80069a6:	e01f      	b.n	80069e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01b      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	4798      	blx	r3
 80069b8:	e016      	b.n	80069e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d107      	bne.n	80069d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0208 	bic.w	r2, r2, #8
 80069d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ec:	2220      	movs	r2, #32
 80069ee:	409a      	lsls	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 808e 	beq.w	8006b16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0310 	and.w	r3, r3, #16
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8086 	beq.w	8006b16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0e:	2220      	movs	r2, #32
 8006a10:	409a      	lsls	r2, r3
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b05      	cmp	r3, #5
 8006a20:	d136      	bne.n	8006a90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0216 	bic.w	r2, r2, #22
 8006a30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695a      	ldr	r2, [r3, #20]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d103      	bne.n	8006a52 <HAL_DMA_IRQHandler+0x1da>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0208 	bic.w	r2, r2, #8
 8006a60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a66:	223f      	movs	r2, #63	; 0x3f
 8006a68:	409a      	lsls	r2, r3
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d07d      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
        }
        return;
 8006a8e:	e078      	b.n	8006b82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d01c      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d108      	bne.n	8006abe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d030      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
 8006abc:	e02b      	b.n	8006b16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d027      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
 8006ace:	e022      	b.n	8006b16 <HAL_DMA_IRQHandler+0x29e>
 8006ad0:	20000ac8 	.word	0x20000ac8
 8006ad4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10f      	bne.n	8006b06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0210 	bic.w	r2, r2, #16
 8006af4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d032      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d022      	beq.n	8006b70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2205      	movs	r2, #5
 8006b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0201 	bic.w	r2, r2, #1
 8006b40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	3301      	adds	r3, #1
 8006b46:	60bb      	str	r3, [r7, #8]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d307      	bcc.n	8006b5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f2      	bne.n	8006b42 <HAL_DMA_IRQHandler+0x2ca>
 8006b5c:	e000      	b.n	8006b60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006b5e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
 8006b80:	e000      	b.n	8006b84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006b82:	bf00      	nop
    }
  }
}
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop

08006b8c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	d108      	bne.n	8006be4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006be2:	e007      	b.n	8006bf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	60da      	str	r2, [r3, #12]
}
 8006bf4:	bf00      	nop
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	3b10      	subs	r3, #16
 8006c10:	4a13      	ldr	r2, [pc, #76]	; (8006c60 <DMA_CalcBaseAndBitshift+0x60>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	091b      	lsrs	r3, r3, #4
 8006c18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c1a:	4a12      	ldr	r2, [pc, #72]	; (8006c64 <DMA_CalcBaseAndBitshift+0x64>)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d908      	bls.n	8006c40 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <DMA_CalcBaseAndBitshift+0x68>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	1d1a      	adds	r2, r3, #4
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	659a      	str	r2, [r3, #88]	; 0x58
 8006c3e:	e006      	b.n	8006c4e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	4b08      	ldr	r3, [pc, #32]	; (8006c68 <DMA_CalcBaseAndBitshift+0x68>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	aaaaaaab 	.word	0xaaaaaaab
 8006c64:	0800fc84 	.word	0x0800fc84
 8006c68:	fffffc00 	.word	0xfffffc00

08006c6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d11f      	bne.n	8006cc6 <DMA_CheckFifoParam+0x5a>
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d856      	bhi.n	8006d3a <DMA_CheckFifoParam+0xce>
 8006c8c:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <DMA_CheckFifoParam+0x28>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006ca5 	.word	0x08006ca5
 8006c98:	08006cb7 	.word	0x08006cb7
 8006c9c:	08006ca5 	.word	0x08006ca5
 8006ca0:	08006d3b 	.word	0x08006d3b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d046      	beq.n	8006d3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cb4:	e043      	b.n	8006d3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006cbe:	d140      	bne.n	8006d42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cc4:	e03d      	b.n	8006d42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cce:	d121      	bne.n	8006d14 <DMA_CheckFifoParam+0xa8>
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d837      	bhi.n	8006d46 <DMA_CheckFifoParam+0xda>
 8006cd6:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <DMA_CheckFifoParam+0x70>)
 8006cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cdc:	08006ced 	.word	0x08006ced
 8006ce0:	08006cf3 	.word	0x08006cf3
 8006ce4:	08006ced 	.word	0x08006ced
 8006ce8:	08006d05 	.word	0x08006d05
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf0:	e030      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d025      	beq.n	8006d4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d02:	e022      	b.n	8006d4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d0c:	d11f      	bne.n	8006d4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d12:	e01c      	b.n	8006d4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d903      	bls.n	8006d22 <DMA_CheckFifoParam+0xb6>
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d003      	beq.n	8006d28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d20:	e018      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	73fb      	strb	r3, [r7, #15]
      break;
 8006d26:	e015      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00e      	beq.n	8006d52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	73fb      	strb	r3, [r7, #15]
      break;
 8006d38:	e00b      	b.n	8006d52 <DMA_CheckFifoParam+0xe6>
      break;
 8006d3a:	bf00      	nop
 8006d3c:	e00a      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
      break;
 8006d3e:	bf00      	nop
 8006d40:	e008      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
      break;
 8006d42:	bf00      	nop
 8006d44:	e006      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
      break;
 8006d46:	bf00      	nop
 8006d48:	e004      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
      break;
 8006d4a:	bf00      	nop
 8006d4c:	e002      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
      break;   
 8006d4e:	bf00      	nop
 8006d50:	e000      	b.n	8006d54 <DMA_CheckFifoParam+0xe8>
      break;
 8006d52:	bf00      	nop
    }
  } 
  
  return status; 
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop

08006d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b089      	sub	sp, #36	; 0x24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006d72:	2300      	movs	r3, #0
 8006d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006d7e:	2300      	movs	r3, #0
 8006d80:	61fb      	str	r3, [r7, #28]
 8006d82:	e175      	b.n	8007070 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006d84:	2201      	movs	r2, #1
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4013      	ands	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	f040 8164 	bne.w	800706a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d005      	beq.n	8006dba <HAL_GPIO_Init+0x56>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d130      	bne.n	8006e1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006df0:	2201      	movs	r2, #1
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	fa02 f303 	lsl.w	r3, r2, r3
 8006df8:	43db      	mvns	r3, r3
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	091b      	lsrs	r3, r3, #4
 8006e06:	f003 0201 	and.w	r2, r3, #1
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d017      	beq.n	8006e58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	2203      	movs	r2, #3
 8006e34:	fa02 f303 	lsl.w	r3, r2, r3
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d123      	bne.n	8006eac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	08da      	lsrs	r2, r3, #3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3208      	adds	r2, #8
 8006e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	220f      	movs	r2, #15
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	43db      	mvns	r3, r3
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	4013      	ands	r3, r2
 8006e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	691a      	ldr	r2, [r3, #16]
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	fa02 f303 	lsl.w	r3, r2, r3
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	08da      	lsrs	r2, r3, #3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3208      	adds	r2, #8
 8006ea6:	69b9      	ldr	r1, [r7, #24]
 8006ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	2203      	movs	r2, #3
 8006eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebc:	43db      	mvns	r3, r3
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f003 0203 	and.w	r2, r3, #3
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 80be 	beq.w	800706a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006eee:	4b66      	ldr	r3, [pc, #408]	; (8007088 <HAL_GPIO_Init+0x324>)
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef2:	4a65      	ldr	r2, [pc, #404]	; (8007088 <HAL_GPIO_Init+0x324>)
 8006ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8006efa:	4b63      	ldr	r3, [pc, #396]	; (8007088 <HAL_GPIO_Init+0x324>)
 8006efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006f06:	4a61      	ldr	r2, [pc, #388]	; (800708c <HAL_GPIO_Init+0x328>)
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	089b      	lsrs	r3, r3, #2
 8006f0c:	3302      	adds	r3, #2
 8006f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	220f      	movs	r2, #15
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	43db      	mvns	r3, r3
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	4013      	ands	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a58      	ldr	r2, [pc, #352]	; (8007090 <HAL_GPIO_Init+0x32c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d037      	beq.n	8006fa2 <HAL_GPIO_Init+0x23e>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a57      	ldr	r2, [pc, #348]	; (8007094 <HAL_GPIO_Init+0x330>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d031      	beq.n	8006f9e <HAL_GPIO_Init+0x23a>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a56      	ldr	r2, [pc, #344]	; (8007098 <HAL_GPIO_Init+0x334>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d02b      	beq.n	8006f9a <HAL_GPIO_Init+0x236>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a55      	ldr	r2, [pc, #340]	; (800709c <HAL_GPIO_Init+0x338>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d025      	beq.n	8006f96 <HAL_GPIO_Init+0x232>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a54      	ldr	r2, [pc, #336]	; (80070a0 <HAL_GPIO_Init+0x33c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d01f      	beq.n	8006f92 <HAL_GPIO_Init+0x22e>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a53      	ldr	r2, [pc, #332]	; (80070a4 <HAL_GPIO_Init+0x340>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d019      	beq.n	8006f8e <HAL_GPIO_Init+0x22a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a52      	ldr	r2, [pc, #328]	; (80070a8 <HAL_GPIO_Init+0x344>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d013      	beq.n	8006f8a <HAL_GPIO_Init+0x226>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a51      	ldr	r2, [pc, #324]	; (80070ac <HAL_GPIO_Init+0x348>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00d      	beq.n	8006f86 <HAL_GPIO_Init+0x222>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a50      	ldr	r2, [pc, #320]	; (80070b0 <HAL_GPIO_Init+0x34c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d007      	beq.n	8006f82 <HAL_GPIO_Init+0x21e>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a4f      	ldr	r2, [pc, #316]	; (80070b4 <HAL_GPIO_Init+0x350>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d101      	bne.n	8006f7e <HAL_GPIO_Init+0x21a>
 8006f7a:	2309      	movs	r3, #9
 8006f7c:	e012      	b.n	8006fa4 <HAL_GPIO_Init+0x240>
 8006f7e:	230a      	movs	r3, #10
 8006f80:	e010      	b.n	8006fa4 <HAL_GPIO_Init+0x240>
 8006f82:	2308      	movs	r3, #8
 8006f84:	e00e      	b.n	8006fa4 <HAL_GPIO_Init+0x240>
 8006f86:	2307      	movs	r3, #7
 8006f88:	e00c      	b.n	8006fa4 <HAL_GPIO_Init+0x240>
 8006f8a:	2306      	movs	r3, #6
 8006f8c:	e00a      	b.n	8006fa4 <HAL_GPIO_Init+0x240>
 8006f8e:	2305      	movs	r3, #5
 8006f90:	e008      	b.n	8006fa4 <HAL_GPIO_Init+0x240>
 8006f92:	2304      	movs	r3, #4
 8006f94:	e006      	b.n	8006fa4 <HAL_GPIO_Init+0x240>
 8006f96:	2303      	movs	r3, #3
 8006f98:	e004      	b.n	8006fa4 <HAL_GPIO_Init+0x240>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e002      	b.n	8006fa4 <HAL_GPIO_Init+0x240>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e000      	b.n	8006fa4 <HAL_GPIO_Init+0x240>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	69fa      	ldr	r2, [r7, #28]
 8006fa6:	f002 0203 	and.w	r2, r2, #3
 8006faa:	0092      	lsls	r2, r2, #2
 8006fac:	4093      	lsls	r3, r2
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006fb4:	4935      	ldr	r1, [pc, #212]	; (800708c <HAL_GPIO_Init+0x328>)
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	089b      	lsrs	r3, r3, #2
 8006fba:	3302      	adds	r3, #2
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006fc2:	4b3d      	ldr	r3, [pc, #244]	; (80070b8 <HAL_GPIO_Init+0x354>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	43db      	mvns	r3, r3
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006fe6:	4a34      	ldr	r2, [pc, #208]	; (80070b8 <HAL_GPIO_Init+0x354>)
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006fec:	4b32      	ldr	r3, [pc, #200]	; (80070b8 <HAL_GPIO_Init+0x354>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	43db      	mvns	r3, r3
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007010:	4a29      	ldr	r2, [pc, #164]	; (80070b8 <HAL_GPIO_Init+0x354>)
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007016:	4b28      	ldr	r3, [pc, #160]	; (80070b8 <HAL_GPIO_Init+0x354>)
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	43db      	mvns	r3, r3
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	4013      	ands	r3, r2
 8007024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800703a:	4a1f      	ldr	r2, [pc, #124]	; (80070b8 <HAL_GPIO_Init+0x354>)
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007040:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <HAL_GPIO_Init+0x354>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	43db      	mvns	r3, r3
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	4013      	ands	r3, r2
 800704e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	4313      	orrs	r3, r2
 8007062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007064:	4a14      	ldr	r2, [pc, #80]	; (80070b8 <HAL_GPIO_Init+0x354>)
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	3301      	adds	r3, #1
 800706e:	61fb      	str	r3, [r7, #28]
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	2b0f      	cmp	r3, #15
 8007074:	f67f ae86 	bls.w	8006d84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	3724      	adds	r7, #36	; 0x24
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	40023800 	.word	0x40023800
 800708c:	40013800 	.word	0x40013800
 8007090:	40020000 	.word	0x40020000
 8007094:	40020400 	.word	0x40020400
 8007098:	40020800 	.word	0x40020800
 800709c:	40020c00 	.word	0x40020c00
 80070a0:	40021000 	.word	0x40021000
 80070a4:	40021400 	.word	0x40021400
 80070a8:	40021800 	.word	0x40021800
 80070ac:	40021c00 	.word	0x40021c00
 80070b0:	40022000 	.word	0x40022000
 80070b4:	40022400 	.word	0x40022400
 80070b8:	40013c00 	.word	0x40013c00

080070bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	887b      	ldrh	r3, [r7, #2]
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80070d4:	2301      	movs	r3, #1
 80070d6:	73fb      	strb	r3, [r7, #15]
 80070d8:	e001      	b.n	80070de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80070f4:	2300      	movs	r3, #0
 80070f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e29b      	b.n	800763a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 8087 	beq.w	800721e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007110:	4b96      	ldr	r3, [pc, #600]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f003 030c 	and.w	r3, r3, #12
 8007118:	2b04      	cmp	r3, #4
 800711a:	d00c      	beq.n	8007136 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800711c:	4b93      	ldr	r3, [pc, #588]	; (800736c <HAL_RCC_OscConfig+0x280>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 030c 	and.w	r3, r3, #12
 8007124:	2b08      	cmp	r3, #8
 8007126:	d112      	bne.n	800714e <HAL_RCC_OscConfig+0x62>
 8007128:	4b90      	ldr	r3, [pc, #576]	; (800736c <HAL_RCC_OscConfig+0x280>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007134:	d10b      	bne.n	800714e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007136:	4b8d      	ldr	r3, [pc, #564]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d06c      	beq.n	800721c <HAL_RCC_OscConfig+0x130>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d168      	bne.n	800721c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e275      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007156:	d106      	bne.n	8007166 <HAL_RCC_OscConfig+0x7a>
 8007158:	4b84      	ldr	r3, [pc, #528]	; (800736c <HAL_RCC_OscConfig+0x280>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a83      	ldr	r2, [pc, #524]	; (800736c <HAL_RCC_OscConfig+0x280>)
 800715e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	e02e      	b.n	80071c4 <HAL_RCC_OscConfig+0xd8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10c      	bne.n	8007188 <HAL_RCC_OscConfig+0x9c>
 800716e:	4b7f      	ldr	r3, [pc, #508]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a7e      	ldr	r2, [pc, #504]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	4b7c      	ldr	r3, [pc, #496]	; (800736c <HAL_RCC_OscConfig+0x280>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a7b      	ldr	r2, [pc, #492]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	e01d      	b.n	80071c4 <HAL_RCC_OscConfig+0xd8>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007190:	d10c      	bne.n	80071ac <HAL_RCC_OscConfig+0xc0>
 8007192:	4b76      	ldr	r3, [pc, #472]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a75      	ldr	r2, [pc, #468]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	4b73      	ldr	r3, [pc, #460]	; (800736c <HAL_RCC_OscConfig+0x280>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a72      	ldr	r2, [pc, #456]	; (800736c <HAL_RCC_OscConfig+0x280>)
 80071a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	e00b      	b.n	80071c4 <HAL_RCC_OscConfig+0xd8>
 80071ac:	4b6f      	ldr	r3, [pc, #444]	; (800736c <HAL_RCC_OscConfig+0x280>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a6e      	ldr	r2, [pc, #440]	; (800736c <HAL_RCC_OscConfig+0x280>)
 80071b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	4b6c      	ldr	r3, [pc, #432]	; (800736c <HAL_RCC_OscConfig+0x280>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a6b      	ldr	r2, [pc, #428]	; (800736c <HAL_RCC_OscConfig+0x280>)
 80071be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d013      	beq.n	80071f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071cc:	f7fe fff8 	bl	80061c0 <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071d4:	f7fe fff4 	bl	80061c0 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b64      	cmp	r3, #100	; 0x64
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e229      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071e6:	4b61      	ldr	r3, [pc, #388]	; (800736c <HAL_RCC_OscConfig+0x280>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0f0      	beq.n	80071d4 <HAL_RCC_OscConfig+0xe8>
 80071f2:	e014      	b.n	800721e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f4:	f7fe ffe4 	bl	80061c0 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071fc:	f7fe ffe0 	bl	80061c0 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b64      	cmp	r3, #100	; 0x64
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e215      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800720e:	4b57      	ldr	r3, [pc, #348]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f0      	bne.n	80071fc <HAL_RCC_OscConfig+0x110>
 800721a:	e000      	b.n	800721e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800721c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d069      	beq.n	80072fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800722a:	4b50      	ldr	r3, [pc, #320]	; (800736c <HAL_RCC_OscConfig+0x280>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 030c 	and.w	r3, r3, #12
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007236:	4b4d      	ldr	r3, [pc, #308]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 030c 	and.w	r3, r3, #12
 800723e:	2b08      	cmp	r3, #8
 8007240:	d11c      	bne.n	800727c <HAL_RCC_OscConfig+0x190>
 8007242:	4b4a      	ldr	r3, [pc, #296]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d116      	bne.n	800727c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800724e:	4b47      	ldr	r3, [pc, #284]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d005      	beq.n	8007266 <HAL_RCC_OscConfig+0x17a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d001      	beq.n	8007266 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e1e9      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007266:	4b41      	ldr	r3, [pc, #260]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	493d      	ldr	r1, [pc, #244]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007276:	4313      	orrs	r3, r2
 8007278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800727a:	e040      	b.n	80072fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d023      	beq.n	80072cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007284:	4b39      	ldr	r3, [pc, #228]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a38      	ldr	r2, [pc, #224]	; (800736c <HAL_RCC_OscConfig+0x280>)
 800728a:	f043 0301 	orr.w	r3, r3, #1
 800728e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007290:	f7fe ff96 	bl	80061c0 <HAL_GetTick>
 8007294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007298:	f7fe ff92 	bl	80061c0 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e1c7      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072aa:	4b30      	ldr	r3, [pc, #192]	; (800736c <HAL_RCC_OscConfig+0x280>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f0      	beq.n	8007298 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072b6:	4b2d      	ldr	r3, [pc, #180]	; (800736c <HAL_RCC_OscConfig+0x280>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	00db      	lsls	r3, r3, #3
 80072c4:	4929      	ldr	r1, [pc, #164]	; (800736c <HAL_RCC_OscConfig+0x280>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	600b      	str	r3, [r1, #0]
 80072ca:	e018      	b.n	80072fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072cc:	4b27      	ldr	r3, [pc, #156]	; (800736c <HAL_RCC_OscConfig+0x280>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a26      	ldr	r2, [pc, #152]	; (800736c <HAL_RCC_OscConfig+0x280>)
 80072d2:	f023 0301 	bic.w	r3, r3, #1
 80072d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d8:	f7fe ff72 	bl	80061c0 <HAL_GetTick>
 80072dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072e0:	f7fe ff6e 	bl	80061c0 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e1a3      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072f2:	4b1e      	ldr	r3, [pc, #120]	; (800736c <HAL_RCC_OscConfig+0x280>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1f0      	bne.n	80072e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d038      	beq.n	800737c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d019      	beq.n	8007346 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007312:	4b16      	ldr	r3, [pc, #88]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007316:	4a15      	ldr	r2, [pc, #84]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731e:	f7fe ff4f 	bl	80061c0 <HAL_GetTick>
 8007322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007324:	e008      	b.n	8007338 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007326:	f7fe ff4b 	bl	80061c0 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e180      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007338:	4b0c      	ldr	r3, [pc, #48]	; (800736c <HAL_RCC_OscConfig+0x280>)
 800733a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0f0      	beq.n	8007326 <HAL_RCC_OscConfig+0x23a>
 8007344:	e01a      	b.n	800737c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007346:	4b09      	ldr	r3, [pc, #36]	; (800736c <HAL_RCC_OscConfig+0x280>)
 8007348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800734a:	4a08      	ldr	r2, [pc, #32]	; (800736c <HAL_RCC_OscConfig+0x280>)
 800734c:	f023 0301 	bic.w	r3, r3, #1
 8007350:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007352:	f7fe ff35 	bl	80061c0 <HAL_GetTick>
 8007356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007358:	e00a      	b.n	8007370 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800735a:	f7fe ff31 	bl	80061c0 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d903      	bls.n	8007370 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e166      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
 800736c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007370:	4b92      	ldr	r3, [pc, #584]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 8007372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1ee      	bne.n	800735a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 80a4 	beq.w	80074d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800738a:	4b8c      	ldr	r3, [pc, #560]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10d      	bne.n	80073b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007396:	4b89      	ldr	r3, [pc, #548]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	4a88      	ldr	r2, [pc, #544]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 800739c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a0:	6413      	str	r3, [r2, #64]	; 0x40
 80073a2:	4b86      	ldr	r3, [pc, #536]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073aa:	60bb      	str	r3, [r7, #8]
 80073ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ae:	2301      	movs	r3, #1
 80073b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073b2:	4b83      	ldr	r3, [pc, #524]	; (80075c0 <HAL_RCC_OscConfig+0x4d4>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d118      	bne.n	80073f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80073be:	4b80      	ldr	r3, [pc, #512]	; (80075c0 <HAL_RCC_OscConfig+0x4d4>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a7f      	ldr	r2, [pc, #508]	; (80075c0 <HAL_RCC_OscConfig+0x4d4>)
 80073c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073ca:	f7fe fef9 	bl	80061c0 <HAL_GetTick>
 80073ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073d0:	e008      	b.n	80073e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073d2:	f7fe fef5 	bl	80061c0 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b64      	cmp	r3, #100	; 0x64
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e12a      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073e4:	4b76      	ldr	r3, [pc, #472]	; (80075c0 <HAL_RCC_OscConfig+0x4d4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0f0      	beq.n	80073d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d106      	bne.n	8007406 <HAL_RCC_OscConfig+0x31a>
 80073f8:	4b70      	ldr	r3, [pc, #448]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 80073fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fc:	4a6f      	ldr	r2, [pc, #444]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 80073fe:	f043 0301 	orr.w	r3, r3, #1
 8007402:	6713      	str	r3, [r2, #112]	; 0x70
 8007404:	e02d      	b.n	8007462 <HAL_RCC_OscConfig+0x376>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10c      	bne.n	8007428 <HAL_RCC_OscConfig+0x33c>
 800740e:	4b6b      	ldr	r3, [pc, #428]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	4a6a      	ldr	r2, [pc, #424]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 8007414:	f023 0301 	bic.w	r3, r3, #1
 8007418:	6713      	str	r3, [r2, #112]	; 0x70
 800741a:	4b68      	ldr	r3, [pc, #416]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741e:	4a67      	ldr	r2, [pc, #412]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 8007420:	f023 0304 	bic.w	r3, r3, #4
 8007424:	6713      	str	r3, [r2, #112]	; 0x70
 8007426:	e01c      	b.n	8007462 <HAL_RCC_OscConfig+0x376>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	2b05      	cmp	r3, #5
 800742e:	d10c      	bne.n	800744a <HAL_RCC_OscConfig+0x35e>
 8007430:	4b62      	ldr	r3, [pc, #392]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 8007432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007434:	4a61      	ldr	r2, [pc, #388]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 8007436:	f043 0304 	orr.w	r3, r3, #4
 800743a:	6713      	str	r3, [r2, #112]	; 0x70
 800743c:	4b5f      	ldr	r3, [pc, #380]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 800743e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007440:	4a5e      	ldr	r2, [pc, #376]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 8007442:	f043 0301 	orr.w	r3, r3, #1
 8007446:	6713      	str	r3, [r2, #112]	; 0x70
 8007448:	e00b      	b.n	8007462 <HAL_RCC_OscConfig+0x376>
 800744a:	4b5c      	ldr	r3, [pc, #368]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 800744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744e:	4a5b      	ldr	r2, [pc, #364]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	6713      	str	r3, [r2, #112]	; 0x70
 8007456:	4b59      	ldr	r3, [pc, #356]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 8007458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745a:	4a58      	ldr	r2, [pc, #352]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 800745c:	f023 0304 	bic.w	r3, r3, #4
 8007460:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d015      	beq.n	8007496 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800746a:	f7fe fea9 	bl	80061c0 <HAL_GetTick>
 800746e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007470:	e00a      	b.n	8007488 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007472:	f7fe fea5 	bl	80061c0 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007480:	4293      	cmp	r3, r2
 8007482:	d901      	bls.n	8007488 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e0d8      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007488:	4b4c      	ldr	r3, [pc, #304]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 800748a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0ee      	beq.n	8007472 <HAL_RCC_OscConfig+0x386>
 8007494:	e014      	b.n	80074c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007496:	f7fe fe93 	bl	80061c0 <HAL_GetTick>
 800749a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800749c:	e00a      	b.n	80074b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800749e:	f7fe fe8f 	bl	80061c0 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e0c2      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074b4:	4b41      	ldr	r3, [pc, #260]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1ee      	bne.n	800749e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d105      	bne.n	80074d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074c6:	4b3d      	ldr	r3, [pc, #244]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	4a3c      	ldr	r2, [pc, #240]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 80074cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 80ae 	beq.w	8007638 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074dc:	4b37      	ldr	r3, [pc, #220]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 030c 	and.w	r3, r3, #12
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d06d      	beq.n	80075c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d14b      	bne.n	8007588 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074f0:	4b32      	ldr	r3, [pc, #200]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a31      	ldr	r2, [pc, #196]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 80074f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074fc:	f7fe fe60 	bl	80061c0 <HAL_GetTick>
 8007500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007504:	f7fe fe5c 	bl	80061c0 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b02      	cmp	r3, #2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e091      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007516:	4b29      	ldr	r3, [pc, #164]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1f0      	bne.n	8007504 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69da      	ldr	r2, [r3, #28]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	431a      	orrs	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	019b      	lsls	r3, r3, #6
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	085b      	lsrs	r3, r3, #1
 800753a:	3b01      	subs	r3, #1
 800753c:	041b      	lsls	r3, r3, #16
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	061b      	lsls	r3, r3, #24
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754c:	071b      	lsls	r3, r3, #28
 800754e:	491b      	ldr	r1, [pc, #108]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 8007550:	4313      	orrs	r3, r2
 8007552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007554:	4b19      	ldr	r3, [pc, #100]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a18      	ldr	r2, [pc, #96]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 800755a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800755e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007560:	f7fe fe2e 	bl	80061c0 <HAL_GetTick>
 8007564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007566:	e008      	b.n	800757a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007568:	f7fe fe2a 	bl	80061c0 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d901      	bls.n	800757a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e05f      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800757a:	4b10      	ldr	r3, [pc, #64]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0f0      	beq.n	8007568 <HAL_RCC_OscConfig+0x47c>
 8007586:	e057      	b.n	8007638 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007588:	4b0c      	ldr	r3, [pc, #48]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a0b      	ldr	r2, [pc, #44]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 800758e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007594:	f7fe fe14 	bl	80061c0 <HAL_GetTick>
 8007598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800759a:	e008      	b.n	80075ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800759c:	f7fe fe10 	bl	80061c0 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e045      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ae:	4b03      	ldr	r3, [pc, #12]	; (80075bc <HAL_RCC_OscConfig+0x4d0>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1f0      	bne.n	800759c <HAL_RCC_OscConfig+0x4b0>
 80075ba:	e03d      	b.n	8007638 <HAL_RCC_OscConfig+0x54c>
 80075bc:	40023800 	.word	0x40023800
 80075c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80075c4:	4b1f      	ldr	r3, [pc, #124]	; (8007644 <HAL_RCC_OscConfig+0x558>)
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d030      	beq.n	8007634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075dc:	429a      	cmp	r2, r3
 80075de:	d129      	bne.n	8007634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d122      	bne.n	8007634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075f4:	4013      	ands	r3, r2
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d119      	bne.n	8007634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760a:	085b      	lsrs	r3, r3, #1
 800760c:	3b01      	subs	r3, #1
 800760e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007610:	429a      	cmp	r2, r3
 8007612:	d10f      	bne.n	8007634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007620:	429a      	cmp	r2, r3
 8007622:	d107      	bne.n	8007634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007630:	429a      	cmp	r2, r3
 8007632:	d001      	beq.n	8007638 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e000      	b.n	800763a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	40023800 	.word	0x40023800

08007648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e0d0      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007660:	4b6a      	ldr	r3, [pc, #424]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d910      	bls.n	8007690 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800766e:	4b67      	ldr	r3, [pc, #412]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f023 020f 	bic.w	r2, r3, #15
 8007676:	4965      	ldr	r1, [pc, #404]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	4313      	orrs	r3, r2
 800767c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800767e:	4b63      	ldr	r3, [pc, #396]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d001      	beq.n	8007690 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e0b8      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d020      	beq.n	80076de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076a8:	4b59      	ldr	r3, [pc, #356]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	4a58      	ldr	r2, [pc, #352]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80076b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0308 	and.w	r3, r3, #8
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076c0:	4b53      	ldr	r3, [pc, #332]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	4a52      	ldr	r2, [pc, #328]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80076ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076cc:	4b50      	ldr	r3, [pc, #320]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	494d      	ldr	r1, [pc, #308]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d040      	beq.n	800776c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d107      	bne.n	8007702 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076f2:	4b47      	ldr	r3, [pc, #284]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d115      	bne.n	800772a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e07f      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d107      	bne.n	800771a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800770a:	4b41      	ldr	r3, [pc, #260]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e073      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800771a:	4b3d      	ldr	r3, [pc, #244]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e06b      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800772a:	4b39      	ldr	r3, [pc, #228]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f023 0203 	bic.w	r2, r3, #3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	4936      	ldr	r1, [pc, #216]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 8007738:	4313      	orrs	r3, r2
 800773a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800773c:	f7fe fd40 	bl	80061c0 <HAL_GetTick>
 8007740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007742:	e00a      	b.n	800775a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007744:	f7fe fd3c 	bl	80061c0 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007752:	4293      	cmp	r3, r2
 8007754:	d901      	bls.n	800775a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e053      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800775a:	4b2d      	ldr	r3, [pc, #180]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 020c 	and.w	r2, r3, #12
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	429a      	cmp	r2, r3
 800776a:	d1eb      	bne.n	8007744 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800776c:	4b27      	ldr	r3, [pc, #156]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d210      	bcs.n	800779c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800777a:	4b24      	ldr	r3, [pc, #144]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f023 020f 	bic.w	r2, r3, #15
 8007782:	4922      	ldr	r1, [pc, #136]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	4313      	orrs	r3, r2
 8007788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800778a:	4b20      	ldr	r3, [pc, #128]	; (800780c <HAL_RCC_ClockConfig+0x1c4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d001      	beq.n	800779c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e032      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d008      	beq.n	80077ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077a8:	4b19      	ldr	r3, [pc, #100]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	4916      	ldr	r1, [pc, #88]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0308 	and.w	r3, r3, #8
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80077c6:	4b12      	ldr	r3, [pc, #72]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	490e      	ldr	r1, [pc, #56]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80077da:	f000 f885 	bl	80078e8 <HAL_RCC_GetSysClockFreq>
 80077de:	4602      	mov	r2, r0
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	091b      	lsrs	r3, r3, #4
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	490a      	ldr	r1, [pc, #40]	; (8007814 <HAL_RCC_ClockConfig+0x1cc>)
 80077ec:	5ccb      	ldrb	r3, [r1, r3]
 80077ee:	fa22 f303 	lsr.w	r3, r2, r3
 80077f2:	4a09      	ldr	r2, [pc, #36]	; (8007818 <HAL_RCC_ClockConfig+0x1d0>)
 80077f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80077f6:	4b09      	ldr	r3, [pc, #36]	; (800781c <HAL_RCC_ClockConfig+0x1d4>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe fc9c 	bl	8006138 <HAL_InitTick>

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40023c00 	.word	0x40023c00
 8007810:	40023800 	.word	0x40023800
 8007814:	0800fc6c 	.word	0x0800fc6c
 8007818:	20000ac8 	.word	0x20000ac8
 800781c:	20000acc 	.word	0x20000acc

08007820 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08c      	sub	sp, #48	; 0x30
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d127      	bne.n	8007882 <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007832:	4b2a      	ldr	r3, [pc, #168]	; (80078dc <HAL_RCC_MCOConfig+0xbc>)
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007836:	4a29      	ldr	r2, [pc, #164]	; (80078dc <HAL_RCC_MCOConfig+0xbc>)
 8007838:	f043 0301 	orr.w	r3, r3, #1
 800783c:	6313      	str	r3, [r2, #48]	; 0x30
 800783e:	4b27      	ldr	r3, [pc, #156]	; (80078dc <HAL_RCC_MCOConfig+0xbc>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	61bb      	str	r3, [r7, #24]
 8007848:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800784a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800784e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007850:	2302      	movs	r3, #2
 8007852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8007854:	2303      	movs	r3, #3
 8007856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007858:	2300      	movs	r3, #0
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800785c:	2300      	movs	r3, #0
 800785e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007860:	f107 031c 	add.w	r3, r7, #28
 8007864:	4619      	mov	r1, r3
 8007866:	481e      	ldr	r0, [pc, #120]	; (80078e0 <HAL_RCC_MCOConfig+0xc0>)
 8007868:	f7ff fa7c 	bl	8006d64 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800786c:	4b1b      	ldr	r3, [pc, #108]	; (80078dc <HAL_RCC_MCOConfig+0xbc>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	430b      	orrs	r3, r1
 800787a:	4918      	ldr	r1, [pc, #96]	; (80078dc <HAL_RCC_MCOConfig+0xbc>)
 800787c:	4313      	orrs	r3, r2
 800787e:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8007880:	e027      	b.n	80078d2 <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8007882:	4b16      	ldr	r3, [pc, #88]	; (80078dc <HAL_RCC_MCOConfig+0xbc>)
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	4a15      	ldr	r2, [pc, #84]	; (80078dc <HAL_RCC_MCOConfig+0xbc>)
 8007888:	f043 0304 	orr.w	r3, r3, #4
 800788c:	6313      	str	r3, [r2, #48]	; 0x30
 800788e:	4b13      	ldr	r3, [pc, #76]	; (80078dc <HAL_RCC_MCOConfig+0xbc>)
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800789a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800789e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078a0:	2302      	movs	r3, #2
 80078a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80078a4:	2303      	movs	r3, #3
 80078a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a8:	2300      	movs	r3, #0
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80078ac:	2300      	movs	r3, #0
 80078ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80078b0:	f107 031c 	add.w	r3, r7, #28
 80078b4:	4619      	mov	r1, r3
 80078b6:	480b      	ldr	r0, [pc, #44]	; (80078e4 <HAL_RCC_MCOConfig+0xc4>)
 80078b8:	f7ff fa54 	bl	8006d64 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 80078bc:	4b07      	ldr	r3, [pc, #28]	; (80078dc <HAL_RCC_MCOConfig+0xbc>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	00d9      	lsls	r1, r3, #3
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	430b      	orrs	r3, r1
 80078cc:	4903      	ldr	r1, [pc, #12]	; (80078dc <HAL_RCC_MCOConfig+0xbc>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	608b      	str	r3, [r1, #8]
}
 80078d2:	bf00      	nop
 80078d4:	3730      	adds	r7, #48	; 0x30
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	40023800 	.word	0x40023800
 80078e0:	40020000 	.word	0x40020000
 80078e4:	40020800 	.word	0x40020800

080078e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078e8:	b5b0      	push	{r4, r5, r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80078ee:	2100      	movs	r1, #0
 80078f0:	6079      	str	r1, [r7, #4]
 80078f2:	2100      	movs	r1, #0
 80078f4:	60f9      	str	r1, [r7, #12]
 80078f6:	2100      	movs	r1, #0
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80078fa:	2100      	movs	r1, #0
 80078fc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078fe:	4952      	ldr	r1, [pc, #328]	; (8007a48 <HAL_RCC_GetSysClockFreq+0x160>)
 8007900:	6889      	ldr	r1, [r1, #8]
 8007902:	f001 010c 	and.w	r1, r1, #12
 8007906:	2908      	cmp	r1, #8
 8007908:	d00d      	beq.n	8007926 <HAL_RCC_GetSysClockFreq+0x3e>
 800790a:	2908      	cmp	r1, #8
 800790c:	f200 8094 	bhi.w	8007a38 <HAL_RCC_GetSysClockFreq+0x150>
 8007910:	2900      	cmp	r1, #0
 8007912:	d002      	beq.n	800791a <HAL_RCC_GetSysClockFreq+0x32>
 8007914:	2904      	cmp	r1, #4
 8007916:	d003      	beq.n	8007920 <HAL_RCC_GetSysClockFreq+0x38>
 8007918:	e08e      	b.n	8007a38 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800791a:	4b4c      	ldr	r3, [pc, #304]	; (8007a4c <HAL_RCC_GetSysClockFreq+0x164>)
 800791c:	60bb      	str	r3, [r7, #8]
      break;
 800791e:	e08e      	b.n	8007a3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007920:	4b4b      	ldr	r3, [pc, #300]	; (8007a50 <HAL_RCC_GetSysClockFreq+0x168>)
 8007922:	60bb      	str	r3, [r7, #8]
      break;
 8007924:	e08b      	b.n	8007a3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007926:	4948      	ldr	r1, [pc, #288]	; (8007a48 <HAL_RCC_GetSysClockFreq+0x160>)
 8007928:	6849      	ldr	r1, [r1, #4]
 800792a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800792e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007930:	4945      	ldr	r1, [pc, #276]	; (8007a48 <HAL_RCC_GetSysClockFreq+0x160>)
 8007932:	6849      	ldr	r1, [r1, #4]
 8007934:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007938:	2900      	cmp	r1, #0
 800793a:	d024      	beq.n	8007986 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800793c:	4942      	ldr	r1, [pc, #264]	; (8007a48 <HAL_RCC_GetSysClockFreq+0x160>)
 800793e:	6849      	ldr	r1, [r1, #4]
 8007940:	0989      	lsrs	r1, r1, #6
 8007942:	4608      	mov	r0, r1
 8007944:	f04f 0100 	mov.w	r1, #0
 8007948:	f240 14ff 	movw	r4, #511	; 0x1ff
 800794c:	f04f 0500 	mov.w	r5, #0
 8007950:	ea00 0204 	and.w	r2, r0, r4
 8007954:	ea01 0305 	and.w	r3, r1, r5
 8007958:	493d      	ldr	r1, [pc, #244]	; (8007a50 <HAL_RCC_GetSysClockFreq+0x168>)
 800795a:	fb01 f003 	mul.w	r0, r1, r3
 800795e:	2100      	movs	r1, #0
 8007960:	fb01 f102 	mul.w	r1, r1, r2
 8007964:	1844      	adds	r4, r0, r1
 8007966:	493a      	ldr	r1, [pc, #232]	; (8007a50 <HAL_RCC_GetSysClockFreq+0x168>)
 8007968:	fba2 0101 	umull	r0, r1, r2, r1
 800796c:	1863      	adds	r3, r4, r1
 800796e:	4619      	mov	r1, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	461a      	mov	r2, r3
 8007974:	f04f 0300 	mov.w	r3, #0
 8007978:	f7f8 fcb2 	bl	80002e0 <__aeabi_uldivmod>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4613      	mov	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	e04a      	b.n	8007a1c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007986:	4b30      	ldr	r3, [pc, #192]	; (8007a48 <HAL_RCC_GetSysClockFreq+0x160>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	099b      	lsrs	r3, r3, #6
 800798c:	461a      	mov	r2, r3
 800798e:	f04f 0300 	mov.w	r3, #0
 8007992:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007996:	f04f 0100 	mov.w	r1, #0
 800799a:	ea02 0400 	and.w	r4, r2, r0
 800799e:	ea03 0501 	and.w	r5, r3, r1
 80079a2:	4620      	mov	r0, r4
 80079a4:	4629      	mov	r1, r5
 80079a6:	f04f 0200 	mov.w	r2, #0
 80079aa:	f04f 0300 	mov.w	r3, #0
 80079ae:	014b      	lsls	r3, r1, #5
 80079b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80079b4:	0142      	lsls	r2, r0, #5
 80079b6:	4610      	mov	r0, r2
 80079b8:	4619      	mov	r1, r3
 80079ba:	1b00      	subs	r0, r0, r4
 80079bc:	eb61 0105 	sbc.w	r1, r1, r5
 80079c0:	f04f 0200 	mov.w	r2, #0
 80079c4:	f04f 0300 	mov.w	r3, #0
 80079c8:	018b      	lsls	r3, r1, #6
 80079ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80079ce:	0182      	lsls	r2, r0, #6
 80079d0:	1a12      	subs	r2, r2, r0
 80079d2:	eb63 0301 	sbc.w	r3, r3, r1
 80079d6:	f04f 0000 	mov.w	r0, #0
 80079da:	f04f 0100 	mov.w	r1, #0
 80079de:	00d9      	lsls	r1, r3, #3
 80079e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079e4:	00d0      	lsls	r0, r2, #3
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	1912      	adds	r2, r2, r4
 80079ec:	eb45 0303 	adc.w	r3, r5, r3
 80079f0:	f04f 0000 	mov.w	r0, #0
 80079f4:	f04f 0100 	mov.w	r1, #0
 80079f8:	0299      	lsls	r1, r3, #10
 80079fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80079fe:	0290      	lsls	r0, r2, #10
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4610      	mov	r0, r2
 8007a06:	4619      	mov	r1, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f04f 0300 	mov.w	r3, #0
 8007a10:	f7f8 fc66 	bl	80002e0 <__aeabi_uldivmod>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4613      	mov	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007a1c:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <HAL_RCC_GetSysClockFreq+0x160>)
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	0c1b      	lsrs	r3, r3, #16
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	3301      	adds	r3, #1
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a34:	60bb      	str	r3, [r7, #8]
      break;
 8007a36:	e002      	b.n	8007a3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a38:	4b04      	ldr	r3, [pc, #16]	; (8007a4c <HAL_RCC_GetSysClockFreq+0x164>)
 8007a3a:	60bb      	str	r3, [r7, #8]
      break;
 8007a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bdb0      	pop	{r4, r5, r7, pc}
 8007a48:	40023800 	.word	0x40023800
 8007a4c:	00f42400 	.word	0x00f42400
 8007a50:	017d7840 	.word	0x017d7840

08007a54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a58:	4b03      	ldr	r3, [pc, #12]	; (8007a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	20000ac8 	.word	0x20000ac8

08007a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a70:	f7ff fff0 	bl	8007a54 <HAL_RCC_GetHCLKFreq>
 8007a74:	4602      	mov	r2, r0
 8007a76:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	0a9b      	lsrs	r3, r3, #10
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	4903      	ldr	r1, [pc, #12]	; (8007a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a82:	5ccb      	ldrb	r3, [r1, r3]
 8007a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40023800 	.word	0x40023800
 8007a90:	0800fc7c 	.word	0x0800fc7c

08007a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a98:	f7ff ffdc 	bl	8007a54 <HAL_RCC_GetHCLKFreq>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	0b5b      	lsrs	r3, r3, #13
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	4903      	ldr	r1, [pc, #12]	; (8007ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007aaa:	5ccb      	ldrb	r3, [r1, r3]
 8007aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	40023800 	.word	0x40023800
 8007ab8:	0800fc7c 	.word	0x0800fc7c

08007abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d012      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ae4:	4b69      	ldr	r3, [pc, #420]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	4a68      	ldr	r2, [pc, #416]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007aee:	6093      	str	r3, [r2, #8]
 8007af0:	4b66      	ldr	r3, [pc, #408]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af8:	4964      	ldr	r1, [pc, #400]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007b06:	2301      	movs	r3, #1
 8007b08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d017      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b16:	4b5d      	ldr	r3, [pc, #372]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b24:	4959      	ldr	r1, [pc, #356]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b34:	d101      	bne.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007b36:	2301      	movs	r3, #1
 8007b38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007b42:	2301      	movs	r3, #1
 8007b44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d017      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b52:	4b4e      	ldr	r3, [pc, #312]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	494a      	ldr	r1, [pc, #296]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b70:	d101      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007b72:	2301      	movs	r3, #1
 8007b74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 808b 	beq.w	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ba0:	4b3a      	ldr	r3, [pc, #232]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba4:	4a39      	ldr	r2, [pc, #228]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007baa:	6413      	str	r3, [r2, #64]	; 0x40
 8007bac:	4b37      	ldr	r3, [pc, #220]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb4:	60bb      	str	r3, [r7, #8]
 8007bb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007bb8:	4b35      	ldr	r3, [pc, #212]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a34      	ldr	r2, [pc, #208]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc4:	f7fe fafc 	bl	80061c0 <HAL_GetTick>
 8007bc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007bca:	e008      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bcc:	f7fe faf8 	bl	80061c0 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b64      	cmp	r3, #100	; 0x64
 8007bd8:	d901      	bls.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e38f      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007bde:	4b2c      	ldr	r3, [pc, #176]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0f0      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007bea:	4b28      	ldr	r3, [pc, #160]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d035      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d02e      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c08:	4b20      	ldr	r3, [pc, #128]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c12:	4b1e      	ldr	r3, [pc, #120]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c16:	4a1d      	ldr	r2, [pc, #116]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c1e:	4b1b      	ldr	r3, [pc, #108]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c22:	4a1a      	ldr	r2, [pc, #104]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007c2a:	4a18      	ldr	r2, [pc, #96]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c30:	4b16      	ldr	r3, [pc, #88]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d114      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c3c:	f7fe fac0 	bl	80061c0 <HAL_GetTick>
 8007c40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c42:	e00a      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c44:	f7fe fabc 	bl	80061c0 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d901      	bls.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e351      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5e:	f003 0302 	and.w	r3, r3, #2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0ee      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c72:	d111      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007c74:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c80:	4b04      	ldr	r3, [pc, #16]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c82:	400b      	ands	r3, r1
 8007c84:	4901      	ldr	r1, [pc, #4]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	608b      	str	r3, [r1, #8]
 8007c8a:	e00b      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	40007000 	.word	0x40007000
 8007c94:	0ffffcff 	.word	0x0ffffcff
 8007c98:	4bb3      	ldr	r3, [pc, #716]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	4ab2      	ldr	r2, [pc, #712]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007ca2:	6093      	str	r3, [r2, #8]
 8007ca4:	4bb0      	ldr	r3, [pc, #704]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cb0:	49ad      	ldr	r1, [pc, #692]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0310 	and.w	r3, r3, #16
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d010      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cc2:	4ba9      	ldr	r3, [pc, #676]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cc8:	4aa7      	ldr	r2, [pc, #668]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007cd2:	4ba5      	ldr	r3, [pc, #660]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	49a2      	ldr	r1, [pc, #648]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cf0:	4b9d      	ldr	r3, [pc, #628]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfe:	499a      	ldr	r1, [pc, #616]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d12:	4b95      	ldr	r3, [pc, #596]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d20:	4991      	ldr	r1, [pc, #580]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00a      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d34:	4b8c      	ldr	r3, [pc, #560]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d42:	4989      	ldr	r1, [pc, #548]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d56:	4b84      	ldr	r3, [pc, #528]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d64:	4980      	ldr	r1, [pc, #512]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00a      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d78:	4b7b      	ldr	r3, [pc, #492]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7e:	f023 0203 	bic.w	r2, r3, #3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d86:	4978      	ldr	r1, [pc, #480]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d9a:	4b73      	ldr	r3, [pc, #460]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da0:	f023 020c 	bic.w	r2, r3, #12
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da8:	496f      	ldr	r1, [pc, #444]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dbc:	4b6a      	ldr	r3, [pc, #424]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dca:	4967      	ldr	r1, [pc, #412]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007dde:	4b62      	ldr	r3, [pc, #392]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dec:	495e      	ldr	r1, [pc, #376]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e00:	4b59      	ldr	r3, [pc, #356]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0e:	4956      	ldr	r1, [pc, #344]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007e22:	4b51      	ldr	r3, [pc, #324]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e30:	494d      	ldr	r1, [pc, #308]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007e44:	4b48      	ldr	r3, [pc, #288]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e52:	4945      	ldr	r1, [pc, #276]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007e66:	4b40      	ldr	r3, [pc, #256]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e74:	493c      	ldr	r1, [pc, #240]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00a      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e88:	4b37      	ldr	r3, [pc, #220]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e96:	4934      	ldr	r1, [pc, #208]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d011      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007eaa:	4b2f      	ldr	r3, [pc, #188]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eb8:	492b      	ldr	r1, [pc, #172]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ec8:	d101      	bne.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0308 	and.w	r3, r3, #8
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007eda:	2301      	movs	r3, #1
 8007edc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007eea:	4b1f      	ldr	r3, [pc, #124]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef8:	491b      	ldr	r1, [pc, #108]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00b      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f0c:	4b16      	ldr	r3, [pc, #88]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f1c:	4912      	ldr	r1, [pc, #72]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00b      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007f30:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f40:	4909      	ldr	r1, [pc, #36]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00f      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f54:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f64:	e002      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007f66:	bf00      	nop
 8007f68:	40023800 	.word	0x40023800
 8007f6c:	4986      	ldr	r1, [pc, #536]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00b      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007f80:	4b81      	ldr	r3, [pc, #516]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f90:	497d      	ldr	r1, [pc, #500]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d006      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 80d6 	beq.w	8008158 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007fac:	4b76      	ldr	r3, [pc, #472]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a75      	ldr	r2, [pc, #468]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fb8:	f7fe f902 	bl	80061c0 <HAL_GetTick>
 8007fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fbe:	e008      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007fc0:	f7fe f8fe 	bl	80061c0 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	2b64      	cmp	r3, #100	; 0x64
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e195      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fd2:	4b6d      	ldr	r3, [pc, #436]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1f0      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d021      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d11d      	bne.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ff2:	4b65      	ldr	r3, [pc, #404]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ff8:	0c1b      	lsrs	r3, r3, #16
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008000:	4b61      	ldr	r3, [pc, #388]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008006:	0e1b      	lsrs	r3, r3, #24
 8008008:	f003 030f 	and.w	r3, r3, #15
 800800c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	019a      	lsls	r2, r3, #6
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	041b      	lsls	r3, r3, #16
 8008018:	431a      	orrs	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	061b      	lsls	r3, r3, #24
 800801e:	431a      	orrs	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	071b      	lsls	r3, r3, #28
 8008026:	4958      	ldr	r1, [pc, #352]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008028:	4313      	orrs	r3, r2
 800802a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d004      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008042:	d00a      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800804c:	2b00      	cmp	r3, #0
 800804e:	d02e      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008058:	d129      	bne.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800805a:	4b4b      	ldr	r3, [pc, #300]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800805c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008060:	0c1b      	lsrs	r3, r3, #16
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008068:	4b47      	ldr	r3, [pc, #284]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800806a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800806e:	0f1b      	lsrs	r3, r3, #28
 8008070:	f003 0307 	and.w	r3, r3, #7
 8008074:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	019a      	lsls	r2, r3, #6
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	041b      	lsls	r3, r3, #16
 8008080:	431a      	orrs	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	061b      	lsls	r3, r3, #24
 8008088:	431a      	orrs	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	071b      	lsls	r3, r3, #28
 800808e:	493e      	ldr	r1, [pc, #248]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008090:	4313      	orrs	r3, r2
 8008092:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008096:	4b3c      	ldr	r3, [pc, #240]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800809c:	f023 021f 	bic.w	r2, r3, #31
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	3b01      	subs	r3, #1
 80080a6:	4938      	ldr	r1, [pc, #224]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d01d      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80080ba:	4b33      	ldr	r3, [pc, #204]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080c0:	0e1b      	lsrs	r3, r3, #24
 80080c2:	f003 030f 	and.w	r3, r3, #15
 80080c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80080c8:	4b2f      	ldr	r3, [pc, #188]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ce:	0f1b      	lsrs	r3, r3, #28
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	019a      	lsls	r2, r3, #6
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	041b      	lsls	r3, r3, #16
 80080e2:	431a      	orrs	r2, r3
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	061b      	lsls	r3, r3, #24
 80080e8:	431a      	orrs	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	071b      	lsls	r3, r3, #28
 80080ee:	4926      	ldr	r1, [pc, #152]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d011      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	019a      	lsls	r2, r3, #6
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	041b      	lsls	r3, r3, #16
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	061b      	lsls	r3, r3, #24
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	071b      	lsls	r3, r3, #28
 800811e:	491a      	ldr	r1, [pc, #104]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008120:	4313      	orrs	r3, r2
 8008122:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008126:	4b18      	ldr	r3, [pc, #96]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a17      	ldr	r2, [pc, #92]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800812c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008132:	f7fe f845 	bl	80061c0 <HAL_GetTick>
 8008136:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008138:	e008      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800813a:	f7fe f841 	bl	80061c0 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	2b64      	cmp	r3, #100	; 0x64
 8008146:	d901      	bls.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e0d8      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800814c:	4b0e      	ldr	r3, [pc, #56]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d0f0      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	2b01      	cmp	r3, #1
 800815c:	f040 80ce 	bne.w	80082fc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008160:	4b09      	ldr	r3, [pc, #36]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a08      	ldr	r2, [pc, #32]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800816a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816c:	f7fe f828 	bl	80061c0 <HAL_GetTick>
 8008170:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008172:	e00b      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008174:	f7fe f824 	bl	80061c0 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	2b64      	cmp	r3, #100	; 0x64
 8008180:	d904      	bls.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e0bb      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008186:	bf00      	nop
 8008188:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800818c:	4b5e      	ldr	r3, [pc, #376]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008198:	d0ec      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d009      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d02e      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d12a      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80081c2:	4b51      	ldr	r3, [pc, #324]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c8:	0c1b      	lsrs	r3, r3, #16
 80081ca:	f003 0303 	and.w	r3, r3, #3
 80081ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80081d0:	4b4d      	ldr	r3, [pc, #308]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d6:	0f1b      	lsrs	r3, r3, #28
 80081d8:	f003 0307 	and.w	r3, r3, #7
 80081dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	019a      	lsls	r2, r3, #6
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	041b      	lsls	r3, r3, #16
 80081e8:	431a      	orrs	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	061b      	lsls	r3, r3, #24
 80081f0:	431a      	orrs	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	071b      	lsls	r3, r3, #28
 80081f6:	4944      	ldr	r1, [pc, #272]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80081fe:	4b42      	ldr	r3, [pc, #264]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008204:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820c:	3b01      	subs	r3, #1
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	493d      	ldr	r1, [pc, #244]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008212:	4313      	orrs	r3, r2
 8008214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d022      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800822c:	d11d      	bne.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800822e:	4b36      	ldr	r3, [pc, #216]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008234:	0e1b      	lsrs	r3, r3, #24
 8008236:	f003 030f 	and.w	r3, r3, #15
 800823a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800823c:	4b32      	ldr	r3, [pc, #200]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800823e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008242:	0f1b      	lsrs	r3, r3, #28
 8008244:	f003 0307 	and.w	r3, r3, #7
 8008248:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	019a      	lsls	r2, r3, #6
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	041b      	lsls	r3, r3, #16
 8008256:	431a      	orrs	r2, r3
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	061b      	lsls	r3, r3, #24
 800825c:	431a      	orrs	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	071b      	lsls	r3, r3, #28
 8008262:	4929      	ldr	r1, [pc, #164]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008264:	4313      	orrs	r3, r2
 8008266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0308 	and.w	r3, r3, #8
 8008272:	2b00      	cmp	r3, #0
 8008274:	d028      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008276:	4b24      	ldr	r3, [pc, #144]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827c:	0e1b      	lsrs	r3, r3, #24
 800827e:	f003 030f 	and.w	r3, r3, #15
 8008282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008284:	4b20      	ldr	r3, [pc, #128]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828a:	0c1b      	lsrs	r3, r3, #16
 800828c:	f003 0303 	and.w	r3, r3, #3
 8008290:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	019a      	lsls	r2, r3, #6
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	041b      	lsls	r3, r3, #16
 800829c:	431a      	orrs	r2, r3
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	061b      	lsls	r3, r3, #24
 80082a2:	431a      	orrs	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	071b      	lsls	r3, r3, #28
 80082aa:	4917      	ldr	r1, [pc, #92]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80082b2:	4b15      	ldr	r3, [pc, #84]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80082b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c0:	4911      	ldr	r1, [pc, #68]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80082c8:	4b0f      	ldr	r3, [pc, #60]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a0e      	ldr	r2, [pc, #56]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80082ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082d4:	f7fd ff74 	bl	80061c0 <HAL_GetTick>
 80082d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80082da:	e008      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80082dc:	f7fd ff70 	bl	80061c0 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	2b64      	cmp	r3, #100	; 0x64
 80082e8:	d901      	bls.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e007      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80082ee:	4b06      	ldr	r3, [pc, #24]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082fa:	d1ef      	bne.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3720      	adds	r7, #32
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	40023800 	.word	0x40023800

0800830c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e022      	b.n	8008364 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d105      	bne.n	8008336 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7fd faed 	bl	8005910 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2203      	movs	r2, #3
 800833a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f814 	bl	800836c <HAL_SD_InitCard>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e00a      	b.n	8008364 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800836c:	b5b0      	push	{r4, r5, r7, lr}
 800836e:	b08e      	sub	sp, #56	; 0x38
 8008370:	af04      	add	r7, sp, #16
 8008372:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008374:	2300      	movs	r3, #0
 8008376:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008378:	2300      	movs	r3, #0
 800837a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800837c:	2300      	movs	r3, #0
 800837e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008380:	2300      	movs	r3, #0
 8008382:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008384:	2300      	movs	r3, #0
 8008386:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008388:	2376      	movs	r3, #118	; 0x76
 800838a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681d      	ldr	r5, [r3, #0]
 8008390:	466c      	mov	r4, sp
 8008392:	f107 0314 	add.w	r3, r7, #20
 8008396:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800839a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800839e:	f107 0308 	add.w	r3, r7, #8
 80083a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083a4:	4628      	mov	r0, r5
 80083a6:	f001 ffcd 	bl	800a344 <SDMMC_Init>
 80083aa:	4603      	mov	r3, r0
 80083ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80083b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e059      	b.n	8008470 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083ca:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f002 f801 	bl	800a3d8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083e4:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80083e6:	2002      	movs	r0, #2
 80083e8:	f7fd fef6 	bl	80061d8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fff1 	bl	80093d4 <SD_PowerON>
 80083f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00b      	beq.n	8008412 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	431a      	orrs	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e02e      	b.n	8008470 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 ff12 	bl	800923c <SD_InitCard>
 8008418:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e01b      	b.n	8008470 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008440:	4618      	mov	r0, r3
 8008442:	f002 f85b 	bl	800a4fc <SDMMC_CmdBlockLength>
 8008446:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00f      	beq.n	800846e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a09      	ldr	r2, [pc, #36]	; (8008478 <HAL_SD_InitCard+0x10c>)
 8008454:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	431a      	orrs	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e000      	b.n	8008470 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3728      	adds	r7, #40	; 0x28
 8008474:	46bd      	mov	sp, r7
 8008476:	bdb0      	pop	{r4, r5, r7, pc}
 8008478:	004005ff 	.word	0x004005ff

0800847c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08c      	sub	sp, #48	; 0x30
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d107      	bne.n	80084a4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e0c3      	b.n	800862c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	f040 80bc 	bne.w	800862a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80084b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	441a      	add	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d907      	bls.n	80084d6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e0aa      	b.n	800862c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2203      	movs	r2, #3
 80084da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2200      	movs	r2, #0
 80084e4:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80084f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	4a4e      	ldr	r2, [pc, #312]	; (8008634 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80084fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	4a4d      	ldr	r2, [pc, #308]	; (8008638 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008504:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	2200      	movs	r2, #0
 800850c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008512:	2200      	movs	r2, #0
 8008514:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3380      	adds	r3, #128	; 0x80
 800853c:	4619      	mov	r1, r3
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	025b      	lsls	r3, r3, #9
 8008544:	089b      	lsrs	r3, r3, #2
 8008546:	f7fe f915 	bl	8006774 <HAL_DMA_Start_IT>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d017      	beq.n	8008580 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800855e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a35      	ldr	r2, [pc, #212]	; (800863c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008566:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e055      	b.n	800862c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f042 0208 	orr.w	r2, r2, #8
 800858e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008594:	2b01      	cmp	r3, #1
 8008596:	d002      	beq.n	800859e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859a:	025b      	lsls	r3, r3, #9
 800859c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800859e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085a2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	025b      	lsls	r3, r3, #9
 80085a8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80085aa:	2390      	movs	r3, #144	; 0x90
 80085ac:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80085ae:	2302      	movs	r3, #2
 80085b0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80085b6:	2301      	movs	r3, #1
 80085b8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f107 0210 	add.w	r2, r7, #16
 80085c2:	4611      	mov	r1, r2
 80085c4:	4618      	mov	r0, r3
 80085c6:	f001 ff6d 	bl	800a4a4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d90a      	bls.n	80085e6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2282      	movs	r2, #130	; 0x82
 80085d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 ffd1 	bl	800a584 <SDMMC_CmdReadMultiBlock>
 80085e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80085e4:	e009      	b.n	80085fa <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2281      	movs	r2, #129	; 0x81
 80085ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085f2:	4618      	mov	r0, r3
 80085f4:	f001 ffa4 	bl	800a540 <SDMMC_CmdReadSingleBlock>
 80085f8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d012      	beq.n	8008626 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a0d      	ldr	r2, [pc, #52]	; (800863c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008606:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860e:	431a      	orrs	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e002      	b.n	800862c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	e000      	b.n	800862c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800862a:	2302      	movs	r3, #2
  }
}
 800862c:	4618      	mov	r0, r3
 800862e:	3730      	adds	r7, #48	; 0x30
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	0800904b 	.word	0x0800904b
 8008638:	080090bd 	.word	0x080090bd
 800863c:	004005ff 	.word	0x004005ff

08008640 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b08c      	sub	sp, #48	; 0x30
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d107      	bne.n	8008668 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e0c6      	b.n	80087f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b01      	cmp	r3, #1
 8008672:	f040 80bf 	bne.w	80087f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800867c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	441a      	add	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008686:	429a      	cmp	r2, r3
 8008688:	d907      	bls.n	800869a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e0ad      	b.n	80087f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2203      	movs	r2, #3
 800869e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2200      	movs	r2, #0
 80086a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f042 021a 	orr.w	r2, r2, #26
 80086b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086be:	4a50      	ldr	r2, [pc, #320]	; (8008800 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80086c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c6:	4a4f      	ldr	r2, [pc, #316]	; (8008804 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80086c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ce:	2200      	movs	r2, #0
 80086d0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d002      	beq.n	80086e0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086dc:	025b      	lsls	r3, r3, #9
 80086de:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d90a      	bls.n	80086fc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	22a0      	movs	r2, #160	; 0xa0
 80086ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086f2:	4618      	mov	r0, r3
 80086f4:	f001 ff8a 	bl	800a60c <SDMMC_CmdWriteMultiBlock>
 80086f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80086fa:	e009      	b.n	8008710 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2290      	movs	r2, #144	; 0x90
 8008700:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008708:	4618      	mov	r0, r3
 800870a:	f001 ff5d 	bl	800a5c8 <SDMMC_CmdWriteSingleBlock>
 800870e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d012      	beq.n	800873c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a3b      	ldr	r2, [pc, #236]	; (8008808 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800871c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008724:	431a      	orrs	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e05c      	b.n	80087f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f042 0208 	orr.w	r2, r2, #8
 800874a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008750:	2240      	movs	r2, #64	; 0x40
 8008752:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008764:	689a      	ldr	r2, [r3, #8]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	430a      	orrs	r2, r1
 800876e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008774:	68b9      	ldr	r1, [r7, #8]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3380      	adds	r3, #128	; 0x80
 800877c:	461a      	mov	r2, r3
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	025b      	lsls	r3, r3, #9
 8008782:	089b      	lsrs	r3, r3, #2
 8008784:	f7fd fff6 	bl	8006774 <HAL_DMA_Start_IT>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d01a      	beq.n	80087c4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 021a 	bic.w	r2, r2, #26
 800879c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a19      	ldr	r2, [pc, #100]	; (8008808 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80087a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e018      	b.n	80087f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087c8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	025b      	lsls	r3, r3, #9
 80087ce:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80087d0:	2390      	movs	r3, #144	; 0x90
 80087d2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80087d4:	2300      	movs	r3, #0
 80087d6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80087d8:	2300      	movs	r3, #0
 80087da:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80087dc:	2301      	movs	r3, #1
 80087de:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f107 0210 	add.w	r2, r7, #16
 80087e8:	4611      	mov	r1, r2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 fe5a 	bl	800a4a4 <SDMMC_ConfigData>

      return HAL_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	e000      	b.n	80087f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80087f4:	2302      	movs	r3, #2
  }
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3730      	adds	r7, #48	; 0x30
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	08009021 	.word	0x08009021
 8008804:	080090bd 	.word	0x080090bd
 8008808:	004005ff 	.word	0x004005ff

0800880c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008818:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d008      	beq.n	800883a <HAL_SD_IRQHandler+0x2e>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f003 0308 	and.w	r3, r3, #8
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 ffed 	bl	8009812 <SD_Read_IT>
 8008838:	e153      	b.n	8008ae2 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 808d 	beq.w	8008964 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008852:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	4ba3      	ldr	r3, [pc, #652]	; (8008aec <HAL_SD_IRQHandler+0x2e0>)
 8008860:	400b      	ands	r3, r1
 8008862:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0201 	bic.w	r2, r2, #1
 8008872:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f003 0308 	and.w	r3, r3, #8
 800887a:	2b00      	cmp	r3, #0
 800887c:	d039      	beq.n	80088f2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	2b00      	cmp	r3, #0
 8008886:	d104      	bne.n	8008892 <HAL_SD_IRQHandler+0x86>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b00      	cmp	r3, #0
 8008890:	d011      	beq.n	80088b6 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4618      	mov	r0, r3
 8008898:	f001 feda 	bl	800a650 <SDMMC_CmdStopTransfer>
 800889c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d008      	beq.n	80088b6 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	431a      	orrs	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f921 	bl	8008af8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f240 523a 	movw	r2, #1338	; 0x53a
 80088be:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d104      	bne.n	80088e2 <HAL_SD_IRQHandler+0xd6>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f002 fb4a 	bl	800af7c <HAL_SD_RxCpltCallback>
 80088e8:	e0fb      	b.n	8008ae2 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f002 fb3c 	bl	800af68 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80088f0:	e0f7      	b.n	8008ae2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 80f2 	beq.w	8008ae2 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f003 0320 	and.w	r3, r3, #32
 8008904:	2b00      	cmp	r3, #0
 8008906:	d011      	beq.n	800892c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f001 fe9f 	bl	800a650 <SDMMC_CmdStopTransfer>
 8008912:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d008      	beq.n	800892c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	431a      	orrs	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f8e6 	bl	8008af8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	f040 80d5 	bne.w	8008ae2 <HAL_SD_IRQHandler+0x2d6>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f003 0302 	and.w	r3, r3, #2
 800893e:	2b00      	cmp	r3, #0
 8008940:	f040 80cf 	bne.w	8008ae2 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0208 	bic.w	r2, r2, #8
 8008952:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f002 fb03 	bl	800af68 <HAL_SD_TxCpltCallback>
}
 8008962:	e0be      	b.n	8008ae2 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d008      	beq.n	8008984 <HAL_SD_IRQHandler+0x178>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f003 0308 	and.w	r3, r3, #8
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 ff99 	bl	80098b4 <SD_Write_IT>
 8008982:	e0ae      	b.n	8008ae2 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 80a7 	beq.w	8008ae2 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d005      	beq.n	80089ae <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	f043 0202 	orr.w	r2, r3, #2
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b4:	f003 0308 	and.w	r3, r3, #8
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c0:	f043 0208 	orr.w	r2, r3, #8
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ce:	f003 0320 	and.w	r3, r3, #32
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d005      	beq.n	80089e2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	f043 0220 	orr.w	r2, r3, #32
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e8:	f003 0310 	and.w	r3, r3, #16
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	f043 0210 	orr.w	r2, r3, #16
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a04:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008a14:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f001 fe18 	bl	800a650 <SDMMC_CmdStopTransfer>
 8008a20:	4602      	mov	r2, r0
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a26:	431a      	orrs	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f003 0308 	and.w	r3, r3, #8
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f857 	bl	8008af8 <HAL_SD_ErrorCallback>
}
 8008a4a:	e04a      	b.n	8008ae2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d045      	beq.n	8008ae2 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f003 0310 	and.w	r3, r3, #16
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d104      	bne.n	8008a6a <HAL_SD_IRQHandler+0x25e>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f003 0320 	and.w	r3, r3, #32
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d011      	beq.n	8008a8e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6e:	4a20      	ldr	r2, [pc, #128]	; (8008af0 <HAL_SD_IRQHandler+0x2e4>)
 8008a70:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fd fedc 	bl	8006834 <HAL_DMA_Abort_IT>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d02f      	beq.n	8008ae2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 fb6a 	bl	8009160 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008a8c:	e029      	b.n	8008ae2 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d104      	bne.n	8008aa2 <HAL_SD_IRQHandler+0x296>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d011      	beq.n	8008ac6 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa6:	4a13      	ldr	r2, [pc, #76]	; (8008af4 <HAL_SD_IRQHandler+0x2e8>)
 8008aa8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fd fec0 	bl	8006834 <HAL_DMA_Abort_IT>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d013      	beq.n	8008ae2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fb85 	bl	80091ce <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008ac4:	e00d      	b.n	8008ae2 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f002 fa3a 	bl	800af54 <HAL_SD_AbortCallback>
}
 8008ae0:	e7ff      	b.n	8008ae2 <HAL_SD_IRQHandler+0x2d6>
 8008ae2:	bf00      	nop
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	ffff3ec5 	.word	0xffff3ec5
 8008af0:	08009161 	.word	0x08009161
 8008af4:	080091cf 	.word	0x080091cf

08008af8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b1a:	0f9b      	lsrs	r3, r3, #30
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b26:	0e9b      	lsrs	r3, r3, #26
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	f003 030f 	and.w	r3, r3, #15
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b38:	0e1b      	lsrs	r3, r3, #24
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	f003 0303 	and.w	r3, r3, #3
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b4a:	0c1b      	lsrs	r3, r3, #16
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b56:	0a1b      	lsrs	r3, r3, #8
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b6c:	0d1b      	lsrs	r3, r3, #20
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b78:	0c1b      	lsrs	r3, r3, #16
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	f003 030f 	and.w	r3, r3, #15
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b8a:	0bdb      	lsrs	r3, r3, #15
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b9c:	0b9b      	lsrs	r3, r3, #14
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bae:	0b5b      	lsrs	r3, r3, #13
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bc0:	0b1b      	lsrs	r3, r3, #12
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d163      	bne.n	8008ca4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008be0:	009a      	lsls	r2, r3, #2
 8008be2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008be6:	4013      	ands	r3, r2
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008bec:	0f92      	lsrs	r2, r2, #30
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf8:	0edb      	lsrs	r3, r3, #27
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	f003 0307 	and.w	r3, r3, #7
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c0a:	0e1b      	lsrs	r3, r3, #24
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	f003 0307 	and.w	r3, r3, #7
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c1c:	0d5b      	lsrs	r3, r3, #21
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c2e:	0c9b      	lsrs	r3, r3, #18
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c40:	0bdb      	lsrs	r3, r3, #15
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	f003 0307 	and.w	r3, r3, #7
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	7e1b      	ldrb	r3, [r3, #24]
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	3302      	adds	r3, #2
 8008c64:	2201      	movs	r2, #1
 8008c66:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008c6e:	fb02 f203 	mul.w	r2, r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	7a1b      	ldrb	r3, [r3, #8]
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	f003 030f 	and.w	r3, r3, #15
 8008c80:	2201      	movs	r2, #1
 8008c82:	409a      	lsls	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008c90:	0a52      	lsrs	r2, r2, #9
 8008c92:	fb02 f203 	mul.w	r2, r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ca0:	661a      	str	r2, [r3, #96]	; 0x60
 8008ca2:	e031      	b.n	8008d08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d11d      	bne.n	8008ce8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cb0:	041b      	lsls	r3, r3, #16
 8008cb2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cba:	0c1b      	lsrs	r3, r3, #16
 8008cbc:	431a      	orrs	r2, r3
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	029a      	lsls	r2, r3, #10
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cdc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	661a      	str	r2, [r3, #96]	; 0x60
 8008ce6:	e00f      	b.n	8008d08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a58      	ldr	r2, [pc, #352]	; (8008e50 <HAL_SD_GetCardCSD+0x344>)
 8008cee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e09d      	b.n	8008e44 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d0c:	0b9b      	lsrs	r3, r3, #14
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d1e:	09db      	lsrs	r3, r3, #7
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d40:	0fdb      	lsrs	r3, r3, #31
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4c:	0f5b      	lsrs	r3, r3, #29
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f003 0303 	and.w	r3, r3, #3
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5e:	0e9b      	lsrs	r3, r3, #26
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	f003 0307 	and.w	r3, r3, #7
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d70:	0d9b      	lsrs	r3, r3, #22
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	f003 030f 	and.w	r3, r3, #15
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d82:	0d5b      	lsrs	r3, r3, #21
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9e:	0c1b      	lsrs	r3, r3, #16
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db2:	0bdb      	lsrs	r3, r3, #15
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc6:	0b9b      	lsrs	r3, r3, #14
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	b2da      	uxtb	r2, r3
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dda:	0b5b      	lsrs	r3, r3, #13
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dee:	0b1b      	lsrs	r3, r3, #12
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e02:	0a9b      	lsrs	r3, r3, #10
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	f003 0303 	and.w	r3, r3, #3
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e16:	0a1b      	lsrs	r3, r3, #8
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	f003 0303 	and.w	r3, r3, #3
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e2a:	085b      	lsrs	r3, r3, #1
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	004005ff 	.word	0x004005ff

08008e54 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008eac:	b5b0      	push	{r4, r5, r7, lr}
 8008eae:	b08e      	sub	sp, #56	; 0x38
 8008eb0:	af04      	add	r7, sp, #16
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec8:	2b03      	cmp	r3, #3
 8008eca:	d02e      	beq.n	8008f2a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ed2:	d106      	bne.n	8008ee2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	639a      	str	r2, [r3, #56]	; 0x38
 8008ee0:	e029      	b.n	8008f36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ee8:	d10a      	bne.n	8008f00 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fb28 	bl	8009540 <SD_WideBus_Enable>
 8008ef0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38
 8008efe:	e01a      	b.n	8008f36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10a      	bne.n	8008f1c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fb65 	bl	80095d6 <SD_WideBus_Disable>
 8008f0c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	431a      	orrs	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	639a      	str	r2, [r3, #56]	; 0x38
 8008f1a:	e00c      	b.n	8008f36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	639a      	str	r2, [r3, #56]	; 0x38
 8008f28:	e005      	b.n	8008f36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00b      	beq.n	8008f56 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a26      	ldr	r2, [pc, #152]	; (8008fdc <HAL_SD_ConfigWideBusOperation+0x130>)
 8008f44:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f54:	e01f      	b.n	8008f96 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	695b      	ldr	r3, [r3, #20]
 8008f70:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681d      	ldr	r5, [r3, #0]
 8008f7c:	466c      	mov	r4, sp
 8008f7e:	f107 0314 	add.w	r3, r7, #20
 8008f82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f8a:	f107 0308 	add.w	r3, r7, #8
 8008f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f90:	4628      	mov	r0, r5
 8008f92:	f001 f9d7 	bl	800a344 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f001 faac 	bl	800a4fc <SDMMC_CmdBlockLength>
 8008fa4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00c      	beq.n	8008fc6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a0a      	ldr	r2, [pc, #40]	; (8008fdc <HAL_SD_ConfigWideBusOperation+0x130>)
 8008fb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3728      	adds	r7, #40	; 0x28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	004005ff 	.word	0x004005ff

08008fe0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008fec:	f107 030c 	add.w	r3, r7, #12
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fa7c 	bl	80094f0 <SD_SendStatus>
 8008ff8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	431a      	orrs	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	0a5b      	lsrs	r3, r3, #9
 8009010:	f003 030f 	and.w	r3, r3, #15
 8009014:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009016:	693b      	ldr	r3, [r7, #16]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3718      	adds	r7, #24
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800903c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800903e:	bf00      	nop
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b084      	sub	sp, #16
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009056:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905c:	2b82      	cmp	r3, #130	; 0x82
 800905e:	d111      	bne.n	8009084 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4618      	mov	r0, r3
 8009066:	f001 faf3 	bl	800a650 <SDMMC_CmdStopTransfer>
 800906a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d008      	beq.n	8009084 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	431a      	orrs	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f7ff fd3a 	bl	8008af8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0208 	bic.w	r2, r2, #8
 8009092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f240 523a 	movw	r2, #1338	; 0x53a
 800909c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f001 ff65 	bl	800af7c <HAL_SD_RxCpltCallback>
#endif
}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7fd fd5e 	bl	8006b8c <HAL_DMA_GetError>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d03e      	beq.n	8009154 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090dc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d002      	beq.n	80090f2 <SD_DMAError+0x36>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d12d      	bne.n	800914e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a19      	ldr	r2, [pc, #100]	; (800915c <SD_DMAError+0xa0>)
 80090f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009108:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009116:	6978      	ldr	r0, [r7, #20]
 8009118:	f7ff ff62 	bl	8008fe0 <HAL_SD_GetCardState>
 800911c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2b06      	cmp	r3, #6
 8009122:	d002      	beq.n	800912a <SD_DMAError+0x6e>
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2b05      	cmp	r3, #5
 8009128:	d10a      	bne.n	8009140 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4618      	mov	r0, r3
 8009130:	f001 fa8e 	bl	800a650 <SDMMC_CmdStopTransfer>
 8009134:	4602      	mov	r2, r0
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913a:	431a      	orrs	r2, r3
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2200      	movs	r2, #0
 800914c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800914e:	6978      	ldr	r0, [r7, #20]
 8009150:	f7ff fcd2 	bl	8008af8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009154:	bf00      	nop
 8009156:	3718      	adds	r7, #24
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	004005ff 	.word	0x004005ff

08009160 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f240 523a 	movw	r2, #1338	; 0x53a
 8009176:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f7ff ff31 	bl	8008fe0 <HAL_SD_GetCardState>
 800917e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2b06      	cmp	r3, #6
 8009192:	d002      	beq.n	800919a <SD_DMATxAbort+0x3a>
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2b05      	cmp	r3, #5
 8009198:	d10a      	bne.n	80091b0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4618      	mov	r0, r3
 80091a0:	f001 fa56 	bl	800a650 <SDMMC_CmdStopTransfer>
 80091a4:	4602      	mov	r2, r0
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	431a      	orrs	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d103      	bne.n	80091c0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f001 fecb 	bl	800af54 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80091be:	e002      	b.n	80091c6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7ff fc99 	bl	8008af8 <HAL_SD_ErrorCallback>
}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091da:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f240 523a 	movw	r2, #1338	; 0x53a
 80091e4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f7ff fefa 	bl	8008fe0 <HAL_SD_GetCardState>
 80091ec:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2b06      	cmp	r3, #6
 8009200:	d002      	beq.n	8009208 <SD_DMARxAbort+0x3a>
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b05      	cmp	r3, #5
 8009206:	d10a      	bne.n	800921e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4618      	mov	r0, r3
 800920e:	f001 fa1f 	bl	800a650 <SDMMC_CmdStopTransfer>
 8009212:	4602      	mov	r2, r0
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009218:	431a      	orrs	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009222:	2b00      	cmp	r3, #0
 8009224:	d103      	bne.n	800922e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f001 fe94 	bl	800af54 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800922c:	e002      	b.n	8009234 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f7ff fc62 	bl	8008af8 <HAL_SD_ErrorCallback>
}
 8009234:	bf00      	nop
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800923c:	b5b0      	push	{r4, r5, r7, lr}
 800923e:	b094      	sub	sp, #80	; 0x50
 8009240:	af04      	add	r7, sp, #16
 8009242:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009244:	2301      	movs	r3, #1
 8009246:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4618      	mov	r0, r3
 800924e:	f001 f8d1 	bl	800a3f4 <SDMMC_GetPowerState>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d102      	bne.n	800925e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009258:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800925c:	e0b6      	b.n	80093cc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009262:	2b03      	cmp	r3, #3
 8009264:	d02f      	beq.n	80092c6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4618      	mov	r0, r3
 800926c:	f001 fafb 	bl	800a866 <SDMMC_CmdSendCID>
 8009270:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <SD_InitCard+0x40>
    {
      return errorstate;
 8009278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927a:	e0a7      	b.n	80093cc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2100      	movs	r1, #0
 8009282:	4618      	mov	r0, r3
 8009284:	f001 f8fb 	bl	800a47e <SDMMC_GetResponse>
 8009288:	4602      	mov	r2, r0
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2104      	movs	r1, #4
 8009294:	4618      	mov	r0, r3
 8009296:	f001 f8f2 	bl	800a47e <SDMMC_GetResponse>
 800929a:	4602      	mov	r2, r0
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2108      	movs	r1, #8
 80092a6:	4618      	mov	r0, r3
 80092a8:	f001 f8e9 	bl	800a47e <SDMMC_GetResponse>
 80092ac:	4602      	mov	r2, r0
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	210c      	movs	r1, #12
 80092b8:	4618      	mov	r0, r3
 80092ba:	f001 f8e0 	bl	800a47e <SDMMC_GetResponse>
 80092be:	4602      	mov	r2, r0
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	d00d      	beq.n	80092ea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f107 020e 	add.w	r2, r7, #14
 80092d6:	4611      	mov	r1, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	f001 fb01 	bl	800a8e0 <SDMMC_CmdSetRelAdd>
 80092de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80092e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <SD_InitCard+0xae>
    {
      return errorstate;
 80092e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e8:	e070      	b.n	80093cc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d036      	beq.n	8009360 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80092f2:	89fb      	ldrh	r3, [r7, #14]
 80092f4:	461a      	mov	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009302:	041b      	lsls	r3, r3, #16
 8009304:	4619      	mov	r1, r3
 8009306:	4610      	mov	r0, r2
 8009308:	f001 facb 	bl	800a8a2 <SDMMC_CmdSendCSD>
 800930c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800930e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009316:	e059      	b.n	80093cc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2100      	movs	r1, #0
 800931e:	4618      	mov	r0, r3
 8009320:	f001 f8ad 	bl	800a47e <SDMMC_GetResponse>
 8009324:	4602      	mov	r2, r0
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2104      	movs	r1, #4
 8009330:	4618      	mov	r0, r3
 8009332:	f001 f8a4 	bl	800a47e <SDMMC_GetResponse>
 8009336:	4602      	mov	r2, r0
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2108      	movs	r1, #8
 8009342:	4618      	mov	r0, r3
 8009344:	f001 f89b 	bl	800a47e <SDMMC_GetResponse>
 8009348:	4602      	mov	r2, r0
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	210c      	movs	r1, #12
 8009354:	4618      	mov	r0, r3
 8009356:	f001 f892 	bl	800a47e <SDMMC_GetResponse>
 800935a:	4602      	mov	r2, r0
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2104      	movs	r1, #4
 8009366:	4618      	mov	r0, r3
 8009368:	f001 f889 	bl	800a47e <SDMMC_GetResponse>
 800936c:	4603      	mov	r3, r0
 800936e:	0d1a      	lsrs	r2, r3, #20
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009374:	f107 0310 	add.w	r3, r7, #16
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff fbc6 	bl	8008b0c <HAL_SD_GetCardCSD>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009386:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800938a:	e01f      	b.n	80093cc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6819      	ldr	r1, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009394:	041b      	lsls	r3, r3, #16
 8009396:	461a      	mov	r2, r3
 8009398:	f04f 0300 	mov.w	r3, #0
 800939c:	4608      	mov	r0, r1
 800939e:	f001 f979 	bl	800a694 <SDMMC_CmdSelDesel>
 80093a2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80093a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <SD_InitCard+0x172>
  {
    return errorstate;
 80093aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ac:	e00e      	b.n	80093cc <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681d      	ldr	r5, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	466c      	mov	r4, sp
 80093b6:	f103 0210 	add.w	r2, r3, #16
 80093ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80093bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093c0:	3304      	adds	r3, #4
 80093c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093c4:	4628      	mov	r0, r5
 80093c6:	f000 ffbd 	bl	800a344 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3740      	adds	r7, #64	; 0x40
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bdb0      	pop	{r4, r5, r7, pc}

080093d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	617b      	str	r3, [r7, #20]
 80093e4:	2300      	movs	r3, #0
 80093e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 f974 	bl	800a6da <SDMMC_CmdGoIdleState>
 80093f2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <SD_PowerON+0x2a>
  {
    return errorstate;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	e072      	b.n	80094e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4618      	mov	r0, r3
 8009404:	f001 f987 	bl	800a716 <SDMMC_CmdOperCond>
 8009408:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00d      	beq.n	800942c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4618      	mov	r0, r3
 800941c:	f001 f95d 	bl	800a6da <SDMMC_CmdGoIdleState>
 8009420:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d004      	beq.n	8009432 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	e05b      	b.n	80094e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009436:	2b01      	cmp	r3, #1
 8009438:	d137      	bne.n	80094aa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2100      	movs	r1, #0
 8009440:	4618      	mov	r0, r3
 8009442:	f001 f987 	bl	800a754 <SDMMC_CmdAppCommand>
 8009446:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d02d      	beq.n	80094aa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800944e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009452:	e047      	b.n	80094e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2100      	movs	r1, #0
 800945a:	4618      	mov	r0, r3
 800945c:	f001 f97a 	bl	800a754 <SDMMC_CmdAppCommand>
 8009460:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <SD_PowerON+0x98>
    {
      return errorstate;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	e03b      	b.n	80094e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	491e      	ldr	r1, [pc, #120]	; (80094ec <SD_PowerON+0x118>)
 8009472:	4618      	mov	r0, r3
 8009474:	f001 f990 	bl	800a798 <SDMMC_CmdAppOperCommand>
 8009478:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d002      	beq.n	8009486 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009480:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009484:	e02e      	b.n	80094e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2100      	movs	r1, #0
 800948c:	4618      	mov	r0, r3
 800948e:	f000 fff6 	bl	800a47e <SDMMC_GetResponse>
 8009492:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	0fdb      	lsrs	r3, r3, #31
 8009498:	2b01      	cmp	r3, #1
 800949a:	d101      	bne.n	80094a0 <SD_PowerON+0xcc>
 800949c:	2301      	movs	r3, #1
 800949e:	e000      	b.n	80094a2 <SD_PowerON+0xce>
 80094a0:	2300      	movs	r3, #0
 80094a2:	613b      	str	r3, [r7, #16]

    count++;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	3301      	adds	r3, #1
 80094a8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d802      	bhi.n	80094ba <SD_PowerON+0xe6>
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0cc      	beq.n	8009454 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d902      	bls.n	80094ca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80094c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094c8:	e00c      	b.n	80094e4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d003      	beq.n	80094dc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	645a      	str	r2, [r3, #68]	; 0x44
 80094da:	e002      	b.n	80094e2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	c1100000 	.word	0xc1100000

080094f0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d102      	bne.n	8009506 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009500:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009504:	e018      	b.n	8009538 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800950e:	041b      	lsls	r3, r3, #16
 8009510:	4619      	mov	r1, r3
 8009512:	4610      	mov	r0, r2
 8009514:	f001 fa05 	bl	800a922 <SDMMC_CmdSendStatus>
 8009518:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	e009      	b.n	8009538 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2100      	movs	r1, #0
 800952a:	4618      	mov	r0, r3
 800952c:	f000 ffa7 	bl	800a47e <SDMMC_GetResponse>
 8009530:	4602      	mov	r2, r0
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009548:	2300      	movs	r3, #0
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	2300      	movs	r3, #0
 800954e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2100      	movs	r1, #0
 8009556:	4618      	mov	r0, r3
 8009558:	f000 ff91 	bl	800a47e <SDMMC_GetResponse>
 800955c:	4603      	mov	r3, r0
 800955e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009566:	d102      	bne.n	800956e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009568:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800956c:	e02f      	b.n	80095ce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800956e:	f107 030c 	add.w	r3, r7, #12
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f879 	bl	800966c <SD_FindSCR>
 800957a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	e023      	b.n	80095ce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d01c      	beq.n	80095ca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009598:	041b      	lsls	r3, r3, #16
 800959a:	4619      	mov	r1, r3
 800959c:	4610      	mov	r0, r2
 800959e:	f001 f8d9 	bl	800a754 <SDMMC_CmdAppCommand>
 80095a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	e00f      	b.n	80095ce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2102      	movs	r1, #2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 f913 	bl	800a7e0 <SDMMC_CmdBusWidth>
 80095ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	e003      	b.n	80095ce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80095c6:	2300      	movs	r3, #0
 80095c8:	e001      	b.n	80095ce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b086      	sub	sp, #24
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80095de:	2300      	movs	r3, #0
 80095e0:	60fb      	str	r3, [r7, #12]
 80095e2:	2300      	movs	r3, #0
 80095e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2100      	movs	r1, #0
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 ff46 	bl	800a47e <SDMMC_GetResponse>
 80095f2:	4603      	mov	r3, r0
 80095f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095fc:	d102      	bne.n	8009604 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80095fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009602:	e02f      	b.n	8009664 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009604:	f107 030c 	add.w	r3, r7, #12
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f82e 	bl	800966c <SD_FindSCR>
 8009610:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	e023      	b.n	8009664 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d01c      	beq.n	8009660 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800962e:	041b      	lsls	r3, r3, #16
 8009630:	4619      	mov	r1, r3
 8009632:	4610      	mov	r0, r2
 8009634:	f001 f88e 	bl	800a754 <SDMMC_CmdAppCommand>
 8009638:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	e00f      	b.n	8009664 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2100      	movs	r1, #0
 800964a:	4618      	mov	r0, r3
 800964c:	f001 f8c8 	bl	800a7e0 <SDMMC_CmdBusWidth>
 8009650:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	e003      	b.n	8009664 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800965c:	2300      	movs	r3, #0
 800965e:	e001      	b.n	8009664 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009660:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800966c:	b590      	push	{r4, r7, lr}
 800966e:	b08f      	sub	sp, #60	; 0x3c
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009676:	f7fc fda3 	bl	80061c0 <HAL_GetTick>
 800967a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009680:	2300      	movs	r3, #0
 8009682:	60bb      	str	r3, [r7, #8]
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2108      	movs	r1, #8
 8009692:	4618      	mov	r0, r3
 8009694:	f000 ff32 	bl	800a4fc <SDMMC_CmdBlockLength>
 8009698:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	e0b2      	b.n	800980a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ac:	041b      	lsls	r3, r3, #16
 80096ae:	4619      	mov	r1, r3
 80096b0:	4610      	mov	r0, r2
 80096b2:	f001 f84f 	bl	800a754 <SDMMC_CmdAppCommand>
 80096b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	e0a3      	b.n	800980a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80096c8:	2308      	movs	r3, #8
 80096ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80096cc:	2330      	movs	r3, #48	; 0x30
 80096ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80096d0:	2302      	movs	r3, #2
 80096d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80096d8:	2301      	movs	r3, #1
 80096da:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f107 0210 	add.w	r2, r7, #16
 80096e4:	4611      	mov	r1, r2
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fedc 	bl	800a4a4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f001 f897 	bl	800a824 <SDMMC_CmdSendSCR>
 80096f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80096f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d02a      	beq.n	8009754 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	e083      	b.n	800980a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00f      	beq.n	8009730 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6819      	ldr	r1, [r3, #0]
 8009714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	f107 0208 	add.w	r2, r7, #8
 800971c:	18d4      	adds	r4, r2, r3
 800971e:	4608      	mov	r0, r1
 8009720:	f000 fe3c 	bl	800a39c <SDMMC_ReadFIFO>
 8009724:	4603      	mov	r3, r0
 8009726:	6023      	str	r3, [r4, #0]
      index++;
 8009728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972a:	3301      	adds	r3, #1
 800972c:	637b      	str	r3, [r7, #52]	; 0x34
 800972e:	e006      	b.n	800973e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d012      	beq.n	8009764 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800973e:	f7fc fd3f 	bl	80061c0 <HAL_GetTick>
 8009742:	4602      	mov	r2, r0
 8009744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800974c:	d102      	bne.n	8009754 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800974e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009752:	e05a      	b.n	800980a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800975e:	2b00      	cmp	r3, #0
 8009760:	d0cf      	beq.n	8009702 <SD_FindSCR+0x96>
 8009762:	e000      	b.n	8009766 <SD_FindSCR+0xfa>
      break;
 8009764:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800976c:	f003 0308 	and.w	r3, r3, #8
 8009770:	2b00      	cmp	r3, #0
 8009772:	d005      	beq.n	8009780 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2208      	movs	r2, #8
 800977a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800977c:	2308      	movs	r3, #8
 800977e:	e044      	b.n	800980a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d005      	beq.n	800979a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2202      	movs	r2, #2
 8009794:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009796:	2302      	movs	r3, #2
 8009798:	e037      	b.n	800980a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a0:	f003 0320 	and.w	r3, r3, #32
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d005      	beq.n	80097b4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2220      	movs	r2, #32
 80097ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80097b0:	2320      	movs	r3, #32
 80097b2:	e02a      	b.n	800980a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80097bc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	061a      	lsls	r2, r3, #24
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	021b      	lsls	r3, r3, #8
 80097c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	0a1b      	lsrs	r3, r3, #8
 80097d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80097d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	0e1b      	lsrs	r3, r3, #24
 80097da:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80097dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097de:	601a      	str	r2, [r3, #0]
    scr++;
 80097e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e2:	3304      	adds	r3, #4
 80097e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	061a      	lsls	r2, r3, #24
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	021b      	lsls	r3, r3, #8
 80097ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	0a1b      	lsrs	r3, r3, #8
 80097f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80097fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	0e1b      	lsrs	r3, r3, #24
 8009802:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009806:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	373c      	adds	r7, #60	; 0x3c
 800980e:	46bd      	mov	sp, r7
 8009810:	bd90      	pop	{r4, r7, pc}

08009812 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b086      	sub	sp, #24
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800981e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009824:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d03f      	beq.n	80098ac <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800982c:	2300      	movs	r3, #0
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	e033      	b.n	800989a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4618      	mov	r0, r3
 8009838:	f000 fdb0 	bl	800a39c <SDMMC_ReadFIFO>
 800983c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	b2da      	uxtb	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3301      	adds	r3, #1
 800984a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	3b01      	subs	r3, #1
 8009850:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	0a1b      	lsrs	r3, r3, #8
 8009856:	b2da      	uxtb	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3301      	adds	r3, #1
 8009860:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	3b01      	subs	r3, #1
 8009866:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	0c1b      	lsrs	r3, r3, #16
 800986c:	b2da      	uxtb	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3301      	adds	r3, #1
 8009876:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	3b01      	subs	r3, #1
 800987c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	0e1b      	lsrs	r3, r3, #24
 8009882:	b2da      	uxtb	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3301      	adds	r3, #1
 800988c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	3b01      	subs	r3, #1
 8009892:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	3301      	adds	r3, #1
 8009898:	617b      	str	r3, [r7, #20]
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b07      	cmp	r3, #7
 800989e:	d9c8      	bls.n	8009832 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80098ac:	bf00      	nop
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a1b      	ldr	r3, [r3, #32]
 80098c0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d043      	beq.n	8009956 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80098ce:	2300      	movs	r3, #0
 80098d0:	617b      	str	r3, [r7, #20]
 80098d2:	e037      	b.n	8009944 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3301      	adds	r3, #1
 80098de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	021a      	lsls	r2, r3, #8
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	3301      	adds	r3, #1
 80098f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	3b01      	subs	r3, #1
 80098fc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	041a      	lsls	r2, r3, #16
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	4313      	orrs	r3, r2
 8009908:	60bb      	str	r3, [r7, #8]
      tmp++;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3301      	adds	r3, #1
 800990e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	3b01      	subs	r3, #1
 8009914:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	061a      	lsls	r2, r3, #24
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	4313      	orrs	r3, r2
 8009920:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3301      	adds	r3, #1
 8009926:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	3b01      	subs	r3, #1
 800992c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f107 0208 	add.w	r2, r7, #8
 8009936:	4611      	mov	r1, r2
 8009938:	4618      	mov	r0, r3
 800993a:	f000 fd3c 	bl	800a3b6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	3301      	adds	r3, #1
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2b07      	cmp	r3, #7
 8009948:	d9c4      	bls.n	80098d4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009956:	bf00      	nop
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b082      	sub	sp, #8
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e040      	b.n	80099f2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009974:	2b00      	cmp	r3, #0
 8009976:	d106      	bne.n	8009986 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7fc f8f3 	bl	8005b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2224      	movs	r2, #36	; 0x24
 800998a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f022 0201 	bic.w	r2, r2, #1
 800999a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f8bf 	bl	8009b20 <UART_SetConfig>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d101      	bne.n	80099ac <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e022      	b.n	80099f2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fb15 	bl	8009fe4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689a      	ldr	r2, [r3, #8]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0201 	orr.w	r2, r2, #1
 80099e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fb9c 	bl	800a128 <UART_CheckIdleState>
 80099f0:	4603      	mov	r3, r0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b08a      	sub	sp, #40	; 0x28
 80099fe:	af02      	add	r7, sp, #8
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	603b      	str	r3, [r7, #0]
 8009a06:	4613      	mov	r3, r2
 8009a08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a0e:	2b20      	cmp	r3, #32
 8009a10:	f040 8081 	bne.w	8009b16 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <HAL_UART_Transmit+0x26>
 8009a1a:	88fb      	ldrh	r3, [r7, #6]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e079      	b.n	8009b18 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d101      	bne.n	8009a32 <HAL_UART_Transmit+0x38>
 8009a2e:	2302      	movs	r3, #2
 8009a30:	e072      	b.n	8009b18 <HAL_UART_Transmit+0x11e>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2201      	movs	r2, #1
 8009a36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2221      	movs	r2, #33	; 0x21
 8009a46:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a48:	f7fc fbba 	bl	80061c0 <HAL_GetTick>
 8009a4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	88fa      	ldrh	r2, [r7, #6]
 8009a52:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	88fa      	ldrh	r2, [r7, #6]
 8009a5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a66:	d108      	bne.n	8009a7a <HAL_UART_Transmit+0x80>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d104      	bne.n	8009a7a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009a70:	2300      	movs	r3, #0
 8009a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	61bb      	str	r3, [r7, #24]
 8009a78:	e003      	b.n	8009a82 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009a8a:	e02c      	b.n	8009ae6 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	2200      	movs	r2, #0
 8009a94:	2180      	movs	r1, #128	; 0x80
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f000 fb8f 	bl	800a1ba <UART_WaitOnFlagUntilTimeout>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e038      	b.n	8009b18 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10b      	bne.n	8009ac4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009aba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	3302      	adds	r3, #2
 8009ac0:	61bb      	str	r3, [r7, #24]
 8009ac2:	e007      	b.n	8009ad4 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	781a      	ldrb	r2, [r3, #0]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	3b01      	subs	r3, #1
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1cc      	bne.n	8009a8c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	2200      	movs	r2, #0
 8009afa:	2140      	movs	r1, #64	; 0x40
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 fb5c 	bl	800a1ba <UART_WaitOnFlagUntilTimeout>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e005      	b.n	8009b18 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2220      	movs	r2, #32
 8009b10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	e000      	b.n	8009b18 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009b16:	2302      	movs	r3, #2
  }
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3720      	adds	r7, #32
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b088      	sub	sp, #32
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689a      	ldr	r2, [r3, #8]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	431a      	orrs	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	431a      	orrs	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	69db      	ldr	r3, [r3, #28]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	4ba7      	ldr	r3, [pc, #668]	; (8009de8 <UART_SetConfig+0x2c8>)
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	6812      	ldr	r2, [r2, #0]
 8009b52:	6979      	ldr	r1, [r7, #20]
 8009b54:	430b      	orrs	r3, r1
 8009b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68da      	ldr	r2, [r3, #12]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	697a      	ldr	r2, [r7, #20]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a95      	ldr	r2, [pc, #596]	; (8009dec <UART_SetConfig+0x2cc>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d120      	bne.n	8009bde <UART_SetConfig+0xbe>
 8009b9c:	4b94      	ldr	r3, [pc, #592]	; (8009df0 <UART_SetConfig+0x2d0>)
 8009b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba2:	f003 0303 	and.w	r3, r3, #3
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d816      	bhi.n	8009bd8 <UART_SetConfig+0xb8>
 8009baa:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <UART_SetConfig+0x90>)
 8009bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb0:	08009bc1 	.word	0x08009bc1
 8009bb4:	08009bcd 	.word	0x08009bcd
 8009bb8:	08009bc7 	.word	0x08009bc7
 8009bbc:	08009bd3 	.word	0x08009bd3
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	77fb      	strb	r3, [r7, #31]
 8009bc4:	e14f      	b.n	8009e66 <UART_SetConfig+0x346>
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	77fb      	strb	r3, [r7, #31]
 8009bca:	e14c      	b.n	8009e66 <UART_SetConfig+0x346>
 8009bcc:	2304      	movs	r3, #4
 8009bce:	77fb      	strb	r3, [r7, #31]
 8009bd0:	e149      	b.n	8009e66 <UART_SetConfig+0x346>
 8009bd2:	2308      	movs	r3, #8
 8009bd4:	77fb      	strb	r3, [r7, #31]
 8009bd6:	e146      	b.n	8009e66 <UART_SetConfig+0x346>
 8009bd8:	2310      	movs	r3, #16
 8009bda:	77fb      	strb	r3, [r7, #31]
 8009bdc:	e143      	b.n	8009e66 <UART_SetConfig+0x346>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a84      	ldr	r2, [pc, #528]	; (8009df4 <UART_SetConfig+0x2d4>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d132      	bne.n	8009c4e <UART_SetConfig+0x12e>
 8009be8:	4b81      	ldr	r3, [pc, #516]	; (8009df0 <UART_SetConfig+0x2d0>)
 8009bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bee:	f003 030c 	and.w	r3, r3, #12
 8009bf2:	2b0c      	cmp	r3, #12
 8009bf4:	d828      	bhi.n	8009c48 <UART_SetConfig+0x128>
 8009bf6:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <UART_SetConfig+0xdc>)
 8009bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfc:	08009c31 	.word	0x08009c31
 8009c00:	08009c49 	.word	0x08009c49
 8009c04:	08009c49 	.word	0x08009c49
 8009c08:	08009c49 	.word	0x08009c49
 8009c0c:	08009c3d 	.word	0x08009c3d
 8009c10:	08009c49 	.word	0x08009c49
 8009c14:	08009c49 	.word	0x08009c49
 8009c18:	08009c49 	.word	0x08009c49
 8009c1c:	08009c37 	.word	0x08009c37
 8009c20:	08009c49 	.word	0x08009c49
 8009c24:	08009c49 	.word	0x08009c49
 8009c28:	08009c49 	.word	0x08009c49
 8009c2c:	08009c43 	.word	0x08009c43
 8009c30:	2300      	movs	r3, #0
 8009c32:	77fb      	strb	r3, [r7, #31]
 8009c34:	e117      	b.n	8009e66 <UART_SetConfig+0x346>
 8009c36:	2302      	movs	r3, #2
 8009c38:	77fb      	strb	r3, [r7, #31]
 8009c3a:	e114      	b.n	8009e66 <UART_SetConfig+0x346>
 8009c3c:	2304      	movs	r3, #4
 8009c3e:	77fb      	strb	r3, [r7, #31]
 8009c40:	e111      	b.n	8009e66 <UART_SetConfig+0x346>
 8009c42:	2308      	movs	r3, #8
 8009c44:	77fb      	strb	r3, [r7, #31]
 8009c46:	e10e      	b.n	8009e66 <UART_SetConfig+0x346>
 8009c48:	2310      	movs	r3, #16
 8009c4a:	77fb      	strb	r3, [r7, #31]
 8009c4c:	e10b      	b.n	8009e66 <UART_SetConfig+0x346>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a69      	ldr	r2, [pc, #420]	; (8009df8 <UART_SetConfig+0x2d8>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d120      	bne.n	8009c9a <UART_SetConfig+0x17a>
 8009c58:	4b65      	ldr	r3, [pc, #404]	; (8009df0 <UART_SetConfig+0x2d0>)
 8009c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009c62:	2b30      	cmp	r3, #48	; 0x30
 8009c64:	d013      	beq.n	8009c8e <UART_SetConfig+0x16e>
 8009c66:	2b30      	cmp	r3, #48	; 0x30
 8009c68:	d814      	bhi.n	8009c94 <UART_SetConfig+0x174>
 8009c6a:	2b20      	cmp	r3, #32
 8009c6c:	d009      	beq.n	8009c82 <UART_SetConfig+0x162>
 8009c6e:	2b20      	cmp	r3, #32
 8009c70:	d810      	bhi.n	8009c94 <UART_SetConfig+0x174>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <UART_SetConfig+0x15c>
 8009c76:	2b10      	cmp	r3, #16
 8009c78:	d006      	beq.n	8009c88 <UART_SetConfig+0x168>
 8009c7a:	e00b      	b.n	8009c94 <UART_SetConfig+0x174>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	77fb      	strb	r3, [r7, #31]
 8009c80:	e0f1      	b.n	8009e66 <UART_SetConfig+0x346>
 8009c82:	2302      	movs	r3, #2
 8009c84:	77fb      	strb	r3, [r7, #31]
 8009c86:	e0ee      	b.n	8009e66 <UART_SetConfig+0x346>
 8009c88:	2304      	movs	r3, #4
 8009c8a:	77fb      	strb	r3, [r7, #31]
 8009c8c:	e0eb      	b.n	8009e66 <UART_SetConfig+0x346>
 8009c8e:	2308      	movs	r3, #8
 8009c90:	77fb      	strb	r3, [r7, #31]
 8009c92:	e0e8      	b.n	8009e66 <UART_SetConfig+0x346>
 8009c94:	2310      	movs	r3, #16
 8009c96:	77fb      	strb	r3, [r7, #31]
 8009c98:	e0e5      	b.n	8009e66 <UART_SetConfig+0x346>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a57      	ldr	r2, [pc, #348]	; (8009dfc <UART_SetConfig+0x2dc>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d120      	bne.n	8009ce6 <UART_SetConfig+0x1c6>
 8009ca4:	4b52      	ldr	r3, [pc, #328]	; (8009df0 <UART_SetConfig+0x2d0>)
 8009ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009caa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009cae:	2bc0      	cmp	r3, #192	; 0xc0
 8009cb0:	d013      	beq.n	8009cda <UART_SetConfig+0x1ba>
 8009cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8009cb4:	d814      	bhi.n	8009ce0 <UART_SetConfig+0x1c0>
 8009cb6:	2b80      	cmp	r3, #128	; 0x80
 8009cb8:	d009      	beq.n	8009cce <UART_SetConfig+0x1ae>
 8009cba:	2b80      	cmp	r3, #128	; 0x80
 8009cbc:	d810      	bhi.n	8009ce0 <UART_SetConfig+0x1c0>
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d002      	beq.n	8009cc8 <UART_SetConfig+0x1a8>
 8009cc2:	2b40      	cmp	r3, #64	; 0x40
 8009cc4:	d006      	beq.n	8009cd4 <UART_SetConfig+0x1b4>
 8009cc6:	e00b      	b.n	8009ce0 <UART_SetConfig+0x1c0>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	77fb      	strb	r3, [r7, #31]
 8009ccc:	e0cb      	b.n	8009e66 <UART_SetConfig+0x346>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	77fb      	strb	r3, [r7, #31]
 8009cd2:	e0c8      	b.n	8009e66 <UART_SetConfig+0x346>
 8009cd4:	2304      	movs	r3, #4
 8009cd6:	77fb      	strb	r3, [r7, #31]
 8009cd8:	e0c5      	b.n	8009e66 <UART_SetConfig+0x346>
 8009cda:	2308      	movs	r3, #8
 8009cdc:	77fb      	strb	r3, [r7, #31]
 8009cde:	e0c2      	b.n	8009e66 <UART_SetConfig+0x346>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	77fb      	strb	r3, [r7, #31]
 8009ce4:	e0bf      	b.n	8009e66 <UART_SetConfig+0x346>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a45      	ldr	r2, [pc, #276]	; (8009e00 <UART_SetConfig+0x2e0>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d125      	bne.n	8009d3c <UART_SetConfig+0x21c>
 8009cf0:	4b3f      	ldr	r3, [pc, #252]	; (8009df0 <UART_SetConfig+0x2d0>)
 8009cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cfe:	d017      	beq.n	8009d30 <UART_SetConfig+0x210>
 8009d00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d04:	d817      	bhi.n	8009d36 <UART_SetConfig+0x216>
 8009d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d0a:	d00b      	beq.n	8009d24 <UART_SetConfig+0x204>
 8009d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d10:	d811      	bhi.n	8009d36 <UART_SetConfig+0x216>
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <UART_SetConfig+0x1fe>
 8009d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d1a:	d006      	beq.n	8009d2a <UART_SetConfig+0x20a>
 8009d1c:	e00b      	b.n	8009d36 <UART_SetConfig+0x216>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	77fb      	strb	r3, [r7, #31]
 8009d22:	e0a0      	b.n	8009e66 <UART_SetConfig+0x346>
 8009d24:	2302      	movs	r3, #2
 8009d26:	77fb      	strb	r3, [r7, #31]
 8009d28:	e09d      	b.n	8009e66 <UART_SetConfig+0x346>
 8009d2a:	2304      	movs	r3, #4
 8009d2c:	77fb      	strb	r3, [r7, #31]
 8009d2e:	e09a      	b.n	8009e66 <UART_SetConfig+0x346>
 8009d30:	2308      	movs	r3, #8
 8009d32:	77fb      	strb	r3, [r7, #31]
 8009d34:	e097      	b.n	8009e66 <UART_SetConfig+0x346>
 8009d36:	2310      	movs	r3, #16
 8009d38:	77fb      	strb	r3, [r7, #31]
 8009d3a:	e094      	b.n	8009e66 <UART_SetConfig+0x346>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a30      	ldr	r2, [pc, #192]	; (8009e04 <UART_SetConfig+0x2e4>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d125      	bne.n	8009d92 <UART_SetConfig+0x272>
 8009d46:	4b2a      	ldr	r3, [pc, #168]	; (8009df0 <UART_SetConfig+0x2d0>)
 8009d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d54:	d017      	beq.n	8009d86 <UART_SetConfig+0x266>
 8009d56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d5a:	d817      	bhi.n	8009d8c <UART_SetConfig+0x26c>
 8009d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d60:	d00b      	beq.n	8009d7a <UART_SetConfig+0x25a>
 8009d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d66:	d811      	bhi.n	8009d8c <UART_SetConfig+0x26c>
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d003      	beq.n	8009d74 <UART_SetConfig+0x254>
 8009d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d70:	d006      	beq.n	8009d80 <UART_SetConfig+0x260>
 8009d72:	e00b      	b.n	8009d8c <UART_SetConfig+0x26c>
 8009d74:	2301      	movs	r3, #1
 8009d76:	77fb      	strb	r3, [r7, #31]
 8009d78:	e075      	b.n	8009e66 <UART_SetConfig+0x346>
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	77fb      	strb	r3, [r7, #31]
 8009d7e:	e072      	b.n	8009e66 <UART_SetConfig+0x346>
 8009d80:	2304      	movs	r3, #4
 8009d82:	77fb      	strb	r3, [r7, #31]
 8009d84:	e06f      	b.n	8009e66 <UART_SetConfig+0x346>
 8009d86:	2308      	movs	r3, #8
 8009d88:	77fb      	strb	r3, [r7, #31]
 8009d8a:	e06c      	b.n	8009e66 <UART_SetConfig+0x346>
 8009d8c:	2310      	movs	r3, #16
 8009d8e:	77fb      	strb	r3, [r7, #31]
 8009d90:	e069      	b.n	8009e66 <UART_SetConfig+0x346>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a1c      	ldr	r2, [pc, #112]	; (8009e08 <UART_SetConfig+0x2e8>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d137      	bne.n	8009e0c <UART_SetConfig+0x2ec>
 8009d9c:	4b14      	ldr	r3, [pc, #80]	; (8009df0 <UART_SetConfig+0x2d0>)
 8009d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009da2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009da6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009daa:	d017      	beq.n	8009ddc <UART_SetConfig+0x2bc>
 8009dac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009db0:	d817      	bhi.n	8009de2 <UART_SetConfig+0x2c2>
 8009db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009db6:	d00b      	beq.n	8009dd0 <UART_SetConfig+0x2b0>
 8009db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dbc:	d811      	bhi.n	8009de2 <UART_SetConfig+0x2c2>
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d003      	beq.n	8009dca <UART_SetConfig+0x2aa>
 8009dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dc6:	d006      	beq.n	8009dd6 <UART_SetConfig+0x2b6>
 8009dc8:	e00b      	b.n	8009de2 <UART_SetConfig+0x2c2>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	77fb      	strb	r3, [r7, #31]
 8009dce:	e04a      	b.n	8009e66 <UART_SetConfig+0x346>
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	77fb      	strb	r3, [r7, #31]
 8009dd4:	e047      	b.n	8009e66 <UART_SetConfig+0x346>
 8009dd6:	2304      	movs	r3, #4
 8009dd8:	77fb      	strb	r3, [r7, #31]
 8009dda:	e044      	b.n	8009e66 <UART_SetConfig+0x346>
 8009ddc:	2308      	movs	r3, #8
 8009dde:	77fb      	strb	r3, [r7, #31]
 8009de0:	e041      	b.n	8009e66 <UART_SetConfig+0x346>
 8009de2:	2310      	movs	r3, #16
 8009de4:	77fb      	strb	r3, [r7, #31]
 8009de6:	e03e      	b.n	8009e66 <UART_SetConfig+0x346>
 8009de8:	efff69f3 	.word	0xefff69f3
 8009dec:	40011000 	.word	0x40011000
 8009df0:	40023800 	.word	0x40023800
 8009df4:	40004400 	.word	0x40004400
 8009df8:	40004800 	.word	0x40004800
 8009dfc:	40004c00 	.word	0x40004c00
 8009e00:	40005000 	.word	0x40005000
 8009e04:	40011400 	.word	0x40011400
 8009e08:	40007800 	.word	0x40007800
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a71      	ldr	r2, [pc, #452]	; (8009fd8 <UART_SetConfig+0x4b8>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d125      	bne.n	8009e62 <UART_SetConfig+0x342>
 8009e16:	4b71      	ldr	r3, [pc, #452]	; (8009fdc <UART_SetConfig+0x4bc>)
 8009e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009e20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009e24:	d017      	beq.n	8009e56 <UART_SetConfig+0x336>
 8009e26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009e2a:	d817      	bhi.n	8009e5c <UART_SetConfig+0x33c>
 8009e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e30:	d00b      	beq.n	8009e4a <UART_SetConfig+0x32a>
 8009e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e36:	d811      	bhi.n	8009e5c <UART_SetConfig+0x33c>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <UART_SetConfig+0x324>
 8009e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e40:	d006      	beq.n	8009e50 <UART_SetConfig+0x330>
 8009e42:	e00b      	b.n	8009e5c <UART_SetConfig+0x33c>
 8009e44:	2300      	movs	r3, #0
 8009e46:	77fb      	strb	r3, [r7, #31]
 8009e48:	e00d      	b.n	8009e66 <UART_SetConfig+0x346>
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	77fb      	strb	r3, [r7, #31]
 8009e4e:	e00a      	b.n	8009e66 <UART_SetConfig+0x346>
 8009e50:	2304      	movs	r3, #4
 8009e52:	77fb      	strb	r3, [r7, #31]
 8009e54:	e007      	b.n	8009e66 <UART_SetConfig+0x346>
 8009e56:	2308      	movs	r3, #8
 8009e58:	77fb      	strb	r3, [r7, #31]
 8009e5a:	e004      	b.n	8009e66 <UART_SetConfig+0x346>
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	77fb      	strb	r3, [r7, #31]
 8009e60:	e001      	b.n	8009e66 <UART_SetConfig+0x346>
 8009e62:	2310      	movs	r3, #16
 8009e64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e6e:	d15a      	bne.n	8009f26 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8009e70:	7ffb      	ldrb	r3, [r7, #31]
 8009e72:	2b08      	cmp	r3, #8
 8009e74:	d827      	bhi.n	8009ec6 <UART_SetConfig+0x3a6>
 8009e76:	a201      	add	r2, pc, #4	; (adr r2, 8009e7c <UART_SetConfig+0x35c>)
 8009e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7c:	08009ea1 	.word	0x08009ea1
 8009e80:	08009ea9 	.word	0x08009ea9
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	08009ec7 	.word	0x08009ec7
 8009e8c:	08009eb7 	.word	0x08009eb7
 8009e90:	08009ec7 	.word	0x08009ec7
 8009e94:	08009ec7 	.word	0x08009ec7
 8009e98:	08009ec7 	.word	0x08009ec7
 8009e9c:	08009ebf 	.word	0x08009ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ea0:	f7fd fde4 	bl	8007a6c <HAL_RCC_GetPCLK1Freq>
 8009ea4:	61b8      	str	r0, [r7, #24]
        break;
 8009ea6:	e013      	b.n	8009ed0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ea8:	f7fd fdf4 	bl	8007a94 <HAL_RCC_GetPCLK2Freq>
 8009eac:	61b8      	str	r0, [r7, #24]
        break;
 8009eae:	e00f      	b.n	8009ed0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009eb0:	4b4b      	ldr	r3, [pc, #300]	; (8009fe0 <UART_SetConfig+0x4c0>)
 8009eb2:	61bb      	str	r3, [r7, #24]
        break;
 8009eb4:	e00c      	b.n	8009ed0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009eb6:	f7fd fd17 	bl	80078e8 <HAL_RCC_GetSysClockFreq>
 8009eba:	61b8      	str	r0, [r7, #24]
        break;
 8009ebc:	e008      	b.n	8009ed0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ec2:	61bb      	str	r3, [r7, #24]
        break;
 8009ec4:	e004      	b.n	8009ed0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	77bb      	strb	r3, [r7, #30]
        break;
 8009ece:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d074      	beq.n	8009fc0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	005a      	lsls	r2, r3, #1
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	085b      	lsrs	r3, r3, #1
 8009ee0:	441a      	add	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	2b0f      	cmp	r3, #15
 8009ef0:	d916      	bls.n	8009f20 <UART_SetConfig+0x400>
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ef8:	d212      	bcs.n	8009f20 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	f023 030f 	bic.w	r3, r3, #15
 8009f02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	085b      	lsrs	r3, r3, #1
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	f003 0307 	and.w	r3, r3, #7
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	89fb      	ldrh	r3, [r7, #14]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	89fa      	ldrh	r2, [r7, #14]
 8009f1c:	60da      	str	r2, [r3, #12]
 8009f1e:	e04f      	b.n	8009fc0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	77bb      	strb	r3, [r7, #30]
 8009f24:	e04c      	b.n	8009fc0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f26:	7ffb      	ldrb	r3, [r7, #31]
 8009f28:	2b08      	cmp	r3, #8
 8009f2a:	d828      	bhi.n	8009f7e <UART_SetConfig+0x45e>
 8009f2c:	a201      	add	r2, pc, #4	; (adr r2, 8009f34 <UART_SetConfig+0x414>)
 8009f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f32:	bf00      	nop
 8009f34:	08009f59 	.word	0x08009f59
 8009f38:	08009f61 	.word	0x08009f61
 8009f3c:	08009f69 	.word	0x08009f69
 8009f40:	08009f7f 	.word	0x08009f7f
 8009f44:	08009f6f 	.word	0x08009f6f
 8009f48:	08009f7f 	.word	0x08009f7f
 8009f4c:	08009f7f 	.word	0x08009f7f
 8009f50:	08009f7f 	.word	0x08009f7f
 8009f54:	08009f77 	.word	0x08009f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f58:	f7fd fd88 	bl	8007a6c <HAL_RCC_GetPCLK1Freq>
 8009f5c:	61b8      	str	r0, [r7, #24]
        break;
 8009f5e:	e013      	b.n	8009f88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f60:	f7fd fd98 	bl	8007a94 <HAL_RCC_GetPCLK2Freq>
 8009f64:	61b8      	str	r0, [r7, #24]
        break;
 8009f66:	e00f      	b.n	8009f88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f68:	4b1d      	ldr	r3, [pc, #116]	; (8009fe0 <UART_SetConfig+0x4c0>)
 8009f6a:	61bb      	str	r3, [r7, #24]
        break;
 8009f6c:	e00c      	b.n	8009f88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f6e:	f7fd fcbb 	bl	80078e8 <HAL_RCC_GetSysClockFreq>
 8009f72:	61b8      	str	r0, [r7, #24]
        break;
 8009f74:	e008      	b.n	8009f88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f7a:	61bb      	str	r3, [r7, #24]
        break;
 8009f7c:	e004      	b.n	8009f88 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	77bb      	strb	r3, [r7, #30]
        break;
 8009f86:	bf00      	nop
    }

    if (pclk != 0U)
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d018      	beq.n	8009fc0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	085a      	lsrs	r2, r3, #1
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	441a      	add	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	2b0f      	cmp	r3, #15
 8009fa6:	d909      	bls.n	8009fbc <UART_SetConfig+0x49c>
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fae:	d205      	bcs.n	8009fbc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	60da      	str	r2, [r3, #12]
 8009fba:	e001      	b.n	8009fc0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009fcc:	7fbb      	ldrb	r3, [r7, #30]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3720      	adds	r7, #32
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	40007c00 	.word	0x40007c00
 8009fdc:	40023800 	.word	0x40023800
 8009fe0:	00f42400 	.word	0x00f42400

08009fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00a      	beq.n	800a00e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	430a      	orrs	r2, r1
 800a00c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a012:	f003 0302 	and.w	r3, r3, #2
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00a      	beq.n	800a030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	430a      	orrs	r2, r1
 800a02e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a034:	f003 0304 	and.w	r3, r3, #4
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00a      	beq.n	800a052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	f003 0308 	and.w	r3, r3, #8
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00a      	beq.n	800a074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	430a      	orrs	r2, r1
 800a072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a078:	f003 0310 	and.w	r3, r3, #16
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00a      	beq.n	800a096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	430a      	orrs	r2, r1
 800a094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09a:	f003 0320 	and.w	r3, r3, #32
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00a      	beq.n	800a0b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d01a      	beq.n	800a0fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0e2:	d10a      	bne.n	800a0fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00a      	beq.n	800a11c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	430a      	orrs	r2, r1
 800a11a:	605a      	str	r2, [r3, #4]
  }
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af02      	add	r7, sp, #8
 800a12e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a138:	f7fc f842 	bl	80061c0 <HAL_GetTick>
 800a13c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 0308 	and.w	r3, r3, #8
 800a148:	2b08      	cmp	r3, #8
 800a14a:	d10e      	bne.n	800a16a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a14c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f82d 	bl	800a1ba <UART_WaitOnFlagUntilTimeout>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e023      	b.n	800a1b2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 0304 	and.w	r3, r3, #4
 800a174:	2b04      	cmp	r3, #4
 800a176:	d10e      	bne.n	800a196 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f817 	bl	800a1ba <UART_WaitOnFlagUntilTimeout>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e00d      	b.n	800a1b2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2220      	movs	r2, #32
 800a19a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2220      	movs	r2, #32
 800a1a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b09c      	sub	sp, #112	; 0x70
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	603b      	str	r3, [r7, #0]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1ca:	e0a5      	b.n	800a318 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1d2:	f000 80a1 	beq.w	800a318 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1d6:	f7fb fff3 	bl	80061c0 <HAL_GetTick>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d302      	bcc.n	800a1ec <UART_WaitOnFlagUntilTimeout+0x32>
 800a1e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d13e      	bne.n	800a26a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1f4:	e853 3f00 	ldrex	r3, [r3]
 800a1f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a1fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a200:	667b      	str	r3, [r7, #100]	; 0x64
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a20a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a20c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a210:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a212:	e841 2300 	strex	r3, r2, [r1]
 800a216:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1e6      	bne.n	800a1ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3308      	adds	r3, #8
 800a224:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a228:	e853 3f00 	ldrex	r3, [r3]
 800a22c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a230:	f023 0301 	bic.w	r3, r3, #1
 800a234:	663b      	str	r3, [r7, #96]	; 0x60
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3308      	adds	r3, #8
 800a23c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a23e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a240:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a242:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a246:	e841 2300 	strex	r3, r2, [r1]
 800a24a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a24c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1e5      	bne.n	800a21e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2220      	movs	r2, #32
 800a256:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2220      	movs	r2, #32
 800a25c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e067      	b.n	800a33a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0304 	and.w	r3, r3, #4
 800a274:	2b00      	cmp	r3, #0
 800a276:	d04f      	beq.n	800a318 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	69db      	ldr	r3, [r3, #28]
 800a27e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a286:	d147      	bne.n	800a318 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a290:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29a:	e853 3f00 	ldrex	r3, [r3]
 800a29e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2b0:	637b      	str	r3, [r7, #52]	; 0x34
 800a2b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2b8:	e841 2300 	strex	r3, r2, [r1]
 800a2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1e6      	bne.n	800a292 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3308      	adds	r3, #8
 800a2ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	e853 3f00 	ldrex	r3, [r3]
 800a2d2:	613b      	str	r3, [r7, #16]
   return(result);
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	f023 0301 	bic.w	r3, r3, #1
 800a2da:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3308      	adds	r3, #8
 800a2e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a2e4:	623a      	str	r2, [r7, #32]
 800a2e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e8:	69f9      	ldr	r1, [r7, #28]
 800a2ea:	6a3a      	ldr	r2, [r7, #32]
 800a2ec:	e841 2300 	strex	r3, r2, [r1]
 800a2f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1e5      	bne.n	800a2c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2220      	movs	r2, #32
 800a2fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2220      	movs	r2, #32
 800a302:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2220      	movs	r2, #32
 800a308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e010      	b.n	800a33a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	69da      	ldr	r2, [r3, #28]
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	4013      	ands	r3, r2
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	429a      	cmp	r2, r3
 800a326:	bf0c      	ite	eq
 800a328:	2301      	moveq	r3, #1
 800a32a:	2300      	movne	r3, #0
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	461a      	mov	r2, r3
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	429a      	cmp	r2, r3
 800a334:	f43f af4a 	beq.w	800a1cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3770      	adds	r7, #112	; 0x70
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a344:	b084      	sub	sp, #16
 800a346:	b480      	push	{r7}
 800a348:	b085      	sub	sp, #20
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	f107 001c 	add.w	r0, r7, #28
 800a352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a35a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a35c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a35e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a362:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a366:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a36a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a36e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	4313      	orrs	r3, r2
 800a374:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	4b07      	ldr	r3, [pc, #28]	; (800a398 <SDMMC_Init+0x54>)
 800a37c:	4013      	ands	r3, r2
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	431a      	orrs	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	b004      	add	sp, #16
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	ffff8100 	.word	0xffff8100

0800a39c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a3b6:	b480      	push	{r7}
 800a3b8:	b083      	sub	sp, #12
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2203      	movs	r2, #3
 800a3e4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 0303 	and.w	r3, r3, #3
}
 800a404:	4618      	mov	r0, r3
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a42e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a434:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a43a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	4313      	orrs	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68da      	ldr	r2, [r3, #12]
 800a446:	4b06      	ldr	r3, [pc, #24]	; (800a460 <SDMMC_SendCommand+0x50>)
 800a448:	4013      	ands	r3, r2
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	431a      	orrs	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	fffff000 	.word	0xfffff000

0800a464 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	b2db      	uxtb	r3, r3
}
 800a472:	4618      	mov	r0, r3
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3314      	adds	r3, #20
 800a48c:	461a      	mov	r2, r3
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	4413      	add	r3, r2
 800a492:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
}  
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a4ca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a4d0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a4d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a4ee:	2300      	movs	r3, #0

}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b088      	sub	sp, #32
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a50a:	2310      	movs	r3, #16
 800a50c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a50e:	2340      	movs	r3, #64	; 0x40
 800a510:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a512:	2300      	movs	r3, #0
 800a514:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a51a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a51c:	f107 0308 	add.w	r3, r7, #8
 800a520:	4619      	mov	r1, r3
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7ff ff74 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a528:	f241 3288 	movw	r2, #5000	; 0x1388
 800a52c:	2110      	movs	r1, #16
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fa1a 	bl	800a968 <SDMMC_GetCmdResp1>
 800a534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a536:	69fb      	ldr	r3, [r7, #28]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3720      	adds	r7, #32
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b088      	sub	sp, #32
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a54e:	2311      	movs	r3, #17
 800a550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a552:	2340      	movs	r3, #64	; 0x40
 800a554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a556:	2300      	movs	r3, #0
 800a558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a55a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a55e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a560:	f107 0308 	add.w	r3, r7, #8
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7ff ff52 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a56c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a570:	2111      	movs	r1, #17
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f9f8 	bl	800a968 <SDMMC_GetCmdResp1>
 800a578:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a57a:	69fb      	ldr	r3, [r7, #28]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3720      	adds	r7, #32
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b088      	sub	sp, #32
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a592:	2312      	movs	r3, #18
 800a594:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a596:	2340      	movs	r3, #64	; 0x40
 800a598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a59a:	2300      	movs	r3, #0
 800a59c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a59e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5a4:	f107 0308 	add.w	r3, r7, #8
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7ff ff30 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a5b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5b4:	2112      	movs	r1, #18
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f9d6 	bl	800a968 <SDMMC_GetCmdResp1>
 800a5bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5be:	69fb      	ldr	r3, [r7, #28]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3720      	adds	r7, #32
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b088      	sub	sp, #32
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a5d6:	2318      	movs	r3, #24
 800a5d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5da:	2340      	movs	r3, #64	; 0x40
 800a5dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5e8:	f107 0308 	add.w	r3, r7, #8
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7ff ff0e 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a5f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5f8:	2118      	movs	r1, #24
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f9b4 	bl	800a968 <SDMMC_GetCmdResp1>
 800a600:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a602:	69fb      	ldr	r3, [r7, #28]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3720      	adds	r7, #32
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b088      	sub	sp, #32
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a61a:	2319      	movs	r3, #25
 800a61c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a61e:	2340      	movs	r3, #64	; 0x40
 800a620:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a622:	2300      	movs	r3, #0
 800a624:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a62a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a62c:	f107 0308 	add.w	r3, r7, #8
 800a630:	4619      	mov	r1, r3
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7ff feec 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a638:	f241 3288 	movw	r2, #5000	; 0x1388
 800a63c:	2119      	movs	r1, #25
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f992 	bl	800a968 <SDMMC_GetCmdResp1>
 800a644:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a646:	69fb      	ldr	r3, [r7, #28]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3720      	adds	r7, #32
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b088      	sub	sp, #32
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a658:	2300      	movs	r3, #0
 800a65a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a65c:	230c      	movs	r3, #12
 800a65e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a660:	2340      	movs	r3, #64	; 0x40
 800a662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a664:	2300      	movs	r3, #0
 800a666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a66c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a66e:	f107 0308 	add.w	r3, r7, #8
 800a672:	4619      	mov	r1, r3
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7ff fecb 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a67a:	4a05      	ldr	r2, [pc, #20]	; (800a690 <SDMMC_CmdStopTransfer+0x40>)
 800a67c:	210c      	movs	r1, #12
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f972 	bl	800a968 <SDMMC_GetCmdResp1>
 800a684:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a686:	69fb      	ldr	r3, [r7, #28]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3720      	adds	r7, #32
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	05f5e100 	.word	0x05f5e100

0800a694 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b08a      	sub	sp, #40	; 0x28
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a6a4:	2307      	movs	r3, #7
 800a6a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6a8:	2340      	movs	r3, #64	; 0x40
 800a6aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6b4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6b6:	f107 0310 	add.w	r3, r7, #16
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7ff fea7 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a6c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6c6:	2107      	movs	r1, #7
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 f94d 	bl	800a968 <SDMMC_GetCmdResp1>
 800a6ce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3728      	adds	r7, #40	; 0x28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b088      	sub	sp, #32
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6f8:	f107 0308 	add.w	r3, r7, #8
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7ff fe86 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fb67 	bl	800add8 <SDMMC_GetCmdError>
 800a70a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a70c:	69fb      	ldr	r3, [r7, #28]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3720      	adds	r7, #32
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b088      	sub	sp, #32
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a71e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a722:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a724:	2308      	movs	r3, #8
 800a726:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a728:	2340      	movs	r3, #64	; 0x40
 800a72a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a72c:	2300      	movs	r3, #0
 800a72e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a734:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a736:	f107 0308 	add.w	r3, r7, #8
 800a73a:	4619      	mov	r1, r3
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f7ff fe67 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fafa 	bl	800ad3c <SDMMC_GetCmdResp7>
 800a748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a74a:	69fb      	ldr	r3, [r7, #28]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3720      	adds	r7, #32
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a762:	2337      	movs	r3, #55	; 0x37
 800a764:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a766:	2340      	movs	r3, #64	; 0x40
 800a768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a76a:	2300      	movs	r3, #0
 800a76c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a76e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a772:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a774:	f107 0308 	add.w	r3, r7, #8
 800a778:	4619      	mov	r1, r3
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7ff fe48 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a780:	f241 3288 	movw	r2, #5000	; 0x1388
 800a784:	2137      	movs	r1, #55	; 0x37
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f8ee 	bl	800a968 <SDMMC_GetCmdResp1>
 800a78c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a78e:	69fb      	ldr	r3, [r7, #28]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3720      	adds	r7, #32
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <SDMMC_CmdAppOperCommand+0x44>)
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a7aa:	2329      	movs	r3, #41	; 0x29
 800a7ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7ae:	2340      	movs	r3, #64	; 0x40
 800a7b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7bc:	f107 0308 	add.w	r3, r7, #8
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7ff fe24 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fa03 	bl	800abd4 <SDMMC_GetCmdResp3>
 800a7ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7d0:	69fb      	ldr	r3, [r7, #28]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3720      	adds	r7, #32
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	80100000 	.word	0x80100000

0800a7e0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a7ee:	2306      	movs	r3, #6
 800a7f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7f2:	2340      	movs	r3, #64	; 0x40
 800a7f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a800:	f107 0308 	add.w	r3, r7, #8
 800a804:	4619      	mov	r1, r3
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7ff fe02 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a80c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a810:	2106      	movs	r1, #6
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f8a8 	bl	800a968 <SDMMC_GetCmdResp1>
 800a818:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a81a:	69fb      	ldr	r3, [r7, #28]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3720      	adds	r7, #32
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a82c:	2300      	movs	r3, #0
 800a82e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a830:	2333      	movs	r3, #51	; 0x33
 800a832:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a834:	2340      	movs	r3, #64	; 0x40
 800a836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a838:	2300      	movs	r3, #0
 800a83a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a83c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a840:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a842:	f107 0308 	add.w	r3, r7, #8
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f7ff fde1 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a84e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a852:	2133      	movs	r1, #51	; 0x33
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f887 	bl	800a968 <SDMMC_GetCmdResp1>
 800a85a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a85c:	69fb      	ldr	r3, [r7, #28]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3720      	adds	r7, #32
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b088      	sub	sp, #32
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a872:	2302      	movs	r3, #2
 800a874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a876:	23c0      	movs	r3, #192	; 0xc0
 800a878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a87a:	2300      	movs	r3, #0
 800a87c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a87e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a882:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a884:	f107 0308 	add.w	r3, r7, #8
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7ff fdc0 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f957 	bl	800ab44 <SDMMC_GetCmdResp2>
 800a896:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a898:	69fb      	ldr	r3, [r7, #28]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3720      	adds	r7, #32
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b088      	sub	sp, #32
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a8b0:	2309      	movs	r3, #9
 800a8b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a8b4:	23c0      	movs	r3, #192	; 0xc0
 800a8b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8c2:	f107 0308 	add.w	r3, r7, #8
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7ff fda1 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f938 	bl	800ab44 <SDMMC_GetCmdResp2>
 800a8d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8d6:	69fb      	ldr	r3, [r7, #28]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3720      	adds	r7, #32
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b088      	sub	sp, #32
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8f2:	2340      	movs	r3, #64	; 0x40
 800a8f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a900:	f107 0308 	add.w	r3, r7, #8
 800a904:	4619      	mov	r1, r3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff fd82 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a90c:	683a      	ldr	r2, [r7, #0]
 800a90e:	2103      	movs	r1, #3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f99d 	bl	800ac50 <SDMMC_GetCmdResp6>
 800a916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a918:	69fb      	ldr	r3, [r7, #28]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3720      	adds	r7, #32
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b088      	sub	sp, #32
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a930:	230d      	movs	r3, #13
 800a932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a934:	2340      	movs	r3, #64	; 0x40
 800a936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a938:	2300      	movs	r3, #0
 800a93a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a93c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a940:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a942:	f107 0308 	add.w	r3, r7, #8
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7ff fd61 	bl	800a410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a94e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a952:	210d      	movs	r1, #13
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f807 	bl	800a968 <SDMMC_GetCmdResp1>
 800a95a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a95c:	69fb      	ldr	r3, [r7, #28]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3720      	adds	r7, #32
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
	...

0800a968 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	460b      	mov	r3, r1
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a976:	4b70      	ldr	r3, [pc, #448]	; (800ab38 <SDMMC_GetCmdResp1+0x1d0>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a70      	ldr	r2, [pc, #448]	; (800ab3c <SDMMC_GetCmdResp1+0x1d4>)
 800a97c:	fba2 2303 	umull	r2, r3, r2, r3
 800a980:	0a5a      	lsrs	r2, r3, #9
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	fb02 f303 	mul.w	r3, r2, r3
 800a988:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	1e5a      	subs	r2, r3, #1
 800a98e:	61fa      	str	r2, [r7, #28]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d102      	bne.n	800a99a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a994:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a998:	e0c9      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a99e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d0ef      	beq.n	800a98a <SDMMC_GetCmdResp1+0x22>
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1ea      	bne.n	800a98a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d004      	beq.n	800a9ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2204      	movs	r2, #4
 800a9c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9c6:	2304      	movs	r3, #4
 800a9c8:	e0b1      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d004      	beq.n	800a9e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e0a6      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	22c5      	movs	r2, #197	; 0xc5
 800a9e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f7ff fd3c 	bl	800a464 <SDMMC_GetCommandResponse>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	7afb      	ldrb	r3, [r7, #11]
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d001      	beq.n	800a9fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e099      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7ff fd3e 	bl	800a47e <SDMMC_GetResponse>
 800aa02:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aa04:	697a      	ldr	r2, [r7, #20]
 800aa06:	4b4e      	ldr	r3, [pc, #312]	; (800ab40 <SDMMC_GetCmdResp1+0x1d8>)
 800aa08:	4013      	ands	r3, r2
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e08d      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	da02      	bge.n	800aa1e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aa18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa1c:	e087      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aa28:	2340      	movs	r3, #64	; 0x40
 800aa2a:	e080      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aa36:	2380      	movs	r3, #128	; 0x80
 800aa38:	e079      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aa44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa48:	e071      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d002      	beq.n	800aa5a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aa54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa58:	e069      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d002      	beq.n	800aa6a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aa64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa68:	e061      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aa74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa78:	e059      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d002      	beq.n	800aa8a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aa84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa88:	e051      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d002      	beq.n	800aa9a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aa94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa98:	e049      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aaa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aaa8:	e041      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d002      	beq.n	800aaba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800aab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aab8:	e039      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aac4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aac8:	e031      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d002      	beq.n	800aada <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aad4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aad8:	e029      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aae4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aae8:	e021      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d002      	beq.n	800aafa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aaf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aaf8:	e019      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ab04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab08:	e011      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ab14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ab18:	e009      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	f003 0308 	and.w	r3, r3, #8
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d002      	beq.n	800ab2a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ab24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ab28:	e001      	b.n	800ab2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3720      	adds	r7, #32
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	20000ac8 	.word	0x20000ac8
 800ab3c:	10624dd3 	.word	0x10624dd3
 800ab40:	fdffe008 	.word	0xfdffe008

0800ab44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab4c:	4b1f      	ldr	r3, [pc, #124]	; (800abcc <SDMMC_GetCmdResp2+0x88>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a1f      	ldr	r2, [pc, #124]	; (800abd0 <SDMMC_GetCmdResp2+0x8c>)
 800ab52:	fba2 2303 	umull	r2, r3, r2, r3
 800ab56:	0a5b      	lsrs	r3, r3, #9
 800ab58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab5c:	fb02 f303 	mul.w	r3, r2, r3
 800ab60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	1e5a      	subs	r2, r3, #1
 800ab66:	60fa      	str	r2, [r7, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d102      	bne.n	800ab72 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab70:	e026      	b.n	800abc0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d0ef      	beq.n	800ab62 <SDMMC_GetCmdResp2+0x1e>
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1ea      	bne.n	800ab62 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab90:	f003 0304 	and.w	r3, r3, #4
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d004      	beq.n	800aba2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2204      	movs	r2, #4
 800ab9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab9e:	2304      	movs	r3, #4
 800aba0:	e00e      	b.n	800abc0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d004      	beq.n	800abb8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e003      	b.n	800abc0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	22c5      	movs	r2, #197	; 0xc5
 800abbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3714      	adds	r7, #20
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	20000ac8 	.word	0x20000ac8
 800abd0:	10624dd3 	.word	0x10624dd3

0800abd4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abdc:	4b1a      	ldr	r3, [pc, #104]	; (800ac48 <SDMMC_GetCmdResp3+0x74>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a1a      	ldr	r2, [pc, #104]	; (800ac4c <SDMMC_GetCmdResp3+0x78>)
 800abe2:	fba2 2303 	umull	r2, r3, r2, r3
 800abe6:	0a5b      	lsrs	r3, r3, #9
 800abe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abec:	fb02 f303 	mul.w	r3, r2, r3
 800abf0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	1e5a      	subs	r2, r3, #1
 800abf6:	60fa      	str	r2, [r7, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d102      	bne.n	800ac02 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac00:	e01b      	b.n	800ac3a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d0ef      	beq.n	800abf2 <SDMMC_GetCmdResp3+0x1e>
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1ea      	bne.n	800abf2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac20:	f003 0304 	and.w	r3, r3, #4
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d004      	beq.n	800ac32 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2204      	movs	r2, #4
 800ac2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac2e:	2304      	movs	r3, #4
 800ac30:	e003      	b.n	800ac3a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	22c5      	movs	r2, #197	; 0xc5
 800ac36:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3714      	adds	r7, #20
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	20000ac8 	.word	0x20000ac8
 800ac4c:	10624dd3 	.word	0x10624dd3

0800ac50 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b088      	sub	sp, #32
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	607a      	str	r2, [r7, #4]
 800ac5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac5e:	4b35      	ldr	r3, [pc, #212]	; (800ad34 <SDMMC_GetCmdResp6+0xe4>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a35      	ldr	r2, [pc, #212]	; (800ad38 <SDMMC_GetCmdResp6+0xe8>)
 800ac64:	fba2 2303 	umull	r2, r3, r2, r3
 800ac68:	0a5b      	lsrs	r3, r3, #9
 800ac6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac6e:	fb02 f303 	mul.w	r3, r2, r3
 800ac72:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	1e5a      	subs	r2, r3, #1
 800ac78:	61fa      	str	r2, [r7, #28]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d102      	bne.n	800ac84 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac82:	e052      	b.n	800ad2a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac88:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d0ef      	beq.n	800ac74 <SDMMC_GetCmdResp6+0x24>
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1ea      	bne.n	800ac74 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca2:	f003 0304 	and.w	r3, r3, #4
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d004      	beq.n	800acb4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2204      	movs	r2, #4
 800acae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800acb0:	2304      	movs	r3, #4
 800acb2:	e03a      	b.n	800ad2a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb8:	f003 0301 	and.w	r3, r3, #1
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d004      	beq.n	800acca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2201      	movs	r2, #1
 800acc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e02f      	b.n	800ad2a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f7ff fbca 	bl	800a464 <SDMMC_GetCommandResponse>
 800acd0:	4603      	mov	r3, r0
 800acd2:	461a      	mov	r2, r3
 800acd4:	7afb      	ldrb	r3, [r7, #11]
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d001      	beq.n	800acde <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acda:	2301      	movs	r3, #1
 800acdc:	e025      	b.n	800ad2a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	22c5      	movs	r2, #197	; 0xc5
 800ace2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ace4:	2100      	movs	r1, #0
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f7ff fbc9 	bl	800a47e <SDMMC_GetResponse>
 800acec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d106      	bne.n	800ad06 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	0c1b      	lsrs	r3, r3, #16
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ad02:	2300      	movs	r3, #0
 800ad04:	e011      	b.n	800ad2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ad10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad14:	e009      	b.n	800ad2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ad20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad24:	e001      	b.n	800ad2a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3720      	adds	r7, #32
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20000ac8 	.word	0x20000ac8
 800ad38:	10624dd3 	.word	0x10624dd3

0800ad3c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad44:	4b22      	ldr	r3, [pc, #136]	; (800add0 <SDMMC_GetCmdResp7+0x94>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a22      	ldr	r2, [pc, #136]	; (800add4 <SDMMC_GetCmdResp7+0x98>)
 800ad4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4e:	0a5b      	lsrs	r3, r3, #9
 800ad50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad54:	fb02 f303 	mul.w	r3, r2, r3
 800ad58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	1e5a      	subs	r2, r3, #1
 800ad5e:	60fa      	str	r2, [r7, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d102      	bne.n	800ad6a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad68:	e02c      	b.n	800adc4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d0ef      	beq.n	800ad5a <SDMMC_GetCmdResp7+0x1e>
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1ea      	bne.n	800ad5a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad88:	f003 0304 	and.w	r3, r3, #4
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d004      	beq.n	800ad9a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2204      	movs	r2, #4
 800ad94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad96:	2304      	movs	r3, #4
 800ad98:	e014      	b.n	800adc4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad9e:	f003 0301 	and.w	r3, r3, #1
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d004      	beq.n	800adb0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800adac:	2301      	movs	r3, #1
 800adae:	e009      	b.n	800adc4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2240      	movs	r2, #64	; 0x40
 800adc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800adc2:	2300      	movs	r3, #0
  
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	20000ac8 	.word	0x20000ac8
 800add4:	10624dd3 	.word	0x10624dd3

0800add8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ade0:	4b11      	ldr	r3, [pc, #68]	; (800ae28 <SDMMC_GetCmdError+0x50>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a11      	ldr	r2, [pc, #68]	; (800ae2c <SDMMC_GetCmdError+0x54>)
 800ade6:	fba2 2303 	umull	r2, r3, r2, r3
 800adea:	0a5b      	lsrs	r3, r3, #9
 800adec:	f241 3288 	movw	r2, #5000	; 0x1388
 800adf0:	fb02 f303 	mul.w	r3, r2, r3
 800adf4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	1e5a      	subs	r2, r3, #1
 800adfa:	60fa      	str	r2, [r7, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d102      	bne.n	800ae06 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae04:	e009      	b.n	800ae1a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d0f1      	beq.n	800adf6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	22c5      	movs	r2, #197	; 0xc5
 800ae16:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	20000ac8 	.word	0x20000ac8
 800ae2c:	10624dd3 	.word	0x10624dd3

0800ae30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ae34:	4904      	ldr	r1, [pc, #16]	; (800ae48 <MX_FATFS_Init+0x18>)
 800ae36:	4805      	ldr	r0, [pc, #20]	; (800ae4c <MX_FATFS_Init+0x1c>)
 800ae38:	f002 fbd2 	bl	800d5e0 <FATFS_LinkDriver>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	461a      	mov	r2, r3
 800ae40:	4b03      	ldr	r3, [pc, #12]	; (800ae50 <MX_FATFS_Init+0x20>)
 800ae42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ae44:	bf00      	nop
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	2000584c 	.word	0x2000584c
 800ae4c:	0800fc8c 	.word	0x0800fc8c
 800ae50:	20005848 	.word	0x20005848

0800ae54 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ae54:	b480      	push	{r7}
 800ae56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ae58:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ae6e:	f000 f896 	bl	800af9e <BSP_SD_IsDetected>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d001      	beq.n	800ae7c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ae78:	2302      	movs	r3, #2
 800ae7a:	e012      	b.n	800aea2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800ae7c:	480b      	ldr	r0, [pc, #44]	; (800aeac <BSP_SD_Init+0x48>)
 800ae7e:	f7fd fa45 	bl	800830c <HAL_SD_Init>
 800ae82:	4603      	mov	r3, r0
 800ae84:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ae86:	79fb      	ldrb	r3, [r7, #7]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d109      	bne.n	800aea0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ae8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae90:	4806      	ldr	r0, [pc, #24]	; (800aeac <BSP_SD_Init+0x48>)
 800ae92:	f7fe f80b 	bl	8008eac <HAL_SD_ConfigWideBusOperation>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d001      	beq.n	800aea0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800aea0:	79fb      	ldrb	r3, [r7, #7]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	200056dc 	.word	0x200056dc

0800aeb0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aebc:	2300      	movs	r3, #0
 800aebe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68ba      	ldr	r2, [r7, #8]
 800aec4:	68f9      	ldr	r1, [r7, #12]
 800aec6:	4806      	ldr	r0, [pc, #24]	; (800aee0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800aec8:	f7fd fad8 	bl	800847c <HAL_SD_ReadBlocks_DMA>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d001      	beq.n	800aed6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	200056dc 	.word	0x200056dc

0800aee4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aef0:	2300      	movs	r3, #0
 800aef2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	68f9      	ldr	r1, [r7, #12]
 800aefa:	4806      	ldr	r0, [pc, #24]	; (800af14 <BSP_SD_WriteBlocks_DMA+0x30>)
 800aefc:	f7fd fba0 	bl	8008640 <HAL_SD_WriteBlocks_DMA>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	200056dc 	.word	0x200056dc

0800af18 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800af1c:	4805      	ldr	r0, [pc, #20]	; (800af34 <BSP_SD_GetCardState+0x1c>)
 800af1e:	f7fe f85f 	bl	8008fe0 <HAL_SD_GetCardState>
 800af22:	4603      	mov	r3, r0
 800af24:	2b04      	cmp	r3, #4
 800af26:	bf14      	ite	ne
 800af28:	2301      	movne	r3, #1
 800af2a:	2300      	moveq	r3, #0
 800af2c:	b2db      	uxtb	r3, r3
}
 800af2e:	4618      	mov	r0, r3
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	200056dc 	.word	0x200056dc

0800af38 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800af40:	6879      	ldr	r1, [r7, #4]
 800af42:	4803      	ldr	r0, [pc, #12]	; (800af50 <BSP_SD_GetCardInfo+0x18>)
 800af44:	f7fd ff86 	bl	8008e54 <HAL_SD_GetCardInfo>
}
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	200056dc 	.word	0x200056dc

0800af54 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800af5c:	f000 f818 	bl	800af90 <BSP_SD_AbortCallback>
}
 800af60:	bf00      	nop
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800af70:	f000 f9a8 	bl	800b2c4 <BSP_SD_WriteCpltCallback>
}
 800af74:	bf00      	nop
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800af84:	f000 f9aa 	bl	800b2dc <BSP_SD_ReadCpltCallback>
}
 800af88:	bf00      	nop
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800af90:	b480      	push	{r7}
 800af92:	af00      	add	r7, sp, #0

}
 800af94:	bf00      	nop
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b082      	sub	sp, #8
 800afa2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800afa4:	2301      	movs	r3, #1
 800afa6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800afa8:	f000 f80c 	bl	800afc4 <BSP_PlatformIsDetected>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d101      	bne.n	800afb6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800afb2:	2300      	movs	r3, #0
 800afb4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800afb6:	79fb      	ldrb	r3, [r7, #7]
 800afb8:	b2db      	uxtb	r3, r3
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
	...

0800afc4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800afca:	2301      	movs	r3, #1
 800afcc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800afce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800afd2:	4806      	ldr	r0, [pc, #24]	; (800afec <BSP_PlatformIsDetected+0x28>)
 800afd4:	f7fc f872 	bl	80070bc <HAL_GPIO_ReadPin>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d001      	beq.n	800afe2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800afde:	2300      	movs	r3, #0
 800afe0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800afe2:	79fb      	ldrb	r3, [r7, #7]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	40022000 	.word	0x40022000

0800aff0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800aff8:	f7fb f8e2 	bl	80061c0 <HAL_GetTick>
 800affc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800affe:	e006      	b.n	800b00e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b000:	f7ff ff8a 	bl	800af18 <BSP_SD_GetCardState>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	e009      	b.n	800b022 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b00e:	f7fb f8d7 	bl	80061c0 <HAL_GetTick>
 800b012:	4602      	mov	r2, r0
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d8f0      	bhi.n	800b000 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
	...

0800b02c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	4603      	mov	r3, r0
 800b034:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b036:	4b0b      	ldr	r3, [pc, #44]	; (800b064 <SD_CheckStatus+0x38>)
 800b038:	2201      	movs	r2, #1
 800b03a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b03c:	f7ff ff6c 	bl	800af18 <BSP_SD_GetCardState>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d107      	bne.n	800b056 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b046:	4b07      	ldr	r3, [pc, #28]	; (800b064 <SD_CheckStatus+0x38>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	f023 0301 	bic.w	r3, r3, #1
 800b050:	b2da      	uxtb	r2, r3
 800b052:	4b04      	ldr	r3, [pc, #16]	; (800b064 <SD_CheckStatus+0x38>)
 800b054:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b056:	4b03      	ldr	r3, [pc, #12]	; (800b064 <SD_CheckStatus+0x38>)
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	b2db      	uxtb	r3, r3
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	20000ad1 	.word	0x20000ad1

0800b068 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	4603      	mov	r3, r0
 800b070:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b072:	f7ff fef7 	bl	800ae64 <BSP_SD_Init>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d107      	bne.n	800b08c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b07c:	79fb      	ldrb	r3, [r7, #7]
 800b07e:	4618      	mov	r0, r3
 800b080:	f7ff ffd4 	bl	800b02c <SD_CheckStatus>
 800b084:	4603      	mov	r3, r0
 800b086:	461a      	mov	r2, r3
 800b088:	4b04      	ldr	r3, [pc, #16]	; (800b09c <SD_initialize+0x34>)
 800b08a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b08c:	4b03      	ldr	r3, [pc, #12]	; (800b09c <SD_initialize+0x34>)
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	b2db      	uxtb	r3, r3
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20000ad1 	.word	0x20000ad1

0800b0a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b0aa:	79fb      	ldrb	r3, [r7, #7]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7ff ffbd 	bl	800b02c <SD_CheckStatus>
 800b0b2:	4603      	mov	r3, r0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60b9      	str	r1, [r7, #8]
 800b0c4:	607a      	str	r2, [r7, #4]
 800b0c6:	603b      	str	r3, [r7, #0]
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b0d0:	f247 5030 	movw	r0, #30000	; 0x7530
 800b0d4:	f7ff ff8c 	bl	800aff0 <SD_CheckStatusWithTimeout>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	da01      	bge.n	800b0e2 <SD_read+0x26>
  {
    return res;
 800b0de:	7dfb      	ldrb	r3, [r7, #23]
 800b0e0:	e03b      	b.n	800b15a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b0e2:	683a      	ldr	r2, [r7, #0]
 800b0e4:	6879      	ldr	r1, [r7, #4]
 800b0e6:	68b8      	ldr	r0, [r7, #8]
 800b0e8:	f7ff fee2 	bl	800aeb0 <BSP_SD_ReadBlocks_DMA>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d132      	bne.n	800b158 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b0f2:	4b1c      	ldr	r3, [pc, #112]	; (800b164 <SD_read+0xa8>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b0f8:	f7fb f862 	bl	80061c0 <HAL_GetTick>
 800b0fc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b0fe:	bf00      	nop
 800b100:	4b18      	ldr	r3, [pc, #96]	; (800b164 <SD_read+0xa8>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d108      	bne.n	800b11a <SD_read+0x5e>
 800b108:	f7fb f85a 	bl	80061c0 <HAL_GetTick>
 800b10c:	4602      	mov	r2, r0
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	f247 522f 	movw	r2, #29999	; 0x752f
 800b116:	4293      	cmp	r3, r2
 800b118:	d9f2      	bls.n	800b100 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b11a:	4b12      	ldr	r3, [pc, #72]	; (800b164 <SD_read+0xa8>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d102      	bne.n	800b128 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	75fb      	strb	r3, [r7, #23]
 800b126:	e017      	b.n	800b158 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b128:	4b0e      	ldr	r3, [pc, #56]	; (800b164 <SD_read+0xa8>)
 800b12a:	2200      	movs	r2, #0
 800b12c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b12e:	f7fb f847 	bl	80061c0 <HAL_GetTick>
 800b132:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b134:	e007      	b.n	800b146 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b136:	f7ff feef 	bl	800af18 <BSP_SD_GetCardState>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d102      	bne.n	800b146 <SD_read+0x8a>
          {
            res = RES_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b144:	e008      	b.n	800b158 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b146:	f7fb f83b 	bl	80061c0 <HAL_GetTick>
 800b14a:	4602      	mov	r2, r0
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	f247 522f 	movw	r2, #29999	; 0x752f
 800b154:	4293      	cmp	r3, r2
 800b156:	d9ee      	bls.n	800b136 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b158:	7dfb      	ldrb	r3, [r7, #23]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3718      	adds	r7, #24
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	20005610 	.word	0x20005610

0800b168 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60b9      	str	r1, [r7, #8]
 800b170:	607a      	str	r2, [r7, #4]
 800b172:	603b      	str	r3, [r7, #0]
 800b174:	4603      	mov	r3, r0
 800b176:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b17c:	4b24      	ldr	r3, [pc, #144]	; (800b210 <SD_write+0xa8>)
 800b17e:	2200      	movs	r2, #0
 800b180:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b182:	f247 5030 	movw	r0, #30000	; 0x7530
 800b186:	f7ff ff33 	bl	800aff0 <SD_CheckStatusWithTimeout>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	da01      	bge.n	800b194 <SD_write+0x2c>
  {
    return res;
 800b190:	7dfb      	ldrb	r3, [r7, #23]
 800b192:	e038      	b.n	800b206 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	6879      	ldr	r1, [r7, #4]
 800b198:	68b8      	ldr	r0, [r7, #8]
 800b19a:	f7ff fea3 	bl	800aee4 <BSP_SD_WriteBlocks_DMA>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d12f      	bne.n	800b204 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b1a4:	f7fb f80c 	bl	80061c0 <HAL_GetTick>
 800b1a8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b1aa:	bf00      	nop
 800b1ac:	4b18      	ldr	r3, [pc, #96]	; (800b210 <SD_write+0xa8>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d108      	bne.n	800b1c6 <SD_write+0x5e>
 800b1b4:	f7fb f804 	bl	80061c0 <HAL_GetTick>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	f247 522f 	movw	r2, #29999	; 0x752f
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d9f2      	bls.n	800b1ac <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b1c6:	4b12      	ldr	r3, [pc, #72]	; (800b210 <SD_write+0xa8>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d102      	bne.n	800b1d4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	75fb      	strb	r3, [r7, #23]
 800b1d2:	e017      	b.n	800b204 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b1d4:	4b0e      	ldr	r3, [pc, #56]	; (800b210 <SD_write+0xa8>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b1da:	f7fa fff1 	bl	80061c0 <HAL_GetTick>
 800b1de:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1e0:	e007      	b.n	800b1f2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b1e2:	f7ff fe99 	bl	800af18 <BSP_SD_GetCardState>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d102      	bne.n	800b1f2 <SD_write+0x8a>
          {
            res = RES_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	75fb      	strb	r3, [r7, #23]
            break;
 800b1f0:	e008      	b.n	800b204 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1f2:	f7fa ffe5 	bl	80061c0 <HAL_GetTick>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	1ad3      	subs	r3, r2, r3
 800b1fc:	f247 522f 	movw	r2, #29999	; 0x752f
 800b200:	4293      	cmp	r3, r2
 800b202:	d9ee      	bls.n	800b1e2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b204:	7dfb      	ldrb	r3, [r7, #23]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3718      	adds	r7, #24
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	2000560c 	.word	0x2000560c

0800b214 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08c      	sub	sp, #48	; 0x30
 800b218:	af00      	add	r7, sp, #0
 800b21a:	4603      	mov	r3, r0
 800b21c:	603a      	str	r2, [r7, #0]
 800b21e:	71fb      	strb	r3, [r7, #7]
 800b220:	460b      	mov	r3, r1
 800b222:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b224:	2301      	movs	r3, #1
 800b226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b22a:	4b25      	ldr	r3, [pc, #148]	; (800b2c0 <SD_ioctl+0xac>)
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	2b00      	cmp	r3, #0
 800b236:	d001      	beq.n	800b23c <SD_ioctl+0x28>
 800b238:	2303      	movs	r3, #3
 800b23a:	e03c      	b.n	800b2b6 <SD_ioctl+0xa2>

  switch (cmd)
 800b23c:	79bb      	ldrb	r3, [r7, #6]
 800b23e:	2b03      	cmp	r3, #3
 800b240:	d834      	bhi.n	800b2ac <SD_ioctl+0x98>
 800b242:	a201      	add	r2, pc, #4	; (adr r2, 800b248 <SD_ioctl+0x34>)
 800b244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b248:	0800b259 	.word	0x0800b259
 800b24c:	0800b261 	.word	0x0800b261
 800b250:	0800b279 	.word	0x0800b279
 800b254:	0800b293 	.word	0x0800b293
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b258:	2300      	movs	r3, #0
 800b25a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b25e:	e028      	b.n	800b2b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b260:	f107 030c 	add.w	r3, r7, #12
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff fe67 	bl	800af38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b26a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b276:	e01c      	b.n	800b2b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b278:	f107 030c 	add.w	r3, r7, #12
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7ff fe5b 	bl	800af38 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b284:	b29a      	uxth	r2, r3
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b290:	e00f      	b.n	800b2b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b292:	f107 030c 	add.w	r3, r7, #12
 800b296:	4618      	mov	r0, r3
 800b298:	f7ff fe4e 	bl	800af38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	0a5a      	lsrs	r2, r3, #9
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b2aa:	e002      	b.n	800b2b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b2ac:	2304      	movs	r3, #4
 800b2ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b2b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3730      	adds	r7, #48	; 0x30
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	20000ad1 	.word	0x20000ad1

0800b2c4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b2c8:	4b03      	ldr	r3, [pc, #12]	; (800b2d8 <BSP_SD_WriteCpltCallback+0x14>)
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	601a      	str	r2, [r3, #0]
}
 800b2ce:	bf00      	nop
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	2000560c 	.word	0x2000560c

0800b2dc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b2e0:	4b03      	ldr	r3, [pc, #12]	; (800b2f0 <BSP_SD_ReadCpltCallback+0x14>)
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	601a      	str	r2, [r3, #0]
}
 800b2e6:	bf00      	nop
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	20005610 	.word	0x20005610

0800b2f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b2fe:	79fb      	ldrb	r3, [r7, #7]
 800b300:	4a08      	ldr	r2, [pc, #32]	; (800b324 <disk_status+0x30>)
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	79fa      	ldrb	r2, [r7, #7]
 800b30c:	4905      	ldr	r1, [pc, #20]	; (800b324 <disk_status+0x30>)
 800b30e:	440a      	add	r2, r1
 800b310:	7a12      	ldrb	r2, [r2, #8]
 800b312:	4610      	mov	r0, r2
 800b314:	4798      	blx	r3
 800b316:	4603      	mov	r3, r0
 800b318:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	2000563c 	.word	0x2000563c

0800b328 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	4603      	mov	r3, r0
 800b330:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	4a0d      	ldr	r2, [pc, #52]	; (800b370 <disk_initialize+0x48>)
 800b33a:	5cd3      	ldrb	r3, [r2, r3]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d111      	bne.n	800b364 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b340:	79fb      	ldrb	r3, [r7, #7]
 800b342:	4a0b      	ldr	r2, [pc, #44]	; (800b370 <disk_initialize+0x48>)
 800b344:	2101      	movs	r1, #1
 800b346:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b348:	79fb      	ldrb	r3, [r7, #7]
 800b34a:	4a09      	ldr	r2, [pc, #36]	; (800b370 <disk_initialize+0x48>)
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4413      	add	r3, r2
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	79fa      	ldrb	r2, [r7, #7]
 800b356:	4906      	ldr	r1, [pc, #24]	; (800b370 <disk_initialize+0x48>)
 800b358:	440a      	add	r2, r1
 800b35a:	7a12      	ldrb	r2, [r2, #8]
 800b35c:	4610      	mov	r0, r2
 800b35e:	4798      	blx	r3
 800b360:	4603      	mov	r3, r0
 800b362:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b364:	7bfb      	ldrb	r3, [r7, #15]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	2000563c 	.word	0x2000563c

0800b374 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b374:	b590      	push	{r4, r7, lr}
 800b376:	b087      	sub	sp, #28
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	607a      	str	r2, [r7, #4]
 800b37e:	603b      	str	r3, [r7, #0]
 800b380:	4603      	mov	r3, r0
 800b382:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b384:	7bfb      	ldrb	r3, [r7, #15]
 800b386:	4a0a      	ldr	r2, [pc, #40]	; (800b3b0 <disk_read+0x3c>)
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4413      	add	r3, r2
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	689c      	ldr	r4, [r3, #8]
 800b390:	7bfb      	ldrb	r3, [r7, #15]
 800b392:	4a07      	ldr	r2, [pc, #28]	; (800b3b0 <disk_read+0x3c>)
 800b394:	4413      	add	r3, r2
 800b396:	7a18      	ldrb	r0, [r3, #8]
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	68b9      	ldr	r1, [r7, #8]
 800b39e:	47a0      	blx	r4
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b3a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	371c      	adds	r7, #28
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd90      	pop	{r4, r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	2000563c 	.word	0x2000563c

0800b3b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b3b4:	b590      	push	{r4, r7, lr}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60b9      	str	r1, [r7, #8]
 800b3bc:	607a      	str	r2, [r7, #4]
 800b3be:	603b      	str	r3, [r7, #0]
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
 800b3c6:	4a0a      	ldr	r2, [pc, #40]	; (800b3f0 <disk_write+0x3c>)
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	4413      	add	r3, r2
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	68dc      	ldr	r4, [r3, #12]
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
 800b3d2:	4a07      	ldr	r2, [pc, #28]	; (800b3f0 <disk_write+0x3c>)
 800b3d4:	4413      	add	r3, r2
 800b3d6:	7a18      	ldrb	r0, [r3, #8]
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	68b9      	ldr	r1, [r7, #8]
 800b3de:	47a0      	blx	r4
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	371c      	adds	r7, #28
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd90      	pop	{r4, r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	2000563c 	.word	0x2000563c

0800b3f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	603a      	str	r2, [r7, #0]
 800b3fe:	71fb      	strb	r3, [r7, #7]
 800b400:	460b      	mov	r3, r1
 800b402:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b404:	79fb      	ldrb	r3, [r7, #7]
 800b406:	4a09      	ldr	r2, [pc, #36]	; (800b42c <disk_ioctl+0x38>)
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	79fa      	ldrb	r2, [r7, #7]
 800b412:	4906      	ldr	r1, [pc, #24]	; (800b42c <disk_ioctl+0x38>)
 800b414:	440a      	add	r2, r1
 800b416:	7a10      	ldrb	r0, [r2, #8]
 800b418:	79b9      	ldrb	r1, [r7, #6]
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	4798      	blx	r3
 800b41e:	4603      	mov	r3, r0
 800b420:	73fb      	strb	r3, [r7, #15]
  return res;
 800b422:	7bfb      	ldrb	r3, [r7, #15]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	2000563c 	.word	0x2000563c

0800b430 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3301      	adds	r3, #1
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b440:	89fb      	ldrh	r3, [r7, #14]
 800b442:	021b      	lsls	r3, r3, #8
 800b444:	b21a      	sxth	r2, r3
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	b21b      	sxth	r3, r3
 800b44c:	4313      	orrs	r3, r2
 800b44e:	b21b      	sxth	r3, r3
 800b450:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b452:	89fb      	ldrh	r3, [r7, #14]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3714      	adds	r7, #20
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	3303      	adds	r3, #3
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	021b      	lsls	r3, r3, #8
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	3202      	adds	r2, #2
 800b478:	7812      	ldrb	r2, [r2, #0]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	021b      	lsls	r3, r3, #8
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	3201      	adds	r2, #1
 800b486:	7812      	ldrb	r2, [r2, #0]
 800b488:	4313      	orrs	r3, r2
 800b48a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	021b      	lsls	r3, r3, #8
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	7812      	ldrb	r2, [r2, #0]
 800b494:	4313      	orrs	r3, r2
 800b496:	60fb      	str	r3, [r7, #12]
	return rv;
 800b498:	68fb      	ldr	r3, [r7, #12]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b083      	sub	sp, #12
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	1c5a      	adds	r2, r3, #1
 800b4b6:	607a      	str	r2, [r7, #4]
 800b4b8:	887a      	ldrh	r2, [r7, #2]
 800b4ba:	b2d2      	uxtb	r2, r2
 800b4bc:	701a      	strb	r2, [r3, #0]
 800b4be:	887b      	ldrh	r3, [r7, #2]
 800b4c0:	0a1b      	lsrs	r3, r3, #8
 800b4c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	1c5a      	adds	r2, r3, #1
 800b4c8:	607a      	str	r2, [r7, #4]
 800b4ca:	887a      	ldrh	r2, [r7, #2]
 800b4cc:	b2d2      	uxtb	r2, r2
 800b4ce:	701a      	strb	r2, [r3, #0]
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	607a      	str	r2, [r7, #4]
 800b4ec:	683a      	ldr	r2, [r7, #0]
 800b4ee:	b2d2      	uxtb	r2, r2
 800b4f0:	701a      	strb	r2, [r3, #0]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	0a1b      	lsrs	r3, r3, #8
 800b4f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	607a      	str	r2, [r7, #4]
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	b2d2      	uxtb	r2, r2
 800b502:	701a      	strb	r2, [r3, #0]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	0a1b      	lsrs	r3, r3, #8
 800b508:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	1c5a      	adds	r2, r3, #1
 800b50e:	607a      	str	r2, [r7, #4]
 800b510:	683a      	ldr	r2, [r7, #0]
 800b512:	b2d2      	uxtb	r2, r2
 800b514:	701a      	strb	r2, [r3, #0]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	0a1b      	lsrs	r3, r3, #8
 800b51a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	607a      	str	r2, [r7, #4]
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	b2d2      	uxtb	r2, r2
 800b526:	701a      	strb	r2, [r3, #0]
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b534:	b480      	push	{r7}
 800b536:	b087      	sub	sp, #28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00d      	beq.n	800b56a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	1c53      	adds	r3, r2, #1
 800b552:	613b      	str	r3, [r7, #16]
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	1c59      	adds	r1, r3, #1
 800b558:	6179      	str	r1, [r7, #20]
 800b55a:	7812      	ldrb	r2, [r2, #0]
 800b55c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	3b01      	subs	r3, #1
 800b562:	607b      	str	r3, [r7, #4]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1f1      	bne.n	800b54e <mem_cpy+0x1a>
	}
}
 800b56a:	bf00      	nop
 800b56c:	371c      	adds	r7, #28
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr

0800b576 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b576:	b480      	push	{r7}
 800b578:	b087      	sub	sp, #28
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	60f8      	str	r0, [r7, #12]
 800b57e:	60b9      	str	r1, [r7, #8]
 800b580:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	1c5a      	adds	r2, r3, #1
 800b58a:	617a      	str	r2, [r7, #20]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	b2d2      	uxtb	r2, r2
 800b590:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	3b01      	subs	r3, #1
 800b596:	607b      	str	r3, [r7, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1f3      	bne.n	800b586 <mem_set+0x10>
}
 800b59e:	bf00      	nop
 800b5a0:	bf00      	nop
 800b5a2:	371c      	adds	r7, #28
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b5ac:	b480      	push	{r7}
 800b5ae:	b089      	sub	sp, #36	; 0x24
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	61fb      	str	r3, [r7, #28]
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	1c5a      	adds	r2, r3, #1
 800b5c8:	61fa      	str	r2, [r7, #28]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	61ba      	str	r2, [r7, #24]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	1acb      	subs	r3, r1, r3
 800b5d8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	607b      	str	r3, [r7, #4]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d002      	beq.n	800b5ec <mem_cmp+0x40>
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d0eb      	beq.n	800b5c4 <mem_cmp+0x18>

	return r;
 800b5ec:	697b      	ldr	r3, [r7, #20]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3724      	adds	r7, #36	; 0x24
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr

0800b5fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b5fa:	b480      	push	{r7}
 800b5fc:	b083      	sub	sp, #12
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b604:	e002      	b.n	800b60c <chk_chr+0x12>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	3301      	adds	r3, #1
 800b60a:	607b      	str	r3, [r7, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d005      	beq.n	800b620 <chk_chr+0x26>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	461a      	mov	r2, r3
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d1f2      	bne.n	800b606 <chk_chr+0xc>
	return *str;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	781b      	ldrb	r3, [r3, #0]
}
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b63a:	2300      	movs	r3, #0
 800b63c:	60bb      	str	r3, [r7, #8]
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	60fb      	str	r3, [r7, #12]
 800b642:	e029      	b.n	800b698 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b644:	4a27      	ldr	r2, [pc, #156]	; (800b6e4 <chk_lock+0xb4>)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	011b      	lsls	r3, r3, #4
 800b64a:	4413      	add	r3, r2
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d01d      	beq.n	800b68e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b652:	4a24      	ldr	r2, [pc, #144]	; (800b6e4 <chk_lock+0xb4>)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	011b      	lsls	r3, r3, #4
 800b658:	4413      	add	r3, r2
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	429a      	cmp	r2, r3
 800b662:	d116      	bne.n	800b692 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b664:	4a1f      	ldr	r2, [pc, #124]	; (800b6e4 <chk_lock+0xb4>)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	011b      	lsls	r3, r3, #4
 800b66a:	4413      	add	r3, r2
 800b66c:	3304      	adds	r3, #4
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b674:	429a      	cmp	r2, r3
 800b676:	d10c      	bne.n	800b692 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b678:	4a1a      	ldr	r2, [pc, #104]	; (800b6e4 <chk_lock+0xb4>)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	011b      	lsls	r3, r3, #4
 800b67e:	4413      	add	r3, r2
 800b680:	3308      	adds	r3, #8
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b688:	429a      	cmp	r2, r3
 800b68a:	d102      	bne.n	800b692 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b68c:	e007      	b.n	800b69e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b68e:	2301      	movs	r3, #1
 800b690:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	3301      	adds	r3, #1
 800b696:	60fb      	str	r3, [r7, #12]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d9d2      	bls.n	800b644 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d109      	bne.n	800b6b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d102      	bne.n	800b6b0 <chk_lock+0x80>
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d101      	bne.n	800b6b4 <chk_lock+0x84>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	e010      	b.n	800b6d6 <chk_lock+0xa6>
 800b6b4:	2312      	movs	r3, #18
 800b6b6:	e00e      	b.n	800b6d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d108      	bne.n	800b6d0 <chk_lock+0xa0>
 800b6be:	4a09      	ldr	r2, [pc, #36]	; (800b6e4 <chk_lock+0xb4>)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	011b      	lsls	r3, r3, #4
 800b6c4:	4413      	add	r3, r2
 800b6c6:	330c      	adds	r3, #12
 800b6c8:	881b      	ldrh	r3, [r3, #0]
 800b6ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6ce:	d101      	bne.n	800b6d4 <chk_lock+0xa4>
 800b6d0:	2310      	movs	r3, #16
 800b6d2:	e000      	b.n	800b6d6 <chk_lock+0xa6>
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3714      	adds	r7, #20
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	2000561c 	.word	0x2000561c

0800b6e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	607b      	str	r3, [r7, #4]
 800b6f2:	e002      	b.n	800b6fa <enq_lock+0x12>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	607b      	str	r3, [r7, #4]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d806      	bhi.n	800b70e <enq_lock+0x26>
 800b700:	4a09      	ldr	r2, [pc, #36]	; (800b728 <enq_lock+0x40>)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	011b      	lsls	r3, r3, #4
 800b706:	4413      	add	r3, r2
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1f2      	bne.n	800b6f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2b02      	cmp	r3, #2
 800b712:	bf14      	ite	ne
 800b714:	2301      	movne	r3, #1
 800b716:	2300      	moveq	r3, #0
 800b718:	b2db      	uxtb	r3, r3
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	2000561c 	.word	0x2000561c

0800b72c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b736:	2300      	movs	r3, #0
 800b738:	60fb      	str	r3, [r7, #12]
 800b73a:	e01f      	b.n	800b77c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b73c:	4a41      	ldr	r2, [pc, #260]	; (800b844 <inc_lock+0x118>)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	011b      	lsls	r3, r3, #4
 800b742:	4413      	add	r3, r2
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d113      	bne.n	800b776 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b74e:	4a3d      	ldr	r2, [pc, #244]	; (800b844 <inc_lock+0x118>)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	011b      	lsls	r3, r3, #4
 800b754:	4413      	add	r3, r2
 800b756:	3304      	adds	r3, #4
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b75e:	429a      	cmp	r2, r3
 800b760:	d109      	bne.n	800b776 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b762:	4a38      	ldr	r2, [pc, #224]	; (800b844 <inc_lock+0x118>)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	011b      	lsls	r3, r3, #4
 800b768:	4413      	add	r3, r2
 800b76a:	3308      	adds	r3, #8
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b772:	429a      	cmp	r2, r3
 800b774:	d006      	beq.n	800b784 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	3301      	adds	r3, #1
 800b77a:	60fb      	str	r3, [r7, #12]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d9dc      	bls.n	800b73c <inc_lock+0x10>
 800b782:	e000      	b.n	800b786 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b784:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2b02      	cmp	r3, #2
 800b78a:	d132      	bne.n	800b7f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b78c:	2300      	movs	r3, #0
 800b78e:	60fb      	str	r3, [r7, #12]
 800b790:	e002      	b.n	800b798 <inc_lock+0x6c>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	3301      	adds	r3, #1
 800b796:	60fb      	str	r3, [r7, #12]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d806      	bhi.n	800b7ac <inc_lock+0x80>
 800b79e:	4a29      	ldr	r2, [pc, #164]	; (800b844 <inc_lock+0x118>)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	011b      	lsls	r3, r3, #4
 800b7a4:	4413      	add	r3, r2
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1f2      	bne.n	800b792 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	d101      	bne.n	800b7b6 <inc_lock+0x8a>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	e040      	b.n	800b838 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	4922      	ldr	r1, [pc, #136]	; (800b844 <inc_lock+0x118>)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	011b      	lsls	r3, r3, #4
 800b7c0:	440b      	add	r3, r1
 800b7c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	689a      	ldr	r2, [r3, #8]
 800b7c8:	491e      	ldr	r1, [pc, #120]	; (800b844 <inc_lock+0x118>)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	011b      	lsls	r3, r3, #4
 800b7ce:	440b      	add	r3, r1
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	695a      	ldr	r2, [r3, #20]
 800b7d8:	491a      	ldr	r1, [pc, #104]	; (800b844 <inc_lock+0x118>)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	011b      	lsls	r3, r3, #4
 800b7de:	440b      	add	r3, r1
 800b7e0:	3308      	adds	r3, #8
 800b7e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b7e4:	4a17      	ldr	r2, [pc, #92]	; (800b844 <inc_lock+0x118>)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	011b      	lsls	r3, r3, #4
 800b7ea:	4413      	add	r3, r2
 800b7ec:	330c      	adds	r3, #12
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d009      	beq.n	800b80c <inc_lock+0xe0>
 800b7f8:	4a12      	ldr	r2, [pc, #72]	; (800b844 <inc_lock+0x118>)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	011b      	lsls	r3, r3, #4
 800b7fe:	4413      	add	r3, r2
 800b800:	330c      	adds	r3, #12
 800b802:	881b      	ldrh	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <inc_lock+0xe0>
 800b808:	2300      	movs	r3, #0
 800b80a:	e015      	b.n	800b838 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d108      	bne.n	800b824 <inc_lock+0xf8>
 800b812:	4a0c      	ldr	r2, [pc, #48]	; (800b844 <inc_lock+0x118>)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	011b      	lsls	r3, r3, #4
 800b818:	4413      	add	r3, r2
 800b81a:	330c      	adds	r3, #12
 800b81c:	881b      	ldrh	r3, [r3, #0]
 800b81e:	3301      	adds	r3, #1
 800b820:	b29a      	uxth	r2, r3
 800b822:	e001      	b.n	800b828 <inc_lock+0xfc>
 800b824:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b828:	4906      	ldr	r1, [pc, #24]	; (800b844 <inc_lock+0x118>)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	011b      	lsls	r3, r3, #4
 800b82e:	440b      	add	r3, r1
 800b830:	330c      	adds	r3, #12
 800b832:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	3301      	adds	r3, #1
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3714      	adds	r7, #20
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr
 800b844:	2000561c 	.word	0x2000561c

0800b848 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	3b01      	subs	r3, #1
 800b854:	607b      	str	r3, [r7, #4]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d825      	bhi.n	800b8a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800b85c:	4a17      	ldr	r2, [pc, #92]	; (800b8bc <dec_lock+0x74>)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	011b      	lsls	r3, r3, #4
 800b862:	4413      	add	r3, r2
 800b864:	330c      	adds	r3, #12
 800b866:	881b      	ldrh	r3, [r3, #0]
 800b868:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b86a:	89fb      	ldrh	r3, [r7, #14]
 800b86c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b870:	d101      	bne.n	800b876 <dec_lock+0x2e>
 800b872:	2300      	movs	r3, #0
 800b874:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b876:	89fb      	ldrh	r3, [r7, #14]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d002      	beq.n	800b882 <dec_lock+0x3a>
 800b87c:	89fb      	ldrh	r3, [r7, #14]
 800b87e:	3b01      	subs	r3, #1
 800b880:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b882:	4a0e      	ldr	r2, [pc, #56]	; (800b8bc <dec_lock+0x74>)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	011b      	lsls	r3, r3, #4
 800b888:	4413      	add	r3, r2
 800b88a:	330c      	adds	r3, #12
 800b88c:	89fa      	ldrh	r2, [r7, #14]
 800b88e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b890:	89fb      	ldrh	r3, [r7, #14]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d105      	bne.n	800b8a2 <dec_lock+0x5a>
 800b896:	4a09      	ldr	r2, [pc, #36]	; (800b8bc <dec_lock+0x74>)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	011b      	lsls	r3, r3, #4
 800b89c:	4413      	add	r3, r2
 800b89e:	2200      	movs	r2, #0
 800b8a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	737b      	strb	r3, [r7, #13]
 800b8a6:	e001      	b.n	800b8ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b8ac:	7b7b      	ldrb	r3, [r7, #13]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	2000561c 	.word	0x2000561c

0800b8c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	60fb      	str	r3, [r7, #12]
 800b8cc:	e010      	b.n	800b8f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b8ce:	4a0d      	ldr	r2, [pc, #52]	; (800b904 <clear_lock+0x44>)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	011b      	lsls	r3, r3, #4
 800b8d4:	4413      	add	r3, r2
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d105      	bne.n	800b8ea <clear_lock+0x2a>
 800b8de:	4a09      	ldr	r2, [pc, #36]	; (800b904 <clear_lock+0x44>)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	011b      	lsls	r3, r3, #4
 800b8e4:	4413      	add	r3, r2
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	60fb      	str	r3, [r7, #12]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d9eb      	bls.n	800b8ce <clear_lock+0xe>
	}
}
 800b8f6:	bf00      	nop
 800b8f8:	bf00      	nop
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	2000561c 	.word	0x2000561c

0800b908 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b910:	2300      	movs	r3, #0
 800b912:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	78db      	ldrb	r3, [r3, #3]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d034      	beq.n	800b986 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b920:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	7858      	ldrb	r0, [r3, #1]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b92c:	2301      	movs	r3, #1
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	f7ff fd40 	bl	800b3b4 <disk_write>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d002      	beq.n	800b940 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	73fb      	strb	r3, [r7, #15]
 800b93e:	e022      	b.n	800b986 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	697a      	ldr	r2, [r7, #20]
 800b94c:	1ad2      	subs	r2, r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	429a      	cmp	r2, r3
 800b954:	d217      	bcs.n	800b986 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	789b      	ldrb	r3, [r3, #2]
 800b95a:	613b      	str	r3, [r7, #16]
 800b95c:	e010      	b.n	800b980 <sync_window+0x78>
					wsect += fs->fsize;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	697a      	ldr	r2, [r7, #20]
 800b964:	4413      	add	r3, r2
 800b966:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	7858      	ldrb	r0, [r3, #1]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b972:	2301      	movs	r3, #1
 800b974:	697a      	ldr	r2, [r7, #20]
 800b976:	f7ff fd1d 	bl	800b3b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	3b01      	subs	r3, #1
 800b97e:	613b      	str	r3, [r7, #16]
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	2b01      	cmp	r3, #1
 800b984:	d8eb      	bhi.n	800b95e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b986:	7bfb      	ldrb	r3, [r7, #15]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3718      	adds	r7, #24
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d01b      	beq.n	800b9e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f7ff ffad 	bl	800b908 <sync_window>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d113      	bne.n	800b9e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	7858      	ldrb	r0, [r3, #1]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	f7ff fcd5 	bl	800b374 <disk_read>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d004      	beq.n	800b9da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b9d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	683a      	ldr	r2, [r7, #0]
 800b9de:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
	...

0800b9ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7ff ff87 	bl	800b908 <sync_window>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d158      	bne.n	800bab6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	2b03      	cmp	r3, #3
 800ba0a:	d148      	bne.n	800ba9e <sync_fs+0xb2>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	791b      	ldrb	r3, [r3, #4]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d144      	bne.n	800ba9e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	3330      	adds	r3, #48	; 0x30
 800ba18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7ff fda9 	bl	800b576 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3330      	adds	r3, #48	; 0x30
 800ba28:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba2c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7ff fd38 	bl	800b4a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	3330      	adds	r3, #48	; 0x30
 800ba3a:	4921      	ldr	r1, [pc, #132]	; (800bac0 <sync_fs+0xd4>)
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7ff fd4d 	bl	800b4dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	3330      	adds	r3, #48	; 0x30
 800ba46:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ba4a:	491e      	ldr	r1, [pc, #120]	; (800bac4 <sync_fs+0xd8>)
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7ff fd45 	bl	800b4dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	3330      	adds	r3, #48	; 0x30
 800ba56:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	4610      	mov	r0, r2
 800ba62:	f7ff fd3b 	bl	800b4dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3330      	adds	r3, #48	; 0x30
 800ba6a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	4619      	mov	r1, r3
 800ba74:	4610      	mov	r0, r2
 800ba76:	f7ff fd31 	bl	800b4dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	69db      	ldr	r3, [r3, #28]
 800ba7e:	1c5a      	adds	r2, r3, #1
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	7858      	ldrb	r0, [r3, #1]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba92:	2301      	movs	r3, #1
 800ba94:	f7ff fc8e 	bl	800b3b4 <disk_write>
			fs->fsi_flag = 0;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	785b      	ldrb	r3, [r3, #1]
 800baa2:	2200      	movs	r2, #0
 800baa4:	2100      	movs	r1, #0
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7ff fca4 	bl	800b3f4 <disk_ioctl>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d001      	beq.n	800bab6 <sync_fs+0xca>
 800bab2:	2301      	movs	r3, #1
 800bab4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3710      	adds	r7, #16
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	41615252 	.word	0x41615252
 800bac4:	61417272 	.word	0x61417272

0800bac8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	3b02      	subs	r3, #2
 800bad6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	3b02      	subs	r3, #2
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d301      	bcc.n	800bae8 <clust2sect+0x20>
 800bae4:	2300      	movs	r3, #0
 800bae6:	e008      	b.n	800bafa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	895b      	ldrh	r3, [r3, #10]
 800baec:	461a      	mov	r2, r3
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	fb03 f202 	mul.w	r2, r3, r2
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf8:	4413      	add	r3, r2
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	370c      	adds	r7, #12
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr

0800bb06 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b086      	sub	sp, #24
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
 800bb0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d904      	bls.n	800bb26 <get_fat+0x20>
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	695b      	ldr	r3, [r3, #20]
 800bb20:	683a      	ldr	r2, [r7, #0]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d302      	bcc.n	800bb2c <get_fat+0x26>
		val = 1;	/* Internal error */
 800bb26:	2301      	movs	r3, #1
 800bb28:	617b      	str	r3, [r7, #20]
 800bb2a:	e08f      	b.n	800bc4c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bb2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	2b03      	cmp	r3, #3
 800bb38:	d062      	beq.n	800bc00 <get_fat+0xfa>
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	dc7c      	bgt.n	800bc38 <get_fat+0x132>
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d002      	beq.n	800bb48 <get_fat+0x42>
 800bb42:	2b02      	cmp	r3, #2
 800bb44:	d042      	beq.n	800bbcc <get_fat+0xc6>
 800bb46:	e077      	b.n	800bc38 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	085b      	lsrs	r3, r3, #1
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	4413      	add	r3, r2
 800bb54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	6a1a      	ldr	r2, [r3, #32]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	0a5b      	lsrs	r3, r3, #9
 800bb5e:	4413      	add	r3, r2
 800bb60:	4619      	mov	r1, r3
 800bb62:	6938      	ldr	r0, [r7, #16]
 800bb64:	f7ff ff14 	bl	800b990 <move_window>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d167      	bne.n	800bc3e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	60fa      	str	r2, [r7, #12]
 800bb74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	6a1a      	ldr	r2, [r3, #32]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	0a5b      	lsrs	r3, r3, #9
 800bb8a:	4413      	add	r3, r2
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	6938      	ldr	r0, [r7, #16]
 800bb90:	f7ff fefe 	bl	800b990 <move_window>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d153      	bne.n	800bc42 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bba0:	693a      	ldr	r2, [r7, #16]
 800bba2:	4413      	add	r3, r2
 800bba4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bba8:	021b      	lsls	r3, r3, #8
 800bbaa:	461a      	mov	r2, r3
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	f003 0301 	and.w	r3, r3, #1
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d002      	beq.n	800bbc2 <get_fat+0xbc>
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	091b      	lsrs	r3, r3, #4
 800bbc0:	e002      	b.n	800bbc8 <get_fat+0xc2>
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbc8:	617b      	str	r3, [r7, #20]
			break;
 800bbca:	e03f      	b.n	800bc4c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	6a1a      	ldr	r2, [r3, #32]
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	0a1b      	lsrs	r3, r3, #8
 800bbd4:	4413      	add	r3, r2
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	6938      	ldr	r0, [r7, #16]
 800bbda:	f7ff fed9 	bl	800b990 <move_window>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d130      	bne.n	800bc46 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	005b      	lsls	r3, r3, #1
 800bbee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bbf2:	4413      	add	r3, r2
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7ff fc1b 	bl	800b430 <ld_word>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	617b      	str	r3, [r7, #20]
			break;
 800bbfe:	e025      	b.n	800bc4c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	6a1a      	ldr	r2, [r3, #32]
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	09db      	lsrs	r3, r3, #7
 800bc08:	4413      	add	r3, r2
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	6938      	ldr	r0, [r7, #16]
 800bc0e:	f7ff febf 	bl	800b990 <move_window>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d118      	bne.n	800bc4a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bc26:	4413      	add	r3, r2
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7ff fc19 	bl	800b460 <ld_dword>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bc34:	617b      	str	r3, [r7, #20]
			break;
 800bc36:	e009      	b.n	800bc4c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bc38:	2301      	movs	r3, #1
 800bc3a:	617b      	str	r3, [r7, #20]
 800bc3c:	e006      	b.n	800bc4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc3e:	bf00      	nop
 800bc40:	e004      	b.n	800bc4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc42:	bf00      	nop
 800bc44:	e002      	b.n	800bc4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc46:	bf00      	nop
 800bc48:	e000      	b.n	800bc4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc4a:	bf00      	nop
		}
	}

	return val;
 800bc4c:	697b      	ldr	r3, [r7, #20]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bc56:	b590      	push	{r4, r7, lr}
 800bc58:	b089      	sub	sp, #36	; 0x24
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	60f8      	str	r0, [r7, #12]
 800bc5e:	60b9      	str	r1, [r7, #8]
 800bc60:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bc62:	2302      	movs	r3, #2
 800bc64:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	f240 80d2 	bls.w	800be12 <put_fat+0x1bc>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	f080 80cc 	bcs.w	800be12 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	2b03      	cmp	r3, #3
 800bc80:	f000 8096 	beq.w	800bdb0 <put_fat+0x15a>
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	f300 80cd 	bgt.w	800be24 <put_fat+0x1ce>
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d002      	beq.n	800bc94 <put_fat+0x3e>
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d06e      	beq.n	800bd70 <put_fat+0x11a>
 800bc92:	e0c7      	b.n	800be24 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	61bb      	str	r3, [r7, #24]
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	085b      	lsrs	r3, r3, #1
 800bc9c:	69ba      	ldr	r2, [r7, #24]
 800bc9e:	4413      	add	r3, r2
 800bca0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	6a1a      	ldr	r2, [r3, #32]
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	0a5b      	lsrs	r3, r3, #9
 800bcaa:	4413      	add	r3, r2
 800bcac:	4619      	mov	r1, r3
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f7ff fe6e 	bl	800b990 <move_window>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcb8:	7ffb      	ldrb	r3, [r7, #31]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f040 80ab 	bne.w	800be16 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	1c59      	adds	r1, r3, #1
 800bcca:	61b9      	str	r1, [r7, #24]
 800bccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd0:	4413      	add	r3, r2
 800bcd2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00d      	beq.n	800bcfa <put_fat+0xa4>
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	b25b      	sxtb	r3, r3
 800bce4:	f003 030f 	and.w	r3, r3, #15
 800bce8:	b25a      	sxtb	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	011b      	lsls	r3, r3, #4
 800bcf0:	b25b      	sxtb	r3, r3
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	b25b      	sxtb	r3, r3
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	e001      	b.n	800bcfe <put_fat+0xa8>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2201      	movs	r2, #1
 800bd06:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6a1a      	ldr	r2, [r3, #32]
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	0a5b      	lsrs	r3, r3, #9
 800bd10:	4413      	add	r3, r2
 800bd12:	4619      	mov	r1, r3
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f7ff fe3b 	bl	800b990 <move_window>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd1e:	7ffb      	ldrb	r3, [r7, #31]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d17a      	bne.n	800be1a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd30:	4413      	add	r3, r2
 800bd32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d003      	beq.n	800bd46 <put_fat+0xf0>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	091b      	lsrs	r3, r3, #4
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	e00e      	b.n	800bd64 <put_fat+0x10e>
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	b25b      	sxtb	r3, r3
 800bd4c:	f023 030f 	bic.w	r3, r3, #15
 800bd50:	b25a      	sxtb	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	0a1b      	lsrs	r3, r3, #8
 800bd56:	b25b      	sxtb	r3, r3
 800bd58:	f003 030f 	and.w	r3, r3, #15
 800bd5c:	b25b      	sxtb	r3, r3
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	b25b      	sxtb	r3, r3
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	697a      	ldr	r2, [r7, #20]
 800bd66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	70da      	strb	r2, [r3, #3]
			break;
 800bd6e:	e059      	b.n	800be24 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6a1a      	ldr	r2, [r3, #32]
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	0a1b      	lsrs	r3, r3, #8
 800bd78:	4413      	add	r3, r2
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f7ff fe07 	bl	800b990 <move_window>
 800bd82:	4603      	mov	r3, r0
 800bd84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd86:	7ffb      	ldrb	r3, [r7, #31]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d148      	bne.n	800be1e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	005b      	lsls	r3, r3, #1
 800bd96:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bd9a:	4413      	add	r3, r2
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	b292      	uxth	r2, r2
 800bda0:	4611      	mov	r1, r2
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7ff fb7f 	bl	800b4a6 <st_word>
			fs->wflag = 1;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	70da      	strb	r2, [r3, #3]
			break;
 800bdae:	e039      	b.n	800be24 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6a1a      	ldr	r2, [r3, #32]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	09db      	lsrs	r3, r3, #7
 800bdb8:	4413      	add	r3, r2
 800bdba:	4619      	mov	r1, r3
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f7ff fde7 	bl	800b990 <move_window>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bdc6:	7ffb      	ldrb	r3, [r7, #31]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d12a      	bne.n	800be22 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bde0:	4413      	add	r3, r2
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7ff fb3c 	bl	800b460 <ld_dword>
 800bde8:	4603      	mov	r3, r0
 800bdea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bdee:	4323      	orrs	r3, r4
 800bdf0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800be00:	4413      	add	r3, r2
 800be02:	6879      	ldr	r1, [r7, #4]
 800be04:	4618      	mov	r0, r3
 800be06:	f7ff fb69 	bl	800b4dc <st_dword>
			fs->wflag = 1;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2201      	movs	r2, #1
 800be0e:	70da      	strb	r2, [r3, #3]
			break;
 800be10:	e008      	b.n	800be24 <put_fat+0x1ce>
		}
	}
 800be12:	bf00      	nop
 800be14:	e006      	b.n	800be24 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800be16:	bf00      	nop
 800be18:	e004      	b.n	800be24 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800be1a:	bf00      	nop
 800be1c:	e002      	b.n	800be24 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800be1e:	bf00      	nop
 800be20:	e000      	b.n	800be24 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800be22:	bf00      	nop
	return res;
 800be24:	7ffb      	ldrb	r3, [r7, #31]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3724      	adds	r7, #36	; 0x24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd90      	pop	{r4, r7, pc}

0800be2e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b088      	sub	sp, #32
 800be32:	af00      	add	r7, sp, #0
 800be34:	60f8      	str	r0, [r7, #12]
 800be36:	60b9      	str	r1, [r7, #8]
 800be38:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	2b01      	cmp	r3, #1
 800be48:	d904      	bls.n	800be54 <remove_chain+0x26>
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	429a      	cmp	r2, r3
 800be52:	d301      	bcc.n	800be58 <remove_chain+0x2a>
 800be54:	2302      	movs	r3, #2
 800be56:	e04b      	b.n	800bef0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00c      	beq.n	800be78 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800be5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be62:	6879      	ldr	r1, [r7, #4]
 800be64:	69b8      	ldr	r0, [r7, #24]
 800be66:	f7ff fef6 	bl	800bc56 <put_fat>
 800be6a:	4603      	mov	r3, r0
 800be6c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800be6e:	7ffb      	ldrb	r3, [r7, #31]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d001      	beq.n	800be78 <remove_chain+0x4a>
 800be74:	7ffb      	ldrb	r3, [r7, #31]
 800be76:	e03b      	b.n	800bef0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800be78:	68b9      	ldr	r1, [r7, #8]
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f7ff fe43 	bl	800bb06 <get_fat>
 800be80:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d031      	beq.n	800beec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d101      	bne.n	800be92 <remove_chain+0x64>
 800be8e:	2302      	movs	r3, #2
 800be90:	e02e      	b.n	800bef0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be98:	d101      	bne.n	800be9e <remove_chain+0x70>
 800be9a:	2301      	movs	r3, #1
 800be9c:	e028      	b.n	800bef0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800be9e:	2200      	movs	r2, #0
 800bea0:	68b9      	ldr	r1, [r7, #8]
 800bea2:	69b8      	ldr	r0, [r7, #24]
 800bea4:	f7ff fed7 	bl	800bc56 <put_fat>
 800bea8:	4603      	mov	r3, r0
 800beaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800beac:	7ffb      	ldrb	r3, [r7, #31]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <remove_chain+0x88>
 800beb2:	7ffb      	ldrb	r3, [r7, #31]
 800beb4:	e01c      	b.n	800bef0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	691a      	ldr	r2, [r3, #16]
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	695b      	ldr	r3, [r3, #20]
 800bebe:	3b02      	subs	r3, #2
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d20b      	bcs.n	800bedc <remove_chain+0xae>
			fs->free_clst++;
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	1c5a      	adds	r2, r3, #1
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	791b      	ldrb	r3, [r3, #4]
 800bed2:	f043 0301 	orr.w	r3, r3, #1
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	695b      	ldr	r3, [r3, #20]
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d3c6      	bcc.n	800be78 <remove_chain+0x4a>
 800beea:	e000      	b.n	800beee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800beec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3720      	adds	r7, #32
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b088      	sub	sp, #32
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10d      	bne.n	800bf2a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d004      	beq.n	800bf24 <create_chain+0x2c>
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	695b      	ldr	r3, [r3, #20]
 800bf1e:	69ba      	ldr	r2, [r7, #24]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d31b      	bcc.n	800bf5c <create_chain+0x64>
 800bf24:	2301      	movs	r3, #1
 800bf26:	61bb      	str	r3, [r7, #24]
 800bf28:	e018      	b.n	800bf5c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7ff fdea 	bl	800bb06 <get_fat>
 800bf32:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d801      	bhi.n	800bf3e <create_chain+0x46>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e070      	b.n	800c020 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf44:	d101      	bne.n	800bf4a <create_chain+0x52>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	e06a      	b.n	800c020 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	695b      	ldr	r3, [r3, #20]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d201      	bcs.n	800bf58 <create_chain+0x60>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	e063      	b.n	800c020 <create_chain+0x128>
		scl = clst;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	3301      	adds	r3, #1
 800bf64:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	695b      	ldr	r3, [r3, #20]
 800bf6a:	69fa      	ldr	r2, [r7, #28]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d307      	bcc.n	800bf80 <create_chain+0x88>
				ncl = 2;
 800bf70:	2302      	movs	r3, #2
 800bf72:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bf74:	69fa      	ldr	r2, [r7, #28]
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d901      	bls.n	800bf80 <create_chain+0x88>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	e04f      	b.n	800c020 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bf80:	69f9      	ldr	r1, [r7, #28]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff fdbf 	bl	800bb06 <get_fat>
 800bf88:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00e      	beq.n	800bfae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d003      	beq.n	800bf9e <create_chain+0xa6>
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf9c:	d101      	bne.n	800bfa2 <create_chain+0xaa>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	e03e      	b.n	800c020 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bfa2:	69fa      	ldr	r2, [r7, #28]
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d1da      	bne.n	800bf60 <create_chain+0x68>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	e038      	b.n	800c020 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bfae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bfb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfb4:	69f9      	ldr	r1, [r7, #28]
 800bfb6:	6938      	ldr	r0, [r7, #16]
 800bfb8:	f7ff fe4d 	bl	800bc56 <put_fat>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bfc0:	7dfb      	ldrb	r3, [r7, #23]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d109      	bne.n	800bfda <create_chain+0xe2>
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d006      	beq.n	800bfda <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bfcc:	69fa      	ldr	r2, [r7, #28]
 800bfce:	6839      	ldr	r1, [r7, #0]
 800bfd0:	6938      	ldr	r0, [r7, #16]
 800bfd2:	f7ff fe40 	bl	800bc56 <put_fat>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bfda:	7dfb      	ldrb	r3, [r7, #23]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d116      	bne.n	800c00e <create_chain+0x116>
		fs->last_clst = ncl;
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	69fa      	ldr	r2, [r7, #28]
 800bfe4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	691a      	ldr	r2, [r3, #16]
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	3b02      	subs	r3, #2
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d804      	bhi.n	800bffe <create_chain+0x106>
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	691b      	ldr	r3, [r3, #16]
 800bff8:	1e5a      	subs	r2, r3, #1
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	791b      	ldrb	r3, [r3, #4]
 800c002:	f043 0301 	orr.w	r3, r3, #1
 800c006:	b2da      	uxtb	r2, r3
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	711a      	strb	r2, [r3, #4]
 800c00c:	e007      	b.n	800c01e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c00e:	7dfb      	ldrb	r3, [r7, #23]
 800c010:	2b01      	cmp	r3, #1
 800c012:	d102      	bne.n	800c01a <create_chain+0x122>
 800c014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c018:	e000      	b.n	800c01c <create_chain+0x124>
 800c01a:	2301      	movs	r3, #1
 800c01c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c01e:	69fb      	ldr	r3, [r7, #28]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3720      	adds	r7, #32
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c028:	b480      	push	{r7}
 800c02a:	b087      	sub	sp, #28
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03c:	3304      	adds	r3, #4
 800c03e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	0a5b      	lsrs	r3, r3, #9
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	8952      	ldrh	r2, [r2, #10]
 800c048:	fbb3 f3f2 	udiv	r3, r3, r2
 800c04c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	1d1a      	adds	r2, r3, #4
 800c052:	613a      	str	r2, [r7, #16]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d101      	bne.n	800c062 <clmt_clust+0x3a>
 800c05e:	2300      	movs	r3, #0
 800c060:	e010      	b.n	800c084 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c062:	697a      	ldr	r2, [r7, #20]
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	429a      	cmp	r2, r3
 800c068:	d307      	bcc.n	800c07a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c06a:	697a      	ldr	r2, [r7, #20]
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	1ad3      	subs	r3, r2, r3
 800c070:	617b      	str	r3, [r7, #20]
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	3304      	adds	r3, #4
 800c076:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c078:	e7e9      	b.n	800c04e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c07a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	4413      	add	r3, r2
}
 800c084:	4618      	mov	r0, r3
 800c086:	371c      	adds	r7, #28
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c0a6:	d204      	bcs.n	800c0b2 <dir_sdi+0x22>
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	f003 031f 	and.w	r3, r3, #31
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d001      	beq.n	800c0b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	e063      	b.n	800c17e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d106      	bne.n	800c0d6 <dir_sdi+0x46>
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d902      	bls.n	800c0d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10c      	bne.n	800c0f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	095b      	lsrs	r3, r3, #5
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	8912      	ldrh	r2, [r2, #8]
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d301      	bcc.n	800c0ec <dir_sdi+0x5c>
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	e048      	b.n	800c17e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	61da      	str	r2, [r3, #28]
 800c0f4:	e029      	b.n	800c14a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	895b      	ldrh	r3, [r3, #10]
 800c0fa:	025b      	lsls	r3, r3, #9
 800c0fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0fe:	e019      	b.n	800c134 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6979      	ldr	r1, [r7, #20]
 800c104:	4618      	mov	r0, r3
 800c106:	f7ff fcfe 	bl	800bb06 <get_fat>
 800c10a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c112:	d101      	bne.n	800c118 <dir_sdi+0x88>
 800c114:	2301      	movs	r3, #1
 800c116:	e032      	b.n	800c17e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d904      	bls.n	800c128 <dir_sdi+0x98>
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	695b      	ldr	r3, [r3, #20]
 800c122:	697a      	ldr	r2, [r7, #20]
 800c124:	429a      	cmp	r2, r3
 800c126:	d301      	bcc.n	800c12c <dir_sdi+0x9c>
 800c128:	2302      	movs	r3, #2
 800c12a:	e028      	b.n	800c17e <dir_sdi+0xee>
			ofs -= csz;
 800c12c:	683a      	ldr	r2, [r7, #0]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	1ad3      	subs	r3, r2, r3
 800c132:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c134:	683a      	ldr	r2, [r7, #0]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d2e1      	bcs.n	800c100 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c13c:	6979      	ldr	r1, [r7, #20]
 800c13e:	6938      	ldr	r0, [r7, #16]
 800c140:	f7ff fcc2 	bl	800bac8 <clust2sect>
 800c144:	4602      	mov	r2, r0
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	697a      	ldr	r2, [r7, #20]
 800c14e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	69db      	ldr	r3, [r3, #28]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d101      	bne.n	800c15c <dir_sdi+0xcc>
 800c158:	2302      	movs	r3, #2
 800c15a:	e010      	b.n	800c17e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	69da      	ldr	r2, [r3, #28]
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	0a5b      	lsrs	r3, r3, #9
 800c164:	441a      	add	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c176:	441a      	add	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3718      	adds	r7, #24
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b086      	sub	sp, #24
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
 800c18e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	695b      	ldr	r3, [r3, #20]
 800c19a:	3320      	adds	r3, #32
 800c19c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	69db      	ldr	r3, [r3, #28]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d003      	beq.n	800c1ae <dir_next+0x28>
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1ac:	d301      	bcc.n	800c1b2 <dir_next+0x2c>
 800c1ae:	2304      	movs	r3, #4
 800c1b0:	e0aa      	b.n	800c308 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f040 8098 	bne.w	800c2ee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	69db      	ldr	r3, [r3, #28]
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	699b      	ldr	r3, [r3, #24]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10b      	bne.n	800c1e8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	095b      	lsrs	r3, r3, #5
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	8912      	ldrh	r2, [r2, #8]
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	f0c0 8088 	bcc.w	800c2ee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	61da      	str	r2, [r3, #28]
 800c1e4:	2304      	movs	r3, #4
 800c1e6:	e08f      	b.n	800c308 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	0a5b      	lsrs	r3, r3, #9
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	8952      	ldrh	r2, [r2, #10]
 800c1f0:	3a01      	subs	r2, #1
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d17a      	bne.n	800c2ee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	699b      	ldr	r3, [r3, #24]
 800c1fe:	4619      	mov	r1, r3
 800c200:	4610      	mov	r0, r2
 800c202:	f7ff fc80 	bl	800bb06 <get_fat>
 800c206:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d801      	bhi.n	800c212 <dir_next+0x8c>
 800c20e:	2302      	movs	r3, #2
 800c210:	e07a      	b.n	800c308 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c218:	d101      	bne.n	800c21e <dir_next+0x98>
 800c21a:	2301      	movs	r3, #1
 800c21c:	e074      	b.n	800c308 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	695b      	ldr	r3, [r3, #20]
 800c222:	697a      	ldr	r2, [r7, #20]
 800c224:	429a      	cmp	r2, r3
 800c226:	d358      	bcc.n	800c2da <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d104      	bne.n	800c238 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	61da      	str	r2, [r3, #28]
 800c234:	2304      	movs	r3, #4
 800c236:	e067      	b.n	800c308 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	4619      	mov	r1, r3
 800c240:	4610      	mov	r0, r2
 800c242:	f7ff fe59 	bl	800bef8 <create_chain>
 800c246:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d101      	bne.n	800c252 <dir_next+0xcc>
 800c24e:	2307      	movs	r3, #7
 800c250:	e05a      	b.n	800c308 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d101      	bne.n	800c25c <dir_next+0xd6>
 800c258:	2302      	movs	r3, #2
 800c25a:	e055      	b.n	800c308 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c262:	d101      	bne.n	800c268 <dir_next+0xe2>
 800c264:	2301      	movs	r3, #1
 800c266:	e04f      	b.n	800c308 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f7ff fb4d 	bl	800b908 <sync_window>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d001      	beq.n	800c278 <dir_next+0xf2>
 800c274:	2301      	movs	r3, #1
 800c276:	e047      	b.n	800c308 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	3330      	adds	r3, #48	; 0x30
 800c27c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c280:	2100      	movs	r1, #0
 800c282:	4618      	mov	r0, r3
 800c284:	f7ff f977 	bl	800b576 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c288:	2300      	movs	r3, #0
 800c28a:	613b      	str	r3, [r7, #16]
 800c28c:	6979      	ldr	r1, [r7, #20]
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f7ff fc1a 	bl	800bac8 <clust2sect>
 800c294:	4602      	mov	r2, r0
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	62da      	str	r2, [r3, #44]	; 0x2c
 800c29a:	e012      	b.n	800c2c2 <dir_next+0x13c>
						fs->wflag = 1;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f7ff fb30 	bl	800b908 <sync_window>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <dir_next+0x12c>
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e02a      	b.n	800c308 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	613b      	str	r3, [r7, #16]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2bc:	1c5a      	adds	r2, r3, #1
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	62da      	str	r2, [r3, #44]	; 0x2c
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	895b      	ldrh	r3, [r3, #10]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d3e6      	bcc.n	800c29c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	1ad2      	subs	r2, r2, r3
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c2e0:	6979      	ldr	r1, [r7, #20]
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f7ff fbf0 	bl	800bac8 <clust2sect>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c300:	441a      	add	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3718      	adds	r7, #24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c320:	2100      	movs	r1, #0
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7ff feb4 	bl	800c090 <dir_sdi>
 800c328:	4603      	mov	r3, r0
 800c32a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c32c:	7dfb      	ldrb	r3, [r7, #23]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d12b      	bne.n	800c38a <dir_alloc+0x7a>
		n = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	69db      	ldr	r3, [r3, #28]
 800c33a:	4619      	mov	r1, r3
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f7ff fb27 	bl	800b990 <move_window>
 800c342:	4603      	mov	r3, r0
 800c344:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c346:	7dfb      	ldrb	r3, [r7, #23]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d11d      	bne.n	800c388 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6a1b      	ldr	r3, [r3, #32]
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	2be5      	cmp	r3, #229	; 0xe5
 800c354:	d004      	beq.n	800c360 <dir_alloc+0x50>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d107      	bne.n	800c370 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	3301      	adds	r3, #1
 800c364:	613b      	str	r3, [r7, #16]
 800c366:	693a      	ldr	r2, [r7, #16]
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d102      	bne.n	800c374 <dir_alloc+0x64>
 800c36e:	e00c      	b.n	800c38a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c370:	2300      	movs	r3, #0
 800c372:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c374:	2101      	movs	r1, #1
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7ff ff05 	bl	800c186 <dir_next>
 800c37c:	4603      	mov	r3, r0
 800c37e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c380:	7dfb      	ldrb	r3, [r7, #23]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d0d7      	beq.n	800c336 <dir_alloc+0x26>
 800c386:	e000      	b.n	800c38a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c388:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c38a:	7dfb      	ldrb	r3, [r7, #23]
 800c38c:	2b04      	cmp	r3, #4
 800c38e:	d101      	bne.n	800c394 <dir_alloc+0x84>
 800c390:	2307      	movs	r3, #7
 800c392:	75fb      	strb	r3, [r7, #23]
	return res;
 800c394:	7dfb      	ldrb	r3, [r7, #23]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3718      	adds	r7, #24
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b084      	sub	sp, #16
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	331a      	adds	r3, #26
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7ff f83f 	bl	800b430 <ld_word>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	d109      	bne.n	800c3d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	3314      	adds	r3, #20
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7ff f834 	bl	800b430 <ld_word>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	041b      	lsls	r3, r3, #16
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	331a      	adds	r3, #26
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	b292      	uxth	r2, r2
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7ff f857 	bl	800b4a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	2b03      	cmp	r3, #3
 800c3fe:	d109      	bne.n	800c414 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	f103 0214 	add.w	r2, r3, #20
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	0c1b      	lsrs	r3, r3, #16
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	4619      	mov	r1, r3
 800c40e:	4610      	mov	r0, r2
 800c410:	f7ff f849 	bl	800b4a6 <st_word>
	}
}
 800c414:	bf00      	nop
 800c416:	3710      	adds	r7, #16
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c42a:	2100      	movs	r1, #0
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f7ff fe2f 	bl	800c090 <dir_sdi>
 800c432:	4603      	mov	r3, r0
 800c434:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c436:	7dfb      	ldrb	r3, [r7, #23]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d001      	beq.n	800c440 <dir_find+0x24>
 800c43c:	7dfb      	ldrb	r3, [r7, #23]
 800c43e:	e03e      	b.n	800c4be <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	69db      	ldr	r3, [r3, #28]
 800c444:	4619      	mov	r1, r3
 800c446:	6938      	ldr	r0, [r7, #16]
 800c448:	f7ff faa2 	bl	800b990 <move_window>
 800c44c:	4603      	mov	r3, r0
 800c44e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c450:	7dfb      	ldrb	r3, [r7, #23]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d12f      	bne.n	800c4b6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a1b      	ldr	r3, [r3, #32]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c45e:	7bfb      	ldrb	r3, [r7, #15]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d102      	bne.n	800c46a <dir_find+0x4e>
 800c464:	2304      	movs	r3, #4
 800c466:	75fb      	strb	r3, [r7, #23]
 800c468:	e028      	b.n	800c4bc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6a1b      	ldr	r3, [r3, #32]
 800c46e:	330b      	adds	r3, #11
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c476:	b2da      	uxtb	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6a1b      	ldr	r3, [r3, #32]
 800c480:	330b      	adds	r3, #11
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	f003 0308 	and.w	r3, r3, #8
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10a      	bne.n	800c4a2 <dir_find+0x86>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6a18      	ldr	r0, [r3, #32]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	3324      	adds	r3, #36	; 0x24
 800c494:	220b      	movs	r2, #11
 800c496:	4619      	mov	r1, r3
 800c498:	f7ff f888 	bl	800b5ac <mem_cmp>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00b      	beq.n	800c4ba <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7ff fe6e 	bl	800c186 <dir_next>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c4ae:	7dfb      	ldrb	r3, [r7, #23]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d0c5      	beq.n	800c440 <dir_find+0x24>
 800c4b4:	e002      	b.n	800c4bc <dir_find+0xa0>
		if (res != FR_OK) break;
 800c4b6:	bf00      	nop
 800c4b8:	e000      	b.n	800c4bc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c4ba:	bf00      	nop

	return res;
 800c4bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3718      	adds	r7, #24
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}

0800c4c6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b084      	sub	sp, #16
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c4d4:	2101      	movs	r1, #1
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7ff ff1a 	bl	800c310 <dir_alloc>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d11c      	bne.n	800c520 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	69db      	ldr	r3, [r3, #28]
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	68b8      	ldr	r0, [r7, #8]
 800c4ee:	f7ff fa4f 	bl	800b990 <move_window>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d111      	bne.n	800c520 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6a1b      	ldr	r3, [r3, #32]
 800c500:	2220      	movs	r2, #32
 800c502:	2100      	movs	r1, #0
 800c504:	4618      	mov	r0, r3
 800c506:	f7ff f836 	bl	800b576 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6a18      	ldr	r0, [r3, #32]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	3324      	adds	r3, #36	; 0x24
 800c512:	220b      	movs	r2, #11
 800c514:	4619      	mov	r1, r3
 800c516:	f7ff f80d 	bl	800b534 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	2201      	movs	r2, #1
 800c51e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c520:	7bfb      	ldrb	r3, [r7, #15]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b088      	sub	sp, #32
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	60fb      	str	r3, [r7, #12]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	3324      	adds	r3, #36	; 0x24
 800c540:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c542:	220b      	movs	r2, #11
 800c544:	2120      	movs	r1, #32
 800c546:	68b8      	ldr	r0, [r7, #8]
 800c548:	f7ff f815 	bl	800b576 <mem_set>
	si = i = 0; ni = 8;
 800c54c:	2300      	movs	r3, #0
 800c54e:	613b      	str	r3, [r7, #16]
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	61fb      	str	r3, [r7, #28]
 800c554:	2308      	movs	r3, #8
 800c556:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	61fa      	str	r2, [r7, #28]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	4413      	add	r3, r2
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c566:	7efb      	ldrb	r3, [r7, #27]
 800c568:	2b20      	cmp	r3, #32
 800c56a:	d94e      	bls.n	800c60a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c56c:	7efb      	ldrb	r3, [r7, #27]
 800c56e:	2b2f      	cmp	r3, #47	; 0x2f
 800c570:	d006      	beq.n	800c580 <create_name+0x54>
 800c572:	7efb      	ldrb	r3, [r7, #27]
 800c574:	2b5c      	cmp	r3, #92	; 0x5c
 800c576:	d110      	bne.n	800c59a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c578:	e002      	b.n	800c580 <create_name+0x54>
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	3301      	adds	r3, #1
 800c57e:	61fb      	str	r3, [r7, #28]
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	4413      	add	r3, r2
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	2b2f      	cmp	r3, #47	; 0x2f
 800c58a:	d0f6      	beq.n	800c57a <create_name+0x4e>
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	4413      	add	r3, r2
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2b5c      	cmp	r3, #92	; 0x5c
 800c596:	d0f0      	beq.n	800c57a <create_name+0x4e>
			break;
 800c598:	e038      	b.n	800c60c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c59a:	7efb      	ldrb	r3, [r7, #27]
 800c59c:	2b2e      	cmp	r3, #46	; 0x2e
 800c59e:	d003      	beq.n	800c5a8 <create_name+0x7c>
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d30c      	bcc.n	800c5c2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	2b0b      	cmp	r3, #11
 800c5ac:	d002      	beq.n	800c5b4 <create_name+0x88>
 800c5ae:	7efb      	ldrb	r3, [r7, #27]
 800c5b0:	2b2e      	cmp	r3, #46	; 0x2e
 800c5b2:	d001      	beq.n	800c5b8 <create_name+0x8c>
 800c5b4:	2306      	movs	r3, #6
 800c5b6:	e044      	b.n	800c642 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c5b8:	2308      	movs	r3, #8
 800c5ba:	613b      	str	r3, [r7, #16]
 800c5bc:	230b      	movs	r3, #11
 800c5be:	617b      	str	r3, [r7, #20]
			continue;
 800c5c0:	e022      	b.n	800c608 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c5c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	da04      	bge.n	800c5d4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c5ca:	7efb      	ldrb	r3, [r7, #27]
 800c5cc:	3b80      	subs	r3, #128	; 0x80
 800c5ce:	4a1f      	ldr	r2, [pc, #124]	; (800c64c <create_name+0x120>)
 800c5d0:	5cd3      	ldrb	r3, [r2, r3]
 800c5d2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c5d4:	7efb      	ldrb	r3, [r7, #27]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	481d      	ldr	r0, [pc, #116]	; (800c650 <create_name+0x124>)
 800c5da:	f7ff f80e 	bl	800b5fa <chk_chr>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d001      	beq.n	800c5e8 <create_name+0xbc>
 800c5e4:	2306      	movs	r3, #6
 800c5e6:	e02c      	b.n	800c642 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c5e8:	7efb      	ldrb	r3, [r7, #27]
 800c5ea:	2b60      	cmp	r3, #96	; 0x60
 800c5ec:	d905      	bls.n	800c5fa <create_name+0xce>
 800c5ee:	7efb      	ldrb	r3, [r7, #27]
 800c5f0:	2b7a      	cmp	r3, #122	; 0x7a
 800c5f2:	d802      	bhi.n	800c5fa <create_name+0xce>
 800c5f4:	7efb      	ldrb	r3, [r7, #27]
 800c5f6:	3b20      	subs	r3, #32
 800c5f8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	1c5a      	adds	r2, r3, #1
 800c5fe:	613a      	str	r2, [r7, #16]
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	4413      	add	r3, r2
 800c604:	7efa      	ldrb	r2, [r7, #27]
 800c606:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c608:	e7a6      	b.n	800c558 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c60a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c60c:	68fa      	ldr	r2, [r7, #12]
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	441a      	add	r2, r3
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d101      	bne.n	800c620 <create_name+0xf4>
 800c61c:	2306      	movs	r3, #6
 800c61e:	e010      	b.n	800c642 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2be5      	cmp	r3, #229	; 0xe5
 800c626:	d102      	bne.n	800c62e <create_name+0x102>
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	2205      	movs	r2, #5
 800c62c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c62e:	7efb      	ldrb	r3, [r7, #27]
 800c630:	2b20      	cmp	r3, #32
 800c632:	d801      	bhi.n	800c638 <create_name+0x10c>
 800c634:	2204      	movs	r2, #4
 800c636:	e000      	b.n	800c63a <create_name+0x10e>
 800c638:	2200      	movs	r2, #0
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	330b      	adds	r3, #11
 800c63e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c640:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c642:	4618      	mov	r0, r3
 800c644:	3720      	adds	r7, #32
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	0800fca0 	.word	0x0800fca0
 800c650:	0800fc28 	.word	0x0800fc28

0800c654 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c668:	e002      	b.n	800c670 <follow_path+0x1c>
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	3301      	adds	r3, #1
 800c66e:	603b      	str	r3, [r7, #0]
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	2b2f      	cmp	r3, #47	; 0x2f
 800c676:	d0f8      	beq.n	800c66a <follow_path+0x16>
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	2b5c      	cmp	r3, #92	; 0x5c
 800c67e:	d0f4      	beq.n	800c66a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	2200      	movs	r2, #0
 800c684:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	2b1f      	cmp	r3, #31
 800c68c:	d80a      	bhi.n	800c6a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2280      	movs	r2, #128	; 0x80
 800c692:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c696:	2100      	movs	r1, #0
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7ff fcf9 	bl	800c090 <dir_sdi>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	75fb      	strb	r3, [r7, #23]
 800c6a2:	e043      	b.n	800c72c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c6a4:	463b      	mov	r3, r7
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7ff ff3f 	bl	800c52c <create_name>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c6b2:	7dfb      	ldrb	r3, [r7, #23]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d134      	bne.n	800c722 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7ff feaf 	bl	800c41c <dir_find>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c6c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c6ca:	7dfb      	ldrb	r3, [r7, #23]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00a      	beq.n	800c6e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
 800c6d2:	2b04      	cmp	r3, #4
 800c6d4:	d127      	bne.n	800c726 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c6d6:	7afb      	ldrb	r3, [r7, #11]
 800c6d8:	f003 0304 	and.w	r3, r3, #4
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d122      	bne.n	800c726 <follow_path+0xd2>
 800c6e0:	2305      	movs	r3, #5
 800c6e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c6e4:	e01f      	b.n	800c726 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c6e6:	7afb      	ldrb	r3, [r7, #11]
 800c6e8:	f003 0304 	and.w	r3, r3, #4
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d11c      	bne.n	800c72a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	799b      	ldrb	r3, [r3, #6]
 800c6f4:	f003 0310 	and.w	r3, r3, #16
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d102      	bne.n	800c702 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c6fc:	2305      	movs	r3, #5
 800c6fe:	75fb      	strb	r3, [r7, #23]
 800c700:	e014      	b.n	800c72c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	695b      	ldr	r3, [r3, #20]
 800c70c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c710:	4413      	add	r3, r2
 800c712:	4619      	mov	r1, r3
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f7ff fe42 	bl	800c39e <ld_clust>
 800c71a:	4602      	mov	r2, r0
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c720:	e7c0      	b.n	800c6a4 <follow_path+0x50>
			if (res != FR_OK) break;
 800c722:	bf00      	nop
 800c724:	e002      	b.n	800c72c <follow_path+0xd8>
				break;
 800c726:	bf00      	nop
 800c728:	e000      	b.n	800c72c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c72a:	bf00      	nop
			}
		}
	}

	return res;
 800c72c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3718      	adds	r7, #24
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c736:	b480      	push	{r7}
 800c738:	b087      	sub	sp, #28
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c73e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c742:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d031      	beq.n	800c7b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	617b      	str	r3, [r7, #20]
 800c752:	e002      	b.n	800c75a <get_ldnumber+0x24>
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	3301      	adds	r3, #1
 800c758:	617b      	str	r3, [r7, #20]
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	2b20      	cmp	r3, #32
 800c760:	d903      	bls.n	800c76a <get_ldnumber+0x34>
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	2b3a      	cmp	r3, #58	; 0x3a
 800c768:	d1f4      	bne.n	800c754 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	2b3a      	cmp	r3, #58	; 0x3a
 800c770:	d11c      	bne.n	800c7ac <get_ldnumber+0x76>
			tp = *path;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	1c5a      	adds	r2, r3, #1
 800c77c:	60fa      	str	r2, [r7, #12]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	3b30      	subs	r3, #48	; 0x30
 800c782:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	2b09      	cmp	r3, #9
 800c788:	d80e      	bhi.n	800c7a8 <get_ldnumber+0x72>
 800c78a:	68fa      	ldr	r2, [r7, #12]
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d10a      	bne.n	800c7a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d107      	bne.n	800c7a8 <get_ldnumber+0x72>
					vol = (int)i;
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	617b      	str	r3, [r7, #20]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	697a      	ldr	r2, [r7, #20]
 800c7a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	e002      	b.n	800c7b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c7b0:	693b      	ldr	r3, [r7, #16]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	371c      	adds	r7, #28
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr
	...

0800c7c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	70da      	strb	r2, [r3, #3]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7d6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7ff f8d8 	bl	800b990 <move_window>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <check_fs+0x2a>
 800c7e6:	2304      	movs	r3, #4
 800c7e8:	e038      	b.n	800c85c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	3330      	adds	r3, #48	; 0x30
 800c7ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fe fe1c 	bl	800b430 <ld_word>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c800:	429a      	cmp	r2, r3
 800c802:	d001      	beq.n	800c808 <check_fs+0x48>
 800c804:	2303      	movs	r3, #3
 800c806:	e029      	b.n	800c85c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c80e:	2be9      	cmp	r3, #233	; 0xe9
 800c810:	d009      	beq.n	800c826 <check_fs+0x66>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c818:	2beb      	cmp	r3, #235	; 0xeb
 800c81a:	d11e      	bne.n	800c85a <check_fs+0x9a>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c822:	2b90      	cmp	r3, #144	; 0x90
 800c824:	d119      	bne.n	800c85a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	3330      	adds	r3, #48	; 0x30
 800c82a:	3336      	adds	r3, #54	; 0x36
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7fe fe17 	bl	800b460 <ld_dword>
 800c832:	4603      	mov	r3, r0
 800c834:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c838:	4a0a      	ldr	r2, [pc, #40]	; (800c864 <check_fs+0xa4>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d101      	bne.n	800c842 <check_fs+0x82>
 800c83e:	2300      	movs	r3, #0
 800c840:	e00c      	b.n	800c85c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	3330      	adds	r3, #48	; 0x30
 800c846:	3352      	adds	r3, #82	; 0x52
 800c848:	4618      	mov	r0, r3
 800c84a:	f7fe fe09 	bl	800b460 <ld_dword>
 800c84e:	4603      	mov	r3, r0
 800c850:	4a05      	ldr	r2, [pc, #20]	; (800c868 <check_fs+0xa8>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d101      	bne.n	800c85a <check_fs+0x9a>
 800c856:	2300      	movs	r3, #0
 800c858:	e000      	b.n	800c85c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c85a:	2302      	movs	r3, #2
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	00544146 	.word	0x00544146
 800c868:	33544146 	.word	0x33544146

0800c86c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b096      	sub	sp, #88	; 0x58
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	4613      	mov	r3, r2
 800c878:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	2200      	movs	r2, #0
 800c87e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c880:	68f8      	ldr	r0, [r7, #12]
 800c882:	f7ff ff58 	bl	800c736 <get_ldnumber>
 800c886:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	da01      	bge.n	800c892 <find_volume+0x26>
 800c88e:	230b      	movs	r3, #11
 800c890:	e22e      	b.n	800ccf0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c892:	4aa8      	ldr	r2, [pc, #672]	; (800cb34 <find_volume+0x2c8>)
 800c894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c89a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d101      	bne.n	800c8a6 <find_volume+0x3a>
 800c8a2:	230c      	movs	r3, #12
 800c8a4:	e224      	b.n	800ccf0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c8ac:	79fb      	ldrb	r3, [r7, #7]
 800c8ae:	f023 0301 	bic.w	r3, r3, #1
 800c8b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d01a      	beq.n	800c8f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8be:	785b      	ldrb	r3, [r3, #1]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fe fd17 	bl	800b2f4 <disk_status>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c8cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8d0:	f003 0301 	and.w	r3, r3, #1
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10c      	bne.n	800c8f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c8d8:	79fb      	ldrb	r3, [r7, #7]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d007      	beq.n	800c8ee <find_volume+0x82>
 800c8de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8e2:	f003 0304 	and.w	r3, r3, #4
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d001      	beq.n	800c8ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c8ea:	230a      	movs	r3, #10
 800c8ec:	e200      	b.n	800ccf0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e1fe      	b.n	800ccf0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c902:	785b      	ldrb	r3, [r3, #1]
 800c904:	4618      	mov	r0, r3
 800c906:	f7fe fd0f 	bl	800b328 <disk_initialize>
 800c90a:	4603      	mov	r3, r0
 800c90c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c910:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c914:	f003 0301 	and.w	r3, r3, #1
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d001      	beq.n	800c920 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c91c:	2303      	movs	r3, #3
 800c91e:	e1e7      	b.n	800ccf0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c920:	79fb      	ldrb	r3, [r7, #7]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d007      	beq.n	800c936 <find_volume+0xca>
 800c926:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c92a:	f003 0304 	and.w	r3, r3, #4
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d001      	beq.n	800c936 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c932:	230a      	movs	r3, #10
 800c934:	e1dc      	b.n	800ccf0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c93a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c93c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c93e:	f7ff ff3f 	bl	800c7c0 <check_fs>
 800c942:	4603      	mov	r3, r0
 800c944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c948:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d14b      	bne.n	800c9e8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c950:	2300      	movs	r3, #0
 800c952:	643b      	str	r3, [r7, #64]	; 0x40
 800c954:	e01f      	b.n	800c996 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c958:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c95c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c95e:	011b      	lsls	r3, r3, #4
 800c960:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c964:	4413      	add	r3, r2
 800c966:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96a:	3304      	adds	r3, #4
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d006      	beq.n	800c980 <find_volume+0x114>
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	3308      	adds	r3, #8
 800c976:	4618      	mov	r0, r3
 800c978:	f7fe fd72 	bl	800b460 <ld_dword>
 800c97c:	4602      	mov	r2, r0
 800c97e:	e000      	b.n	800c982 <find_volume+0x116>
 800c980:	2200      	movs	r2, #0
 800c982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c98a:	440b      	add	r3, r1
 800c98c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c992:	3301      	adds	r3, #1
 800c994:	643b      	str	r3, [r7, #64]	; 0x40
 800c996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c998:	2b03      	cmp	r3, #3
 800c99a:	d9dc      	bls.n	800c956 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c99c:	2300      	movs	r3, #0
 800c99e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c9a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d002      	beq.n	800c9ac <find_volume+0x140>
 800c9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c9ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c9ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c9bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d005      	beq.n	800c9ce <find_volume+0x162>
 800c9c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c9c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9c6:	f7ff fefb 	bl	800c7c0 <check_fs>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	e000      	b.n	800c9d0 <find_volume+0x164>
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c9d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d905      	bls.n	800c9e8 <find_volume+0x17c>
 800c9dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9de:	3301      	adds	r3, #1
 800c9e0:	643b      	str	r3, [r7, #64]	; 0x40
 800c9e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9e4:	2b03      	cmp	r3, #3
 800c9e6:	d9e1      	bls.n	800c9ac <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c9e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9ec:	2b04      	cmp	r3, #4
 800c9ee:	d101      	bne.n	800c9f4 <find_volume+0x188>
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e17d      	b.n	800ccf0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c9f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d901      	bls.n	800ca00 <find_volume+0x194>
 800c9fc:	230d      	movs	r3, #13
 800c9fe:	e177      	b.n	800ccf0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ca00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca02:	3330      	adds	r3, #48	; 0x30
 800ca04:	330b      	adds	r3, #11
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fe fd12 	bl	800b430 <ld_word>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca12:	d001      	beq.n	800ca18 <find_volume+0x1ac>
 800ca14:	230d      	movs	r3, #13
 800ca16:	e16b      	b.n	800ccf0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ca18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1a:	3330      	adds	r3, #48	; 0x30
 800ca1c:	3316      	adds	r3, #22
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fe fd06 	bl	800b430 <ld_word>
 800ca24:	4603      	mov	r3, r0
 800ca26:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ca28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d106      	bne.n	800ca3c <find_volume+0x1d0>
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca30:	3330      	adds	r3, #48	; 0x30
 800ca32:	3324      	adds	r3, #36	; 0x24
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7fe fd13 	bl	800b460 <ld_dword>
 800ca3a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca40:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ca42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca44:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4e:	789b      	ldrb	r3, [r3, #2]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d005      	beq.n	800ca60 <find_volume+0x1f4>
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	789b      	ldrb	r3, [r3, #2]
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d001      	beq.n	800ca60 <find_volume+0x1f4>
 800ca5c:	230d      	movs	r3, #13
 800ca5e:	e147      	b.n	800ccf0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	789b      	ldrb	r3, [r3, #2]
 800ca64:	461a      	mov	r2, r3
 800ca66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca68:	fb02 f303 	mul.w	r3, r2, r3
 800ca6c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca78:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ca7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7c:	895b      	ldrh	r3, [r3, #10]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d008      	beq.n	800ca94 <find_volume+0x228>
 800ca82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca84:	895b      	ldrh	r3, [r3, #10]
 800ca86:	461a      	mov	r2, r3
 800ca88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8a:	895b      	ldrh	r3, [r3, #10]
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	4013      	ands	r3, r2
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <find_volume+0x22c>
 800ca94:	230d      	movs	r3, #13
 800ca96:	e12b      	b.n	800ccf0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ca98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9a:	3330      	adds	r3, #48	; 0x30
 800ca9c:	3311      	adds	r3, #17
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fe fcc6 	bl	800b430 <ld_word>
 800caa4:	4603      	mov	r3, r0
 800caa6:	461a      	mov	r2, r3
 800caa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caaa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800caac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caae:	891b      	ldrh	r3, [r3, #8]
 800cab0:	f003 030f 	and.w	r3, r3, #15
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d001      	beq.n	800cabe <find_volume+0x252>
 800caba:	230d      	movs	r3, #13
 800cabc:	e118      	b.n	800ccf0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac0:	3330      	adds	r3, #48	; 0x30
 800cac2:	3313      	adds	r3, #19
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fe fcb3 	bl	800b430 <ld_word>
 800caca:	4603      	mov	r3, r0
 800cacc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d106      	bne.n	800cae2 <find_volume+0x276>
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	3330      	adds	r3, #48	; 0x30
 800cad8:	3320      	adds	r3, #32
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fe fcc0 	bl	800b460 <ld_dword>
 800cae0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae4:	3330      	adds	r3, #48	; 0x30
 800cae6:	330e      	adds	r3, #14
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fe fca1 	bl	800b430 <ld_word>
 800caee:	4603      	mov	r3, r0
 800caf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800caf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d101      	bne.n	800cafc <find_volume+0x290>
 800caf8:	230d      	movs	r3, #13
 800cafa:	e0f9      	b.n	800ccf0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cafc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb00:	4413      	add	r3, r2
 800cb02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb04:	8912      	ldrh	r2, [r2, #8]
 800cb06:	0912      	lsrs	r2, r2, #4
 800cb08:	b292      	uxth	r2, r2
 800cb0a:	4413      	add	r3, r2
 800cb0c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cb0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d201      	bcs.n	800cb1a <find_volume+0x2ae>
 800cb16:	230d      	movs	r3, #13
 800cb18:	e0ea      	b.n	800ccf0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cb1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	1ad3      	subs	r3, r2, r3
 800cb20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb22:	8952      	ldrh	r2, [r2, #10]
 800cb24:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb28:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d103      	bne.n	800cb38 <find_volume+0x2cc>
 800cb30:	230d      	movs	r3, #13
 800cb32:	e0dd      	b.n	800ccf0 <find_volume+0x484>
 800cb34:	20005614 	.word	0x20005614
		fmt = FS_FAT32;
 800cb38:	2303      	movs	r3, #3
 800cb3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d802      	bhi.n	800cb4e <find_volume+0x2e2>
 800cb48:	2302      	movs	r3, #2
 800cb4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb50:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d802      	bhi.n	800cb5e <find_volume+0x2f2>
 800cb58:	2301      	movs	r3, #1
 800cb5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb60:	1c9a      	adds	r2, r3, #2
 800cb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb64:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb6a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cb6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb70:	441a      	add	r2, r3
 800cb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb74:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cb76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7a:	441a      	add	r2, r3
 800cb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800cb80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb84:	2b03      	cmp	r3, #3
 800cb86:	d11e      	bne.n	800cbc6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	3330      	adds	r3, #48	; 0x30
 800cb8c:	332a      	adds	r3, #42	; 0x2a
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fe fc4e 	bl	800b430 <ld_word>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d001      	beq.n	800cb9e <find_volume+0x332>
 800cb9a:	230d      	movs	r3, #13
 800cb9c:	e0a8      	b.n	800ccf0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba0:	891b      	ldrh	r3, [r3, #8]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <find_volume+0x33e>
 800cba6:	230d      	movs	r3, #13
 800cba8:	e0a2      	b.n	800ccf0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbac:	3330      	adds	r3, #48	; 0x30
 800cbae:	332c      	adds	r3, #44	; 0x2c
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fe fc55 	bl	800b460 <ld_dword>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbe:	695b      	ldr	r3, [r3, #20]
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	647b      	str	r3, [r7, #68]	; 0x44
 800cbc4:	e01f      	b.n	800cc06 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc8:	891b      	ldrh	r3, [r3, #8]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d101      	bne.n	800cbd2 <find_volume+0x366>
 800cbce:	230d      	movs	r3, #13
 800cbd0:	e08e      	b.n	800ccf0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd4:	6a1a      	ldr	r2, [r3, #32]
 800cbd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbd8:	441a      	add	r2, r3
 800cbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbdc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cbde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d103      	bne.n	800cbee <find_volume+0x382>
 800cbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe8:	695b      	ldr	r3, [r3, #20]
 800cbea:	005b      	lsls	r3, r3, #1
 800cbec:	e00a      	b.n	800cc04 <find_volume+0x398>
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	695a      	ldr	r2, [r3, #20]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	005b      	lsls	r3, r3, #1
 800cbf6:	4413      	add	r3, r2
 800cbf8:	085a      	lsrs	r2, r3, #1
 800cbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfc:	695b      	ldr	r3, [r3, #20]
 800cbfe:	f003 0301 	and.w	r3, r3, #1
 800cc02:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cc04:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc08:	699a      	ldr	r2, [r3, #24]
 800cc0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc0c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cc10:	0a5b      	lsrs	r3, r3, #9
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d201      	bcs.n	800cc1a <find_volume+0x3ae>
 800cc16:	230d      	movs	r3, #13
 800cc18:	e06a      	b.n	800ccf0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc20:	611a      	str	r2, [r3, #16]
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	691a      	ldr	r2, [r3, #16]
 800cc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc28:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2c:	2280      	movs	r2, #128	; 0x80
 800cc2e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cc30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc34:	2b03      	cmp	r3, #3
 800cc36:	d149      	bne.n	800cccc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	3330      	adds	r3, #48	; 0x30
 800cc3c:	3330      	adds	r3, #48	; 0x30
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fe fbf6 	bl	800b430 <ld_word>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d140      	bne.n	800cccc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cc4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	4619      	mov	r1, r3
 800cc50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc52:	f7fe fe9d 	bl	800b990 <move_window>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d137      	bne.n	800cccc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5e:	2200      	movs	r2, #0
 800cc60:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc64:	3330      	adds	r3, #48	; 0x30
 800cc66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fe fbe0 	bl	800b430 <ld_word>
 800cc70:	4603      	mov	r3, r0
 800cc72:	461a      	mov	r2, r3
 800cc74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d127      	bne.n	800cccc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	3330      	adds	r3, #48	; 0x30
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7fe fbed 	bl	800b460 <ld_dword>
 800cc86:	4603      	mov	r3, r0
 800cc88:	4a1b      	ldr	r2, [pc, #108]	; (800ccf8 <find_volume+0x48c>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d11e      	bne.n	800cccc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc90:	3330      	adds	r3, #48	; 0x30
 800cc92:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fe fbe2 	bl	800b460 <ld_dword>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	4a17      	ldr	r2, [pc, #92]	; (800ccfc <find_volume+0x490>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d113      	bne.n	800cccc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca6:	3330      	adds	r3, #48	; 0x30
 800cca8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fe fbd7 	bl	800b460 <ld_dword>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccba:	3330      	adds	r3, #48	; 0x30
 800ccbc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7fe fbcd 	bl	800b460 <ld_dword>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccca:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ccd2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ccd4:	4b0a      	ldr	r3, [pc, #40]	; (800cd00 <find_volume+0x494>)
 800ccd6:	881b      	ldrh	r3, [r3, #0]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	b29a      	uxth	r2, r3
 800ccdc:	4b08      	ldr	r3, [pc, #32]	; (800cd00 <find_volume+0x494>)
 800ccde:	801a      	strh	r2, [r3, #0]
 800cce0:	4b07      	ldr	r3, [pc, #28]	; (800cd00 <find_volume+0x494>)
 800cce2:	881a      	ldrh	r2, [r3, #0]
 800cce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cce8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccea:	f7fe fde9 	bl	800b8c0 <clear_lock>
#endif
	return FR_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3758      	adds	r7, #88	; 0x58
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	41615252 	.word	0x41615252
 800ccfc:	61417272 	.word	0x61417272
 800cd00:	20005618 	.word	0x20005618

0800cd04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cd0e:	2309      	movs	r3, #9
 800cd10:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d01c      	beq.n	800cd52 <validate+0x4e>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d018      	beq.n	800cd52 <validate+0x4e>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d013      	beq.n	800cd52 <validate+0x4e>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	889a      	ldrh	r2, [r3, #4]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	88db      	ldrh	r3, [r3, #6]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d10c      	bne.n	800cd52 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	785b      	ldrb	r3, [r3, #1]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fe fad8 	bl	800b2f4 <disk_status>
 800cd44:	4603      	mov	r3, r0
 800cd46:	f003 0301 	and.w	r3, r3, #1
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d101      	bne.n	800cd52 <validate+0x4e>
			res = FR_OK;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d102      	bne.n	800cd5e <validate+0x5a>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	e000      	b.n	800cd60 <validate+0x5c>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	683a      	ldr	r2, [r7, #0]
 800cd62:	6013      	str	r3, [r2, #0]
	return res;
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
	...

0800cd70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b088      	sub	sp, #32
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cd82:	f107 0310 	add.w	r3, r7, #16
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7ff fcd5 	bl	800c736 <get_ldnumber>
 800cd8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	da01      	bge.n	800cd98 <f_mount+0x28>
 800cd94:	230b      	movs	r3, #11
 800cd96:	e02b      	b.n	800cdf0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cd98:	4a17      	ldr	r2, [pc, #92]	; (800cdf8 <f_mount+0x88>)
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cda0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d005      	beq.n	800cdb4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cda8:	69b8      	ldr	r0, [r7, #24]
 800cdaa:	f7fe fd89 	bl	800b8c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cdae:	69bb      	ldr	r3, [r7, #24]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d002      	beq.n	800cdc0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cdc0:	68fa      	ldr	r2, [r7, #12]
 800cdc2:	490d      	ldr	r1, [pc, #52]	; (800cdf8 <f_mount+0x88>)
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d002      	beq.n	800cdd6 <f_mount+0x66>
 800cdd0:	79fb      	ldrb	r3, [r7, #7]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d001      	beq.n	800cdda <f_mount+0x6a>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	e00a      	b.n	800cdf0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cdda:	f107 010c 	add.w	r1, r7, #12
 800cdde:	f107 0308 	add.w	r3, r7, #8
 800cde2:	2200      	movs	r2, #0
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7ff fd41 	bl	800c86c <find_volume>
 800cdea:	4603      	mov	r3, r0
 800cdec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cdee:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3720      	adds	r7, #32
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	20005614 	.word	0x20005614

0800cdfc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b098      	sub	sp, #96	; 0x60
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	4613      	mov	r3, r2
 800ce08:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d101      	bne.n	800ce14 <f_open+0x18>
 800ce10:	2309      	movs	r3, #9
 800ce12:	e1ad      	b.n	800d170 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ce14:	79fb      	ldrb	r3, [r7, #7]
 800ce16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce1a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ce1c:	79fa      	ldrb	r2, [r7, #7]
 800ce1e:	f107 0110 	add.w	r1, r7, #16
 800ce22:	f107 0308 	add.w	r3, r7, #8
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff fd20 	bl	800c86c <find_volume>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ce32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f040 8191 	bne.w	800d15e <f_open+0x362>
		dj.obj.fs = fs;
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	f107 0314 	add.w	r3, r7, #20
 800ce46:	4611      	mov	r1, r2
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7ff fc03 	bl	800c654 <follow_path>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ce54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d11a      	bne.n	800ce92 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ce5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce60:	b25b      	sxtb	r3, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	da03      	bge.n	800ce6e <f_open+0x72>
				res = FR_INVALID_NAME;
 800ce66:	2306      	movs	r3, #6
 800ce68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ce6c:	e011      	b.n	800ce92 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ce6e:	79fb      	ldrb	r3, [r7, #7]
 800ce70:	f023 0301 	bic.w	r3, r3, #1
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	bf14      	ite	ne
 800ce78:	2301      	movne	r3, #1
 800ce7a:	2300      	moveq	r3, #0
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	461a      	mov	r2, r3
 800ce80:	f107 0314 	add.w	r3, r7, #20
 800ce84:	4611      	mov	r1, r2
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fe fbd2 	bl	800b630 <chk_lock>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ce92:	79fb      	ldrb	r3, [r7, #7]
 800ce94:	f003 031c 	and.w	r3, r3, #28
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d07f      	beq.n	800cf9c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ce9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d017      	beq.n	800ced4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cea8:	2b04      	cmp	r3, #4
 800ceaa:	d10e      	bne.n	800ceca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ceac:	f7fe fc1c 	bl	800b6e8 <enq_lock>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d006      	beq.n	800cec4 <f_open+0xc8>
 800ceb6:	f107 0314 	add.w	r3, r7, #20
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7ff fb03 	bl	800c4c6 <dir_register>
 800cec0:	4603      	mov	r3, r0
 800cec2:	e000      	b.n	800cec6 <f_open+0xca>
 800cec4:	2312      	movs	r3, #18
 800cec6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ceca:	79fb      	ldrb	r3, [r7, #7]
 800cecc:	f043 0308 	orr.w	r3, r3, #8
 800ced0:	71fb      	strb	r3, [r7, #7]
 800ced2:	e010      	b.n	800cef6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ced4:	7ebb      	ldrb	r3, [r7, #26]
 800ced6:	f003 0311 	and.w	r3, r3, #17
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d003      	beq.n	800cee6 <f_open+0xea>
					res = FR_DENIED;
 800cede:	2307      	movs	r3, #7
 800cee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cee4:	e007      	b.n	800cef6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cee6:	79fb      	ldrb	r3, [r7, #7]
 800cee8:	f003 0304 	and.w	r3, r3, #4
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <f_open+0xfa>
 800cef0:	2308      	movs	r3, #8
 800cef2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d168      	bne.n	800cfd0 <f_open+0x1d4>
 800cefe:	79fb      	ldrb	r3, [r7, #7]
 800cf00:	f003 0308 	and.w	r3, r3, #8
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d063      	beq.n	800cfd0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cf08:	f7fd ffa4 	bl	800ae54 <get_fattime>
 800cf0c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cf0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf10:	330e      	adds	r3, #14
 800cf12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7fe fae1 	bl	800b4dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf1c:	3316      	adds	r3, #22
 800cf1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7fe fadb 	bl	800b4dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf28:	330b      	adds	r3, #11
 800cf2a:	2220      	movs	r2, #32
 800cf2c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf32:	4611      	mov	r1, r2
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7ff fa32 	bl	800c39e <ld_clust>
 800cf3a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf40:	2200      	movs	r2, #0
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7ff fa4a 	bl	800c3dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cf48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf4a:	331c      	adds	r3, #28
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fe fac4 	bl	800b4dc <st_dword>
					fs->wflag = 1;
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	2201      	movs	r2, #1
 800cf58:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cf5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d037      	beq.n	800cfd0 <f_open+0x1d4>
						dw = fs->winsect;
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf64:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cf66:	f107 0314 	add.w	r3, r7, #20
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fe ff5d 	bl	800be2e <remove_chain>
 800cf74:	4603      	mov	r3, r0
 800cf76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800cf7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d126      	bne.n	800cfd0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fe fd02 	bl	800b990 <move_window>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf96:	3a01      	subs	r2, #1
 800cf98:	60da      	str	r2, [r3, #12]
 800cf9a:	e019      	b.n	800cfd0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cf9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d115      	bne.n	800cfd0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cfa4:	7ebb      	ldrb	r3, [r7, #26]
 800cfa6:	f003 0310 	and.w	r3, r3, #16
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800cfae:	2304      	movs	r3, #4
 800cfb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cfb4:	e00c      	b.n	800cfd0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cfb6:	79fb      	ldrb	r3, [r7, #7]
 800cfb8:	f003 0302 	and.w	r3, r3, #2
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d007      	beq.n	800cfd0 <f_open+0x1d4>
 800cfc0:	7ebb      	ldrb	r3, [r7, #26]
 800cfc2:	f003 0301 	and.w	r3, r3, #1
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d002      	beq.n	800cfd0 <f_open+0x1d4>
						res = FR_DENIED;
 800cfca:	2307      	movs	r3, #7
 800cfcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cfd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d128      	bne.n	800d02a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cfd8:	79fb      	ldrb	r3, [r7, #7]
 800cfda:	f003 0308 	and.w	r3, r3, #8
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d003      	beq.n	800cfea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cfe2:	79fb      	ldrb	r3, [r7, #7]
 800cfe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfe8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cff8:	79fb      	ldrb	r3, [r7, #7]
 800cffa:	f023 0301 	bic.w	r3, r3, #1
 800cffe:	2b00      	cmp	r3, #0
 800d000:	bf14      	ite	ne
 800d002:	2301      	movne	r3, #1
 800d004:	2300      	moveq	r3, #0
 800d006:	b2db      	uxtb	r3, r3
 800d008:	461a      	mov	r2, r3
 800d00a:	f107 0314 	add.w	r3, r7, #20
 800d00e:	4611      	mov	r1, r2
 800d010:	4618      	mov	r0, r3
 800d012:	f7fe fb8b 	bl	800b72c <inc_lock>
 800d016:	4602      	mov	r2, r0
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	691b      	ldr	r3, [r3, #16]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d102      	bne.n	800d02a <f_open+0x22e>
 800d024:	2302      	movs	r3, #2
 800d026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d02a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d02e:	2b00      	cmp	r3, #0
 800d030:	f040 8095 	bne.w	800d15e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d038:	4611      	mov	r1, r2
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7ff f9af 	bl	800c39e <ld_clust>
 800d040:	4602      	mov	r2, r0
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d048:	331c      	adds	r3, #28
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fe fa08 	bl	800b460 <ld_dword>
 800d050:	4602      	mov	r2, r0
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d05c:	693a      	ldr	r2, [r7, #16]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	88da      	ldrh	r2, [r3, #6]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	79fa      	ldrb	r2, [r7, #7]
 800d06e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2200      	movs	r2, #0
 800d074:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2200      	movs	r2, #0
 800d07a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2200      	movs	r2, #0
 800d080:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	3330      	adds	r3, #48	; 0x30
 800d086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d08a:	2100      	movs	r1, #0
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7fe fa72 	bl	800b576 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d092:	79fb      	ldrb	r3, [r7, #7]
 800d094:	f003 0320 	and.w	r3, r3, #32
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d060      	beq.n	800d15e <f_open+0x362>
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	68db      	ldr	r3, [r3, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d05c      	beq.n	800d15e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	68da      	ldr	r2, [r3, #12]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	895b      	ldrh	r3, [r3, #10]
 800d0b0:	025b      	lsls	r3, r3, #9
 800d0b2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	689b      	ldr	r3, [r3, #8]
 800d0b8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	657b      	str	r3, [r7, #84]	; 0x54
 800d0c0:	e016      	b.n	800d0f0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7fe fd1d 	bl	800bb06 <get_fat>
 800d0cc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d0ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d802      	bhi.n	800d0da <f_open+0x2de>
 800d0d4:	2302      	movs	r3, #2
 800d0d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d0da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0e0:	d102      	bne.n	800d0e8 <f_open+0x2ec>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d0e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	657b      	str	r3, [r7, #84]	; 0x54
 800d0f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d103      	bne.n	800d100 <f_open+0x304>
 800d0f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d8e0      	bhi.n	800d0c2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d104:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d106:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d127      	bne.n	800d15e <f_open+0x362>
 800d10e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d114:	2b00      	cmp	r3, #0
 800d116:	d022      	beq.n	800d15e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fe fcd3 	bl	800bac8 <clust2sect>
 800d122:	6478      	str	r0, [r7, #68]	; 0x44
 800d124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d126:	2b00      	cmp	r3, #0
 800d128:	d103      	bne.n	800d132 <f_open+0x336>
						res = FR_INT_ERR;
 800d12a:	2302      	movs	r3, #2
 800d12c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d130:	e015      	b.n	800d15e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d134:	0a5a      	lsrs	r2, r3, #9
 800d136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d138:	441a      	add	r2, r3
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	7858      	ldrb	r0, [r3, #1]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6a1a      	ldr	r2, [r3, #32]
 800d14c:	2301      	movs	r3, #1
 800d14e:	f7fe f911 	bl	800b374 <disk_read>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <f_open+0x362>
 800d158:	2301      	movs	r3, #1
 800d15a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d15e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d162:	2b00      	cmp	r3, #0
 800d164:	d002      	beq.n	800d16c <f_open+0x370>
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d16c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d170:	4618      	mov	r0, r3
 800d172:	3760      	adds	r7, #96	; 0x60
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b08e      	sub	sp, #56	; 0x38
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
 800d184:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	2200      	movs	r2, #0
 800d18e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f107 0214 	add.w	r2, r7, #20
 800d196:	4611      	mov	r1, r2
 800d198:	4618      	mov	r0, r3
 800d19a:	f7ff fdb3 	bl	800cd04 <validate>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d1a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d107      	bne.n	800d1bc <f_read+0x44>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	7d5b      	ldrb	r3, [r3, #21]
 800d1b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d1b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d002      	beq.n	800d1c2 <f_read+0x4a>
 800d1bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1c0:	e115      	b.n	800d3ee <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	7d1b      	ldrb	r3, [r3, #20]
 800d1c6:	f003 0301 	and.w	r3, r3, #1
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d101      	bne.n	800d1d2 <f_read+0x5a>
 800d1ce:	2307      	movs	r3, #7
 800d1d0:	e10d      	b.n	800d3ee <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	68da      	ldr	r2, [r3, #12]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	6a3b      	ldr	r3, [r7, #32]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	f240 80fe 	bls.w	800d3e4 <f_read+0x26c>
 800d1e8:	6a3b      	ldr	r3, [r7, #32]
 800d1ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d1ec:	e0fa      	b.n	800d3e4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	699b      	ldr	r3, [r3, #24]
 800d1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	f040 80c6 	bne.w	800d388 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	699b      	ldr	r3, [r3, #24]
 800d200:	0a5b      	lsrs	r3, r3, #9
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	8952      	ldrh	r2, [r2, #10]
 800d206:	3a01      	subs	r2, #1
 800d208:	4013      	ands	r3, r2
 800d20a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d12f      	bne.n	800d272 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	699b      	ldr	r3, [r3, #24]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d103      	bne.n	800d222 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	689b      	ldr	r3, [r3, #8]
 800d21e:	633b      	str	r3, [r7, #48]	; 0x30
 800d220:	e013      	b.n	800d24a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d226:	2b00      	cmp	r3, #0
 800d228:	d007      	beq.n	800d23a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	699b      	ldr	r3, [r3, #24]
 800d22e:	4619      	mov	r1, r3
 800d230:	68f8      	ldr	r0, [r7, #12]
 800d232:	f7fe fef9 	bl	800c028 <clmt_clust>
 800d236:	6338      	str	r0, [r7, #48]	; 0x30
 800d238:	e007      	b.n	800d24a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d23a:	68fa      	ldr	r2, [r7, #12]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	69db      	ldr	r3, [r3, #28]
 800d240:	4619      	mov	r1, r3
 800d242:	4610      	mov	r0, r2
 800d244:	f7fe fc5f 	bl	800bb06 <get_fat>
 800d248:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d804      	bhi.n	800d25a <f_read+0xe2>
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2202      	movs	r2, #2
 800d254:	755a      	strb	r2, [r3, #21]
 800d256:	2302      	movs	r3, #2
 800d258:	e0c9      	b.n	800d3ee <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d260:	d104      	bne.n	800d26c <f_read+0xf4>
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2201      	movs	r2, #1
 800d266:	755a      	strb	r2, [r3, #21]
 800d268:	2301      	movs	r3, #1
 800d26a:	e0c0      	b.n	800d3ee <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d270:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d272:	697a      	ldr	r2, [r7, #20]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	69db      	ldr	r3, [r3, #28]
 800d278:	4619      	mov	r1, r3
 800d27a:	4610      	mov	r0, r2
 800d27c:	f7fe fc24 	bl	800bac8 <clust2sect>
 800d280:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d104      	bne.n	800d292 <f_read+0x11a>
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2202      	movs	r2, #2
 800d28c:	755a      	strb	r2, [r3, #21]
 800d28e:	2302      	movs	r3, #2
 800d290:	e0ad      	b.n	800d3ee <f_read+0x276>
			sect += csect;
 800d292:	69ba      	ldr	r2, [r7, #24]
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	4413      	add	r3, r2
 800d298:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	0a5b      	lsrs	r3, r3, #9
 800d29e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d039      	beq.n	800d31a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d2a6:	69fa      	ldr	r2, [r7, #28]
 800d2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2aa:	4413      	add	r3, r2
 800d2ac:	697a      	ldr	r2, [r7, #20]
 800d2ae:	8952      	ldrh	r2, [r2, #10]
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d905      	bls.n	800d2c0 <f_read+0x148>
					cc = fs->csize - csect;
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	895b      	ldrh	r3, [r3, #10]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	1ad3      	subs	r3, r2, r3
 800d2be:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	7858      	ldrb	r0, [r3, #1]
 800d2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c6:	69ba      	ldr	r2, [r7, #24]
 800d2c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d2ca:	f7fe f853 	bl	800b374 <disk_read>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d004      	beq.n	800d2de <f_read+0x166>
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	755a      	strb	r2, [r3, #21]
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e087      	b.n	800d3ee <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	7d1b      	ldrb	r3, [r3, #20]
 800d2e2:	b25b      	sxtb	r3, r3
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	da14      	bge.n	800d312 <f_read+0x19a>
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6a1a      	ldr	r2, [r3, #32]
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d90d      	bls.n	800d312 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6a1a      	ldr	r2, [r3, #32]
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	1ad3      	subs	r3, r2, r3
 800d2fe:	025b      	lsls	r3, r3, #9
 800d300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d302:	18d0      	adds	r0, r2, r3
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	3330      	adds	r3, #48	; 0x30
 800d308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d30c:	4619      	mov	r1, r3
 800d30e:	f7fe f911 	bl	800b534 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d314:	025b      	lsls	r3, r3, #9
 800d316:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d318:	e050      	b.n	800d3bc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6a1b      	ldr	r3, [r3, #32]
 800d31e:	69ba      	ldr	r2, [r7, #24]
 800d320:	429a      	cmp	r2, r3
 800d322:	d02e      	beq.n	800d382 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	7d1b      	ldrb	r3, [r3, #20]
 800d328:	b25b      	sxtb	r3, r3
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	da18      	bge.n	800d360 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	7858      	ldrb	r0, [r3, #1]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6a1a      	ldr	r2, [r3, #32]
 800d33c:	2301      	movs	r3, #1
 800d33e:	f7fe f839 	bl	800b3b4 <disk_write>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d004      	beq.n	800d352 <f_read+0x1da>
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2201      	movs	r2, #1
 800d34c:	755a      	strb	r2, [r3, #21]
 800d34e:	2301      	movs	r3, #1
 800d350:	e04d      	b.n	800d3ee <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	7d1b      	ldrb	r3, [r3, #20]
 800d356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d35a:	b2da      	uxtb	r2, r3
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	7858      	ldrb	r0, [r3, #1]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d36a:	2301      	movs	r3, #1
 800d36c:	69ba      	ldr	r2, [r7, #24]
 800d36e:	f7fe f801 	bl	800b374 <disk_read>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d004      	beq.n	800d382 <f_read+0x20a>
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2201      	movs	r2, #1
 800d37c:	755a      	strb	r2, [r3, #21]
 800d37e:	2301      	movs	r3, #1
 800d380:	e035      	b.n	800d3ee <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	69ba      	ldr	r2, [r7, #24]
 800d386:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	699b      	ldr	r3, [r3, #24]
 800d38c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d390:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d394:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d901      	bls.n	800d3a2 <f_read+0x22a>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	699b      	ldr	r3, [r3, #24]
 800d3ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b0:	4413      	add	r3, r2
 800d3b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3b8:	f7fe f8bc 	bl	800b534 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d3bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c0:	4413      	add	r3, r2
 800d3c2:	627b      	str	r3, [r7, #36]	; 0x24
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	699a      	ldr	r2, [r3, #24]
 800d3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ca:	441a      	add	r2, r3
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	619a      	str	r2, [r3, #24]
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d6:	441a      	add	r2, r3
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	601a      	str	r2, [r3, #0]
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	f47f af01 	bne.w	800d1ee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d3ec:	2300      	movs	r3, #0
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3738      	adds	r7, #56	; 0x38
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b086      	sub	sp, #24
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f107 0208 	add.w	r2, r7, #8
 800d404:	4611      	mov	r1, r2
 800d406:	4618      	mov	r0, r3
 800d408:	f7ff fc7c 	bl	800cd04 <validate>
 800d40c:	4603      	mov	r3, r0
 800d40e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d410:	7dfb      	ldrb	r3, [r7, #23]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d168      	bne.n	800d4e8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	7d1b      	ldrb	r3, [r3, #20]
 800d41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d062      	beq.n	800d4e8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	7d1b      	ldrb	r3, [r3, #20]
 800d426:	b25b      	sxtb	r3, r3
 800d428:	2b00      	cmp	r3, #0
 800d42a:	da15      	bge.n	800d458 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	7858      	ldrb	r0, [r3, #1]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6a1a      	ldr	r2, [r3, #32]
 800d43a:	2301      	movs	r3, #1
 800d43c:	f7fd ffba 	bl	800b3b4 <disk_write>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <f_sync+0x54>
 800d446:	2301      	movs	r3, #1
 800d448:	e04f      	b.n	800d4ea <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	7d1b      	ldrb	r3, [r3, #20]
 800d44e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d452:	b2da      	uxtb	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d458:	f7fd fcfc 	bl	800ae54 <get_fattime>
 800d45c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d45e:	68ba      	ldr	r2, [r7, #8]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d464:	4619      	mov	r1, r3
 800d466:	4610      	mov	r0, r2
 800d468:	f7fe fa92 	bl	800b990 <move_window>
 800d46c:	4603      	mov	r3, r0
 800d46e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d470:	7dfb      	ldrb	r3, [r7, #23]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d138      	bne.n	800d4e8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d47a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	330b      	adds	r3, #11
 800d480:	781a      	ldrb	r2, [r3, #0]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	330b      	adds	r3, #11
 800d486:	f042 0220 	orr.w	r2, r2, #32
 800d48a:	b2d2      	uxtb	r2, r2
 800d48c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6818      	ldr	r0, [r3, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	461a      	mov	r2, r3
 800d498:	68f9      	ldr	r1, [r7, #12]
 800d49a:	f7fe ff9f 	bl	800c3dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f103 021c 	add.w	r2, r3, #28
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	f7fe f816 	bl	800b4dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3316      	adds	r3, #22
 800d4b4:	6939      	ldr	r1, [r7, #16]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fe f810 	bl	800b4dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	3312      	adds	r3, #18
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fd ffef 	bl	800b4a6 <st_word>
					fs->wflag = 1;
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fe fa8b 	bl	800b9ec <sync_fs>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	7d1b      	ldrb	r3, [r3, #20]
 800d4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d4e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3718      	adds	r7, #24
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b084      	sub	sp, #16
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f7ff ff7b 	bl	800d3f6 <f_sync>
 800d500:	4603      	mov	r3, r0
 800d502:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d504:	7bfb      	ldrb	r3, [r7, #15]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d118      	bne.n	800d53c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f107 0208 	add.w	r2, r7, #8
 800d510:	4611      	mov	r1, r2
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff fbf6 	bl	800cd04 <validate>
 800d518:	4603      	mov	r3, r0
 800d51a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d51c:	7bfb      	ldrb	r3, [r7, #15]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d10c      	bne.n	800d53c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	691b      	ldr	r3, [r3, #16]
 800d526:	4618      	mov	r0, r3
 800d528:	f7fe f98e 	bl	800b848 <dec_lock>
 800d52c:	4603      	mov	r3, r0
 800d52e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d530:	7bfb      	ldrb	r3, [r7, #15]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d102      	bne.n	800d53c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
	...

0800d548 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d548:	b480      	push	{r7}
 800d54a:	b087      	sub	sp, #28
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	4613      	mov	r3, r2
 800d554:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d556:	2301      	movs	r3, #1
 800d558:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d55e:	4b1f      	ldr	r3, [pc, #124]	; (800d5dc <FATFS_LinkDriverEx+0x94>)
 800d560:	7a5b      	ldrb	r3, [r3, #9]
 800d562:	b2db      	uxtb	r3, r3
 800d564:	2b00      	cmp	r3, #0
 800d566:	d131      	bne.n	800d5cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d568:	4b1c      	ldr	r3, [pc, #112]	; (800d5dc <FATFS_LinkDriverEx+0x94>)
 800d56a:	7a5b      	ldrb	r3, [r3, #9]
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	461a      	mov	r2, r3
 800d570:	4b1a      	ldr	r3, [pc, #104]	; (800d5dc <FATFS_LinkDriverEx+0x94>)
 800d572:	2100      	movs	r1, #0
 800d574:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d576:	4b19      	ldr	r3, [pc, #100]	; (800d5dc <FATFS_LinkDriverEx+0x94>)
 800d578:	7a5b      	ldrb	r3, [r3, #9]
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	4a17      	ldr	r2, [pc, #92]	; (800d5dc <FATFS_LinkDriverEx+0x94>)
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	4413      	add	r3, r2
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d586:	4b15      	ldr	r3, [pc, #84]	; (800d5dc <FATFS_LinkDriverEx+0x94>)
 800d588:	7a5b      	ldrb	r3, [r3, #9]
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	461a      	mov	r2, r3
 800d58e:	4b13      	ldr	r3, [pc, #76]	; (800d5dc <FATFS_LinkDriverEx+0x94>)
 800d590:	4413      	add	r3, r2
 800d592:	79fa      	ldrb	r2, [r7, #7]
 800d594:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d596:	4b11      	ldr	r3, [pc, #68]	; (800d5dc <FATFS_LinkDriverEx+0x94>)
 800d598:	7a5b      	ldrb	r3, [r3, #9]
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	1c5a      	adds	r2, r3, #1
 800d59e:	b2d1      	uxtb	r1, r2
 800d5a0:	4a0e      	ldr	r2, [pc, #56]	; (800d5dc <FATFS_LinkDriverEx+0x94>)
 800d5a2:	7251      	strb	r1, [r2, #9]
 800d5a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d5a6:	7dbb      	ldrb	r3, [r7, #22]
 800d5a8:	3330      	adds	r3, #48	; 0x30
 800d5aa:	b2da      	uxtb	r2, r3
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	223a      	movs	r2, #58	; 0x3a
 800d5b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	3302      	adds	r3, #2
 800d5bc:	222f      	movs	r2, #47	; 0x2f
 800d5be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	3303      	adds	r3, #3
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	371c      	adds	r7, #28
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	2000563c 	.word	0x2000563c

0800d5e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f7ff ffaa 	bl	800d548 <FATFS_LinkDriverEx>
 800d5f4:	4603      	mov	r3, r0
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
	...

0800d600 <__errno>:
 800d600:	4b01      	ldr	r3, [pc, #4]	; (800d608 <__errno+0x8>)
 800d602:	6818      	ldr	r0, [r3, #0]
 800d604:	4770      	bx	lr
 800d606:	bf00      	nop
 800d608:	20000ad4 	.word	0x20000ad4

0800d60c <exit>:
 800d60c:	b508      	push	{r3, lr}
 800d60e:	4b07      	ldr	r3, [pc, #28]	; (800d62c <exit+0x20>)
 800d610:	4604      	mov	r4, r0
 800d612:	b113      	cbz	r3, 800d61a <exit+0xe>
 800d614:	2100      	movs	r1, #0
 800d616:	f3af 8000 	nop.w
 800d61a:	4b05      	ldr	r3, [pc, #20]	; (800d630 <exit+0x24>)
 800d61c:	6818      	ldr	r0, [r3, #0]
 800d61e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d620:	b103      	cbz	r3, 800d624 <exit+0x18>
 800d622:	4798      	blx	r3
 800d624:	4620      	mov	r0, r4
 800d626:	f7f8 fb6d 	bl	8005d04 <_exit>
 800d62a:	bf00      	nop
 800d62c:	00000000 	.word	0x00000000
 800d630:	0800fd80 	.word	0x0800fd80

0800d634 <_fclose_r>:
 800d634:	b570      	push	{r4, r5, r6, lr}
 800d636:	4605      	mov	r5, r0
 800d638:	460c      	mov	r4, r1
 800d63a:	b911      	cbnz	r1, 800d642 <_fclose_r+0xe>
 800d63c:	2600      	movs	r6, #0
 800d63e:	4630      	mov	r0, r6
 800d640:	bd70      	pop	{r4, r5, r6, pc}
 800d642:	b118      	cbz	r0, 800d64c <_fclose_r+0x18>
 800d644:	6983      	ldr	r3, [r0, #24]
 800d646:	b90b      	cbnz	r3, 800d64c <_fclose_r+0x18>
 800d648:	f000 f994 	bl	800d974 <__sinit>
 800d64c:	4b2c      	ldr	r3, [pc, #176]	; (800d700 <_fclose_r+0xcc>)
 800d64e:	429c      	cmp	r4, r3
 800d650:	d114      	bne.n	800d67c <_fclose_r+0x48>
 800d652:	686c      	ldr	r4, [r5, #4]
 800d654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d656:	07d8      	lsls	r0, r3, #31
 800d658:	d405      	bmi.n	800d666 <_fclose_r+0x32>
 800d65a:	89a3      	ldrh	r3, [r4, #12]
 800d65c:	0599      	lsls	r1, r3, #22
 800d65e:	d402      	bmi.n	800d666 <_fclose_r+0x32>
 800d660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d662:	f000 fcd5 	bl	800e010 <__retarget_lock_acquire_recursive>
 800d666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d66a:	b98b      	cbnz	r3, 800d690 <_fclose_r+0x5c>
 800d66c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800d66e:	f016 0601 	ands.w	r6, r6, #1
 800d672:	d1e3      	bne.n	800d63c <_fclose_r+0x8>
 800d674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d676:	f000 fccc 	bl	800e012 <__retarget_lock_release_recursive>
 800d67a:	e7e0      	b.n	800d63e <_fclose_r+0xa>
 800d67c:	4b21      	ldr	r3, [pc, #132]	; (800d704 <_fclose_r+0xd0>)
 800d67e:	429c      	cmp	r4, r3
 800d680:	d101      	bne.n	800d686 <_fclose_r+0x52>
 800d682:	68ac      	ldr	r4, [r5, #8]
 800d684:	e7e6      	b.n	800d654 <_fclose_r+0x20>
 800d686:	4b20      	ldr	r3, [pc, #128]	; (800d708 <_fclose_r+0xd4>)
 800d688:	429c      	cmp	r4, r3
 800d68a:	bf08      	it	eq
 800d68c:	68ec      	ldreq	r4, [r5, #12]
 800d68e:	e7e1      	b.n	800d654 <_fclose_r+0x20>
 800d690:	4621      	mov	r1, r4
 800d692:	4628      	mov	r0, r5
 800d694:	f000 f842 	bl	800d71c <__sflush_r>
 800d698:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d69a:	4606      	mov	r6, r0
 800d69c:	b133      	cbz	r3, 800d6ac <_fclose_r+0x78>
 800d69e:	6a21      	ldr	r1, [r4, #32]
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	4798      	blx	r3
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	bfb8      	it	lt
 800d6a8:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800d6ac:	89a3      	ldrh	r3, [r4, #12]
 800d6ae:	061a      	lsls	r2, r3, #24
 800d6b0:	d503      	bpl.n	800d6ba <_fclose_r+0x86>
 800d6b2:	6921      	ldr	r1, [r4, #16]
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	f000 fd37 	bl	800e128 <_free_r>
 800d6ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6bc:	b141      	cbz	r1, 800d6d0 <_fclose_r+0x9c>
 800d6be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6c2:	4299      	cmp	r1, r3
 800d6c4:	d002      	beq.n	800d6cc <_fclose_r+0x98>
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	f000 fd2e 	bl	800e128 <_free_r>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	6363      	str	r3, [r4, #52]	; 0x34
 800d6d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d6d2:	b121      	cbz	r1, 800d6de <_fclose_r+0xaa>
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	f000 fd27 	bl	800e128 <_free_r>
 800d6da:	2300      	movs	r3, #0
 800d6dc:	64a3      	str	r3, [r4, #72]	; 0x48
 800d6de:	f000 f931 	bl	800d944 <__sfp_lock_acquire>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	81a3      	strh	r3, [r4, #12]
 800d6e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6e8:	07db      	lsls	r3, r3, #31
 800d6ea:	d402      	bmi.n	800d6f2 <_fclose_r+0xbe>
 800d6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6ee:	f000 fc90 	bl	800e012 <__retarget_lock_release_recursive>
 800d6f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6f4:	f000 fc8b 	bl	800e00e <__retarget_lock_close_recursive>
 800d6f8:	f000 f92a 	bl	800d950 <__sfp_lock_release>
 800d6fc:	e79f      	b.n	800d63e <_fclose_r+0xa>
 800d6fe:	bf00      	nop
 800d700:	0800fd40 	.word	0x0800fd40
 800d704:	0800fd60 	.word	0x0800fd60
 800d708:	0800fd20 	.word	0x0800fd20

0800d70c <fclose>:
 800d70c:	4b02      	ldr	r3, [pc, #8]	; (800d718 <fclose+0xc>)
 800d70e:	4601      	mov	r1, r0
 800d710:	6818      	ldr	r0, [r3, #0]
 800d712:	f7ff bf8f 	b.w	800d634 <_fclose_r>
 800d716:	bf00      	nop
 800d718:	20000ad4 	.word	0x20000ad4

0800d71c <__sflush_r>:
 800d71c:	898a      	ldrh	r2, [r1, #12]
 800d71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d722:	4605      	mov	r5, r0
 800d724:	0710      	lsls	r0, r2, #28
 800d726:	460c      	mov	r4, r1
 800d728:	d458      	bmi.n	800d7dc <__sflush_r+0xc0>
 800d72a:	684b      	ldr	r3, [r1, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	dc05      	bgt.n	800d73c <__sflush_r+0x20>
 800d730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d732:	2b00      	cmp	r3, #0
 800d734:	dc02      	bgt.n	800d73c <__sflush_r+0x20>
 800d736:	2000      	movs	r0, #0
 800d738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d73c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d73e:	2e00      	cmp	r6, #0
 800d740:	d0f9      	beq.n	800d736 <__sflush_r+0x1a>
 800d742:	2300      	movs	r3, #0
 800d744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d748:	682f      	ldr	r7, [r5, #0]
 800d74a:	602b      	str	r3, [r5, #0]
 800d74c:	d032      	beq.n	800d7b4 <__sflush_r+0x98>
 800d74e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d750:	89a3      	ldrh	r3, [r4, #12]
 800d752:	075a      	lsls	r2, r3, #29
 800d754:	d505      	bpl.n	800d762 <__sflush_r+0x46>
 800d756:	6863      	ldr	r3, [r4, #4]
 800d758:	1ac0      	subs	r0, r0, r3
 800d75a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d75c:	b10b      	cbz	r3, 800d762 <__sflush_r+0x46>
 800d75e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d760:	1ac0      	subs	r0, r0, r3
 800d762:	2300      	movs	r3, #0
 800d764:	4602      	mov	r2, r0
 800d766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d768:	6a21      	ldr	r1, [r4, #32]
 800d76a:	4628      	mov	r0, r5
 800d76c:	47b0      	blx	r6
 800d76e:	1c43      	adds	r3, r0, #1
 800d770:	89a3      	ldrh	r3, [r4, #12]
 800d772:	d106      	bne.n	800d782 <__sflush_r+0x66>
 800d774:	6829      	ldr	r1, [r5, #0]
 800d776:	291d      	cmp	r1, #29
 800d778:	d82c      	bhi.n	800d7d4 <__sflush_r+0xb8>
 800d77a:	4a2a      	ldr	r2, [pc, #168]	; (800d824 <__sflush_r+0x108>)
 800d77c:	40ca      	lsrs	r2, r1
 800d77e:	07d6      	lsls	r6, r2, #31
 800d780:	d528      	bpl.n	800d7d4 <__sflush_r+0xb8>
 800d782:	2200      	movs	r2, #0
 800d784:	6062      	str	r2, [r4, #4]
 800d786:	04d9      	lsls	r1, r3, #19
 800d788:	6922      	ldr	r2, [r4, #16]
 800d78a:	6022      	str	r2, [r4, #0]
 800d78c:	d504      	bpl.n	800d798 <__sflush_r+0x7c>
 800d78e:	1c42      	adds	r2, r0, #1
 800d790:	d101      	bne.n	800d796 <__sflush_r+0x7a>
 800d792:	682b      	ldr	r3, [r5, #0]
 800d794:	b903      	cbnz	r3, 800d798 <__sflush_r+0x7c>
 800d796:	6560      	str	r0, [r4, #84]	; 0x54
 800d798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d79a:	602f      	str	r7, [r5, #0]
 800d79c:	2900      	cmp	r1, #0
 800d79e:	d0ca      	beq.n	800d736 <__sflush_r+0x1a>
 800d7a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7a4:	4299      	cmp	r1, r3
 800d7a6:	d002      	beq.n	800d7ae <__sflush_r+0x92>
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	f000 fcbd 	bl	800e128 <_free_r>
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	6360      	str	r0, [r4, #52]	; 0x34
 800d7b2:	e7c1      	b.n	800d738 <__sflush_r+0x1c>
 800d7b4:	6a21      	ldr	r1, [r4, #32]
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	47b0      	blx	r6
 800d7bc:	1c41      	adds	r1, r0, #1
 800d7be:	d1c7      	bne.n	800d750 <__sflush_r+0x34>
 800d7c0:	682b      	ldr	r3, [r5, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d0c4      	beq.n	800d750 <__sflush_r+0x34>
 800d7c6:	2b1d      	cmp	r3, #29
 800d7c8:	d001      	beq.n	800d7ce <__sflush_r+0xb2>
 800d7ca:	2b16      	cmp	r3, #22
 800d7cc:	d101      	bne.n	800d7d2 <__sflush_r+0xb6>
 800d7ce:	602f      	str	r7, [r5, #0]
 800d7d0:	e7b1      	b.n	800d736 <__sflush_r+0x1a>
 800d7d2:	89a3      	ldrh	r3, [r4, #12]
 800d7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7d8:	81a3      	strh	r3, [r4, #12]
 800d7da:	e7ad      	b.n	800d738 <__sflush_r+0x1c>
 800d7dc:	690f      	ldr	r7, [r1, #16]
 800d7de:	2f00      	cmp	r7, #0
 800d7e0:	d0a9      	beq.n	800d736 <__sflush_r+0x1a>
 800d7e2:	0793      	lsls	r3, r2, #30
 800d7e4:	680e      	ldr	r6, [r1, #0]
 800d7e6:	bf08      	it	eq
 800d7e8:	694b      	ldreq	r3, [r1, #20]
 800d7ea:	600f      	str	r7, [r1, #0]
 800d7ec:	bf18      	it	ne
 800d7ee:	2300      	movne	r3, #0
 800d7f0:	eba6 0807 	sub.w	r8, r6, r7
 800d7f4:	608b      	str	r3, [r1, #8]
 800d7f6:	f1b8 0f00 	cmp.w	r8, #0
 800d7fa:	dd9c      	ble.n	800d736 <__sflush_r+0x1a>
 800d7fc:	6a21      	ldr	r1, [r4, #32]
 800d7fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d800:	4643      	mov	r3, r8
 800d802:	463a      	mov	r2, r7
 800d804:	4628      	mov	r0, r5
 800d806:	47b0      	blx	r6
 800d808:	2800      	cmp	r0, #0
 800d80a:	dc06      	bgt.n	800d81a <__sflush_r+0xfe>
 800d80c:	89a3      	ldrh	r3, [r4, #12]
 800d80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d812:	81a3      	strh	r3, [r4, #12]
 800d814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d818:	e78e      	b.n	800d738 <__sflush_r+0x1c>
 800d81a:	4407      	add	r7, r0
 800d81c:	eba8 0800 	sub.w	r8, r8, r0
 800d820:	e7e9      	b.n	800d7f6 <__sflush_r+0xda>
 800d822:	bf00      	nop
 800d824:	20400001 	.word	0x20400001

0800d828 <_fflush_r>:
 800d828:	b538      	push	{r3, r4, r5, lr}
 800d82a:	690b      	ldr	r3, [r1, #16]
 800d82c:	4605      	mov	r5, r0
 800d82e:	460c      	mov	r4, r1
 800d830:	b913      	cbnz	r3, 800d838 <_fflush_r+0x10>
 800d832:	2500      	movs	r5, #0
 800d834:	4628      	mov	r0, r5
 800d836:	bd38      	pop	{r3, r4, r5, pc}
 800d838:	b118      	cbz	r0, 800d842 <_fflush_r+0x1a>
 800d83a:	6983      	ldr	r3, [r0, #24]
 800d83c:	b90b      	cbnz	r3, 800d842 <_fflush_r+0x1a>
 800d83e:	f000 f899 	bl	800d974 <__sinit>
 800d842:	4b14      	ldr	r3, [pc, #80]	; (800d894 <_fflush_r+0x6c>)
 800d844:	429c      	cmp	r4, r3
 800d846:	d11b      	bne.n	800d880 <_fflush_r+0x58>
 800d848:	686c      	ldr	r4, [r5, #4]
 800d84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d0ef      	beq.n	800d832 <_fflush_r+0xa>
 800d852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d854:	07d0      	lsls	r0, r2, #31
 800d856:	d404      	bmi.n	800d862 <_fflush_r+0x3a>
 800d858:	0599      	lsls	r1, r3, #22
 800d85a:	d402      	bmi.n	800d862 <_fflush_r+0x3a>
 800d85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d85e:	f000 fbd7 	bl	800e010 <__retarget_lock_acquire_recursive>
 800d862:	4628      	mov	r0, r5
 800d864:	4621      	mov	r1, r4
 800d866:	f7ff ff59 	bl	800d71c <__sflush_r>
 800d86a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d86c:	07da      	lsls	r2, r3, #31
 800d86e:	4605      	mov	r5, r0
 800d870:	d4e0      	bmi.n	800d834 <_fflush_r+0xc>
 800d872:	89a3      	ldrh	r3, [r4, #12]
 800d874:	059b      	lsls	r3, r3, #22
 800d876:	d4dd      	bmi.n	800d834 <_fflush_r+0xc>
 800d878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d87a:	f000 fbca 	bl	800e012 <__retarget_lock_release_recursive>
 800d87e:	e7d9      	b.n	800d834 <_fflush_r+0xc>
 800d880:	4b05      	ldr	r3, [pc, #20]	; (800d898 <_fflush_r+0x70>)
 800d882:	429c      	cmp	r4, r3
 800d884:	d101      	bne.n	800d88a <_fflush_r+0x62>
 800d886:	68ac      	ldr	r4, [r5, #8]
 800d888:	e7df      	b.n	800d84a <_fflush_r+0x22>
 800d88a:	4b04      	ldr	r3, [pc, #16]	; (800d89c <_fflush_r+0x74>)
 800d88c:	429c      	cmp	r4, r3
 800d88e:	bf08      	it	eq
 800d890:	68ec      	ldreq	r4, [r5, #12]
 800d892:	e7da      	b.n	800d84a <_fflush_r+0x22>
 800d894:	0800fd40 	.word	0x0800fd40
 800d898:	0800fd60 	.word	0x0800fd60
 800d89c:	0800fd20 	.word	0x0800fd20

0800d8a0 <fflush>:
 800d8a0:	4601      	mov	r1, r0
 800d8a2:	b920      	cbnz	r0, 800d8ae <fflush+0xe>
 800d8a4:	4b04      	ldr	r3, [pc, #16]	; (800d8b8 <fflush+0x18>)
 800d8a6:	4905      	ldr	r1, [pc, #20]	; (800d8bc <fflush+0x1c>)
 800d8a8:	6818      	ldr	r0, [r3, #0]
 800d8aa:	f000 bafe 	b.w	800deaa <_fwalk_reent>
 800d8ae:	4b04      	ldr	r3, [pc, #16]	; (800d8c0 <fflush+0x20>)
 800d8b0:	6818      	ldr	r0, [r3, #0]
 800d8b2:	f7ff bfb9 	b.w	800d828 <_fflush_r>
 800d8b6:	bf00      	nop
 800d8b8:	0800fd80 	.word	0x0800fd80
 800d8bc:	0800d829 	.word	0x0800d829
 800d8c0:	20000ad4 	.word	0x20000ad4

0800d8c4 <std>:
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	b510      	push	{r4, lr}
 800d8c8:	4604      	mov	r4, r0
 800d8ca:	e9c0 3300 	strd	r3, r3, [r0]
 800d8ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8d2:	6083      	str	r3, [r0, #8]
 800d8d4:	8181      	strh	r1, [r0, #12]
 800d8d6:	6643      	str	r3, [r0, #100]	; 0x64
 800d8d8:	81c2      	strh	r2, [r0, #14]
 800d8da:	6183      	str	r3, [r0, #24]
 800d8dc:	4619      	mov	r1, r3
 800d8de:	2208      	movs	r2, #8
 800d8e0:	305c      	adds	r0, #92	; 0x5c
 800d8e2:	f000 fc19 	bl	800e118 <memset>
 800d8e6:	4b05      	ldr	r3, [pc, #20]	; (800d8fc <std+0x38>)
 800d8e8:	6263      	str	r3, [r4, #36]	; 0x24
 800d8ea:	4b05      	ldr	r3, [pc, #20]	; (800d900 <std+0x3c>)
 800d8ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8ee:	4b05      	ldr	r3, [pc, #20]	; (800d904 <std+0x40>)
 800d8f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8f2:	4b05      	ldr	r3, [pc, #20]	; (800d908 <std+0x44>)
 800d8f4:	6224      	str	r4, [r4, #32]
 800d8f6:	6323      	str	r3, [r4, #48]	; 0x30
 800d8f8:	bd10      	pop	{r4, pc}
 800d8fa:	bf00      	nop
 800d8fc:	0800eb89 	.word	0x0800eb89
 800d900:	0800ebab 	.word	0x0800ebab
 800d904:	0800ebe3 	.word	0x0800ebe3
 800d908:	0800ec07 	.word	0x0800ec07

0800d90c <_cleanup_r>:
 800d90c:	4901      	ldr	r1, [pc, #4]	; (800d914 <_cleanup_r+0x8>)
 800d90e:	f000 bacc 	b.w	800deaa <_fwalk_reent>
 800d912:	bf00      	nop
 800d914:	0800d829 	.word	0x0800d829

0800d918 <__sfmoreglue>:
 800d918:	b570      	push	{r4, r5, r6, lr}
 800d91a:	1e4a      	subs	r2, r1, #1
 800d91c:	2568      	movs	r5, #104	; 0x68
 800d91e:	4355      	muls	r5, r2
 800d920:	460e      	mov	r6, r1
 800d922:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d926:	f000 fc4f 	bl	800e1c8 <_malloc_r>
 800d92a:	4604      	mov	r4, r0
 800d92c:	b140      	cbz	r0, 800d940 <__sfmoreglue+0x28>
 800d92e:	2100      	movs	r1, #0
 800d930:	e9c0 1600 	strd	r1, r6, [r0]
 800d934:	300c      	adds	r0, #12
 800d936:	60a0      	str	r0, [r4, #8]
 800d938:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d93c:	f000 fbec 	bl	800e118 <memset>
 800d940:	4620      	mov	r0, r4
 800d942:	bd70      	pop	{r4, r5, r6, pc}

0800d944 <__sfp_lock_acquire>:
 800d944:	4801      	ldr	r0, [pc, #4]	; (800d94c <__sfp_lock_acquire+0x8>)
 800d946:	f000 bb63 	b.w	800e010 <__retarget_lock_acquire_recursive>
 800d94a:	bf00      	nop
 800d94c:	20005cb8 	.word	0x20005cb8

0800d950 <__sfp_lock_release>:
 800d950:	4801      	ldr	r0, [pc, #4]	; (800d958 <__sfp_lock_release+0x8>)
 800d952:	f000 bb5e 	b.w	800e012 <__retarget_lock_release_recursive>
 800d956:	bf00      	nop
 800d958:	20005cb8 	.word	0x20005cb8

0800d95c <__sinit_lock_acquire>:
 800d95c:	4801      	ldr	r0, [pc, #4]	; (800d964 <__sinit_lock_acquire+0x8>)
 800d95e:	f000 bb57 	b.w	800e010 <__retarget_lock_acquire_recursive>
 800d962:	bf00      	nop
 800d964:	20005cb3 	.word	0x20005cb3

0800d968 <__sinit_lock_release>:
 800d968:	4801      	ldr	r0, [pc, #4]	; (800d970 <__sinit_lock_release+0x8>)
 800d96a:	f000 bb52 	b.w	800e012 <__retarget_lock_release_recursive>
 800d96e:	bf00      	nop
 800d970:	20005cb3 	.word	0x20005cb3

0800d974 <__sinit>:
 800d974:	b510      	push	{r4, lr}
 800d976:	4604      	mov	r4, r0
 800d978:	f7ff fff0 	bl	800d95c <__sinit_lock_acquire>
 800d97c:	69a3      	ldr	r3, [r4, #24]
 800d97e:	b11b      	cbz	r3, 800d988 <__sinit+0x14>
 800d980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d984:	f7ff bff0 	b.w	800d968 <__sinit_lock_release>
 800d988:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d98c:	6523      	str	r3, [r4, #80]	; 0x50
 800d98e:	4b13      	ldr	r3, [pc, #76]	; (800d9dc <__sinit+0x68>)
 800d990:	4a13      	ldr	r2, [pc, #76]	; (800d9e0 <__sinit+0x6c>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	62a2      	str	r2, [r4, #40]	; 0x28
 800d996:	42a3      	cmp	r3, r4
 800d998:	bf04      	itt	eq
 800d99a:	2301      	moveq	r3, #1
 800d99c:	61a3      	streq	r3, [r4, #24]
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 f820 	bl	800d9e4 <__sfp>
 800d9a4:	6060      	str	r0, [r4, #4]
 800d9a6:	4620      	mov	r0, r4
 800d9a8:	f000 f81c 	bl	800d9e4 <__sfp>
 800d9ac:	60a0      	str	r0, [r4, #8]
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f000 f818 	bl	800d9e4 <__sfp>
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	60e0      	str	r0, [r4, #12]
 800d9b8:	2104      	movs	r1, #4
 800d9ba:	6860      	ldr	r0, [r4, #4]
 800d9bc:	f7ff ff82 	bl	800d8c4 <std>
 800d9c0:	68a0      	ldr	r0, [r4, #8]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	2109      	movs	r1, #9
 800d9c6:	f7ff ff7d 	bl	800d8c4 <std>
 800d9ca:	68e0      	ldr	r0, [r4, #12]
 800d9cc:	2202      	movs	r2, #2
 800d9ce:	2112      	movs	r1, #18
 800d9d0:	f7ff ff78 	bl	800d8c4 <std>
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	61a3      	str	r3, [r4, #24]
 800d9d8:	e7d2      	b.n	800d980 <__sinit+0xc>
 800d9da:	bf00      	nop
 800d9dc:	0800fd80 	.word	0x0800fd80
 800d9e0:	0800d90d 	.word	0x0800d90d

0800d9e4 <__sfp>:
 800d9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e6:	4607      	mov	r7, r0
 800d9e8:	f7ff ffac 	bl	800d944 <__sfp_lock_acquire>
 800d9ec:	4b1e      	ldr	r3, [pc, #120]	; (800da68 <__sfp+0x84>)
 800d9ee:	681e      	ldr	r6, [r3, #0]
 800d9f0:	69b3      	ldr	r3, [r6, #24]
 800d9f2:	b913      	cbnz	r3, 800d9fa <__sfp+0x16>
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	f7ff ffbd 	bl	800d974 <__sinit>
 800d9fa:	3648      	adds	r6, #72	; 0x48
 800d9fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800da00:	3b01      	subs	r3, #1
 800da02:	d503      	bpl.n	800da0c <__sfp+0x28>
 800da04:	6833      	ldr	r3, [r6, #0]
 800da06:	b30b      	cbz	r3, 800da4c <__sfp+0x68>
 800da08:	6836      	ldr	r6, [r6, #0]
 800da0a:	e7f7      	b.n	800d9fc <__sfp+0x18>
 800da0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800da10:	b9d5      	cbnz	r5, 800da48 <__sfp+0x64>
 800da12:	4b16      	ldr	r3, [pc, #88]	; (800da6c <__sfp+0x88>)
 800da14:	60e3      	str	r3, [r4, #12]
 800da16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800da1a:	6665      	str	r5, [r4, #100]	; 0x64
 800da1c:	f000 faf6 	bl	800e00c <__retarget_lock_init_recursive>
 800da20:	f7ff ff96 	bl	800d950 <__sfp_lock_release>
 800da24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800da28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800da2c:	6025      	str	r5, [r4, #0]
 800da2e:	61a5      	str	r5, [r4, #24]
 800da30:	2208      	movs	r2, #8
 800da32:	4629      	mov	r1, r5
 800da34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800da38:	f000 fb6e 	bl	800e118 <memset>
 800da3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800da40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800da44:	4620      	mov	r0, r4
 800da46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da48:	3468      	adds	r4, #104	; 0x68
 800da4a:	e7d9      	b.n	800da00 <__sfp+0x1c>
 800da4c:	2104      	movs	r1, #4
 800da4e:	4638      	mov	r0, r7
 800da50:	f7ff ff62 	bl	800d918 <__sfmoreglue>
 800da54:	4604      	mov	r4, r0
 800da56:	6030      	str	r0, [r6, #0]
 800da58:	2800      	cmp	r0, #0
 800da5a:	d1d5      	bne.n	800da08 <__sfp+0x24>
 800da5c:	f7ff ff78 	bl	800d950 <__sfp_lock_release>
 800da60:	230c      	movs	r3, #12
 800da62:	603b      	str	r3, [r7, #0]
 800da64:	e7ee      	b.n	800da44 <__sfp+0x60>
 800da66:	bf00      	nop
 800da68:	0800fd80 	.word	0x0800fd80
 800da6c:	ffff0001 	.word	0xffff0001

0800da70 <_fopen_r>:
 800da70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da72:	460f      	mov	r7, r1
 800da74:	4611      	mov	r1, r2
 800da76:	aa01      	add	r2, sp, #4
 800da78:	4605      	mov	r5, r0
 800da7a:	f001 f9ab 	bl	800edd4 <__sflags>
 800da7e:	4606      	mov	r6, r0
 800da80:	b918      	cbnz	r0, 800da8a <_fopen_r+0x1a>
 800da82:	2400      	movs	r4, #0
 800da84:	4620      	mov	r0, r4
 800da86:	b003      	add	sp, #12
 800da88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da8a:	4628      	mov	r0, r5
 800da8c:	f7ff ffaa 	bl	800d9e4 <__sfp>
 800da90:	4604      	mov	r4, r0
 800da92:	2800      	cmp	r0, #0
 800da94:	d0f5      	beq.n	800da82 <_fopen_r+0x12>
 800da96:	4639      	mov	r1, r7
 800da98:	9a01      	ldr	r2, [sp, #4]
 800da9a:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 800da9e:	4628      	mov	r0, r5
 800daa0:	f000 feda 	bl	800e858 <_open_r>
 800daa4:	1e07      	subs	r7, r0, #0
 800daa6:	da09      	bge.n	800dabc <_fopen_r+0x4c>
 800daa8:	2500      	movs	r5, #0
 800daaa:	f7ff ff4b 	bl	800d944 <__sfp_lock_acquire>
 800daae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dab0:	81a5      	strh	r5, [r4, #12]
 800dab2:	f000 faac 	bl	800e00e <__retarget_lock_close_recursive>
 800dab6:	f7ff ff4b 	bl	800d950 <__sfp_lock_release>
 800daba:	e7e2      	b.n	800da82 <_fopen_r+0x12>
 800dabc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dabe:	07db      	lsls	r3, r3, #31
 800dac0:	d405      	bmi.n	800dace <_fopen_r+0x5e>
 800dac2:	89a3      	ldrh	r3, [r4, #12]
 800dac4:	0598      	lsls	r0, r3, #22
 800dac6:	d402      	bmi.n	800dace <_fopen_r+0x5e>
 800dac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daca:	f000 faa1 	bl	800e010 <__retarget_lock_acquire_recursive>
 800dace:	4b0e      	ldr	r3, [pc, #56]	; (800db08 <_fopen_r+0x98>)
 800dad0:	6263      	str	r3, [r4, #36]	; 0x24
 800dad2:	4b0e      	ldr	r3, [pc, #56]	; (800db0c <_fopen_r+0x9c>)
 800dad4:	62a3      	str	r3, [r4, #40]	; 0x28
 800dad6:	4b0e      	ldr	r3, [pc, #56]	; (800db10 <_fopen_r+0xa0>)
 800dad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dada:	05f1      	lsls	r1, r6, #23
 800dadc:	4b0d      	ldr	r3, [pc, #52]	; (800db14 <_fopen_r+0xa4>)
 800dade:	81e7      	strh	r7, [r4, #14]
 800dae0:	81a6      	strh	r6, [r4, #12]
 800dae2:	6224      	str	r4, [r4, #32]
 800dae4:	6323      	str	r3, [r4, #48]	; 0x30
 800dae6:	d505      	bpl.n	800daf4 <_fopen_r+0x84>
 800dae8:	2302      	movs	r3, #2
 800daea:	2200      	movs	r2, #0
 800daec:	4621      	mov	r1, r4
 800daee:	4628      	mov	r0, r5
 800daf0:	f000 f8ae 	bl	800dc50 <_fseek_r>
 800daf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800daf6:	07da      	lsls	r2, r3, #31
 800daf8:	d4c4      	bmi.n	800da84 <_fopen_r+0x14>
 800dafa:	89a3      	ldrh	r3, [r4, #12]
 800dafc:	059b      	lsls	r3, r3, #22
 800dafe:	d4c1      	bmi.n	800da84 <_fopen_r+0x14>
 800db00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db02:	f000 fa86 	bl	800e012 <__retarget_lock_release_recursive>
 800db06:	e7bd      	b.n	800da84 <_fopen_r+0x14>
 800db08:	0800eb89 	.word	0x0800eb89
 800db0c:	0800ebab 	.word	0x0800ebab
 800db10:	0800ebe3 	.word	0x0800ebe3
 800db14:	0800ec07 	.word	0x0800ec07

0800db18 <fopen>:
 800db18:	4b02      	ldr	r3, [pc, #8]	; (800db24 <fopen+0xc>)
 800db1a:	460a      	mov	r2, r1
 800db1c:	4601      	mov	r1, r0
 800db1e:	6818      	ldr	r0, [r3, #0]
 800db20:	f7ff bfa6 	b.w	800da70 <_fopen_r>
 800db24:	20000ad4 	.word	0x20000ad4

0800db28 <fiprintf>:
 800db28:	b40e      	push	{r1, r2, r3}
 800db2a:	b503      	push	{r0, r1, lr}
 800db2c:	4601      	mov	r1, r0
 800db2e:	ab03      	add	r3, sp, #12
 800db30:	4805      	ldr	r0, [pc, #20]	; (800db48 <fiprintf+0x20>)
 800db32:	f853 2b04 	ldr.w	r2, [r3], #4
 800db36:	6800      	ldr	r0, [r0, #0]
 800db38:	9301      	str	r3, [sp, #4]
 800db3a:	f000 fbc9 	bl	800e2d0 <_vfiprintf_r>
 800db3e:	b002      	add	sp, #8
 800db40:	f85d eb04 	ldr.w	lr, [sp], #4
 800db44:	b003      	add	sp, #12
 800db46:	4770      	bx	lr
 800db48:	20000ad4 	.word	0x20000ad4

0800db4c <_fread_r>:
 800db4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db50:	461f      	mov	r7, r3
 800db52:	4613      	mov	r3, r2
 800db54:	437b      	muls	r3, r7
 800db56:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800db58:	4606      	mov	r6, r0
 800db5a:	468a      	mov	sl, r1
 800db5c:	4691      	mov	r9, r2
 800db5e:	469b      	mov	fp, r3
 800db60:	d05f      	beq.n	800dc22 <_fread_r+0xd6>
 800db62:	b118      	cbz	r0, 800db6c <_fread_r+0x20>
 800db64:	6983      	ldr	r3, [r0, #24]
 800db66:	b90b      	cbnz	r3, 800db6c <_fread_r+0x20>
 800db68:	f7ff ff04 	bl	800d974 <__sinit>
 800db6c:	4b2e      	ldr	r3, [pc, #184]	; (800dc28 <_fread_r+0xdc>)
 800db6e:	429c      	cmp	r4, r3
 800db70:	d128      	bne.n	800dbc4 <_fread_r+0x78>
 800db72:	6874      	ldr	r4, [r6, #4]
 800db74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db76:	07db      	lsls	r3, r3, #31
 800db78:	d405      	bmi.n	800db86 <_fread_r+0x3a>
 800db7a:	89a3      	ldrh	r3, [r4, #12]
 800db7c:	059d      	lsls	r5, r3, #22
 800db7e:	d402      	bmi.n	800db86 <_fread_r+0x3a>
 800db80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db82:	f000 fa45 	bl	800e010 <__retarget_lock_acquire_recursive>
 800db86:	6863      	ldr	r3, [r4, #4]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	da01      	bge.n	800db90 <_fread_r+0x44>
 800db8c:	2300      	movs	r3, #0
 800db8e:	6063      	str	r3, [r4, #4]
 800db90:	46d8      	mov	r8, fp
 800db92:	e9d4 1500 	ldrd	r1, r5, [r4]
 800db96:	4545      	cmp	r5, r8
 800db98:	d31e      	bcc.n	800dbd8 <_fread_r+0x8c>
 800db9a:	4642      	mov	r2, r8
 800db9c:	4650      	mov	r0, sl
 800db9e:	f000 faad 	bl	800e0fc <memcpy>
 800dba2:	6860      	ldr	r0, [r4, #4]
 800dba4:	6821      	ldr	r1, [r4, #0]
 800dba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dba8:	eba0 0008 	sub.w	r0, r0, r8
 800dbac:	4441      	add	r1, r8
 800dbae:	07da      	lsls	r2, r3, #31
 800dbb0:	6060      	str	r0, [r4, #4]
 800dbb2:	6021      	str	r1, [r4, #0]
 800dbb4:	d42f      	bmi.n	800dc16 <_fread_r+0xca>
 800dbb6:	89a3      	ldrh	r3, [r4, #12]
 800dbb8:	059b      	lsls	r3, r3, #22
 800dbba:	d42c      	bmi.n	800dc16 <_fread_r+0xca>
 800dbbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbbe:	f000 fa28 	bl	800e012 <__retarget_lock_release_recursive>
 800dbc2:	e028      	b.n	800dc16 <_fread_r+0xca>
 800dbc4:	4b19      	ldr	r3, [pc, #100]	; (800dc2c <_fread_r+0xe0>)
 800dbc6:	429c      	cmp	r4, r3
 800dbc8:	d101      	bne.n	800dbce <_fread_r+0x82>
 800dbca:	68b4      	ldr	r4, [r6, #8]
 800dbcc:	e7d2      	b.n	800db74 <_fread_r+0x28>
 800dbce:	4b18      	ldr	r3, [pc, #96]	; (800dc30 <_fread_r+0xe4>)
 800dbd0:	429c      	cmp	r4, r3
 800dbd2:	bf08      	it	eq
 800dbd4:	68f4      	ldreq	r4, [r6, #12]
 800dbd6:	e7cd      	b.n	800db74 <_fread_r+0x28>
 800dbd8:	462a      	mov	r2, r5
 800dbda:	4650      	mov	r0, sl
 800dbdc:	f000 fa8e 	bl	800e0fc <memcpy>
 800dbe0:	6823      	ldr	r3, [r4, #0]
 800dbe2:	442b      	add	r3, r5
 800dbe4:	6023      	str	r3, [r4, #0]
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	eba8 0305 	sub.w	r3, r8, r5
 800dbec:	4630      	mov	r0, r6
 800dbee:	9301      	str	r3, [sp, #4]
 800dbf0:	f000 fedc 	bl	800e9ac <__srefill_r>
 800dbf4:	44aa      	add	sl, r5
 800dbf6:	9b01      	ldr	r3, [sp, #4]
 800dbf8:	b188      	cbz	r0, 800dc1e <_fread_r+0xd2>
 800dbfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbfc:	07d8      	lsls	r0, r3, #31
 800dbfe:	d405      	bmi.n	800dc0c <_fread_r+0xc0>
 800dc00:	89a3      	ldrh	r3, [r4, #12]
 800dc02:	0599      	lsls	r1, r3, #22
 800dc04:	d402      	bmi.n	800dc0c <_fread_r+0xc0>
 800dc06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc08:	f000 fa03 	bl	800e012 <__retarget_lock_release_recursive>
 800dc0c:	445d      	add	r5, fp
 800dc0e:	eba5 0308 	sub.w	r3, r5, r8
 800dc12:	fbb3 f7f9 	udiv	r7, r3, r9
 800dc16:	4638      	mov	r0, r7
 800dc18:	b003      	add	sp, #12
 800dc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc1e:	4698      	mov	r8, r3
 800dc20:	e7b7      	b.n	800db92 <_fread_r+0x46>
 800dc22:	461f      	mov	r7, r3
 800dc24:	e7f7      	b.n	800dc16 <_fread_r+0xca>
 800dc26:	bf00      	nop
 800dc28:	0800fd40 	.word	0x0800fd40
 800dc2c:	0800fd60 	.word	0x0800fd60
 800dc30:	0800fd20 	.word	0x0800fd20

0800dc34 <fread>:
 800dc34:	b507      	push	{r0, r1, r2, lr}
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	460a      	mov	r2, r1
 800dc3c:	4601      	mov	r1, r0
 800dc3e:	4803      	ldr	r0, [pc, #12]	; (800dc4c <fread+0x18>)
 800dc40:	6800      	ldr	r0, [r0, #0]
 800dc42:	f7ff ff83 	bl	800db4c <_fread_r>
 800dc46:	b003      	add	sp, #12
 800dc48:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc4c:	20000ad4 	.word	0x20000ad4

0800dc50 <_fseek_r>:
 800dc50:	f000 b800 	b.w	800dc54 <_fseeko_r>

0800dc54 <_fseeko_r>:
 800dc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc58:	460c      	mov	r4, r1
 800dc5a:	4617      	mov	r7, r2
 800dc5c:	461e      	mov	r6, r3
 800dc5e:	4605      	mov	r5, r0
 800dc60:	b118      	cbz	r0, 800dc6a <_fseeko_r+0x16>
 800dc62:	6983      	ldr	r3, [r0, #24]
 800dc64:	b90b      	cbnz	r3, 800dc6a <_fseeko_r+0x16>
 800dc66:	f7ff fe85 	bl	800d974 <__sinit>
 800dc6a:	4b44      	ldr	r3, [pc, #272]	; (800dd7c <_fseeko_r+0x128>)
 800dc6c:	429c      	cmp	r4, r3
 800dc6e:	d122      	bne.n	800dcb6 <_fseeko_r+0x62>
 800dc70:	686c      	ldr	r4, [r5, #4]
 800dc72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc74:	07d9      	lsls	r1, r3, #31
 800dc76:	d405      	bmi.n	800dc84 <_fseeko_r+0x30>
 800dc78:	89a3      	ldrh	r3, [r4, #12]
 800dc7a:	059a      	lsls	r2, r3, #22
 800dc7c:	d402      	bmi.n	800dc84 <_fseeko_r+0x30>
 800dc7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc80:	f000 f9c6 	bl	800e010 <__retarget_lock_acquire_recursive>
 800dc84:	89a3      	ldrh	r3, [r4, #12]
 800dc86:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800dc8a:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800dc8e:	d103      	bne.n	800dc98 <_fseeko_r+0x44>
 800dc90:	4621      	mov	r1, r4
 800dc92:	4628      	mov	r0, r5
 800dc94:	f7ff fdc8 	bl	800d828 <_fflush_r>
 800dc98:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800dc9c:	f1b8 0f00 	cmp.w	r8, #0
 800dca0:	d113      	bne.n	800dcca <_fseeko_r+0x76>
 800dca2:	231d      	movs	r3, #29
 800dca4:	602b      	str	r3, [r5, #0]
 800dca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dca8:	07d9      	lsls	r1, r3, #31
 800dcaa:	d55d      	bpl.n	800dd68 <_fseeko_r+0x114>
 800dcac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb6:	4b32      	ldr	r3, [pc, #200]	; (800dd80 <_fseeko_r+0x12c>)
 800dcb8:	429c      	cmp	r4, r3
 800dcba:	d101      	bne.n	800dcc0 <_fseeko_r+0x6c>
 800dcbc:	68ac      	ldr	r4, [r5, #8]
 800dcbe:	e7d8      	b.n	800dc72 <_fseeko_r+0x1e>
 800dcc0:	4b30      	ldr	r3, [pc, #192]	; (800dd84 <_fseeko_r+0x130>)
 800dcc2:	429c      	cmp	r4, r3
 800dcc4:	bf08      	it	eq
 800dcc6:	68ec      	ldreq	r4, [r5, #12]
 800dcc8:	e7d3      	b.n	800dc72 <_fseeko_r+0x1e>
 800dcca:	2e01      	cmp	r6, #1
 800dccc:	d036      	beq.n	800dd3c <_fseeko_r+0xe8>
 800dcce:	f036 0302 	bics.w	r3, r6, #2
 800dcd2:	d147      	bne.n	800dd64 <_fseeko_r+0x110>
 800dcd4:	6923      	ldr	r3, [r4, #16]
 800dcd6:	b91b      	cbnz	r3, 800dce0 <_fseeko_r+0x8c>
 800dcd8:	4621      	mov	r1, r4
 800dcda:	4628      	mov	r0, r5
 800dcdc:	f000 f9be 	bl	800e05c <__smakebuf_r>
 800dce0:	4621      	mov	r1, r4
 800dce2:	4628      	mov	r0, r5
 800dce4:	f7ff fda0 	bl	800d828 <_fflush_r>
 800dce8:	2800      	cmp	r0, #0
 800dcea:	d1dc      	bne.n	800dca6 <_fseeko_r+0x52>
 800dcec:	6a21      	ldr	r1, [r4, #32]
 800dcee:	4633      	mov	r3, r6
 800dcf0:	463a      	mov	r2, r7
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	47c0      	blx	r8
 800dcf6:	3001      	adds	r0, #1
 800dcf8:	d0d5      	beq.n	800dca6 <_fseeko_r+0x52>
 800dcfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcfc:	b141      	cbz	r1, 800dd10 <_fseeko_r+0xbc>
 800dcfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd02:	4299      	cmp	r1, r3
 800dd04:	d002      	beq.n	800dd0c <_fseeko_r+0xb8>
 800dd06:	4628      	mov	r0, r5
 800dd08:	f000 fa0e 	bl	800e128 <_free_r>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	6363      	str	r3, [r4, #52]	; 0x34
 800dd10:	6923      	ldr	r3, [r4, #16]
 800dd12:	6023      	str	r3, [r4, #0]
 800dd14:	89a3      	ldrh	r3, [r4, #12]
 800dd16:	2500      	movs	r5, #0
 800dd18:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 800dd1c:	6065      	str	r5, [r4, #4]
 800dd1e:	81a3      	strh	r3, [r4, #12]
 800dd20:	2208      	movs	r2, #8
 800dd22:	4629      	mov	r1, r5
 800dd24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd28:	f000 f9f6 	bl	800e118 <memset>
 800dd2c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800dd2e:	f016 0601 	ands.w	r6, r6, #1
 800dd32:	d120      	bne.n	800dd76 <_fseeko_r+0x122>
 800dd34:	89a3      	ldrh	r3, [r4, #12]
 800dd36:	059b      	lsls	r3, r3, #22
 800dd38:	d4ba      	bmi.n	800dcb0 <_fseeko_r+0x5c>
 800dd3a:	e00c      	b.n	800dd56 <_fseeko_r+0x102>
 800dd3c:	4621      	mov	r1, r4
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f000 f822 	bl	800dd88 <_ftello_r>
 800dd44:	1c43      	adds	r3, r0, #1
 800dd46:	4606      	mov	r6, r0
 800dd48:	d109      	bne.n	800dd5e <_fseeko_r+0x10a>
 800dd4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd4c:	07dd      	lsls	r5, r3, #31
 800dd4e:	d4ad      	bmi.n	800dcac <_fseeko_r+0x58>
 800dd50:	89a3      	ldrh	r3, [r4, #12]
 800dd52:	0598      	lsls	r0, r3, #22
 800dd54:	d4aa      	bmi.n	800dcac <_fseeko_r+0x58>
 800dd56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd58:	f000 f95b 	bl	800e012 <__retarget_lock_release_recursive>
 800dd5c:	e7a8      	b.n	800dcb0 <_fseeko_r+0x5c>
 800dd5e:	4407      	add	r7, r0
 800dd60:	2600      	movs	r6, #0
 800dd62:	e7b7      	b.n	800dcd4 <_fseeko_r+0x80>
 800dd64:	2316      	movs	r3, #22
 800dd66:	e79d      	b.n	800dca4 <_fseeko_r+0x50>
 800dd68:	89a3      	ldrh	r3, [r4, #12]
 800dd6a:	059a      	lsls	r2, r3, #22
 800dd6c:	d49e      	bmi.n	800dcac <_fseeko_r+0x58>
 800dd6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd70:	f000 f94f 	bl	800e012 <__retarget_lock_release_recursive>
 800dd74:	e79a      	b.n	800dcac <_fseeko_r+0x58>
 800dd76:	462e      	mov	r6, r5
 800dd78:	e79a      	b.n	800dcb0 <_fseeko_r+0x5c>
 800dd7a:	bf00      	nop
 800dd7c:	0800fd40 	.word	0x0800fd40
 800dd80:	0800fd60 	.word	0x0800fd60
 800dd84:	0800fd20 	.word	0x0800fd20

0800dd88 <_ftello_r>:
 800dd88:	b570      	push	{r4, r5, r6, lr}
 800dd8a:	460c      	mov	r4, r1
 800dd8c:	4605      	mov	r5, r0
 800dd8e:	b118      	cbz	r0, 800dd98 <_ftello_r+0x10>
 800dd90:	6983      	ldr	r3, [r0, #24]
 800dd92:	b90b      	cbnz	r3, 800dd98 <_ftello_r+0x10>
 800dd94:	f7ff fdee 	bl	800d974 <__sinit>
 800dd98:	4b32      	ldr	r3, [pc, #200]	; (800de64 <_ftello_r+0xdc>)
 800dd9a:	429c      	cmp	r4, r3
 800dd9c:	d114      	bne.n	800ddc8 <_ftello_r+0x40>
 800dd9e:	686c      	ldr	r4, [r5, #4]
 800dda0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dda2:	07da      	lsls	r2, r3, #31
 800dda4:	d405      	bmi.n	800ddb2 <_ftello_r+0x2a>
 800dda6:	89a3      	ldrh	r3, [r4, #12]
 800dda8:	059b      	lsls	r3, r3, #22
 800ddaa:	d402      	bmi.n	800ddb2 <_ftello_r+0x2a>
 800ddac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddae:	f000 f92f 	bl	800e010 <__retarget_lock_acquire_recursive>
 800ddb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddb4:	b9ce      	cbnz	r6, 800ddea <_ftello_r+0x62>
 800ddb6:	231d      	movs	r3, #29
 800ddb8:	602b      	str	r3, [r5, #0]
 800ddba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddbc:	07de      	lsls	r6, r3, #31
 800ddbe:	d50d      	bpl.n	800dddc <_ftello_r+0x54>
 800ddc0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	bd70      	pop	{r4, r5, r6, pc}
 800ddc8:	4b27      	ldr	r3, [pc, #156]	; (800de68 <_ftello_r+0xe0>)
 800ddca:	429c      	cmp	r4, r3
 800ddcc:	d101      	bne.n	800ddd2 <_ftello_r+0x4a>
 800ddce:	68ac      	ldr	r4, [r5, #8]
 800ddd0:	e7e6      	b.n	800dda0 <_ftello_r+0x18>
 800ddd2:	4b26      	ldr	r3, [pc, #152]	; (800de6c <_ftello_r+0xe4>)
 800ddd4:	429c      	cmp	r4, r3
 800ddd6:	bf08      	it	eq
 800ddd8:	68ec      	ldreq	r4, [r5, #12]
 800ddda:	e7e1      	b.n	800dda0 <_ftello_r+0x18>
 800dddc:	89a3      	ldrh	r3, [r4, #12]
 800ddde:	059d      	lsls	r5, r3, #22
 800dde0:	d4ee      	bmi.n	800ddc0 <_ftello_r+0x38>
 800dde2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dde4:	f000 f915 	bl	800e012 <__retarget_lock_release_recursive>
 800dde8:	e7ea      	b.n	800ddc0 <_ftello_r+0x38>
 800ddea:	89a2      	ldrh	r2, [r4, #12]
 800ddec:	f002 030c 	and.w	r3, r2, #12
 800ddf0:	2b08      	cmp	r3, #8
 800ddf2:	d119      	bne.n	800de28 <_ftello_r+0xa0>
 800ddf4:	6823      	ldr	r3, [r4, #0]
 800ddf6:	b1bb      	cbz	r3, 800de28 <_ftello_r+0xa0>
 800ddf8:	6921      	ldr	r1, [r4, #16]
 800ddfa:	1a5b      	subs	r3, r3, r1
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	dd13      	ble.n	800de28 <_ftello_r+0xa0>
 800de00:	05d0      	lsls	r0, r2, #23
 800de02:	d511      	bpl.n	800de28 <_ftello_r+0xa0>
 800de04:	2302      	movs	r3, #2
 800de06:	2200      	movs	r2, #0
 800de08:	6a21      	ldr	r1, [r4, #32]
 800de0a:	4628      	mov	r0, r5
 800de0c:	47b0      	blx	r6
 800de0e:	1c41      	adds	r1, r0, #1
 800de10:	4605      	mov	r5, r0
 800de12:	d10d      	bne.n	800de30 <_ftello_r+0xa8>
 800de14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de16:	07da      	lsls	r2, r3, #31
 800de18:	d4d2      	bmi.n	800ddc0 <_ftello_r+0x38>
 800de1a:	89a3      	ldrh	r3, [r4, #12]
 800de1c:	059b      	lsls	r3, r3, #22
 800de1e:	d4cf      	bmi.n	800ddc0 <_ftello_r+0x38>
 800de20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de22:	f000 f8f6 	bl	800e012 <__retarget_lock_release_recursive>
 800de26:	e7cd      	b.n	800ddc4 <_ftello_r+0x3c>
 800de28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de2c:	d00f      	beq.n	800de4e <_ftello_r+0xc6>
 800de2e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800de30:	89a2      	ldrh	r2, [r4, #12]
 800de32:	0756      	lsls	r6, r2, #29
 800de34:	d50d      	bpl.n	800de52 <_ftello_r+0xca>
 800de36:	6863      	ldr	r3, [r4, #4]
 800de38:	1aed      	subs	r5, r5, r3
 800de3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de3c:	b10b      	cbz	r3, 800de42 <_ftello_r+0xba>
 800de3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de40:	1aed      	subs	r5, r5, r3
 800de42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de44:	07d9      	lsls	r1, r3, #31
 800de46:	d4bd      	bmi.n	800ddc4 <_ftello_r+0x3c>
 800de48:	0593      	lsls	r3, r2, #22
 800de4a:	d4bb      	bmi.n	800ddc4 <_ftello_r+0x3c>
 800de4c:	e7e8      	b.n	800de20 <_ftello_r+0x98>
 800de4e:	2301      	movs	r3, #1
 800de50:	e7da      	b.n	800de08 <_ftello_r+0x80>
 800de52:	0710      	lsls	r0, r2, #28
 800de54:	d5f5      	bpl.n	800de42 <_ftello_r+0xba>
 800de56:	6823      	ldr	r3, [r4, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d0f2      	beq.n	800de42 <_ftello_r+0xba>
 800de5c:	6921      	ldr	r1, [r4, #16]
 800de5e:	1a5b      	subs	r3, r3, r1
 800de60:	441d      	add	r5, r3
 800de62:	e7ee      	b.n	800de42 <_ftello_r+0xba>
 800de64:	0800fd40 	.word	0x0800fd40
 800de68:	0800fd60 	.word	0x0800fd60
 800de6c:	0800fd20 	.word	0x0800fd20

0800de70 <_fwalk>:
 800de70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de74:	460f      	mov	r7, r1
 800de76:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800de7a:	2600      	movs	r6, #0
 800de7c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800de80:	f1b8 0801 	subs.w	r8, r8, #1
 800de84:	d505      	bpl.n	800de92 <_fwalk+0x22>
 800de86:	6824      	ldr	r4, [r4, #0]
 800de88:	2c00      	cmp	r4, #0
 800de8a:	d1f7      	bne.n	800de7c <_fwalk+0xc>
 800de8c:	4630      	mov	r0, r6
 800de8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de92:	89ab      	ldrh	r3, [r5, #12]
 800de94:	2b01      	cmp	r3, #1
 800de96:	d906      	bls.n	800dea6 <_fwalk+0x36>
 800de98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de9c:	3301      	adds	r3, #1
 800de9e:	d002      	beq.n	800dea6 <_fwalk+0x36>
 800dea0:	4628      	mov	r0, r5
 800dea2:	47b8      	blx	r7
 800dea4:	4306      	orrs	r6, r0
 800dea6:	3568      	adds	r5, #104	; 0x68
 800dea8:	e7ea      	b.n	800de80 <_fwalk+0x10>

0800deaa <_fwalk_reent>:
 800deaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deae:	4606      	mov	r6, r0
 800deb0:	4688      	mov	r8, r1
 800deb2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800deb6:	2700      	movs	r7, #0
 800deb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800debc:	f1b9 0901 	subs.w	r9, r9, #1
 800dec0:	d505      	bpl.n	800dece <_fwalk_reent+0x24>
 800dec2:	6824      	ldr	r4, [r4, #0]
 800dec4:	2c00      	cmp	r4, #0
 800dec6:	d1f7      	bne.n	800deb8 <_fwalk_reent+0xe>
 800dec8:	4638      	mov	r0, r7
 800deca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dece:	89ab      	ldrh	r3, [r5, #12]
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d907      	bls.n	800dee4 <_fwalk_reent+0x3a>
 800ded4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ded8:	3301      	adds	r3, #1
 800deda:	d003      	beq.n	800dee4 <_fwalk_reent+0x3a>
 800dedc:	4629      	mov	r1, r5
 800dede:	4630      	mov	r0, r6
 800dee0:	47c0      	blx	r8
 800dee2:	4307      	orrs	r7, r0
 800dee4:	3568      	adds	r5, #104	; 0x68
 800dee6:	e7e9      	b.n	800debc <_fwalk_reent+0x12>

0800dee8 <_fwrite_r>:
 800dee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deec:	9c08      	ldr	r4, [sp, #32]
 800deee:	4689      	mov	r9, r1
 800def0:	4617      	mov	r7, r2
 800def2:	fb02 f803 	mul.w	r8, r2, r3
 800def6:	4605      	mov	r5, r0
 800def8:	b118      	cbz	r0, 800df02 <_fwrite_r+0x1a>
 800defa:	6983      	ldr	r3, [r0, #24]
 800defc:	b90b      	cbnz	r3, 800df02 <_fwrite_r+0x1a>
 800defe:	f7ff fd39 	bl	800d974 <__sinit>
 800df02:	4b26      	ldr	r3, [pc, #152]	; (800df9c <_fwrite_r+0xb4>)
 800df04:	429c      	cmp	r4, r3
 800df06:	d123      	bne.n	800df50 <_fwrite_r+0x68>
 800df08:	686c      	ldr	r4, [r5, #4]
 800df0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df0c:	07de      	lsls	r6, r3, #31
 800df0e:	d405      	bmi.n	800df1c <_fwrite_r+0x34>
 800df10:	89a3      	ldrh	r3, [r4, #12]
 800df12:	0598      	lsls	r0, r3, #22
 800df14:	d402      	bmi.n	800df1c <_fwrite_r+0x34>
 800df16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df18:	f000 f87a 	bl	800e010 <__retarget_lock_acquire_recursive>
 800df1c:	89a3      	ldrh	r3, [r4, #12]
 800df1e:	0719      	lsls	r1, r3, #28
 800df20:	d520      	bpl.n	800df64 <_fwrite_r+0x7c>
 800df22:	6923      	ldr	r3, [r4, #16]
 800df24:	b1f3      	cbz	r3, 800df64 <_fwrite_r+0x7c>
 800df26:	2600      	movs	r6, #0
 800df28:	4546      	cmp	r6, r8
 800df2a:	d029      	beq.n	800df80 <_fwrite_r+0x98>
 800df2c:	68a0      	ldr	r0, [r4, #8]
 800df2e:	f819 1006 	ldrb.w	r1, [r9, r6]
 800df32:	3801      	subs	r0, #1
 800df34:	2800      	cmp	r0, #0
 800df36:	60a0      	str	r0, [r4, #8]
 800df38:	da04      	bge.n	800df44 <_fwrite_r+0x5c>
 800df3a:	69a3      	ldr	r3, [r4, #24]
 800df3c:	4298      	cmp	r0, r3
 800df3e:	db19      	blt.n	800df74 <_fwrite_r+0x8c>
 800df40:	290a      	cmp	r1, #10
 800df42:	d017      	beq.n	800df74 <_fwrite_r+0x8c>
 800df44:	6823      	ldr	r3, [r4, #0]
 800df46:	1c5a      	adds	r2, r3, #1
 800df48:	6022      	str	r2, [r4, #0]
 800df4a:	7019      	strb	r1, [r3, #0]
 800df4c:	3601      	adds	r6, #1
 800df4e:	e7eb      	b.n	800df28 <_fwrite_r+0x40>
 800df50:	4b13      	ldr	r3, [pc, #76]	; (800dfa0 <_fwrite_r+0xb8>)
 800df52:	429c      	cmp	r4, r3
 800df54:	d101      	bne.n	800df5a <_fwrite_r+0x72>
 800df56:	68ac      	ldr	r4, [r5, #8]
 800df58:	e7d7      	b.n	800df0a <_fwrite_r+0x22>
 800df5a:	4b12      	ldr	r3, [pc, #72]	; (800dfa4 <_fwrite_r+0xbc>)
 800df5c:	429c      	cmp	r4, r3
 800df5e:	bf08      	it	eq
 800df60:	68ec      	ldreq	r4, [r5, #12]
 800df62:	e7d2      	b.n	800df0a <_fwrite_r+0x22>
 800df64:	4621      	mov	r1, r4
 800df66:	4628      	mov	r0, r5
 800df68:	f000 feb6 	bl	800ecd8 <__swsetup_r>
 800df6c:	2800      	cmp	r0, #0
 800df6e:	d0da      	beq.n	800df26 <_fwrite_r+0x3e>
 800df70:	2600      	movs	r6, #0
 800df72:	e005      	b.n	800df80 <_fwrite_r+0x98>
 800df74:	4622      	mov	r2, r4
 800df76:	4628      	mov	r0, r5
 800df78:	f000 fe4a 	bl	800ec10 <__swbuf_r>
 800df7c:	3001      	adds	r0, #1
 800df7e:	d1e5      	bne.n	800df4c <_fwrite_r+0x64>
 800df80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df82:	07da      	lsls	r2, r3, #31
 800df84:	d405      	bmi.n	800df92 <_fwrite_r+0xaa>
 800df86:	89a3      	ldrh	r3, [r4, #12]
 800df88:	059b      	lsls	r3, r3, #22
 800df8a:	d402      	bmi.n	800df92 <_fwrite_r+0xaa>
 800df8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df8e:	f000 f840 	bl	800e012 <__retarget_lock_release_recursive>
 800df92:	fbb6 f0f7 	udiv	r0, r6, r7
 800df96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df9a:	bf00      	nop
 800df9c:	0800fd40 	.word	0x0800fd40
 800dfa0:	0800fd60 	.word	0x0800fd60
 800dfa4:	0800fd20 	.word	0x0800fd20

0800dfa8 <fwrite>:
 800dfa8:	b507      	push	{r0, r1, r2, lr}
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	4613      	mov	r3, r2
 800dfae:	460a      	mov	r2, r1
 800dfb0:	4601      	mov	r1, r0
 800dfb2:	4803      	ldr	r0, [pc, #12]	; (800dfc0 <fwrite+0x18>)
 800dfb4:	6800      	ldr	r0, [r0, #0]
 800dfb6:	f7ff ff97 	bl	800dee8 <_fwrite_r>
 800dfba:	b003      	add	sp, #12
 800dfbc:	f85d fb04 	ldr.w	pc, [sp], #4
 800dfc0:	20000ad4 	.word	0x20000ad4

0800dfc4 <__libc_init_array>:
 800dfc4:	b570      	push	{r4, r5, r6, lr}
 800dfc6:	4d0d      	ldr	r5, [pc, #52]	; (800dffc <__libc_init_array+0x38>)
 800dfc8:	4c0d      	ldr	r4, [pc, #52]	; (800e000 <__libc_init_array+0x3c>)
 800dfca:	1b64      	subs	r4, r4, r5
 800dfcc:	10a4      	asrs	r4, r4, #2
 800dfce:	2600      	movs	r6, #0
 800dfd0:	42a6      	cmp	r6, r4
 800dfd2:	d109      	bne.n	800dfe8 <__libc_init_array+0x24>
 800dfd4:	4d0b      	ldr	r5, [pc, #44]	; (800e004 <__libc_init_array+0x40>)
 800dfd6:	4c0c      	ldr	r4, [pc, #48]	; (800e008 <__libc_init_array+0x44>)
 800dfd8:	f001 f928 	bl	800f22c <_init>
 800dfdc:	1b64      	subs	r4, r4, r5
 800dfde:	10a4      	asrs	r4, r4, #2
 800dfe0:	2600      	movs	r6, #0
 800dfe2:	42a6      	cmp	r6, r4
 800dfe4:	d105      	bne.n	800dff2 <__libc_init_array+0x2e>
 800dfe6:	bd70      	pop	{r4, r5, r6, pc}
 800dfe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfec:	4798      	blx	r3
 800dfee:	3601      	adds	r6, #1
 800dff0:	e7ee      	b.n	800dfd0 <__libc_init_array+0xc>
 800dff2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dff6:	4798      	blx	r3
 800dff8:	3601      	adds	r6, #1
 800dffa:	e7f2      	b.n	800dfe2 <__libc_init_array+0x1e>
 800dffc:	0800fdc0 	.word	0x0800fdc0
 800e000:	0800fdc0 	.word	0x0800fdc0
 800e004:	0800fdc0 	.word	0x0800fdc0
 800e008:	0800fdc4 	.word	0x0800fdc4

0800e00c <__retarget_lock_init_recursive>:
 800e00c:	4770      	bx	lr

0800e00e <__retarget_lock_close_recursive>:
 800e00e:	4770      	bx	lr

0800e010 <__retarget_lock_acquire_recursive>:
 800e010:	4770      	bx	lr

0800e012 <__retarget_lock_release_recursive>:
 800e012:	4770      	bx	lr

0800e014 <__swhatbuf_r>:
 800e014:	b570      	push	{r4, r5, r6, lr}
 800e016:	460e      	mov	r6, r1
 800e018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e01c:	2900      	cmp	r1, #0
 800e01e:	b096      	sub	sp, #88	; 0x58
 800e020:	4614      	mov	r4, r2
 800e022:	461d      	mov	r5, r3
 800e024:	da07      	bge.n	800e036 <__swhatbuf_r+0x22>
 800e026:	2300      	movs	r3, #0
 800e028:	602b      	str	r3, [r5, #0]
 800e02a:	89b3      	ldrh	r3, [r6, #12]
 800e02c:	061a      	lsls	r2, r3, #24
 800e02e:	d410      	bmi.n	800e052 <__swhatbuf_r+0x3e>
 800e030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e034:	e00e      	b.n	800e054 <__swhatbuf_r+0x40>
 800e036:	466a      	mov	r2, sp
 800e038:	f000 ff02 	bl	800ee40 <_fstat_r>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	dbf2      	blt.n	800e026 <__swhatbuf_r+0x12>
 800e040:	9a01      	ldr	r2, [sp, #4]
 800e042:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e046:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e04a:	425a      	negs	r2, r3
 800e04c:	415a      	adcs	r2, r3
 800e04e:	602a      	str	r2, [r5, #0]
 800e050:	e7ee      	b.n	800e030 <__swhatbuf_r+0x1c>
 800e052:	2340      	movs	r3, #64	; 0x40
 800e054:	2000      	movs	r0, #0
 800e056:	6023      	str	r3, [r4, #0]
 800e058:	b016      	add	sp, #88	; 0x58
 800e05a:	bd70      	pop	{r4, r5, r6, pc}

0800e05c <__smakebuf_r>:
 800e05c:	898b      	ldrh	r3, [r1, #12]
 800e05e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e060:	079d      	lsls	r5, r3, #30
 800e062:	4606      	mov	r6, r0
 800e064:	460c      	mov	r4, r1
 800e066:	d507      	bpl.n	800e078 <__smakebuf_r+0x1c>
 800e068:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	6123      	str	r3, [r4, #16]
 800e070:	2301      	movs	r3, #1
 800e072:	6163      	str	r3, [r4, #20]
 800e074:	b002      	add	sp, #8
 800e076:	bd70      	pop	{r4, r5, r6, pc}
 800e078:	ab01      	add	r3, sp, #4
 800e07a:	466a      	mov	r2, sp
 800e07c:	f7ff ffca 	bl	800e014 <__swhatbuf_r>
 800e080:	9900      	ldr	r1, [sp, #0]
 800e082:	4605      	mov	r5, r0
 800e084:	4630      	mov	r0, r6
 800e086:	f000 f89f 	bl	800e1c8 <_malloc_r>
 800e08a:	b948      	cbnz	r0, 800e0a0 <__smakebuf_r+0x44>
 800e08c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e090:	059a      	lsls	r2, r3, #22
 800e092:	d4ef      	bmi.n	800e074 <__smakebuf_r+0x18>
 800e094:	f023 0303 	bic.w	r3, r3, #3
 800e098:	f043 0302 	orr.w	r3, r3, #2
 800e09c:	81a3      	strh	r3, [r4, #12]
 800e09e:	e7e3      	b.n	800e068 <__smakebuf_r+0xc>
 800e0a0:	4b0d      	ldr	r3, [pc, #52]	; (800e0d8 <__smakebuf_r+0x7c>)
 800e0a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e0a4:	89a3      	ldrh	r3, [r4, #12]
 800e0a6:	6020      	str	r0, [r4, #0]
 800e0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0ac:	81a3      	strh	r3, [r4, #12]
 800e0ae:	9b00      	ldr	r3, [sp, #0]
 800e0b0:	6163      	str	r3, [r4, #20]
 800e0b2:	9b01      	ldr	r3, [sp, #4]
 800e0b4:	6120      	str	r0, [r4, #16]
 800e0b6:	b15b      	cbz	r3, 800e0d0 <__smakebuf_r+0x74>
 800e0b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0bc:	4630      	mov	r0, r6
 800e0be:	f000 fed1 	bl	800ee64 <_isatty_r>
 800e0c2:	b128      	cbz	r0, 800e0d0 <__smakebuf_r+0x74>
 800e0c4:	89a3      	ldrh	r3, [r4, #12]
 800e0c6:	f023 0303 	bic.w	r3, r3, #3
 800e0ca:	f043 0301 	orr.w	r3, r3, #1
 800e0ce:	81a3      	strh	r3, [r4, #12]
 800e0d0:	89a0      	ldrh	r0, [r4, #12]
 800e0d2:	4305      	orrs	r5, r0
 800e0d4:	81a5      	strh	r5, [r4, #12]
 800e0d6:	e7cd      	b.n	800e074 <__smakebuf_r+0x18>
 800e0d8:	0800d90d 	.word	0x0800d90d

0800e0dc <malloc>:
 800e0dc:	4b02      	ldr	r3, [pc, #8]	; (800e0e8 <malloc+0xc>)
 800e0de:	4601      	mov	r1, r0
 800e0e0:	6818      	ldr	r0, [r3, #0]
 800e0e2:	f000 b871 	b.w	800e1c8 <_malloc_r>
 800e0e6:	bf00      	nop
 800e0e8:	20000ad4 	.word	0x20000ad4

0800e0ec <free>:
 800e0ec:	4b02      	ldr	r3, [pc, #8]	; (800e0f8 <free+0xc>)
 800e0ee:	4601      	mov	r1, r0
 800e0f0:	6818      	ldr	r0, [r3, #0]
 800e0f2:	f000 b819 	b.w	800e128 <_free_r>
 800e0f6:	bf00      	nop
 800e0f8:	20000ad4 	.word	0x20000ad4

0800e0fc <memcpy>:
 800e0fc:	440a      	add	r2, r1
 800e0fe:	4291      	cmp	r1, r2
 800e100:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e104:	d100      	bne.n	800e108 <memcpy+0xc>
 800e106:	4770      	bx	lr
 800e108:	b510      	push	{r4, lr}
 800e10a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e10e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e112:	4291      	cmp	r1, r2
 800e114:	d1f9      	bne.n	800e10a <memcpy+0xe>
 800e116:	bd10      	pop	{r4, pc}

0800e118 <memset>:
 800e118:	4402      	add	r2, r0
 800e11a:	4603      	mov	r3, r0
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d100      	bne.n	800e122 <memset+0xa>
 800e120:	4770      	bx	lr
 800e122:	f803 1b01 	strb.w	r1, [r3], #1
 800e126:	e7f9      	b.n	800e11c <memset+0x4>

0800e128 <_free_r>:
 800e128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e12a:	2900      	cmp	r1, #0
 800e12c:	d048      	beq.n	800e1c0 <_free_r+0x98>
 800e12e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e132:	9001      	str	r0, [sp, #4]
 800e134:	2b00      	cmp	r3, #0
 800e136:	f1a1 0404 	sub.w	r4, r1, #4
 800e13a:	bfb8      	it	lt
 800e13c:	18e4      	addlt	r4, r4, r3
 800e13e:	f000 fecd 	bl	800eedc <__malloc_lock>
 800e142:	4a20      	ldr	r2, [pc, #128]	; (800e1c4 <_free_r+0x9c>)
 800e144:	9801      	ldr	r0, [sp, #4]
 800e146:	6813      	ldr	r3, [r2, #0]
 800e148:	4615      	mov	r5, r2
 800e14a:	b933      	cbnz	r3, 800e15a <_free_r+0x32>
 800e14c:	6063      	str	r3, [r4, #4]
 800e14e:	6014      	str	r4, [r2, #0]
 800e150:	b003      	add	sp, #12
 800e152:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e156:	f000 bec7 	b.w	800eee8 <__malloc_unlock>
 800e15a:	42a3      	cmp	r3, r4
 800e15c:	d90b      	bls.n	800e176 <_free_r+0x4e>
 800e15e:	6821      	ldr	r1, [r4, #0]
 800e160:	1862      	adds	r2, r4, r1
 800e162:	4293      	cmp	r3, r2
 800e164:	bf04      	itt	eq
 800e166:	681a      	ldreq	r2, [r3, #0]
 800e168:	685b      	ldreq	r3, [r3, #4]
 800e16a:	6063      	str	r3, [r4, #4]
 800e16c:	bf04      	itt	eq
 800e16e:	1852      	addeq	r2, r2, r1
 800e170:	6022      	streq	r2, [r4, #0]
 800e172:	602c      	str	r4, [r5, #0]
 800e174:	e7ec      	b.n	800e150 <_free_r+0x28>
 800e176:	461a      	mov	r2, r3
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	b10b      	cbz	r3, 800e180 <_free_r+0x58>
 800e17c:	42a3      	cmp	r3, r4
 800e17e:	d9fa      	bls.n	800e176 <_free_r+0x4e>
 800e180:	6811      	ldr	r1, [r2, #0]
 800e182:	1855      	adds	r5, r2, r1
 800e184:	42a5      	cmp	r5, r4
 800e186:	d10b      	bne.n	800e1a0 <_free_r+0x78>
 800e188:	6824      	ldr	r4, [r4, #0]
 800e18a:	4421      	add	r1, r4
 800e18c:	1854      	adds	r4, r2, r1
 800e18e:	42a3      	cmp	r3, r4
 800e190:	6011      	str	r1, [r2, #0]
 800e192:	d1dd      	bne.n	800e150 <_free_r+0x28>
 800e194:	681c      	ldr	r4, [r3, #0]
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	6053      	str	r3, [r2, #4]
 800e19a:	4421      	add	r1, r4
 800e19c:	6011      	str	r1, [r2, #0]
 800e19e:	e7d7      	b.n	800e150 <_free_r+0x28>
 800e1a0:	d902      	bls.n	800e1a8 <_free_r+0x80>
 800e1a2:	230c      	movs	r3, #12
 800e1a4:	6003      	str	r3, [r0, #0]
 800e1a6:	e7d3      	b.n	800e150 <_free_r+0x28>
 800e1a8:	6825      	ldr	r5, [r4, #0]
 800e1aa:	1961      	adds	r1, r4, r5
 800e1ac:	428b      	cmp	r3, r1
 800e1ae:	bf04      	itt	eq
 800e1b0:	6819      	ldreq	r1, [r3, #0]
 800e1b2:	685b      	ldreq	r3, [r3, #4]
 800e1b4:	6063      	str	r3, [r4, #4]
 800e1b6:	bf04      	itt	eq
 800e1b8:	1949      	addeq	r1, r1, r5
 800e1ba:	6021      	streq	r1, [r4, #0]
 800e1bc:	6054      	str	r4, [r2, #4]
 800e1be:	e7c7      	b.n	800e150 <_free_r+0x28>
 800e1c0:	b003      	add	sp, #12
 800e1c2:	bd30      	pop	{r4, r5, pc}
 800e1c4:	20005648 	.word	0x20005648

0800e1c8 <_malloc_r>:
 800e1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ca:	1ccd      	adds	r5, r1, #3
 800e1cc:	f025 0503 	bic.w	r5, r5, #3
 800e1d0:	3508      	adds	r5, #8
 800e1d2:	2d0c      	cmp	r5, #12
 800e1d4:	bf38      	it	cc
 800e1d6:	250c      	movcc	r5, #12
 800e1d8:	2d00      	cmp	r5, #0
 800e1da:	4606      	mov	r6, r0
 800e1dc:	db01      	blt.n	800e1e2 <_malloc_r+0x1a>
 800e1de:	42a9      	cmp	r1, r5
 800e1e0:	d903      	bls.n	800e1ea <_malloc_r+0x22>
 800e1e2:	230c      	movs	r3, #12
 800e1e4:	6033      	str	r3, [r6, #0]
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ea:	f000 fe77 	bl	800eedc <__malloc_lock>
 800e1ee:	4921      	ldr	r1, [pc, #132]	; (800e274 <_malloc_r+0xac>)
 800e1f0:	680a      	ldr	r2, [r1, #0]
 800e1f2:	4614      	mov	r4, r2
 800e1f4:	b99c      	cbnz	r4, 800e21e <_malloc_r+0x56>
 800e1f6:	4f20      	ldr	r7, [pc, #128]	; (800e278 <_malloc_r+0xb0>)
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	b923      	cbnz	r3, 800e206 <_malloc_r+0x3e>
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	4630      	mov	r0, r6
 800e200:	f000 fc5e 	bl	800eac0 <_sbrk_r>
 800e204:	6038      	str	r0, [r7, #0]
 800e206:	4629      	mov	r1, r5
 800e208:	4630      	mov	r0, r6
 800e20a:	f000 fc59 	bl	800eac0 <_sbrk_r>
 800e20e:	1c43      	adds	r3, r0, #1
 800e210:	d123      	bne.n	800e25a <_malloc_r+0x92>
 800e212:	230c      	movs	r3, #12
 800e214:	6033      	str	r3, [r6, #0]
 800e216:	4630      	mov	r0, r6
 800e218:	f000 fe66 	bl	800eee8 <__malloc_unlock>
 800e21c:	e7e3      	b.n	800e1e6 <_malloc_r+0x1e>
 800e21e:	6823      	ldr	r3, [r4, #0]
 800e220:	1b5b      	subs	r3, r3, r5
 800e222:	d417      	bmi.n	800e254 <_malloc_r+0x8c>
 800e224:	2b0b      	cmp	r3, #11
 800e226:	d903      	bls.n	800e230 <_malloc_r+0x68>
 800e228:	6023      	str	r3, [r4, #0]
 800e22a:	441c      	add	r4, r3
 800e22c:	6025      	str	r5, [r4, #0]
 800e22e:	e004      	b.n	800e23a <_malloc_r+0x72>
 800e230:	6863      	ldr	r3, [r4, #4]
 800e232:	42a2      	cmp	r2, r4
 800e234:	bf0c      	ite	eq
 800e236:	600b      	streq	r3, [r1, #0]
 800e238:	6053      	strne	r3, [r2, #4]
 800e23a:	4630      	mov	r0, r6
 800e23c:	f000 fe54 	bl	800eee8 <__malloc_unlock>
 800e240:	f104 000b 	add.w	r0, r4, #11
 800e244:	1d23      	adds	r3, r4, #4
 800e246:	f020 0007 	bic.w	r0, r0, #7
 800e24a:	1ac2      	subs	r2, r0, r3
 800e24c:	d0cc      	beq.n	800e1e8 <_malloc_r+0x20>
 800e24e:	1a1b      	subs	r3, r3, r0
 800e250:	50a3      	str	r3, [r4, r2]
 800e252:	e7c9      	b.n	800e1e8 <_malloc_r+0x20>
 800e254:	4622      	mov	r2, r4
 800e256:	6864      	ldr	r4, [r4, #4]
 800e258:	e7cc      	b.n	800e1f4 <_malloc_r+0x2c>
 800e25a:	1cc4      	adds	r4, r0, #3
 800e25c:	f024 0403 	bic.w	r4, r4, #3
 800e260:	42a0      	cmp	r0, r4
 800e262:	d0e3      	beq.n	800e22c <_malloc_r+0x64>
 800e264:	1a21      	subs	r1, r4, r0
 800e266:	4630      	mov	r0, r6
 800e268:	f000 fc2a 	bl	800eac0 <_sbrk_r>
 800e26c:	3001      	adds	r0, #1
 800e26e:	d1dd      	bne.n	800e22c <_malloc_r+0x64>
 800e270:	e7cf      	b.n	800e212 <_malloc_r+0x4a>
 800e272:	bf00      	nop
 800e274:	20005648 	.word	0x20005648
 800e278:	2000564c 	.word	0x2000564c

0800e27c <__sfputc_r>:
 800e27c:	6893      	ldr	r3, [r2, #8]
 800e27e:	3b01      	subs	r3, #1
 800e280:	2b00      	cmp	r3, #0
 800e282:	b410      	push	{r4}
 800e284:	6093      	str	r3, [r2, #8]
 800e286:	da08      	bge.n	800e29a <__sfputc_r+0x1e>
 800e288:	6994      	ldr	r4, [r2, #24]
 800e28a:	42a3      	cmp	r3, r4
 800e28c:	db01      	blt.n	800e292 <__sfputc_r+0x16>
 800e28e:	290a      	cmp	r1, #10
 800e290:	d103      	bne.n	800e29a <__sfputc_r+0x1e>
 800e292:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e296:	f000 bcbb 	b.w	800ec10 <__swbuf_r>
 800e29a:	6813      	ldr	r3, [r2, #0]
 800e29c:	1c58      	adds	r0, r3, #1
 800e29e:	6010      	str	r0, [r2, #0]
 800e2a0:	7019      	strb	r1, [r3, #0]
 800e2a2:	4608      	mov	r0, r1
 800e2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2a8:	4770      	bx	lr

0800e2aa <__sfputs_r>:
 800e2aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	460f      	mov	r7, r1
 800e2b0:	4614      	mov	r4, r2
 800e2b2:	18d5      	adds	r5, r2, r3
 800e2b4:	42ac      	cmp	r4, r5
 800e2b6:	d101      	bne.n	800e2bc <__sfputs_r+0x12>
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	e007      	b.n	800e2cc <__sfputs_r+0x22>
 800e2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2c0:	463a      	mov	r2, r7
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	f7ff ffda 	bl	800e27c <__sfputc_r>
 800e2c8:	1c43      	adds	r3, r0, #1
 800e2ca:	d1f3      	bne.n	800e2b4 <__sfputs_r+0xa>
 800e2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e2d0 <_vfiprintf_r>:
 800e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d4:	460d      	mov	r5, r1
 800e2d6:	b09d      	sub	sp, #116	; 0x74
 800e2d8:	4614      	mov	r4, r2
 800e2da:	4698      	mov	r8, r3
 800e2dc:	4606      	mov	r6, r0
 800e2de:	b118      	cbz	r0, 800e2e8 <_vfiprintf_r+0x18>
 800e2e0:	6983      	ldr	r3, [r0, #24]
 800e2e2:	b90b      	cbnz	r3, 800e2e8 <_vfiprintf_r+0x18>
 800e2e4:	f7ff fb46 	bl	800d974 <__sinit>
 800e2e8:	4b89      	ldr	r3, [pc, #548]	; (800e510 <_vfiprintf_r+0x240>)
 800e2ea:	429d      	cmp	r5, r3
 800e2ec:	d11b      	bne.n	800e326 <_vfiprintf_r+0x56>
 800e2ee:	6875      	ldr	r5, [r6, #4]
 800e2f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2f2:	07d9      	lsls	r1, r3, #31
 800e2f4:	d405      	bmi.n	800e302 <_vfiprintf_r+0x32>
 800e2f6:	89ab      	ldrh	r3, [r5, #12]
 800e2f8:	059a      	lsls	r2, r3, #22
 800e2fa:	d402      	bmi.n	800e302 <_vfiprintf_r+0x32>
 800e2fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2fe:	f7ff fe87 	bl	800e010 <__retarget_lock_acquire_recursive>
 800e302:	89ab      	ldrh	r3, [r5, #12]
 800e304:	071b      	lsls	r3, r3, #28
 800e306:	d501      	bpl.n	800e30c <_vfiprintf_r+0x3c>
 800e308:	692b      	ldr	r3, [r5, #16]
 800e30a:	b9eb      	cbnz	r3, 800e348 <_vfiprintf_r+0x78>
 800e30c:	4629      	mov	r1, r5
 800e30e:	4630      	mov	r0, r6
 800e310:	f000 fce2 	bl	800ecd8 <__swsetup_r>
 800e314:	b1c0      	cbz	r0, 800e348 <_vfiprintf_r+0x78>
 800e316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e318:	07dc      	lsls	r4, r3, #31
 800e31a:	d50e      	bpl.n	800e33a <_vfiprintf_r+0x6a>
 800e31c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e320:	b01d      	add	sp, #116	; 0x74
 800e322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e326:	4b7b      	ldr	r3, [pc, #492]	; (800e514 <_vfiprintf_r+0x244>)
 800e328:	429d      	cmp	r5, r3
 800e32a:	d101      	bne.n	800e330 <_vfiprintf_r+0x60>
 800e32c:	68b5      	ldr	r5, [r6, #8]
 800e32e:	e7df      	b.n	800e2f0 <_vfiprintf_r+0x20>
 800e330:	4b79      	ldr	r3, [pc, #484]	; (800e518 <_vfiprintf_r+0x248>)
 800e332:	429d      	cmp	r5, r3
 800e334:	bf08      	it	eq
 800e336:	68f5      	ldreq	r5, [r6, #12]
 800e338:	e7da      	b.n	800e2f0 <_vfiprintf_r+0x20>
 800e33a:	89ab      	ldrh	r3, [r5, #12]
 800e33c:	0598      	lsls	r0, r3, #22
 800e33e:	d4ed      	bmi.n	800e31c <_vfiprintf_r+0x4c>
 800e340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e342:	f7ff fe66 	bl	800e012 <__retarget_lock_release_recursive>
 800e346:	e7e9      	b.n	800e31c <_vfiprintf_r+0x4c>
 800e348:	2300      	movs	r3, #0
 800e34a:	9309      	str	r3, [sp, #36]	; 0x24
 800e34c:	2320      	movs	r3, #32
 800e34e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e352:	f8cd 800c 	str.w	r8, [sp, #12]
 800e356:	2330      	movs	r3, #48	; 0x30
 800e358:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e51c <_vfiprintf_r+0x24c>
 800e35c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e360:	f04f 0901 	mov.w	r9, #1
 800e364:	4623      	mov	r3, r4
 800e366:	469a      	mov	sl, r3
 800e368:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e36c:	b10a      	cbz	r2, 800e372 <_vfiprintf_r+0xa2>
 800e36e:	2a25      	cmp	r2, #37	; 0x25
 800e370:	d1f9      	bne.n	800e366 <_vfiprintf_r+0x96>
 800e372:	ebba 0b04 	subs.w	fp, sl, r4
 800e376:	d00b      	beq.n	800e390 <_vfiprintf_r+0xc0>
 800e378:	465b      	mov	r3, fp
 800e37a:	4622      	mov	r2, r4
 800e37c:	4629      	mov	r1, r5
 800e37e:	4630      	mov	r0, r6
 800e380:	f7ff ff93 	bl	800e2aa <__sfputs_r>
 800e384:	3001      	adds	r0, #1
 800e386:	f000 80aa 	beq.w	800e4de <_vfiprintf_r+0x20e>
 800e38a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e38c:	445a      	add	r2, fp
 800e38e:	9209      	str	r2, [sp, #36]	; 0x24
 800e390:	f89a 3000 	ldrb.w	r3, [sl]
 800e394:	2b00      	cmp	r3, #0
 800e396:	f000 80a2 	beq.w	800e4de <_vfiprintf_r+0x20e>
 800e39a:	2300      	movs	r3, #0
 800e39c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3a4:	f10a 0a01 	add.w	sl, sl, #1
 800e3a8:	9304      	str	r3, [sp, #16]
 800e3aa:	9307      	str	r3, [sp, #28]
 800e3ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3b0:	931a      	str	r3, [sp, #104]	; 0x68
 800e3b2:	4654      	mov	r4, sl
 800e3b4:	2205      	movs	r2, #5
 800e3b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ba:	4858      	ldr	r0, [pc, #352]	; (800e51c <_vfiprintf_r+0x24c>)
 800e3bc:	f7f1 ff40 	bl	8000240 <memchr>
 800e3c0:	9a04      	ldr	r2, [sp, #16]
 800e3c2:	b9d8      	cbnz	r0, 800e3fc <_vfiprintf_r+0x12c>
 800e3c4:	06d1      	lsls	r1, r2, #27
 800e3c6:	bf44      	itt	mi
 800e3c8:	2320      	movmi	r3, #32
 800e3ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3ce:	0713      	lsls	r3, r2, #28
 800e3d0:	bf44      	itt	mi
 800e3d2:	232b      	movmi	r3, #43	; 0x2b
 800e3d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e3dc:	2b2a      	cmp	r3, #42	; 0x2a
 800e3de:	d015      	beq.n	800e40c <_vfiprintf_r+0x13c>
 800e3e0:	9a07      	ldr	r2, [sp, #28]
 800e3e2:	4654      	mov	r4, sl
 800e3e4:	2000      	movs	r0, #0
 800e3e6:	f04f 0c0a 	mov.w	ip, #10
 800e3ea:	4621      	mov	r1, r4
 800e3ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3f0:	3b30      	subs	r3, #48	; 0x30
 800e3f2:	2b09      	cmp	r3, #9
 800e3f4:	d94e      	bls.n	800e494 <_vfiprintf_r+0x1c4>
 800e3f6:	b1b0      	cbz	r0, 800e426 <_vfiprintf_r+0x156>
 800e3f8:	9207      	str	r2, [sp, #28]
 800e3fa:	e014      	b.n	800e426 <_vfiprintf_r+0x156>
 800e3fc:	eba0 0308 	sub.w	r3, r0, r8
 800e400:	fa09 f303 	lsl.w	r3, r9, r3
 800e404:	4313      	orrs	r3, r2
 800e406:	9304      	str	r3, [sp, #16]
 800e408:	46a2      	mov	sl, r4
 800e40a:	e7d2      	b.n	800e3b2 <_vfiprintf_r+0xe2>
 800e40c:	9b03      	ldr	r3, [sp, #12]
 800e40e:	1d19      	adds	r1, r3, #4
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	9103      	str	r1, [sp, #12]
 800e414:	2b00      	cmp	r3, #0
 800e416:	bfbb      	ittet	lt
 800e418:	425b      	neglt	r3, r3
 800e41a:	f042 0202 	orrlt.w	r2, r2, #2
 800e41e:	9307      	strge	r3, [sp, #28]
 800e420:	9307      	strlt	r3, [sp, #28]
 800e422:	bfb8      	it	lt
 800e424:	9204      	strlt	r2, [sp, #16]
 800e426:	7823      	ldrb	r3, [r4, #0]
 800e428:	2b2e      	cmp	r3, #46	; 0x2e
 800e42a:	d10c      	bne.n	800e446 <_vfiprintf_r+0x176>
 800e42c:	7863      	ldrb	r3, [r4, #1]
 800e42e:	2b2a      	cmp	r3, #42	; 0x2a
 800e430:	d135      	bne.n	800e49e <_vfiprintf_r+0x1ce>
 800e432:	9b03      	ldr	r3, [sp, #12]
 800e434:	1d1a      	adds	r2, r3, #4
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	9203      	str	r2, [sp, #12]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	bfb8      	it	lt
 800e43e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e442:	3402      	adds	r4, #2
 800e444:	9305      	str	r3, [sp, #20]
 800e446:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e52c <_vfiprintf_r+0x25c>
 800e44a:	7821      	ldrb	r1, [r4, #0]
 800e44c:	2203      	movs	r2, #3
 800e44e:	4650      	mov	r0, sl
 800e450:	f7f1 fef6 	bl	8000240 <memchr>
 800e454:	b140      	cbz	r0, 800e468 <_vfiprintf_r+0x198>
 800e456:	2340      	movs	r3, #64	; 0x40
 800e458:	eba0 000a 	sub.w	r0, r0, sl
 800e45c:	fa03 f000 	lsl.w	r0, r3, r0
 800e460:	9b04      	ldr	r3, [sp, #16]
 800e462:	4303      	orrs	r3, r0
 800e464:	3401      	adds	r4, #1
 800e466:	9304      	str	r3, [sp, #16]
 800e468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e46c:	482c      	ldr	r0, [pc, #176]	; (800e520 <_vfiprintf_r+0x250>)
 800e46e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e472:	2206      	movs	r2, #6
 800e474:	f7f1 fee4 	bl	8000240 <memchr>
 800e478:	2800      	cmp	r0, #0
 800e47a:	d03f      	beq.n	800e4fc <_vfiprintf_r+0x22c>
 800e47c:	4b29      	ldr	r3, [pc, #164]	; (800e524 <_vfiprintf_r+0x254>)
 800e47e:	bb1b      	cbnz	r3, 800e4c8 <_vfiprintf_r+0x1f8>
 800e480:	9b03      	ldr	r3, [sp, #12]
 800e482:	3307      	adds	r3, #7
 800e484:	f023 0307 	bic.w	r3, r3, #7
 800e488:	3308      	adds	r3, #8
 800e48a:	9303      	str	r3, [sp, #12]
 800e48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e48e:	443b      	add	r3, r7
 800e490:	9309      	str	r3, [sp, #36]	; 0x24
 800e492:	e767      	b.n	800e364 <_vfiprintf_r+0x94>
 800e494:	fb0c 3202 	mla	r2, ip, r2, r3
 800e498:	460c      	mov	r4, r1
 800e49a:	2001      	movs	r0, #1
 800e49c:	e7a5      	b.n	800e3ea <_vfiprintf_r+0x11a>
 800e49e:	2300      	movs	r3, #0
 800e4a0:	3401      	adds	r4, #1
 800e4a2:	9305      	str	r3, [sp, #20]
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	f04f 0c0a 	mov.w	ip, #10
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4b0:	3a30      	subs	r2, #48	; 0x30
 800e4b2:	2a09      	cmp	r2, #9
 800e4b4:	d903      	bls.n	800e4be <_vfiprintf_r+0x1ee>
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d0c5      	beq.n	800e446 <_vfiprintf_r+0x176>
 800e4ba:	9105      	str	r1, [sp, #20]
 800e4bc:	e7c3      	b.n	800e446 <_vfiprintf_r+0x176>
 800e4be:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	e7f0      	b.n	800e4aa <_vfiprintf_r+0x1da>
 800e4c8:	ab03      	add	r3, sp, #12
 800e4ca:	9300      	str	r3, [sp, #0]
 800e4cc:	462a      	mov	r2, r5
 800e4ce:	4b16      	ldr	r3, [pc, #88]	; (800e528 <_vfiprintf_r+0x258>)
 800e4d0:	a904      	add	r1, sp, #16
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f3af 8000 	nop.w
 800e4d8:	4607      	mov	r7, r0
 800e4da:	1c78      	adds	r0, r7, #1
 800e4dc:	d1d6      	bne.n	800e48c <_vfiprintf_r+0x1bc>
 800e4de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4e0:	07d9      	lsls	r1, r3, #31
 800e4e2:	d405      	bmi.n	800e4f0 <_vfiprintf_r+0x220>
 800e4e4:	89ab      	ldrh	r3, [r5, #12]
 800e4e6:	059a      	lsls	r2, r3, #22
 800e4e8:	d402      	bmi.n	800e4f0 <_vfiprintf_r+0x220>
 800e4ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4ec:	f7ff fd91 	bl	800e012 <__retarget_lock_release_recursive>
 800e4f0:	89ab      	ldrh	r3, [r5, #12]
 800e4f2:	065b      	lsls	r3, r3, #25
 800e4f4:	f53f af12 	bmi.w	800e31c <_vfiprintf_r+0x4c>
 800e4f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4fa:	e711      	b.n	800e320 <_vfiprintf_r+0x50>
 800e4fc:	ab03      	add	r3, sp, #12
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	462a      	mov	r2, r5
 800e502:	4b09      	ldr	r3, [pc, #36]	; (800e528 <_vfiprintf_r+0x258>)
 800e504:	a904      	add	r1, sp, #16
 800e506:	4630      	mov	r0, r6
 800e508:	f000 f880 	bl	800e60c <_printf_i>
 800e50c:	e7e4      	b.n	800e4d8 <_vfiprintf_r+0x208>
 800e50e:	bf00      	nop
 800e510:	0800fd40 	.word	0x0800fd40
 800e514:	0800fd60 	.word	0x0800fd60
 800e518:	0800fd20 	.word	0x0800fd20
 800e51c:	0800fd84 	.word	0x0800fd84
 800e520:	0800fd8e 	.word	0x0800fd8e
 800e524:	00000000 	.word	0x00000000
 800e528:	0800e2ab 	.word	0x0800e2ab
 800e52c:	0800fd8a 	.word	0x0800fd8a

0800e530 <_printf_common>:
 800e530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e534:	4616      	mov	r6, r2
 800e536:	4699      	mov	r9, r3
 800e538:	688a      	ldr	r2, [r1, #8]
 800e53a:	690b      	ldr	r3, [r1, #16]
 800e53c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e540:	4293      	cmp	r3, r2
 800e542:	bfb8      	it	lt
 800e544:	4613      	movlt	r3, r2
 800e546:	6033      	str	r3, [r6, #0]
 800e548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e54c:	4607      	mov	r7, r0
 800e54e:	460c      	mov	r4, r1
 800e550:	b10a      	cbz	r2, 800e556 <_printf_common+0x26>
 800e552:	3301      	adds	r3, #1
 800e554:	6033      	str	r3, [r6, #0]
 800e556:	6823      	ldr	r3, [r4, #0]
 800e558:	0699      	lsls	r1, r3, #26
 800e55a:	bf42      	ittt	mi
 800e55c:	6833      	ldrmi	r3, [r6, #0]
 800e55e:	3302      	addmi	r3, #2
 800e560:	6033      	strmi	r3, [r6, #0]
 800e562:	6825      	ldr	r5, [r4, #0]
 800e564:	f015 0506 	ands.w	r5, r5, #6
 800e568:	d106      	bne.n	800e578 <_printf_common+0x48>
 800e56a:	f104 0a19 	add.w	sl, r4, #25
 800e56e:	68e3      	ldr	r3, [r4, #12]
 800e570:	6832      	ldr	r2, [r6, #0]
 800e572:	1a9b      	subs	r3, r3, r2
 800e574:	42ab      	cmp	r3, r5
 800e576:	dc26      	bgt.n	800e5c6 <_printf_common+0x96>
 800e578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e57c:	1e13      	subs	r3, r2, #0
 800e57e:	6822      	ldr	r2, [r4, #0]
 800e580:	bf18      	it	ne
 800e582:	2301      	movne	r3, #1
 800e584:	0692      	lsls	r2, r2, #26
 800e586:	d42b      	bmi.n	800e5e0 <_printf_common+0xb0>
 800e588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e58c:	4649      	mov	r1, r9
 800e58e:	4638      	mov	r0, r7
 800e590:	47c0      	blx	r8
 800e592:	3001      	adds	r0, #1
 800e594:	d01e      	beq.n	800e5d4 <_printf_common+0xa4>
 800e596:	6823      	ldr	r3, [r4, #0]
 800e598:	68e5      	ldr	r5, [r4, #12]
 800e59a:	6832      	ldr	r2, [r6, #0]
 800e59c:	f003 0306 	and.w	r3, r3, #6
 800e5a0:	2b04      	cmp	r3, #4
 800e5a2:	bf08      	it	eq
 800e5a4:	1aad      	subeq	r5, r5, r2
 800e5a6:	68a3      	ldr	r3, [r4, #8]
 800e5a8:	6922      	ldr	r2, [r4, #16]
 800e5aa:	bf0c      	ite	eq
 800e5ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5b0:	2500      	movne	r5, #0
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	bfc4      	itt	gt
 800e5b6:	1a9b      	subgt	r3, r3, r2
 800e5b8:	18ed      	addgt	r5, r5, r3
 800e5ba:	2600      	movs	r6, #0
 800e5bc:	341a      	adds	r4, #26
 800e5be:	42b5      	cmp	r5, r6
 800e5c0:	d11a      	bne.n	800e5f8 <_printf_common+0xc8>
 800e5c2:	2000      	movs	r0, #0
 800e5c4:	e008      	b.n	800e5d8 <_printf_common+0xa8>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	4652      	mov	r2, sl
 800e5ca:	4649      	mov	r1, r9
 800e5cc:	4638      	mov	r0, r7
 800e5ce:	47c0      	blx	r8
 800e5d0:	3001      	adds	r0, #1
 800e5d2:	d103      	bne.n	800e5dc <_printf_common+0xac>
 800e5d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5dc:	3501      	adds	r5, #1
 800e5de:	e7c6      	b.n	800e56e <_printf_common+0x3e>
 800e5e0:	18e1      	adds	r1, r4, r3
 800e5e2:	1c5a      	adds	r2, r3, #1
 800e5e4:	2030      	movs	r0, #48	; 0x30
 800e5e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5ea:	4422      	add	r2, r4
 800e5ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5f4:	3302      	adds	r3, #2
 800e5f6:	e7c7      	b.n	800e588 <_printf_common+0x58>
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	4622      	mov	r2, r4
 800e5fc:	4649      	mov	r1, r9
 800e5fe:	4638      	mov	r0, r7
 800e600:	47c0      	blx	r8
 800e602:	3001      	adds	r0, #1
 800e604:	d0e6      	beq.n	800e5d4 <_printf_common+0xa4>
 800e606:	3601      	adds	r6, #1
 800e608:	e7d9      	b.n	800e5be <_printf_common+0x8e>
	...

0800e60c <_printf_i>:
 800e60c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e610:	460c      	mov	r4, r1
 800e612:	4691      	mov	r9, r2
 800e614:	7e27      	ldrb	r7, [r4, #24]
 800e616:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e618:	2f78      	cmp	r7, #120	; 0x78
 800e61a:	4680      	mov	r8, r0
 800e61c:	469a      	mov	sl, r3
 800e61e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e622:	d807      	bhi.n	800e634 <_printf_i+0x28>
 800e624:	2f62      	cmp	r7, #98	; 0x62
 800e626:	d80a      	bhi.n	800e63e <_printf_i+0x32>
 800e628:	2f00      	cmp	r7, #0
 800e62a:	f000 80d8 	beq.w	800e7de <_printf_i+0x1d2>
 800e62e:	2f58      	cmp	r7, #88	; 0x58
 800e630:	f000 80a3 	beq.w	800e77a <_printf_i+0x16e>
 800e634:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e63c:	e03a      	b.n	800e6b4 <_printf_i+0xa8>
 800e63e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e642:	2b15      	cmp	r3, #21
 800e644:	d8f6      	bhi.n	800e634 <_printf_i+0x28>
 800e646:	a001      	add	r0, pc, #4	; (adr r0, 800e64c <_printf_i+0x40>)
 800e648:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e64c:	0800e6a5 	.word	0x0800e6a5
 800e650:	0800e6b9 	.word	0x0800e6b9
 800e654:	0800e635 	.word	0x0800e635
 800e658:	0800e635 	.word	0x0800e635
 800e65c:	0800e635 	.word	0x0800e635
 800e660:	0800e635 	.word	0x0800e635
 800e664:	0800e6b9 	.word	0x0800e6b9
 800e668:	0800e635 	.word	0x0800e635
 800e66c:	0800e635 	.word	0x0800e635
 800e670:	0800e635 	.word	0x0800e635
 800e674:	0800e635 	.word	0x0800e635
 800e678:	0800e7c5 	.word	0x0800e7c5
 800e67c:	0800e6e9 	.word	0x0800e6e9
 800e680:	0800e7a7 	.word	0x0800e7a7
 800e684:	0800e635 	.word	0x0800e635
 800e688:	0800e635 	.word	0x0800e635
 800e68c:	0800e7e7 	.word	0x0800e7e7
 800e690:	0800e635 	.word	0x0800e635
 800e694:	0800e6e9 	.word	0x0800e6e9
 800e698:	0800e635 	.word	0x0800e635
 800e69c:	0800e635 	.word	0x0800e635
 800e6a0:	0800e7af 	.word	0x0800e7af
 800e6a4:	680b      	ldr	r3, [r1, #0]
 800e6a6:	1d1a      	adds	r2, r3, #4
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	600a      	str	r2, [r1, #0]
 800e6ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e6b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	e0a3      	b.n	800e800 <_printf_i+0x1f4>
 800e6b8:	6825      	ldr	r5, [r4, #0]
 800e6ba:	6808      	ldr	r0, [r1, #0]
 800e6bc:	062e      	lsls	r6, r5, #24
 800e6be:	f100 0304 	add.w	r3, r0, #4
 800e6c2:	d50a      	bpl.n	800e6da <_printf_i+0xce>
 800e6c4:	6805      	ldr	r5, [r0, #0]
 800e6c6:	600b      	str	r3, [r1, #0]
 800e6c8:	2d00      	cmp	r5, #0
 800e6ca:	da03      	bge.n	800e6d4 <_printf_i+0xc8>
 800e6cc:	232d      	movs	r3, #45	; 0x2d
 800e6ce:	426d      	negs	r5, r5
 800e6d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6d4:	485e      	ldr	r0, [pc, #376]	; (800e850 <_printf_i+0x244>)
 800e6d6:	230a      	movs	r3, #10
 800e6d8:	e019      	b.n	800e70e <_printf_i+0x102>
 800e6da:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e6de:	6805      	ldr	r5, [r0, #0]
 800e6e0:	600b      	str	r3, [r1, #0]
 800e6e2:	bf18      	it	ne
 800e6e4:	b22d      	sxthne	r5, r5
 800e6e6:	e7ef      	b.n	800e6c8 <_printf_i+0xbc>
 800e6e8:	680b      	ldr	r3, [r1, #0]
 800e6ea:	6825      	ldr	r5, [r4, #0]
 800e6ec:	1d18      	adds	r0, r3, #4
 800e6ee:	6008      	str	r0, [r1, #0]
 800e6f0:	0628      	lsls	r0, r5, #24
 800e6f2:	d501      	bpl.n	800e6f8 <_printf_i+0xec>
 800e6f4:	681d      	ldr	r5, [r3, #0]
 800e6f6:	e002      	b.n	800e6fe <_printf_i+0xf2>
 800e6f8:	0669      	lsls	r1, r5, #25
 800e6fa:	d5fb      	bpl.n	800e6f4 <_printf_i+0xe8>
 800e6fc:	881d      	ldrh	r5, [r3, #0]
 800e6fe:	4854      	ldr	r0, [pc, #336]	; (800e850 <_printf_i+0x244>)
 800e700:	2f6f      	cmp	r7, #111	; 0x6f
 800e702:	bf0c      	ite	eq
 800e704:	2308      	moveq	r3, #8
 800e706:	230a      	movne	r3, #10
 800e708:	2100      	movs	r1, #0
 800e70a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e70e:	6866      	ldr	r6, [r4, #4]
 800e710:	60a6      	str	r6, [r4, #8]
 800e712:	2e00      	cmp	r6, #0
 800e714:	bfa2      	ittt	ge
 800e716:	6821      	ldrge	r1, [r4, #0]
 800e718:	f021 0104 	bicge.w	r1, r1, #4
 800e71c:	6021      	strge	r1, [r4, #0]
 800e71e:	b90d      	cbnz	r5, 800e724 <_printf_i+0x118>
 800e720:	2e00      	cmp	r6, #0
 800e722:	d04d      	beq.n	800e7c0 <_printf_i+0x1b4>
 800e724:	4616      	mov	r6, r2
 800e726:	fbb5 f1f3 	udiv	r1, r5, r3
 800e72a:	fb03 5711 	mls	r7, r3, r1, r5
 800e72e:	5dc7      	ldrb	r7, [r0, r7]
 800e730:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e734:	462f      	mov	r7, r5
 800e736:	42bb      	cmp	r3, r7
 800e738:	460d      	mov	r5, r1
 800e73a:	d9f4      	bls.n	800e726 <_printf_i+0x11a>
 800e73c:	2b08      	cmp	r3, #8
 800e73e:	d10b      	bne.n	800e758 <_printf_i+0x14c>
 800e740:	6823      	ldr	r3, [r4, #0]
 800e742:	07df      	lsls	r7, r3, #31
 800e744:	d508      	bpl.n	800e758 <_printf_i+0x14c>
 800e746:	6923      	ldr	r3, [r4, #16]
 800e748:	6861      	ldr	r1, [r4, #4]
 800e74a:	4299      	cmp	r1, r3
 800e74c:	bfde      	ittt	le
 800e74e:	2330      	movle	r3, #48	; 0x30
 800e750:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e754:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800e758:	1b92      	subs	r2, r2, r6
 800e75a:	6122      	str	r2, [r4, #16]
 800e75c:	f8cd a000 	str.w	sl, [sp]
 800e760:	464b      	mov	r3, r9
 800e762:	aa03      	add	r2, sp, #12
 800e764:	4621      	mov	r1, r4
 800e766:	4640      	mov	r0, r8
 800e768:	f7ff fee2 	bl	800e530 <_printf_common>
 800e76c:	3001      	adds	r0, #1
 800e76e:	d14c      	bne.n	800e80a <_printf_i+0x1fe>
 800e770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e774:	b004      	add	sp, #16
 800e776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e77a:	4835      	ldr	r0, [pc, #212]	; (800e850 <_printf_i+0x244>)
 800e77c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e780:	6823      	ldr	r3, [r4, #0]
 800e782:	680e      	ldr	r6, [r1, #0]
 800e784:	061f      	lsls	r7, r3, #24
 800e786:	f856 5b04 	ldr.w	r5, [r6], #4
 800e78a:	600e      	str	r6, [r1, #0]
 800e78c:	d514      	bpl.n	800e7b8 <_printf_i+0x1ac>
 800e78e:	07d9      	lsls	r1, r3, #31
 800e790:	bf44      	itt	mi
 800e792:	f043 0320 	orrmi.w	r3, r3, #32
 800e796:	6023      	strmi	r3, [r4, #0]
 800e798:	b91d      	cbnz	r5, 800e7a2 <_printf_i+0x196>
 800e79a:	6823      	ldr	r3, [r4, #0]
 800e79c:	f023 0320 	bic.w	r3, r3, #32
 800e7a0:	6023      	str	r3, [r4, #0]
 800e7a2:	2310      	movs	r3, #16
 800e7a4:	e7b0      	b.n	800e708 <_printf_i+0xfc>
 800e7a6:	6823      	ldr	r3, [r4, #0]
 800e7a8:	f043 0320 	orr.w	r3, r3, #32
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	2378      	movs	r3, #120	; 0x78
 800e7b0:	4828      	ldr	r0, [pc, #160]	; (800e854 <_printf_i+0x248>)
 800e7b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e7b6:	e7e3      	b.n	800e780 <_printf_i+0x174>
 800e7b8:	065e      	lsls	r6, r3, #25
 800e7ba:	bf48      	it	mi
 800e7bc:	b2ad      	uxthmi	r5, r5
 800e7be:	e7e6      	b.n	800e78e <_printf_i+0x182>
 800e7c0:	4616      	mov	r6, r2
 800e7c2:	e7bb      	b.n	800e73c <_printf_i+0x130>
 800e7c4:	680b      	ldr	r3, [r1, #0]
 800e7c6:	6826      	ldr	r6, [r4, #0]
 800e7c8:	6960      	ldr	r0, [r4, #20]
 800e7ca:	1d1d      	adds	r5, r3, #4
 800e7cc:	600d      	str	r5, [r1, #0]
 800e7ce:	0635      	lsls	r5, r6, #24
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	d501      	bpl.n	800e7d8 <_printf_i+0x1cc>
 800e7d4:	6018      	str	r0, [r3, #0]
 800e7d6:	e002      	b.n	800e7de <_printf_i+0x1d2>
 800e7d8:	0671      	lsls	r1, r6, #25
 800e7da:	d5fb      	bpl.n	800e7d4 <_printf_i+0x1c8>
 800e7dc:	8018      	strh	r0, [r3, #0]
 800e7de:	2300      	movs	r3, #0
 800e7e0:	6123      	str	r3, [r4, #16]
 800e7e2:	4616      	mov	r6, r2
 800e7e4:	e7ba      	b.n	800e75c <_printf_i+0x150>
 800e7e6:	680b      	ldr	r3, [r1, #0]
 800e7e8:	1d1a      	adds	r2, r3, #4
 800e7ea:	600a      	str	r2, [r1, #0]
 800e7ec:	681e      	ldr	r6, [r3, #0]
 800e7ee:	6862      	ldr	r2, [r4, #4]
 800e7f0:	2100      	movs	r1, #0
 800e7f2:	4630      	mov	r0, r6
 800e7f4:	f7f1 fd24 	bl	8000240 <memchr>
 800e7f8:	b108      	cbz	r0, 800e7fe <_printf_i+0x1f2>
 800e7fa:	1b80      	subs	r0, r0, r6
 800e7fc:	6060      	str	r0, [r4, #4]
 800e7fe:	6863      	ldr	r3, [r4, #4]
 800e800:	6123      	str	r3, [r4, #16]
 800e802:	2300      	movs	r3, #0
 800e804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e808:	e7a8      	b.n	800e75c <_printf_i+0x150>
 800e80a:	6923      	ldr	r3, [r4, #16]
 800e80c:	4632      	mov	r2, r6
 800e80e:	4649      	mov	r1, r9
 800e810:	4640      	mov	r0, r8
 800e812:	47d0      	blx	sl
 800e814:	3001      	adds	r0, #1
 800e816:	d0ab      	beq.n	800e770 <_printf_i+0x164>
 800e818:	6823      	ldr	r3, [r4, #0]
 800e81a:	079b      	lsls	r3, r3, #30
 800e81c:	d413      	bmi.n	800e846 <_printf_i+0x23a>
 800e81e:	68e0      	ldr	r0, [r4, #12]
 800e820:	9b03      	ldr	r3, [sp, #12]
 800e822:	4298      	cmp	r0, r3
 800e824:	bfb8      	it	lt
 800e826:	4618      	movlt	r0, r3
 800e828:	e7a4      	b.n	800e774 <_printf_i+0x168>
 800e82a:	2301      	movs	r3, #1
 800e82c:	4632      	mov	r2, r6
 800e82e:	4649      	mov	r1, r9
 800e830:	4640      	mov	r0, r8
 800e832:	47d0      	blx	sl
 800e834:	3001      	adds	r0, #1
 800e836:	d09b      	beq.n	800e770 <_printf_i+0x164>
 800e838:	3501      	adds	r5, #1
 800e83a:	68e3      	ldr	r3, [r4, #12]
 800e83c:	9903      	ldr	r1, [sp, #12]
 800e83e:	1a5b      	subs	r3, r3, r1
 800e840:	42ab      	cmp	r3, r5
 800e842:	dcf2      	bgt.n	800e82a <_printf_i+0x21e>
 800e844:	e7eb      	b.n	800e81e <_printf_i+0x212>
 800e846:	2500      	movs	r5, #0
 800e848:	f104 0619 	add.w	r6, r4, #25
 800e84c:	e7f5      	b.n	800e83a <_printf_i+0x22e>
 800e84e:	bf00      	nop
 800e850:	0800fd95 	.word	0x0800fd95
 800e854:	0800fda6 	.word	0x0800fda6

0800e858 <_open_r>:
 800e858:	b538      	push	{r3, r4, r5, lr}
 800e85a:	4d07      	ldr	r5, [pc, #28]	; (800e878 <_open_r+0x20>)
 800e85c:	4604      	mov	r4, r0
 800e85e:	4608      	mov	r0, r1
 800e860:	4611      	mov	r1, r2
 800e862:	2200      	movs	r2, #0
 800e864:	602a      	str	r2, [r5, #0]
 800e866:	461a      	mov	r2, r3
 800e868:	f7f7 faa7 	bl	8005dba <_open>
 800e86c:	1c43      	adds	r3, r0, #1
 800e86e:	d102      	bne.n	800e876 <_open_r+0x1e>
 800e870:	682b      	ldr	r3, [r5, #0]
 800e872:	b103      	cbz	r3, 800e876 <_open_r+0x1e>
 800e874:	6023      	str	r3, [r4, #0]
 800e876:	bd38      	pop	{r3, r4, r5, pc}
 800e878:	20005cbc 	.word	0x20005cbc

0800e87c <iprintf>:
 800e87c:	b40f      	push	{r0, r1, r2, r3}
 800e87e:	4b0a      	ldr	r3, [pc, #40]	; (800e8a8 <iprintf+0x2c>)
 800e880:	b513      	push	{r0, r1, r4, lr}
 800e882:	681c      	ldr	r4, [r3, #0]
 800e884:	b124      	cbz	r4, 800e890 <iprintf+0x14>
 800e886:	69a3      	ldr	r3, [r4, #24]
 800e888:	b913      	cbnz	r3, 800e890 <iprintf+0x14>
 800e88a:	4620      	mov	r0, r4
 800e88c:	f7ff f872 	bl	800d974 <__sinit>
 800e890:	ab05      	add	r3, sp, #20
 800e892:	9a04      	ldr	r2, [sp, #16]
 800e894:	68a1      	ldr	r1, [r4, #8]
 800e896:	9301      	str	r3, [sp, #4]
 800e898:	4620      	mov	r0, r4
 800e89a:	f7ff fd19 	bl	800e2d0 <_vfiprintf_r>
 800e89e:	b002      	add	sp, #8
 800e8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8a4:	b004      	add	sp, #16
 800e8a6:	4770      	bx	lr
 800e8a8:	20000ad4 	.word	0x20000ad4

0800e8ac <_puts_r>:
 800e8ac:	b570      	push	{r4, r5, r6, lr}
 800e8ae:	460e      	mov	r6, r1
 800e8b0:	4605      	mov	r5, r0
 800e8b2:	b118      	cbz	r0, 800e8bc <_puts_r+0x10>
 800e8b4:	6983      	ldr	r3, [r0, #24]
 800e8b6:	b90b      	cbnz	r3, 800e8bc <_puts_r+0x10>
 800e8b8:	f7ff f85c 	bl	800d974 <__sinit>
 800e8bc:	69ab      	ldr	r3, [r5, #24]
 800e8be:	68ac      	ldr	r4, [r5, #8]
 800e8c0:	b913      	cbnz	r3, 800e8c8 <_puts_r+0x1c>
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	f7ff f856 	bl	800d974 <__sinit>
 800e8c8:	4b2c      	ldr	r3, [pc, #176]	; (800e97c <_puts_r+0xd0>)
 800e8ca:	429c      	cmp	r4, r3
 800e8cc:	d120      	bne.n	800e910 <_puts_r+0x64>
 800e8ce:	686c      	ldr	r4, [r5, #4]
 800e8d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8d2:	07db      	lsls	r3, r3, #31
 800e8d4:	d405      	bmi.n	800e8e2 <_puts_r+0x36>
 800e8d6:	89a3      	ldrh	r3, [r4, #12]
 800e8d8:	0598      	lsls	r0, r3, #22
 800e8da:	d402      	bmi.n	800e8e2 <_puts_r+0x36>
 800e8dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8de:	f7ff fb97 	bl	800e010 <__retarget_lock_acquire_recursive>
 800e8e2:	89a3      	ldrh	r3, [r4, #12]
 800e8e4:	0719      	lsls	r1, r3, #28
 800e8e6:	d51d      	bpl.n	800e924 <_puts_r+0x78>
 800e8e8:	6923      	ldr	r3, [r4, #16]
 800e8ea:	b1db      	cbz	r3, 800e924 <_puts_r+0x78>
 800e8ec:	3e01      	subs	r6, #1
 800e8ee:	68a3      	ldr	r3, [r4, #8]
 800e8f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	60a3      	str	r3, [r4, #8]
 800e8f8:	bb39      	cbnz	r1, 800e94a <_puts_r+0x9e>
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	da38      	bge.n	800e970 <_puts_r+0xc4>
 800e8fe:	4622      	mov	r2, r4
 800e900:	210a      	movs	r1, #10
 800e902:	4628      	mov	r0, r5
 800e904:	f000 f984 	bl	800ec10 <__swbuf_r>
 800e908:	3001      	adds	r0, #1
 800e90a:	d011      	beq.n	800e930 <_puts_r+0x84>
 800e90c:	250a      	movs	r5, #10
 800e90e:	e011      	b.n	800e934 <_puts_r+0x88>
 800e910:	4b1b      	ldr	r3, [pc, #108]	; (800e980 <_puts_r+0xd4>)
 800e912:	429c      	cmp	r4, r3
 800e914:	d101      	bne.n	800e91a <_puts_r+0x6e>
 800e916:	68ac      	ldr	r4, [r5, #8]
 800e918:	e7da      	b.n	800e8d0 <_puts_r+0x24>
 800e91a:	4b1a      	ldr	r3, [pc, #104]	; (800e984 <_puts_r+0xd8>)
 800e91c:	429c      	cmp	r4, r3
 800e91e:	bf08      	it	eq
 800e920:	68ec      	ldreq	r4, [r5, #12]
 800e922:	e7d5      	b.n	800e8d0 <_puts_r+0x24>
 800e924:	4621      	mov	r1, r4
 800e926:	4628      	mov	r0, r5
 800e928:	f000 f9d6 	bl	800ecd8 <__swsetup_r>
 800e92c:	2800      	cmp	r0, #0
 800e92e:	d0dd      	beq.n	800e8ec <_puts_r+0x40>
 800e930:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e936:	07da      	lsls	r2, r3, #31
 800e938:	d405      	bmi.n	800e946 <_puts_r+0x9a>
 800e93a:	89a3      	ldrh	r3, [r4, #12]
 800e93c:	059b      	lsls	r3, r3, #22
 800e93e:	d402      	bmi.n	800e946 <_puts_r+0x9a>
 800e940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e942:	f7ff fb66 	bl	800e012 <__retarget_lock_release_recursive>
 800e946:	4628      	mov	r0, r5
 800e948:	bd70      	pop	{r4, r5, r6, pc}
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	da04      	bge.n	800e958 <_puts_r+0xac>
 800e94e:	69a2      	ldr	r2, [r4, #24]
 800e950:	429a      	cmp	r2, r3
 800e952:	dc06      	bgt.n	800e962 <_puts_r+0xb6>
 800e954:	290a      	cmp	r1, #10
 800e956:	d004      	beq.n	800e962 <_puts_r+0xb6>
 800e958:	6823      	ldr	r3, [r4, #0]
 800e95a:	1c5a      	adds	r2, r3, #1
 800e95c:	6022      	str	r2, [r4, #0]
 800e95e:	7019      	strb	r1, [r3, #0]
 800e960:	e7c5      	b.n	800e8ee <_puts_r+0x42>
 800e962:	4622      	mov	r2, r4
 800e964:	4628      	mov	r0, r5
 800e966:	f000 f953 	bl	800ec10 <__swbuf_r>
 800e96a:	3001      	adds	r0, #1
 800e96c:	d1bf      	bne.n	800e8ee <_puts_r+0x42>
 800e96e:	e7df      	b.n	800e930 <_puts_r+0x84>
 800e970:	6823      	ldr	r3, [r4, #0]
 800e972:	250a      	movs	r5, #10
 800e974:	1c5a      	adds	r2, r3, #1
 800e976:	6022      	str	r2, [r4, #0]
 800e978:	701d      	strb	r5, [r3, #0]
 800e97a:	e7db      	b.n	800e934 <_puts_r+0x88>
 800e97c:	0800fd40 	.word	0x0800fd40
 800e980:	0800fd60 	.word	0x0800fd60
 800e984:	0800fd20 	.word	0x0800fd20

0800e988 <puts>:
 800e988:	4b02      	ldr	r3, [pc, #8]	; (800e994 <puts+0xc>)
 800e98a:	4601      	mov	r1, r0
 800e98c:	6818      	ldr	r0, [r3, #0]
 800e98e:	f7ff bf8d 	b.w	800e8ac <_puts_r>
 800e992:	bf00      	nop
 800e994:	20000ad4 	.word	0x20000ad4

0800e998 <lflush>:
 800e998:	8983      	ldrh	r3, [r0, #12]
 800e99a:	f003 0309 	and.w	r3, r3, #9
 800e99e:	2b09      	cmp	r3, #9
 800e9a0:	d101      	bne.n	800e9a6 <lflush+0xe>
 800e9a2:	f7fe bf7d 	b.w	800d8a0 <fflush>
 800e9a6:	2000      	movs	r0, #0
 800e9a8:	4770      	bx	lr
	...

0800e9ac <__srefill_r>:
 800e9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ae:	460c      	mov	r4, r1
 800e9b0:	4605      	mov	r5, r0
 800e9b2:	b118      	cbz	r0, 800e9bc <__srefill_r+0x10>
 800e9b4:	6983      	ldr	r3, [r0, #24]
 800e9b6:	b90b      	cbnz	r3, 800e9bc <__srefill_r+0x10>
 800e9b8:	f7fe ffdc 	bl	800d974 <__sinit>
 800e9bc:	4b3b      	ldr	r3, [pc, #236]	; (800eaac <__srefill_r+0x100>)
 800e9be:	429c      	cmp	r4, r3
 800e9c0:	d10a      	bne.n	800e9d8 <__srefill_r+0x2c>
 800e9c2:	686c      	ldr	r4, [r5, #4]
 800e9c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	6063      	str	r3, [r4, #4]
 800e9cc:	89a3      	ldrh	r3, [r4, #12]
 800e9ce:	069e      	lsls	r6, r3, #26
 800e9d0:	d50c      	bpl.n	800e9ec <__srefill_r+0x40>
 800e9d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9d6:	e066      	b.n	800eaa6 <__srefill_r+0xfa>
 800e9d8:	4b35      	ldr	r3, [pc, #212]	; (800eab0 <__srefill_r+0x104>)
 800e9da:	429c      	cmp	r4, r3
 800e9dc:	d101      	bne.n	800e9e2 <__srefill_r+0x36>
 800e9de:	68ac      	ldr	r4, [r5, #8]
 800e9e0:	e7f0      	b.n	800e9c4 <__srefill_r+0x18>
 800e9e2:	4b34      	ldr	r3, [pc, #208]	; (800eab4 <__srefill_r+0x108>)
 800e9e4:	429c      	cmp	r4, r3
 800e9e6:	bf08      	it	eq
 800e9e8:	68ec      	ldreq	r4, [r5, #12]
 800e9ea:	e7eb      	b.n	800e9c4 <__srefill_r+0x18>
 800e9ec:	0758      	lsls	r0, r3, #29
 800e9ee:	d448      	bmi.n	800ea82 <__srefill_r+0xd6>
 800e9f0:	06d9      	lsls	r1, r3, #27
 800e9f2:	d405      	bmi.n	800ea00 <__srefill_r+0x54>
 800e9f4:	2309      	movs	r3, #9
 800e9f6:	602b      	str	r3, [r5, #0]
 800e9f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e9fc:	81a3      	strh	r3, [r4, #12]
 800e9fe:	e7e8      	b.n	800e9d2 <__srefill_r+0x26>
 800ea00:	071a      	lsls	r2, r3, #28
 800ea02:	d50b      	bpl.n	800ea1c <__srefill_r+0x70>
 800ea04:	4621      	mov	r1, r4
 800ea06:	4628      	mov	r0, r5
 800ea08:	f7fe ff0e 	bl	800d828 <_fflush_r>
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	d1e0      	bne.n	800e9d2 <__srefill_r+0x26>
 800ea10:	89a3      	ldrh	r3, [r4, #12]
 800ea12:	60a0      	str	r0, [r4, #8]
 800ea14:	f023 0308 	bic.w	r3, r3, #8
 800ea18:	81a3      	strh	r3, [r4, #12]
 800ea1a:	61a0      	str	r0, [r4, #24]
 800ea1c:	89a3      	ldrh	r3, [r4, #12]
 800ea1e:	f043 0304 	orr.w	r3, r3, #4
 800ea22:	81a3      	strh	r3, [r4, #12]
 800ea24:	6923      	ldr	r3, [r4, #16]
 800ea26:	b91b      	cbnz	r3, 800ea30 <__srefill_r+0x84>
 800ea28:	4621      	mov	r1, r4
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	f7ff fb16 	bl	800e05c <__smakebuf_r>
 800ea30:	89a6      	ldrh	r6, [r4, #12]
 800ea32:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800ea36:	07b3      	lsls	r3, r6, #30
 800ea38:	d00f      	beq.n	800ea5a <__srefill_r+0xae>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	81a3      	strh	r3, [r4, #12]
 800ea3e:	4b1e      	ldr	r3, [pc, #120]	; (800eab8 <__srefill_r+0x10c>)
 800ea40:	491e      	ldr	r1, [pc, #120]	; (800eabc <__srefill_r+0x110>)
 800ea42:	6818      	ldr	r0, [r3, #0]
 800ea44:	f006 0609 	and.w	r6, r6, #9
 800ea48:	f7ff fa12 	bl	800de70 <_fwalk>
 800ea4c:	2e09      	cmp	r6, #9
 800ea4e:	81a7      	strh	r7, [r4, #12]
 800ea50:	d103      	bne.n	800ea5a <__srefill_r+0xae>
 800ea52:	4621      	mov	r1, r4
 800ea54:	4628      	mov	r0, r5
 800ea56:	f7fe fe61 	bl	800d71c <__sflush_r>
 800ea5a:	6922      	ldr	r2, [r4, #16]
 800ea5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ea5e:	6963      	ldr	r3, [r4, #20]
 800ea60:	6a21      	ldr	r1, [r4, #32]
 800ea62:	6022      	str	r2, [r4, #0]
 800ea64:	4628      	mov	r0, r5
 800ea66:	47b0      	blx	r6
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	6060      	str	r0, [r4, #4]
 800ea6c:	dc1c      	bgt.n	800eaa8 <__srefill_r+0xfc>
 800ea6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea72:	bf17      	itett	ne
 800ea74:	2200      	movne	r2, #0
 800ea76:	f043 0320 	orreq.w	r3, r3, #32
 800ea7a:	6062      	strne	r2, [r4, #4]
 800ea7c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800ea80:	e7bc      	b.n	800e9fc <__srefill_r+0x50>
 800ea82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea84:	2900      	cmp	r1, #0
 800ea86:	d0cd      	beq.n	800ea24 <__srefill_r+0x78>
 800ea88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea8c:	4299      	cmp	r1, r3
 800ea8e:	d002      	beq.n	800ea96 <__srefill_r+0xea>
 800ea90:	4628      	mov	r0, r5
 800ea92:	f7ff fb49 	bl	800e128 <_free_r>
 800ea96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea98:	6063      	str	r3, [r4, #4]
 800ea9a:	2000      	movs	r0, #0
 800ea9c:	6360      	str	r0, [r4, #52]	; 0x34
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d0c0      	beq.n	800ea24 <__srefill_r+0x78>
 800eaa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eaa4:	6023      	str	r3, [r4, #0]
 800eaa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaa8:	2000      	movs	r0, #0
 800eaaa:	e7fc      	b.n	800eaa6 <__srefill_r+0xfa>
 800eaac:	0800fd40 	.word	0x0800fd40
 800eab0:	0800fd60 	.word	0x0800fd60
 800eab4:	0800fd20 	.word	0x0800fd20
 800eab8:	0800fd80 	.word	0x0800fd80
 800eabc:	0800e999 	.word	0x0800e999

0800eac0 <_sbrk_r>:
 800eac0:	b538      	push	{r3, r4, r5, lr}
 800eac2:	4d06      	ldr	r5, [pc, #24]	; (800eadc <_sbrk_r+0x1c>)
 800eac4:	2300      	movs	r3, #0
 800eac6:	4604      	mov	r4, r0
 800eac8:	4608      	mov	r0, r1
 800eaca:	602b      	str	r3, [r5, #0]
 800eacc:	f7f7 f984 	bl	8005dd8 <_sbrk>
 800ead0:	1c43      	adds	r3, r0, #1
 800ead2:	d102      	bne.n	800eada <_sbrk_r+0x1a>
 800ead4:	682b      	ldr	r3, [r5, #0]
 800ead6:	b103      	cbz	r3, 800eada <_sbrk_r+0x1a>
 800ead8:	6023      	str	r3, [r4, #0]
 800eada:	bd38      	pop	{r3, r4, r5, pc}
 800eadc:	20005cbc 	.word	0x20005cbc

0800eae0 <sniprintf>:
 800eae0:	b40c      	push	{r2, r3}
 800eae2:	b530      	push	{r4, r5, lr}
 800eae4:	4b17      	ldr	r3, [pc, #92]	; (800eb44 <sniprintf+0x64>)
 800eae6:	1e0c      	subs	r4, r1, #0
 800eae8:	681d      	ldr	r5, [r3, #0]
 800eaea:	b09d      	sub	sp, #116	; 0x74
 800eaec:	da08      	bge.n	800eb00 <sniprintf+0x20>
 800eaee:	238b      	movs	r3, #139	; 0x8b
 800eaf0:	602b      	str	r3, [r5, #0]
 800eaf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eaf6:	b01d      	add	sp, #116	; 0x74
 800eaf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eafc:	b002      	add	sp, #8
 800eafe:	4770      	bx	lr
 800eb00:	f44f 7302 	mov.w	r3, #520	; 0x208
 800eb04:	f8ad 3014 	strh.w	r3, [sp, #20]
 800eb08:	bf14      	ite	ne
 800eb0a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800eb0e:	4623      	moveq	r3, r4
 800eb10:	9304      	str	r3, [sp, #16]
 800eb12:	9307      	str	r3, [sp, #28]
 800eb14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb18:	9002      	str	r0, [sp, #8]
 800eb1a:	9006      	str	r0, [sp, #24]
 800eb1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800eb20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eb22:	ab21      	add	r3, sp, #132	; 0x84
 800eb24:	a902      	add	r1, sp, #8
 800eb26:	4628      	mov	r0, r5
 800eb28:	9301      	str	r3, [sp, #4]
 800eb2a:	f000 fa65 	bl	800eff8 <_svfiprintf_r>
 800eb2e:	1c43      	adds	r3, r0, #1
 800eb30:	bfbc      	itt	lt
 800eb32:	238b      	movlt	r3, #139	; 0x8b
 800eb34:	602b      	strlt	r3, [r5, #0]
 800eb36:	2c00      	cmp	r4, #0
 800eb38:	d0dd      	beq.n	800eaf6 <sniprintf+0x16>
 800eb3a:	9b02      	ldr	r3, [sp, #8]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	701a      	strb	r2, [r3, #0]
 800eb40:	e7d9      	b.n	800eaf6 <sniprintf+0x16>
 800eb42:	bf00      	nop
 800eb44:	20000ad4 	.word	0x20000ad4

0800eb48 <siprintf>:
 800eb48:	b40e      	push	{r1, r2, r3}
 800eb4a:	b500      	push	{lr}
 800eb4c:	b09c      	sub	sp, #112	; 0x70
 800eb4e:	ab1d      	add	r3, sp, #116	; 0x74
 800eb50:	9002      	str	r0, [sp, #8]
 800eb52:	9006      	str	r0, [sp, #24]
 800eb54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb58:	4809      	ldr	r0, [pc, #36]	; (800eb80 <siprintf+0x38>)
 800eb5a:	9107      	str	r1, [sp, #28]
 800eb5c:	9104      	str	r1, [sp, #16]
 800eb5e:	4909      	ldr	r1, [pc, #36]	; (800eb84 <siprintf+0x3c>)
 800eb60:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb64:	9105      	str	r1, [sp, #20]
 800eb66:	6800      	ldr	r0, [r0, #0]
 800eb68:	9301      	str	r3, [sp, #4]
 800eb6a:	a902      	add	r1, sp, #8
 800eb6c:	f000 fa44 	bl	800eff8 <_svfiprintf_r>
 800eb70:	9b02      	ldr	r3, [sp, #8]
 800eb72:	2200      	movs	r2, #0
 800eb74:	701a      	strb	r2, [r3, #0]
 800eb76:	b01c      	add	sp, #112	; 0x70
 800eb78:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb7c:	b003      	add	sp, #12
 800eb7e:	4770      	bx	lr
 800eb80:	20000ad4 	.word	0x20000ad4
 800eb84:	ffff0208 	.word	0xffff0208

0800eb88 <__sread>:
 800eb88:	b510      	push	{r4, lr}
 800eb8a:	460c      	mov	r4, r1
 800eb8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb90:	f000 fb32 	bl	800f1f8 <_read_r>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	bfab      	itete	ge
 800eb98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb9a:	89a3      	ldrhlt	r3, [r4, #12]
 800eb9c:	181b      	addge	r3, r3, r0
 800eb9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eba2:	bfac      	ite	ge
 800eba4:	6563      	strge	r3, [r4, #84]	; 0x54
 800eba6:	81a3      	strhlt	r3, [r4, #12]
 800eba8:	bd10      	pop	{r4, pc}

0800ebaa <__swrite>:
 800ebaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebae:	461f      	mov	r7, r3
 800ebb0:	898b      	ldrh	r3, [r1, #12]
 800ebb2:	05db      	lsls	r3, r3, #23
 800ebb4:	4605      	mov	r5, r0
 800ebb6:	460c      	mov	r4, r1
 800ebb8:	4616      	mov	r6, r2
 800ebba:	d505      	bpl.n	800ebc8 <__swrite+0x1e>
 800ebbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f000 f95e 	bl	800ee84 <_lseek_r>
 800ebc8:	89a3      	ldrh	r3, [r4, #12]
 800ebca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebd2:	81a3      	strh	r3, [r4, #12]
 800ebd4:	4632      	mov	r2, r6
 800ebd6:	463b      	mov	r3, r7
 800ebd8:	4628      	mov	r0, r5
 800ebda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebde:	f000 b869 	b.w	800ecb4 <_write_r>

0800ebe2 <__sseek>:
 800ebe2:	b510      	push	{r4, lr}
 800ebe4:	460c      	mov	r4, r1
 800ebe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebea:	f000 f94b 	bl	800ee84 <_lseek_r>
 800ebee:	1c43      	adds	r3, r0, #1
 800ebf0:	89a3      	ldrh	r3, [r4, #12]
 800ebf2:	bf15      	itete	ne
 800ebf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebfe:	81a3      	strheq	r3, [r4, #12]
 800ec00:	bf18      	it	ne
 800ec02:	81a3      	strhne	r3, [r4, #12]
 800ec04:	bd10      	pop	{r4, pc}

0800ec06 <__sclose>:
 800ec06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec0a:	f000 b8d3 	b.w	800edb4 <_close_r>
	...

0800ec10 <__swbuf_r>:
 800ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec12:	460e      	mov	r6, r1
 800ec14:	4614      	mov	r4, r2
 800ec16:	4605      	mov	r5, r0
 800ec18:	b118      	cbz	r0, 800ec22 <__swbuf_r+0x12>
 800ec1a:	6983      	ldr	r3, [r0, #24]
 800ec1c:	b90b      	cbnz	r3, 800ec22 <__swbuf_r+0x12>
 800ec1e:	f7fe fea9 	bl	800d974 <__sinit>
 800ec22:	4b21      	ldr	r3, [pc, #132]	; (800eca8 <__swbuf_r+0x98>)
 800ec24:	429c      	cmp	r4, r3
 800ec26:	d12b      	bne.n	800ec80 <__swbuf_r+0x70>
 800ec28:	686c      	ldr	r4, [r5, #4]
 800ec2a:	69a3      	ldr	r3, [r4, #24]
 800ec2c:	60a3      	str	r3, [r4, #8]
 800ec2e:	89a3      	ldrh	r3, [r4, #12]
 800ec30:	071a      	lsls	r2, r3, #28
 800ec32:	d52f      	bpl.n	800ec94 <__swbuf_r+0x84>
 800ec34:	6923      	ldr	r3, [r4, #16]
 800ec36:	b36b      	cbz	r3, 800ec94 <__swbuf_r+0x84>
 800ec38:	6923      	ldr	r3, [r4, #16]
 800ec3a:	6820      	ldr	r0, [r4, #0]
 800ec3c:	1ac0      	subs	r0, r0, r3
 800ec3e:	6963      	ldr	r3, [r4, #20]
 800ec40:	b2f6      	uxtb	r6, r6
 800ec42:	4283      	cmp	r3, r0
 800ec44:	4637      	mov	r7, r6
 800ec46:	dc04      	bgt.n	800ec52 <__swbuf_r+0x42>
 800ec48:	4621      	mov	r1, r4
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	f7fe fdec 	bl	800d828 <_fflush_r>
 800ec50:	bb30      	cbnz	r0, 800eca0 <__swbuf_r+0x90>
 800ec52:	68a3      	ldr	r3, [r4, #8]
 800ec54:	3b01      	subs	r3, #1
 800ec56:	60a3      	str	r3, [r4, #8]
 800ec58:	6823      	ldr	r3, [r4, #0]
 800ec5a:	1c5a      	adds	r2, r3, #1
 800ec5c:	6022      	str	r2, [r4, #0]
 800ec5e:	701e      	strb	r6, [r3, #0]
 800ec60:	6963      	ldr	r3, [r4, #20]
 800ec62:	3001      	adds	r0, #1
 800ec64:	4283      	cmp	r3, r0
 800ec66:	d004      	beq.n	800ec72 <__swbuf_r+0x62>
 800ec68:	89a3      	ldrh	r3, [r4, #12]
 800ec6a:	07db      	lsls	r3, r3, #31
 800ec6c:	d506      	bpl.n	800ec7c <__swbuf_r+0x6c>
 800ec6e:	2e0a      	cmp	r6, #10
 800ec70:	d104      	bne.n	800ec7c <__swbuf_r+0x6c>
 800ec72:	4621      	mov	r1, r4
 800ec74:	4628      	mov	r0, r5
 800ec76:	f7fe fdd7 	bl	800d828 <_fflush_r>
 800ec7a:	b988      	cbnz	r0, 800eca0 <__swbuf_r+0x90>
 800ec7c:	4638      	mov	r0, r7
 800ec7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec80:	4b0a      	ldr	r3, [pc, #40]	; (800ecac <__swbuf_r+0x9c>)
 800ec82:	429c      	cmp	r4, r3
 800ec84:	d101      	bne.n	800ec8a <__swbuf_r+0x7a>
 800ec86:	68ac      	ldr	r4, [r5, #8]
 800ec88:	e7cf      	b.n	800ec2a <__swbuf_r+0x1a>
 800ec8a:	4b09      	ldr	r3, [pc, #36]	; (800ecb0 <__swbuf_r+0xa0>)
 800ec8c:	429c      	cmp	r4, r3
 800ec8e:	bf08      	it	eq
 800ec90:	68ec      	ldreq	r4, [r5, #12]
 800ec92:	e7ca      	b.n	800ec2a <__swbuf_r+0x1a>
 800ec94:	4621      	mov	r1, r4
 800ec96:	4628      	mov	r0, r5
 800ec98:	f000 f81e 	bl	800ecd8 <__swsetup_r>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	d0cb      	beq.n	800ec38 <__swbuf_r+0x28>
 800eca0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800eca4:	e7ea      	b.n	800ec7c <__swbuf_r+0x6c>
 800eca6:	bf00      	nop
 800eca8:	0800fd40 	.word	0x0800fd40
 800ecac:	0800fd60 	.word	0x0800fd60
 800ecb0:	0800fd20 	.word	0x0800fd20

0800ecb4 <_write_r>:
 800ecb4:	b538      	push	{r3, r4, r5, lr}
 800ecb6:	4d07      	ldr	r5, [pc, #28]	; (800ecd4 <_write_r+0x20>)
 800ecb8:	4604      	mov	r4, r0
 800ecba:	4608      	mov	r0, r1
 800ecbc:	4611      	mov	r1, r2
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	602a      	str	r2, [r5, #0]
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	f7f4 fea6 	bl	8003a14 <_write>
 800ecc8:	1c43      	adds	r3, r0, #1
 800ecca:	d102      	bne.n	800ecd2 <_write_r+0x1e>
 800eccc:	682b      	ldr	r3, [r5, #0]
 800ecce:	b103      	cbz	r3, 800ecd2 <_write_r+0x1e>
 800ecd0:	6023      	str	r3, [r4, #0]
 800ecd2:	bd38      	pop	{r3, r4, r5, pc}
 800ecd4:	20005cbc 	.word	0x20005cbc

0800ecd8 <__swsetup_r>:
 800ecd8:	4b32      	ldr	r3, [pc, #200]	; (800eda4 <__swsetup_r+0xcc>)
 800ecda:	b570      	push	{r4, r5, r6, lr}
 800ecdc:	681d      	ldr	r5, [r3, #0]
 800ecde:	4606      	mov	r6, r0
 800ece0:	460c      	mov	r4, r1
 800ece2:	b125      	cbz	r5, 800ecee <__swsetup_r+0x16>
 800ece4:	69ab      	ldr	r3, [r5, #24]
 800ece6:	b913      	cbnz	r3, 800ecee <__swsetup_r+0x16>
 800ece8:	4628      	mov	r0, r5
 800ecea:	f7fe fe43 	bl	800d974 <__sinit>
 800ecee:	4b2e      	ldr	r3, [pc, #184]	; (800eda8 <__swsetup_r+0xd0>)
 800ecf0:	429c      	cmp	r4, r3
 800ecf2:	d10f      	bne.n	800ed14 <__swsetup_r+0x3c>
 800ecf4:	686c      	ldr	r4, [r5, #4]
 800ecf6:	89a3      	ldrh	r3, [r4, #12]
 800ecf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ecfc:	0719      	lsls	r1, r3, #28
 800ecfe:	d42c      	bmi.n	800ed5a <__swsetup_r+0x82>
 800ed00:	06dd      	lsls	r5, r3, #27
 800ed02:	d411      	bmi.n	800ed28 <__swsetup_r+0x50>
 800ed04:	2309      	movs	r3, #9
 800ed06:	6033      	str	r3, [r6, #0]
 800ed08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed0c:	81a3      	strh	r3, [r4, #12]
 800ed0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed12:	e03e      	b.n	800ed92 <__swsetup_r+0xba>
 800ed14:	4b25      	ldr	r3, [pc, #148]	; (800edac <__swsetup_r+0xd4>)
 800ed16:	429c      	cmp	r4, r3
 800ed18:	d101      	bne.n	800ed1e <__swsetup_r+0x46>
 800ed1a:	68ac      	ldr	r4, [r5, #8]
 800ed1c:	e7eb      	b.n	800ecf6 <__swsetup_r+0x1e>
 800ed1e:	4b24      	ldr	r3, [pc, #144]	; (800edb0 <__swsetup_r+0xd8>)
 800ed20:	429c      	cmp	r4, r3
 800ed22:	bf08      	it	eq
 800ed24:	68ec      	ldreq	r4, [r5, #12]
 800ed26:	e7e6      	b.n	800ecf6 <__swsetup_r+0x1e>
 800ed28:	0758      	lsls	r0, r3, #29
 800ed2a:	d512      	bpl.n	800ed52 <__swsetup_r+0x7a>
 800ed2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed2e:	b141      	cbz	r1, 800ed42 <__swsetup_r+0x6a>
 800ed30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed34:	4299      	cmp	r1, r3
 800ed36:	d002      	beq.n	800ed3e <__swsetup_r+0x66>
 800ed38:	4630      	mov	r0, r6
 800ed3a:	f7ff f9f5 	bl	800e128 <_free_r>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	6363      	str	r3, [r4, #52]	; 0x34
 800ed42:	89a3      	ldrh	r3, [r4, #12]
 800ed44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed48:	81a3      	strh	r3, [r4, #12]
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	6063      	str	r3, [r4, #4]
 800ed4e:	6923      	ldr	r3, [r4, #16]
 800ed50:	6023      	str	r3, [r4, #0]
 800ed52:	89a3      	ldrh	r3, [r4, #12]
 800ed54:	f043 0308 	orr.w	r3, r3, #8
 800ed58:	81a3      	strh	r3, [r4, #12]
 800ed5a:	6923      	ldr	r3, [r4, #16]
 800ed5c:	b94b      	cbnz	r3, 800ed72 <__swsetup_r+0x9a>
 800ed5e:	89a3      	ldrh	r3, [r4, #12]
 800ed60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ed64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed68:	d003      	beq.n	800ed72 <__swsetup_r+0x9a>
 800ed6a:	4621      	mov	r1, r4
 800ed6c:	4630      	mov	r0, r6
 800ed6e:	f7ff f975 	bl	800e05c <__smakebuf_r>
 800ed72:	89a0      	ldrh	r0, [r4, #12]
 800ed74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed78:	f010 0301 	ands.w	r3, r0, #1
 800ed7c:	d00a      	beq.n	800ed94 <__swsetup_r+0xbc>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	60a3      	str	r3, [r4, #8]
 800ed82:	6963      	ldr	r3, [r4, #20]
 800ed84:	425b      	negs	r3, r3
 800ed86:	61a3      	str	r3, [r4, #24]
 800ed88:	6923      	ldr	r3, [r4, #16]
 800ed8a:	b943      	cbnz	r3, 800ed9e <__swsetup_r+0xc6>
 800ed8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed90:	d1ba      	bne.n	800ed08 <__swsetup_r+0x30>
 800ed92:	bd70      	pop	{r4, r5, r6, pc}
 800ed94:	0781      	lsls	r1, r0, #30
 800ed96:	bf58      	it	pl
 800ed98:	6963      	ldrpl	r3, [r4, #20]
 800ed9a:	60a3      	str	r3, [r4, #8]
 800ed9c:	e7f4      	b.n	800ed88 <__swsetup_r+0xb0>
 800ed9e:	2000      	movs	r0, #0
 800eda0:	e7f7      	b.n	800ed92 <__swsetup_r+0xba>
 800eda2:	bf00      	nop
 800eda4:	20000ad4 	.word	0x20000ad4
 800eda8:	0800fd40 	.word	0x0800fd40
 800edac:	0800fd60 	.word	0x0800fd60
 800edb0:	0800fd20 	.word	0x0800fd20

0800edb4 <_close_r>:
 800edb4:	b538      	push	{r3, r4, r5, lr}
 800edb6:	4d06      	ldr	r5, [pc, #24]	; (800edd0 <_close_r+0x1c>)
 800edb8:	2300      	movs	r3, #0
 800edba:	4604      	mov	r4, r0
 800edbc:	4608      	mov	r0, r1
 800edbe:	602b      	str	r3, [r5, #0]
 800edc0:	f7f6 ffc7 	bl	8005d52 <_close>
 800edc4:	1c43      	adds	r3, r0, #1
 800edc6:	d102      	bne.n	800edce <_close_r+0x1a>
 800edc8:	682b      	ldr	r3, [r5, #0]
 800edca:	b103      	cbz	r3, 800edce <_close_r+0x1a>
 800edcc:	6023      	str	r3, [r4, #0]
 800edce:	bd38      	pop	{r3, r4, r5, pc}
 800edd0:	20005cbc 	.word	0x20005cbc

0800edd4 <__sflags>:
 800edd4:	780b      	ldrb	r3, [r1, #0]
 800edd6:	2b72      	cmp	r3, #114	; 0x72
 800edd8:	b530      	push	{r4, r5, lr}
 800edda:	d022      	beq.n	800ee22 <__sflags+0x4e>
 800eddc:	2b77      	cmp	r3, #119	; 0x77
 800edde:	d024      	beq.n	800ee2a <__sflags+0x56>
 800ede0:	2b61      	cmp	r3, #97	; 0x61
 800ede2:	d027      	beq.n	800ee34 <__sflags+0x60>
 800ede4:	2316      	movs	r3, #22
 800ede6:	6003      	str	r3, [r0, #0]
 800ede8:	2000      	movs	r0, #0
 800edea:	bd30      	pop	{r4, r5, pc}
 800edec:	2d62      	cmp	r5, #98	; 0x62
 800edee:	d012      	beq.n	800ee16 <__sflags+0x42>
 800edf0:	2d78      	cmp	r5, #120	; 0x78
 800edf2:	d013      	beq.n	800ee1c <__sflags+0x48>
 800edf4:	2d2b      	cmp	r5, #43	; 0x2b
 800edf6:	d107      	bne.n	800ee08 <__sflags+0x34>
 800edf8:	f020 001c 	bic.w	r0, r0, #28
 800edfc:	f023 0303 	bic.w	r3, r3, #3
 800ee00:	f040 0010 	orr.w	r0, r0, #16
 800ee04:	f043 0302 	orr.w	r3, r3, #2
 800ee08:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800ee0c:	2d00      	cmp	r5, #0
 800ee0e:	d1ed      	bne.n	800edec <__sflags+0x18>
 800ee10:	4323      	orrs	r3, r4
 800ee12:	6013      	str	r3, [r2, #0]
 800ee14:	e7e9      	b.n	800edea <__sflags+0x16>
 800ee16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee1a:	e7f5      	b.n	800ee08 <__sflags+0x34>
 800ee1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ee20:	e7f2      	b.n	800ee08 <__sflags+0x34>
 800ee22:	2400      	movs	r4, #0
 800ee24:	4623      	mov	r3, r4
 800ee26:	2004      	movs	r0, #4
 800ee28:	e7ee      	b.n	800ee08 <__sflags+0x34>
 800ee2a:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800ee2e:	2301      	movs	r3, #1
 800ee30:	2008      	movs	r0, #8
 800ee32:	e7e9      	b.n	800ee08 <__sflags+0x34>
 800ee34:	f44f 7402 	mov.w	r4, #520	; 0x208
 800ee38:	2301      	movs	r3, #1
 800ee3a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800ee3e:	e7e3      	b.n	800ee08 <__sflags+0x34>

0800ee40 <_fstat_r>:
 800ee40:	b538      	push	{r3, r4, r5, lr}
 800ee42:	4d07      	ldr	r5, [pc, #28]	; (800ee60 <_fstat_r+0x20>)
 800ee44:	2300      	movs	r3, #0
 800ee46:	4604      	mov	r4, r0
 800ee48:	4608      	mov	r0, r1
 800ee4a:	4611      	mov	r1, r2
 800ee4c:	602b      	str	r3, [r5, #0]
 800ee4e:	f7f6 ff8c 	bl	8005d6a <_fstat>
 800ee52:	1c43      	adds	r3, r0, #1
 800ee54:	d102      	bne.n	800ee5c <_fstat_r+0x1c>
 800ee56:	682b      	ldr	r3, [r5, #0]
 800ee58:	b103      	cbz	r3, 800ee5c <_fstat_r+0x1c>
 800ee5a:	6023      	str	r3, [r4, #0]
 800ee5c:	bd38      	pop	{r3, r4, r5, pc}
 800ee5e:	bf00      	nop
 800ee60:	20005cbc 	.word	0x20005cbc

0800ee64 <_isatty_r>:
 800ee64:	b538      	push	{r3, r4, r5, lr}
 800ee66:	4d06      	ldr	r5, [pc, #24]	; (800ee80 <_isatty_r+0x1c>)
 800ee68:	2300      	movs	r3, #0
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	4608      	mov	r0, r1
 800ee6e:	602b      	str	r3, [r5, #0]
 800ee70:	f7f6 ff8b 	bl	8005d8a <_isatty>
 800ee74:	1c43      	adds	r3, r0, #1
 800ee76:	d102      	bne.n	800ee7e <_isatty_r+0x1a>
 800ee78:	682b      	ldr	r3, [r5, #0]
 800ee7a:	b103      	cbz	r3, 800ee7e <_isatty_r+0x1a>
 800ee7c:	6023      	str	r3, [r4, #0]
 800ee7e:	bd38      	pop	{r3, r4, r5, pc}
 800ee80:	20005cbc 	.word	0x20005cbc

0800ee84 <_lseek_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4d07      	ldr	r5, [pc, #28]	; (800eea4 <_lseek_r+0x20>)
 800ee88:	4604      	mov	r4, r0
 800ee8a:	4608      	mov	r0, r1
 800ee8c:	4611      	mov	r1, r2
 800ee8e:	2200      	movs	r2, #0
 800ee90:	602a      	str	r2, [r5, #0]
 800ee92:	461a      	mov	r2, r3
 800ee94:	f7f6 ff84 	bl	8005da0 <_lseek>
 800ee98:	1c43      	adds	r3, r0, #1
 800ee9a:	d102      	bne.n	800eea2 <_lseek_r+0x1e>
 800ee9c:	682b      	ldr	r3, [r5, #0]
 800ee9e:	b103      	cbz	r3, 800eea2 <_lseek_r+0x1e>
 800eea0:	6023      	str	r3, [r4, #0]
 800eea2:	bd38      	pop	{r3, r4, r5, pc}
 800eea4:	20005cbc 	.word	0x20005cbc

0800eea8 <memmove>:
 800eea8:	4288      	cmp	r0, r1
 800eeaa:	b510      	push	{r4, lr}
 800eeac:	eb01 0402 	add.w	r4, r1, r2
 800eeb0:	d902      	bls.n	800eeb8 <memmove+0x10>
 800eeb2:	4284      	cmp	r4, r0
 800eeb4:	4623      	mov	r3, r4
 800eeb6:	d807      	bhi.n	800eec8 <memmove+0x20>
 800eeb8:	1e43      	subs	r3, r0, #1
 800eeba:	42a1      	cmp	r1, r4
 800eebc:	d008      	beq.n	800eed0 <memmove+0x28>
 800eebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eec6:	e7f8      	b.n	800eeba <memmove+0x12>
 800eec8:	4402      	add	r2, r0
 800eeca:	4601      	mov	r1, r0
 800eecc:	428a      	cmp	r2, r1
 800eece:	d100      	bne.n	800eed2 <memmove+0x2a>
 800eed0:	bd10      	pop	{r4, pc}
 800eed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eeda:	e7f7      	b.n	800eecc <memmove+0x24>

0800eedc <__malloc_lock>:
 800eedc:	4801      	ldr	r0, [pc, #4]	; (800eee4 <__malloc_lock+0x8>)
 800eede:	f7ff b897 	b.w	800e010 <__retarget_lock_acquire_recursive>
 800eee2:	bf00      	nop
 800eee4:	20005cb4 	.word	0x20005cb4

0800eee8 <__malloc_unlock>:
 800eee8:	4801      	ldr	r0, [pc, #4]	; (800eef0 <__malloc_unlock+0x8>)
 800eeea:	f7ff b892 	b.w	800e012 <__retarget_lock_release_recursive>
 800eeee:	bf00      	nop
 800eef0:	20005cb4 	.word	0x20005cb4

0800eef4 <_realloc_r>:
 800eef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef6:	4607      	mov	r7, r0
 800eef8:	4614      	mov	r4, r2
 800eefa:	460e      	mov	r6, r1
 800eefc:	b921      	cbnz	r1, 800ef08 <_realloc_r+0x14>
 800eefe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ef02:	4611      	mov	r1, r2
 800ef04:	f7ff b960 	b.w	800e1c8 <_malloc_r>
 800ef08:	b922      	cbnz	r2, 800ef14 <_realloc_r+0x20>
 800ef0a:	f7ff f90d 	bl	800e128 <_free_r>
 800ef0e:	4625      	mov	r5, r4
 800ef10:	4628      	mov	r0, r5
 800ef12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef14:	f000 f982 	bl	800f21c <_malloc_usable_size_r>
 800ef18:	42a0      	cmp	r0, r4
 800ef1a:	d20f      	bcs.n	800ef3c <_realloc_r+0x48>
 800ef1c:	4621      	mov	r1, r4
 800ef1e:	4638      	mov	r0, r7
 800ef20:	f7ff f952 	bl	800e1c8 <_malloc_r>
 800ef24:	4605      	mov	r5, r0
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d0f2      	beq.n	800ef10 <_realloc_r+0x1c>
 800ef2a:	4631      	mov	r1, r6
 800ef2c:	4622      	mov	r2, r4
 800ef2e:	f7ff f8e5 	bl	800e0fc <memcpy>
 800ef32:	4631      	mov	r1, r6
 800ef34:	4638      	mov	r0, r7
 800ef36:	f7ff f8f7 	bl	800e128 <_free_r>
 800ef3a:	e7e9      	b.n	800ef10 <_realloc_r+0x1c>
 800ef3c:	4635      	mov	r5, r6
 800ef3e:	e7e7      	b.n	800ef10 <_realloc_r+0x1c>

0800ef40 <__ssputs_r>:
 800ef40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef44:	688e      	ldr	r6, [r1, #8]
 800ef46:	429e      	cmp	r6, r3
 800ef48:	4682      	mov	sl, r0
 800ef4a:	460c      	mov	r4, r1
 800ef4c:	4690      	mov	r8, r2
 800ef4e:	461f      	mov	r7, r3
 800ef50:	d838      	bhi.n	800efc4 <__ssputs_r+0x84>
 800ef52:	898a      	ldrh	r2, [r1, #12]
 800ef54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef58:	d032      	beq.n	800efc0 <__ssputs_r+0x80>
 800ef5a:	6825      	ldr	r5, [r4, #0]
 800ef5c:	6909      	ldr	r1, [r1, #16]
 800ef5e:	eba5 0901 	sub.w	r9, r5, r1
 800ef62:	6965      	ldr	r5, [r4, #20]
 800ef64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	444b      	add	r3, r9
 800ef70:	106d      	asrs	r5, r5, #1
 800ef72:	429d      	cmp	r5, r3
 800ef74:	bf38      	it	cc
 800ef76:	461d      	movcc	r5, r3
 800ef78:	0553      	lsls	r3, r2, #21
 800ef7a:	d531      	bpl.n	800efe0 <__ssputs_r+0xa0>
 800ef7c:	4629      	mov	r1, r5
 800ef7e:	f7ff f923 	bl	800e1c8 <_malloc_r>
 800ef82:	4606      	mov	r6, r0
 800ef84:	b950      	cbnz	r0, 800ef9c <__ssputs_r+0x5c>
 800ef86:	230c      	movs	r3, #12
 800ef88:	f8ca 3000 	str.w	r3, [sl]
 800ef8c:	89a3      	ldrh	r3, [r4, #12]
 800ef8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef92:	81a3      	strh	r3, [r4, #12]
 800ef94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef9c:	6921      	ldr	r1, [r4, #16]
 800ef9e:	464a      	mov	r2, r9
 800efa0:	f7ff f8ac 	bl	800e0fc <memcpy>
 800efa4:	89a3      	ldrh	r3, [r4, #12]
 800efa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800efaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efae:	81a3      	strh	r3, [r4, #12]
 800efb0:	6126      	str	r6, [r4, #16]
 800efb2:	6165      	str	r5, [r4, #20]
 800efb4:	444e      	add	r6, r9
 800efb6:	eba5 0509 	sub.w	r5, r5, r9
 800efba:	6026      	str	r6, [r4, #0]
 800efbc:	60a5      	str	r5, [r4, #8]
 800efbe:	463e      	mov	r6, r7
 800efc0:	42be      	cmp	r6, r7
 800efc2:	d900      	bls.n	800efc6 <__ssputs_r+0x86>
 800efc4:	463e      	mov	r6, r7
 800efc6:	4632      	mov	r2, r6
 800efc8:	6820      	ldr	r0, [r4, #0]
 800efca:	4641      	mov	r1, r8
 800efcc:	f7ff ff6c 	bl	800eea8 <memmove>
 800efd0:	68a3      	ldr	r3, [r4, #8]
 800efd2:	6822      	ldr	r2, [r4, #0]
 800efd4:	1b9b      	subs	r3, r3, r6
 800efd6:	4432      	add	r2, r6
 800efd8:	60a3      	str	r3, [r4, #8]
 800efda:	6022      	str	r2, [r4, #0]
 800efdc:	2000      	movs	r0, #0
 800efde:	e7db      	b.n	800ef98 <__ssputs_r+0x58>
 800efe0:	462a      	mov	r2, r5
 800efe2:	f7ff ff87 	bl	800eef4 <_realloc_r>
 800efe6:	4606      	mov	r6, r0
 800efe8:	2800      	cmp	r0, #0
 800efea:	d1e1      	bne.n	800efb0 <__ssputs_r+0x70>
 800efec:	6921      	ldr	r1, [r4, #16]
 800efee:	4650      	mov	r0, sl
 800eff0:	f7ff f89a 	bl	800e128 <_free_r>
 800eff4:	e7c7      	b.n	800ef86 <__ssputs_r+0x46>
	...

0800eff8 <_svfiprintf_r>:
 800eff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effc:	4698      	mov	r8, r3
 800effe:	898b      	ldrh	r3, [r1, #12]
 800f000:	061b      	lsls	r3, r3, #24
 800f002:	b09d      	sub	sp, #116	; 0x74
 800f004:	4607      	mov	r7, r0
 800f006:	460d      	mov	r5, r1
 800f008:	4614      	mov	r4, r2
 800f00a:	d50e      	bpl.n	800f02a <_svfiprintf_r+0x32>
 800f00c:	690b      	ldr	r3, [r1, #16]
 800f00e:	b963      	cbnz	r3, 800f02a <_svfiprintf_r+0x32>
 800f010:	2140      	movs	r1, #64	; 0x40
 800f012:	f7ff f8d9 	bl	800e1c8 <_malloc_r>
 800f016:	6028      	str	r0, [r5, #0]
 800f018:	6128      	str	r0, [r5, #16]
 800f01a:	b920      	cbnz	r0, 800f026 <_svfiprintf_r+0x2e>
 800f01c:	230c      	movs	r3, #12
 800f01e:	603b      	str	r3, [r7, #0]
 800f020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f024:	e0d1      	b.n	800f1ca <_svfiprintf_r+0x1d2>
 800f026:	2340      	movs	r3, #64	; 0x40
 800f028:	616b      	str	r3, [r5, #20]
 800f02a:	2300      	movs	r3, #0
 800f02c:	9309      	str	r3, [sp, #36]	; 0x24
 800f02e:	2320      	movs	r3, #32
 800f030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f034:	f8cd 800c 	str.w	r8, [sp, #12]
 800f038:	2330      	movs	r3, #48	; 0x30
 800f03a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f1e4 <_svfiprintf_r+0x1ec>
 800f03e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f042:	f04f 0901 	mov.w	r9, #1
 800f046:	4623      	mov	r3, r4
 800f048:	469a      	mov	sl, r3
 800f04a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f04e:	b10a      	cbz	r2, 800f054 <_svfiprintf_r+0x5c>
 800f050:	2a25      	cmp	r2, #37	; 0x25
 800f052:	d1f9      	bne.n	800f048 <_svfiprintf_r+0x50>
 800f054:	ebba 0b04 	subs.w	fp, sl, r4
 800f058:	d00b      	beq.n	800f072 <_svfiprintf_r+0x7a>
 800f05a:	465b      	mov	r3, fp
 800f05c:	4622      	mov	r2, r4
 800f05e:	4629      	mov	r1, r5
 800f060:	4638      	mov	r0, r7
 800f062:	f7ff ff6d 	bl	800ef40 <__ssputs_r>
 800f066:	3001      	adds	r0, #1
 800f068:	f000 80aa 	beq.w	800f1c0 <_svfiprintf_r+0x1c8>
 800f06c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f06e:	445a      	add	r2, fp
 800f070:	9209      	str	r2, [sp, #36]	; 0x24
 800f072:	f89a 3000 	ldrb.w	r3, [sl]
 800f076:	2b00      	cmp	r3, #0
 800f078:	f000 80a2 	beq.w	800f1c0 <_svfiprintf_r+0x1c8>
 800f07c:	2300      	movs	r3, #0
 800f07e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f086:	f10a 0a01 	add.w	sl, sl, #1
 800f08a:	9304      	str	r3, [sp, #16]
 800f08c:	9307      	str	r3, [sp, #28]
 800f08e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f092:	931a      	str	r3, [sp, #104]	; 0x68
 800f094:	4654      	mov	r4, sl
 800f096:	2205      	movs	r2, #5
 800f098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f09c:	4851      	ldr	r0, [pc, #324]	; (800f1e4 <_svfiprintf_r+0x1ec>)
 800f09e:	f7f1 f8cf 	bl	8000240 <memchr>
 800f0a2:	9a04      	ldr	r2, [sp, #16]
 800f0a4:	b9d8      	cbnz	r0, 800f0de <_svfiprintf_r+0xe6>
 800f0a6:	06d0      	lsls	r0, r2, #27
 800f0a8:	bf44      	itt	mi
 800f0aa:	2320      	movmi	r3, #32
 800f0ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0b0:	0711      	lsls	r1, r2, #28
 800f0b2:	bf44      	itt	mi
 800f0b4:	232b      	movmi	r3, #43	; 0x2b
 800f0b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0ba:	f89a 3000 	ldrb.w	r3, [sl]
 800f0be:	2b2a      	cmp	r3, #42	; 0x2a
 800f0c0:	d015      	beq.n	800f0ee <_svfiprintf_r+0xf6>
 800f0c2:	9a07      	ldr	r2, [sp, #28]
 800f0c4:	4654      	mov	r4, sl
 800f0c6:	2000      	movs	r0, #0
 800f0c8:	f04f 0c0a 	mov.w	ip, #10
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0d2:	3b30      	subs	r3, #48	; 0x30
 800f0d4:	2b09      	cmp	r3, #9
 800f0d6:	d94e      	bls.n	800f176 <_svfiprintf_r+0x17e>
 800f0d8:	b1b0      	cbz	r0, 800f108 <_svfiprintf_r+0x110>
 800f0da:	9207      	str	r2, [sp, #28]
 800f0dc:	e014      	b.n	800f108 <_svfiprintf_r+0x110>
 800f0de:	eba0 0308 	sub.w	r3, r0, r8
 800f0e2:	fa09 f303 	lsl.w	r3, r9, r3
 800f0e6:	4313      	orrs	r3, r2
 800f0e8:	9304      	str	r3, [sp, #16]
 800f0ea:	46a2      	mov	sl, r4
 800f0ec:	e7d2      	b.n	800f094 <_svfiprintf_r+0x9c>
 800f0ee:	9b03      	ldr	r3, [sp, #12]
 800f0f0:	1d19      	adds	r1, r3, #4
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	9103      	str	r1, [sp, #12]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	bfbb      	ittet	lt
 800f0fa:	425b      	neglt	r3, r3
 800f0fc:	f042 0202 	orrlt.w	r2, r2, #2
 800f100:	9307      	strge	r3, [sp, #28]
 800f102:	9307      	strlt	r3, [sp, #28]
 800f104:	bfb8      	it	lt
 800f106:	9204      	strlt	r2, [sp, #16]
 800f108:	7823      	ldrb	r3, [r4, #0]
 800f10a:	2b2e      	cmp	r3, #46	; 0x2e
 800f10c:	d10c      	bne.n	800f128 <_svfiprintf_r+0x130>
 800f10e:	7863      	ldrb	r3, [r4, #1]
 800f110:	2b2a      	cmp	r3, #42	; 0x2a
 800f112:	d135      	bne.n	800f180 <_svfiprintf_r+0x188>
 800f114:	9b03      	ldr	r3, [sp, #12]
 800f116:	1d1a      	adds	r2, r3, #4
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	9203      	str	r2, [sp, #12]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	bfb8      	it	lt
 800f120:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f124:	3402      	adds	r4, #2
 800f126:	9305      	str	r3, [sp, #20]
 800f128:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f1f4 <_svfiprintf_r+0x1fc>
 800f12c:	7821      	ldrb	r1, [r4, #0]
 800f12e:	2203      	movs	r2, #3
 800f130:	4650      	mov	r0, sl
 800f132:	f7f1 f885 	bl	8000240 <memchr>
 800f136:	b140      	cbz	r0, 800f14a <_svfiprintf_r+0x152>
 800f138:	2340      	movs	r3, #64	; 0x40
 800f13a:	eba0 000a 	sub.w	r0, r0, sl
 800f13e:	fa03 f000 	lsl.w	r0, r3, r0
 800f142:	9b04      	ldr	r3, [sp, #16]
 800f144:	4303      	orrs	r3, r0
 800f146:	3401      	adds	r4, #1
 800f148:	9304      	str	r3, [sp, #16]
 800f14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f14e:	4826      	ldr	r0, [pc, #152]	; (800f1e8 <_svfiprintf_r+0x1f0>)
 800f150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f154:	2206      	movs	r2, #6
 800f156:	f7f1 f873 	bl	8000240 <memchr>
 800f15a:	2800      	cmp	r0, #0
 800f15c:	d038      	beq.n	800f1d0 <_svfiprintf_r+0x1d8>
 800f15e:	4b23      	ldr	r3, [pc, #140]	; (800f1ec <_svfiprintf_r+0x1f4>)
 800f160:	bb1b      	cbnz	r3, 800f1aa <_svfiprintf_r+0x1b2>
 800f162:	9b03      	ldr	r3, [sp, #12]
 800f164:	3307      	adds	r3, #7
 800f166:	f023 0307 	bic.w	r3, r3, #7
 800f16a:	3308      	adds	r3, #8
 800f16c:	9303      	str	r3, [sp, #12]
 800f16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f170:	4433      	add	r3, r6
 800f172:	9309      	str	r3, [sp, #36]	; 0x24
 800f174:	e767      	b.n	800f046 <_svfiprintf_r+0x4e>
 800f176:	fb0c 3202 	mla	r2, ip, r2, r3
 800f17a:	460c      	mov	r4, r1
 800f17c:	2001      	movs	r0, #1
 800f17e:	e7a5      	b.n	800f0cc <_svfiprintf_r+0xd4>
 800f180:	2300      	movs	r3, #0
 800f182:	3401      	adds	r4, #1
 800f184:	9305      	str	r3, [sp, #20]
 800f186:	4619      	mov	r1, r3
 800f188:	f04f 0c0a 	mov.w	ip, #10
 800f18c:	4620      	mov	r0, r4
 800f18e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f192:	3a30      	subs	r2, #48	; 0x30
 800f194:	2a09      	cmp	r2, #9
 800f196:	d903      	bls.n	800f1a0 <_svfiprintf_r+0x1a8>
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d0c5      	beq.n	800f128 <_svfiprintf_r+0x130>
 800f19c:	9105      	str	r1, [sp, #20]
 800f19e:	e7c3      	b.n	800f128 <_svfiprintf_r+0x130>
 800f1a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	e7f0      	b.n	800f18c <_svfiprintf_r+0x194>
 800f1aa:	ab03      	add	r3, sp, #12
 800f1ac:	9300      	str	r3, [sp, #0]
 800f1ae:	462a      	mov	r2, r5
 800f1b0:	4b0f      	ldr	r3, [pc, #60]	; (800f1f0 <_svfiprintf_r+0x1f8>)
 800f1b2:	a904      	add	r1, sp, #16
 800f1b4:	4638      	mov	r0, r7
 800f1b6:	f3af 8000 	nop.w
 800f1ba:	1c42      	adds	r2, r0, #1
 800f1bc:	4606      	mov	r6, r0
 800f1be:	d1d6      	bne.n	800f16e <_svfiprintf_r+0x176>
 800f1c0:	89ab      	ldrh	r3, [r5, #12]
 800f1c2:	065b      	lsls	r3, r3, #25
 800f1c4:	f53f af2c 	bmi.w	800f020 <_svfiprintf_r+0x28>
 800f1c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1ca:	b01d      	add	sp, #116	; 0x74
 800f1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d0:	ab03      	add	r3, sp, #12
 800f1d2:	9300      	str	r3, [sp, #0]
 800f1d4:	462a      	mov	r2, r5
 800f1d6:	4b06      	ldr	r3, [pc, #24]	; (800f1f0 <_svfiprintf_r+0x1f8>)
 800f1d8:	a904      	add	r1, sp, #16
 800f1da:	4638      	mov	r0, r7
 800f1dc:	f7ff fa16 	bl	800e60c <_printf_i>
 800f1e0:	e7eb      	b.n	800f1ba <_svfiprintf_r+0x1c2>
 800f1e2:	bf00      	nop
 800f1e4:	0800fd84 	.word	0x0800fd84
 800f1e8:	0800fd8e 	.word	0x0800fd8e
 800f1ec:	00000000 	.word	0x00000000
 800f1f0:	0800ef41 	.word	0x0800ef41
 800f1f4:	0800fd8a 	.word	0x0800fd8a

0800f1f8 <_read_r>:
 800f1f8:	b538      	push	{r3, r4, r5, lr}
 800f1fa:	4d07      	ldr	r5, [pc, #28]	; (800f218 <_read_r+0x20>)
 800f1fc:	4604      	mov	r4, r0
 800f1fe:	4608      	mov	r0, r1
 800f200:	4611      	mov	r1, r2
 800f202:	2200      	movs	r2, #0
 800f204:	602a      	str	r2, [r5, #0]
 800f206:	461a      	mov	r2, r3
 800f208:	f7f6 fd86 	bl	8005d18 <_read>
 800f20c:	1c43      	adds	r3, r0, #1
 800f20e:	d102      	bne.n	800f216 <_read_r+0x1e>
 800f210:	682b      	ldr	r3, [r5, #0]
 800f212:	b103      	cbz	r3, 800f216 <_read_r+0x1e>
 800f214:	6023      	str	r3, [r4, #0]
 800f216:	bd38      	pop	{r3, r4, r5, pc}
 800f218:	20005cbc 	.word	0x20005cbc

0800f21c <_malloc_usable_size_r>:
 800f21c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f220:	1f18      	subs	r0, r3, #4
 800f222:	2b00      	cmp	r3, #0
 800f224:	bfbc      	itt	lt
 800f226:	580b      	ldrlt	r3, [r1, r0]
 800f228:	18c0      	addlt	r0, r0, r3
 800f22a:	4770      	bx	lr

0800f22c <_init>:
 800f22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22e:	bf00      	nop
 800f230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f232:	bc08      	pop	{r3}
 800f234:	469e      	mov	lr, r3
 800f236:	4770      	bx	lr

0800f238 <_fini>:
 800f238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f23a:	bf00      	nop
 800f23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f23e:	bc08      	pop	{r3}
 800f240:	469e      	mov	lr, r3
 800f242:	4770      	bx	lr
