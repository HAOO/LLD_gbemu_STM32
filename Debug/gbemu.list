
gbemu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012384  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000948  08012584  08012584  00022584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ecc  08012ecc  00030a40  2**0
                  CONTENTS
  4 .ARM          00000008  08012ecc  08012ecc  00022ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ed4  08012ed4  00030a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ed4  08012ed4  00022ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ed8  08012ed8  00022ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a40  20000000  08012edc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000922c  20000a40  0801391c  00030a40  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20009c6c  0801391c  00039c6c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030a40  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a8f0  00000000  00000000  00030a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008349  00000000  00000000  0006b35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c8  00000000  00000000  000736a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001eb8  00000000  00000000  00075870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000383b6  00000000  00000000  00077728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ee3b  00000000  00000000  000afade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d32f  00000000  00000000  000de919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020bc48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093d0  00000000  00000000  0020bc9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000a40 	.word	0x20000a40
 800021c:	00000000 	.word	0x00000000
 8000220:	0801256c 	.word	0x0801256c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000a44 	.word	0x20000a44
 800023c:	0801256c 	.word	0x0801256c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <bus_read>:
// 0xFE00 - 0xFE9F : Object Attribute Memory
// 0xFEA0 - 0xFEFF : Reserved - Unusable
// 0xFF00 - 0xFF7F : I/O Registers
// 0xFF80 - 0xFFFE : Zero Page

u8 bus_read(u16 address) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
    if (address < 0x8000) {
 80005e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db05      	blt.n	80005f6 <bus_read+0x1e>
        //ROM Data
        return cart_read(address);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fb65 	bl	8000cbc <cart_read>
 80005f2:	4603      	mov	r3, r0
 80005f4:	e054      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xA000) {
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80005fc:	d205      	bcs.n	800060a <bus_read+0x32>
        //Char/Map Data
        return ppu_vram_read(address);
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fe21 	bl	8004248 <ppu_vram_read>
 8000606:	4603      	mov	r3, r0
 8000608:	e04a      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xC000) {
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000610:	d205      	bcs.n	800061e <bus_read+0x46>
        //Cartridge RAM
        return cart_read(address);
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fb51 	bl	8000cbc <cart_read>
 800061a:	4603      	mov	r3, r0
 800061c:	e040      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xE000) {
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8000624:	d205      	bcs.n	8000632 <bus_read+0x5a>
        //WRAM (Working RAM)
        return wram_read(address);
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	4618      	mov	r0, r3
 800062a:	f004 fe73 	bl	8005314 <wram_read>
 800062e:	4603      	mov	r3, r0
 8000630:	e036      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xFE00) {
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 8000638:	d201      	bcs.n	800063e <bus_read+0x66>
        //reserved echo ram...
        return 0;
 800063a:	2300      	movs	r3, #0
 800063c:	e030      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xFEA0) {
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	f64f 629f 	movw	r2, #65183	; 0xfe9f
 8000644:	4293      	cmp	r3, r2
 8000646:	d80c      	bhi.n	8000662 <bus_read+0x8a>
        //OAM
        if (dma_transferring()) {
 8000648:	f002 fb8e 	bl	8002d68 <dma_transferring>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <bus_read+0x7e>
            return 0xFF;
 8000652:	23ff      	movs	r3, #255	; 0xff
 8000654:	e024      	b.n	80006a0 <bus_read+0xc8>
        }

        return ppu_oam_read(address);
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	4618      	mov	r0, r3
 800065a:	f003 fdc1 	bl	80041e0 <ppu_oam_read>
 800065e:	4603      	mov	r3, r0
 8000660:	e01e      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xFF00) {
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8000668:	d201      	bcs.n	800066e <bus_read+0x96>
        //reserved unusable...
        return 0;
 800066a:	2300      	movs	r3, #0
 800066c:	e018      	b.n	80006a0 <bus_read+0xc8>
    } else if (address < 0xFF80) {
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8000674:	4293      	cmp	r3, r2
 8000676:	d805      	bhi.n	8000684 <bus_read+0xac>
        //IO Registers...
        return io_read(address);
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	4618      	mov	r0, r3
 800067c:	f002 fd80 	bl	8003180 <io_read>
 8000680:	4603      	mov	r3, r0
 8000682:	e00d      	b.n	80006a0 <bus_read+0xc8>
    } else if (address == 0xFFFF) {
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800068a:	4293      	cmp	r3, r2
 800068c:	d103      	bne.n	8000696 <bus_read+0xbe>
        //CPU ENABLE REGISTER...
        return cpu_get_ie_register();
 800068e:	f000 fce5 	bl	800105c <cpu_get_ie_register>
 8000692:	4603      	mov	r3, r0
 8000694:	e004      	b.n	80006a0 <bus_read+0xc8>
    }

    //NO_IMPL
    return hram_read(address);
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	4618      	mov	r0, r3
 800069a:	f004 fe77 	bl	800538c <hram_read>
 800069e:	4603      	mov	r3, r0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <bus_write>:

void bus_write(u16 address, u8 value) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	460a      	mov	r2, r1
 80006b2:	80fb      	strh	r3, [r7, #6]
 80006b4:	4613      	mov	r3, r2
 80006b6:	717b      	strb	r3, [r7, #5]
    if (address < 0x8000) {
 80006b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db06      	blt.n	80006ce <bus_write+0x26>
        //ROM Data
        cart_write(address, value);
 80006c0:	797a      	ldrb	r2, [r7, #5]
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fb3e 	bl	8000d48 <cart_write>
 80006cc:	e057      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xA000) {
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80006d4:	d206      	bcs.n	80006e4 <bus_write+0x3c>
        //Char/Map Data
        ppu_vram_write(address, value);
 80006d6:	797a      	ldrb	r2, [r7, #5]
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fd9b 	bl	8004218 <ppu_vram_write>
 80006e2:	e04c      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xC000) {
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80006ea:	d206      	bcs.n	80006fa <bus_write+0x52>
        //EXT-RAM
        cart_write(address, value);
 80006ec:	797a      	ldrb	r2, [r7, #5]
 80006ee:	88fb      	ldrh	r3, [r7, #6]
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fb28 	bl	8000d48 <cart_write>
 80006f8:	e041      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xE000) {
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8000700:	d206      	bcs.n	8000710 <bus_write+0x68>
        //WRAM
        wram_write(address, value);
 8000702:	797a      	ldrb	r2, [r7, #5]
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f004 fe27 	bl	800535c <wram_write>
 800070e:	e036      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xFE00) {
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 8000716:	d332      	bcc.n	800077e <bus_write+0xd6>
        //reserved echo ram
    } else if (address < 0xFEA0) {
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	f64f 629f 	movw	r2, #65183	; 0xfe9f
 800071e:	4293      	cmp	r3, r2
 8000720:	d80b      	bhi.n	800073a <bus_write+0x92>
        //OAM
        if (dma_transferring()) {
 8000722:	f002 fb21 	bl	8002d68 <dma_transferring>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d127      	bne.n	800077c <bus_write+0xd4>
            return;
        }
        
        ppu_oam_write(address, value);
 800072c:	797a      	ldrb	r2, [r7, #5]
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f003 fd34 	bl	80041a0 <ppu_oam_write>
 8000738:	e021      	b.n	800077e <bus_write+0xd6>
    } else if (address < 0xFF00) {
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8000740:	d31d      	bcc.n	800077e <bus_write+0xd6>
        //unusable reserved
    } else if (address < 0xFF80) {
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8000748:	4293      	cmp	r3, r2
 800074a:	d806      	bhi.n	800075a <bus_write+0xb2>
        //IO Registers...
        io_write(address, value);
 800074c:	797a      	ldrb	r2, [r7, #5]
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fd74 	bl	8003240 <io_write>
 8000758:	e011      	b.n	800077e <bus_write+0xd6>
    } else if (address == 0xFFFF) {
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000760:	4293      	cmp	r3, r2
 8000762:	d104      	bne.n	800076e <bus_write+0xc6>
        //CPU SET ENABLE REGISTER
        
        cpu_set_ie_register(value);
 8000764:	797b      	ldrb	r3, [r7, #5]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fc84 	bl	8001074 <cpu_set_ie_register>
 800076c:	e007      	b.n	800077e <bus_write+0xd6>
    } else {
        hram_write(address, value);
 800076e:	797a      	ldrb	r2, [r7, #5]
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	4611      	mov	r1, r2
 8000774:	4618      	mov	r0, r3
 8000776:	f004 fe1f 	bl	80053b8 <hram_write>
 800077a:	e000      	b.n	800077e <bus_write+0xd6>
            return;
 800077c:	bf00      	nop
    }
}
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <bus_write16>:
    u16 hi = bus_read(address + 1);

    return lo | (hi << 8);
}

void bus_write16(u16 address, u16 value) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	80fb      	strh	r3, [r7, #6]
 8000790:	4613      	mov	r3, r2
 8000792:	80bb      	strh	r3, [r7, #4]
    bus_write(address + 1, (value >> 8) & 0xFF);
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	3301      	adds	r3, #1
 8000798:	b29a      	uxth	r2, r3
 800079a:	88bb      	ldrh	r3, [r7, #4]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	b29b      	uxth	r3, r3
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	4619      	mov	r1, r3
 80007a4:	4610      	mov	r0, r2
 80007a6:	f7ff ff7f 	bl	80006a8 <bus_write>
    bus_write(address, value & 0xFF);
 80007aa:	88bb      	ldrh	r3, [r7, #4]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff78 	bl	80006a8 <bus_write>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <cart_need_save>:
    bool need_save; //should save battery backup.
} cart_context;

static cart_context ctx;

bool cart_need_save() {
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
    return ctx.need_save;
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <cart_need_save+0x14>)
 80007c6:	f893 345d 	ldrb.w	r3, [r3, #1117]	; 0x45d
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	20000a5c 	.word	0x20000a5c

080007d8 <cart_mbc1>:

bool cart_mbc1() {
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
    return BETWEEN(ctx.header->type, 1, 3);
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <cart_mbc1+0x38>)
 80007de:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80007e2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d008      	beq.n	80007fc <cart_mbc1+0x24>
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <cart_mbc1+0x38>)
 80007ec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80007f0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d801      	bhi.n	80007fc <cart_mbc1+0x24>
 80007f8:	2301      	movs	r3, #1
 80007fa:	e000      	b.n	80007fe <cart_mbc1+0x26>
 80007fc:	2300      	movs	r3, #0
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	b2db      	uxtb	r3, r3
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000a5c 	.word	0x20000a5c

08000814 <cart_battery>:

bool cart_battery() {
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
    //mbc1 only for now...
    return ctx.header->type == 3;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <cart_battery+0x24>)
 800081a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800081e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000822:	2b03      	cmp	r3, #3
 8000824:	bf0c      	ite	eq
 8000826:	2301      	moveq	r3, #1
 8000828:	2300      	movne	r3, #0
 800082a:	b2db      	uxtb	r3, r3
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000a5c 	.word	0x20000a5c

0800083c <cart_lic_name>:
    [0x97] = "Kaneko",
    [0x99] = "Pack in soft",
    [0xA4] = "Konami (Yu-Gi-Oh!)"
};

const char *cart_lic_name() {
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
    if (ctx.header->new_lic_code <= 0xA4) {
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <cart_lic_name+0x34>)
 8000842:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000846:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800084a:	2ba4      	cmp	r3, #164	; 0xa4
 800084c:	d809      	bhi.n	8000862 <cart_lic_name+0x26>
        return LIC_CODE[ctx.header->lic_code];
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <cart_lic_name+0x34>)
 8000850:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000854:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8000858:	461a      	mov	r2, r3
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <cart_lic_name+0x38>)
 800085c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000860:	e000      	b.n	8000864 <cart_lic_name+0x28>
    }

    return "UNKNOWN";
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <cart_lic_name+0x3c>)
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000a5c 	.word	0x20000a5c
 8000874:	2000008c 	.word	0x2000008c
 8000878:	08012a00 	.word	0x08012a00

0800087c <cart_type_name>:

const char *cart_type_name() {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
    if (ctx.header->type <= 0x22) {
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <cart_type_name+0x34>)
 8000882:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000886:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800088a:	2b22      	cmp	r3, #34	; 0x22
 800088c:	d809      	bhi.n	80008a2 <cart_type_name+0x26>
        return ROM_TYPES[ctx.header->type];
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <cart_type_name+0x34>)
 8000890:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000894:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000898:	461a      	mov	r2, r3
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <cart_type_name+0x38>)
 800089c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a0:	e000      	b.n	80008a4 <cart_type_name+0x28>
    }

    return "UNKNOWN";
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <cart_type_name+0x3c>)
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000a5c 	.word	0x20000a5c
 80008b4:	20000000 	.word	0x20000000
 80008b8:	08012a00 	.word	0x08012a00

080008bc <cart_setup_banking>:

void cart_setup_banking() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
    for (int i=0; i<16; i++) {
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	e04c      	b.n	8000962 <cart_setup_banking+0xa6>
        ctx.ram_banks[i] = 0;
 80008c8:	4a30      	ldr	r2, [pc, #192]	; (800098c <cart_setup_banking+0xd0>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f503 7383 	add.w	r3, r3, #262	; 0x106
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]

        if ((ctx.header->ram_size == 2 && i == 0) ||
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <cart_setup_banking+0xd0>)
 80008da:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80008de:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d102      	bne.n	80008ec <cart_setup_banking+0x30>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d01d      	beq.n	8000928 <cart_setup_banking+0x6c>
            (ctx.header->ram_size == 3 && i < 4) || 
 80008ec:	4b27      	ldr	r3, [pc, #156]	; (800098c <cart_setup_banking+0xd0>)
 80008ee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80008f2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
        if ((ctx.header->ram_size == 2 && i == 0) ||
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d102      	bne.n	8000900 <cart_setup_banking+0x44>
            (ctx.header->ram_size == 3 && i < 4) || 
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	dd13      	ble.n	8000928 <cart_setup_banking+0x6c>
            (ctx.header->ram_size == 4 && i < 16) || 
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <cart_setup_banking+0xd0>)
 8000902:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000906:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
            (ctx.header->ram_size == 3 && i < 4) || 
 800090a:	2b04      	cmp	r3, #4
 800090c:	d102      	bne.n	8000914 <cart_setup_banking+0x58>
            (ctx.header->ram_size == 4 && i < 16) || 
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	dd09      	ble.n	8000928 <cart_setup_banking+0x6c>
            (ctx.header->ram_size == 5 && i < 8)) {
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <cart_setup_banking+0xd0>)
 8000916:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800091a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
            (ctx.header->ram_size == 4 && i < 16) || 
 800091e:	2b05      	cmp	r3, #5
 8000920:	d11c      	bne.n	800095c <cart_setup_banking+0xa0>
            (ctx.header->ram_size == 5 && i < 8)) {
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b07      	cmp	r3, #7
 8000926:	dc19      	bgt.n	800095c <cart_setup_banking+0xa0>
            ctx.ram_banks[i] = malloc(0x2000);
 8000928:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800092c:	f010 fd0c 	bl	8011348 <malloc>
 8000930:	4603      	mov	r3, r0
 8000932:	4619      	mov	r1, r3
 8000934:	4a15      	ldr	r2, [pc, #84]	; (800098c <cart_setup_banking+0xd0>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f503 7383 	add.w	r3, r3, #262	; 0x106
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	6059      	str	r1, [r3, #4]
            memset(ctx.ram_banks[i], 0, 0x2000);
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <cart_setup_banking+0xd0>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f503 7383 	add.w	r3, r3, #262	; 0x106
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f010 fd14 	bl	8011384 <memset>
    for (int i=0; i<16; i++) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3301      	adds	r3, #1
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	ddaf      	ble.n	80008c8 <cart_setup_banking+0xc>
        }
    }

    ctx.ram_bank = ctx.ram_banks[0];
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <cart_setup_banking+0xd0>)
 800096a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800096e:	4a07      	ldr	r2, [pc, #28]	; (800098c <cart_setup_banking+0xd0>)
 8000970:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
    ctx.rom_bank_x = ctx.rom_data + 0x4000; //rom bank 1
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <cart_setup_banking+0xd0>)
 8000976:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800097a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800097e:	4a03      	ldr	r2, [pc, #12]	; (800098c <cart_setup_banking+0xd0>)
 8000980:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000a5c 	.word	0x20000a5c

08000990 <cart_load>:

bool cart_load(char *cart) {
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  snprintf(ctx.filename, sizeof(ctx.filename), "%s", cart);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a72      	ldr	r2, [pc, #456]	; (8000b64 <cart_load+0x1d4>)
 800099c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a0:	4871      	ldr	r0, [pc, #452]	; (8000b68 <cart_load+0x1d8>)
 80009a2:	f011 fa3d 	bl	8011e20 <sniprintf>

  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80009a6:	2200      	movs	r2, #0
 80009a8:	4970      	ldr	r1, [pc, #448]	; (8000b6c <cart_load+0x1dc>)
 80009aa:	4871      	ldr	r0, [pc, #452]	; (8000b70 <cart_load+0x1e0>)
 80009ac:	f00c fb52 	bl	800d054 <f_mount>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <cart_load+0x2a>
  {
      Error_Handler();
 80009b6:	f003 fb2d 	bl	8004014 <Error_Handler>
  }

  //Open file for writing (Create)
  if(f_open(&SDFile, "special.gb", FA_READ) != FR_OK)
 80009ba:	2201      	movs	r2, #1
 80009bc:	496d      	ldr	r1, [pc, #436]	; (8000b74 <cart_load+0x1e4>)
 80009be:	486e      	ldr	r0, [pc, #440]	; (8000b78 <cart_load+0x1e8>)
 80009c0:	f00c fbac 	bl	800d11c <f_open>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d005      	beq.n	80009d6 <cart_load+0x46>
  {
      printf("Failed to open: %s\n", cart);
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	486b      	ldr	r0, [pc, #428]	; (8000b7c <cart_load+0x1ec>)
 80009ce:	f011 f88b 	bl	8011ae8 <iprintf>
      Error_Handler();
 80009d2:	f003 fb1f 	bl	8004014 <Error_Handler>
  }

  printf("Opened: %s\n", ctx.filename);
 80009d6:	4964      	ldr	r1, [pc, #400]	; (8000b68 <cart_load+0x1d8>)
 80009d8:	4869      	ldr	r0, [pc, #420]	; (8000b80 <cart_load+0x1f0>)
 80009da:	f011 f885 	bl	8011ae8 <iprintf>


  ctx.rom_size = f_size(&SDFile);
 80009de:	4b66      	ldr	r3, [pc, #408]	; (8000b78 <cart_load+0x1e8>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	4a61      	ldr	r2, [pc, #388]	; (8000b68 <cart_load+0x1d8>)
 80009e4:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400


  ctx.rom_data = malloc(ctx.rom_size);
 80009e8:	4b5f      	ldr	r3, [pc, #380]	; (8000b68 <cart_load+0x1d8>)
 80009ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80009ee:	4618      	mov	r0, r3
 80009f0:	f010 fcaa 	bl	8011348 <malloc>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b5b      	ldr	r3, [pc, #364]	; (8000b68 <cart_load+0x1d8>)
 80009fa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  res = f_read(&SDFile, ctx.rom_data, ctx.rom_size, (void *)&bytesread);
 80009fe:	4b5a      	ldr	r3, [pc, #360]	; (8000b68 <cart_load+0x1d8>)
 8000a00:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 8000a04:	4b58      	ldr	r3, [pc, #352]	; (8000b68 <cart_load+0x1d8>)
 8000a06:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000a0a:	4b5e      	ldr	r3, [pc, #376]	; (8000b84 <cart_load+0x1f4>)
 8000a0c:	485a      	ldr	r0, [pc, #360]	; (8000b78 <cart_load+0x1e8>)
 8000a0e:	f00c fd4a 	bl	800d4a6 <f_read>
 8000a12:	4603      	mov	r3, r0
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b5c      	ldr	r3, [pc, #368]	; (8000b88 <cart_load+0x1f8>)
 8000a18:	701a      	strb	r2, [r3, #0]
  if(res != FR_OK)
 8000a1a:	4b5b      	ldr	r3, [pc, #364]	; (8000b88 <cart_load+0x1f8>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <cart_load+0x98>
  {
      Error_Handler();
 8000a22:	f003 faf7 	bl	8004014 <Error_Handler>
 8000a26:	e002      	b.n	8000a2e <cart_load+0x9e>
  }
  else
  {
      f_close(&SDFile);
 8000a28:	4853      	ldr	r0, [pc, #332]	; (8000b78 <cart_load+0x1e8>)
 8000a2a:	f00c ff33 	bl	800d894 <f_close>
  }

  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	484f      	ldr	r0, [pc, #316]	; (8000b70 <cart_load+0x1e0>)
 8000a34:	f00c fb0e 	bl	800d054 <f_mount>

  ctx.header = (rom_header *)(ctx.rom_data + 0x100);
 8000a38:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <cart_load+0x1d8>)
 8000a3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000a3e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a42:	4a49      	ldr	r2, [pc, #292]	; (8000b68 <cart_load+0x1d8>)
 8000a44:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
  ctx.header->title[15] = 0;
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <cart_load+0x1d8>)
 8000a4a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  ctx.battery = cart_battery();
 8000a54:	f7ff fede 	bl	8000814 <cart_battery>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b42      	ldr	r3, [pc, #264]	; (8000b68 <cart_load+0x1d8>)
 8000a5e:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
  ctx.need_save = false;
 8000a62:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <cart_load+0x1d8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d

  printf("Cartridge Loaded:\r\n");
 8000a6a:	4848      	ldr	r0, [pc, #288]	; (8000b8c <cart_load+0x1fc>)
 8000a6c:	f011 f8c2 	bl	8011bf4 <puts>
  printf("\t Title    : %s\r\n", ctx.header->title);
 8000a70:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <cart_load+0x1d8>)
 8000a72:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a76:	3334      	adds	r3, #52	; 0x34
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4845      	ldr	r0, [pc, #276]	; (8000b90 <cart_load+0x200>)
 8000a7c:	f011 f834 	bl	8011ae8 <iprintf>
  printf("\t Type     : %2.2X (%s)\r\n", ctx.header->type, cart_type_name());
 8000a80:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <cart_load+0x1d8>)
 8000a82:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a86:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000a8a:	461c      	mov	r4, r3
 8000a8c:	f7ff fef6 	bl	800087c <cart_type_name>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	4621      	mov	r1, r4
 8000a96:	483f      	ldr	r0, [pc, #252]	; (8000b94 <cart_load+0x204>)
 8000a98:	f011 f826 	bl	8011ae8 <iprintf>
  printf("\t ROM Size : %d KB\r\n", 32 << ctx.header->rom_size);
 8000a9c:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <cart_load+0x1d8>)
 8000a9e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000aa2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	4093      	lsls	r3, r2
 8000aac:	4619      	mov	r1, r3
 8000aae:	483a      	ldr	r0, [pc, #232]	; (8000b98 <cart_load+0x208>)
 8000ab0:	f011 f81a 	bl	8011ae8 <iprintf>
  printf("\t RAM Size : %2.2X\r\n", ctx.header->ram_size);
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <cart_load+0x1d8>)
 8000ab6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000aba:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4836      	ldr	r0, [pc, #216]	; (8000b9c <cart_load+0x20c>)
 8000ac2:	f011 f811 	bl	8011ae8 <iprintf>
  printf("\t LIC Code : %2.2X (%s)\r\n", ctx.header->lic_code, cart_lic_name());
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <cart_load+0x1d8>)
 8000ac8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000acc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8000ad0:	461c      	mov	r4, r3
 8000ad2:	f7ff feb3 	bl	800083c <cart_lic_name>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4621      	mov	r1, r4
 8000adc:	4830      	ldr	r0, [pc, #192]	; (8000ba0 <cart_load+0x210>)
 8000ade:	f011 f803 	bl	8011ae8 <iprintf>
  printf("\t ROM Vers : %2.2X\r\n", ctx.header->version);
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <cart_load+0x1d8>)
 8000ae4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000ae8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000aec:	4619      	mov	r1, r3
 8000aee:	482d      	ldr	r0, [pc, #180]	; (8000ba4 <cart_load+0x214>)
 8000af0:	f010 fffa 	bl	8011ae8 <iprintf>

  cart_setup_banking();
 8000af4:	f7ff fee2 	bl	80008bc <cart_setup_banking>

  u16 x = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	81fb      	strh	r3, [r7, #14]
  for (u16 i=0x0134; i<=0x014C; i++) {
 8000afc:	f44f 739a 	mov.w	r3, #308	; 0x134
 8000b00:	81bb      	strh	r3, [r7, #12]
 8000b02:	e00e      	b.n	8000b22 <cart_load+0x192>
      x = x - ctx.rom_data[i] - 1;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <cart_load+0x1d8>)
 8000b06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000b0a:	89bb      	ldrh	r3, [r7, #12]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	89fa      	ldrh	r2, [r7, #14]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	81fb      	strh	r3, [r7, #14]
  for (u16 i=0x0134; i<=0x014C; i++) {
 8000b1c:	89bb      	ldrh	r3, [r7, #12]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	81bb      	strh	r3, [r7, #12]
 8000b22:	89bb      	ldrh	r3, [r7, #12]
 8000b24:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 8000b28:	d9ec      	bls.n	8000b04 <cart_load+0x174>
  }

  printf("\t Checksum : %2.2X (%s)\r\n", ctx.header->checksum, (x & 0xFF) ? "PASSED" : "FAILED");
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <cart_load+0x1d8>)
 8000b2c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000b30:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000b34:	4619      	mov	r1, r3
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <cart_load+0x1b2>
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <cart_load+0x218>)
 8000b40:	e000      	b.n	8000b44 <cart_load+0x1b4>
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <cart_load+0x21c>)
 8000b44:	461a      	mov	r2, r3
 8000b46:	481a      	ldr	r0, [pc, #104]	; (8000bb0 <cart_load+0x220>)
 8000b48:	f010 ffce 	bl	8011ae8 <iprintf>

  if (ctx.battery) {
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <cart_load+0x1d8>)
 8000b4e:	f893 345c 	ldrb.w	r3, [r3, #1116]	; 0x45c
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <cart_load+0x1ca>
      cart_battery_load();
 8000b56:	f000 f82d 	bl	8000bb4 <cart_battery_load>
  }

  return true;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	08012a08 	.word	0x08012a08
 8000b68:	20000a5c 	.word	0x20000a5c
 8000b6c:	200097b4 	.word	0x200097b4
 8000b70:	200099e8 	.word	0x200099e8
 8000b74:	08012a0c 	.word	0x08012a0c
 8000b78:	200097b8 	.word	0x200097b8
 8000b7c:	08012a18 	.word	0x08012a18
 8000b80:	08012a2c 	.word	0x08012a2c
 8000b84:	20009558 	.word	0x20009558
 8000b88:	2000955c 	.word	0x2000955c
 8000b8c:	08012a38 	.word	0x08012a38
 8000b90:	08012a4c 	.word	0x08012a4c
 8000b94:	08012a60 	.word	0x08012a60
 8000b98:	08012a7c 	.word	0x08012a7c
 8000b9c:	08012a94 	.word	0x08012a94
 8000ba0:	08012aac 	.word	0x08012aac
 8000ba4:	08012ac8 	.word	0x08012ac8
 8000ba8:	08012ae0 	.word	0x08012ae0
 8000bac:	08012ae8 	.word	0x08012ae8
 8000bb0:	08012af0 	.word	0x08012af0

08000bb4 <cart_battery_load>:

void cart_battery_load() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000bba:	af00      	add	r7, sp, #0
    if (!ctx.ram_bank) {
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <cart_battery_load+0x70>)
 8000bbe:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d028      	beq.n	8000c18 <cart_battery_load+0x64>
        return;
    }

    char fn[1048];
    sprintf(fn, "%s.battery", ctx.filename);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <cart_battery_load+0x70>)
 8000bca:	4917      	ldr	r1, [pc, #92]	; (8000c28 <cart_battery_load+0x74>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f011 f95b 	bl	8011e88 <siprintf>
    FILE *fp = fopen(fn, "rb");
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4915      	ldr	r1, [pc, #84]	; (8000c2c <cart_battery_load+0x78>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f010 f8d4 	bl	8010d84 <fopen>
 8000bdc:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c

    if (!fp) {
 8000be0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d108      	bne.n	8000bfa <cart_battery_load+0x46>
        fprintf(stderr, "FAILED TO OPEN: %s\n", fn);
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <cart_battery_load+0x7c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	1d3a      	adds	r2, r7, #4
 8000bf0:	4910      	ldr	r1, [pc, #64]	; (8000c34 <cart_battery_load+0x80>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f010 f8ce 	bl	8010d94 <fiprintf>
        return;
 8000bf8:	e00f      	b.n	8000c1a <cart_battery_load+0x66>
    }

    fread(ctx.ram_bank, 0x2000, 1, fp);
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <cart_battery_load+0x70>)
 8000bfc:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 8000c00:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	f010 f949 	bl	8010ea0 <fread>
    fclose(fp);
 8000c0e:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8000c12:	f00f feb1 	bl	8010978 <fclose>
 8000c16:	e000      	b.n	8000c1a <cart_battery_load+0x66>
        return;
 8000c18:	bf00      	nop
}
 8000c1a:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000a5c 	.word	0x20000a5c
 8000c28:	08012b0c 	.word	0x08012b0c
 8000c2c:	08012b18 	.word	0x08012b18
 8000c30:	200009dc 	.word	0x200009dc
 8000c34:	08012b1c 	.word	0x08012b1c

08000c38 <cart_battery_save>:

void cart_battery_save() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000c3e:	af00      	add	r7, sp, #0
    if (!ctx.ram_bank) {
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <cart_battery_save+0x70>)
 8000c42:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d028      	beq.n	8000c9c <cart_battery_save+0x64>
        return;
    }

    char fn[1048];
    sprintf(fn, "%s.battery", ctx.filename);
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <cart_battery_save+0x70>)
 8000c4e:	4917      	ldr	r1, [pc, #92]	; (8000cac <cart_battery_save+0x74>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f011 f919 	bl	8011e88 <siprintf>
    FILE *fp = fopen(fn, "wb");
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4915      	ldr	r1, [pc, #84]	; (8000cb0 <cart_battery_save+0x78>)
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f010 f892 	bl	8010d84 <fopen>
 8000c60:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c

    if (!fp) {
 8000c64:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d108      	bne.n	8000c7e <cart_battery_save+0x46>
        fprintf(stderr, "FAILED TO OPEN: %s\n", fn);
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <cart_battery_save+0x7c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	1d3a      	adds	r2, r7, #4
 8000c74:	4910      	ldr	r1, [pc, #64]	; (8000cb8 <cart_battery_save+0x80>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f010 f88c 	bl	8010d94 <fiprintf>
        return;
 8000c7c:	e00f      	b.n	8000c9e <cart_battery_save+0x66>
    }

    fwrite(ctx.ram_bank, 0x2000, 1, fp);
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <cart_battery_save+0x70>)
 8000c80:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 8000c84:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8e:	f010 fac1 	bl	8011214 <fwrite>
    fclose(fp);
 8000c92:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8000c96:	f00f fe6f 	bl	8010978 <fclose>
 8000c9a:	e000      	b.n	8000c9e <cart_battery_save+0x66>
        return;
 8000c9c:	bf00      	nop
}
 8000c9e:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000a5c 	.word	0x20000a5c
 8000cac:	08012b0c 	.word	0x08012b0c
 8000cb0:	08012b30 	.word	0x08012b30
 8000cb4:	200009dc 	.word	0x200009dc
 8000cb8:	08012b1c 	.word	0x08012b1c

08000cbc <cart_read>:

u8 cart_read(u16 address) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
    if (!cart_mbc1() || address < 0x4000) {
 8000cc6:	f7ff fd87 	bl	80007d8 <cart_mbc1>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f083 0301 	eor.w	r3, r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <cart_read+0x22>
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cdc:	d206      	bcs.n	8000cec <cart_read+0x30>
        return ctx.rom_data[address];
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <cart_read+0x88>)
 8000ce0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	e027      	b.n	8000d3c <cart_read+0x80>
    }

    if ((address & 0xE000) == 0xA000) {
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000cf2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000cf6:	d119      	bne.n	8000d2c <cart_read+0x70>
        if (!ctx.ram_enabled) {
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <cart_read+0x88>)
 8000cfa:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000cfe:	f083 0301 	eor.w	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <cart_read+0x50>
            return 0xFF;
 8000d08:	23ff      	movs	r3, #255	; 0xff
 8000d0a:	e017      	b.n	8000d3c <cart_read+0x80>
        }

        if (!ctx.ram_bank) {
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <cart_read+0x88>)
 8000d0e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <cart_read+0x5e>
            return 0xFF;
 8000d16:	23ff      	movs	r3, #255	; 0xff
 8000d18:	e010      	b.n	8000d3c <cart_read+0x80>
        }

        return ctx.ram_bank[address - 0xA000];
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <cart_read+0x88>)
 8000d1c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
 8000d26:	4413      	add	r3, r2
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	e007      	b.n	8000d3c <cart_read+0x80>
    }

    return ctx.rom_bank_x[address - 0x4000];
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <cart_read+0x88>)
 8000d2e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000d38:	4413      	add	r3, r2
 8000d3a:	781b      	ldrb	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000a5c 	.word	0x20000a5c

08000d48 <cart_write>:

void cart_write(u16 address, u8 value) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	80fb      	strh	r3, [r7, #6]
 8000d54:	4613      	mov	r3, r2
 8000d56:	717b      	strb	r3, [r7, #5]
    if (!cart_mbc1()) {
 8000d58:	f7ff fd3e 	bl	80007d8 <cart_mbc1>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f083 0301 	eor.w	r3, r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f040 80a8 	bne.w	8000eba <cart_write+0x172>
        return;
    }

    if (address < 0x2000) {
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d70:	d20a      	bcs.n	8000d88 <cart_write+0x40>
        ctx.ram_enabled = ((value & 0xF) == 0xA);
 8000d72:	797b      	ldrb	r3, [r7, #5]
 8000d74:	f003 030f 	and.w	r3, r3, #15
 8000d78:	2b0a      	cmp	r3, #10
 8000d7a:	bf0c      	ite	eq
 8000d7c:	2301      	moveq	r3, #1
 8000d7e:	2300      	movne	r3, #0
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <cart_write+0x184>)
 8000d84:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    }

    if ((address & 0xE000) == 0x2000) {
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d92:	d117      	bne.n	8000dc4 <cart_write+0x7c>
        //rom bank number
        if (value == 0) {
 8000d94:	797b      	ldrb	r3, [r7, #5]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <cart_write+0x56>
            value = 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	717b      	strb	r3, [r7, #5]
        }

        value &= 0b11111;
 8000d9e:	797b      	ldrb	r3, [r7, #5]
 8000da0:	f003 031f 	and.w	r3, r3, #31
 8000da4:	717b      	strb	r3, [r7, #5]

        ctx.rom_bank_value = value;
 8000da6:	4a49      	ldr	r2, [pc, #292]	; (8000ecc <cart_write+0x184>)
 8000da8:	797b      	ldrb	r3, [r7, #5]
 8000daa:	f882 3415 	strb.w	r3, [r2, #1045]	; 0x415
        ctx.rom_bank_x = ctx.rom_data + (0x4000 * ctx.rom_bank_value);
 8000dae:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <cart_write+0x184>)
 8000db0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000db4:	4a45      	ldr	r2, [pc, #276]	; (8000ecc <cart_write+0x184>)
 8000db6:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8000dba:	0392      	lsls	r2, r2, #14
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a43      	ldr	r2, [pc, #268]	; (8000ecc <cart_write+0x184>)
 8000dc0:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
    }

    if ((address & 0xE000) == 0x4000) {
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dce:	d11e      	bne.n	8000e0e <cart_write+0xc6>
        //ram bank number
        ctx.ram_bank_value = value & 0b11;
 8000dd0:	797b      	ldrb	r3, [r7, #5]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <cart_write+0x184>)
 8000dda:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

        if (ctx.ram_banking) {
 8000dde:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <cart_write+0x184>)
 8000de0:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d012      	beq.n	8000e0e <cart_write+0xc6>
            if (cart_need_save()) {
 8000de8:	f7ff fcea 	bl	80007c0 <cart_need_save>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <cart_write+0xae>
                cart_battery_save();
 8000df2:	f7ff ff21 	bl	8000c38 <cart_battery_save>
            }

            ctx.ram_bank = ctx.ram_banks[ctx.ram_bank_value];
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <cart_write+0x184>)
 8000df8:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 8000dfc:	4a33      	ldr	r2, [pc, #204]	; (8000ecc <cart_write+0x184>)
 8000dfe:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	4a30      	ldr	r2, [pc, #192]	; (8000ecc <cart_write+0x184>)
 8000e0a:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
        }
    }

    if ((address & 0xE000) == 0x6000) {
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000e14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8000e18:	d129      	bne.n	8000e6e <cart_write+0x126>
        //banking mode select
        ctx.banking_mode = value & 1;
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <cart_write+0x184>)
 8000e24:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        ctx.ram_banking = ctx.banking_mode;
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <cart_write+0x184>)
 8000e2a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bf14      	ite	ne
 8000e32:	2301      	movne	r3, #1
 8000e34:	2300      	moveq	r3, #0
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <cart_write+0x184>)
 8000e3a:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d

        if (ctx.ram_banking) {
 8000e3e:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <cart_write+0x184>)
 8000e40:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d012      	beq.n	8000e6e <cart_write+0x126>
            if (cart_need_save()) {
 8000e48:	f7ff fcba 	bl	80007c0 <cart_need_save>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <cart_write+0x10e>
                cart_battery_save();
 8000e52:	f7ff fef1 	bl	8000c38 <cart_battery_save>
            }
            
            ctx.ram_bank = ctx.ram_banks[ctx.ram_bank_value];
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <cart_write+0x184>)
 8000e58:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <cart_write+0x184>)
 8000e5e:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <cart_write+0x184>)
 8000e6a:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
        }
    }

    if ((address & 0xE000) == 0xA000) {
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000e74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000e78:	d124      	bne.n	8000ec4 <cart_write+0x17c>
        if (!ctx.ram_enabled) {
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <cart_write+0x184>)
 8000e7c:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000e80:	f083 0301 	eor.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d119      	bne.n	8000ebe <cart_write+0x176>
            return;
        }

        if (!ctx.ram_bank) {
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <cart_write+0x184>)
 8000e8c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d016      	beq.n	8000ec2 <cart_write+0x17a>
            return;
        }

        ctx.ram_bank[address - 0xA000] = value;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <cart_write+0x184>)
 8000e96:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
 8000ea0:	4413      	add	r3, r2
 8000ea2:	797a      	ldrb	r2, [r7, #5]
 8000ea4:	701a      	strb	r2, [r3, #0]

        if (ctx.battery) {
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <cart_write+0x184>)
 8000ea8:	f893 345c 	ldrb.w	r3, [r3, #1116]	; 0x45c
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d009      	beq.n	8000ec4 <cart_write+0x17c>
            ctx.need_save = true;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <cart_write+0x184>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
 8000eb8:	e004      	b.n	8000ec4 <cart_write+0x17c>
        return;
 8000eba:	bf00      	nop
 8000ebc:	e002      	b.n	8000ec4 <cart_write+0x17c>
            return;
 8000ebe:	bf00      	nop
 8000ec0:	e000      	b.n	8000ec4 <cart_write+0x17c>
            return;
 8000ec2:	bf00      	nop
        }
    }
}
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000a5c 	.word	0x20000a5c

08000ed0 <cpu_init>:

cpu_context ctx = {0};

#define CPU_DEBUG 0

void cpu_init() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
    ctx.regs.pc = 0x100;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <cpu_init+0x5c>)
 8000ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eda:	811a      	strh	r2, [r3, #8]
    ctx.regs.sp = 0xFFFE;
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <cpu_init+0x5c>)
 8000ede:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ee2:	815a      	strh	r2, [r3, #10]
    *((short *)&ctx.regs.a) = 0xB001;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <cpu_init+0x5c>)
 8000ee6:	f24b 0201 	movw	r2, #45057	; 0xb001
 8000eea:	801a      	strh	r2, [r3, #0]
    *((short *)&ctx.regs.b) = 0x1300;
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <cpu_init+0x60>)
 8000eee:	f44f 5298 	mov.w	r2, #4864	; 0x1300
 8000ef2:	801a      	strh	r2, [r3, #0]
    *((short *)&ctx.regs.d) = 0xD800;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <cpu_init+0x64>)
 8000ef6:	f44f 4258 	mov.w	r2, #55296	; 0xd800
 8000efa:	801a      	strh	r2, [r3, #0]
    *((short *)&ctx.regs.h) = 0x4D01;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <cpu_init+0x68>)
 8000efe:	f644 5201 	movw	r2, #19713	; 0x4d01
 8000f02:	801a      	strh	r2, [r3, #0]
    ctx.ie_register = 0;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <cpu_init+0x5c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	771a      	strb	r2, [r3, #28]
    ctx.int_flags = 0;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <cpu_init+0x5c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	775a      	strb	r2, [r3, #29]
    ctx.int_master_enabled = false;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <cpu_init+0x5c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	769a      	strb	r2, [r3, #26]
    ctx.enabling_ime = false;
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <cpu_init+0x5c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	76da      	strb	r2, [r3, #27]

    timer_get_context()->div = 0xABCC;
 8000f1c:	f004 fde6 	bl	8005aec <timer_get_context>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f64a 32cc 	movw	r2, #43980	; 0xabcc
 8000f26:	801a      	strh	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000ebc 	.word	0x20000ebc
 8000f30:	20000ebe 	.word	0x20000ebe
 8000f34:	20000ec0 	.word	0x20000ec0
 8000f38:	20000ec2 	.word	0x20000ec2

08000f3c <fetch_instruction>:

static void fetch_instruction() {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
    ctx.cur_opcode = bus_read(ctx.regs.pc++);
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <fetch_instruction+0x34>)
 8000f42:	891b      	ldrh	r3, [r3, #8]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	b291      	uxth	r1, r2
 8000f48:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <fetch_instruction+0x34>)
 8000f4a:	8111      	strh	r1, [r2, #8]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fb43 	bl	80005d8 <bus_read>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <fetch_instruction+0x34>)
 8000f58:	745a      	strb	r2, [r3, #17]
    ctx.cur_inst = instruction_by_opcode(ctx.cur_opcode);
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <fetch_instruction+0x34>)
 8000f5c:	7c5b      	ldrb	r3, [r3, #17]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 f886 	bl	8003070 <instruction_by_opcode>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a02      	ldr	r2, [pc, #8]	; (8000f70 <fetch_instruction+0x34>)
 8000f68:	6153      	str	r3, [r2, #20]
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000ebc 	.word	0x20000ebc

08000f74 <execute>:

void fetch_data();

static void execute() {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
    IN_PROC proc = inst_get_processor(ctx.cur_inst->type);
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <execute+0x40>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fc41 	bl	8002808 <inst_get_processor>
 8000f86:	6078      	str	r0, [r7, #4]

    if (!proc) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10b      	bne.n	8000fa6 <execute+0x32>
        NO_IMPL
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <execute+0x44>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2214      	movs	r2, #20
 8000f96:	2101      	movs	r1, #1
 8000f98:	4808      	ldr	r0, [pc, #32]	; (8000fbc <execute+0x48>)
 8000f9a:	f010 f93b 	bl	8011214 <fwrite>
 8000f9e:	f06f 0004 	mvn.w	r0, #4
 8000fa2:	f00f fc69 	bl	8010878 <exit>
    }

    proc(&ctx);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <execute+0x40>)
 8000faa:	4798      	blx	r3
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000ebc 	.word	0x20000ebc
 8000fb8:	200009dc 	.word	0x200009dc
 8000fbc:	08012b34 	.word	0x08012b34

08000fc0 <cpu_step>:

bool cpu_step() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
    
    if (!ctx.halted) {
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <cpu_step+0x94>)
 8000fc8:	7e1b      	ldrb	r3, [r3, #24]
 8000fca:	f083 0301 	eor.w	r3, r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d01e      	beq.n	8001012 <cpu_step+0x52>
        u16 pc = ctx.regs.pc;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <cpu_step+0x94>)
 8000fd6:	891b      	ldrh	r3, [r3, #8]
 8000fd8:	80fb      	strh	r3, [r7, #6]

        fetch_instruction();
 8000fda:	f7ff ffaf 	bl	8000f3c <fetch_instruction>
        emu_cycles(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f001 ff50 	bl	8002e84 <emu_cycles>
        fetch_data();
 8000fe4:	f000 f86a 	bl	80010bc <fetch_data>
            pc, inst, ctx.cur_opcode,
            bus_read(pc + 1), bus_read(pc + 2), ctx.regs.a, flags, ctx.regs.b, ctx.regs.c,
            ctx.regs.d, ctx.regs.e, ctx.regs.h, ctx.regs.l);
#endif

        if (ctx.cur_inst == NULL) {
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <cpu_step+0x94>)
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d109      	bne.n	8001004 <cpu_step+0x44>
            printf("Unknown Instruction! %02X\n", ctx.cur_opcode);
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <cpu_step+0x94>)
 8000ff2:	7c5b      	ldrb	r3, [r3, #17]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4818      	ldr	r0, [pc, #96]	; (8001058 <cpu_step+0x98>)
 8000ff8:	f010 fd76 	bl	8011ae8 <iprintf>
            exit(-7);
 8000ffc:	f06f 0006 	mvn.w	r0, #6
 8001000:	f00f fc3a 	bl	8010878 <exit>
        }

        dbg_update();
 8001004:	f001 fe22 	bl	8002c4c <dbg_update>
        dbg_print();
 8001008:	f001 fe46 	bl	8002c98 <dbg_print>

        execute();
 800100c:	f7ff ffb2 	bl	8000f74 <execute>
 8001010:	e009      	b.n	8001026 <cpu_step+0x66>
    } else {
        //is halted...
        emu_cycles(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f001 ff36 	bl	8002e84 <emu_cycles>

        if (ctx.int_flags) {
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <cpu_step+0x94>)
 800101a:	7f5b      	ldrb	r3, [r3, #29]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <cpu_step+0x66>
            ctx.halted = false;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <cpu_step+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	761a      	strb	r2, [r3, #24]
        }
    }

    if (ctx.int_master_enabled) {
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <cpu_step+0x94>)
 8001028:	7e9b      	ldrb	r3, [r3, #26]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <cpu_step+0x7a>
        cpu_handle_interrupts(&ctx);
 800102e:	4809      	ldr	r0, [pc, #36]	; (8001054 <cpu_step+0x94>)
 8001030:	f002 f878 	bl	8003124 <cpu_handle_interrupts>
        ctx.enabling_ime = false;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <cpu_step+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	76da      	strb	r2, [r3, #27]
    }

    if (ctx.enabling_ime) {
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <cpu_step+0x94>)
 800103c:	7edb      	ldrb	r3, [r3, #27]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <cpu_step+0x88>
        ctx.int_master_enabled = true;
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <cpu_step+0x94>)
 8001044:	2201      	movs	r2, #1
 8001046:	769a      	strb	r2, [r3, #26]
    }

    return true;
 8001048:	2301      	movs	r3, #1
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000ebc 	.word	0x20000ebc
 8001058:	08012b4c 	.word	0x08012b4c

0800105c <cpu_get_ie_register>:

u8 cpu_get_ie_register() {
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
    return ctx.ie_register;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <cpu_get_ie_register+0x14>)
 8001062:	7f1b      	ldrb	r3, [r3, #28]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000ebc 	.word	0x20000ebc

08001074 <cpu_set_ie_register>:

void cpu_set_ie_register(u8 n) {
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
    ctx.ie_register = n;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <cpu_set_ie_register+0x1c>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	7713      	strb	r3, [r2, #28]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000ebc 	.word	0x20000ebc

08001094 <cpu_request_interrupt>:

void cpu_request_interrupt(interrupt_type t) {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
    ctx.int_flags |= t;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <cpu_request_interrupt+0x24>)
 80010a0:	7f5a      	ldrb	r2, [r3, #29]
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <cpu_request_interrupt+0x24>)
 80010aa:	775a      	strb	r2, [r3, #29]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	20000ebc 	.word	0x20000ebc

080010bc <fetch_data>:
#include <bus.h>
#include <emu.h>

extern cpu_context ctx;

void fetch_data() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
    ctx.mem_dest = 0;
 80010c2:	4bb0      	ldr	r3, [pc, #704]	; (8001384 <fetch_data+0x2c8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	81da      	strh	r2, [r3, #14]
    ctx.dest_is_mem = false;
 80010c8:	4bae      	ldr	r3, [pc, #696]	; (8001384 <fetch_data+0x2c8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	741a      	strb	r2, [r3, #16]
    
    if (ctx.cur_inst == NULL) {
 80010ce:	4bad      	ldr	r3, [pc, #692]	; (8001384 <fetch_data+0x2c8>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 8249 	beq.w	800156a <fetch_data+0x4ae>
        return;
    }

    switch(ctx.cur_inst->mode) {
 80010d8:	4baa      	ldr	r3, [pc, #680]	; (8001384 <fetch_data+0x2c8>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	785b      	ldrb	r3, [r3, #1]
 80010de:	2b14      	cmp	r3, #20
 80010e0:	f200 8235 	bhi.w	800154e <fetch_data+0x492>
 80010e4:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <fetch_data+0x30>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	0800156f 	.word	0x0800156f
 80010f0:	08001193 	.word	0x08001193
 80010f4:	08001157 	.word	0x08001157
 80010f8:	080011e1 	.word	0x080011e1
 80010fc:	08001141 	.word	0x08001141
 8001100:	0800116d 	.word	0x0800116d
 8001104:	0800122b 	.word	0x0800122b
 8001108:	08001265 	.word	0x08001265
 800110c:	0800129d 	.word	0x0800129d
 8001110:	080012d5 	.word	0x080012d5
 8001114:	08001319 	.word	0x08001319
 8001118:	0800135d 	.word	0x0800135d
 800111c:	08001389 	.word	0x08001389
 8001120:	080013bd 	.word	0x080013bd
 8001124:	08001193 	.word	0x08001193
 8001128:	080013e3 	.word	0x080013e3
 800112c:	08001409 	.word	0x08001409
 8001130:	08001471 	.word	0x08001471
 8001134:	080014b1 	.word	0x080014b1
 8001138:	08001409 	.word	0x08001409
 800113c:	080014ef 	.word	0x080014ef
        case AM_IMP: return;

        case AM_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_1);
 8001140:	4b90      	ldr	r3, [pc, #576]	; (8001384 <fetch_data+0x2c8>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	789b      	ldrb	r3, [r3, #2]
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fb86 	bl	8002858 <cpu_read_reg>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b8c      	ldr	r3, [pc, #560]	; (8001384 <fetch_data+0x2c8>)
 8001152:	819a      	strh	r2, [r3, #12]
            return;
 8001154:	e20e      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 8001156:	4b8b      	ldr	r3, [pc, #556]	; (8001384 <fetch_data+0x2c8>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	78db      	ldrb	r3, [r3, #3]
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fb7b 	bl	8002858 <cpu_read_reg>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	4b87      	ldr	r3, [pc, #540]	; (8001384 <fetch_data+0x2c8>)
 8001168:	819a      	strh	r2, [r3, #12]
            return;
 800116a:	e203      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_D8:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 800116c:	4b85      	ldr	r3, [pc, #532]	; (8001384 <fetch_data+0x2c8>)
 800116e:	891b      	ldrh	r3, [r3, #8]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fa31 	bl	80005d8 <bus_read>
 8001176:	4603      	mov	r3, r0
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b82      	ldr	r3, [pc, #520]	; (8001384 <fetch_data+0x2c8>)
 800117c:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f001 fe80 	bl	8002e84 <emu_cycles>
            ctx.regs.pc++;
 8001184:	4b7f      	ldr	r3, [pc, #508]	; (8001384 <fetch_data+0x2c8>)
 8001186:	891b      	ldrh	r3, [r3, #8]
 8001188:	3301      	adds	r3, #1
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b7d      	ldr	r3, [pc, #500]	; (8001384 <fetch_data+0x2c8>)
 800118e:	811a      	strh	r2, [r3, #8]
            return;
 8001190:	e1f0      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_D16:
        case AM_D16: {
            u16 lo = bus_read(ctx.regs.pc);
 8001192:	4b7c      	ldr	r3, [pc, #496]	; (8001384 <fetch_data+0x2c8>)
 8001194:	891b      	ldrh	r3, [r3, #8]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fa1e 	bl	80005d8 <bus_read>
 800119c:	4603      	mov	r3, r0
 800119e:	807b      	strh	r3, [r7, #2]
            emu_cycles(1);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f001 fe6f 	bl	8002e84 <emu_cycles>

            u16 hi = bus_read(ctx.regs.pc + 1);
 80011a6:	4b77      	ldr	r3, [pc, #476]	; (8001384 <fetch_data+0x2c8>)
 80011a8:	891b      	ldrh	r3, [r3, #8]
 80011aa:	3301      	adds	r3, #1
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fa12 	bl	80005d8 <bus_read>
 80011b4:	4603      	mov	r3, r0
 80011b6:	803b      	strh	r3, [r7, #0]
            emu_cycles(1);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f001 fe63 	bl	8002e84 <emu_cycles>

            ctx.fetched_data = lo | (hi << 8);
 80011be:	883b      	ldrh	r3, [r7, #0]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <fetch_data+0x2c8>)
 80011d0:	819a      	strh	r2, [r3, #12]

            ctx.regs.pc += 2;
 80011d2:	4b6c      	ldr	r3, [pc, #432]	; (8001384 <fetch_data+0x2c8>)
 80011d4:	891b      	ldrh	r3, [r3, #8]
 80011d6:	3302      	adds	r3, #2
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b6a      	ldr	r3, [pc, #424]	; (8001384 <fetch_data+0x2c8>)
 80011dc:	811a      	strh	r2, [r3, #8]

            return;
 80011de:	e1c9      	b.n	8001574 <fetch_data+0x4b8>
        }

        case AM_MR_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 80011e0:	4b68      	ldr	r3, [pc, #416]	; (8001384 <fetch_data+0x2c8>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	78db      	ldrb	r3, [r3, #3]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fb36 	bl	8002858 <cpu_read_reg>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b64      	ldr	r3, [pc, #400]	; (8001384 <fetch_data+0x2c8>)
 80011f2:	819a      	strh	r2, [r3, #12]
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 80011f4:	4b63      	ldr	r3, [pc, #396]	; (8001384 <fetch_data+0x2c8>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	789b      	ldrb	r3, [r3, #2]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fb2c 	bl	8002858 <cpu_read_reg>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b5f      	ldr	r3, [pc, #380]	; (8001384 <fetch_data+0x2c8>)
 8001206:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 8001208:	4b5e      	ldr	r3, [pc, #376]	; (8001384 <fetch_data+0x2c8>)
 800120a:	2201      	movs	r2, #1
 800120c:	741a      	strb	r2, [r3, #16]

            if (ctx.cur_inst->reg_1 == RT_C) {
 800120e:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <fetch_data+0x2c8>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	789b      	ldrb	r3, [r3, #2]
 8001214:	2b04      	cmp	r3, #4
 8001216:	f040 81ac 	bne.w	8001572 <fetch_data+0x4b6>
                ctx.mem_dest |= 0xFF00;
 800121a:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <fetch_data+0x2c8>)
 800121c:	89db      	ldrh	r3, [r3, #14]
 800121e:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b57      	ldr	r3, [pc, #348]	; (8001384 <fetch_data+0x2c8>)
 8001226:	81da      	strh	r2, [r3, #14]
            }

            return;
 8001228:	e1a3      	b.n	8001572 <fetch_data+0x4b6>

        case AM_R_MR: {
            u16 addr = cpu_read_reg(ctx.cur_inst->reg_2);
 800122a:	4b56      	ldr	r3, [pc, #344]	; (8001384 <fetch_data+0x2c8>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	78db      	ldrb	r3, [r3, #3]
 8001230:	4618      	mov	r0, r3
 8001232:	f001 fb11 	bl	8002858 <cpu_read_reg>
 8001236:	4603      	mov	r3, r0
 8001238:	81fb      	strh	r3, [r7, #14]

            if (ctx.cur_inst->reg_2 == RT_C) {
 800123a:	4b52      	ldr	r3, [pc, #328]	; (8001384 <fetch_data+0x2c8>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	78db      	ldrb	r3, [r3, #3]
 8001240:	2b04      	cmp	r3, #4
 8001242:	d103      	bne.n	800124c <fetch_data+0x190>
                addr |= 0xFF00;
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800124a:	81fb      	strh	r3, [r7, #14]
            }

            ctx.fetched_data = bus_read(addr);
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f9c2 	bl	80005d8 <bus_read>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b4a      	ldr	r3, [pc, #296]	; (8001384 <fetch_data+0x2c8>)
 800125a:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 800125c:	2001      	movs	r0, #1
 800125e:	f001 fe11 	bl	8002e84 <emu_cycles>

        } return;
 8001262:	e187      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_HLI:
            ctx.fetched_data = bus_read(cpu_read_reg(ctx.cur_inst->reg_2));
 8001264:	4b47      	ldr	r3, [pc, #284]	; (8001384 <fetch_data+0x2c8>)
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	4618      	mov	r0, r3
 800126c:	f001 faf4 	bl	8002858 <cpu_read_reg>
 8001270:	4603      	mov	r3, r0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f9b0 	bl	80005d8 <bus_read>
 8001278:	4603      	mov	r3, r0
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b41      	ldr	r3, [pc, #260]	; (8001384 <fetch_data+0x2c8>)
 800127e:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f001 fdff 	bl	8002e84 <emu_cycles>
            cpu_set_reg(RT_HL, cpu_read_reg(RT_HL) + 1);
 8001286:	200c      	movs	r0, #12
 8001288:	f001 fae6 	bl	8002858 <cpu_read_reg>
 800128c:	4603      	mov	r3, r0
 800128e:	3301      	adds	r3, #1
 8001290:	b29b      	uxth	r3, r3
 8001292:	4619      	mov	r1, r3
 8001294:	200c      	movs	r0, #12
 8001296:	f001 fb57 	bl	8002948 <cpu_set_reg>
            return;
 800129a:	e16b      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_HLD:
            ctx.fetched_data = bus_read(cpu_read_reg(ctx.cur_inst->reg_2));
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <fetch_data+0x2c8>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	78db      	ldrb	r3, [r3, #3]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fad8 	bl	8002858 <cpu_read_reg>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f994 	bl	80005d8 <bus_read>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4b33      	ldr	r3, [pc, #204]	; (8001384 <fetch_data+0x2c8>)
 80012b6:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f001 fde3 	bl	8002e84 <emu_cycles>
            cpu_set_reg(RT_HL, cpu_read_reg(RT_HL) - 1);
 80012be:	200c      	movs	r0, #12
 80012c0:	f001 faca 	bl	8002858 <cpu_read_reg>
 80012c4:	4603      	mov	r3, r0
 80012c6:	3b01      	subs	r3, #1
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4619      	mov	r1, r3
 80012cc:	200c      	movs	r0, #12
 80012ce:	f001 fb3b 	bl	8002948 <cpu_set_reg>
            return;
 80012d2:	e14f      	b.n	8001574 <fetch_data+0x4b8>

        case AM_HLI_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <fetch_data+0x2c8>)
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	78db      	ldrb	r3, [r3, #3]
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 fabc 	bl	8002858 <cpu_read_reg>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <fetch_data+0x2c8>)
 80012e6:	819a      	strh	r2, [r3, #12]
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 80012e8:	4b26      	ldr	r3, [pc, #152]	; (8001384 <fetch_data+0x2c8>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	789b      	ldrb	r3, [r3, #2]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 fab2 	bl	8002858 <cpu_read_reg>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <fetch_data+0x2c8>)
 80012fa:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 80012fc:	4b21      	ldr	r3, [pc, #132]	; (8001384 <fetch_data+0x2c8>)
 80012fe:	2201      	movs	r2, #1
 8001300:	741a      	strb	r2, [r3, #16]
            cpu_set_reg(RT_HL, cpu_read_reg(RT_HL) + 1);
 8001302:	200c      	movs	r0, #12
 8001304:	f001 faa8 	bl	8002858 <cpu_read_reg>
 8001308:	4603      	mov	r3, r0
 800130a:	3301      	adds	r3, #1
 800130c:	b29b      	uxth	r3, r3
 800130e:	4619      	mov	r1, r3
 8001310:	200c      	movs	r0, #12
 8001312:	f001 fb19 	bl	8002948 <cpu_set_reg>
            return;
 8001316:	e12d      	b.n	8001574 <fetch_data+0x4b8>

        case AM_HLD_R:
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <fetch_data+0x2c8>)
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	78db      	ldrb	r3, [r3, #3]
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fa9a 	bl	8002858 <cpu_read_reg>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <fetch_data+0x2c8>)
 800132a:	819a      	strh	r2, [r3, #12]
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <fetch_data+0x2c8>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	789b      	ldrb	r3, [r3, #2]
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fa90 	bl	8002858 <cpu_read_reg>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <fetch_data+0x2c8>)
 800133e:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <fetch_data+0x2c8>)
 8001342:	2201      	movs	r2, #1
 8001344:	741a      	strb	r2, [r3, #16]
            cpu_set_reg(RT_HL, cpu_read_reg(RT_HL) - 1);
 8001346:	200c      	movs	r0, #12
 8001348:	f001 fa86 	bl	8002858 <cpu_read_reg>
 800134c:	4603      	mov	r3, r0
 800134e:	3b01      	subs	r3, #1
 8001350:	b29b      	uxth	r3, r3
 8001352:	4619      	mov	r1, r3
 8001354:	200c      	movs	r0, #12
 8001356:	f001 faf7 	bl	8002948 <cpu_set_reg>
            return;
 800135a:	e10b      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_A8:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <fetch_data+0x2c8>)
 800135e:	891b      	ldrh	r3, [r3, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f939 	bl	80005d8 <bus_read>
 8001366:	4603      	mov	r3, r0
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <fetch_data+0x2c8>)
 800136c:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 800136e:	2001      	movs	r0, #1
 8001370:	f001 fd88 	bl	8002e84 <emu_cycles>
            ctx.regs.pc++;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <fetch_data+0x2c8>)
 8001376:	891b      	ldrh	r3, [r3, #8]
 8001378:	3301      	adds	r3, #1
 800137a:	b29a      	uxth	r2, r3
 800137c:	4b01      	ldr	r3, [pc, #4]	; (8001384 <fetch_data+0x2c8>)
 800137e:	811a      	strh	r2, [r3, #8]
            return;
 8001380:	e0f8      	b.n	8001574 <fetch_data+0x4b8>
 8001382:	bf00      	nop
 8001384:	20000ebc 	.word	0x20000ebc

        case AM_A8_R:
            ctx.mem_dest = bus_read(ctx.regs.pc) | 0xFF00;
 8001388:	4b7c      	ldr	r3, [pc, #496]	; (800157c <fetch_data+0x4c0>)
 800138a:	891b      	ldrh	r3, [r3, #8]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f923 	bl	80005d8 <bus_read>
 8001392:	4603      	mov	r3, r0
 8001394:	b21b      	sxth	r3, r3
 8001396:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800139a:	b21b      	sxth	r3, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b77      	ldr	r3, [pc, #476]	; (800157c <fetch_data+0x4c0>)
 80013a0:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <fetch_data+0x4c0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	741a      	strb	r2, [r3, #16]
            emu_cycles(1);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f001 fd6b 	bl	8002e84 <emu_cycles>
            ctx.regs.pc++;
 80013ae:	4b73      	ldr	r3, [pc, #460]	; (800157c <fetch_data+0x4c0>)
 80013b0:	891b      	ldrh	r3, [r3, #8]
 80013b2:	3301      	adds	r3, #1
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b71      	ldr	r3, [pc, #452]	; (800157c <fetch_data+0x4c0>)
 80013b8:	811a      	strh	r2, [r3, #8]
            return;
 80013ba:	e0db      	b.n	8001574 <fetch_data+0x4b8>

        case AM_HL_SPR:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 80013bc:	4b6f      	ldr	r3, [pc, #444]	; (800157c <fetch_data+0x4c0>)
 80013be:	891b      	ldrh	r3, [r3, #8]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f909 	bl	80005d8 <bus_read>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	4b6c      	ldr	r3, [pc, #432]	; (800157c <fetch_data+0x4c0>)
 80013cc:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f001 fd58 	bl	8002e84 <emu_cycles>
            ctx.regs.pc++;
 80013d4:	4b69      	ldr	r3, [pc, #420]	; (800157c <fetch_data+0x4c0>)
 80013d6:	891b      	ldrh	r3, [r3, #8]
 80013d8:	3301      	adds	r3, #1
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b67      	ldr	r3, [pc, #412]	; (800157c <fetch_data+0x4c0>)
 80013de:	811a      	strh	r2, [r3, #8]
            return;
 80013e0:	e0c8      	b.n	8001574 <fetch_data+0x4b8>

        case AM_D8:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 80013e2:	4b66      	ldr	r3, [pc, #408]	; (800157c <fetch_data+0x4c0>)
 80013e4:	891b      	ldrh	r3, [r3, #8]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f8f6 	bl	80005d8 <bus_read>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b62      	ldr	r3, [pc, #392]	; (800157c <fetch_data+0x4c0>)
 80013f2:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f001 fd45 	bl	8002e84 <emu_cycles>
            ctx.regs.pc++;
 80013fa:	4b60      	ldr	r3, [pc, #384]	; (800157c <fetch_data+0x4c0>)
 80013fc:	891b      	ldrh	r3, [r3, #8]
 80013fe:	3301      	adds	r3, #1
 8001400:	b29a      	uxth	r2, r3
 8001402:	4b5e      	ldr	r3, [pc, #376]	; (800157c <fetch_data+0x4c0>)
 8001404:	811a      	strh	r2, [r3, #8]
            return;
 8001406:	e0b5      	b.n	8001574 <fetch_data+0x4b8>

        case AM_A16_R:
        case AM_D16_R: {
            u16 lo = bus_read(ctx.regs.pc);
 8001408:	4b5c      	ldr	r3, [pc, #368]	; (800157c <fetch_data+0x4c0>)
 800140a:	891b      	ldrh	r3, [r3, #8]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f8e3 	bl	80005d8 <bus_read>
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
            emu_cycles(1);
 8001416:	2001      	movs	r0, #1
 8001418:	f001 fd34 	bl	8002e84 <emu_cycles>

            u16 hi = bus_read(ctx.regs.pc + 1);
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <fetch_data+0x4c0>)
 800141e:	891b      	ldrh	r3, [r3, #8]
 8001420:	3301      	adds	r3, #1
 8001422:	b29b      	uxth	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f8d7 	bl	80005d8 <bus_read>
 800142a:	4603      	mov	r3, r0
 800142c:	80bb      	strh	r3, [r7, #4]
            emu_cycles(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f001 fd28 	bl	8002e84 <emu_cycles>

            ctx.mem_dest = lo | (hi << 8);
 8001434:	88bb      	ldrh	r3, [r7, #4]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143e:	4313      	orrs	r3, r2
 8001440:	b21b      	sxth	r3, r3
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b4d      	ldr	r3, [pc, #308]	; (800157c <fetch_data+0x4c0>)
 8001446:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 8001448:	4b4c      	ldr	r3, [pc, #304]	; (800157c <fetch_data+0x4c0>)
 800144a:	2201      	movs	r2, #1
 800144c:	741a      	strb	r2, [r3, #16]

            ctx.regs.pc += 2;
 800144e:	4b4b      	ldr	r3, [pc, #300]	; (800157c <fetch_data+0x4c0>)
 8001450:	891b      	ldrh	r3, [r3, #8]
 8001452:	3302      	adds	r3, #2
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b49      	ldr	r3, [pc, #292]	; (800157c <fetch_data+0x4c0>)
 8001458:	811a      	strh	r2, [r3, #8]
            ctx.fetched_data = cpu_read_reg(ctx.cur_inst->reg_2);
 800145a:	4b48      	ldr	r3, [pc, #288]	; (800157c <fetch_data+0x4c0>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	78db      	ldrb	r3, [r3, #3]
 8001460:	4618      	mov	r0, r3
 8001462:	f001 f9f9 	bl	8002858 <cpu_read_reg>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <fetch_data+0x4c0>)
 800146c:	819a      	strh	r2, [r3, #12]

        } return;
 800146e:	e081      	b.n	8001574 <fetch_data+0x4b8>

        case AM_MR_D8:
            ctx.fetched_data = bus_read(ctx.regs.pc);
 8001470:	4b42      	ldr	r3, [pc, #264]	; (800157c <fetch_data+0x4c0>)
 8001472:	891b      	ldrh	r3, [r3, #8]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f8af 	bl	80005d8 <bus_read>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	4b3f      	ldr	r3, [pc, #252]	; (800157c <fetch_data+0x4c0>)
 8001480:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 8001482:	2001      	movs	r0, #1
 8001484:	f001 fcfe 	bl	8002e84 <emu_cycles>
            ctx.regs.pc++;
 8001488:	4b3c      	ldr	r3, [pc, #240]	; (800157c <fetch_data+0x4c0>)
 800148a:	891b      	ldrh	r3, [r3, #8]
 800148c:	3301      	adds	r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b3a      	ldr	r3, [pc, #232]	; (800157c <fetch_data+0x4c0>)
 8001492:	811a      	strh	r2, [r3, #8]
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <fetch_data+0x4c0>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	789b      	ldrb	r3, [r3, #2]
 800149a:	4618      	mov	r0, r3
 800149c:	f001 f9dc 	bl	8002858 <cpu_read_reg>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <fetch_data+0x4c0>)
 80014a6:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 80014a8:	4b34      	ldr	r3, [pc, #208]	; (800157c <fetch_data+0x4c0>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	741a      	strb	r2, [r3, #16]
            return;
 80014ae:	e061      	b.n	8001574 <fetch_data+0x4b8>

        case AM_MR:
            ctx.mem_dest = cpu_read_reg(ctx.cur_inst->reg_1);
 80014b0:	4b32      	ldr	r3, [pc, #200]	; (800157c <fetch_data+0x4c0>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	789b      	ldrb	r3, [r3, #2]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 f9ce 	bl	8002858 <cpu_read_reg>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <fetch_data+0x4c0>)
 80014c2:	81da      	strh	r2, [r3, #14]
            ctx.dest_is_mem = true;
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <fetch_data+0x4c0>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	741a      	strb	r2, [r3, #16]
            ctx.fetched_data = bus_read(cpu_read_reg(ctx.cur_inst->reg_1));
 80014ca:	4b2c      	ldr	r3, [pc, #176]	; (800157c <fetch_data+0x4c0>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	789b      	ldrb	r3, [r3, #2]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 f9c1 	bl	8002858 <cpu_read_reg>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f87d 	bl	80005d8 <bus_read>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <fetch_data+0x4c0>)
 80014e4:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f001 fccc 	bl	8002e84 <emu_cycles>
            return;
 80014ec:	e042      	b.n	8001574 <fetch_data+0x4b8>

        case AM_R_A16: {
            u16 lo = bus_read(ctx.regs.pc);
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <fetch_data+0x4c0>)
 80014f0:	891b      	ldrh	r3, [r3, #8]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f870 	bl	80005d8 <bus_read>
 80014f8:	4603      	mov	r3, r0
 80014fa:	81bb      	strh	r3, [r7, #12]
            emu_cycles(1);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f001 fcc1 	bl	8002e84 <emu_cycles>

            u16 hi = bus_read(ctx.regs.pc + 1);
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <fetch_data+0x4c0>)
 8001504:	891b      	ldrh	r3, [r3, #8]
 8001506:	3301      	adds	r3, #1
 8001508:	b29b      	uxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f864 	bl	80005d8 <bus_read>
 8001510:	4603      	mov	r3, r0
 8001512:	817b      	strh	r3, [r7, #10]
            emu_cycles(1);
 8001514:	2001      	movs	r0, #1
 8001516:	f001 fcb5 	bl	8002e84 <emu_cycles>

            u16 addr = lo | (hi << 8);
 800151a:	897b      	ldrh	r3, [r7, #10]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	b21b      	sxth	r3, r3
 8001528:	813b      	strh	r3, [r7, #8]

            ctx.regs.pc += 2;
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <fetch_data+0x4c0>)
 800152c:	891b      	ldrh	r3, [r3, #8]
 800152e:	3302      	adds	r3, #2
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <fetch_data+0x4c0>)
 8001534:	811a      	strh	r2, [r3, #8]
            ctx.fetched_data = bus_read(addr);
 8001536:	893b      	ldrh	r3, [r7, #8]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f84d 	bl	80005d8 <bus_read>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <fetch_data+0x4c0>)
 8001544:	819a      	strh	r2, [r3, #12]
            emu_cycles(1);
 8001546:	2001      	movs	r0, #1
 8001548:	f001 fc9c 	bl	8002e84 <emu_cycles>

            return;
 800154c:	e012      	b.n	8001574 <fetch_data+0x4b8>
        }

        default:
            printf("Unknown Addressing Mode! %d (%02X)\n", ctx.cur_inst->mode, ctx.cur_opcode);
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <fetch_data+0x4c0>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	785b      	ldrb	r3, [r3, #1]
 8001554:	4619      	mov	r1, r3
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <fetch_data+0x4c0>)
 8001558:	7c5b      	ldrb	r3, [r3, #17]
 800155a:	461a      	mov	r2, r3
 800155c:	4808      	ldr	r0, [pc, #32]	; (8001580 <fetch_data+0x4c4>)
 800155e:	f010 fac3 	bl	8011ae8 <iprintf>
            exit(-7);
 8001562:	f06f 0006 	mvn.w	r0, #6
 8001566:	f00f f987 	bl	8010878 <exit>
        return;
 800156a:	bf00      	nop
 800156c:	e002      	b.n	8001574 <fetch_data+0x4b8>
        case AM_IMP: return;
 800156e:	bf00      	nop
 8001570:	e000      	b.n	8001574 <fetch_data+0x4b8>
            return;
 8001572:	bf00      	nop
            return;
    }
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000ebc 	.word	0x20000ebc
 8001580:	08012b68 	.word	0x08012b68

08001584 <cpu_set_flags>:
#include <stack.h>
#include "main.h"

//processes CPU instructions...

void cpu_set_flags(cpu_context *ctx, int8_t z, int8_t n, int8_t h, int8_t c) {
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	4608      	mov	r0, r1
 800158e:	4611      	mov	r1, r2
 8001590:	461a      	mov	r2, r3
 8001592:	4603      	mov	r3, r0
 8001594:	70fb      	strb	r3, [r7, #3]
 8001596:	460b      	mov	r3, r1
 8001598:	70bb      	strb	r3, [r7, #2]
 800159a:	4613      	mov	r3, r2
 800159c:	707b      	strb	r3, [r7, #1]
    if (z != -1) {
 800159e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a6:	d012      	beq.n	80015ce <cpu_set_flags+0x4a>
        BIT_SET(ctx->regs.f, 7, z);
 80015a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <cpu_set_flags+0x3c>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	785b      	ldrb	r3, [r3, #1]
 80015b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	705a      	strb	r2, [r3, #1]
 80015be:	e006      	b.n	80015ce <cpu_set_flags+0x4a>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	785b      	ldrb	r3, [r3, #1]
 80015c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	705a      	strb	r2, [r3, #1]
    }

    if (n != -1) {
 80015ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015d6:	d012      	beq.n	80015fe <cpu_set_flags+0x7a>
        BIT_SET(ctx->regs.f, 6, n);
 80015d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <cpu_set_flags+0x6c>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	705a      	strb	r2, [r3, #1]
 80015ee:	e006      	b.n	80015fe <cpu_set_flags+0x7a>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	785b      	ldrb	r3, [r3, #1]
 80015f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	705a      	strb	r2, [r3, #1]
    }

    if (h != -1) {
 80015fe:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001606:	d012      	beq.n	800162e <cpu_set_flags+0xaa>
        BIT_SET(ctx->regs.f, 5, h);
 8001608:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <cpu_set_flags+0x9c>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	785b      	ldrb	r3, [r3, #1]
 8001614:	f043 0320 	orr.w	r3, r3, #32
 8001618:	b2da      	uxtb	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	705a      	strb	r2, [r3, #1]
 800161e:	e006      	b.n	800162e <cpu_set_flags+0xaa>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	785b      	ldrb	r3, [r3, #1]
 8001624:	f023 0320 	bic.w	r3, r3, #32
 8001628:	b2da      	uxtb	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	705a      	strb	r2, [r3, #1]
    }

    if (c != -1) {
 800162e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001636:	d012      	beq.n	800165e <cpu_set_flags+0xda>
        BIT_SET(ctx->regs.f, 4, c);
 8001638:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d007      	beq.n	8001650 <cpu_set_flags+0xcc>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	785b      	ldrb	r3, [r3, #1]
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	b2da      	uxtb	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	705a      	strb	r2, [r3, #1]
    }
}
 800164e:	e006      	b.n	800165e <cpu_set_flags+0xda>
        BIT_SET(ctx->regs.f, 4, c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	785b      	ldrb	r3, [r3, #1]
 8001654:	f023 0310 	bic.w	r3, r3, #16
 8001658:	b2da      	uxtb	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	705a      	strb	r2, [r3, #1]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <proc_none>:

static void proc_none(cpu_context *ctx) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    printf("INVALID INSTRUCTION!\n");
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <proc_none+0x1c>)
 8001676:	f010 fabd 	bl	8011bf4 <puts>
    Error_Handler();
 800167a:	f002 fccb 	bl	8004014 <Error_Handler>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	08012b8c 	.word	0x08012b8c

0800168c <proc_nop>:

static void proc_nop(cpu_context *ctx) {
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <decode_reg>:
    RT_L,
    RT_HL,
    RT_A
};

reg_type decode_reg(u8 reg) {
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
    if (reg > 0b111) {
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b07      	cmp	r3, #7
 80016ae:	d901      	bls.n	80016b4 <decode_reg+0x14>
        return RT_NONE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	e002      	b.n	80016ba <decode_reg+0x1a>
    }

    return rt_lookup[reg];
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <decode_reg+0x28>)
 80016b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000320 	.word	0x20000320

080016cc <proc_cb>:

static void proc_cb(cpu_context *ctx) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	6078      	str	r0, [r7, #4]
    u8 op = ctx->fetched_data;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	899b      	ldrh	r3, [r3, #12]
 80016d8:	757b      	strb	r3, [r7, #21]
    reg_type reg = decode_reg(op & 0b111);
 80016da:	7d7b      	ldrb	r3, [r7, #21]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ffdc 	bl	80016a0 <decode_reg>
 80016e8:	4603      	mov	r3, r0
 80016ea:	753b      	strb	r3, [r7, #20]
    u8 bit = (op >> 3) & 0b111;
 80016ec:	7d7b      	ldrb	r3, [r7, #21]
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	74fb      	strb	r3, [r7, #19]
    u8 bit_op = (op >> 6) & 0b11;
 80016f8:	7d7b      	ldrb	r3, [r7, #21]
 80016fa:	099b      	lsrs	r3, r3, #6
 80016fc:	74bb      	strb	r3, [r7, #18]
    u8 reg_val = cpu_read_reg8(reg);
 80016fe:	7d3b      	ldrb	r3, [r7, #20]
 8001700:	4618      	mov	r0, r3
 8001702:	f001 f9ab 	bl	8002a5c <cpu_read_reg8>
 8001706:	4603      	mov	r3, r0
 8001708:	747b      	strb	r3, [r7, #17]

    emu_cycles(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f001 fbba 	bl	8002e84 <emu_cycles>

    if (reg == RT_HL) {
 8001710:	7d3b      	ldrb	r3, [r7, #20]
 8001712:	2b0c      	cmp	r3, #12
 8001714:	d102      	bne.n	800171c <proc_cb+0x50>
        emu_cycles(2);
 8001716:	2002      	movs	r0, #2
 8001718:	f001 fbb4 	bl	8002e84 <emu_cycles>
    }

    switch(bit_op) {
 800171c:	7cbb      	ldrb	r3, [r7, #18]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d02e      	beq.n	8001780 <proc_cb+0xb4>
 8001722:	2b03      	cmp	r3, #3
 8001724:	dc3d      	bgt.n	80017a2 <proc_cb+0xd6>
 8001726:	2b01      	cmp	r3, #1
 8001728:	d002      	beq.n	8001730 <proc_cb+0x64>
 800172a:	2b02      	cmp	r3, #2
 800172c:	d015      	beq.n	800175a <proc_cb+0x8e>
 800172e:	e038      	b.n	80017a2 <proc_cb+0xd6>
        case 1:
            //BIT
            cpu_set_flags(ctx, !(reg_val & (1 << bit)), 0, 1, -1);
 8001730:	7c7a      	ldrb	r2, [r7, #17]
 8001732:	7cfb      	ldrb	r3, [r7, #19]
 8001734:	fa42 f303 	asr.w	r3, r2, r3
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf0c      	ite	eq
 8001740:	2301      	moveq	r3, #1
 8001742:	2300      	movne	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	b259      	sxtb	r1, r3
 8001748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	2200      	movs	r2, #0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff16 	bl	8001584 <cpu_set_flags>
            return;
 8001758:	e164      	b.n	8001a24 <proc_cb+0x358>

        case 2:
            //RST
            reg_val &= ~(1 << bit);
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	2201      	movs	r2, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	b25b      	sxtb	r3, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	b25a      	sxtb	r2, r3
 8001768:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800176c:	4013      	ands	r3, r2
 800176e:	b25b      	sxtb	r3, r3
 8001770:	747b      	strb	r3, [r7, #17]
            cpu_set_reg8(reg, reg_val);
 8001772:	7c7a      	ldrb	r2, [r7, #17]
 8001774:	7d3b      	ldrb	r3, [r7, #20]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f001 f9d1 	bl	8002b20 <cpu_set_reg8>
            return;
 800177e:	e151      	b.n	8001a24 <proc_cb+0x358>

        case 3:
            //SET
            reg_val |= (1 << bit);
 8001780:	7cfb      	ldrb	r3, [r7, #19]
 8001782:	2201      	movs	r2, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	b25a      	sxtb	r2, r3
 800178a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800178e:	4313      	orrs	r3, r2
 8001790:	b25b      	sxtb	r3, r3
 8001792:	747b      	strb	r3, [r7, #17]
            cpu_set_reg8(reg, reg_val);
 8001794:	7c7a      	ldrb	r2, [r7, #17]
 8001796:	7d3b      	ldrb	r3, [r7, #20]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f001 f9c0 	bl	8002b20 <cpu_set_reg8>
            return;
 80017a0:	e140      	b.n	8001a24 <proc_cb+0x358>
    }

    bool flagC = CPU_FLAG_C;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	785b      	ldrb	r3, [r3, #1]
 80017a6:	111b      	asrs	r3, r3, #4
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf14      	ite	ne
 80017b0:	2301      	movne	r3, #1
 80017b2:	2300      	moveq	r3, #0
 80017b4:	743b      	strb	r3, [r7, #16]

    switch(bit) {
 80017b6:	7cfb      	ldrb	r3, [r7, #19]
 80017b8:	2b07      	cmp	r3, #7
 80017ba:	f200 811f 	bhi.w	80019fc <proc_cb+0x330>
 80017be:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <proc_cb+0xf8>)
 80017c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c4:	080017e5 	.word	0x080017e5
 80017c8:	0800182f 	.word	0x0800182f
 80017cc:	0800187b 	.word	0x0800187b
 80017d0:	080018c1 	.word	0x080018c1
 80017d4:	0800190d 	.word	0x0800190d
 80017d8:	0800194b 	.word	0x0800194b
 80017dc:	08001987 	.word	0x08001987
 80017e0:	080019c5 	.word	0x080019c5
        case 0: {
            //RLC
            bool setC = false;
 80017e4:	2300      	movs	r3, #0
 80017e6:	75fb      	strb	r3, [r7, #23]
            u8 result = (reg_val << 1) & 0xFF;
 80017e8:	7c7b      	ldrb	r3, [r7, #17]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	75bb      	strb	r3, [r7, #22]

            if ((reg_val & (1 << 7)) != 0) {
 80017ee:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da05      	bge.n	8001802 <proc_cb+0x136>
                result |= 1;
 80017f6:	7dbb      	ldrb	r3, [r7, #22]
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	75bb      	strb	r3, [r7, #22]
                setC = true;
 80017fe:	2301      	movs	r3, #1
 8001800:	75fb      	strb	r3, [r7, #23]
            }

            cpu_set_reg8(reg, result);
 8001802:	7dba      	ldrb	r2, [r7, #22]
 8001804:	7d3b      	ldrb	r3, [r7, #20]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f001 f989 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, result == 0, false, false, setC);
 800180e:	7dbb      	ldrb	r3, [r7, #22]
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	b259      	sxtb	r1, r3
 800181c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2300      	movs	r3, #0
 8001824:	2200      	movs	r2, #0
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff feac 	bl	8001584 <cpu_set_flags>
        } return;
 800182c:	e0fa      	b.n	8001a24 <proc_cb+0x358>

        case 1: {
            //RRC
            u8 old = reg_val;
 800182e:	7c7b      	ldrb	r3, [r7, #17]
 8001830:	72bb      	strb	r3, [r7, #10]
            reg_val >>= 1;
 8001832:	7c7b      	ldrb	r3, [r7, #17]
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	747b      	strb	r3, [r7, #17]
            reg_val |= (old << 7);
 8001838:	7abb      	ldrb	r3, [r7, #10]
 800183a:	01db      	lsls	r3, r3, #7
 800183c:	b25a      	sxtb	r2, r3
 800183e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001842:	4313      	orrs	r3, r2
 8001844:	b25b      	sxtb	r3, r3
 8001846:	747b      	strb	r3, [r7, #17]

            cpu_set_reg8(reg, reg_val);
 8001848:	7c7a      	ldrb	r2, [r7, #17]
 800184a:	7d3b      	ldrb	r3, [r7, #20]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f001 f966 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, !reg_val, false, false, old & 1);
 8001854:	7c7b      	ldrb	r3, [r7, #17]
 8001856:	2b00      	cmp	r3, #0
 8001858:	bf0c      	ite	eq
 800185a:	2301      	moveq	r3, #1
 800185c:	2300      	movne	r3, #0
 800185e:	b2db      	uxtb	r3, r3
 8001860:	b259      	sxtb	r1, r3
 8001862:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	b25b      	sxtb	r3, r3
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2300      	movs	r3, #0
 8001870:	2200      	movs	r2, #0
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fe86 	bl	8001584 <cpu_set_flags>
        } return;
 8001878:	e0d4      	b.n	8001a24 <proc_cb+0x358>

        case 2: {
            //RL
            u8 old = reg_val;
 800187a:	7c7b      	ldrb	r3, [r7, #17]
 800187c:	72fb      	strb	r3, [r7, #11]
            reg_val <<= 1;
 800187e:	7c7b      	ldrb	r3, [r7, #17]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	747b      	strb	r3, [r7, #17]
            reg_val |= flagC;
 8001884:	7c3a      	ldrb	r2, [r7, #16]
 8001886:	7c7b      	ldrb	r3, [r7, #17]
 8001888:	4313      	orrs	r3, r2
 800188a:	747b      	strb	r3, [r7, #17]

            cpu_set_reg8(reg, reg_val);
 800188c:	7c7a      	ldrb	r2, [r7, #17]
 800188e:	7d3b      	ldrb	r3, [r7, #20]
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f001 f944 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, !reg_val, false, false, !!(old & 0x80));
 8001898:	7c7b      	ldrb	r3, [r7, #17]
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	b259      	sxtb	r1, r3
 80018a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	09db      	lsrs	r3, r3, #7
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	b25b      	sxtb	r3, r3
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2300      	movs	r3, #0
 80018b6:	2200      	movs	r2, #0
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff fe63 	bl	8001584 <cpu_set_flags>
        } return;
 80018be:	e0b1      	b.n	8001a24 <proc_cb+0x358>

        case 3: {
            //RR
            u8 old = reg_val;
 80018c0:	7c7b      	ldrb	r3, [r7, #17]
 80018c2:	733b      	strb	r3, [r7, #12]
            reg_val >>= 1;
 80018c4:	7c7b      	ldrb	r3, [r7, #17]
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	747b      	strb	r3, [r7, #17]

            reg_val |= (flagC << 7);
 80018ca:	7c3b      	ldrb	r3, [r7, #16]
 80018cc:	01db      	lsls	r3, r3, #7
 80018ce:	b25a      	sxtb	r2, r3
 80018d0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b25b      	sxtb	r3, r3
 80018d8:	747b      	strb	r3, [r7, #17]

            cpu_set_reg8(reg, reg_val);
 80018da:	7c7a      	ldrb	r2, [r7, #17]
 80018dc:	7d3b      	ldrb	r3, [r7, #20]
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 f91d 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, !reg_val, false, false, old & 1);
 80018e6:	7c7b      	ldrb	r3, [r7, #17]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf0c      	ite	eq
 80018ec:	2301      	moveq	r3, #1
 80018ee:	2300      	movne	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	b259      	sxtb	r1, r3
 80018f4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2300      	movs	r3, #0
 8001902:	2200      	movs	r2, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fe3d 	bl	8001584 <cpu_set_flags>
        } return;
 800190a:	e08b      	b.n	8001a24 <proc_cb+0x358>

        case 4: {
            //SLA
            u8 old = reg_val;
 800190c:	7c7b      	ldrb	r3, [r7, #17]
 800190e:	737b      	strb	r3, [r7, #13]
            reg_val <<= 1;
 8001910:	7c7b      	ldrb	r3, [r7, #17]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	747b      	strb	r3, [r7, #17]

            cpu_set_reg8(reg, reg_val);
 8001916:	7c7a      	ldrb	r2, [r7, #17]
 8001918:	7d3b      	ldrb	r3, [r7, #20]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f001 f8ff 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, !reg_val, false, false, !!(old & 0x80));
 8001922:	7c7b      	ldrb	r3, [r7, #17]
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	b259      	sxtb	r1, r3
 8001930:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	09db      	lsrs	r3, r3, #7
 8001938:	b2db      	uxtb	r3, r3
 800193a:	b25b      	sxtb	r3, r3
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2300      	movs	r3, #0
 8001940:	2200      	movs	r2, #0
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fe1e 	bl	8001584 <cpu_set_flags>
        } return;
 8001948:	e06c      	b.n	8001a24 <proc_cb+0x358>

        case 5: {
            //SRA
            u8 u = (int8_t)reg_val >> 1;
 800194a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800194e:	105b      	asrs	r3, r3, #1
 8001950:	b25b      	sxtb	r3, r3
 8001952:	73bb      	strb	r3, [r7, #14]
            cpu_set_reg8(reg, u);
 8001954:	7bba      	ldrb	r2, [r7, #14]
 8001956:	7d3b      	ldrb	r3, [r7, #20]
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f001 f8e0 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, !u, 0, 0, reg_val & 1);
 8001960:	7bbb      	ldrb	r3, [r7, #14]
 8001962:	2b00      	cmp	r3, #0
 8001964:	bf0c      	ite	eq
 8001966:	2301      	moveq	r3, #1
 8001968:	2300      	movne	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	b259      	sxtb	r1, r3
 800196e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	b25b      	sxtb	r3, r3
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2300      	movs	r3, #0
 800197c:	2200      	movs	r2, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fe00 	bl	8001584 <cpu_set_flags>
        } return;
 8001984:	e04e      	b.n	8001a24 <proc_cb+0x358>

        case 6: {
            //SWAP
            reg_val = ((reg_val & 0xF0) >> 4) | ((reg_val & 0xF) << 4);
 8001986:	7c7b      	ldrb	r3, [r7, #17]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	b2db      	uxtb	r3, r3
 800198c:	b25a      	sxtb	r2, r3
 800198e:	7c7b      	ldrb	r3, [r7, #17]
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	b25b      	sxtb	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b25b      	sxtb	r3, r3
 8001998:	747b      	strb	r3, [r7, #17]
            cpu_set_reg8(reg, reg_val);
 800199a:	7c7a      	ldrb	r2, [r7, #17]
 800199c:	7d3b      	ldrb	r3, [r7, #20]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 f8bd 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, reg_val == 0, false, false, false);
 80019a6:	7c7b      	ldrb	r3, [r7, #17]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf0c      	ite	eq
 80019ac:	2301      	moveq	r3, #1
 80019ae:	2300      	movne	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	b259      	sxtb	r1, r3
 80019b4:	2300      	movs	r3, #0
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2300      	movs	r3, #0
 80019ba:	2200      	movs	r2, #0
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fde1 	bl	8001584 <cpu_set_flags>
        } return;
 80019c2:	e02f      	b.n	8001a24 <proc_cb+0x358>

        case 7: {
            //SRL
            u8 u = reg_val >> 1;
 80019c4:	7c7b      	ldrb	r3, [r7, #17]
 80019c6:	085b      	lsrs	r3, r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
            cpu_set_reg8(reg, u);
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	7d3b      	ldrb	r3, [r7, #20]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 f8a5 	bl	8002b20 <cpu_set_reg8>
            cpu_set_flags(ctx, !u, 0, 0, reg_val & 1);
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	b259      	sxtb	r1, r3
 80019e4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2300      	movs	r3, #0
 80019f2:	2200      	movs	r2, #0
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fdc5 	bl	8001584 <cpu_set_flags>
        } return;
 80019fa:	e013      	b.n	8001a24 <proc_cb+0x358>
    }

    fprintf(stderr, "ERROR: INVALID CB: %02X", op);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <proc_cb+0x360>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	7d7a      	ldrb	r2, [r7, #21]
 8001a04:	490a      	ldr	r1, [pc, #40]	; (8001a30 <proc_cb+0x364>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f00f f9c4 	bl	8010d94 <fiprintf>
    NO_IMPL
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <proc_cb+0x360>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2214      	movs	r2, #20
 8001a14:	2101      	movs	r1, #1
 8001a16:	4807      	ldr	r0, [pc, #28]	; (8001a34 <proc_cb+0x368>)
 8001a18:	f00f fbfc 	bl	8011214 <fwrite>
 8001a1c:	f06f 0004 	mvn.w	r0, #4
 8001a20:	f00e ff2a 	bl	8010878 <exit>
}
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200009dc 	.word	0x200009dc
 8001a30:	08012ba4 	.word	0x08012ba4
 8001a34:	08012bbc 	.word	0x08012bbc

08001a38 <proc_rlca>:

static void proc_rlca(cpu_context *ctx) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	6078      	str	r0, [r7, #4]
    u8 u = ctx->regs.a;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	73fb      	strb	r3, [r7, #15]
    bool c = (u >> 7) & 1;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	09db      	lsrs	r3, r3, #7
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf14      	ite	ne
 8001a54:	2301      	movne	r3, #1
 8001a56:	2300      	moveq	r3, #0
 8001a58:	73bb      	strb	r3, [r7, #14]
    u = (u << 1) | c;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	b25a      	sxtb	r2, r3
 8001a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	73fb      	strb	r3, [r7, #15]
    ctx->regs.a = u;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, 0, 0, 0, c);
 8001a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2300      	movs	r3, #0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff fd81 	bl	8001584 <cpu_set_flags>
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <proc_rrca>:

static void proc_rrca(cpu_context *ctx) {
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af02      	add	r7, sp, #8
 8001a90:	6078      	str	r0, [r7, #4]
    u8 b = ctx->regs.a & 1;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
    ctx->regs.a >>= 1;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	085b      	lsrs	r3, r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	701a      	strb	r2, [r3, #0]
    ctx->regs.a |= (b << 7);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b25a      	sxtb	r2, r3
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	01db      	lsls	r3, r3, #7
 8001ab2:	b25b      	sxtb	r3, r3
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, 0, 0, 0, b);
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fd5a 	bl	8001584 <cpu_set_flags>
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <proc_rla>:


static void proc_rla(cpu_context *ctx) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	6078      	str	r0, [r7, #4]
    u8 u = ctx->regs.a;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	73fb      	strb	r3, [r7, #15]
    u8 cf = CPU_FLAG_C;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	111b      	asrs	r3, r3, #4
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	73bb      	strb	r3, [r7, #14]
    u8 c = (u >> 7) & 1;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	09db      	lsrs	r3, r3, #7
 8001af8:	737b      	strb	r3, [r7, #13]

    ctx->regs.a = (u << 1) | cf;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	b25a      	sxtb	r2, r3
 8001b00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, 0, 0, 0, c);
 8001b0e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2300      	movs	r3, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fd32 	bl	8001584 <cpu_set_flags>
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <proc_stop>:

static void proc_stop(cpu_context *ctx) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    fprintf(stderr, "STOPPING!\n");
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <proc_stop+0x20>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	220a      	movs	r2, #10
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4804      	ldr	r0, [pc, #16]	; (8001b4c <proc_stop+0x24>)
 8001b3c:	f00f fb6a 	bl	8011214 <fwrite>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200009dc 	.word	0x200009dc
 8001b4c:	08012bd4 	.word	0x08012bd4

08001b50 <proc_daa>:

static void proc_daa(cpu_context *ctx) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	6078      	str	r0, [r7, #4]
    u8 u = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]
    int fc = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]

    if (CPU_FLAG_H || (!CPU_FLAG_N && (ctx->regs.a & 0xF) > 9)) {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	785b      	ldrb	r3, [r3, #1]
 8001b64:	115b      	asrs	r3, r3, #5
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10b      	bne.n	8001b88 <proc_daa+0x38>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	785b      	ldrb	r3, [r3, #1]
 8001b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d107      	bne.n	8001b8c <proc_daa+0x3c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	2b09      	cmp	r3, #9
 8001b86:	dd01      	ble.n	8001b8c <proc_daa+0x3c>
        u = 6;
 8001b88:	2306      	movs	r3, #6
 8001b8a:	73fb      	strb	r3, [r7, #15]
    }

    if (CPU_FLAG_C || (!CPU_FLAG_N && ctx->regs.a > 0x99)) {
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	785b      	ldrb	r3, [r3, #1]
 8001b90:	111b      	asrs	r3, r3, #4
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <proc_daa+0x60>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	785b      	ldrb	r3, [r3, #1]
 8001ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <proc_daa+0x6c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b99      	cmp	r3, #153	; 0x99
 8001bae:	d905      	bls.n	8001bbc <proc_daa+0x6c>
        u |= 0x60;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bb6:	73fb      	strb	r3, [r7, #15]
        fc = 1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
    }

    ctx->regs.a += CPU_FLAG_N ? -u : u;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	119b      	asrs	r3, r3, #6
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <proc_daa+0x88>
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	425b      	negs	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e000      	b.n	8001bda <proc_daa+0x8a>
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	4413      	add	r3, r2
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, ctx->regs.a == 0, -1, 0, fc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf0c      	ite	eq
 8001bea:	2301      	moveq	r3, #1
 8001bec:	2300      	movne	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	b259      	sxtb	r1, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fcc0 	bl	8001584 <cpu_set_flags>
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <proc_cpl>:

static void proc_cpl(cpu_context *ctx) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	6078      	str	r0, [r7, #4]
    ctx->regs.a = ~ctx->regs.a;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, -1, 1, 1, -1);
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2301      	movs	r3, #1
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fca8 	bl	8001584 <cpu_set_flags>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <proc_scf>:

static void proc_scf(cpu_context *ctx) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	6078      	str	r0, [r7, #4]
    cpu_set_flags(ctx, -1, 0, 0, 1);
 8001c44:	2301      	movs	r3, #1
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fc97 	bl	8001584 <cpu_set_flags>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <proc_ccf>:

static void proc_ccf(cpu_context *ctx) {
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af02      	add	r7, sp, #8
 8001c64:	6078      	str	r0, [r7, #4]
    cpu_set_flags(ctx, -1, 0, 0, CPU_FLAG_C ^ 1);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	785b      	ldrb	r3, [r3, #1]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf0c      	ite	eq
 8001c72:	2301      	moveq	r3, #1
 8001c74:	2300      	movne	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	b25b      	sxtb	r3, r3
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fc7d 	bl	8001584 <cpu_set_flags>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <proc_halt>:

static void proc_halt(cpu_context *ctx) {
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
    ctx->halted = true;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	761a      	strb	r2, [r3, #24]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <proc_rra>:

static void proc_rra(cpu_context *ctx) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	6078      	str	r0, [r7, #4]
    u8 carry = CPU_FLAG_C;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	785b      	ldrb	r3, [r3, #1]
 8001cb8:	111b      	asrs	r3, r3, #4
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
    u8 new_c = ctx->regs.a & 1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	73bb      	strb	r3, [r7, #14]

    ctx->regs.a >>= 1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	701a      	strb	r2, [r3, #0]
    ctx->regs.a |= (carry << 7);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b25a      	sxtb	r2, r3
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	01db      	lsls	r3, r3, #7
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, 0, 0, 0, new_c);
 8001cee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fc42 	bl	8001584 <cpu_set_flags>
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <proc_and>:

static void proc_and(cpu_context *ctx) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	6078      	str	r0, [r7, #4]
    ctx->regs.a &= ctx->fetched_data;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	899b      	ldrh	r3, [r3, #12]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 1, 0);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	bf0c      	ite	eq
 8001d2a:	2301      	moveq	r3, #1
 8001d2c:	2300      	movne	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	b259      	sxtb	r1, r3
 8001d32:	2300      	movs	r3, #0
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2301      	movs	r3, #1
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fc22 	bl	8001584 <cpu_set_flags>
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <proc_xor>:

static void proc_xor(cpu_context *ctx) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	6078      	str	r0, [r7, #4]
    ctx->regs.a ^= ctx->fetched_data & 0xFF;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b25a      	sxtb	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	899b      	ldrh	r3, [r3, #12]
 8001d5a:	b25b      	sxtb	r3, r3
 8001d5c:	4053      	eors	r3, r2
 8001d5e:	b25b      	sxtb	r3, r3
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 0, 0);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2301      	moveq	r3, #1
 8001d70:	2300      	movne	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	b259      	sxtb	r1, r3
 8001d76:	2300      	movs	r3, #0
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff fc00 	bl	8001584 <cpu_set_flags>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <proc_or>:

static void proc_or(cpu_context *ctx) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	6078      	str	r0, [r7, #4]
    ctx->regs.a |= ctx->fetched_data & 0xFF;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b25a      	sxtb	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	899b      	ldrh	r3, [r3, #12]
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	4313      	orrs	r3, r2
 8001da2:	b25b      	sxtb	r3, r3
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	701a      	strb	r2, [r3, #0]
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 0, 0);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	b259      	sxtb	r1, r3
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fbde 	bl	8001584 <cpu_set_flags>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <proc_cp>:

static void proc_cp(cpu_context *ctx) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	6078      	str	r0, [r7, #4]
    int n = (int)ctx->regs.a - (int)ctx->fetched_data;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	899b      	ldrh	r3, [r3, #12]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	60fb      	str	r3, [r7, #12]

    cpu_set_flags(ctx, n == 0, 1, 
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	b259      	sxtb	r1, r3
        ((int)ctx->regs.a & 0x0F) - ((int)ctx->fetched_data & 0x0F) < 0, n < 0);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	f003 020f 	and.w	r2, r3, #15
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	899b      	ldrh	r3, [r3, #12]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	1ad3      	subs	r3, r2, r3
    cpu_set_flags(ctx, n == 0, 1, 
 8001e06:	0fdb      	lsrs	r3, r3, #31
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	b25a      	sxtb	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	0fdb      	lsrs	r3, r3, #31
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	4613      	mov	r3, r2
 8001e18:	2201      	movs	r2, #1
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff fbb2 	bl	8001584 <cpu_set_flags>
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <proc_di>:

static void proc_di(cpu_context *ctx) {
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    ctx->int_master_enabled = false;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	769a      	strb	r2, [r3, #26]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <proc_ei>:

static void proc_ei(cpu_context *ctx) {
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
    ctx->enabling_ime = true;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	76da      	strb	r2, [r3, #27]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <is_16_bit>:

static bool is_16_bit(reg_type rt) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
    return rt >= RT_AF;
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	bf8c      	ite	hi
 8001e6c:	2301      	movhi	r3, #1
 8001e6e:	2300      	movls	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <proc_ld>:

static void proc_ld(cpu_context *ctx) {
 8001e7e:	b590      	push	{r4, r7, lr}
 8001e80:	b087      	sub	sp, #28
 8001e82:	af02      	add	r7, sp, #8
 8001e84:	6078      	str	r0, [r7, #4]
    if (ctx->dest_is_mem) {
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7c1b      	ldrb	r3, [r3, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d021      	beq.n	8001ed2 <proc_ld+0x54>
        //LD (BC), A for instance...

        if (is_16_bit(ctx->cur_inst->reg_2)) {
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	78db      	ldrb	r3, [r3, #3]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ffe1 	bl	8001e5c <is_16_bit>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00b      	beq.n	8001eb8 <proc_ld+0x3a>
            //if 16 bit register...
            emu_cycles(1);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f000 ffef 	bl	8002e84 <emu_cycles>
            bus_write16(ctx->mem_dest, ctx->fetched_data);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	89da      	ldrh	r2, [r3, #14]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	899b      	ldrh	r3, [r3, #12]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f7fe fc67 	bl	8000784 <bus_write16>
 8001eb6:	e008      	b.n	8001eca <proc_ld+0x4c>
        } else {
            bus_write(ctx->mem_dest, ctx->fetched_data);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	89da      	ldrh	r2, [r3, #14]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	899b      	ldrh	r3, [r3, #12]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f7fe fbef 	bl	80006a8 <bus_write>
        }

        emu_cycles(1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f000 ffda 	bl	8002e84 <emu_cycles>

        return;
 8001ed0:	e054      	b.n	8001f7c <proc_ld+0xfe>
    }

    if (ctx->cur_inst->mode == AM_HL_SPR) {
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	785b      	ldrb	r3, [r3, #1]
 8001ed8:	2b0d      	cmp	r3, #13
 8001eda:	d146      	bne.n	8001f6a <proc_ld+0xec>
        u8 hflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xF) + 
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	78db      	ldrb	r3, [r3, #3]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fcb8 	bl	8002858 <cpu_read_reg>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f003 020f 	and.w	r2, r3, #15
            (ctx->fetched_data & 0xF) >= 0x10;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	899b      	ldrh	r3, [r3, #12]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
        u8 hflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xF) + 
 8001ef6:	4413      	add	r3, r2
            (ctx->fetched_data & 0xF) >= 0x10;
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	bfcc      	ite	gt
 8001efc:	2301      	movgt	r3, #1
 8001efe:	2300      	movle	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
        u8 hflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xF) + 
 8001f02:	73fb      	strb	r3, [r7, #15]

        u8 cflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xFF) + 
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	78db      	ldrb	r3, [r3, #3]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fca4 	bl	8002858 <cpu_read_reg>
 8001f10:	4603      	mov	r3, r0
 8001f12:	b2da      	uxtb	r2, r3
            (ctx->fetched_data & 0xFF) >= 0x100;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	899b      	ldrh	r3, [r3, #12]
 8001f18:	b2db      	uxtb	r3, r3
        u8 cflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xFF) + 
 8001f1a:	4413      	add	r3, r2
            (ctx->fetched_data & 0xFF) >= 0x100;
 8001f1c:	2bff      	cmp	r3, #255	; 0xff
 8001f1e:	bfcc      	ite	gt
 8001f20:	2301      	movgt	r3, #1
 8001f22:	2300      	movle	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
        u8 cflag = (cpu_read_reg(ctx->cur_inst->reg_2) & 0xFF) + 
 8001f26:	73bb      	strb	r3, [r7, #14]

        cpu_set_flags(ctx, 0, 0, hflag, cflag);
 8001f28:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	4613      	mov	r3, r2
 8001f34:	2200      	movs	r2, #0
 8001f36:	2100      	movs	r1, #0
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fb23 	bl	8001584 <cpu_set_flags>
        cpu_set_reg(ctx->cur_inst->reg_1, 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	789c      	ldrb	r4, [r3, #2]
            cpu_read_reg(ctx->cur_inst->reg_2) + (int8_t)ctx->fetched_data);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	78db      	ldrb	r3, [r3, #3]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fc84 	bl	8002858 <cpu_read_reg>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	899b      	ldrh	r3, [r3, #12]
 8001f58:	b25b      	sxtb	r3, r3
 8001f5a:	b29b      	uxth	r3, r3
        cpu_set_reg(ctx->cur_inst->reg_1, 
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4619      	mov	r1, r3
 8001f62:	4620      	mov	r0, r4
 8001f64:	f000 fcf0 	bl	8002948 <cpu_set_reg>

        return;
 8001f68:	e008      	b.n	8001f7c <proc_ld+0xfe>
    }

    cpu_set_reg(ctx->cur_inst->reg_1, ctx->fetched_data);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	789a      	ldrb	r2, [r3, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	899b      	ldrh	r3, [r3, #12]
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f000 fce6 	bl	8002948 <cpu_set_reg>
}
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd90      	pop	{r4, r7, pc}

08001f82 <proc_ldh>:

static void proc_ldh(cpu_context *ctx) {
 8001f82:	b590      	push	{r4, r7, lr}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
    if (ctx->cur_inst->reg_1 == RT_A) {
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	789b      	ldrb	r3, [r3, #2]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d111      	bne.n	8001fb8 <proc_ldh+0x36>
        cpu_set_reg(ctx->cur_inst->reg_1, bus_read(0xFF00 | ctx->fetched_data));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	789c      	ldrb	r4, [r3, #2]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	899b      	ldrh	r3, [r3, #12]
 8001f9e:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fb17 	bl	80005d8 <bus_read>
 8001faa:	4603      	mov	r3, r0
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f000 fcc9 	bl	8002948 <cpu_set_reg>
 8001fb6:	e007      	b.n	8001fc8 <proc_ldh+0x46>
    } else {
        bus_write(ctx->mem_dest, ctx->regs.a);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	89da      	ldrh	r2, [r3, #14]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f7fe fb70 	bl	80006a8 <bus_write>
    }

    emu_cycles(1);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f000 ff5b 	bl	8002e84 <emu_cycles>
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}
	...

08001fd8 <check_cond>:


static bool check_cond(cpu_context *ctx) {
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
    bool z = CPU_FLAG_Z;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	785b      	ldrb	r3, [r3, #1]
 8001fe4:	b25b      	sxtb	r3, r3
 8001fe6:	11db      	asrs	r3, r3, #7
 8001fe8:	b25b      	sxtb	r3, r3
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bf14      	ite	ne
 8001ff2:	2301      	movne	r3, #1
 8001ff4:	2300      	moveq	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
    bool c = CPU_FLAG_C;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	785b      	ldrb	r3, [r3, #1]
 8001ffc:	111b      	asrs	r3, r3, #4
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	73bb      	strb	r3, [r7, #14]

    switch(ctx->cur_inst->cond) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	791b      	ldrb	r3, [r3, #4]
 8002012:	2b04      	cmp	r3, #4
 8002014:	d82c      	bhi.n	8002070 <check_cond+0x98>
 8002016:	a201      	add	r2, pc, #4	; (adr r2, 800201c <check_cond+0x44>)
 8002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201c:	08002031 	.word	0x08002031
 8002020:	08002057 	.word	0x08002057
 8002024:	08002053 	.word	0x08002053
 8002028:	08002039 	.word	0x08002039
 800202c:	08002035 	.word	0x08002035
        case CT_NONE: return true;
 8002030:	2301      	movs	r3, #1
 8002032:	e01e      	b.n	8002072 <check_cond+0x9a>
        case CT_C: return c;
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	e01c      	b.n	8002072 <check_cond+0x9a>
        case CT_NC: return !c;
 8002038:	7bbb      	ldrb	r3, [r7, #14]
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f083 0301 	eor.w	r3, r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	e00f      	b.n	8002072 <check_cond+0x9a>
        case CT_Z: return z;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	e00d      	b.n	8002072 <check_cond+0x9a>
        case CT_NZ: return !z;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f083 0301 	eor.w	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e000      	b.n	8002072 <check_cond+0x9a>
    }

    return false;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop

08002080 <goto_addr>:

static void goto_addr(cpu_context *ctx, u16 addr, bool pushpc) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
    if (check_cond(ctx)) {
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ffa1 	bl	8001fd8 <check_cond>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d010      	beq.n	80020be <goto_addr+0x3e>
        if (pushpc) {
 800209c:	787b      	ldrb	r3, [r7, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <goto_addr+0x32>
            emu_cycles(2);
 80020a2:	2002      	movs	r0, #2
 80020a4:	f000 feee 	bl	8002e84 <emu_cycles>
            stack_push16(ctx->regs.pc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	891b      	ldrh	r3, [r3, #8]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 f9b6 	bl	800541e <stack_push16>
        }

        ctx->regs.pc = addr;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	887a      	ldrh	r2, [r7, #2]
 80020b6:	811a      	strh	r2, [r3, #8]
        emu_cycles(1);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f000 fee3 	bl	8002e84 <emu_cycles>
    }
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <proc_jp>:

static void proc_jp(cpu_context *ctx) {
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
    goto_addr(ctx, ctx->fetched_data, false);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	899b      	ldrh	r3, [r3, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	4619      	mov	r1, r3
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ffd2 	bl	8002080 <goto_addr>
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <proc_jr>:

static void proc_jr(cpu_context *ctx) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    int8_t rel = (int8_t)(ctx->fetched_data & 0xFF);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	899b      	ldrh	r3, [r3, #12]
 80020f0:	73fb      	strb	r3, [r7, #15]
    u16 addr = ctx->regs.pc + rel;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	891a      	ldrh	r2, [r3, #8]
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	81bb      	strh	r3, [r7, #12]
    goto_addr(ctx, addr, false);
 8002100:	89bb      	ldrh	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	4619      	mov	r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ffba 	bl	8002080 <goto_addr>
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <proc_call>:

static void proc_call(cpu_context *ctx) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    goto_addr(ctx, ctx->fetched_data, true);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	899b      	ldrh	r3, [r3, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	4619      	mov	r1, r3
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ffab 	bl	8002080 <goto_addr>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <proc_rst>:

static void proc_rst(cpu_context *ctx) {
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
    goto_addr(ctx, ctx->cur_inst->param, true);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	795b      	ldrb	r3, [r3, #5]
 8002140:	b29b      	uxth	r3, r3
 8002142:	2201      	movs	r2, #1
 8002144:	4619      	mov	r1, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ff9a 	bl	8002080 <goto_addr>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <proc_ret>:

static void proc_ret(cpu_context *ctx) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    if (ctx->cur_inst->cond != CT_NONE) {
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	791b      	ldrb	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <proc_ret+0x18>
        emu_cycles(1);
 8002166:	2001      	movs	r0, #1
 8002168:	f000 fe8c 	bl	8002e84 <emu_cycles>
    }

    if (check_cond(ctx)) {
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff33 	bl	8001fd8 <check_cond>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01b      	beq.n	80021b0 <proc_ret+0x5c>
        u16 lo = stack_pop();
 8002178:	f003 f966 	bl	8005448 <stack_pop>
 800217c:	4603      	mov	r3, r0
 800217e:	81fb      	strh	r3, [r7, #14]
        emu_cycles(1);
 8002180:	2001      	movs	r0, #1
 8002182:	f000 fe7f 	bl	8002e84 <emu_cycles>
        u16 hi = stack_pop();
 8002186:	f003 f95f 	bl	8005448 <stack_pop>
 800218a:	4603      	mov	r3, r0
 800218c:	81bb      	strh	r3, [r7, #12]
        emu_cycles(1);
 800218e:	2001      	movs	r0, #1
 8002190:	f000 fe78 	bl	8002e84 <emu_cycles>

        u16 n = (hi << 8) | lo;
 8002194:	89bb      	ldrh	r3, [r7, #12]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	b21a      	sxth	r2, r3
 800219a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	817b      	strh	r3, [r7, #10]
        ctx->regs.pc = n;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	897a      	ldrh	r2, [r7, #10]
 80021a8:	811a      	strh	r2, [r3, #8]

        emu_cycles(1);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f000 fe6a 	bl	8002e84 <emu_cycles>
    }
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <proc_reti>:

static void proc_reti(cpu_context *ctx) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    ctx->int_master_enabled = true;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	769a      	strb	r2, [r3, #26]
    proc_ret(ctx);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ffc4 	bl	8002154 <proc_ret>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <proc_pop>:

static void proc_pop(cpu_context *ctx) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
    u16 lo = stack_pop();
 80021dc:	f003 f934 	bl	8005448 <stack_pop>
 80021e0:	4603      	mov	r3, r0
 80021e2:	81fb      	strh	r3, [r7, #14]
    emu_cycles(1);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f000 fe4d 	bl	8002e84 <emu_cycles>
    u16 hi = stack_pop();
 80021ea:	f003 f92d 	bl	8005448 <stack_pop>
 80021ee:	4603      	mov	r3, r0
 80021f0:	81bb      	strh	r3, [r7, #12]
    emu_cycles(1);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f000 fe46 	bl	8002e84 <emu_cycles>

    u16 n = (hi << 8) | lo;
 80021f8:	89bb      	ldrh	r3, [r7, #12]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002202:	4313      	orrs	r3, r2
 8002204:	b21b      	sxth	r3, r3
 8002206:	817b      	strh	r3, [r7, #10]

    cpu_set_reg(ctx->cur_inst->reg_1, n);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	789b      	ldrb	r3, [r3, #2]
 800220e:	897a      	ldrh	r2, [r7, #10]
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fb98 	bl	8002948 <cpu_set_reg>

    if (ctx->cur_inst->reg_1 == RT_AF) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	789b      	ldrb	r3, [r3, #2]
 800221e:	2b09      	cmp	r3, #9
 8002220:	d10a      	bne.n	8002238 <proc_pop+0x64>
        cpu_set_reg(ctx->cur_inst->reg_1, n & 0xFFF0);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	789a      	ldrb	r2, [r3, #2]
 8002228:	897b      	ldrh	r3, [r7, #10]
 800222a:	f023 030f 	bic.w	r3, r3, #15
 800222e:	b29b      	uxth	r3, r3
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f000 fb88 	bl	8002948 <cpu_set_reg>
    }
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <proc_push>:

static void proc_push(cpu_context *ctx) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    u16 hi = (cpu_read_reg(ctx->cur_inst->reg_1) >> 8) & 0xFF;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	789b      	ldrb	r3, [r3, #2]
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fb02 	bl	8002858 <cpu_read_reg>
 8002254:	4603      	mov	r3, r0
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	b29b      	uxth	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	81fb      	strh	r3, [r7, #14]
    emu_cycles(1);
 800225e:	2001      	movs	r0, #1
 8002260:	f000 fe10 	bl	8002e84 <emu_cycles>
    stack_push(hi);
 8002264:	89fb      	ldrh	r3, [r7, #14]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4618      	mov	r0, r3
 800226a:	f003 f8bf 	bl	80053ec <stack_push>

    u16 lo = cpu_read_reg(ctx->cur_inst->reg_1) & 0xFF;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	789b      	ldrb	r3, [r3, #2]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 faef 	bl	8002858 <cpu_read_reg>
 800227a:	4603      	mov	r3, r0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	81bb      	strh	r3, [r7, #12]
    emu_cycles(1);
 8002280:	2001      	movs	r0, #1
 8002282:	f000 fdff 	bl	8002e84 <emu_cycles>
    stack_push(lo);
 8002286:	89bb      	ldrh	r3, [r7, #12]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	4618      	mov	r0, r3
 800228c:	f003 f8ae 	bl	80053ec <stack_push>
    
    emu_cycles(1);
 8002290:	2001      	movs	r0, #1
 8002292:	f000 fdf7 	bl	8002e84 <emu_cycles>
}
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <proc_inc>:

static void proc_inc(cpu_context *ctx) {
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af02      	add	r7, sp, #8
 80022a4:	6078      	str	r0, [r7, #4]
    u16 val = cpu_read_reg(ctx->cur_inst->reg_1) + 1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	789b      	ldrb	r3, [r3, #2]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fad3 	bl	8002858 <cpu_read_reg>
 80022b2:	4603      	mov	r3, r0
 80022b4:	3301      	adds	r3, #1
 80022b6:	81fb      	strh	r3, [r7, #14]

    if (is_16_bit(ctx->cur_inst->reg_1)) {
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	789b      	ldrb	r3, [r3, #2]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fdcc 	bl	8001e5c <is_16_bit>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <proc_inc+0x32>
        emu_cycles(1);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f000 fdda 	bl	8002e84 <emu_cycles>
    }

    if (ctx->cur_inst->reg_1 == RT_HL && ctx->cur_inst->mode == AM_MR) {
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	789b      	ldrb	r3, [r3, #2]
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d11e      	bne.n	8002318 <proc_inc+0x7a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	785b      	ldrb	r3, [r3, #1]
 80022e0:	2b12      	cmp	r3, #18
 80022e2:	d119      	bne.n	8002318 <proc_inc+0x7a>
        val = bus_read(cpu_read_reg(RT_HL)) + 1;
 80022e4:	200c      	movs	r0, #12
 80022e6:	f000 fab7 	bl	8002858 <cpu_read_reg>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f973 	bl	80005d8 <bus_read>
 80022f2:	4603      	mov	r3, r0
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	81fb      	strh	r3, [r7, #14]
        val &= 0xFF;
 80022fa:	89fb      	ldrh	r3, [r7, #14]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	81fb      	strh	r3, [r7, #14]
        bus_write(cpu_read_reg(RT_HL), val);
 8002300:	200c      	movs	r0, #12
 8002302:	f000 faa9 	bl	8002858 <cpu_read_reg>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	4619      	mov	r1, r3
 8002310:	4610      	mov	r0, r2
 8002312:	f7fe f9c9 	bl	80006a8 <bus_write>
 8002316:	e00f      	b.n	8002338 <proc_inc+0x9a>
    } else {
        cpu_set_reg(ctx->cur_inst->reg_1, val);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	789b      	ldrb	r3, [r3, #2]
 800231e:	89fa      	ldrh	r2, [r7, #14]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fb10 	bl	8002948 <cpu_set_reg>
        val = cpu_read_reg(ctx->cur_inst->reg_1);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	789b      	ldrb	r3, [r3, #2]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fa92 	bl	8002858 <cpu_read_reg>
 8002334:	4603      	mov	r3, r0
 8002336:	81fb      	strh	r3, [r7, #14]
    }

    if ((ctx->cur_opcode & 0x03) == 0x03) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7c5b      	ldrb	r3, [r3, #17]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b03      	cmp	r3, #3
 8002342:	d017      	beq.n	8002374 <proc_inc+0xd6>
        return;
    }

    cpu_set_flags(ctx, val == 0, 0, (val & 0x0F) == 0, -1);
 8002344:	89fb      	ldrh	r3, [r7, #14]
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf0c      	ite	eq
 800234a:	2301      	moveq	r3, #1
 800234c:	2300      	movne	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	b259      	sxtb	r1, r3
 8002352:	89fb      	ldrh	r3, [r7, #14]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	b25b      	sxtb	r3, r3
 8002364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002368:	9200      	str	r2, [sp, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff f909 	bl	8001584 <cpu_set_flags>
 8002372:	e000      	b.n	8002376 <proc_inc+0xd8>
        return;
 8002374:	bf00      	nop
}
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <proc_dec>:

static void proc_dec(cpu_context *ctx) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af02      	add	r7, sp, #8
 8002382:	6078      	str	r0, [r7, #4]
    u16 val = cpu_read_reg(ctx->cur_inst->reg_1) - 1;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	789b      	ldrb	r3, [r3, #2]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fa64 	bl	8002858 <cpu_read_reg>
 8002390:	4603      	mov	r3, r0
 8002392:	3b01      	subs	r3, #1
 8002394:	81fb      	strh	r3, [r7, #14]

    if (is_16_bit(ctx->cur_inst->reg_1)) {
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	789b      	ldrb	r3, [r3, #2]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fd5d 	bl	8001e5c <is_16_bit>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <proc_dec+0x32>
        emu_cycles(1);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f000 fd6b 	bl	8002e84 <emu_cycles>
    }

    if (ctx->cur_inst->reg_1 == RT_HL && ctx->cur_inst->mode == AM_MR) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	789b      	ldrb	r3, [r3, #2]
 80023b4:	2b0c      	cmp	r3, #12
 80023b6:	d11b      	bne.n	80023f0 <proc_dec+0x74>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	785b      	ldrb	r3, [r3, #1]
 80023be:	2b12      	cmp	r3, #18
 80023c0:	d116      	bne.n	80023f0 <proc_dec+0x74>
        val = bus_read(cpu_read_reg(RT_HL)) - 1;
 80023c2:	200c      	movs	r0, #12
 80023c4:	f000 fa48 	bl	8002858 <cpu_read_reg>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe f904 	bl	80005d8 <bus_read>
 80023d0:	4603      	mov	r3, r0
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	81fb      	strh	r3, [r7, #14]
        bus_write(cpu_read_reg(RT_HL), val);
 80023d8:	200c      	movs	r0, #12
 80023da:	f000 fa3d 	bl	8002858 <cpu_read_reg>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	89fb      	ldrh	r3, [r7, #14]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	4619      	mov	r1, r3
 80023e8:	4610      	mov	r0, r2
 80023ea:	f7fe f95d 	bl	80006a8 <bus_write>
 80023ee:	e00f      	b.n	8002410 <proc_dec+0x94>
    } else {
        cpu_set_reg(ctx->cur_inst->reg_1, val);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	789b      	ldrb	r3, [r3, #2]
 80023f6:	89fa      	ldrh	r2, [r7, #14]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 faa4 	bl	8002948 <cpu_set_reg>
        val = cpu_read_reg(ctx->cur_inst->reg_1);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	789b      	ldrb	r3, [r3, #2]
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fa26 	bl	8002858 <cpu_read_reg>
 800240c:	4603      	mov	r3, r0
 800240e:	81fb      	strh	r3, [r7, #14]
    }

    if ((ctx->cur_opcode & 0x0B) == 0x0B) {
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7c5b      	ldrb	r3, [r3, #17]
 8002414:	f003 030b 	and.w	r3, r3, #11
 8002418:	2b0b      	cmp	r3, #11
 800241a:	d017      	beq.n	800244c <proc_dec+0xd0>
        return;
    }

    cpu_set_flags(ctx, val == 0, 1, (val & 0x0F) == 0x0F, -1);
 800241c:	89fb      	ldrh	r3, [r7, #14]
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	b259      	sxtb	r1, r3
 800242a:	89fb      	ldrh	r3, [r7, #14]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	2b0f      	cmp	r3, #15
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	b25b      	sxtb	r3, r3
 800243c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002440:	9200      	str	r2, [sp, #0]
 8002442:	2201      	movs	r2, #1
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff f89d 	bl	8001584 <cpu_set_flags>
 800244a:	e000      	b.n	800244e <proc_dec+0xd2>
        return;
 800244c:	bf00      	nop
}
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <proc_sub>:

static void proc_sub(cpu_context *ctx) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af02      	add	r7, sp, #8
 800245a:	6078      	str	r0, [r7, #4]
    u16 val = cpu_read_reg(ctx->cur_inst->reg_1) - ctx->fetched_data;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	789b      	ldrb	r3, [r3, #2]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f9f8 	bl	8002858 <cpu_read_reg>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	899b      	ldrh	r3, [r3, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	82fb      	strh	r3, [r7, #22]

    int z = val == 0;
 8002474:	8afb      	ldrh	r3, [r7, #22]
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf0c      	ite	eq
 800247a:	2301      	moveq	r3, #1
 800247c:	2300      	movne	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	613b      	str	r3, [r7, #16]
    int h = ((int)cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) - ((int)ctx->fetched_data & 0xF) < 0;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	789b      	ldrb	r3, [r3, #2]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f9e5 	bl	8002858 <cpu_read_reg>
 800248e:	4603      	mov	r3, r0
 8002490:	f003 020f 	and.w	r2, r3, #15
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	899b      	ldrh	r3, [r3, #12]
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	0fdb      	lsrs	r3, r3, #31
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	60fb      	str	r3, [r7, #12]
    int c = ((int)cpu_read_reg(ctx->cur_inst->reg_1)) - ((int)ctx->fetched_data) < 0;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	789b      	ldrb	r3, [r3, #2]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f9d4 	bl	8002858 <cpu_read_reg>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461a      	mov	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	899b      	ldrh	r3, [r3, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	0fdb      	lsrs	r3, r3, #31
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	60bb      	str	r3, [r7, #8]

    cpu_set_reg(ctx->cur_inst->reg_1, val);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	789b      	ldrb	r3, [r3, #2]
 80024c6:	8afa      	ldrh	r2, [r7, #22]
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fa3c 	bl	8002948 <cpu_set_reg>
    cpu_set_flags(ctx, z, 1, h, c);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	b259      	sxtb	r1, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	b25a      	sxtb	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	b25b      	sxtb	r3, r3
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	2201      	movs	r2, #1
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff f84e 	bl	8001584 <cpu_set_flags>
}
 80024e8:	bf00      	nop
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <proc_sbc>:

static void proc_sbc(cpu_context *ctx) {
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	6078      	str	r0, [r7, #4]
    u8 val = ctx->fetched_data + CPU_FLAG_C;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	899b      	ldrh	r3, [r3, #12]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	785b      	ldrb	r3, [r3, #1]
 8002502:	111b      	asrs	r3, r3, #4
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4413      	add	r3, r2
 800250e:	75fb      	strb	r3, [r7, #23]

    int z = cpu_read_reg(ctx->cur_inst->reg_1) - val == 0;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	789b      	ldrb	r3, [r3, #2]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f99e 	bl	8002858 <cpu_read_reg>
 800251c:	4603      	mov	r3, r0
 800251e:	461a      	mov	r2, r3
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	b29b      	uxth	r3, r3
 8002524:	429a      	cmp	r2, r3
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	613b      	str	r3, [r7, #16]

    int h = ((int)cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) 
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	789b      	ldrb	r3, [r3, #2]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f98e 	bl	8002858 <cpu_read_reg>
 800253c:	4603      	mov	r3, r0
 800253e:	f003 020f 	and.w	r2, r3, #15
        - ((int)ctx->fetched_data & 0xF) - ((int)CPU_FLAG_C) < 0;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	899b      	ldrh	r3, [r3, #12]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	1ad2      	subs	r2, r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	111b      	asrs	r3, r3, #4
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	0fdb      	lsrs	r3, r3, #31
 800255a:	b2db      	uxtb	r3, r3
    int h = ((int)cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) 
 800255c:	60fb      	str	r3, [r7, #12]
    int c = ((int)cpu_read_reg(ctx->cur_inst->reg_1)) 
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	789b      	ldrb	r3, [r3, #2]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 f977 	bl	8002858 <cpu_read_reg>
 800256a:	4603      	mov	r3, r0
 800256c:	461a      	mov	r2, r3
        - ((int)ctx->fetched_data) - ((int)CPU_FLAG_C) < 0;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	899b      	ldrh	r3, [r3, #12]
 8002572:	1ad2      	subs	r2, r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	111b      	asrs	r3, r3, #4
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	0fdb      	lsrs	r3, r3, #31
 8002582:	b2db      	uxtb	r3, r3
    int c = ((int)cpu_read_reg(ctx->cur_inst->reg_1)) 
 8002584:	60bb      	str	r3, [r7, #8]

    cpu_set_reg(ctx->cur_inst->reg_1, cpu_read_reg(ctx->cur_inst->reg_1) - val);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	789c      	ldrb	r4, [r3, #2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	789b      	ldrb	r3, [r3, #2]
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f960 	bl	8002858 <cpu_read_reg>
 8002598:	4603      	mov	r3, r0
 800259a:	461a      	mov	r2, r3
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4619      	mov	r1, r3
 80025a6:	4620      	mov	r0, r4
 80025a8:	f000 f9ce 	bl	8002948 <cpu_set_reg>
    cpu_set_flags(ctx, z, 1, h, c);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	b259      	sxtb	r1, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	b25a      	sxtb	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	2201      	movs	r2, #1
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe ffe0 	bl	8001584 <cpu_set_flags>
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd90      	pop	{r4, r7, pc}

080025cc <proc_adc>:

static void proc_adc(cpu_context *ctx) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	6078      	str	r0, [r7, #4]
    u16 u = ctx->fetched_data;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	899b      	ldrh	r3, [r3, #12]
 80025d8:	81fb      	strh	r3, [r7, #14]
    u16 a = ctx->regs.a;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	81bb      	strh	r3, [r7, #12]
    u16 c = CPU_FLAG_C;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	111b      	asrs	r3, r3, #4
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	817b      	strh	r3, [r7, #10]

    ctx->regs.a = (a + u + c) & 0xFF;
 80025ee:	89bb      	ldrh	r3, [r7, #12]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	89fb      	ldrh	r3, [r7, #14]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	897b      	ldrh	r3, [r7, #10]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	4413      	add	r3, r2
 8002600:	b2da      	uxtb	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	701a      	strb	r2, [r3, #0]

    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	b259      	sxtb	r1, r3
        (a & 0xF) + (u & 0xF) + c > 0xF,
 8002616:	89bb      	ldrh	r3, [r7, #12]
 8002618:	f003 020f 	and.w	r2, r3, #15
 800261c:	89fb      	ldrh	r3, [r7, #14]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	441a      	add	r2, r3
 8002624:	897b      	ldrh	r3, [r7, #10]
 8002626:	4413      	add	r3, r2
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 
 8002628:	2b0f      	cmp	r3, #15
 800262a:	bfcc      	ite	gt
 800262c:	2301      	movgt	r3, #1
 800262e:	2300      	movle	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	b258      	sxtb	r0, r3
        a + u + c > 0xFF);
 8002634:	89ba      	ldrh	r2, [r7, #12]
 8002636:	89fb      	ldrh	r3, [r7, #14]
 8002638:	441a      	add	r2, r3
 800263a:	897b      	ldrh	r3, [r7, #10]
 800263c:	4413      	add	r3, r2
    cpu_set_flags(ctx, ctx->regs.a == 0, 0, 
 800263e:	2bff      	cmp	r3, #255	; 0xff
 8002640:	bfcc      	ite	gt
 8002642:	2301      	movgt	r3, #1
 8002644:	2300      	movle	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	b25b      	sxtb	r3, r3
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4603      	mov	r3, r0
 800264e:	2200      	movs	r2, #0
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7fe ff97 	bl	8001584 <cpu_set_flags>
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <proc_add>:

static void proc_add(cpu_context *ctx) {
 800265e:	b580      	push	{r7, lr}
 8002660:	b08a      	sub	sp, #40	; 0x28
 8002662:	af02      	add	r7, sp, #8
 8002664:	6078      	str	r0, [r7, #4]
    u32 val = cpu_read_reg(ctx->cur_inst->reg_1) + ctx->fetched_data;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	789b      	ldrb	r3, [r3, #2]
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f8f3 	bl	8002858 <cpu_read_reg>
 8002672:	4603      	mov	r3, r0
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	899b      	ldrh	r3, [r3, #12]
 800267a:	4413      	add	r3, r2
 800267c:	61fb      	str	r3, [r7, #28]

    bool is_16bit = is_16_bit(ctx->cur_inst->reg_1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	789b      	ldrb	r3, [r3, #2]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fbe9 	bl	8001e5c <is_16_bit>
 800268a:	4603      	mov	r3, r0
 800268c:	73fb      	strb	r3, [r7, #15]

    if (is_16bit) {
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <proc_add+0x3c>
        emu_cycles(1);
 8002694:	2001      	movs	r0, #1
 8002696:	f000 fbf5 	bl	8002e84 <emu_cycles>
    }

    if (ctx->cur_inst->reg_1 == RT_SP) {
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	789b      	ldrb	r3, [r3, #2]
 80026a0:	2b0d      	cmp	r3, #13
 80026a2:	d10c      	bne.n	80026be <proc_add+0x60>
        val = cpu_read_reg(ctx->cur_inst->reg_1) + (int8_t)ctx->fetched_data;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	789b      	ldrb	r3, [r3, #2]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f8d4 	bl	8002858 <cpu_read_reg>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	899b      	ldrh	r3, [r3, #12]
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	61fb      	str	r3, [r7, #28]
    }

    int z = (val & 0xFF) == 0;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf0c      	ite	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	2300      	movne	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	61bb      	str	r3, [r7, #24]
    int h = (cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) + (ctx->fetched_data & 0xF) >= 0x10;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	789b      	ldrb	r3, [r3, #2]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 f8bf 	bl	8002858 <cpu_read_reg>
 80026da:	4603      	mov	r3, r0
 80026dc:	f003 020f 	and.w	r2, r3, #15
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	899b      	ldrh	r3, [r3, #12]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	4413      	add	r3, r2
 80026ea:	2b0f      	cmp	r3, #15
 80026ec:	bfcc      	ite	gt
 80026ee:	2301      	movgt	r3, #1
 80026f0:	2300      	movle	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	617b      	str	r3, [r7, #20]
    int c = (int)(cpu_read_reg(ctx->cur_inst->reg_1) & 0xFF) + (int)(ctx->fetched_data & 0xFF) >= 0x100;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	789b      	ldrb	r3, [r3, #2]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f8ab 	bl	8002858 <cpu_read_reg>
 8002702:	4603      	mov	r3, r0
 8002704:	b2da      	uxtb	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	899b      	ldrh	r3, [r3, #12]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4413      	add	r3, r2
 800270e:	2bff      	cmp	r3, #255	; 0xff
 8002710:	bfcc      	ite	gt
 8002712:	2301      	movgt	r3, #1
 8002714:	2300      	movle	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	613b      	str	r3, [r7, #16]

    if (is_16bit) {
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d02d      	beq.n	800277c <proc_add+0x11e>
        z = -1;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002724:	61bb      	str	r3, [r7, #24]
        h = (cpu_read_reg(ctx->cur_inst->reg_1) & 0xFFF) + (ctx->fetched_data & 0xFFF) >= 0x1000;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	789b      	ldrb	r3, [r3, #2]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f893 	bl	8002858 <cpu_read_reg>
 8002732:	4603      	mov	r3, r0
 8002734:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	899b      	ldrh	r3, [r3, #12]
 800273c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002740:	4413      	add	r3, r2
 8002742:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002746:	4293      	cmp	r3, r2
 8002748:	bfcc      	ite	gt
 800274a:	2301      	movgt	r3, #1
 800274c:	2300      	movle	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	617b      	str	r3, [r7, #20]
        u32 n = ((u32)cpu_read_reg(ctx->cur_inst->reg_1)) + ((u32)ctx->fetched_data);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	789b      	ldrb	r3, [r3, #2]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 f87d 	bl	8002858 <cpu_read_reg>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	899b      	ldrh	r3, [r3, #12]
 8002766:	4413      	add	r3, r2
 8002768:	60bb      	str	r3, [r7, #8]
        c = n >= 0x10000;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002770:	4293      	cmp	r3, r2
 8002772:	bf8c      	ite	hi
 8002774:	2301      	movhi	r3, #1
 8002776:	2300      	movls	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	613b      	str	r3, [r7, #16]
    }

    if (ctx->cur_inst->reg_1 == RT_SP) {
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	789b      	ldrb	r3, [r3, #2]
 8002782:	2b0d      	cmp	r3, #13
 8002784:	d127      	bne.n	80027d6 <proc_add+0x178>
        z = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
        h = (cpu_read_reg(ctx->cur_inst->reg_1) & 0xF) + (ctx->fetched_data & 0xF) >= 0x10;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	789b      	ldrb	r3, [r3, #2]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f861 	bl	8002858 <cpu_read_reg>
 8002796:	4603      	mov	r3, r0
 8002798:	f003 020f 	and.w	r2, r3, #15
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	899b      	ldrh	r3, [r3, #12]
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	4413      	add	r3, r2
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	bfcc      	ite	gt
 80027aa:	2301      	movgt	r3, #1
 80027ac:	2300      	movle	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	617b      	str	r3, [r7, #20]
        c = (int)(cpu_read_reg(ctx->cur_inst->reg_1) & 0xFF) + (int)(ctx->fetched_data & 0xFF) >= 0x100;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	789b      	ldrb	r3, [r3, #2]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f84d 	bl	8002858 <cpu_read_reg>
 80027be:	4603      	mov	r3, r0
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	899b      	ldrh	r3, [r3, #12]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	2bff      	cmp	r3, #255	; 0xff
 80027cc:	bfcc      	ite	gt
 80027ce:	2301      	movgt	r3, #1
 80027d0:	2300      	movle	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	613b      	str	r3, [r7, #16]
    }

    cpu_set_reg(ctx->cur_inst->reg_1, val & 0xFFFF);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	789b      	ldrb	r3, [r3, #2]
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	b292      	uxth	r2, r2
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f8b0 	bl	8002948 <cpu_set_reg>
    cpu_set_flags(ctx, z, 0, h, c);
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	b259      	sxtb	r1, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	b25a      	sxtb	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	4613      	mov	r3, r2
 80027f8:	2200      	movs	r2, #0
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fec2 	bl	8001584 <cpu_set_flags>
}
 8002800:	bf00      	nop
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <inst_get_processor>:
    [IN_CCF] = proc_ccf,
    [IN_EI] = proc_ei,
    [IN_RETI] = proc_reti
};

IN_PROC inst_get_processor(in_type type) {
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
    return processors[type];
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <inst_get_processor+0x20>)
 8002816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000328 	.word	0x20000328

0800282c <reverse>:
#include <cpu.h>
#include <bus.h>

extern cpu_context ctx;

u16 reverse(u16 n) {
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	80fb      	strh	r3, [r7, #6]
    return ((n & 0xFF00) >> 8) | ((n & 0x00FF) << 8);
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	b29b      	uxth	r3, r3
 800283c:	b21a      	sxth	r2, r3
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	b21b      	sxth	r3, r3
 8002844:	4313      	orrs	r3, r2
 8002846:	b21b      	sxth	r3, r3
 8002848:	b29b      	uxth	r3, r3
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <cpu_read_reg>:

u16 cpu_read_reg(reg_type rt) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
    switch(rt) {
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	3b01      	subs	r3, #1
 8002866:	2b0d      	cmp	r3, #13
 8002868:	d860      	bhi.n	800292c <cpu_read_reg+0xd4>
 800286a:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <cpu_read_reg+0x18>)
 800286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002870:	080028a9 	.word	0x080028a9
 8002874:	080028b1 	.word	0x080028b1
 8002878:	080028b9 	.word	0x080028b9
 800287c:	080028c1 	.word	0x080028c1
 8002880:	080028c9 	.word	0x080028c9
 8002884:	080028d1 	.word	0x080028d1
 8002888:	080028d9 	.word	0x080028d9
 800288c:	080028e1 	.word	0x080028e1
 8002890:	080028e9 	.word	0x080028e9
 8002894:	080028f7 	.word	0x080028f7
 8002898:	08002905 	.word	0x08002905
 800289c:	08002913 	.word	0x08002913
 80028a0:	08002927 	.word	0x08002927
 80028a4:	08002921 	.word	0x08002921
        case RT_A: return ctx.regs.a;
 80028a8:	4b23      	ldr	r3, [pc, #140]	; (8002938 <cpu_read_reg+0xe0>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	e03e      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_F: return ctx.regs.f;
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <cpu_read_reg+0xe0>)
 80028b2:	785b      	ldrb	r3, [r3, #1]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	e03a      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_B: return ctx.regs.b;
 80028b8:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <cpu_read_reg+0xe0>)
 80028ba:	789b      	ldrb	r3, [r3, #2]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	e036      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_C: return ctx.regs.c;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <cpu_read_reg+0xe0>)
 80028c2:	78db      	ldrb	r3, [r3, #3]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	e032      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_D: return ctx.regs.d;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <cpu_read_reg+0xe0>)
 80028ca:	791b      	ldrb	r3, [r3, #4]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	e02e      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_E: return ctx.regs.e;
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <cpu_read_reg+0xe0>)
 80028d2:	795b      	ldrb	r3, [r3, #5]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	e02a      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_H: return ctx.regs.h;
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <cpu_read_reg+0xe0>)
 80028da:	799b      	ldrb	r3, [r3, #6]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	e026      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_L: return ctx.regs.l;
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <cpu_read_reg+0xe0>)
 80028e2:	79db      	ldrb	r3, [r3, #7]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	e022      	b.n	800292e <cpu_read_reg+0xd6>

        case RT_AF: return reverse(*((u16 *)&ctx.regs.a));
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <cpu_read_reg+0xe0>)
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff9d 	bl	800282c <reverse>
 80028f2:	4603      	mov	r3, r0
 80028f4:	e01b      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_BC: return reverse(*((u16 *)&ctx.regs.b));
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <cpu_read_reg+0xe4>)
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff96 	bl	800282c <reverse>
 8002900:	4603      	mov	r3, r0
 8002902:	e014      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_DE: return reverse(*((u16 *)&ctx.regs.d));
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <cpu_read_reg+0xe8>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff8f 	bl	800282c <reverse>
 800290e:	4603      	mov	r3, r0
 8002910:	e00d      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_HL: return reverse(*((u16 *)&ctx.regs.h));
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <cpu_read_reg+0xec>)
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff88 	bl	800282c <reverse>
 800291c:	4603      	mov	r3, r0
 800291e:	e006      	b.n	800292e <cpu_read_reg+0xd6>

        case RT_PC: return ctx.regs.pc;
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <cpu_read_reg+0xe0>)
 8002922:	891b      	ldrh	r3, [r3, #8]
 8002924:	e003      	b.n	800292e <cpu_read_reg+0xd6>
        case RT_SP: return ctx.regs.sp;
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <cpu_read_reg+0xe0>)
 8002928:	895b      	ldrh	r3, [r3, #10]
 800292a:	e000      	b.n	800292e <cpu_read_reg+0xd6>
        default: return 0;
 800292c:	2300      	movs	r3, #0
    }
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000ebc 	.word	0x20000ebc
 800293c:	20000ebe 	.word	0x20000ebe
 8002940:	20000ec0 	.word	0x20000ec0
 8002944:	20000ec2 	.word	0x20000ec2

08002948 <cpu_set_reg>:

void cpu_set_reg(reg_type rt, u16 val) {
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	460a      	mov	r2, r1
 8002952:	71fb      	strb	r3, [r7, #7]
 8002954:	4613      	mov	r3, r2
 8002956:	80bb      	strh	r3, [r7, #4]
    switch(rt) {
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	2b0e      	cmp	r3, #14
 800295c:	d871      	bhi.n	8002a42 <cpu_set_reg+0xfa>
 800295e:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <cpu_set_reg+0x1c>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	08002a41 	.word	0x08002a41
 8002968:	080029a1 	.word	0x080029a1
 800296c:	080029ab 	.word	0x080029ab
 8002970:	080029b5 	.word	0x080029b5
 8002974:	080029bf 	.word	0x080029bf
 8002978:	080029c9 	.word	0x080029c9
 800297c:	080029d3 	.word	0x080029d3
 8002980:	080029dd 	.word	0x080029dd
 8002984:	080029e7 	.word	0x080029e7
 8002988:	080029f1 	.word	0x080029f1
 800298c:	08002a01 	.word	0x08002a01
 8002990:	08002a11 	.word	0x08002a11
 8002994:	08002a21 	.word	0x08002a21
 8002998:	08002a39 	.word	0x08002a39
 800299c:	08002a31 	.word	0x08002a31
        case RT_A: ctx.regs.a = val & 0xFF; break;
 80029a0:	88bb      	ldrh	r3, [r7, #4]
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	4b29      	ldr	r3, [pc, #164]	; (8002a4c <cpu_set_reg+0x104>)
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e04b      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_F: ctx.regs.f = val & 0xFF; break;
 80029aa:	88bb      	ldrh	r3, [r7, #4]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <cpu_set_reg+0x104>)
 80029b0:	705a      	strb	r2, [r3, #1]
 80029b2:	e046      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_B: ctx.regs.b = val & 0xFF; break;
 80029b4:	88bb      	ldrh	r3, [r7, #4]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <cpu_set_reg+0x104>)
 80029ba:	709a      	strb	r2, [r3, #2]
 80029bc:	e041      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_C: {
             ctx.regs.c = val & 0xFF;
 80029be:	88bb      	ldrh	r3, [r7, #4]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <cpu_set_reg+0x104>)
 80029c4:	70da      	strb	r2, [r3, #3]
        } break;
 80029c6:	e03c      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_D: ctx.regs.d = val & 0xFF; break;
 80029c8:	88bb      	ldrh	r3, [r7, #4]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <cpu_set_reg+0x104>)
 80029ce:	711a      	strb	r2, [r3, #4]
 80029d0:	e037      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_E: ctx.regs.e = val & 0xFF; break;
 80029d2:	88bb      	ldrh	r3, [r7, #4]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <cpu_set_reg+0x104>)
 80029d8:	715a      	strb	r2, [r3, #5]
 80029da:	e032      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_H: ctx.regs.h = val & 0xFF; break;
 80029dc:	88bb      	ldrh	r3, [r7, #4]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <cpu_set_reg+0x104>)
 80029e2:	719a      	strb	r2, [r3, #6]
 80029e4:	e02d      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_L: ctx.regs.l = val & 0xFF; break;
 80029e6:	88bb      	ldrh	r3, [r7, #4]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <cpu_set_reg+0x104>)
 80029ec:	71da      	strb	r2, [r3, #7]
 80029ee:	e028      	b.n	8002a42 <cpu_set_reg+0xfa>

        case RT_AF: *((u16 *)&ctx.regs.a) = reverse(val); break;
 80029f0:	4c16      	ldr	r4, [pc, #88]	; (8002a4c <cpu_set_reg+0x104>)
 80029f2:	88bb      	ldrh	r3, [r7, #4]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff19 	bl	800282c <reverse>
 80029fa:	4603      	mov	r3, r0
 80029fc:	8023      	strh	r3, [r4, #0]
 80029fe:	e020      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_BC: *((u16 *)&ctx.regs.b) = reverse(val); break;
 8002a00:	4c13      	ldr	r4, [pc, #76]	; (8002a50 <cpu_set_reg+0x108>)
 8002a02:	88bb      	ldrh	r3, [r7, #4]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff11 	bl	800282c <reverse>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	8023      	strh	r3, [r4, #0]
 8002a0e:	e018      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_DE: *((u16 *)&ctx.regs.d) = reverse(val); break;
 8002a10:	4c10      	ldr	r4, [pc, #64]	; (8002a54 <cpu_set_reg+0x10c>)
 8002a12:	88bb      	ldrh	r3, [r7, #4]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff09 	bl	800282c <reverse>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	8023      	strh	r3, [r4, #0]
 8002a1e:	e010      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_HL: {
         *((u16 *)&ctx.regs.h) = reverse(val); 
 8002a20:	4c0d      	ldr	r4, [pc, #52]	; (8002a58 <cpu_set_reg+0x110>)
 8002a22:	88bb      	ldrh	r3, [r7, #4]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff01 	bl	800282c <reverse>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	8023      	strh	r3, [r4, #0]
         break;
 8002a2e:	e008      	b.n	8002a42 <cpu_set_reg+0xfa>
        }

        case RT_PC: ctx.regs.pc = val; break;
 8002a30:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <cpu_set_reg+0x104>)
 8002a32:	88bb      	ldrh	r3, [r7, #4]
 8002a34:	8113      	strh	r3, [r2, #8]
 8002a36:	e004      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_SP: ctx.regs.sp = val; break;
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <cpu_set_reg+0x104>)
 8002a3a:	88bb      	ldrh	r3, [r7, #4]
 8002a3c:	8153      	strh	r3, [r2, #10]
 8002a3e:	e000      	b.n	8002a42 <cpu_set_reg+0xfa>
        case RT_NONE: break;
 8002a40:	bf00      	nop
    }
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd90      	pop	{r4, r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000ebc 	.word	0x20000ebc
 8002a50:	20000ebe 	.word	0x20000ebe
 8002a54:	20000ec0 	.word	0x20000ec0
 8002a58:	20000ec2 	.word	0x20000ec2

08002a5c <cpu_read_reg8>:


u8 cpu_read_reg8(reg_type rt) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
    switch(rt) {
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	2b0b      	cmp	r3, #11
 8002a6c:	d83b      	bhi.n	8002ae6 <cpu_read_reg8+0x8a>
 8002a6e:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <cpu_read_reg8+0x18>)
 8002a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a74:	08002aa5 	.word	0x08002aa5
 8002a78:	08002aab 	.word	0x08002aab
 8002a7c:	08002ab1 	.word	0x08002ab1
 8002a80:	08002ab7 	.word	0x08002ab7
 8002a84:	08002abd 	.word	0x08002abd
 8002a88:	08002ac3 	.word	0x08002ac3
 8002a8c:	08002ac9 	.word	0x08002ac9
 8002a90:	08002acf 	.word	0x08002acf
 8002a94:	08002ae7 	.word	0x08002ae7
 8002a98:	08002ae7 	.word	0x08002ae7
 8002a9c:	08002ae7 	.word	0x08002ae7
 8002aa0:	08002ad5 	.word	0x08002ad5
        case RT_A: return ctx.regs.a;
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	e02e      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_F: return ctx.regs.f;
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	e02b      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_B: return ctx.regs.b;
 8002ab0:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002ab2:	789b      	ldrb	r3, [r3, #2]
 8002ab4:	e028      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_C: return ctx.regs.c;
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002ab8:	78db      	ldrb	r3, [r3, #3]
 8002aba:	e025      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_D: return ctx.regs.d;
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002abe:	791b      	ldrb	r3, [r3, #4]
 8002ac0:	e022      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_E: return ctx.regs.e;
 8002ac2:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002ac4:	795b      	ldrb	r3, [r3, #5]
 8002ac6:	e01f      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_H: return ctx.regs.h;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002aca:	799b      	ldrb	r3, [r3, #6]
 8002acc:	e01c      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_L: return ctx.regs.l;
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <cpu_read_reg8+0xb4>)
 8002ad0:	79db      	ldrb	r3, [r3, #7]
 8002ad2:	e019      	b.n	8002b08 <cpu_read_reg8+0xac>
        case RT_HL: {
            return bus_read(cpu_read_reg(RT_HL));
 8002ad4:	200c      	movs	r0, #12
 8002ad6:	f7ff febf 	bl	8002858 <cpu_read_reg>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fd7b 	bl	80005d8 <bus_read>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	e010      	b.n	8002b08 <cpu_read_reg8+0xac>
        }
        default:
            printf("**ERR INVALID REG8: %d\n", rt);
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	480a      	ldr	r0, [pc, #40]	; (8002b14 <cpu_read_reg8+0xb8>)
 8002aec:	f00e fffc 	bl	8011ae8 <iprintf>
            NO_IMPL
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <cpu_read_reg8+0xbc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2214      	movs	r2, #20
 8002af8:	2101      	movs	r1, #1
 8002afa:	4808      	ldr	r0, [pc, #32]	; (8002b1c <cpu_read_reg8+0xc0>)
 8002afc:	f00e fb8a 	bl	8011214 <fwrite>
 8002b00:	f06f 0004 	mvn.w	r0, #4
 8002b04:	f00d feb8 	bl	8010878 <exit>
    }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000ebc 	.word	0x20000ebc
 8002b14:	08012be0 	.word	0x08012be0
 8002b18:	200009dc 	.word	0x200009dc
 8002b1c:	08012bf8 	.word	0x08012bf8

08002b20 <cpu_set_reg8>:

void cpu_set_reg8(reg_type rt, u8 val) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	460a      	mov	r2, r1
 8002b2a:	71fb      	strb	r3, [r7, #7]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	71bb      	strb	r3, [r7, #6]
    switch(rt) {
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	2b0b      	cmp	r3, #11
 8002b36:	d846      	bhi.n	8002bc6 <cpu_set_reg8+0xa6>
 8002b38:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <cpu_set_reg8+0x20>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b71 	.word	0x08002b71
 8002b44:	08002b79 	.word	0x08002b79
 8002b48:	08002b81 	.word	0x08002b81
 8002b4c:	08002b89 	.word	0x08002b89
 8002b50:	08002b91 	.word	0x08002b91
 8002b54:	08002b99 	.word	0x08002b99
 8002b58:	08002ba1 	.word	0x08002ba1
 8002b5c:	08002ba9 	.word	0x08002ba9
 8002b60:	08002bc7 	.word	0x08002bc7
 8002b64:	08002bc7 	.word	0x08002bc7
 8002b68:	08002bc7 	.word	0x08002bc7
 8002b6c:	08002bb1 	.word	0x08002bb1
        case RT_A: ctx.regs.a = val & 0xFF; break;
 8002b70:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002b72:	79bb      	ldrb	r3, [r7, #6]
 8002b74:	7013      	strb	r3, [r2, #0]
 8002b76:	e037      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_F: ctx.regs.f = val & 0xFF; break;
 8002b78:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002b7a:	79bb      	ldrb	r3, [r7, #6]
 8002b7c:	7053      	strb	r3, [r2, #1]
 8002b7e:	e033      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_B: ctx.regs.b = val & 0xFF; break;
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002b82:	79bb      	ldrb	r3, [r7, #6]
 8002b84:	7093      	strb	r3, [r2, #2]
 8002b86:	e02f      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_C: ctx.regs.c = val & 0xFF; break;
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002b8a:	79bb      	ldrb	r3, [r7, #6]
 8002b8c:	70d3      	strb	r3, [r2, #3]
 8002b8e:	e02b      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_D: ctx.regs.d = val & 0xFF; break;
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002b92:	79bb      	ldrb	r3, [r7, #6]
 8002b94:	7113      	strb	r3, [r2, #4]
 8002b96:	e027      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_E: ctx.regs.e = val & 0xFF; break;
 8002b98:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002b9a:	79bb      	ldrb	r3, [r7, #6]
 8002b9c:	7153      	strb	r3, [r2, #5]
 8002b9e:	e023      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_H: ctx.regs.h = val & 0xFF; break;
 8002ba0:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002ba2:	79bb      	ldrb	r3, [r7, #6]
 8002ba4:	7193      	strb	r3, [r2, #6]
 8002ba6:	e01f      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_L: ctx.regs.l = val & 0xFF; break;
 8002ba8:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <cpu_set_reg8+0xd0>)
 8002baa:	79bb      	ldrb	r3, [r7, #6]
 8002bac:	71d3      	strb	r3, [r2, #7]
 8002bae:	e01b      	b.n	8002be8 <cpu_set_reg8+0xc8>
        case RT_HL: bus_write(cpu_read_reg(RT_HL), val); break;
 8002bb0:	200c      	movs	r0, #12
 8002bb2:	f7ff fe51 	bl	8002858 <cpu_read_reg>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	79bb      	ldrb	r3, [r7, #6]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	f7fd fd72 	bl	80006a8 <bus_write>
 8002bc4:	e010      	b.n	8002be8 <cpu_set_reg8+0xc8>
        default:
            printf("**ERR INVALID REG8: %d\n", rt);
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	480a      	ldr	r0, [pc, #40]	; (8002bf4 <cpu_set_reg8+0xd4>)
 8002bcc:	f00e ff8c 	bl	8011ae8 <iprintf>
            NO_IMPL
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <cpu_set_reg8+0xd8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2214      	movs	r2, #20
 8002bd8:	2101      	movs	r1, #1
 8002bda:	4808      	ldr	r0, [pc, #32]	; (8002bfc <cpu_set_reg8+0xdc>)
 8002bdc:	f00e fb1a 	bl	8011214 <fwrite>
 8002be0:	f06f 0004 	mvn.w	r0, #4
 8002be4:	f00d fe48 	bl	8010878 <exit>
    }
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000ebc 	.word	0x20000ebc
 8002bf4:	08012be0 	.word	0x08012be0
 8002bf8:	200009dc 	.word	0x200009dc
 8002bfc:	08012bf8 	.word	0x08012bf8

08002c00 <cpu_get_regs>:

cpu_registers *cpu_get_regs() {
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
    return &ctx.regs;
 8002c04:	4b02      	ldr	r3, [pc, #8]	; (8002c10 <cpu_get_regs+0x10>)
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	20000ebc 	.word	0x20000ebc

08002c14 <cpu_get_int_flags>:

u8 cpu_get_int_flags() {
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
    return ctx.int_flags;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <cpu_get_int_flags+0x14>)
 8002c1a:	7f5b      	ldrb	r3, [r3, #29]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000ebc 	.word	0x20000ebc

08002c2c <cpu_set_int_flags>:

void cpu_set_int_flags(u8 value) {
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
    ctx.int_flags = value;
 8002c36:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <cpu_set_int_flags+0x1c>)
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	7753      	strb	r3, [r2, #29]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	20000ebc 	.word	0x20000ebc

08002c4c <dbg_update>:
#include <bus.h>

static char dbg_msg[1024] = {0};
static int msg_size = 0;

void dbg_update() {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
    if (bus_read(0xFF02) == 0x81) {
 8002c52:	f64f 7002 	movw	r0, #65282	; 0xff02
 8002c56:	f7fd fcbf 	bl	80005d8 <bus_read>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b81      	cmp	r3, #129	; 0x81
 8002c5e:	d112      	bne.n	8002c86 <dbg_update+0x3a>
        char c = bus_read(0xFF01);
 8002c60:	f64f 7001 	movw	r0, #65281	; 0xff01
 8002c64:	f7fd fcb8 	bl	80005d8 <bus_read>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	71fb      	strb	r3, [r7, #7]

        dbg_msg[msg_size++] = c;
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <dbg_update+0x44>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	4907      	ldr	r1, [pc, #28]	; (8002c90 <dbg_update+0x44>)
 8002c74:	600a      	str	r2, [r1, #0]
 8002c76:	4907      	ldr	r1, [pc, #28]	; (8002c94 <dbg_update+0x48>)
 8002c78:	79fa      	ldrb	r2, [r7, #7]
 8002c7a:	54ca      	strb	r2, [r1, r3]

        bus_write(0xFF02, 0);
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	f64f 7002 	movw	r0, #65282	; 0xff02
 8002c82:	f7fd fd11 	bl	80006a8 <bus_write>
    }
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200012dc 	.word	0x200012dc
 8002c94:	20000edc 	.word	0x20000edc

08002c98 <dbg_print>:

void dbg_print() {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
    if (dbg_msg[0]) {
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <dbg_print+0x18>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <dbg_print+0x14>
        printf("DBG: %s\r\n", dbg_msg);
 8002ca4:	4902      	ldr	r1, [pc, #8]	; (8002cb0 <dbg_print+0x18>)
 8002ca6:	4803      	ldr	r0, [pc, #12]	; (8002cb4 <dbg_print+0x1c>)
 8002ca8:	f00e ff1e 	bl	8011ae8 <iprintf>
    }
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000edc 	.word	0x20000edc
 8002cb4:	08012c10 	.word	0x08012c10

08002cb8 <dma_start>:
    u8 start_delay;
} dma_context;

static dma_context ctx;

void dma_start(u8 start) {
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
    ctx.active = true;
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <dma_start+0x30>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
    ctx.byte = 0;
 8002cc8:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <dma_start+0x30>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	705a      	strb	r2, [r3, #1]
    ctx.start_delay = 2;
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <dma_start+0x30>)
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	70da      	strb	r2, [r3, #3]
    ctx.value = start;
 8002cd4:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <dma_start+0x30>)
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	7093      	strb	r3, [r2, #2]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	200012e0 	.word	0x200012e0

08002cec <dma_tick>:

void dma_tick() {
 8002cec:	b598      	push	{r3, r4, r7, lr}
 8002cee:	af00      	add	r7, sp, #0
    if (!ctx.active) {
 8002cf0:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <dma_tick+0x78>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	f083 0301 	eor.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d12f      	bne.n	8002d5e <dma_tick+0x72>
        return;
    }

    if (ctx.start_delay) {
 8002cfe:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <dma_tick+0x78>)
 8002d00:	78db      	ldrb	r3, [r3, #3]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <dma_tick+0x28>
        ctx.start_delay--;
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <dma_tick+0x78>)
 8002d08:	78db      	ldrb	r3, [r3, #3]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <dma_tick+0x78>)
 8002d10:	70da      	strb	r2, [r3, #3]
        return;
 8002d12:	e025      	b.n	8002d60 <dma_tick+0x74>
    }

    ppu_oam_write(ctx.byte, bus_read((ctx.value * 0x100) + ctx.byte));
 8002d14:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <dma_tick+0x78>)
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	b29c      	uxth	r4, r3
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <dma_tick+0x78>)
 8002d1c:	789b      	ldrb	r3, [r3, #2]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <dma_tick+0x78>)
 8002d26:	785b      	ldrb	r3, [r3, #1]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc52 	bl	80005d8 <bus_read>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4619      	mov	r1, r3
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f001 fa31 	bl	80041a0 <ppu_oam_write>

    ctx.byte++;
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <dma_tick+0x78>)
 8002d40:	785b      	ldrb	r3, [r3, #1]
 8002d42:	3301      	adds	r3, #1
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <dma_tick+0x78>)
 8002d48:	705a      	strb	r2, [r3, #1]

    ctx.active = ctx.byte < 0xA0;
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <dma_tick+0x78>)
 8002d4c:	785b      	ldrb	r3, [r3, #1]
 8002d4e:	2b9f      	cmp	r3, #159	; 0x9f
 8002d50:	bf94      	ite	ls
 8002d52:	2301      	movls	r3, #1
 8002d54:	2300      	movhi	r3, #0
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	4b02      	ldr	r3, [pc, #8]	; (8002d64 <dma_tick+0x78>)
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e000      	b.n	8002d60 <dma_tick+0x74>
        return;
 8002d5e:	bf00      	nop
}
 8002d60:	bd98      	pop	{r3, r4, r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200012e0 	.word	0x200012e0

08002d68 <dma_transferring>:

bool dma_transferring() {
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
    return ctx.active;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <dma_transferring+0x14>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	200012e0 	.word	0x200012e0

08002d80 <cpu_run>:

emu_context *emu_get_context() {
    return &ctx;
}

void cpu_run(void *p) {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    timer_init();
 8002d88:	f002 feba 	bl	8005b00 <timer_init>
    cpu_init();
 8002d8c:	f7fe f8a0 	bl	8000ed0 <cpu_init>
    ppu_init();
 8002d90:	f001 f950 	bl	8004034 <ppu_init>

    ctx.running = true;
 8002d94:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <cpu_run+0x70>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	705a      	strb	r2, [r3, #1]
    ctx.paused = false;
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <cpu_run+0x70>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
    ctx.ticks = 0;
 8002da0:	4913      	ldr	r1, [pc, #76]	; (8002df0 <cpu_run+0x70>)
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9c1 2302 	strd	r2, r3, [r1, #8]

    while(ctx.running) {
 8002dae:	e014      	b.n	8002dda <cpu_run+0x5a>
        if (ctx.paused) {
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <cpu_run+0x70>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <cpu_run+0x40>
            osDelay(10);
 8002db8:	200a      	movs	r0, #10
 8002dba:	f00a fedb 	bl	800db74 <osDelay>
            continue;
 8002dbe:	e00c      	b.n	8002dda <cpu_run+0x5a>
        }

        if (!cpu_step()) {
 8002dc0:	f7fe f8fe 	bl	8000fc0 <cpu_step>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f083 0301 	eor.w	r3, r3, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <cpu_run+0x5a>
            printf("CPU Stopped\n");
 8002dd0:	4808      	ldr	r0, [pc, #32]	; (8002df4 <cpu_run+0x74>)
 8002dd2:	f00e ff0f 	bl	8011bf4 <puts>
            Error_Handler();
 8002dd6:	f001 f91d 	bl	8004014 <Error_Handler>
    while(ctx.running) {
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <cpu_run+0x70>)
 8002ddc:	785b      	ldrb	r3, [r3, #1]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e6      	bne.n	8002db0 <cpu_run+0x30>
        }
    }
    Error_Handler();
 8002de2:	f001 f917 	bl	8004014 <Error_Handler>

}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200012e8 	.word	0x200012e8
 8002df4:	08012c1c 	.word	0x08012c1c

08002df8 <emu_run>:

void emu_run(char *argv) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

    if (!cart_load(argv)) {
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7fd fdc5 	bl	8000990 <cart_load>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f083 0301 	eor.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <emu_run+0x26>
        printf("Failed to load ROM file: %s\n", argv);
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4818      	ldr	r0, [pc, #96]	; (8002e78 <emu_run+0x80>)
 8002e16:	f00e fe67 	bl	8011ae8 <iprintf>
        Error_Handler();
 8002e1a:	f001 f8fb 	bl	8004014 <Error_Handler>
    }

    printf("Cart loaded..\r\n");
 8002e1e:	4817      	ldr	r0, [pc, #92]	; (8002e7c <emu_run+0x84>)
 8002e20:	f00e fee8 	bl	8011bf4 <puts>

    ui_init();
 8002e24:	f002 ff6c 	bl	8005d00 <ui_init>

    u32 prev_frame = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]

    while(!ctx.die) {
 8002e2c:	e018      	b.n	8002e60 <emu_run+0x68>
	osDelay(1);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f00a fea0 	bl	800db74 <osDelay>
        ui_handle_events();
 8002e34:	f002 ff96 	bl	8005d64 <ui_handle_events>

        if (prev_frame != ppu_get_context()->current_frame) {
 8002e38:	f001 f8f2 	bl	8004020 <ppu_get_context>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f242 132c 	movw	r3, #8492	; 0x212c
 8002e42:	4413      	add	r3, r2
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <emu_run+0x58>
            ui_update();
 8002e4c:	f002 ff66 	bl	8005d1c <ui_update>
        }

        prev_frame = ppu_get_context()->current_frame;
 8002e50:	f001 f8e6 	bl	8004020 <ppu_get_context>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f242 132c 	movw	r3, #8492	; 0x212c
 8002e5a:	4413      	add	r3, r2
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60fb      	str	r3, [r7, #12]
    while(!ctx.die) {
 8002e60:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <emu_run+0x88>)
 8002e62:	789b      	ldrb	r3, [r3, #2]
 8002e64:	f083 0301 	eor.w	r3, r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1df      	bne.n	8002e2e <emu_run+0x36>
    }

}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	08012c28 	.word	0x08012c28
 8002e7c:	08012c48 	.word	0x08012c48
 8002e80:	200012e8 	.word	0x200012e8

08002e84 <emu_cycles>:

void emu_cycles(int cpu_cycles) {
 8002e84:	b5b0      	push	{r4, r5, r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
    
    for (int i=0; i<cpu_cycles; i++) {
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e01a      	b.n	8002ec8 <emu_cycles+0x44>
        for (int n=0; n<4; n++) {
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	e00f      	b.n	8002eb8 <emu_cycles+0x34>
            ctx.ticks++;
 8002e98:	4b10      	ldr	r3, [pc, #64]	; (8002edc <emu_cycles+0x58>)
 8002e9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e9e:	1c54      	adds	r4, r2, #1
 8002ea0:	f143 0500 	adc.w	r5, r3, #0
 8002ea4:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <emu_cycles+0x58>)
 8002ea6:	e9c3 4502 	strd	r4, r5, [r3, #8]
            timer_tick();
 8002eaa:	f002 fe37 	bl	8005b1c <timer_tick>
            ppu_tick();
 8002eae:	f001 f947 	bl	8004140 <ppu_tick>
        for (int n=0; n<4; n++) {
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	ddec      	ble.n	8002e98 <emu_cycles+0x14>
        }

        dma_tick();
 8002ebe:	f7ff ff15 	bl	8002cec <dma_tick>
    for (int i=0; i<cpu_cycles; i++) {
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dbe0      	blt.n	8002e92 <emu_cycles+0xe>
    }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200012e8 	.word	0x200012e8

08002ee0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a07      	ldr	r2, [pc, #28]	; (8002f0c <vApplicationGetIdleTaskMemory+0x2c>)
 8002ef0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <vApplicationGetIdleTaskMemory+0x30>)
 8002ef6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2280      	movs	r2, #128	; 0x80
 8002efc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	200012f8 	.word	0x200012f8
 8002f10:	200013ac 	.word	0x200013ac

08002f14 <gamepad_button_sel>:
    gamepad_state controller;
} gamepad_context;

static gamepad_context ctx = {0};

bool gamepad_button_sel() {
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
    return ctx.button_sel;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <gamepad_button_sel+0x14>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	200015ac 	.word	0x200015ac

08002f2c <gamepad_dir_sel>:

bool gamepad_dir_sel() {
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
    return ctx.dir_sel;
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <gamepad_dir_sel+0x14>)
 8002f32:	785b      	ldrb	r3, [r3, #1]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	200015ac 	.word	0x200015ac

08002f44 <gamepad_set_sel>:

void gamepad_set_sel(u8 value) {
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
    ctx.button_sel = value & 0x20;
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	bf14      	ite	ne
 8002f58:	2301      	movne	r3, #1
 8002f5a:	2300      	moveq	r3, #0
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <gamepad_set_sel+0x40>)
 8002f60:	701a      	strb	r2, [r3, #0]
    ctx.dir_sel = value & 0x10;
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <gamepad_set_sel+0x40>)
 8002f74:	705a      	strb	r2, [r3, #1]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	200015ac 	.word	0x200015ac

08002f88 <gamepad_get_state>:

gamepad_state *gamepad_get_state() {
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
    return &ctx.controller;
 8002f8c:	4b02      	ldr	r3, [pc, #8]	; (8002f98 <gamepad_get_state+0x10>)
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	200015ae 	.word	0x200015ae

08002f9c <gamepad_get_output>:

u8 gamepad_get_output() {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
    u8 output = 0xCF;
 8002fa2:	23cf      	movs	r3, #207	; 0xcf
 8002fa4:	71fb      	strb	r3, [r7, #7]

    if (!gamepad_button_sel()) {
 8002fa6:	f7ff ffb5 	bl	8002f14 <gamepad_button_sel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f083 0301 	eor.w	r3, r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d027      	beq.n	8003006 <gamepad_get_output+0x6a>
        if (gamepad_get_state()->start) {
 8002fb6:	f7ff ffe7 	bl	8002f88 <gamepad_get_state>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <gamepad_get_output+0x2e>
            output &= ~(1 << 3);
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	f023 0308 	bic.w	r3, r3, #8
 8002fc8:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->select) {
 8002fca:	f7ff ffdd 	bl	8002f88 <gamepad_get_state>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	785b      	ldrb	r3, [r3, #1]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <gamepad_get_output+0x42>
            output &= ~(1 << 2);
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	f023 0304 	bic.w	r3, r3, #4
 8002fdc:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->a) {
 8002fde:	f7ff ffd3 	bl	8002f88 <gamepad_get_state>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	789b      	ldrb	r3, [r3, #2]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <gamepad_get_output+0x56>
            output &= ~(1 << 0);
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->b) {
 8002ff2:	f7ff ffc9 	bl	8002f88 <gamepad_get_state>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	78db      	ldrb	r3, [r3, #3]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <gamepad_get_output+0x6a>
            output &= ~(1 << 1);
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f023 0302 	bic.w	r3, r3, #2
 8003004:	71fb      	strb	r3, [r7, #7]
        }
    }

    if (!gamepad_dir_sel()) {
 8003006:	f7ff ff91 	bl	8002f2c <gamepad_dir_sel>
 800300a:	4603      	mov	r3, r0
 800300c:	f083 0301 	eor.w	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d027      	beq.n	8003066 <gamepad_get_output+0xca>
        if (gamepad_get_state()->left) {
 8003016:	f7ff ffb7 	bl	8002f88 <gamepad_get_state>
 800301a:	4603      	mov	r3, r0
 800301c:	799b      	ldrb	r3, [r3, #6]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <gamepad_get_output+0x8e>
            output &= ~(1 << 1);
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	f023 0302 	bic.w	r3, r3, #2
 8003028:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->right) {
 800302a:	f7ff ffad 	bl	8002f88 <gamepad_get_state>
 800302e:	4603      	mov	r3, r0
 8003030:	79db      	ldrb	r3, [r3, #7]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <gamepad_get_output+0xa2>
            output &= ~(1 << 0);
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->up) {
 800303e:	f7ff ffa3 	bl	8002f88 <gamepad_get_state>
 8003042:	4603      	mov	r3, r0
 8003044:	791b      	ldrb	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <gamepad_get_output+0xb6>
            output &= ~(1 << 2);
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	71fb      	strb	r3, [r7, #7]
        } 
        if (gamepad_get_state()->down) {
 8003052:	f7ff ff99 	bl	8002f88 <gamepad_get_state>
 8003056:	4603      	mov	r3, r0
 8003058:	795b      	ldrb	r3, [r3, #5]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <gamepad_get_output+0xca>
            output &= ~(1 << 3);
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f023 0308 	bic.w	r3, r3, #8
 8003064:	71fb      	strb	r3, [r7, #7]
        }
    }

    return output;
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <instruction_by_opcode>:
    [0xFF] = {IN_RST, AM_IMP, RT_NONE, RT_NONE, CT_NONE, 0x38},
};



instruction *instruction_by_opcode(u8 opcode) {
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
    return &instructions[opcode];
 800307a:	79fa      	ldrb	r2, [r7, #7]
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4a03      	ldr	r2, [pc, #12]	; (8003094 <instruction_by_opcode+0x24>)
 8003086:	4413      	add	r3, r2
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	200003b8 	.word	0x200003b8

08003098 <int_handle>:
#include <cpu.h>
#include <stack.h>
#include <interrupts.h>

void int_handle(cpu_context *ctx, u16 address) {
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
    stack_push16(ctx->regs.pc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	891b      	ldrh	r3, [r3, #8]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 f9b8 	bl	800541e <stack_push16>
    ctx->regs.pc = address;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	887a      	ldrh	r2, [r7, #2]
 80030b2:	811a      	strh	r2, [r3, #8]
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <int_check>:

bool int_check(cpu_context *ctx, u16 address, interrupt_type it) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	707b      	strb	r3, [r7, #1]
    if (ctx->int_flags & it && ctx->ie_register & it) {
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7f5a      	ldrb	r2, [r3, #29]
 80030d0:	787b      	ldrb	r3, [r7, #1]
 80030d2:	4013      	ands	r3, r2
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01f      	beq.n	800311a <int_check+0x5e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7f1a      	ldrb	r2, [r3, #28]
 80030de:	787b      	ldrb	r3, [r7, #1]
 80030e0:	4013      	ands	r3, r2
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d018      	beq.n	800311a <int_check+0x5e>
        int_handle(ctx, address);
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	4619      	mov	r1, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ffd3 	bl	8003098 <int_handle>
        ctx->int_flags &= ~it;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	7f5b      	ldrb	r3, [r3, #29]
 80030f6:	b25a      	sxtb	r2, r3
 80030f8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	b25b      	sxtb	r3, r3
 8003100:	4013      	ands	r3, r2
 8003102:	b25b      	sxtb	r3, r3
 8003104:	b2da      	uxtb	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	775a      	strb	r2, [r3, #29]
        ctx->halted = false;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	761a      	strb	r2, [r3, #24]
        ctx->int_master_enabled = false;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	769a      	strb	r2, [r3, #26]

        return true;
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <int_check+0x60>
    }

    return false;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <cpu_handle_interrupts>:

void cpu_handle_interrupts(cpu_context *ctx) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    if (int_check(ctx, 0x40, IT_VBLANK)) {
 800312c:	2201      	movs	r2, #1
 800312e:	2140      	movs	r1, #64	; 0x40
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ffc3 	bl	80030bc <int_check>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11c      	bne.n	8003176 <cpu_handle_interrupts+0x52>

    } else if (int_check(ctx, 0x48, IT_LCD_STAT)) {
 800313c:	2202      	movs	r2, #2
 800313e:	2148      	movs	r1, #72	; 0x48
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ffbb 	bl	80030bc <int_check>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d114      	bne.n	8003176 <cpu_handle_interrupts+0x52>

    } else if (int_check(ctx, 0x50, IT_TIMER)) {
 800314c:	2204      	movs	r2, #4
 800314e:	2150      	movs	r1, #80	; 0x50
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ffb3 	bl	80030bc <int_check>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10c      	bne.n	8003176 <cpu_handle_interrupts+0x52>

    }  else if (int_check(ctx, 0x58, IT_SERIAL)) {
 800315c:	2208      	movs	r2, #8
 800315e:	2158      	movs	r1, #88	; 0x58
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ffab 	bl	80030bc <int_check>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <cpu_handle_interrupts+0x52>

    }  else if (int_check(ctx, 0x60, IT_JOYPAD)) {
 800316c:	2210      	movs	r2, #16
 800316e:	2160      	movs	r1, #96	; 0x60
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ffa3 	bl	80030bc <int_check>

    } 
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <io_read>:
#include <cpu.h>
#include <gamepad.h>

static char serial_data[2];

u8 io_read(u16 address) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]
    if (address == 0xFF00) {
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8003190:	d103      	bne.n	800319a <io_read+0x1a>
        return gamepad_get_output();
 8003192:	f7ff ff03 	bl	8002f9c <gamepad_get_output>
 8003196:	4603      	mov	r3, r0
 8003198:	e04a      	b.n	8003230 <io_read+0xb0>
    }

    if (address == 0xFF01) {
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	f64f 7201 	movw	r2, #65281	; 0xff01
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d102      	bne.n	80031aa <io_read+0x2a>
        return serial_data[0];
 80031a4:	4b24      	ldr	r3, [pc, #144]	; (8003238 <io_read+0xb8>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	e042      	b.n	8003230 <io_read+0xb0>
    }

    if (address == 0xFF02) {
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	f64f 7202 	movw	r2, #65282	; 0xff02
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d102      	bne.n	80031ba <io_read+0x3a>
        return serial_data[1];
 80031b4:	4b20      	ldr	r3, [pc, #128]	; (8003238 <io_read+0xb8>)
 80031b6:	785b      	ldrb	r3, [r3, #1]
 80031b8:	e03a      	b.n	8003230 <io_read+0xb0>
    }

    if (BETWEEN(address, 0xFF04, 0xFF07)) {
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	f64f 7203 	movw	r2, #65283	; 0xff03
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d90a      	bls.n	80031da <io_read+0x5a>
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	f64f 7207 	movw	r2, #65287	; 0xff07
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d805      	bhi.n	80031da <io_read+0x5a>
        return timer_read(address);
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f002 fd65 	bl	8005ca0 <timer_read>
 80031d6:	4603      	mov	r3, r0
 80031d8:	e02a      	b.n	8003230 <io_read+0xb0>
    }

    if (address == 0xFF0F) {
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d103      	bne.n	80031ec <io_read+0x6c>
        return cpu_get_int_flags();
 80031e4:	f7ff fd16 	bl	8002c14 <cpu_get_int_flags>
 80031e8:	4603      	mov	r3, r0
 80031ea:	e021      	b.n	8003230 <io_read+0xb0>
    }

    if (BETWEEN(address, 0xFF10, 0xFF3F)) {
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d906      	bls.n	8003204 <io_read+0x84>
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	f64f 723f 	movw	r2, #65343	; 0xff3f
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d801      	bhi.n	8003204 <io_read+0x84>
        //ignore sound
        return 0;
 8003200:	2300      	movs	r3, #0
 8003202:	e015      	b.n	8003230 <io_read+0xb0>
    }

    if (BETWEEN(address, 0xFF40, 0xFF4B)) {
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	f64f 723f 	movw	r2, #65343	; 0xff3f
 800320a:	4293      	cmp	r3, r2
 800320c:	d90a      	bls.n	8003224 <io_read+0xa4>
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	f64f 724b 	movw	r2, #65355	; 0xff4b
 8003214:	4293      	cmp	r3, r2
 8003216:	d805      	bhi.n	8003224 <io_read+0xa4>
        return lcd_read(address);
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f8d6 	bl	80033cc <lcd_read>
 8003220:	4603      	mov	r3, r0
 8003222:	e005      	b.n	8003230 <io_read+0xb0>
    }

    printf("UNSUPPORTED bus_read(%04X)\n", address);
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	4619      	mov	r1, r3
 8003228:	4804      	ldr	r0, [pc, #16]	; (800323c <io_read+0xbc>)
 800322a:	f00e fc5d 	bl	8011ae8 <iprintf>
    return 0;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	200015b8 	.word	0x200015b8
 800323c:	08012c58 	.word	0x08012c58

08003240 <io_write>:

void io_write(u16 address, u8 value) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	460a      	mov	r2, r1
 800324a:	80fb      	strh	r3, [r7, #6]
 800324c:	4613      	mov	r3, r2
 800324e:	717b      	strb	r3, [r7, #5]
    if (address == 0xFF00) {
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8003256:	d104      	bne.n	8003262 <io_write+0x22>
        gamepad_set_sel(value);
 8003258:	797b      	ldrb	r3, [r7, #5]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fe72 	bl	8002f44 <gamepad_set_sel>
        return;
 8003260:	e04e      	b.n	8003300 <io_write+0xc0>
    }
    
    if (address == 0xFF01) {
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	f64f 7201 	movw	r2, #65281	; 0xff01
 8003268:	4293      	cmp	r3, r2
 800326a:	d103      	bne.n	8003274 <io_write+0x34>
        serial_data[0] = value;
 800326c:	4a26      	ldr	r2, [pc, #152]	; (8003308 <io_write+0xc8>)
 800326e:	797b      	ldrb	r3, [r7, #5]
 8003270:	7013      	strb	r3, [r2, #0]
        return;
 8003272:	e045      	b.n	8003300 <io_write+0xc0>
    }

    if (address == 0xFF02) {
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	f64f 7202 	movw	r2, #65282	; 0xff02
 800327a:	4293      	cmp	r3, r2
 800327c:	d103      	bne.n	8003286 <io_write+0x46>
        serial_data[1] = value;
 800327e:	4a22      	ldr	r2, [pc, #136]	; (8003308 <io_write+0xc8>)
 8003280:	797b      	ldrb	r3, [r7, #5]
 8003282:	7053      	strb	r3, [r2, #1]
        return;
 8003284:	e03c      	b.n	8003300 <io_write+0xc0>
    }

    if (BETWEEN(address, 0xFF04, 0xFF07)) {
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	f64f 7203 	movw	r2, #65283	; 0xff03
 800328c:	4293      	cmp	r3, r2
 800328e:	d90b      	bls.n	80032a8 <io_write+0x68>
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	f64f 7207 	movw	r2, #65287	; 0xff07
 8003296:	4293      	cmp	r3, r2
 8003298:	d806      	bhi.n	80032a8 <io_write+0x68>
        timer_write(address, value);
 800329a:	797a      	ldrb	r2, [r7, #5]
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f002 fccb 	bl	8005c3c <timer_write>
        return;
 80032a6:	e02b      	b.n	8003300 <io_write+0xc0>
    }
    
    if (address == 0xFF0F) {
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d104      	bne.n	80032bc <io_write+0x7c>
        cpu_set_int_flags(value);
 80032b2:	797b      	ldrb	r3, [r7, #5]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fcb9 	bl	8002c2c <cpu_set_int_flags>
        return;
 80032ba:	e021      	b.n	8003300 <io_write+0xc0>
    }

    if (BETWEEN(address, 0xFF10, 0xFF3F)) {
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d904      	bls.n	80032d0 <io_write+0x90>
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	f64f 723f 	movw	r2, #65343	; 0xff3f
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d916      	bls.n	80032fe <io_write+0xbe>
        //ignore sound
        return;
    }

    if (BETWEEN(address, 0xFF40, 0xFF4B)) {
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	f64f 723f 	movw	r2, #65343	; 0xff3f
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d90b      	bls.n	80032f2 <io_write+0xb2>
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	f64f 724b 	movw	r2, #65355	; 0xff4b
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d806      	bhi.n	80032f2 <io_write+0xb2>
        lcd_write(address, value);
 80032e4:	797a      	ldrb	r2, [r7, #5]
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f8d4 	bl	8003498 <lcd_write>
        return;
 80032f0:	e006      	b.n	8003300 <io_write+0xc0>
    }

    printf("UNSUPPORTED bus_write(%04X)\n", address);
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4805      	ldr	r0, [pc, #20]	; (800330c <io_write+0xcc>)
 80032f8:	f00e fbf6 	bl	8011ae8 <iprintf>
 80032fc:	e000      	b.n	8003300 <io_write+0xc0>
        return;
 80032fe:	bf00      	nop
}
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200015b8 	.word	0x200015b8
 800330c:	08012c74 	.word	0x08012c74

08003310 <lcd_init>:
static lcd_context ctx;

static unsigned long colors_default[4] = {0xFFFFFFFF, 0xFFAAAAAA, 0xFF555555, 0xFF000000};
//static unsigned long ogbc_default[4] = {0xFF9BBC0F, 0xFF8BAC0F, 0xFF306230, 0xFF0F380F};

void lcd_init() {
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
    ctx.lcdc = 0x91;
 8003316:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <lcd_init+0xa0>)
 8003318:	2291      	movs	r2, #145	; 0x91
 800331a:	701a      	strb	r2, [r3, #0]
    ctx.scroll_x = 0;
 800331c:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <lcd_init+0xa0>)
 800331e:	2200      	movs	r2, #0
 8003320:	70da      	strb	r2, [r3, #3]
    ctx.scroll_y = 0;
 8003322:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <lcd_init+0xa0>)
 8003324:	2200      	movs	r2, #0
 8003326:	709a      	strb	r2, [r3, #2]
    ctx.ly = 0;
 8003328:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <lcd_init+0xa0>)
 800332a:	2200      	movs	r2, #0
 800332c:	711a      	strb	r2, [r3, #4]
    ctx.ly_compare = 0;
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <lcd_init+0xa0>)
 8003330:	2200      	movs	r2, #0
 8003332:	715a      	strb	r2, [r3, #5]
    ctx.bg_palette = 0xFC;
 8003334:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <lcd_init+0xa0>)
 8003336:	22fc      	movs	r2, #252	; 0xfc
 8003338:	71da      	strb	r2, [r3, #7]
    ctx.obj_palette[0] = 0xFF;
 800333a:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <lcd_init+0xa0>)
 800333c:	22ff      	movs	r2, #255	; 0xff
 800333e:	721a      	strb	r2, [r3, #8]
    ctx.obj_palette[1] = 0xFF;
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <lcd_init+0xa0>)
 8003342:	22ff      	movs	r2, #255	; 0xff
 8003344:	725a      	strb	r2, [r3, #9]
    ctx.win_y = 0;
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <lcd_init+0xa0>)
 8003348:	2200      	movs	r2, #0
 800334a:	729a      	strb	r2, [r3, #10]
    ctx.win_x = 0;
 800334c:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <lcd_init+0xa0>)
 800334e:	2200      	movs	r2, #0
 8003350:	72da      	strb	r2, [r3, #11]

    for (int i=0; i<4; i++) {
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	e020      	b.n	800339a <lcd_init+0x8a>
        ctx.bg_colors[i] = colors_default[i];
 8003358:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <lcd_init+0xa4>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003360:	4913      	ldr	r1, [pc, #76]	; (80033b0 <lcd_init+0xa0>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3302      	adds	r3, #2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	605a      	str	r2, [r3, #4]
        ctx.sp1_colors[i] = colors_default[i];
 800336c:	4a11      	ldr	r2, [pc, #68]	; (80033b4 <lcd_init+0xa4>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003374:	490e      	ldr	r1, [pc, #56]	; (80033b0 <lcd_init+0xa0>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3306      	adds	r3, #6
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	605a      	str	r2, [r3, #4]
        ctx.sp2_colors[i] = colors_default[i];
 8003380:	4a0c      	ldr	r2, [pc, #48]	; (80033b4 <lcd_init+0xa4>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003388:	4909      	ldr	r1, [pc, #36]	; (80033b0 <lcd_init+0xa0>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	330a      	adds	r3, #10
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	605a      	str	r2, [r3, #4]
    for (int i=0; i<4; i++) {
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3301      	adds	r3, #1
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b03      	cmp	r3, #3
 800339e:	dddb      	ble.n	8003358 <lcd_init+0x48>
    }
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	200015bc 	.word	0x200015bc
 80033b4:	200009b8 	.word	0x200009b8

080033b8 <lcd_get_context>:

lcd_context *lcd_get_context() {
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
    return &ctx;
 80033bc:	4b02      	ldr	r3, [pc, #8]	; (80033c8 <lcd_get_context+0x10>)
}
 80033be:	4618      	mov	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	200015bc 	.word	0x200015bc

080033cc <lcd_read>:

u8 lcd_read(u16 address) {
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
    u8 offset = (address - 0xFF40);
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	3b40      	subs	r3, #64	; 0x40
 80033dc:	73fb      	strb	r3, [r7, #15]
    u8 *p = (u8 *)&ctx;
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <lcd_read+0x2c>)
 80033e0:	60bb      	str	r3, [r7, #8]

    return p[offset];
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	4413      	add	r3, r2
 80033e8:	781b      	ldrb	r3, [r3, #0]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	200015bc 	.word	0x200015bc

080033fc <update_palette>:

void update_palette(u8 palette_data, u8 pal) {
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	460a      	mov	r2, r1
 8003406:	71fb      	strb	r3, [r7, #7]
 8003408:	4613      	mov	r3, r2
 800340a:	71bb      	strb	r3, [r7, #6]
    u32 *p_colors = ctx.bg_colors;
 800340c:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <update_palette+0x8c>)
 800340e:	60fb      	str	r3, [r7, #12]

    switch(pal) {
 8003410:	79bb      	ldrb	r3, [r7, #6]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d002      	beq.n	800341c <update_palette+0x20>
 8003416:	2b02      	cmp	r3, #2
 8003418:	d003      	beq.n	8003422 <update_palette+0x26>
 800341a:	e005      	b.n	8003428 <update_palette+0x2c>
        case 1:
            p_colors = ctx.sp1_colors;
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <update_palette+0x90>)
 800341e:	60fb      	str	r3, [r7, #12]
            break;
 8003420:	e002      	b.n	8003428 <update_palette+0x2c>
        case 2:
            p_colors = ctx.sp2_colors;
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <update_palette+0x94>)
 8003424:	60fb      	str	r3, [r7, #12]
            break;
 8003426:	bf00      	nop
    }

    p_colors[0] = colors_default[palette_data & 0b11];
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	4a19      	ldr	r2, [pc, #100]	; (8003494 <update_palette+0x98>)
 8003430:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	601a      	str	r2, [r3, #0]
    p_colors[1] = colors_default[(palette_data >> 2) & 0b11];
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 0203 	and.w	r2, r3, #3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3304      	adds	r3, #4
 8003446:	4913      	ldr	r1, [pc, #76]	; (8003494 <update_palette+0x98>)
 8003448:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800344c:	601a      	str	r2, [r3, #0]
    p_colors[2] = colors_default[(palette_data >> 4) & 0b11];
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f003 0203 	and.w	r2, r3, #3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3308      	adds	r3, #8
 800345c:	490d      	ldr	r1, [pc, #52]	; (8003494 <update_palette+0x98>)
 800345e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003462:	601a      	str	r2, [r3, #0]
    p_colors[3] = colors_default[(palette_data >> 6) & 0b11];
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	099b      	lsrs	r3, r3, #6
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 0203 	and.w	r2, r3, #3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	330c      	adds	r3, #12
 8003472:	4908      	ldr	r1, [pc, #32]	; (8003494 <update_palette+0x98>)
 8003474:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003478:	601a      	str	r2, [r3, #0]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	200015c8 	.word	0x200015c8
 800348c:	200015d8 	.word	0x200015d8
 8003490:	200015e8 	.word	0x200015e8
 8003494:	200009b8 	.word	0x200009b8

08003498 <lcd_write>:

void lcd_write(u16 address, u8 value) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	460a      	mov	r2, r1
 80034a2:	80fb      	strh	r3, [r7, #6]
 80034a4:	4613      	mov	r3, r2
 80034a6:	717b      	strb	r3, [r7, #5]

    u8 offset = (address - 0xFF40);
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	3b40      	subs	r3, #64	; 0x40
 80034ae:	73fb      	strb	r3, [r7, #15]
    u8 *p = (u8 *)&ctx;
 80034b0:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <lcd_write+0x88>)
 80034b2:	60bb      	str	r3, [r7, #8]
    p[offset] = value;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	4413      	add	r3, r2
 80034ba:	797a      	ldrb	r2, [r7, #5]
 80034bc:	701a      	strb	r2, [r3, #0]

    if (offset == 6) { 
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	2b06      	cmp	r3, #6
 80034c2:	d103      	bne.n	80034cc <lcd_write+0x34>
        //0xFF46 = DMA
        dma_start(value);
 80034c4:	797b      	ldrb	r3, [r7, #5]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fbf6 	bl	8002cb8 <dma_start>
    }

    if (address == 0xFF47) {
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	f64f 7247 	movw	r2, #65351	; 0xff47
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d105      	bne.n	80034e2 <lcd_write+0x4a>
        update_palette(value, 0);
 80034d6:	797b      	ldrb	r3, [r7, #5]
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff8e 	bl	80033fc <update_palette>
    } else if (address == 0xFF48) {
        update_palette(value & 0b11111100, 1);
    } else if (address == 0xFF49) {
        update_palette(value & 0b11111100, 2);
    }
}
 80034e0:	e01a      	b.n	8003518 <lcd_write+0x80>
    } else if (address == 0xFF48) {
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	f64f 7248 	movw	r2, #65352	; 0xff48
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d108      	bne.n	80034fe <lcd_write+0x66>
        update_palette(value & 0b11111100, 1);
 80034ec:	797b      	ldrb	r3, [r7, #5]
 80034ee:	f023 0303 	bic.w	r3, r3, #3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2101      	movs	r1, #1
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ff80 	bl	80033fc <update_palette>
}
 80034fc:	e00c      	b.n	8003518 <lcd_write+0x80>
    } else if (address == 0xFF49) {
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	f64f 7249 	movw	r2, #65353	; 0xff49
 8003504:	4293      	cmp	r3, r2
 8003506:	d107      	bne.n	8003518 <lcd_write+0x80>
        update_palette(value & 0b11111100, 2);
 8003508:	797b      	ldrb	r3, [r7, #5]
 800350a:	f023 0303 	bic.w	r3, r3, #3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2102      	movs	r1, #2
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff72 	bl	80033fc <update_palette>
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200015bc 	.word	0x200015bc

08003524 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	b29a      	uxth	r2, r3
 8003534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	4804      	ldr	r0, [pc, #16]	; (800354c <_write+0x28>)
 800353c:	f006 fb62 	bl	8009c04 <HAL_UART_Transmit>
  return len;
 8003540:	687b      	ldr	r3, [r7, #4]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200096cc 	.word	0x200096cc

08003550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003550:	b5b0      	push	{r4, r5, r7, lr}
 8003552:	b08e      	sub	sp, #56	; 0x38
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003556:	f002 fc36 	bl	8005dc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800355a:	f000 f83b 	bl	80035d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800355e:	f000 f943 	bl	80037e8 <MX_GPIO_Init>
  MX_SDMMC2_SD_Init();
 8003562:	f000 f8cb 	bl	80036fc <MX_SDMMC2_SD_Init>
  MX_DMA_Init();
 8003566:	f000 f919 	bl	800379c <MX_DMA_Init>
  MX_FATFS_Init();
 800356a:	f007 fd67 	bl	800b03c <MX_FATFS_Init>
  MX_CRC_Init();
 800356e:	f000 f8a3 	bl	80036b8 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8003572:	f000 f8e3 	bl	800373c <MX_USART1_UART_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */

  /* definition and creation of cpu_task */
  osThreadDef(cpu_task, cpu_start, osPriorityBelowNormal, 0, 512);
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <main+0x74>)
 8003578:	f107 041c 	add.w	r4, r7, #28
 800357c:	461d      	mov	r5, r3
 800357e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cpu_taskHandle = osThreadCreate(osThread(cpu_task), NULL);
 800358a:	f107 031c 	add.w	r3, r7, #28
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f00a faa3 	bl	800dadc <osThreadCreate>
 8003596:	4603      	mov	r3, r0
 8003598:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <main+0x78>)
 800359a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ui_task */
  osThreadDef(ui_task, ui_start, osPriorityNormal, 0, 512);
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <main+0x7c>)
 800359e:	463c      	mov	r4, r7
 80035a0:	461d      	mov	r5, r3
 80035a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ui_taskHandle = osThreadCreate(osThread(ui_task), NULL);
 80035ae:	463b      	mov	r3, r7
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f00a fa92 	bl	800dadc <osThreadCreate>
 80035b8:	4603      	mov	r3, r0
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <main+0x80>)
 80035bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80035be:	f00a fa6a 	bl	800da96 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80035c2:	e7fe      	b.n	80035c2 <main+0x72>
 80035c4:	08012ca8 	.word	0x08012ca8
 80035c8:	20009750 	.word	0x20009750
 80035cc:	08012cc4 	.word	0x08012cc4
 80035d0:	20009754 	.word	0x20009754

080035d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b094      	sub	sp, #80	; 0x50
 80035d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035da:	f107 031c 	add.w	r3, r7, #28
 80035de:	2234      	movs	r2, #52	; 0x34
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f00d fece 	bl	8011384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035e8:	f107 0308 	add.w	r3, r7, #8
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035f8:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <SystemClock_Config+0xdc>)
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	4a2c      	ldr	r2, [pc, #176]	; (80036b0 <SystemClock_Config+0xdc>)
 80035fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003602:	6413      	str	r3, [r2, #64]	; 0x40
 8003604:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <SystemClock_Config+0xdc>)
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003610:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <SystemClock_Config+0xe0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003618:	4a26      	ldr	r2, [pc, #152]	; (80036b4 <SystemClock_Config+0xe0>)
 800361a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <SystemClock_Config+0xe0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800362c:	2303      	movs	r3, #3
 800362e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003636:	2301      	movs	r3, #1
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800363a:	2310      	movs	r3, #16
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800363e:	2302      	movs	r3, #2
 8003640:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003648:	230c      	movs	r3, #12
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 93;
 800364c:	235d      	movs	r3, #93	; 0x5d
 800364e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003650:	2304      	movs	r3, #4
 8003652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003654:	2304      	movs	r3, #4
 8003656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003658:	2302      	movs	r3, #2
 800365a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800365c:	f107 031c 	add.w	r3, r7, #28
 8003660:	4618      	mov	r0, r3
 8003662:	f003 fb37 	bl	8006cd4 <HAL_RCC_OscConfig>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800366c:	f000 fcd2 	bl	8004014 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003670:	230f      	movs	r3, #15
 8003672:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003674:	2302      	movs	r3, #2
 8003676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800367c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003686:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003688:	f107 0308 	add.w	r3, r7, #8
 800368c:	2101      	movs	r1, #1
 800368e:	4618      	mov	r0, r3
 8003690:	f003 fdce 	bl	8007230 <HAL_RCC_ClockConfig>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800369a:	f000 fcbb 	bl	8004014 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800369e:	2200      	movs	r2, #0
 80036a0:	2100      	movs	r1, #0
 80036a2:	2000      	movs	r0, #0
 80036a4:	f003 feb0 	bl	8007408 <HAL_RCC_MCOConfig>
}
 80036a8:	bf00      	nop
 80036aa:	3750      	adds	r7, #80	; 0x50
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40007000 	.word	0x40007000

080036b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80036bc:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <MX_CRC_Init+0x3c>)
 80036be:	4a0e      	ldr	r2, [pc, #56]	; (80036f8 <MX_CRC_Init+0x40>)
 80036c0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80036c2:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <MX_CRC_Init+0x3c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <MX_CRC_Init+0x3c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80036ce:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <MX_CRC_Init+0x3c>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80036d4:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <MX_CRC_Init+0x3c>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <MX_CRC_Init+0x3c>)
 80036dc:	2201      	movs	r2, #1
 80036de:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80036e0:	4804      	ldr	r0, [pc, #16]	; (80036f4 <MX_CRC_Init+0x3c>)
 80036e2:	f002 fca3 	bl	800602c <HAL_CRC_Init>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80036ec:	f000 fc92 	bl	8004014 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80036f0:	bf00      	nop
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	200095c4 	.word	0x200095c4
 80036f8:	40023000 	.word	0x40023000

080036fc <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <MX_SDMMC2_SD_Init+0x38>)
 8003702:	4a0d      	ldr	r2, [pc, #52]	; (8003738 <MX_SDMMC2_SD_Init+0x3c>)
 8003704:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <MX_SDMMC2_SD_Init+0x38>)
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <MX_SDMMC2_SD_Init+0x38>)
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <MX_SDMMC2_SD_Init+0x38>)
 8003714:	2200      	movs	r2, #0
 8003716:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <MX_SDMMC2_SD_Init+0x38>)
 800371a:	2200      	movs	r2, #0
 800371c:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <MX_SDMMC2_SD_Init+0x38>)
 8003720:	2200      	movs	r2, #0
 8003722:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <MX_SDMMC2_SD_Init+0x38>)
 8003726:	2200      	movs	r2, #0
 8003728:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	200095e8 	.word	0x200095e8
 8003738:	40011c00 	.word	0x40011c00

0800373c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <MX_USART1_UART_Init+0x58>)
 8003742:	4a15      	ldr	r2, [pc, #84]	; (8003798 <MX_USART1_UART_Init+0x5c>)
 8003744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <MX_USART1_UART_Init+0x58>)
 8003748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800374c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <MX_USART1_UART_Init+0x58>)
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <MX_USART1_UART_Init+0x58>)
 8003756:	2200      	movs	r2, #0
 8003758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <MX_USART1_UART_Init+0x58>)
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <MX_USART1_UART_Init+0x58>)
 8003762:	220c      	movs	r2, #12
 8003764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003766:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <MX_USART1_UART_Init+0x58>)
 8003768:	2200      	movs	r2, #0
 800376a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <MX_USART1_UART_Init+0x58>)
 800376e:	2200      	movs	r2, #0
 8003770:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <MX_USART1_UART_Init+0x58>)
 8003774:	2200      	movs	r2, #0
 8003776:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <MX_USART1_UART_Init+0x58>)
 800377a:	2200      	movs	r2, #0
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800377e:	4805      	ldr	r0, [pc, #20]	; (8003794 <MX_USART1_UART_Init+0x58>)
 8003780:	f006 f9f2 	bl	8009b68 <HAL_UART_Init>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800378a:	f000 fc43 	bl	8004014 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	200096cc 	.word	0x200096cc
 8003798:	40011000 	.word	0x40011000

0800379c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <MX_DMA_Init+0x48>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	4a0f      	ldr	r2, [pc, #60]	; (80037e4 <MX_DMA_Init+0x48>)
 80037a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ac:	6313      	str	r3, [r2, #48]	; 0x30
 80037ae:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <MX_DMA_Init+0x48>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b6:	607b      	str	r3, [r7, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2105      	movs	r1, #5
 80037be:	2038      	movs	r0, #56	; 0x38
 80037c0:	f002 fc0a 	bl	8005fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80037c4:	2038      	movs	r0, #56	; 0x38
 80037c6:	f002 fc23 	bl	8006010 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2105      	movs	r1, #5
 80037ce:	2044      	movs	r0, #68	; 0x44
 80037d0:	f002 fc02 	bl	8005fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80037d4:	2044      	movs	r0, #68	; 0x44
 80037d6:	f002 fc1b 	bl	8006010 <HAL_NVIC_EnableIRQ>

}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023800 	.word	0x40023800

080037e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b090      	sub	sp, #64	; 0x40
 80037ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	60da      	str	r2, [r3, #12]
 80037fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037fe:	4bab      	ldr	r3, [pc, #684]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4aaa      	ldr	r2, [pc, #680]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003804:	f043 0310 	orr.w	r3, r3, #16
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
 800380a:	4ba8      	ldr	r3, [pc, #672]	; (8003aac <MX_GPIO_Init+0x2c4>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003816:	4ba5      	ldr	r3, [pc, #660]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	4aa4      	ldr	r2, [pc, #656]	; (8003aac <MX_GPIO_Init+0x2c4>)
 800381c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003820:	6313      	str	r3, [r2, #48]	; 0x30
 8003822:	4ba2      	ldr	r3, [pc, #648]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800382e:	4b9f      	ldr	r3, [pc, #636]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a9e      	ldr	r2, [pc, #632]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b9c      	ldr	r3, [pc, #624]	; (8003aac <MX_GPIO_Init+0x2c4>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	623b      	str	r3, [r7, #32]
 8003844:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003846:	4b99      	ldr	r3, [pc, #612]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	4a98      	ldr	r2, [pc, #608]	; (8003aac <MX_GPIO_Init+0x2c4>)
 800384c:	f043 0308 	orr.w	r3, r3, #8
 8003850:	6313      	str	r3, [r2, #48]	; 0x30
 8003852:	4b96      	ldr	r3, [pc, #600]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800385e:	4b93      	ldr	r3, [pc, #588]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4a92      	ldr	r2, [pc, #584]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003864:	f043 0304 	orr.w	r3, r3, #4
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4b90      	ldr	r3, [pc, #576]	; (8003aac <MX_GPIO_Init+0x2c4>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003876:	4b8d      	ldr	r3, [pc, #564]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	4a8c      	ldr	r2, [pc, #560]	; (8003aac <MX_GPIO_Init+0x2c4>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	6313      	str	r3, [r2, #48]	; 0x30
 8003882:	4b8a      	ldr	r3, [pc, #552]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800388e:	4b87      	ldr	r3, [pc, #540]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a86      	ldr	r2, [pc, #536]	; (8003aac <MX_GPIO_Init+0x2c4>)
 8003894:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b84      	ldr	r3, [pc, #528]	; (8003aac <MX_GPIO_Init+0x2c4>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80038a6:	4b81      	ldr	r3, [pc, #516]	; (8003aac <MX_GPIO_Init+0x2c4>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a80      	ldr	r2, [pc, #512]	; (8003aac <MX_GPIO_Init+0x2c4>)
 80038ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b7e      	ldr	r3, [pc, #504]	; (8003aac <MX_GPIO_Init+0x2c4>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80038be:	4b7b      	ldr	r3, [pc, #492]	; (8003aac <MX_GPIO_Init+0x2c4>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a7a      	ldr	r2, [pc, #488]	; (8003aac <MX_GPIO_Init+0x2c4>)
 80038c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b78      	ldr	r3, [pc, #480]	; (8003aac <MX_GPIO_Init+0x2c4>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80038d6:	4b75      	ldr	r3, [pc, #468]	; (8003aac <MX_GPIO_Init+0x2c4>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	4a74      	ldr	r2, [pc, #464]	; (8003aac <MX_GPIO_Init+0x2c4>)
 80038dc:	f043 0320 	orr.w	r3, r3, #32
 80038e0:	6313      	str	r3, [r2, #48]	; 0x30
 80038e2:	4b72      	ldr	r3, [pc, #456]	; (8003aac <MX_GPIO_Init+0x2c4>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038ee:	4b6f      	ldr	r3, [pc, #444]	; (8003aac <MX_GPIO_Init+0x2c4>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4a6e      	ldr	r2, [pc, #440]	; (8003aac <MX_GPIO_Init+0x2c4>)
 80038f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f8:	6313      	str	r3, [r2, #48]	; 0x30
 80038fa:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <MX_GPIO_Init+0x2c4>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8003906:	2378      	movs	r3, #120	; 0x78
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003912:	2300      	movs	r3, #0
 8003914:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003916:	2306      	movs	r3, #6
 8003918:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800391a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800391e:	4619      	mov	r1, r3
 8003920:	4863      	ldr	r0, [pc, #396]	; (8003ab0 <MX_GPIO_Init+0x2c8>)
 8003922:	f003 f813 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003926:	2304      	movs	r3, #4
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392a:	2302      	movs	r3, #2
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003932:	2303      	movs	r3, #3
 8003934:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003936:	2309      	movs	r3, #9
 8003938:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800393a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800393e:	4619      	mov	r1, r3
 8003940:	485b      	ldr	r0, [pc, #364]	; (8003ab0 <MX_GPIO_Init+0x2c8>)
 8003942:	f003 f803 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003946:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394c:	2302      	movs	r3, #2
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003954:	2303      	movs	r3, #3
 8003956:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003958:	230b      	movs	r3, #11
 800395a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800395c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003960:	4619      	mov	r1, r3
 8003962:	4854      	ldr	r0, [pc, #336]	; (8003ab4 <MX_GPIO_Init+0x2cc>)
 8003964:	f002 fff2 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003968:	f64f 7383 	movw	r3, #65411	; 0xff83
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	2302      	movs	r3, #2
 8003970:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003976:	2303      	movs	r3, #3
 8003978:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800397a:	230c      	movs	r3, #12
 800397c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800397e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003982:	4619      	mov	r1, r3
 8003984:	484a      	ldr	r0, [pc, #296]	; (8003ab0 <MX_GPIO_Init+0x2c8>)
 8003986:	f002 ffe1 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800398a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003990:	2312      	movs	r3, #18
 8003992:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003998:	2300      	movs	r3, #0
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800399c:	2304      	movs	r3, #4
 800399e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039a4:	4619      	mov	r1, r3
 80039a6:	4844      	ldr	r0, [pc, #272]	; (8003ab8 <MX_GPIO_Init+0x2d0>)
 80039a8:	f002 ffd0 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80039ac:	f643 4323 	movw	r3, #15395	; 0x3c23
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b2:	2302      	movs	r3, #2
 80039b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ba:	2303      	movs	r3, #3
 80039bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80039be:	230a      	movs	r3, #10
 80039c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039c6:	4619      	mov	r1, r3
 80039c8:	483b      	ldr	r0, [pc, #236]	; (8003ab8 <MX_GPIO_Init+0x2d0>)
 80039ca:	f002 ffbf 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RX_Pin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 80039ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d4:	2302      	movs	r3, #2
 80039d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039dc:	2303      	movs	r3, #3
 80039de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80039e0:	2308      	movs	r3, #8
 80039e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 80039e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e8:	4619      	mov	r1, r3
 80039ea:	4834      	ldr	r0, [pc, #208]	; (8003abc <MX_GPIO_Init+0x2d4>)
 80039ec:	f002 ffae 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_Pin */
  GPIO_InitStruct.Pin = CEC_Pin;
 80039f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039f6:	2312      	movs	r3, #18
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fe:	2300      	movs	r3, #0
 8003a00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8003a02:	2304      	movs	r3, #4
 8003a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8003a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	482c      	ldr	r0, [pc, #176]	; (8003ac0 <MX_GPIO_Init+0x2d8>)
 8003a0e:	f002 ff9d 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SDA_Pin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a16:	2312      	movs	r3, #18
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8003a22:	230b      	movs	r3, #11
 8003a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8003a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4822      	ldr	r0, [pc, #136]	; (8003ab8 <MX_GPIO_Init+0x2d0>)
 8003a2e:	f002 ff8d 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003a32:	2340      	movs	r3, #64	; 0x40
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003a42:	230a      	movs	r3, #10
 8003a44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	481a      	ldr	r0, [pc, #104]	; (8003ab8 <MX_GPIO_Init+0x2d0>)
 8003a4e:	f002 ff7d 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A12_Pin
                           FMC_A10_Pin FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8003a52:	f248 1337 	movw	r3, #33079	; 0x8137
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a60:	2303      	movs	r3, #3
 8003a62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a64:	230c      	movs	r3, #12
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4811      	ldr	r0, [pc, #68]	; (8003ab4 <MX_GPIO_Init+0x2cc>)
 8003a70:	f002 ff6c 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin DSI_RESET_Pin
                           ARD_D8_Pin LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin
                           ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin
 8003a74:	f24f 033b 	movw	r3, #61499	; 0xf03b
 8003a78:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARD_D8_Pin|LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a86:	4619      	mov	r1, r3
 8003a88:	480e      	ldr	r0, [pc, #56]	; (8003ac4 <MX_GPIO_Init+0x2dc>)
 8003a8a:	f002 ff5f 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003a8e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	e00d      	b.n	8003ac8 <MX_GPIO_Init+0x2e0>
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40021800 	.word	0x40021800
 8003ab8:	40020400 	.word	0x40020400
 8003abc:	40020800 	.word	0x40020800
 8003ac0:	40020000 	.word	0x40020000
 8003ac4:	40022400 	.word	0x40022400
 8003ac8:	48bb      	ldr	r0, [pc, #748]	; (8003db8 <MX_GPIO_Init+0x5d0>)
 8003aca:	f002 ff3f 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM_DATIN5_Pin DFSDM_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8003ace:	f640 0308 	movw	r3, #2056	; 0x808
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003adc:	2300      	movs	r3, #0
 8003ade:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ae8:	4619      	mov	r1, r3
 8003aea:	48b4      	ldr	r0, [pc, #720]	; (8003dbc <MX_GPIO_Init+0x5d4>)
 8003aec:	f002 ff2e 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8003af0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	2302      	movs	r3, #2
 8003af8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003afe:	2303      	movs	r3, #3
 8003b00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b02:	2309      	movs	r3, #9
 8003b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	48ab      	ldr	r0, [pc, #684]	; (8003dbc <MX_GPIO_Init+0x5d4>)
 8003b0e:	f002 ff1d 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8003b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b20:	2300      	movs	r3, #0
 8003b22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b24:	2305      	movs	r3, #5
 8003b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8003b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	48a4      	ldr	r0, [pc, #656]	; (8003dc0 <MX_GPIO_Init+0x5d8>)
 8003b30:	f002 ff0c 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8003b34:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b46:	4619      	mov	r1, r3
 8003b48:	489e      	ldr	r0, [pc, #632]	; (8003dc4 <MX_GPIO_Init+0x5dc>)
 8003b4a:	f002 feff 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL2_Pin D27_Pin D26_Pin FMC_NBL3_Pin
                           D29_Pin D31_Pin D28_Pin D25_Pin
                           D30_Pin D24_Pin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8003b4e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b60:	230c      	movs	r3, #12
 8003b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4896      	ldr	r0, [pc, #600]	; (8003dc4 <MX_GPIO_Init+0x5dc>)
 8003b6c:	f002 feee 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8003b70:	23f8      	movs	r3, #248	; 0xf8
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b74:	2300      	movs	r3, #0
 8003b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b80:	4619      	mov	r1, r3
 8003b82:	4891      	ldr	r0, [pc, #580]	; (8003dc8 <MX_GPIO_Init+0x5e0>)
 8003b84:	f002 fee2 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8003b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b96:	2300      	movs	r3, #0
 8003b98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8003b9a:	2307      	movs	r3, #7
 8003b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8003b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4889      	ldr	r0, [pc, #548]	; (8003dcc <MX_GPIO_Init+0x5e4>)
 8003ba6:	f002 fed1 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8003baa:	2330      	movs	r3, #48	; 0x30
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bba:	4619      	mov	r1, r3
 8003bbc:	487e      	ldr	r0, [pc, #504]	; (8003db8 <MX_GPIO_Init+0x5d0>)
 8003bbe:	f002 fec5 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8003bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4876      	ldr	r0, [pc, #472]	; (8003db8 <MX_GPIO_Init+0x5d0>)
 8003bde:	f002 feb5 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8003be2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be8:	2302      	movs	r3, #2
 8003bea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bf4:	2305      	movs	r3, #5
 8003bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8003bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4870      	ldr	r0, [pc, #448]	; (8003dc0 <MX_GPIO_Init+0x5d8>)
 8003c00:	f002 fea4 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003c04:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c12:	2303      	movs	r3, #3
 8003c14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c16:	230c      	movs	r3, #12
 8003c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c1e:	4619      	mov	r1, r3
 8003c20:	486b      	ldr	r0, [pc, #428]	; (8003dd0 <MX_GPIO_Init+0x5e8>)
 8003c22:	f002 fe93 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_TX_Pin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8003c26:	2304      	movs	r3, #4
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c32:	2303      	movs	r3, #3
 8003c34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003c36:	2308      	movs	r3, #8
 8003c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8003c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c3e:	4619      	mov	r1, r3
 8003c40:	485d      	ldr	r0, [pc, #372]	; (8003db8 <MX_GPIO_Init+0x5d0>)
 8003c42:	f002 fe83 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : D23_Pin D21_Pin D22_Pin FMC_SDNME_Pin
                           FMC_SDNE0_Pin FMC_SDCKE0_Pin D20_Pin FMC_D_7_Pin
                           FMC_D19_Pin FMC_D16_Pin FMC_D18_Pin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8003c46:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c54:	2303      	movs	r3, #3
 8003c56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c58:	230c      	movs	r3, #12
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c60:	4619      	mov	r1, r3
 8003c62:	485c      	ldr	r0, [pc, #368]	; (8003dd4 <MX_GPIO_Init+0x5ec>)
 8003c64:	f002 fe72 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8003c68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c76:	2303      	movs	r3, #3
 8003c78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003c7a:	230a      	movs	r3, #10
 8003c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8003c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c82:	4619      	mov	r1, r3
 8003c84:	484f      	ldr	r0, [pc, #316]	; (8003dc4 <MX_GPIO_Init+0x5dc>)
 8003c86:	f002 fe61 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8003c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c90:	2302      	movs	r3, #2
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8003ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4846      	ldr	r0, [pc, #280]	; (8003dc0 <MX_GPIO_Init+0x5d8>)
 8003ca8:	f002 fe50 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003cb2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003cb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4840      	ldr	r0, [pc, #256]	; (8003dc4 <MX_GPIO_Init+0x5dc>)
 8003cc4:	f002 fe42 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8003cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8003cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4835      	ldr	r0, [pc, #212]	; (8003dbc <MX_GPIO_Init+0x5d4>)
 8003ce6:	f002 fe31 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_RX_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8003cea:	23c0      	movs	r3, #192	; 0xc0
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d02:	4619      	mov	r1, r3
 8003d04:	482d      	ldr	r0, [pc, #180]	; (8003dbc <MX_GPIO_Init+0x5d4>)
 8003d06:	f002 fe21 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8003d0a:	2310      	movs	r3, #16
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d16:	2303      	movs	r3, #3
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003d1a:	230a      	movs	r3, #10
 8003d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d22:	4619      	mov	r1, r3
 8003d24:	482b      	ldr	r0, [pc, #172]	; (8003dd4 <MX_GPIO_Init+0x5ec>)
 8003d26:	f002 fe11 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d36:	2300      	movs	r3, #0
 8003d38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003d3a:	2306      	movs	r3, #6
 8003d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d42:	4619      	mov	r1, r3
 8003d44:	4821      	ldr	r0, [pc, #132]	; (8003dcc <MX_GPIO_Init+0x5e4>)
 8003d46:	f002 fe01 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8003d4a:	2348      	movs	r3, #72	; 0x48
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	481b      	ldr	r0, [pc, #108]	; (8003dcc <MX_GPIO_Init+0x5e4>)
 8003d5e:	f002 fdf5 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d66:	2302      	movs	r3, #2
 8003d68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003d72:	2303      	movs	r3, #3
 8003d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8003d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4814      	ldr	r0, [pc, #80]	; (8003dd0 <MX_GPIO_Init+0x5e8>)
 8003d7e:	f002 fde5 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8003d82:	2340      	movs	r3, #64	; 0x40
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d86:	2302      	movs	r3, #2
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003d92:	2303      	movs	r3, #3
 8003d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	480c      	ldr	r0, [pc, #48]	; (8003dd0 <MX_GPIO_Init+0x5e8>)
 8003d9e:	f002 fdd5 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8003da2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003da8:	2303      	movs	r3, #3
 8003daa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003db4:	4619      	mov	r1, r3
 8003db6:	e00f      	b.n	8003dd8 <MX_GPIO_Init+0x5f0>
 8003db8:	40020c00 	.word	0x40020c00
 8003dbc:	40020800 	.word	0x40020800
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	40022000 	.word	0x40022000
 8003dc8:	40022800 	.word	0x40022800
 8003dcc:	40021800 	.word	0x40021800
 8003dd0:	40021400 	.word	0x40021400
 8003dd4:	40021c00 	.word	0x40021c00
 8003dd8:	4875      	ldr	r0, [pc, #468]	; (8003fb0 <MX_GPIO_Init+0x7c8>)
 8003dda:	f002 fdb7 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8003dde:	2301      	movs	r3, #1
 8003de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de2:	2302      	movs	r3, #2
 8003de4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dea:	2303      	movs	r3, #3
 8003dec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003dee:	230a      	movs	r3, #10
 8003df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8003df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003df6:	4619      	mov	r1, r3
 8003df8:	486e      	ldr	r0, [pc, #440]	; (8003fb4 <MX_GPIO_Init+0x7cc>)
 8003dfa:	f002 fda7 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003dfe:	2332      	movs	r3, #50	; 0x32
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e02:	2302      	movs	r3, #2
 8003e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e0e:	230b      	movs	r3, #11
 8003e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e16:	4619      	mov	r1, r3
 8003e18:	4866      	ldr	r0, [pc, #408]	; (8003fb4 <MX_GPIO_Init+0x7cc>)
 8003e1a:	f002 fd97 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8003e1e:	2304      	movs	r3, #4
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e22:	2303      	movs	r3, #3
 8003e24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8003e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4860      	ldr	r0, [pc, #384]	; (8003fb4 <MX_GPIO_Init+0x7cc>)
 8003e32:	f002 fd8b 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e36:	2304      	movs	r3, #4
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e42:	2303      	movs	r3, #3
 8003e44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003e46:	2309      	movs	r3, #9
 8003e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4859      	ldr	r0, [pc, #356]	; (8003fb8 <MX_GPIO_Init+0x7d0>)
 8003e52:	f002 fd7b 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SCL_Pin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8003e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e5c:	2312      	movs	r3, #18
 8003e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e64:	2303      	movs	r3, #3
 8003e66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003e68:	2304      	movs	r3, #4
 8003e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8003e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e70:	4619      	mov	r1, r3
 8003e72:	4852      	ldr	r0, [pc, #328]	; (8003fbc <MX_GPIO_Init+0x7d4>)
 8003e74:	f002 fd6a 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8003e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e86:	2303      	movs	r3, #3
 8003e88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003e8a:	2309      	movs	r3, #9
 8003e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8003e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e92:	4619      	mov	r1, r3
 8003e94:	4849      	ldr	r0, [pc, #292]	; (8003fbc <MX_GPIO_Init+0x7d4>)
 8003e96:	f002 fd59 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003e9a:	2386      	movs	r3, #134	; 0x86
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003eaa:	230b      	movs	r3, #11
 8003eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4842      	ldr	r0, [pc, #264]	; (8003fc0 <MX_GPIO_Init+0x7d8>)
 8003eb6:	f002 fd49 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ebe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8003ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ecc:	4619      	mov	r1, r3
 8003ece:	483c      	ldr	r0, [pc, #240]	; (8003fc0 <MX_GPIO_Init+0x7d8>)
 8003ed0:	f002 fd3c 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8003ed4:	2350      	movs	r3, #80	; 0x50
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4836      	ldr	r0, [pc, #216]	; (8003fc0 <MX_GPIO_Init+0x7d8>)
 8003ee8:	f002 fd30 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_TX_Pin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8003eec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efa:	2300      	movs	r3, #0
 8003efc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003efe:	230a      	movs	r3, #10
 8003f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8003f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f06:	4619      	mov	r1, r3
 8003f08:	482c      	ldr	r0, [pc, #176]	; (8003fbc <MX_GPIO_Init+0x7d4>)
 8003f0a:	f002 fd1f 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f12:	2300      	movs	r3, #0
 8003f14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8003f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4828      	ldr	r0, [pc, #160]	; (8003fc4 <MX_GPIO_Init+0x7dc>)
 8003f22:	f002 fd13 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003f26:	2328      	movs	r3, #40	; 0x28
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f32:	2303      	movs	r3, #3
 8003f34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003f36:	230a      	movs	r3, #10
 8003f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f3e:	4619      	mov	r1, r3
 8003f40:	481f      	ldr	r0, [pc, #124]	; (8003fc0 <MX_GPIO_Init+0x7d8>)
 8003f42:	f002 fd03 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSIHOST_TE_Pin */
  GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8003f46:	2304      	movs	r3, #4
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f52:	2300      	movs	r3, #0
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8003f56:	230d      	movs	r3, #13
 8003f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8003f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4819      	ldr	r0, [pc, #100]	; (8003fc8 <MX_GPIO_Init+0x7e0>)
 8003f62:	f002 fcf3 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003f66:	2340      	movs	r3, #64	; 0x40
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f72:	2300      	movs	r3, #0
 8003f74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003f76:	2309      	movs	r3, #9
 8003f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4810      	ldr	r0, [pc, #64]	; (8003fc4 <MX_GPIO_Init+0x7dc>)
 8003f82:	f002 fce3 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003f86:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f94:	2300      	movs	r3, #0
 8003f96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f98:	2305      	movs	r3, #5
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4805      	ldr	r0, [pc, #20]	; (8003fb8 <MX_GPIO_Init+0x7d0>)
 8003fa4:	f002 fcd2 	bl	800694c <HAL_GPIO_Init>

}
 8003fa8:	bf00      	nop
 8003faa:	3740      	adds	r7, #64	; 0x40
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021400 	.word	0x40021400
 8003fb4:	40020800 	.word	0x40020800
 8003fb8:	40020400 	.word	0x40020400
 8003fbc:	40020c00 	.word	0x40020c00
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	40021c00 	.word	0x40021c00
 8003fc8:	40022400 	.word	0x40022400

08003fcc <cpu_start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cpu_start */
void cpu_start(void const * argument)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cpu_start */
  /* Infinite loop */
  for(;;)
  {
    cpu_run(NULL);
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f7fe fed3 	bl	8002d80 <cpu_run>
 8003fda:	e7fb      	b.n	8003fd4 <cpu_start+0x8>

08003fdc <ui_start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ui_start */
void ui_start(void const * argument)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ui_start */
  /* Infinite loop */
  for(;;)
  {
    emu_run("special.gb");
 8003fe4:	4801      	ldr	r0, [pc, #4]	; (8003fec <ui_start+0x10>)
 8003fe6:	f7fe ff07 	bl	8002df8 <emu_run>
 8003fea:	e7fb      	b.n	8003fe4 <ui_start+0x8>
 8003fec:	08012ce0 	.word	0x08012ce0

08003ff0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d101      	bne.n	8004006 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004002:	f001 feed 	bl	8005de0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40010000 	.word	0x40010000

08004014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004018:	b672      	cpsid	i
}
 800401a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800401c:	e7fe      	b.n	800401c <Error_Handler+0x8>
	...

08004020 <ppu_get_context>:
void pipeline_fifo_reset();
void pipeline_process();

static ppu_context ctx;

ppu_context *ppu_get_context() {
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
    return &ctx;
 8004024:	4b02      	ldr	r3, [pc, #8]	; (8004030 <ppu_get_context+0x10>)
}
 8004026:	4618      	mov	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	200015f8 	.word	0x200015f8

08004034 <ppu_init>:

void ppu_init() {
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
    ctx.current_frame = 0;
 8004038:	4a40      	ldr	r2, [pc, #256]	; (800413c <ppu_init+0x108>)
 800403a:	f242 132c 	movw	r3, #8492	; 0x212c
 800403e:	4413      	add	r3, r2
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
    ctx.line_ticks = 0;
 8004044:	4a3d      	ldr	r2, [pc, #244]	; (800413c <ppu_init+0x108>)
 8004046:	f242 1330 	movw	r3, #8496	; 0x2130
 800404a:	4413      	add	r3, r2
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
    ctx.video_buffer = malloc(YRES * XRES * sizeof(32));
 8004050:	2390      	movs	r3, #144	; 0x90
 8004052:	22a0      	movs	r2, #160	; 0xa0
 8004054:	fb02 f303 	mul.w	r3, r2, r3
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f00d f974 	bl	8011348 <malloc>
 8004060:	4603      	mov	r3, r0
 8004062:	4619      	mov	r1, r3
 8004064:	4a35      	ldr	r2, [pc, #212]	; (800413c <ppu_init+0x108>)
 8004066:	f242 1334 	movw	r3, #8500	; 0x2134
 800406a:	4413      	add	r3, r2
 800406c:	6019      	str	r1, [r3, #0]

    ctx.pfc.line_x = 0;
 800406e:	4a33      	ldr	r2, [pc, #204]	; (800413c <ppu_init+0x108>)
 8004070:	f242 03b0 	movw	r3, #8368	; 0x20b0
 8004074:	4413      	add	r3, r2
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
    ctx.pfc.pushed_x = 0;
 800407a:	4a30      	ldr	r2, [pc, #192]	; (800413c <ppu_init+0x108>)
 800407c:	f242 03b1 	movw	r3, #8369	; 0x20b1
 8004080:	4413      	add	r3, r2
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
    ctx.pfc.fetch_x = 0;
 8004086:	4a2d      	ldr	r2, [pc, #180]	; (800413c <ppu_init+0x108>)
 8004088:	f242 03b2 	movw	r3, #8370	; 0x20b2
 800408c:	4413      	add	r3, r2
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
    ctx.pfc.pixel_fifo.size = 0;
 8004092:	4a2a      	ldr	r2, [pc, #168]	; (800413c <ppu_init+0x108>)
 8004094:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8004098:	4413      	add	r3, r2
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
    ctx.pfc.pixel_fifo.head = ctx.pfc.pixel_fifo.tail = NULL;
 800409e:	4a27      	ldr	r2, [pc, #156]	; (800413c <ppu_init+0x108>)
 80040a0:	f242 03a8 	movw	r3, #8360	; 0x20a8
 80040a4:	4413      	add	r3, r2
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	4a24      	ldr	r2, [pc, #144]	; (800413c <ppu_init+0x108>)
 80040ac:	f242 03a8 	movw	r3, #8360	; 0x20a8
 80040b0:	4413      	add	r3, r2
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4921      	ldr	r1, [pc, #132]	; (800413c <ppu_init+0x108>)
 80040b6:	f242 03a4 	movw	r3, #8356	; 0x20a4
 80040ba:	440b      	add	r3, r1
 80040bc:	601a      	str	r2, [r3, #0]
    ctx.pfc.cur_fetch_state = FS_TILE;
 80040be:	4a1f      	ldr	r2, [pc, #124]	; (800413c <ppu_init+0x108>)
 80040c0:	f242 03a0 	movw	r3, #8352	; 0x20a0
 80040c4:	4413      	add	r3, r2
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]

    ctx.line_sprites = 0;
 80040ca:	4a1c      	ldr	r2, [pc, #112]	; (800413c <ppu_init+0x108>)
 80040cc:	f242 03c4 	movw	r3, #8388	; 0x20c4
 80040d0:	4413      	add	r3, r2
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
    ctx.fetched_entry_count = 0;
 80040d6:	4a19      	ldr	r2, [pc, #100]	; (800413c <ppu_init+0x108>)
 80040d8:	f242 1318 	movw	r3, #8472	; 0x2118
 80040dc:	4413      	add	r3, r2
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
    ctx.window_line = 0;
 80040e2:	4a16      	ldr	r2, [pc, #88]	; (800413c <ppu_init+0x108>)
 80040e4:	f242 1328 	movw	r3, #8488	; 0x2128
 80040e8:	4413      	add	r3, r2
 80040ea:	2200      	movs	r2, #0
 80040ec:	701a      	strb	r2, [r3, #0]

    lcd_init();
 80040ee:	f7ff f90f 	bl	8003310 <lcd_init>
    LCDS_MODE_SET(MODE_OAM);
 80040f2:	f7ff f961 	bl	80033b8 <lcd_get_context>
 80040f6:	4603      	mov	r3, r0
 80040f8:	785a      	ldrb	r2, [r3, #1]
 80040fa:	f022 0203 	bic.w	r2, r2, #3
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	705a      	strb	r2, [r3, #1]
 8004102:	f7ff f959 	bl	80033b8 <lcd_get_context>
 8004106:	4603      	mov	r3, r0
 8004108:	785a      	ldrb	r2, [r3, #1]
 800410a:	f042 0202 	orr.w	r2, r2, #2
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	705a      	strb	r2, [r3, #1]

    memset(ctx.oam_ram, 0, sizeof(ctx.oam_ram));
 8004112:	22a0      	movs	r2, #160	; 0xa0
 8004114:	2100      	movs	r1, #0
 8004116:	4809      	ldr	r0, [pc, #36]	; (800413c <ppu_init+0x108>)
 8004118:	f00d f934 	bl	8011384 <memset>
    memset(ctx.video_buffer, 0, YRES * XRES * sizeof(u32));
 800411c:	4a07      	ldr	r2, [pc, #28]	; (800413c <ppu_init+0x108>)
 800411e:	f242 1334 	movw	r3, #8500	; 0x2134
 8004122:	4413      	add	r3, r2
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2290      	movs	r2, #144	; 0x90
 8004128:	21a0      	movs	r1, #160	; 0xa0
 800412a:	fb01 f202 	mul.w	r2, r1, r2
 800412e:	0092      	lsls	r2, r2, #2
 8004130:	2100      	movs	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f00d f926 	bl	8011384 <memset>
}
 8004138:	bf00      	nop
 800413a:	bd80      	pop	{r7, pc}
 800413c:	200015f8 	.word	0x200015f8

08004140 <ppu_tick>:

void ppu_tick() {
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
    ctx.line_ticks++;
 8004144:	4a15      	ldr	r2, [pc, #84]	; (800419c <ppu_tick+0x5c>)
 8004146:	f242 1330 	movw	r3, #8496	; 0x2130
 800414a:	4413      	add	r3, r2
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	4912      	ldr	r1, [pc, #72]	; (800419c <ppu_tick+0x5c>)
 8004152:	f242 1330 	movw	r3, #8496	; 0x2130
 8004156:	440b      	add	r3, r1
 8004158:	601a      	str	r2, [r3, #0]

    switch(LCDS_MODE) {
 800415a:	f7ff f92d 	bl	80033b8 <lcd_get_context>
 800415e:	4603      	mov	r3, r0
 8004160:	785b      	ldrb	r3, [r3, #1]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b03      	cmp	r3, #3
 8004168:	d816      	bhi.n	8004198 <ppu_tick+0x58>
 800416a:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <ppu_tick+0x30>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	08004193 	.word	0x08004193
 8004174:	0800418d 	.word	0x0800418d
 8004178:	08004181 	.word	0x08004181
 800417c:	08004187 	.word	0x08004187
    case MODE_OAM:
        ppu_mode_oam();
 8004180:	f000 ff4c 	bl	800501c <ppu_mode_oam>
        break;
 8004184:	e008      	b.n	8004198 <ppu_tick+0x58>
    case MODE_XFER:
        ppu_mode_xfer();
 8004186:	f000 ffa8 	bl	80050da <ppu_mode_xfer>
        break;
 800418a:	e005      	b.n	8004198 <ppu_tick+0x58>
    case MODE_VBLANK:
        ppu_mode_vblank();
 800418c:	f000 ffd0 	bl	8005130 <ppu_mode_vblank>
        break;
 8004190:	e002      	b.n	8004198 <ppu_tick+0x58>
    case MODE_HBLANK:
        ppu_mode_hblank();
 8004192:	f001 f80b 	bl	80051ac <ppu_mode_hblank>
        break;
 8004196:	bf00      	nop
    }
}
 8004198:	bf00      	nop
 800419a:	bd80      	pop	{r7, pc}
 800419c:	200015f8 	.word	0x200015f8

080041a0 <ppu_oam_write>:


void ppu_oam_write(u16 address, u8 value) {
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	460a      	mov	r2, r1
 80041aa:	80fb      	strh	r3, [r7, #6]
 80041ac:	4613      	mov	r3, r2
 80041ae:	717b      	strb	r3, [r7, #5]
    if (address >= 0xFE00) {
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 80041b6:	d303      	bcc.n	80041c0 <ppu_oam_write+0x20>
        address -= 0xFE00;
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80041be:	80fb      	strh	r3, [r7, #6]
    }

    u8 *p = (u8 *)ctx.oam_ram;
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <ppu_oam_write+0x3c>)
 80041c2:	60fb      	str	r3, [r7, #12]
    p[address] = value;
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4413      	add	r3, r2
 80041ca:	797a      	ldrb	r2, [r7, #5]
 80041cc:	701a      	strb	r2, [r3, #0]
}
 80041ce:	bf00      	nop
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	200015f8 	.word	0x200015f8

080041e0 <ppu_oam_read>:

u8 ppu_oam_read(u16 address) {
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	80fb      	strh	r3, [r7, #6]
    if (address >= 0xFE00) {
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 80041f0:	d303      	bcc.n	80041fa <ppu_oam_read+0x1a>
        address -= 0xFE00;
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80041f8:	80fb      	strh	r3, [r7, #6]
    }

    u8 *p = (u8 *)ctx.oam_ram;
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <ppu_oam_read+0x34>)
 80041fc:	60fb      	str	r3, [r7, #12]
    return p[address];
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	781b      	ldrb	r3, [r3, #0]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	200015f8 	.word	0x200015f8

08004218 <ppu_vram_write>:

void ppu_vram_write(u16 address, u8 value) {
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	460a      	mov	r2, r1
 8004222:	80fb      	strh	r3, [r7, #6]
 8004224:	4613      	mov	r3, r2
 8004226:	717b      	strb	r3, [r7, #5]
    ctx.vram[address - 0x8000] = value;
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800422e:	4a05      	ldr	r2, [pc, #20]	; (8004244 <ppu_vram_write+0x2c>)
 8004230:	4413      	add	r3, r2
 8004232:	797a      	ldrb	r2, [r7, #5]
 8004234:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	200015f8 	.word	0x200015f8

08004248 <ppu_vram_read>:

u8 ppu_vram_read(u16 address) {
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	80fb      	strh	r3, [r7, #6]
    return ctx.vram[address - 0x8000];
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8004258:	4a04      	ldr	r2, [pc, #16]	; (800426c <ppu_vram_read+0x24>)
 800425a:	4413      	add	r3, r2
 800425c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	200015f8 	.word	0x200015f8

08004270 <window_visible>:
#include <ppu.h>
#include <lcd.h>
#include <bus.h>

bool window_visible() {
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
    return LCDC_WIN_ENABLE && lcd_get_context()->win_x >= 0 &&
 8004274:	f7ff f8a0 	bl	80033b8 <lcd_get_context>
 8004278:	4603      	mov	r3, r0
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	f003 0320 	and.w	r3, r3, #32
        lcd_get_context()->win_x <= 166 && lcd_get_context()->win_y >= 0 &&
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <window_visible+0x3c>
    return LCDC_WIN_ENABLE && lcd_get_context()->win_x >= 0 &&
 8004284:	f7ff f898 	bl	80033b8 <lcd_get_context>
        lcd_get_context()->win_x <= 166 && lcd_get_context()->win_y >= 0 &&
 8004288:	f7ff f896 	bl	80033b8 <lcd_get_context>
 800428c:	4603      	mov	r3, r0
 800428e:	7adb      	ldrb	r3, [r3, #11]
    return LCDC_WIN_ENABLE && lcd_get_context()->win_x >= 0 &&
 8004290:	2ba6      	cmp	r3, #166	; 0xa6
 8004292:	d80b      	bhi.n	80042ac <window_visible+0x3c>
        lcd_get_context()->win_x <= 166 && lcd_get_context()->win_y >= 0 &&
 8004294:	f7ff f890 	bl	80033b8 <lcd_get_context>
        lcd_get_context()->win_y < YRES;
 8004298:	f7ff f88e 	bl	80033b8 <lcd_get_context>
 800429c:	4603      	mov	r3, r0
 800429e:	7a9b      	ldrb	r3, [r3, #10]
 80042a0:	461a      	mov	r2, r3
 80042a2:	2390      	movs	r3, #144	; 0x90
        lcd_get_context()->win_x <= 166 && lcd_get_context()->win_y >= 0 &&
 80042a4:	429a      	cmp	r2, r3
 80042a6:	da01      	bge.n	80042ac <window_visible+0x3c>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <window_visible+0x3e>
 80042ac:	2300      	movs	r3, #0
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	b2db      	uxtb	r3, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <pixel_fifo_push>:

void pixel_fifo_push(u32 value) {
 80042b8:	b590      	push	{r4, r7, lr}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
    fifo_entry *next = malloc(sizeof(fifo_entry));
 80042c0:	2008      	movs	r0, #8
 80042c2:	f00d f841 	bl	8011348 <malloc>
 80042c6:	4603      	mov	r3, r0
 80042c8:	60fb      	str	r3, [r7, #12]
    next->next = NULL;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
    next->value = value;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	605a      	str	r2, [r3, #4]

    if (!ppu_get_context()->pfc.pixel_fifo.head) {
 80042d6:	f7ff fea3 	bl	8004020 <ppu_get_context>
 80042da:	4602      	mov	r2, r0
 80042dc:	f242 03a4 	movw	r3, #8356	; 0x20a4
 80042e0:	4413      	add	r3, r2
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d113      	bne.n	8004310 <pixel_fifo_push+0x58>
        //first entry...
        ppu_get_context()->pfc.pixel_fifo.head = ppu_get_context()->pfc.pixel_fifo.tail = next;
 80042e8:	f7ff fe9a 	bl	8004020 <ppu_get_context>
 80042ec:	4604      	mov	r4, r0
 80042ee:	f242 03a8 	movw	r3, #8360	; 0x20a8
 80042f2:	4423      	add	r3, r4
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	f7ff fe92 	bl	8004020 <ppu_get_context>
 80042fc:	4601      	mov	r1, r0
 80042fe:	f242 03a8 	movw	r3, #8360	; 0x20a8
 8004302:	4423      	add	r3, r4
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	f242 03a4 	movw	r3, #8356	; 0x20a4
 800430a:	440b      	add	r3, r1
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e010      	b.n	8004332 <pixel_fifo_push+0x7a>
    } else {
        ppu_get_context()->pfc.pixel_fifo.tail->next = next;
 8004310:	f7ff fe86 	bl	8004020 <ppu_get_context>
 8004314:	4602      	mov	r2, r0
 8004316:	f242 03a8 	movw	r3, #8360	; 0x20a8
 800431a:	4413      	add	r3, r2
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]
        ppu_get_context()->pfc.pixel_fifo.tail = next;
 8004322:	f7ff fe7d 	bl	8004020 <ppu_get_context>
 8004326:	4602      	mov	r2, r0
 8004328:	f242 03a8 	movw	r3, #8360	; 0x20a8
 800432c:	4413      	add	r3, r2
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	601a      	str	r2, [r3, #0]
    }

    ppu_get_context()->pfc.pixel_fifo.size++;
 8004332:	f7ff fe75 	bl	8004020 <ppu_get_context>
 8004336:	4602      	mov	r2, r0
 8004338:	f242 03ac 	movw	r3, #8364	; 0x20ac
 800433c:	4413      	add	r3, r2
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	1c59      	adds	r1, r3, #1
 8004342:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8004346:	4413      	add	r3, r2
 8004348:	6019      	str	r1, [r3, #0]
}
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	bd90      	pop	{r4, r7, pc}
	...

08004354 <pixel_fifo_pop>:

u32 pixel_fifo_pop() {
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
    if (ppu_get_context()->pfc.pixel_fifo.size <= 0) {
 800435a:	f7ff fe61 	bl	8004020 <ppu_get_context>
 800435e:	4602      	mov	r2, r0
 8004360:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8004364:	4413      	add	r3, r2
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <pixel_fifo_pop+0x30>
        fprintf(stderr, "ERR IN PIXEL FIFO!\n");
 800436c:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <pixel_fifo_pop+0x80>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2213      	movs	r2, #19
 8004374:	2101      	movs	r1, #1
 8004376:	4818      	ldr	r0, [pc, #96]	; (80043d8 <pixel_fifo_pop+0x84>)
 8004378:	f00c ff4c 	bl	8011214 <fwrite>
        exit(-8);
 800437c:	f06f 0007 	mvn.w	r0, #7
 8004380:	f00c fa7a 	bl	8010878 <exit>
    }

    fifo_entry *popped = ppu_get_context()->pfc.pixel_fifo.head;
 8004384:	f7ff fe4c 	bl	8004020 <ppu_get_context>
 8004388:	4602      	mov	r2, r0
 800438a:	f242 03a4 	movw	r3, #8356	; 0x20a4
 800438e:	4413      	add	r3, r2
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	607b      	str	r3, [r7, #4]
    ppu_get_context()->pfc.pixel_fifo.head = popped->next;
 8004394:	f7ff fe44 	bl	8004020 <ppu_get_context>
 8004398:	4601      	mov	r1, r0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	f242 03a4 	movw	r3, #8356	; 0x20a4
 80043a2:	440b      	add	r3, r1
 80043a4:	601a      	str	r2, [r3, #0]
    ppu_get_context()->pfc.pixel_fifo.size--;
 80043a6:	f7ff fe3b 	bl	8004020 <ppu_get_context>
 80043aa:	4602      	mov	r2, r0
 80043ac:	f242 03ac 	movw	r3, #8364	; 0x20ac
 80043b0:	4413      	add	r3, r2
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	1e59      	subs	r1, r3, #1
 80043b6:	f242 03ac 	movw	r3, #8364	; 0x20ac
 80043ba:	4413      	add	r3, r2
 80043bc:	6019      	str	r1, [r3, #0]

    u32 val = popped->value;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	603b      	str	r3, [r7, #0]
    free(popped);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f00c ffc7 	bl	8011358 <free>

    return val;
 80043ca:	683b      	ldr	r3, [r7, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	200009dc 	.word	0x200009dc
 80043d8:	08012cec 	.word	0x08012cec

080043dc <fetch_sprite_pixels>:

u32 fetch_sprite_pixels(int bit, u32 color, u8 bg_color) {
 80043dc:	b590      	push	{r4, r7, lr}
 80043de:	b089      	sub	sp, #36	; 0x24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	71fb      	strb	r3, [r7, #7]
    for (int i=0; i<ppu_get_context()->fetched_entry_count; i++) {
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e0c8      	b.n	8004582 <fetch_sprite_pixels+0x1a6>
        int sp_x = (ppu_get_context()->fetched_entries[i].x - 8) + 
 80043f0:	f7ff fe16 	bl	8004020 <ppu_get_context>
 80043f4:	4602      	mov	r2, r0
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f603 0346 	addw	r3, r3, #2118	; 0x846
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	795b      	ldrb	r3, [r3, #5]
 8004402:	f1a3 0408 	sub.w	r4, r3, #8
            ((lcd_get_context()->scroll_x % 8));
 8004406:	f7fe ffd7 	bl	80033b8 <lcd_get_context>
 800440a:	4603      	mov	r3, r0
 800440c:	78db      	ldrb	r3, [r3, #3]
 800440e:	f003 0307 	and.w	r3, r3, #7
        int sp_x = (ppu_get_context()->fetched_entries[i].x - 8) + 
 8004412:	4423      	add	r3, r4
 8004414:	61bb      	str	r3, [r7, #24]
        
        if (sp_x + 8 < ppu_get_context()->pfc.fifo_x) {
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f103 0408 	add.w	r4, r3, #8
 800441c:	f7ff fe00 	bl	8004020 <ppu_get_context>
 8004420:	4602      	mov	r2, r0
 8004422:	f242 03bf 	movw	r3, #8383	; 0x20bf
 8004426:	4413      	add	r3, r2
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	429c      	cmp	r4, r3
 800442c:	f2c0 80a1 	blt.w	8004572 <fetch_sprite_pixels+0x196>
            //past pixel point already...
            continue;
        }

        int offset = ppu_get_context()->pfc.fifo_x - sp_x;
 8004430:	f7ff fdf6 	bl	8004020 <ppu_get_context>
 8004434:	4602      	mov	r2, r0
 8004436:	f242 03bf 	movw	r3, #8383	; 0x20bf
 800443a:	4413      	add	r3, r2
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	617b      	str	r3, [r7, #20]

        if (offset < 0 || offset > 7) {
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f2c0 8094 	blt.w	8004576 <fetch_sprite_pixels+0x19a>
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b07      	cmp	r3, #7
 8004452:	f300 8090 	bgt.w	8004576 <fetch_sprite_pixels+0x19a>
            //out of bounds..
            continue;
        }

        bit = (7 - offset);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f1c3 0307 	rsb	r3, r3, #7
 800445c:	60fb      	str	r3, [r7, #12]

        if (ppu_get_context()->fetched_entries[i].f_x_flip) {
 800445e:	f7ff fddf 	bl	8004020 <ppu_get_context>
 8004462:	4602      	mov	r2, r0
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f603 0346 	addw	r3, r3, #2118	; 0x846
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	79db      	ldrb	r3, [r3, #7]
 8004470:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <fetch_sprite_pixels+0xa2>
            bit = offset;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	60fb      	str	r3, [r7, #12]
        }

        u8 hi = !!(ppu_get_context()->pfc.fetch_entry_data[i * 2] & (1 << bit));
 800447e:	f7ff fdcf 	bl	8004020 <ppu_get_context>
 8004482:	4602      	mov	r2, r0
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	441a      	add	r2, r3
 800448a:	f242 03b6 	movw	r3, #8374	; 0x20b6
 800448e:	4413      	add	r3, r2
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	fa42 f303 	asr.w	r3, r2, r3
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bf14      	ite	ne
 80044a2:	2301      	movne	r3, #1
 80044a4:	2300      	moveq	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	74fb      	strb	r3, [r7, #19]
        u8 lo = !!(ppu_get_context()->pfc.fetch_entry_data[(i * 2) + 1] & (1 << bit)) << 1;
 80044aa:	f7ff fdb9 	bl	8004020 <ppu_get_context>
 80044ae:	4602      	mov	r2, r0
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	3301      	adds	r3, #1
 80044b6:	441a      	add	r2, r3
 80044b8:	f242 03b6 	movw	r3, #8374	; 0x20b6
 80044bc:	4413      	add	r3, r2
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	fa42 f303 	asr.w	r3, r2, r3
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <fetch_sprite_pixels+0xf8>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e000      	b.n	80044d6 <fetch_sprite_pixels+0xfa>
 80044d4:	2300      	movs	r3, #0
 80044d6:	74bb      	strb	r3, [r7, #18]

        bool bg_priority = ppu_get_context()->fetched_entries[i].f_bgp;
 80044d8:	f7ff fda2 	bl	8004020 <ppu_get_context>
 80044dc:	4602      	mov	r2, r0
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f603 0346 	addw	r3, r3, #2118	; 0x846
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	79db      	ldrb	r3, [r3, #7]
 80044ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf14      	ite	ne
 80044f4:	2301      	movne	r3, #1
 80044f6:	2300      	moveq	r3, #0
 80044f8:	747b      	strb	r3, [r7, #17]

        if (!(hi|lo)) {
 80044fa:	7cfa      	ldrb	r2, [r7, #19]
 80044fc:	7cbb      	ldrb	r3, [r7, #18]
 80044fe:	4313      	orrs	r3, r2
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d039      	beq.n	800457a <fetch_sprite_pixels+0x19e>
            //transparent
            continue;
        }

        if (!bg_priority || bg_color == 0) {
 8004506:	7c7b      	ldrb	r3, [r7, #17]
 8004508:	f083 0301 	eor.w	r3, r3, #1
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <fetch_sprite_pixels+0x13c>
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d131      	bne.n	800457c <fetch_sprite_pixels+0x1a0>
            color = (ppu_get_context()->fetched_entries[i].f_pn) ? 
 8004518:	f7ff fd82 	bl	8004020 <ppu_get_context>
 800451c:	4602      	mov	r2, r0
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	79db      	ldrb	r3, [r3, #7]
 800452a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800452e:	b2db      	uxtb	r3, r3
                lcd_get_context()->sp2_colors[hi|lo] : lcd_get_context()->sp1_colors[hi|lo];
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00b      	beq.n	800454c <fetch_sprite_pixels+0x170>
 8004534:	f7fe ff40 	bl	80033b8 <lcd_get_context>
 8004538:	4601      	mov	r1, r0
 800453a:	7cfa      	ldrb	r2, [r7, #19]
 800453c:	7cbb      	ldrb	r3, [r7, #18]
 800453e:	4313      	orrs	r3, r2
 8004540:	b2db      	uxtb	r3, r3
 8004542:	330a      	adds	r3, #10
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	e00a      	b.n	8004562 <fetch_sprite_pixels+0x186>
 800454c:	f7fe ff34 	bl	80033b8 <lcd_get_context>
 8004550:	4601      	mov	r1, r0
 8004552:	7cfa      	ldrb	r2, [r7, #19]
 8004554:	7cbb      	ldrb	r3, [r7, #18]
 8004556:	4313      	orrs	r3, r2
 8004558:	b2db      	uxtb	r3, r3
 800455a:	3306      	adds	r3, #6
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	685b      	ldr	r3, [r3, #4]
            color = (ppu_get_context()->fetched_entries[i].f_pn) ? 
 8004562:	60bb      	str	r3, [r7, #8]

            if (hi|lo) {
 8004564:	7cfa      	ldrb	r2, [r7, #19]
 8004566:	7cbb      	ldrb	r3, [r7, #18]
 8004568:	4313      	orrs	r3, r2
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d115      	bne.n	800459c <fetch_sprite_pixels+0x1c0>
 8004570:	e004      	b.n	800457c <fetch_sprite_pixels+0x1a0>
            continue;
 8004572:	bf00      	nop
 8004574:	e002      	b.n	800457c <fetch_sprite_pixels+0x1a0>
            continue;
 8004576:	bf00      	nop
 8004578:	e000      	b.n	800457c <fetch_sprite_pixels+0x1a0>
            continue;
 800457a:	bf00      	nop
    for (int i=0; i<ppu_get_context()->fetched_entry_count; i++) {
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	3301      	adds	r3, #1
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	f7ff fd4d 	bl	8004020 <ppu_get_context>
 8004586:	4602      	mov	r2, r0
 8004588:	f242 1318 	movw	r3, #8472	; 0x2118
 800458c:	4413      	add	r3, r2
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	4293      	cmp	r3, r2
 8004596:	f6ff af2b 	blt.w	80043f0 <fetch_sprite_pixels+0x14>
 800459a:	e000      	b.n	800459e <fetch_sprite_pixels+0x1c2>
                break;
 800459c:	bf00      	nop
            }
        }
    }

    return color;
 800459e:	68bb      	ldr	r3, [r7, #8]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3724      	adds	r7, #36	; 0x24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd90      	pop	{r4, r7, pc}

080045a8 <pipeline_fifo_add>:

bool pipeline_fifo_add() {
 80045a8:	b590      	push	{r4, r7, lr}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
    if (ppu_get_context()->pfc.pixel_fifo.size > 8) {
 80045ae:	f7ff fd37 	bl	8004020 <ppu_get_context>
 80045b2:	4602      	mov	r2, r0
 80045b4:	f242 03ac 	movw	r3, #8364	; 0x20ac
 80045b8:	4413      	add	r3, r2
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d901      	bls.n	80045c4 <pipeline_fifo_add+0x1c>
        //fifo is full!
        return false;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e084      	b.n	80046ce <pipeline_fifo_add+0x126>
    }

    int x = ppu_get_context()->pfc.fetch_x - (8 - (lcd_get_context()->scroll_x % 8));
 80045c4:	f7ff fd2c 	bl	8004020 <ppu_get_context>
 80045c8:	4602      	mov	r2, r0
 80045ca:	f242 03b2 	movw	r3, #8370	; 0x20b2
 80045ce:	4413      	add	r3, r2
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	461c      	mov	r4, r3
 80045d4:	f7fe fef0 	bl	80033b8 <lcd_get_context>
 80045d8:	4603      	mov	r3, r0
 80045da:	78db      	ldrb	r3, [r3, #3]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	f1c3 0308 	rsb	r3, r3, #8
 80045e4:	1ae3      	subs	r3, r4, r3
 80045e6:	60fb      	str	r3, [r7, #12]

    for (int i=0; i<8; i++) {
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e06b      	b.n	80046c6 <pipeline_fifo_add+0x11e>
        int bit = 7 - i;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f1c3 0307 	rsb	r3, r3, #7
 80045f4:	60bb      	str	r3, [r7, #8]
        u8 hi = !!(ppu_get_context()->pfc.bgw_fetch_data[1] & (1 << bit));
 80045f6:	f7ff fd13 	bl	8004020 <ppu_get_context>
 80045fa:	4602      	mov	r2, r0
 80045fc:	f242 03b4 	movw	r3, #8372	; 0x20b4
 8004600:	4413      	add	r3, r2
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	fa42 f303 	asr.w	r3, r2, r3
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	71fb      	strb	r3, [r7, #7]
        u8 lo = !!(ppu_get_context()->pfc.bgw_fetch_data[2] & (1 << bit)) << 1;
 800461c:	f7ff fd00 	bl	8004020 <ppu_get_context>
 8004620:	4602      	mov	r2, r0
 8004622:	f242 03b5 	movw	r3, #8373	; 0x20b5
 8004626:	4413      	add	r3, r2
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	fa42 f303 	asr.w	r3, r2, r3
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <pipeline_fifo_add+0x96>
 800463a:	2302      	movs	r3, #2
 800463c:	e000      	b.n	8004640 <pipeline_fifo_add+0x98>
 800463e:	2300      	movs	r3, #0
 8004640:	71bb      	strb	r3, [r7, #6]
        u32 color = lcd_get_context()->bg_colors[hi | lo];
 8004642:	f7fe feb9 	bl	80033b8 <lcd_get_context>
 8004646:	4601      	mov	r1, r0
 8004648:	79fa      	ldrb	r2, [r7, #7]
 800464a:	79bb      	ldrb	r3, [r7, #6]
 800464c:	4313      	orrs	r3, r2
 800464e:	b2db      	uxtb	r3, r3
 8004650:	3302      	adds	r3, #2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	613b      	str	r3, [r7, #16]

        if (!LCDC_BGW_ENABLE) {
 800465a:	f7fe fead 	bl	80033b8 <lcd_get_context>
 800465e:	4603      	mov	r3, r0
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d104      	bne.n	8004674 <pipeline_fifo_add+0xcc>
            color = lcd_get_context()->bg_colors[0];
 800466a:	f7fe fea5 	bl	80033b8 <lcd_get_context>
 800466e:	4603      	mov	r3, r0
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	613b      	str	r3, [r7, #16]
        }

        if (LCDC_OBJ_ENABLE) {
 8004674:	f7fe fea0 	bl	80033b8 <lcd_get_context>
 8004678:	4603      	mov	r3, r0
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <pipeline_fifo_add+0xf0>
            color = fetch_sprite_pixels(bit, color, hi | lo);
 8004684:	79fa      	ldrb	r2, [r7, #7]
 8004686:	79bb      	ldrb	r3, [r7, #6]
 8004688:	4313      	orrs	r3, r2
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	6939      	ldr	r1, [r7, #16]
 8004690:	68b8      	ldr	r0, [r7, #8]
 8004692:	f7ff fea3 	bl	80043dc <fetch_sprite_pixels>
 8004696:	6138      	str	r0, [r7, #16]
        }

        if (x >= 0) {
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	db10      	blt.n	80046c0 <pipeline_fifo_add+0x118>
            pixel_fifo_push(color);
 800469e:	6938      	ldr	r0, [r7, #16]
 80046a0:	f7ff fe0a 	bl	80042b8 <pixel_fifo_push>
            ppu_get_context()->pfc.fifo_x++;
 80046a4:	f7ff fcbc 	bl	8004020 <ppu_get_context>
 80046a8:	4602      	mov	r2, r0
 80046aa:	f242 03bf 	movw	r3, #8383	; 0x20bf
 80046ae:	4413      	add	r3, r2
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	b2d9      	uxtb	r1, r3
 80046b6:	f242 03bf 	movw	r3, #8383	; 0x20bf
 80046ba:	4413      	add	r3, r2
 80046bc:	460a      	mov	r2, r1
 80046be:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<8; i++) {
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3301      	adds	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b07      	cmp	r3, #7
 80046ca:	dd90      	ble.n	80045ee <pipeline_fifo_add+0x46>
        }
    }

    return true;
 80046cc:	2301      	movs	r3, #1
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd90      	pop	{r4, r7, pc}

080046d6 <pipeline_load_sprite_tile>:

void pipeline_load_sprite_tile() {
 80046d6:	b590      	push	{r4, r7, lr}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
    oam_line_entry *le = ppu_get_context()->line_sprites;
 80046dc:	f7ff fca0 	bl	8004020 <ppu_get_context>
 80046e0:	4602      	mov	r2, r0
 80046e2:	f242 03c4 	movw	r3, #8388	; 0x20c4
 80046e6:	4413      	add	r3, r2
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	607b      	str	r3, [r7, #4]

    while(le) {
 80046ec:	e060      	b.n	80047b0 <pipeline_load_sprite_tile+0xda>
        int sp_x = (le->entry.x - 8) + (lcd_get_context()->scroll_x % 8);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	785b      	ldrb	r3, [r3, #1]
 80046f2:	f1a3 0408 	sub.w	r4, r3, #8
 80046f6:	f7fe fe5f 	bl	80033b8 <lcd_get_context>
 80046fa:	4603      	mov	r3, r0
 80046fc:	78db      	ldrb	r3, [r3, #3]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	4423      	add	r3, r4
 8004704:	603b      	str	r3, [r7, #0]

        if ((sp_x >= ppu_get_context()->pfc.fetch_x && sp_x < ppu_get_context()->pfc.fetch_x + 8) ||
 8004706:	f7ff fc8b 	bl	8004020 <ppu_get_context>
 800470a:	4602      	mov	r2, r0
 800470c:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004710:	4413      	add	r3, r2
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	4293      	cmp	r3, r2
 800471a:	db0a      	blt.n	8004732 <pipeline_load_sprite_tile+0x5c>
 800471c:	f7ff fc80 	bl	8004020 <ppu_get_context>
 8004720:	4602      	mov	r2, r0
 8004722:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004726:	4413      	add	r3, r2
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	3307      	adds	r3, #7
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	dd16      	ble.n	8004760 <pipeline_load_sprite_tile+0x8a>
            ((sp_x + 8) >= ppu_get_context()->pfc.fetch_x && (sp_x + 8) < ppu_get_context()->pfc.fetch_x + 8)) {
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	f103 0408 	add.w	r4, r3, #8
 8004738:	f7ff fc72 	bl	8004020 <ppu_get_context>
 800473c:	4602      	mov	r2, r0
 800473e:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004742:	4413      	add	r3, r2
 8004744:	781b      	ldrb	r3, [r3, #0]
        if ((sp_x >= ppu_get_context()->pfc.fetch_x && sp_x < ppu_get_context()->pfc.fetch_x + 8) ||
 8004746:	429c      	cmp	r4, r3
 8004748:	db23      	blt.n	8004792 <pipeline_load_sprite_tile+0xbc>
            ((sp_x + 8) >= ppu_get_context()->pfc.fetch_x && (sp_x + 8) < ppu_get_context()->pfc.fetch_x + 8)) {
 800474a:	f7ff fc69 	bl	8004020 <ppu_get_context>
 800474e:	4602      	mov	r2, r0
 8004750:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004754:	4413      	add	r3, r2
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	4293      	cmp	r3, r2
 800475e:	da18      	bge.n	8004792 <pipeline_load_sprite_tile+0xbc>
            //need to add entry
            ppu_get_context()->fetched_entries[ppu_get_context()->fetched_entry_count++] = le->entry;
 8004760:	f7ff fc5e 	bl	8004020 <ppu_get_context>
 8004764:	4604      	mov	r4, r0
 8004766:	f7ff fc5b 	bl	8004020 <ppu_get_context>
 800476a:	4602      	mov	r2, r0
 800476c:	f242 1318 	movw	r3, #8472	; 0x2118
 8004770:	4413      	add	r3, r2
 8004772:	7819      	ldrb	r1, [r3, #0]
 8004774:	1c4b      	adds	r3, r1, #1
 8004776:	b2d8      	uxtb	r0, r3
 8004778:	f242 1318 	movw	r3, #8472	; 0x2118
 800477c:	4413      	add	r3, r2
 800477e:	4602      	mov	r2, r0
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	460b      	mov	r3, r1
 8004784:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4423      	add	r3, r4
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	605a      	str	r2, [r3, #4]
        }

        le = le->next;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	607b      	str	r3, [r7, #4]

        if (!le || ppu_get_context()->fetched_entry_count >= 3) {
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00b      	beq.n	80047b6 <pipeline_load_sprite_tile+0xe0>
 800479e:	f7ff fc3f 	bl	8004020 <ppu_get_context>
 80047a2:	4602      	mov	r2, r0
 80047a4:	f242 1318 	movw	r3, #8472	; 0x2118
 80047a8:	4413      	add	r3, r2
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d802      	bhi.n	80047b6 <pipeline_load_sprite_tile+0xe0>
    while(le) {
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d19b      	bne.n	80046ee <pipeline_load_sprite_tile+0x18>
            //max checking 3 sprites on pixels
            break;
        }
    }
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd90      	pop	{r4, r7, pc}

080047be <pipeline_load_sprite_data>:

void pipeline_load_sprite_data(u8 offset) {
 80047be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047c0:	b087      	sub	sp, #28
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	4603      	mov	r3, r0
 80047c6:	71fb      	strb	r3, [r7, #7]
    int cur_y = lcd_get_context()->ly;
 80047c8:	f7fe fdf6 	bl	80033b8 <lcd_get_context>
 80047cc:	4603      	mov	r3, r0
 80047ce:	791b      	ldrb	r3, [r3, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
    u8 sprite_height = LCDC_OBJ_HEIGHT;
 80047d2:	f7fe fdf1 	bl	80033b8 <lcd_get_context>
 80047d6:	4603      	mov	r3, r0
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <pipeline_load_sprite_data+0x28>
 80047e2:	2310      	movs	r3, #16
 80047e4:	e000      	b.n	80047e8 <pipeline_load_sprite_data+0x2a>
 80047e6:	2308      	movs	r3, #8
 80047e8:	72fb      	strb	r3, [r7, #11]

    for (int i=0; i<ppu_get_context()->fetched_entry_count; i++) {
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e059      	b.n	80048a4 <pipeline_load_sprite_data+0xe6>
        u8 ty = ((cur_y + 16) - ppu_get_context()->fetched_entries[i].y) * 2;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f103 0410 	add.w	r4, r3, #16
 80047f6:	f7ff fc13 	bl	8004020 <ppu_get_context>
 80047fa:	4602      	mov	r2, r0
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	791b      	ldrb	r3, [r3, #4]
 8004808:	1ae3      	subs	r3, r4, r3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	74fb      	strb	r3, [r7, #19]

        if (ppu_get_context()->fetched_entries[i].f_y_flip) {
 8004810:	f7ff fc06 	bl	8004020 <ppu_get_context>
 8004814:	4602      	mov	r2, r0
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f603 0346 	addw	r3, r3, #2118	; 0x846
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	79db      	ldrb	r3, [r3, #7]
 8004822:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <pipeline_load_sprite_data+0x7e>
            //flipped upside down...
            ty = ((sprite_height * 2) - 2) - ty;
 800482c:	7afb      	ldrb	r3, [r7, #11]
 800482e:	3b01      	subs	r3, #1
 8004830:	b2db      	uxtb	r3, r3
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	b2da      	uxtb	r2, r3
 8004836:	7cfb      	ldrb	r3, [r7, #19]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	74fb      	strb	r3, [r7, #19]
        }

        u8 tile_index = ppu_get_context()->fetched_entries[i].tile;
 800483c:	f7ff fbf0 	bl	8004020 <ppu_get_context>
 8004840:	4602      	mov	r2, r0
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f603 0346 	addw	r3, r3, #2118	; 0x846
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	799b      	ldrb	r3, [r3, #6]
 800484e:	74bb      	strb	r3, [r7, #18]

        if (sprite_height == 16) {
 8004850:	7afb      	ldrb	r3, [r7, #11]
 8004852:	2b10      	cmp	r3, #16
 8004854:	d103      	bne.n	800485e <pipeline_load_sprite_data+0xa0>
            tile_index &= ~(1); //remove last bit...
 8004856:	7cbb      	ldrb	r3, [r7, #18]
 8004858:	f023 0301 	bic.w	r3, r3, #1
 800485c:	74bb      	strb	r3, [r7, #18]
        }

        ppu_get_context()->pfc.fetch_entry_data[(i * 2) + offset] = 
            bus_read(0x8000 + (tile_index * 16) + ty + offset);
 800485e:	7cbb      	ldrb	r3, [r7, #18]
 8004860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004864:	b29b      	uxth	r3, r3
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	b29a      	uxth	r2, r3
 800486a:	7cfb      	ldrb	r3, [r7, #19]
 800486c:	b29b      	uxth	r3, r3
 800486e:	4413      	add	r3, r2
 8004870:	b29a      	uxth	r2, r3
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	b29b      	uxth	r3, r3
 8004876:	4413      	add	r3, r2
 8004878:	b29e      	uxth	r6, r3
        ppu_get_context()->pfc.fetch_entry_data[(i * 2) + offset] = 
 800487a:	f7ff fbd1 	bl	8004020 <ppu_get_context>
 800487e:	4605      	mov	r5, r0
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	005a      	lsls	r2, r3, #1
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	18d4      	adds	r4, r2, r3
            bus_read(0x8000 + (tile_index * 16) + ty + offset);
 8004888:	4630      	mov	r0, r6
 800488a:	f7fb fea5 	bl	80005d8 <bus_read>
 800488e:	4603      	mov	r3, r0
 8004890:	4619      	mov	r1, r3
        ppu_get_context()->pfc.fetch_entry_data[(i * 2) + offset] = 
 8004892:	192a      	adds	r2, r5, r4
 8004894:	f242 03b6 	movw	r3, #8374	; 0x20b6
 8004898:	4413      	add	r3, r2
 800489a:	460a      	mov	r2, r1
 800489c:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<ppu_get_context()->fetched_entry_count; i++) {
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	3301      	adds	r3, #1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	f7ff fbbc 	bl	8004020 <ppu_get_context>
 80048a8:	4602      	mov	r2, r0
 80048aa:	f242 1318 	movw	r3, #8472	; 0x2118
 80048ae:	4413      	add	r3, r2
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	4293      	cmp	r3, r2
 80048b8:	db9a      	blt.n	80047f0 <pipeline_load_sprite_data+0x32>
    }
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048c4 <pipeline_load_window_tile>:

void pipeline_load_window_tile() {
 80048c4:	b5b0      	push	{r4, r5, r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
    if (!window_visible()) {
 80048ca:	f7ff fcd1 	bl	8004270 <window_visible>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f083 0301 	eor.w	r3, r3, #1
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f040 8088 	bne.w	80049ec <pipeline_load_window_tile+0x128>
        return;
    }
    
    u8 window_y = lcd_get_context()->win_y;
 80048dc:	f7fe fd6c 	bl	80033b8 <lcd_get_context>
 80048e0:	4603      	mov	r3, r0
 80048e2:	7a9b      	ldrb	r3, [r3, #10]
 80048e4:	71fb      	strb	r3, [r7, #7]

    if (ppu_get_context()->pfc.fetch_x + 7 >= lcd_get_context()->win_x &&
 80048e6:	f7ff fb9b 	bl	8004020 <ppu_get_context>
 80048ea:	4602      	mov	r2, r0
 80048ec:	f242 03b2 	movw	r3, #8370	; 0x20b2
 80048f0:	4413      	add	r3, r2
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	1ddc      	adds	r4, r3, #7
 80048f6:	f7fe fd5f 	bl	80033b8 <lcd_get_context>
 80048fa:	4603      	mov	r3, r0
 80048fc:	7adb      	ldrb	r3, [r3, #11]
 80048fe:	429c      	cmp	r4, r3
 8004900:	db75      	blt.n	80049ee <pipeline_load_window_tile+0x12a>
            ppu_get_context()->pfc.fetch_x + 7 < lcd_get_context()->win_x + YRES + 14) {
 8004902:	f7fe fd59 	bl	80033b8 <lcd_get_context>
 8004906:	4603      	mov	r3, r0
 8004908:	7adb      	ldrb	r3, [r3, #11]
 800490a:	461a      	mov	r2, r3
 800490c:	2390      	movs	r3, #144	; 0x90
 800490e:	4413      	add	r3, r2
 8004910:	1d9c      	adds	r4, r3, #6
 8004912:	f7ff fb85 	bl	8004020 <ppu_get_context>
 8004916:	4602      	mov	r2, r0
 8004918:	f242 03b2 	movw	r3, #8370	; 0x20b2
 800491c:	4413      	add	r3, r2
 800491e:	781b      	ldrb	r3, [r3, #0]
    if (ppu_get_context()->pfc.fetch_x + 7 >= lcd_get_context()->win_x &&
 8004920:	429c      	cmp	r4, r3
 8004922:	db64      	blt.n	80049ee <pipeline_load_window_tile+0x12a>
        if (lcd_get_context()->ly >= window_y && lcd_get_context()->ly < window_y + XRES) {
 8004924:	f7fe fd48 	bl	80033b8 <lcd_get_context>
 8004928:	4603      	mov	r3, r0
 800492a:	791b      	ldrb	r3, [r3, #4]
 800492c:	79fa      	ldrb	r2, [r7, #7]
 800492e:	429a      	cmp	r2, r3
 8004930:	d85d      	bhi.n	80049ee <pipeline_load_window_tile+0x12a>
 8004932:	f7fe fd41 	bl	80033b8 <lcd_get_context>
 8004936:	4603      	mov	r3, r0
 8004938:	791b      	ldrb	r3, [r3, #4]
 800493a:	4619      	mov	r1, r3
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	22a0      	movs	r2, #160	; 0xa0
 8004940:	4413      	add	r3, r2
 8004942:	4299      	cmp	r1, r3
 8004944:	da53      	bge.n	80049ee <pipeline_load_window_tile+0x12a>
            u8 w_tile_y = ppu_get_context()->window_line / 8;
 8004946:	f7ff fb6b 	bl	8004020 <ppu_get_context>
 800494a:	4602      	mov	r2, r0
 800494c:	f242 1328 	movw	r3, #8488	; 0x2128
 8004950:	4413      	add	r3, r2
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	08db      	lsrs	r3, r3, #3
 8004956:	71bb      	strb	r3, [r7, #6]

            ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_WIN_MAP_AREA + 
 8004958:	f7fe fd2e 	bl	80033b8 <lcd_get_context>
 800495c:	4603      	mov	r3, r0
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <pipeline_load_window_tile+0xaa>
 8004968:	f44f 441c 	mov.w	r4, #39936	; 0x9c00
 800496c:	e001      	b.n	8004972 <pipeline_load_window_tile+0xae>
 800496e:	f44f 4418 	mov.w	r4, #38912	; 0x9800
                ((ppu_get_context()->pfc.fetch_x + 7 - lcd_get_context()->win_x) / 8) +
 8004972:	f7ff fb55 	bl	8004020 <ppu_get_context>
 8004976:	4602      	mov	r2, r0
 8004978:	f242 03b2 	movw	r3, #8370	; 0x20b2
 800497c:	4413      	add	r3, r2
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	1ddd      	adds	r5, r3, #7
 8004982:	f7fe fd19 	bl	80033b8 <lcd_get_context>
 8004986:	4603      	mov	r3, r0
 8004988:	7adb      	ldrb	r3, [r3, #11]
 800498a:	1aeb      	subs	r3, r5, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	da00      	bge.n	8004992 <pipeline_load_window_tile+0xce>
 8004990:	3307      	adds	r3, #7
 8004992:	10db      	asrs	r3, r3, #3
            ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_WIN_MAP_AREA + 
 8004994:	b29b      	uxth	r3, r3
 8004996:	4423      	add	r3, r4
 8004998:	b29a      	uxth	r2, r3
 800499a:	79bb      	ldrb	r3, [r7, #6]
 800499c:	b29b      	uxth	r3, r3
 800499e:	015b      	lsls	r3, r3, #5
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	b29d      	uxth	r5, r3
 80049a6:	f7ff fb3b 	bl	8004020 <ppu_get_context>
 80049aa:	4604      	mov	r4, r0
 80049ac:	4628      	mov	r0, r5
 80049ae:	f7fb fe13 	bl	80005d8 <bus_read>
 80049b2:	4603      	mov	r3, r0
 80049b4:	461a      	mov	r2, r3
 80049b6:	f242 03b3 	movw	r3, #8371	; 0x20b3
 80049ba:	4423      	add	r3, r4
 80049bc:	701a      	strb	r2, [r3, #0]
                (w_tile_y * 32));

            if (LCDC_BGW_DATA_AREA == 0x8800) {
 80049be:	f7fe fcfb 	bl	80033b8 <lcd_get_context>
 80049c2:	4603      	mov	r3, r0
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10f      	bne.n	80049ee <pipeline_load_window_tile+0x12a>
                ppu_get_context()->pfc.bgw_fetch_data[0] += 128;
 80049ce:	f7ff fb27 	bl	8004020 <ppu_get_context>
 80049d2:	4602      	mov	r2, r0
 80049d4:	f242 03b3 	movw	r3, #8371	; 0x20b3
 80049d8:	4413      	add	r3, r2
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	3b80      	subs	r3, #128	; 0x80
 80049de:	b2d9      	uxtb	r1, r3
 80049e0:	f242 03b3 	movw	r3, #8371	; 0x20b3
 80049e4:	4413      	add	r3, r2
 80049e6:	460a      	mov	r2, r1
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	e000      	b.n	80049ee <pipeline_load_window_tile+0x12a>
        return;
 80049ec:	bf00      	nop
            }
        }
    }
}
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bdb0      	pop	{r4, r5, r7, pc}

080049f4 <pipeline_fetch>:

void pipeline_fetch() {
 80049f4:	b5b0      	push	{r4, r5, r7, lr}
 80049f6:	af00      	add	r7, sp, #0
    switch(ppu_get_context()->pfc.cur_fetch_state) {
 80049f8:	f7ff fb12 	bl	8004020 <ppu_get_context>
 80049fc:	4602      	mov	r2, r0
 80049fe:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004a02:	4413      	add	r3, r2
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	f200 8122 	bhi.w	8004c50 <pipeline_fetch+0x25c>
 8004a0c:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <pipeline_fetch+0x20>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a29 	.word	0x08004a29
 8004a18:	08004b33 	.word	0x08004b33
 8004a1c:	08004ba9 	.word	0x08004ba9
 8004a20:	08004c23 	.word	0x08004c23
 8004a24:	08004c35 	.word	0x08004c35
        case FS_TILE: {
            ppu_get_context()->fetched_entry_count = 0;
 8004a28:	f7ff fafa 	bl	8004020 <ppu_get_context>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	f242 1318 	movw	r3, #8472	; 0x2118
 8004a32:	4413      	add	r3, r2
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]

            if (LCDC_BGW_ENABLE) {
 8004a38:	f7fe fcbe 	bl	80033b8 <lcd_get_context>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d04a      	beq.n	8004ade <pipeline_fetch+0xea>
                ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_BG_MAP_AREA + 
 8004a48:	f7fe fcb6 	bl	80033b8 <lcd_get_context>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <pipeline_fetch+0x6a>
 8004a58:	f44f 441c 	mov.w	r4, #39936	; 0x9c00
 8004a5c:	e001      	b.n	8004a62 <pipeline_fetch+0x6e>
 8004a5e:	f44f 4418 	mov.w	r4, #38912	; 0x9800
                    (ppu_get_context()->pfc.map_x / 8) + 
 8004a62:	f7ff fadd 	bl	8004020 <ppu_get_context>
 8004a66:	4602      	mov	r2, r0
 8004a68:	f242 03bd 	movw	r3, #8381	; 0x20bd
 8004a6c:	4413      	add	r3, r2
 8004a6e:	781b      	ldrb	r3, [r3, #0]
                ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_BG_MAP_AREA + 
 8004a70:	08db      	lsrs	r3, r3, #3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4423      	add	r3, r4
 8004a78:	b29c      	uxth	r4, r3
                    (((ppu_get_context()->pfc.map_y / 8)) * 32));
 8004a7a:	f7ff fad1 	bl	8004020 <ppu_get_context>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	f242 03bc 	movw	r3, #8380	; 0x20bc
 8004a84:	4413      	add	r3, r2
 8004a86:	781b      	ldrb	r3, [r3, #0]
                ppu_get_context()->pfc.bgw_fetch_data[0] = bus_read(LCDC_BG_MAP_AREA + 
 8004a88:	08db      	lsrs	r3, r3, #3
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	015b      	lsls	r3, r3, #5
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	4423      	add	r3, r4
 8004a94:	b29d      	uxth	r5, r3
 8004a96:	f7ff fac3 	bl	8004020 <ppu_get_context>
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f7fb fd9b 	bl	80005d8 <bus_read>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004aaa:	4423      	add	r3, r4
 8004aac:	701a      	strb	r2, [r3, #0]
            
                if (LCDC_BGW_DATA_AREA == 0x8800) {
 8004aae:	f7fe fc83 	bl	80033b8 <lcd_get_context>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	f003 0310 	and.w	r3, r3, #16
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10d      	bne.n	8004ada <pipeline_fetch+0xe6>
                    ppu_get_context()->pfc.bgw_fetch_data[0] += 128;
 8004abe:	f7ff faaf 	bl	8004020 <ppu_get_context>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004ac8:	4413      	add	r3, r2
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	3b80      	subs	r3, #128	; 0x80
 8004ace:	b2d9      	uxtb	r1, r3
 8004ad0:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	460a      	mov	r2, r1
 8004ad8:	701a      	strb	r2, [r3, #0]
                }

                pipeline_load_window_tile();
 8004ada:	f7ff fef3 	bl	80048c4 <pipeline_load_window_tile>
            }

            if (LCDC_OBJ_ENABLE && ppu_get_context()->line_sprites) {
 8004ade:	f7fe fc6b 	bl	80033b8 <lcd_get_context>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <pipeline_fetch+0x110>
 8004aee:	f7ff fa97 	bl	8004020 <ppu_get_context>
 8004af2:	4602      	mov	r2, r0
 8004af4:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004af8:	4413      	add	r3, r2
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <pipeline_fetch+0x110>
                pipeline_load_sprite_tile();
 8004b00:	f7ff fde9 	bl	80046d6 <pipeline_load_sprite_tile>
            }

            ppu_get_context()->pfc.cur_fetch_state = FS_DATA0;
 8004b04:	f7ff fa8c 	bl	8004020 <ppu_get_context>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004b0e:	4413      	add	r3, r2
 8004b10:	2201      	movs	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]
            ppu_get_context()->pfc.fetch_x += 8;
 8004b14:	f7ff fa84 	bl	8004020 <ppu_get_context>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004b1e:	4413      	add	r3, r2
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	3308      	adds	r3, #8
 8004b24:	b2d9      	uxtb	r1, r3
 8004b26:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	460a      	mov	r2, r1
 8004b2e:	701a      	strb	r2, [r3, #0]
        } break;
 8004b30:	e08e      	b.n	8004c50 <pipeline_fetch+0x25c>

        case FS_DATA0: {
            ppu_get_context()->pfc.bgw_fetch_data[1] = bus_read(LCDC_BGW_DATA_AREA +
 8004b32:	f7fe fc41 	bl	80033b8 <lcd_get_context>
 8004b36:	4603      	mov	r3, r0
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <pipeline_fetch+0x154>
 8004b42:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8004b46:	e001      	b.n	8004b4c <pipeline_fetch+0x158>
 8004b48:	f44f 4408 	mov.w	r4, #34816	; 0x8800
                (ppu_get_context()->pfc.bgw_fetch_data[0] * 16) + 
 8004b4c:	f7ff fa68 	bl	8004020 <ppu_get_context>
 8004b50:	4602      	mov	r2, r0
 8004b52:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004b56:	4413      	add	r3, r2
 8004b58:	781b      	ldrb	r3, [r3, #0]
            ppu_get_context()->pfc.bgw_fetch_data[1] = bus_read(LCDC_BGW_DATA_AREA +
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	4423      	add	r3, r4
 8004b62:	b29c      	uxth	r4, r3
                ppu_get_context()->pfc.tile_y);
 8004b64:	f7ff fa5c 	bl	8004020 <ppu_get_context>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	f242 03be 	movw	r3, #8382	; 0x20be
 8004b6e:	4413      	add	r3, r2
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
            ppu_get_context()->pfc.bgw_fetch_data[1] = bus_read(LCDC_BGW_DATA_AREA +
 8004b74:	4423      	add	r3, r4
 8004b76:	b29d      	uxth	r5, r3
 8004b78:	f7ff fa52 	bl	8004020 <ppu_get_context>
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	4628      	mov	r0, r5
 8004b80:	f7fb fd2a 	bl	80005d8 <bus_read>
 8004b84:	4603      	mov	r3, r0
 8004b86:	461a      	mov	r2, r3
 8004b88:	f242 03b4 	movw	r3, #8372	; 0x20b4
 8004b8c:	4423      	add	r3, r4
 8004b8e:	701a      	strb	r2, [r3, #0]

            pipeline_load_sprite_data(0);
 8004b90:	2000      	movs	r0, #0
 8004b92:	f7ff fe14 	bl	80047be <pipeline_load_sprite_data>

            ppu_get_context()->pfc.cur_fetch_state = FS_DATA1;
 8004b96:	f7ff fa43 	bl	8004020 <ppu_get_context>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004ba0:	4413      	add	r3, r2
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	701a      	strb	r2, [r3, #0]
        } break;
 8004ba6:	e053      	b.n	8004c50 <pipeline_fetch+0x25c>

        case FS_DATA1: {
            ppu_get_context()->pfc.bgw_fetch_data[2] = bus_read(LCDC_BGW_DATA_AREA +
 8004ba8:	f7fe fc06 	bl	80033b8 <lcd_get_context>
 8004bac:	4603      	mov	r3, r0
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <pipeline_fetch+0x1ca>
 8004bb8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8004bbc:	e001      	b.n	8004bc2 <pipeline_fetch+0x1ce>
 8004bbe:	f44f 4408 	mov.w	r4, #34816	; 0x8800
                (ppu_get_context()->pfc.bgw_fetch_data[0] * 16) + 
 8004bc2:	f7ff fa2d 	bl	8004020 <ppu_get_context>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	f242 03b3 	movw	r3, #8371	; 0x20b3
 8004bcc:	4413      	add	r3, r2
 8004bce:	781b      	ldrb	r3, [r3, #0]
            ppu_get_context()->pfc.bgw_fetch_data[2] = bus_read(LCDC_BGW_DATA_AREA +
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4423      	add	r3, r4
 8004bd8:	b29c      	uxth	r4, r3
                ppu_get_context()->pfc.tile_y + 1);
 8004bda:	f7ff fa21 	bl	8004020 <ppu_get_context>
 8004bde:	4602      	mov	r2, r0
 8004be0:	f242 03be 	movw	r3, #8382	; 0x20be
 8004be4:	4413      	add	r3, r2
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	b29b      	uxth	r3, r3
                (ppu_get_context()->pfc.bgw_fetch_data[0] * 16) + 
 8004bea:	4423      	add	r3, r4
 8004bec:	b29b      	uxth	r3, r3
            ppu_get_context()->pfc.bgw_fetch_data[2] = bus_read(LCDC_BGW_DATA_AREA +
 8004bee:	3301      	adds	r3, #1
 8004bf0:	b29d      	uxth	r5, r3
 8004bf2:	f7ff fa15 	bl	8004020 <ppu_get_context>
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f7fb fced 	bl	80005d8 <bus_read>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	461a      	mov	r2, r3
 8004c02:	f242 03b5 	movw	r3, #8373	; 0x20b5
 8004c06:	4423      	add	r3, r4
 8004c08:	701a      	strb	r2, [r3, #0]

            pipeline_load_sprite_data(1);
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	f7ff fdd7 	bl	80047be <pipeline_load_sprite_data>

            ppu_get_context()->pfc.cur_fetch_state = FS_IDLE;
 8004c10:	f7ff fa06 	bl	8004020 <ppu_get_context>
 8004c14:	4602      	mov	r2, r0
 8004c16:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004c1a:	4413      	add	r3, r2
 8004c1c:	2203      	movs	r2, #3
 8004c1e:	701a      	strb	r2, [r3, #0]

        } break;
 8004c20:	e016      	b.n	8004c50 <pipeline_fetch+0x25c>

        case FS_IDLE: {
            ppu_get_context()->pfc.cur_fetch_state = FS_PUSH;
 8004c22:	f7ff f9fd 	bl	8004020 <ppu_get_context>
 8004c26:	4602      	mov	r2, r0
 8004c28:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004c2c:	4413      	add	r3, r2
 8004c2e:	2204      	movs	r2, #4
 8004c30:	701a      	strb	r2, [r3, #0]
        } break;
 8004c32:	e00d      	b.n	8004c50 <pipeline_fetch+0x25c>

        case FS_PUSH: {
            if (pipeline_fifo_add()) {
 8004c34:	f7ff fcb8 	bl	80045a8 <pipeline_fifo_add>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <pipeline_fetch+0x25a>
                ppu_get_context()->pfc.cur_fetch_state = FS_TILE;
 8004c3e:	f7ff f9ef 	bl	8004020 <ppu_get_context>
 8004c42:	4602      	mov	r2, r0
 8004c44:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8004c48:	4413      	add	r3, r2
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
            }

        } break;
 8004c4e:	bf00      	nop

    }
}
 8004c50:	bf00      	nop
 8004c52:	bdb0      	pop	{r4, r5, r7, pc}

08004c54 <pipeline_push_pixel>:

void pipeline_push_pixel() {
 8004c54:	b5b0      	push	{r4, r5, r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
    if (ppu_get_context()->pfc.pixel_fifo.size > 8) {
 8004c5a:	f7ff f9e1 	bl	8004020 <ppu_get_context>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8004c64:	4413      	add	r3, r2
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d94a      	bls.n	8004d02 <pipeline_push_pixel+0xae>
        u32 pixel_data = pixel_fifo_pop();
 8004c6c:	f7ff fb72 	bl	8004354 <pixel_fifo_pop>
 8004c70:	6078      	str	r0, [r7, #4]

        if (ppu_get_context()->pfc.line_x >= (lcd_get_context()->scroll_x % 8)) {
 8004c72:	f7ff f9d5 	bl	8004020 <ppu_get_context>
 8004c76:	4602      	mov	r2, r0
 8004c78:	f242 03b0 	movw	r3, #8368	; 0x20b0
 8004c7c:	4413      	add	r3, r2
 8004c7e:	781c      	ldrb	r4, [r3, #0]
 8004c80:	f7fe fb9a 	bl	80033b8 <lcd_get_context>
 8004c84:	4603      	mov	r3, r0
 8004c86:	78db      	ldrb	r3, [r3, #3]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	429c      	cmp	r4, r3
 8004c90:	d329      	bcc.n	8004ce6 <pipeline_push_pixel+0x92>
            ppu_get_context()->video_buffer[ppu_get_context()->pfc.pushed_x + 
 8004c92:	f7ff f9c5 	bl	8004020 <ppu_get_context>
 8004c96:	4602      	mov	r2, r0
 8004c98:	f242 1334 	movw	r3, #8500	; 0x2134
 8004c9c:	4413      	add	r3, r2
 8004c9e:	681c      	ldr	r4, [r3, #0]
 8004ca0:	f7ff f9be 	bl	8004020 <ppu_get_context>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	f242 03b1 	movw	r3, #8369	; 0x20b1
 8004caa:	4413      	add	r3, r2
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	461d      	mov	r5, r3
                (lcd_get_context()->ly * XRES)] = pixel_data;
 8004cb0:	f7fe fb82 	bl	80033b8 <lcd_get_context>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	791b      	ldrb	r3, [r3, #4]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	23a0      	movs	r3, #160	; 0xa0
 8004cbc:	fb03 f302 	mul.w	r3, r3, r2
            ppu_get_context()->video_buffer[ppu_get_context()->pfc.pushed_x + 
 8004cc0:	442b      	add	r3, r5
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4423      	add	r3, r4
                (lcd_get_context()->ly * XRES)] = pixel_data;
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	601a      	str	r2, [r3, #0]

            ppu_get_context()->pfc.pushed_x++;
 8004cca:	f7ff f9a9 	bl	8004020 <ppu_get_context>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	f242 03b1 	movw	r3, #8369	; 0x20b1
 8004cd4:	4413      	add	r3, r2
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	b2d9      	uxtb	r1, r3
 8004cdc:	f242 03b1 	movw	r3, #8369	; 0x20b1
 8004ce0:	4413      	add	r3, r2
 8004ce2:	460a      	mov	r2, r1
 8004ce4:	701a      	strb	r2, [r3, #0]
        }

        ppu_get_context()->pfc.line_x++;
 8004ce6:	f7ff f99b 	bl	8004020 <ppu_get_context>
 8004cea:	4602      	mov	r2, r0
 8004cec:	f242 03b0 	movw	r3, #8368	; 0x20b0
 8004cf0:	4413      	add	r3, r2
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	b2d9      	uxtb	r1, r3
 8004cf8:	f242 03b0 	movw	r3, #8368	; 0x20b0
 8004cfc:	4413      	add	r3, r2
 8004cfe:	460a      	mov	r2, r1
 8004d00:	701a      	strb	r2, [r3, #0]
    }
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bdb0      	pop	{r4, r5, r7, pc}

08004d0a <pipeline_process>:

void pipeline_process() {
 8004d0a:	b5b0      	push	{r4, r5, r7, lr}
 8004d0c:	af00      	add	r7, sp, #0
    ppu_get_context()->pfc.map_y = (lcd_get_context()->ly + lcd_get_context()->scroll_y);
 8004d0e:	f7fe fb53 	bl	80033b8 <lcd_get_context>
 8004d12:	4603      	mov	r3, r0
 8004d14:	791d      	ldrb	r5, [r3, #4]
 8004d16:	f7fe fb4f 	bl	80033b8 <lcd_get_context>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	789c      	ldrb	r4, [r3, #2]
 8004d1e:	f7ff f97f 	bl	8004020 <ppu_get_context>
 8004d22:	4602      	mov	r2, r0
 8004d24:	192b      	adds	r3, r5, r4
 8004d26:	b2d9      	uxtb	r1, r3
 8004d28:	f242 03bc 	movw	r3, #8380	; 0x20bc
 8004d2c:	4413      	add	r3, r2
 8004d2e:	460a      	mov	r2, r1
 8004d30:	701a      	strb	r2, [r3, #0]
    ppu_get_context()->pfc.map_x = (ppu_get_context()->pfc.fetch_x + lcd_get_context()->scroll_x);
 8004d32:	f7ff f975 	bl	8004020 <ppu_get_context>
 8004d36:	4602      	mov	r2, r0
 8004d38:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	781d      	ldrb	r5, [r3, #0]
 8004d40:	f7fe fb3a 	bl	80033b8 <lcd_get_context>
 8004d44:	4603      	mov	r3, r0
 8004d46:	78dc      	ldrb	r4, [r3, #3]
 8004d48:	f7ff f96a 	bl	8004020 <ppu_get_context>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	192b      	adds	r3, r5, r4
 8004d50:	b2d9      	uxtb	r1, r3
 8004d52:	f242 03bd 	movw	r3, #8381	; 0x20bd
 8004d56:	4413      	add	r3, r2
 8004d58:	460a      	mov	r2, r1
 8004d5a:	701a      	strb	r2, [r3, #0]
    ppu_get_context()->pfc.tile_y = ((lcd_get_context()->ly + lcd_get_context()->scroll_y) % 8) * 2;
 8004d5c:	f7fe fb2c 	bl	80033b8 <lcd_get_context>
 8004d60:	4603      	mov	r3, r0
 8004d62:	791c      	ldrb	r4, [r3, #4]
 8004d64:	f7fe fb28 	bl	80033b8 <lcd_get_context>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	789b      	ldrb	r3, [r3, #2]
 8004d6c:	4423      	add	r3, r4
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	b2dc      	uxtb	r4, r3
 8004d76:	f7ff f953 	bl	8004020 <ppu_get_context>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	0063      	lsls	r3, r4, #1
 8004d7e:	b2d9      	uxtb	r1, r3
 8004d80:	f242 03be 	movw	r3, #8382	; 0x20be
 8004d84:	4413      	add	r3, r2
 8004d86:	460a      	mov	r2, r1
 8004d88:	701a      	strb	r2, [r3, #0]

    if (!(ppu_get_context()->line_ticks & 1)) {
 8004d8a:	f7ff f949 	bl	8004020 <ppu_get_context>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	f242 1330 	movw	r3, #8496	; 0x2130
 8004d94:	4413      	add	r3, r2
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <pipeline_process+0x9a>
        pipeline_fetch();
 8004da0:	f7ff fe28 	bl	80049f4 <pipeline_fetch>
    }

    pipeline_push_pixel();
 8004da4:	f7ff ff56 	bl	8004c54 <pipeline_push_pixel>
}
 8004da8:	bf00      	nop
 8004daa:	bdb0      	pop	{r4, r5, r7, pc}

08004dac <pipeline_fifo_reset>:

void pipeline_fifo_reset() {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
    while(ppu_get_context()->pfc.pixel_fifo.size) {
 8004db0:	e001      	b.n	8004db6 <pipeline_fifo_reset+0xa>
        pixel_fifo_pop();
 8004db2:	f7ff facf 	bl	8004354 <pixel_fifo_pop>
    while(ppu_get_context()->pfc.pixel_fifo.size) {
 8004db6:	f7ff f933 	bl	8004020 <ppu_get_context>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	f242 03ac 	movw	r3, #8364	; 0x20ac
 8004dc0:	4413      	add	r3, r2
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1f4      	bne.n	8004db2 <pipeline_fifo_reset+0x6>
    }

    ppu_get_context()->pfc.pixel_fifo.head = 0;
 8004dc8:	f7ff f92a 	bl	8004020 <ppu_get_context>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	f242 03a4 	movw	r3, #8356	; 0x20a4
 8004dd2:	4413      	add	r3, r2
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	bf00      	nop
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <increment_ly>:
void pipeline_fifo_reset();
void pipeline_process();
bool window_visible();
volatile uint8_t temp = 0;

void increment_ly() {
 8004ddc:	b598      	push	{r3, r4, r7, lr}
 8004dde:	af00      	add	r7, sp, #0
    if (window_visible() && lcd_get_context()->ly >= lcd_get_context()->win_y &&
 8004de0:	f7ff fa46 	bl	8004270 <window_visible>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d025      	beq.n	8004e36 <increment_ly+0x5a>
 8004dea:	f7fe fae5 	bl	80033b8 <lcd_get_context>
 8004dee:	4603      	mov	r3, r0
 8004df0:	791c      	ldrb	r4, [r3, #4]
 8004df2:	f7fe fae1 	bl	80033b8 <lcd_get_context>
 8004df6:	4603      	mov	r3, r0
 8004df8:	7a9b      	ldrb	r3, [r3, #10]
 8004dfa:	429c      	cmp	r4, r3
 8004dfc:	d31b      	bcc.n	8004e36 <increment_ly+0x5a>
        lcd_get_context()->ly < lcd_get_context()->win_y + YRES) {
 8004dfe:	f7fe fadb 	bl	80033b8 <lcd_get_context>
 8004e02:	4603      	mov	r3, r0
 8004e04:	791b      	ldrb	r3, [r3, #4]
 8004e06:	461c      	mov	r4, r3
 8004e08:	f7fe fad6 	bl	80033b8 <lcd_get_context>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	7a9b      	ldrb	r3, [r3, #10]
 8004e10:	461a      	mov	r2, r3
 8004e12:	2390      	movs	r3, #144	; 0x90
 8004e14:	4413      	add	r3, r2
    if (window_visible() && lcd_get_context()->ly >= lcd_get_context()->win_y &&
 8004e16:	429c      	cmp	r4, r3
 8004e18:	da0d      	bge.n	8004e36 <increment_ly+0x5a>
            ppu_get_context()->window_line++;
 8004e1a:	f7ff f901 	bl	8004020 <ppu_get_context>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	f242 1328 	movw	r3, #8488	; 0x2128
 8004e24:	4413      	add	r3, r2
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	b2d9      	uxtb	r1, r3
 8004e2c:	f242 1328 	movw	r3, #8488	; 0x2128
 8004e30:	4413      	add	r3, r2
 8004e32:	460a      	mov	r2, r1
 8004e34:	701a      	strb	r2, [r3, #0]
    }

    lcd_get_context()->ly++;
 8004e36:	f7fe fabf 	bl	80033b8 <lcd_get_context>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	791a      	ldrb	r2, [r3, #4]
 8004e3e:	3201      	adds	r2, #1
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	711a      	strb	r2, [r3, #4]
    temp = lcd_get_context()->ly++;
 8004e44:	f7fe fab8 	bl	80033b8 <lcd_get_context>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	791a      	ldrb	r2, [r3, #4]
 8004e4c:	1c51      	adds	r1, r2, #1
 8004e4e:	b2c9      	uxtb	r1, r1
 8004e50:	7119      	strb	r1, [r3, #4]
 8004e52:	4b15      	ldr	r3, [pc, #84]	; (8004ea8 <increment_ly+0xcc>)
 8004e54:	701a      	strb	r2, [r3, #0]


    if (lcd_get_context()->ly == lcd_get_context()->ly_compare) {
 8004e56:	f7fe faaf 	bl	80033b8 <lcd_get_context>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	791c      	ldrb	r4, [r3, #4]
 8004e5e:	f7fe faab 	bl	80033b8 <lcd_get_context>
 8004e62:	4603      	mov	r3, r0
 8004e64:	795b      	ldrb	r3, [r3, #5]
 8004e66:	429c      	cmp	r4, r3
 8004e68:	d113      	bne.n	8004e92 <increment_ly+0xb6>
        LCDS_LYC_SET(1);
 8004e6a:	f7fe faa5 	bl	80033b8 <lcd_get_context>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	785a      	ldrb	r2, [r3, #1]
 8004e72:	f042 0204 	orr.w	r2, r2, #4
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	705a      	strb	r2, [r3, #1]

        if (LCDS_STAT_INT(SS_LYC)) {
 8004e7a:	f7fe fa9d 	bl	80033b8 <lcd_get_context>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	785b      	ldrb	r3, [r3, #1]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <increment_ly+0xc6>
            cpu_request_interrupt(IT_LCD_STAT);
 8004e8a:	2002      	movs	r0, #2
 8004e8c:	f7fc f902 	bl	8001094 <cpu_request_interrupt>
        }
    } else {
        LCDS_LYC_SET(0);
    }
}
 8004e90:	e007      	b.n	8004ea2 <increment_ly+0xc6>
        LCDS_LYC_SET(0);
 8004e92:	f7fe fa91 	bl	80033b8 <lcd_get_context>
 8004e96:	4603      	mov	r3, r0
 8004e98:	785a      	ldrb	r2, [r3, #1]
 8004e9a:	f022 0204 	bic.w	r2, r2, #4
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	705a      	strb	r2, [r3, #1]
}
 8004ea2:	bf00      	nop
 8004ea4:	bd98      	pop	{r3, r4, r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20003730 	.word	0x20003730

08004eac <load_line_sprites>:

void load_line_sprites() {
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b089      	sub	sp, #36	; 0x24
 8004eb0:	af00      	add	r7, sp, #0
    int cur_y = lcd_get_context()->ly;
 8004eb2:	f7fe fa81 	bl	80033b8 <lcd_get_context>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	791b      	ldrb	r3, [r3, #4]
 8004eba:	613b      	str	r3, [r7, #16]

    u8 sprite_height = LCDC_OBJ_HEIGHT;
 8004ebc:	f7fe fa7c 	bl	80033b8 <lcd_get_context>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <load_line_sprites+0x24>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	e000      	b.n	8004ed2 <load_line_sprites+0x26>
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	73fb      	strb	r3, [r7, #15]
    memset(ppu_get_context()->line_entry_array, 0, 
 8004ed4:	f7ff f8a4 	bl	8004020 <ppu_get_context>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	f242 03c8 	movw	r3, #8392	; 0x20c8
 8004ede:	4413      	add	r3, r2
 8004ee0:	2250      	movs	r2, #80	; 0x50
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f00c fa4d 	bl	8011384 <memset>
        sizeof(ppu_get_context()->line_entry_array));

    for (int i=0; i<40; i++) {
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	e08d      	b.n	800500c <load_line_sprites+0x160>
        oam_entry e = ppu_get_context()->oam_ram[i];
 8004ef0:	f7ff f896 	bl	8004020 <ppu_get_context>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efc:	607b      	str	r3, [r7, #4]

        if (!e.x) {
 8004efe:	797b      	ldrb	r3, [r7, #5]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d07f      	beq.n	8005004 <load_line_sprites+0x158>
            //x = 0 means not visible...
            continue;
        }

        if (ppu_get_context()->line_sprite_count >= 10) {
 8004f04:	f7ff f88c 	bl	8004020 <ppu_get_context>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b09      	cmp	r3, #9
 8004f12:	d901      	bls.n	8004f18 <load_line_sprites+0x6c>
            //max 10 sprites per line...
            break;
 8004f14:	bf00      	nop
                prev = le;
                le = le->next;
            }
        }
    }
}
 8004f16:	e07d      	b.n	8005014 <load_line_sprites+0x168>
        if (e.y <= cur_y + 16 && e.y + sprite_height > cur_y + 16) {
 8004f18:	793b      	ldrb	r3, [r7, #4]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	3310      	adds	r3, #16
 8004f20:	429a      	cmp	r2, r3
 8004f22:	dc70      	bgt.n	8005006 <load_line_sprites+0x15a>
 8004f24:	793b      	ldrb	r3, [r7, #4]
 8004f26:	461a      	mov	r2, r3
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	441a      	add	r2, r3
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	3310      	adds	r3, #16
 8004f30:	429a      	cmp	r2, r3
 8004f32:	dd68      	ble.n	8005006 <load_line_sprites+0x15a>
            oam_line_entry *entry = &ppu_get_context()->line_entry_array[
 8004f34:	f7ff f874 	bl	8004020 <ppu_get_context>
 8004f38:	4604      	mov	r4, r0
                ppu_get_context()->line_sprite_count++
 8004f3a:	f7ff f871 	bl	8004020 <ppu_get_context>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f503 5203 	add.w	r2, r3, #8384	; 0x20c0
 8004f44:	7812      	ldrb	r2, [r2, #0]
 8004f46:	1c51      	adds	r1, r2, #1
 8004f48:	b2c9      	uxtb	r1, r1
 8004f4a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004f4e:	7019      	strb	r1, [r3, #0]
 8004f50:	4613      	mov	r3, r2
            oam_line_entry *entry = &ppu_get_context()->line_entry_array[
 8004f52:	f203 4319 	addw	r3, r3, #1049	; 0x419
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4423      	add	r3, r4
 8004f5a:	60bb      	str	r3, [r7, #8]
            entry->entry = e;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	601a      	str	r2, [r3, #0]
            entry->next = NULL;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2200      	movs	r2, #0
 8004f66:	605a      	str	r2, [r3, #4]
            if (!ppu_get_context()->line_sprites ||
 8004f68:	f7ff f85a 	bl	8004020 <ppu_get_context>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004f72:	4413      	add	r3, r2
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <load_line_sprites+0xe4>
                    ppu_get_context()->line_sprites->entry.x > e.x) {
 8004f7a:	f7ff f851 	bl	8004020 <ppu_get_context>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004f84:	4413      	add	r3, r2
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	785a      	ldrb	r2, [r3, #1]
 8004f8a:	797b      	ldrb	r3, [r7, #5]
            if (!ppu_get_context()->line_sprites ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d911      	bls.n	8004fb4 <load_line_sprites+0x108>
                entry->next = ppu_get_context()->line_sprites;
 8004f90:	f7ff f846 	bl	8004020 <ppu_get_context>
 8004f94:	4602      	mov	r2, r0
 8004f96:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004f9a:	4413      	add	r3, r2
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	605a      	str	r2, [r3, #4]
                ppu_get_context()->line_sprites = entry;
 8004fa2:	f7ff f83d 	bl	8004020 <ppu_get_context>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004fac:	4413      	add	r3, r2
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	601a      	str	r2, [r3, #0]
                continue;
 8004fb2:	e028      	b.n	8005006 <load_line_sprites+0x15a>
            oam_line_entry *le = ppu_get_context()->line_sprites;
 8004fb4:	f7ff f834 	bl	8004020 <ppu_get_context>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8004fbe:	4413      	add	r3, r2
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	61bb      	str	r3, [r7, #24]
            oam_line_entry *prev = le;
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	617b      	str	r3, [r7, #20]
            while(le) {
 8004fc8:	e018      	b.n	8004ffc <load_line_sprites+0x150>
                if (le->entry.x > e.x) {
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	785a      	ldrb	r2, [r3, #1]
 8004fce:	797b      	ldrb	r3, [r7, #5]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d906      	bls.n	8004fe2 <load_line_sprites+0x136>
                    prev->next = entry;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	605a      	str	r2, [r3, #4]
                    entry->next = le;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	605a      	str	r2, [r3, #4]
                    break;
 8004fe0:	e011      	b.n	8005006 <load_line_sprites+0x15a>
                if (!le->next) {
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d103      	bne.n	8004ff2 <load_line_sprites+0x146>
                    le->next = entry;
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	605a      	str	r2, [r3, #4]
                    break;
 8004ff0:	e009      	b.n	8005006 <load_line_sprites+0x15a>
                prev = le;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	617b      	str	r3, [r7, #20]
                le = le->next;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	61bb      	str	r3, [r7, #24]
            while(le) {
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e3      	bne.n	8004fca <load_line_sprites+0x11e>
 8005002:	e000      	b.n	8005006 <load_line_sprites+0x15a>
            continue;
 8005004:	bf00      	nop
    for (int i=0; i<40; i++) {
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	3301      	adds	r3, #1
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b27      	cmp	r3, #39	; 0x27
 8005010:	f77f af6e 	ble.w	8004ef0 <load_line_sprites+0x44>
}
 8005014:	bf00      	nop
 8005016:	3724      	adds	r7, #36	; 0x24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd90      	pop	{r4, r7, pc}

0800501c <ppu_mode_oam>:

void ppu_mode_oam() {
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
    if (ppu_get_context()->line_ticks >= 80) {
 8005020:	f7fe fffe 	bl	8004020 <ppu_get_context>
 8005024:	4602      	mov	r2, r0
 8005026:	f242 1330 	movw	r3, #8496	; 0x2130
 800502a:	4413      	add	r3, r2
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b4f      	cmp	r3, #79	; 0x4f
 8005030:	d937      	bls.n	80050a2 <ppu_mode_oam+0x86>
        LCDS_MODE_SET(MODE_XFER);
 8005032:	f7fe f9c1 	bl	80033b8 <lcd_get_context>
 8005036:	4603      	mov	r3, r0
 8005038:	785a      	ldrb	r2, [r3, #1]
 800503a:	f022 0203 	bic.w	r2, r2, #3
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	705a      	strb	r2, [r3, #1]
 8005042:	f7fe f9b9 	bl	80033b8 <lcd_get_context>
 8005046:	4603      	mov	r3, r0
 8005048:	785a      	ldrb	r2, [r3, #1]
 800504a:	f042 0203 	orr.w	r2, r2, #3
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	705a      	strb	r2, [r3, #1]

        ppu_get_context()->pfc.cur_fetch_state = FS_TILE;
 8005052:	f7fe ffe5 	bl	8004020 <ppu_get_context>
 8005056:	4602      	mov	r2, r0
 8005058:	f242 03a0 	movw	r3, #8352	; 0x20a0
 800505c:	4413      	add	r3, r2
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]
        ppu_get_context()->pfc.line_x = 0;
 8005062:	f7fe ffdd 	bl	8004020 <ppu_get_context>
 8005066:	4602      	mov	r2, r0
 8005068:	f242 03b0 	movw	r3, #8368	; 0x20b0
 800506c:	4413      	add	r3, r2
 800506e:	2200      	movs	r2, #0
 8005070:	701a      	strb	r2, [r3, #0]
        ppu_get_context()->pfc.fetch_x = 0;
 8005072:	f7fe ffd5 	bl	8004020 <ppu_get_context>
 8005076:	4602      	mov	r2, r0
 8005078:	f242 03b2 	movw	r3, #8370	; 0x20b2
 800507c:	4413      	add	r3, r2
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
        ppu_get_context()->pfc.pushed_x = 0;
 8005082:	f7fe ffcd 	bl	8004020 <ppu_get_context>
 8005086:	4602      	mov	r2, r0
 8005088:	f242 03b1 	movw	r3, #8369	; 0x20b1
 800508c:	4413      	add	r3, r2
 800508e:	2200      	movs	r2, #0
 8005090:	701a      	strb	r2, [r3, #0]
        ppu_get_context()->pfc.fifo_x = 0;
 8005092:	f7fe ffc5 	bl	8004020 <ppu_get_context>
 8005096:	4602      	mov	r2, r0
 8005098:	f242 03bf 	movw	r3, #8383	; 0x20bf
 800509c:	4413      	add	r3, r2
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
    }

    if (ppu_get_context()->line_ticks == 1) {
 80050a2:	f7fe ffbd 	bl	8004020 <ppu_get_context>
 80050a6:	4602      	mov	r2, r0
 80050a8:	f242 1330 	movw	r3, #8496	; 0x2130
 80050ac:	4413      	add	r3, r2
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d110      	bne.n	80050d6 <ppu_mode_oam+0xba>
        //read oam on the first tick only...
        ppu_get_context()->line_sprites = 0;
 80050b4:	f7fe ffb4 	bl	8004020 <ppu_get_context>
 80050b8:	4602      	mov	r2, r0
 80050ba:	f242 03c4 	movw	r3, #8388	; 0x20c4
 80050be:	4413      	add	r3, r2
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
        ppu_get_context()->line_sprite_count = 0;
 80050c4:	f7fe ffac 	bl	8004020 <ppu_get_context>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]

        load_line_sprites();
 80050d2:	f7ff feeb 	bl	8004eac <load_line_sprites>
    }
}
 80050d6:	bf00      	nop
 80050d8:	bd80      	pop	{r7, pc}

080050da <ppu_mode_xfer>:

void ppu_mode_xfer() {
 80050da:	b580      	push	{r7, lr}
 80050dc:	af00      	add	r7, sp, #0
    pipeline_process();
 80050de:	f7ff fe14 	bl	8004d0a <pipeline_process>

    if (ppu_get_context()->pfc.pushed_x >= XRES) {
 80050e2:	f7fe ff9d 	bl	8004020 <ppu_get_context>
 80050e6:	4602      	mov	r2, r0
 80050e8:	f242 03b1 	movw	r3, #8369	; 0x20b1
 80050ec:	4413      	add	r3, r2
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	23a0      	movs	r3, #160	; 0xa0
 80050f4:	429a      	cmp	r2, r3
 80050f6:	db19      	blt.n	800512c <ppu_mode_xfer+0x52>
        pipeline_fifo_reset();
 80050f8:	f7ff fe58 	bl	8004dac <pipeline_fifo_reset>

        LCDS_MODE_SET(MODE_HBLANK);
 80050fc:	f7fe f95c 	bl	80033b8 <lcd_get_context>
 8005100:	4603      	mov	r3, r0
 8005102:	785a      	ldrb	r2, [r3, #1]
 8005104:	f022 0203 	bic.w	r2, r2, #3
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	705a      	strb	r2, [r3, #1]
 800510c:	f7fe f954 	bl	80033b8 <lcd_get_context>
 8005110:	4603      	mov	r3, r0
 8005112:	785a      	ldrb	r2, [r3, #1]
 8005114:	705a      	strb	r2, [r3, #1]

        if (LCDS_STAT_INT(SS_HBLANK)) {
 8005116:	f7fe f94f 	bl	80033b8 <lcd_get_context>
 800511a:	4603      	mov	r3, r0
 800511c:	785b      	ldrb	r3, [r3, #1]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <ppu_mode_xfer+0x52>
            cpu_request_interrupt(IT_LCD_STAT);
 8005126:	2002      	movs	r0, #2
 8005128:	f7fb ffb4 	bl	8001094 <cpu_request_interrupt>
        }
    }
}
 800512c:	bf00      	nop
 800512e:	bd80      	pop	{r7, pc}

08005130 <ppu_mode_vblank>:

void ppu_mode_vblank() {
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
    if (ppu_get_context()->line_ticks >= TICKS_PER_LINE) {
 8005134:	f7fe ff74 	bl	8004020 <ppu_get_context>
 8005138:	4602      	mov	r2, r0
 800513a:	f242 1330 	movw	r3, #8496	; 0x2130
 800513e:	4413      	add	r3, r2
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8005146:	4293      	cmp	r3, r2
 8005148:	d32e      	bcc.n	80051a8 <ppu_mode_vblank+0x78>
        increment_ly();
 800514a:	f7ff fe47 	bl	8004ddc <increment_ly>

        if (lcd_get_context()->ly >= LINES_PER_FRAME) {
 800514e:	f7fe f933 	bl	80033b8 <lcd_get_context>
 8005152:	4603      	mov	r3, r0
 8005154:	791b      	ldrb	r3, [r3, #4]
 8005156:	461a      	mov	r2, r3
 8005158:	239a      	movs	r3, #154	; 0x9a
 800515a:	429a      	cmp	r2, r3
 800515c:	db1c      	blt.n	8005198 <ppu_mode_vblank+0x68>
            LCDS_MODE_SET(MODE_OAM);
 800515e:	f7fe f92b 	bl	80033b8 <lcd_get_context>
 8005162:	4603      	mov	r3, r0
 8005164:	785a      	ldrb	r2, [r3, #1]
 8005166:	f022 0203 	bic.w	r2, r2, #3
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	705a      	strb	r2, [r3, #1]
 800516e:	f7fe f923 	bl	80033b8 <lcd_get_context>
 8005172:	4603      	mov	r3, r0
 8005174:	785a      	ldrb	r2, [r3, #1]
 8005176:	f042 0202 	orr.w	r2, r2, #2
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	705a      	strb	r2, [r3, #1]
            lcd_get_context()->ly = 0;
 800517e:	f7fe f91b 	bl	80033b8 <lcd_get_context>
 8005182:	4603      	mov	r3, r0
 8005184:	2200      	movs	r2, #0
 8005186:	711a      	strb	r2, [r3, #4]
            ppu_get_context()->window_line = 0;
 8005188:	f7fe ff4a 	bl	8004020 <ppu_get_context>
 800518c:	4602      	mov	r2, r0
 800518e:	f242 1328 	movw	r3, #8488	; 0x2128
 8005192:	4413      	add	r3, r2
 8005194:	2200      	movs	r2, #0
 8005196:	701a      	strb	r2, [r3, #0]
        }

        ppu_get_context()->line_ticks = 0;
 8005198:	f7fe ff42 	bl	8004020 <ppu_get_context>
 800519c:	4602      	mov	r2, r0
 800519e:	f242 1330 	movw	r3, #8496	; 0x2130
 80051a2:	4413      	add	r3, r2
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
    }
}
 80051a8:	bf00      	nop
 80051aa:	bd80      	pop	{r7, pc}

080051ac <ppu_mode_hblank>:
static u32 target_frame_time = 1000 / 58;
static long prev_frame_time = 0;
static long start_timer = 0;
static long frame_count = 0;
volatile u32 timp1, timp2;
void ppu_mode_hblank() {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
    if (ppu_get_context()->line_ticks >= TICKS_PER_LINE) {
 80051b2:	f7fe ff35 	bl	8004020 <ppu_get_context>
 80051b6:	4602      	mov	r2, r0
 80051b8:	f242 1330 	movw	r3, #8496	; 0x2130
 80051bc:	4413      	add	r3, r2
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 80051c4:	4293      	cmp	r3, r2
 80051c6:	f0c0 8092 	bcc.w	80052ee <ppu_mode_hblank+0x142>
        increment_ly();
 80051ca:	f7ff fe07 	bl	8004ddc <increment_ly>

        if (lcd_get_context()->ly >= YRES) {
 80051ce:	f7fe f8f3 	bl	80033b8 <lcd_get_context>
 80051d2:	4603      	mov	r3, r0
 80051d4:	791b      	ldrb	r3, [r3, #4]
 80051d6:	461a      	mov	r2, r3
 80051d8:	2390      	movs	r3, #144	; 0x90
 80051da:	429a      	cmp	r2, r3
 80051dc:	db6f      	blt.n	80052be <ppu_mode_hblank+0x112>
            LCDS_MODE_SET(MODE_VBLANK);
 80051de:	f7fe f8eb 	bl	80033b8 <lcd_get_context>
 80051e2:	4603      	mov	r3, r0
 80051e4:	785a      	ldrb	r2, [r3, #1]
 80051e6:	f022 0203 	bic.w	r2, r2, #3
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	705a      	strb	r2, [r3, #1]
 80051ee:	f7fe f8e3 	bl	80033b8 <lcd_get_context>
 80051f2:	4603      	mov	r3, r0
 80051f4:	785a      	ldrb	r2, [r3, #1]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	705a      	strb	r2, [r3, #1]

            cpu_request_interrupt(IT_VBLANK);
 80051fe:	2001      	movs	r0, #1
 8005200:	f7fb ff48 	bl	8001094 <cpu_request_interrupt>

            if (LCDS_STAT_INT(SS_VBLANK)) {
 8005204:	f7fe f8d8 	bl	80033b8 <lcd_get_context>
 8005208:	4603      	mov	r3, r0
 800520a:	785b      	ldrb	r3, [r3, #1]
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <ppu_mode_hblank+0x6e>
                cpu_request_interrupt(IT_LCD_STAT);
 8005214:	2002      	movs	r0, #2
 8005216:	f7fb ff3d 	bl	8001094 <cpu_request_interrupt>
            }

            ppu_get_context()->current_frame++;
 800521a:	f7fe ff01 	bl	8004020 <ppu_get_context>
 800521e:	4602      	mov	r2, r0
 8005220:	f242 132c 	movw	r3, #8492	; 0x212c
 8005224:	4413      	add	r3, r2
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	1c59      	adds	r1, r3, #1
 800522a:	f242 132c 	movw	r3, #8492	; 0x212c
 800522e:	4413      	add	r3, r2
 8005230:	6019      	str	r1, [r3, #0]

            //calc FPS...
            u32 end = get_ticks();
 8005232:	f000 fd6c 	bl	8005d0e <get_ticks>
 8005236:	60f8      	str	r0, [r7, #12]
            u32 frame_time = end - prev_frame_time;
 8005238:	4b2f      	ldr	r3, [pc, #188]	; (80052f8 <ppu_mode_hblank+0x14c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	60bb      	str	r3, [r7, #8]
            timp1 = frame_time;
 8005244:	4a2d      	ldr	r2, [pc, #180]	; (80052fc <ppu_mode_hblank+0x150>)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	6013      	str	r3, [r2, #0]
            timp2 = target_frame_time - frame_time;
 800524a:	4b2d      	ldr	r3, [pc, #180]	; (8005300 <ppu_mode_hblank+0x154>)
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	4a2c      	ldr	r2, [pc, #176]	; (8005304 <ppu_mode_hblank+0x158>)
 8005254:	6013      	str	r3, [r2, #0]

            if (frame_time < target_frame_time) {
 8005256:	4b2a      	ldr	r3, [pc, #168]	; (8005300 <ppu_mode_hblank+0x154>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	429a      	cmp	r2, r3
 800525e:	d206      	bcs.n	800526e <ppu_mode_hblank+0xc2>
        	osDelay((target_frame_time - frame_time));
 8005260:	4b27      	ldr	r3, [pc, #156]	; (8005300 <ppu_mode_hblank+0x154>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	4618      	mov	r0, r3
 800526a:	f008 fc83 	bl	800db74 <osDelay>
            }

            if (end - start_timer >= 1000) {
 800526e:	4b26      	ldr	r3, [pc, #152]	; (8005308 <ppu_mode_hblank+0x15c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800527c:	d313      	bcc.n	80052a6 <ppu_mode_hblank+0xfa>
                u32 fps = frame_count;
 800527e:	4b23      	ldr	r3, [pc, #140]	; (800530c <ppu_mode_hblank+0x160>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	607b      	str	r3, [r7, #4]
                start_timer = end;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4a20      	ldr	r2, [pc, #128]	; (8005308 <ppu_mode_hblank+0x15c>)
 8005288:	6013      	str	r3, [r2, #0]
                frame_count = 0;
 800528a:	4b20      	ldr	r3, [pc, #128]	; (800530c <ppu_mode_hblank+0x160>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]

                printf("FPS: %lu\n", fps);
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	481f      	ldr	r0, [pc, #124]	; (8005310 <ppu_mode_hblank+0x164>)
 8005294:	f00c fc28 	bl	8011ae8 <iprintf>

                if (cart_need_save()) {
 8005298:	f7fb fa92 	bl	80007c0 <cart_need_save>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <ppu_mode_hblank+0xfa>
                    cart_battery_save();
 80052a2:	f7fb fcc9 	bl	8000c38 <cart_battery_save>
                }
            }

            frame_count++;
 80052a6:	4b19      	ldr	r3, [pc, #100]	; (800530c <ppu_mode_hblank+0x160>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3301      	adds	r3, #1
 80052ac:	4a17      	ldr	r2, [pc, #92]	; (800530c <ppu_mode_hblank+0x160>)
 80052ae:	6013      	str	r3, [r2, #0]
            prev_frame_time = get_ticks();
 80052b0:	f000 fd2d 	bl	8005d0e <get_ticks>
 80052b4:	4603      	mov	r3, r0
 80052b6:	461a      	mov	r2, r3
 80052b8:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <ppu_mode_hblank+0x14c>)
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	e00f      	b.n	80052de <ppu_mode_hblank+0x132>

        } else {
            LCDS_MODE_SET(MODE_OAM);
 80052be:	f7fe f87b 	bl	80033b8 <lcd_get_context>
 80052c2:	4603      	mov	r3, r0
 80052c4:	785a      	ldrb	r2, [r3, #1]
 80052c6:	f022 0203 	bic.w	r2, r2, #3
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	705a      	strb	r2, [r3, #1]
 80052ce:	f7fe f873 	bl	80033b8 <lcd_get_context>
 80052d2:	4603      	mov	r3, r0
 80052d4:	785a      	ldrb	r2, [r3, #1]
 80052d6:	f042 0202 	orr.w	r2, r2, #2
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	705a      	strb	r2, [r3, #1]
        }

        ppu_get_context()->line_ticks = 0;
 80052de:	f7fe fe9f 	bl	8004020 <ppu_get_context>
 80052e2:	4602      	mov	r2, r0
 80052e4:	f242 1330 	movw	r3, #8496	; 0x2130
 80052e8:	4413      	add	r3, r2
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
    }
}
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20003734 	.word	0x20003734
 80052fc:	20009758 	.word	0x20009758
 8005300:	200009c8 	.word	0x200009c8
 8005304:	2000975c 	.word	0x2000975c
 8005308:	20003738 	.word	0x20003738
 800530c:	2000373c 	.word	0x2000373c
 8005310:	08012d00 	.word	0x08012d00

08005314 <wram_read>:
    u8 hram[0x80];
} ram_context;

static ram_context ctx;

u8 wram_read(u16 address) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	80fb      	strh	r3, [r7, #6]
    address -= 0xC000;
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8005324:	80fb      	strh	r3, [r7, #6]

    if (address >= 0x2000) {
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800532c:	d30a      	bcc.n	8005344 <wram_read+0x30>
        printf("INVALID WRAM ADDR %08X\n", address + 0xC000);
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8005334:	4619      	mov	r1, r3
 8005336:	4807      	ldr	r0, [pc, #28]	; (8005354 <wram_read+0x40>)
 8005338:	f00c fbd6 	bl	8011ae8 <iprintf>
        exit(-1);
 800533c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005340:	f00b fa9a 	bl	8010878 <exit>
    }

    return ctx.wram[address];
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	4a04      	ldr	r2, [pc, #16]	; (8005358 <wram_read+0x44>)
 8005348:	5cd3      	ldrb	r3, [r2, r3]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	08012d0c 	.word	0x08012d0c
 8005358:	20003740 	.word	0x20003740

0800535c <wram_write>:

void wram_write(u16 address, u8 value) {
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	460a      	mov	r2, r1
 8005366:	80fb      	strh	r3, [r7, #6]
 8005368:	4613      	mov	r3, r2
 800536a:	717b      	strb	r3, [r7, #5]
    address -= 0xC000;
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8005372:	80fb      	strh	r3, [r7, #6]

    ctx.wram[address] = value;
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	4904      	ldr	r1, [pc, #16]	; (8005388 <wram_write+0x2c>)
 8005378:	797a      	ldrb	r2, [r7, #5]
 800537a:	54ca      	strb	r2, [r1, r3]
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	20003740 	.word	0x20003740

0800538c <hram_read>:

u8 hram_read(u16 address) {
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	80fb      	strh	r3, [r7, #6]
    address -= 0xFF80;
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	3380      	adds	r3, #128	; 0x80
 800539a:	80fb      	strh	r3, [r7, #6]

    return ctx.hram[address];
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	4a05      	ldr	r2, [pc, #20]	; (80053b4 <hram_read+0x28>)
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053a6:	781b      	ldrb	r3, [r3, #0]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	20003740 	.word	0x20003740

080053b8 <hram_write>:

void hram_write(u16 address, u8 value) {
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	4603      	mov	r3, r0
 80053c0:	460a      	mov	r2, r1
 80053c2:	80fb      	strh	r3, [r7, #6]
 80053c4:	4613      	mov	r3, r2
 80053c6:	717b      	strb	r3, [r7, #5]
    address -= 0xFF80;
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	3380      	adds	r3, #128	; 0x80
 80053cc:	80fb      	strh	r3, [r7, #6]

    ctx.hram[address] = value;
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	4a05      	ldr	r2, [pc, #20]	; (80053e8 <hram_write+0x30>)
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053d8:	797a      	ldrb	r2, [r7, #5]
 80053da:	701a      	strb	r2, [r3, #0]
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	20003740 	.word	0x20003740

080053ec <stack_push>:
    0xDFFD: 88 <- SP
    0xDFFE: 55 
    0xDFFF: 00
*/

void stack_push(u8 data) {
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	71fb      	strb	r3, [r7, #7]
    cpu_get_regs()->sp--;
 80053f6:	f7fd fc03 	bl	8002c00 <cpu_get_regs>
 80053fa:	4603      	mov	r3, r0
 80053fc:	895a      	ldrh	r2, [r3, #10]
 80053fe:	3a01      	subs	r2, #1
 8005400:	b292      	uxth	r2, r2
 8005402:	815a      	strh	r2, [r3, #10]
    bus_write(cpu_get_regs()->sp, data);
 8005404:	f7fd fbfc 	bl	8002c00 <cpu_get_regs>
 8005408:	4603      	mov	r3, r0
 800540a:	895b      	ldrh	r3, [r3, #10]
 800540c:	79fa      	ldrb	r2, [r7, #7]
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f7fb f949 	bl	80006a8 <bus_write>
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <stack_push16>:

void stack_push16(u16 data) {
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	4603      	mov	r3, r0
 8005426:	80fb      	strh	r3, [r7, #6]
    stack_push((data >> 8) & 0xFF);
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	b29b      	uxth	r3, r3
 800542e:	b2db      	uxtb	r3, r3
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ffdb 	bl	80053ec <stack_push>
    stack_push(data & 0xFF);
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff ffd6 	bl	80053ec <stack_push>
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <stack_pop>:

u8 stack_pop() {
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
    return bus_read(cpu_get_regs()->sp++);
 800544c:	f7fd fbd8 	bl	8002c00 <cpu_get_regs>
 8005450:	4602      	mov	r2, r0
 8005452:	8953      	ldrh	r3, [r2, #10]
 8005454:	1c59      	adds	r1, r3, #1
 8005456:	b289      	uxth	r1, r1
 8005458:	8151      	strh	r1, [r2, #10]
 800545a:	4618      	mov	r0, r3
 800545c:	f7fb f8bc 	bl	80005d8 <bus_read>
 8005460:	4603      	mov	r3, r0
}
 8005462:	4618      	mov	r0, r3
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <HAL_MspInit+0x4c>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	4a10      	ldr	r2, [pc, #64]	; (80054b4 <HAL_MspInit+0x4c>)
 8005474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005478:	6413      	str	r3, [r2, #64]	; 0x40
 800547a:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <HAL_MspInit+0x4c>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005486:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <HAL_MspInit+0x4c>)
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548a:	4a0a      	ldr	r2, [pc, #40]	; (80054b4 <HAL_MspInit+0x4c>)
 800548c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005490:	6453      	str	r3, [r2, #68]	; 0x44
 8005492:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <HAL_MspInit+0x4c>)
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800549e:	2200      	movs	r2, #0
 80054a0:	210f      	movs	r1, #15
 80054a2:	f06f 0001 	mvn.w	r0, #1
 80054a6:	f000 fd97 	bl	8005fd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054aa:	bf00      	nop
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40023800 	.word	0x40023800

080054b8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a0a      	ldr	r2, [pc, #40]	; (80054f0 <HAL_CRC_MspInit+0x38>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d10b      	bne.n	80054e2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80054ca:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <HAL_CRC_MspInit+0x3c>)
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	4a09      	ldr	r2, [pc, #36]	; (80054f4 <HAL_CRC_MspInit+0x3c>)
 80054d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054d4:	6313      	str	r3, [r2, #48]	; 0x30
 80054d6:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <HAL_CRC_MspInit+0x3c>)
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40023000 	.word	0x40023000
 80054f4:	40023800 	.word	0x40023800

080054f8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b0b0      	sub	sp, #192	; 0xc0
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005500:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	605a      	str	r2, [r3, #4]
 800550a:	609a      	str	r2, [r3, #8]
 800550c:	60da      	str	r2, [r3, #12]
 800550e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005510:	f107 031c 	add.w	r3, r7, #28
 8005514:	2290      	movs	r2, #144	; 0x90
 8005516:	2100      	movs	r1, #0
 8005518:	4618      	mov	r0, r3
 800551a:	f00b ff33 	bl	8011384 <memset>
  if(hsd->Instance==SDMMC2)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a83      	ldr	r2, [pc, #524]	; (8005730 <HAL_SD_MspInit+0x238>)
 8005524:	4293      	cmp	r3, r2
 8005526:	f040 80ff 	bne.w	8005728 <HAL_SD_MspInit+0x230>
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC2;
 800552a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800552e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_SYSCLK;
 8005530:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005534:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005538:	f107 031c 	add.w	r3, r7, #28
 800553c:	4618      	mov	r0, r3
 800553e:	f002 f8e3 	bl	8007708 <HAL_RCCEx_PeriphCLKConfig>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8005548:	f7fe fd64 	bl	8004014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800554c:	4b79      	ldr	r3, [pc, #484]	; (8005734 <HAL_SD_MspInit+0x23c>)
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	4a78      	ldr	r2, [pc, #480]	; (8005734 <HAL_SD_MspInit+0x23c>)
 8005552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005556:	6453      	str	r3, [r2, #68]	; 0x44
 8005558:	4b76      	ldr	r3, [pc, #472]	; (8005734 <HAL_SD_MspInit+0x23c>)
 800555a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005564:	4b73      	ldr	r3, [pc, #460]	; (8005734 <HAL_SD_MspInit+0x23c>)
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	4a72      	ldr	r2, [pc, #456]	; (8005734 <HAL_SD_MspInit+0x23c>)
 800556a:	f043 0302 	orr.w	r3, r3, #2
 800556e:	6313      	str	r3, [r2, #48]	; 0x30
 8005570:	4b70      	ldr	r3, [pc, #448]	; (8005734 <HAL_SD_MspInit+0x23c>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800557c:	4b6d      	ldr	r3, [pc, #436]	; (8005734 <HAL_SD_MspInit+0x23c>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	4a6c      	ldr	r2, [pc, #432]	; (8005734 <HAL_SD_MspInit+0x23c>)
 8005582:	f043 0308 	orr.w	r3, r3, #8
 8005586:	6313      	str	r3, [r2, #48]	; 0x30
 8005588:	4b6a      	ldr	r3, [pc, #424]	; (8005734 <HAL_SD_MspInit+0x23c>)
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005594:	4b67      	ldr	r3, [pc, #412]	; (8005734 <HAL_SD_MspInit+0x23c>)
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	4a66      	ldr	r2, [pc, #408]	; (8005734 <HAL_SD_MspInit+0x23c>)
 800559a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800559e:	6313      	str	r3, [r2, #48]	; 0x30
 80055a0:	4b64      	ldr	r3, [pc, #400]	; (8005734 <HAL_SD_MspInit+0x23c>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0
    */
    GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 80055ac:	2318      	movs	r3, #24
 80055ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b2:	2302      	movs	r3, #2
 80055b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055be:	2303      	movs	r3, #3
 80055c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80055c4:	230a      	movs	r3, #10
 80055c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80055ce:	4619      	mov	r1, r3
 80055d0:	4859      	ldr	r0, [pc, #356]	; (8005738 <HAL_SD_MspInit+0x240>)
 80055d2:	f001 f9bb 	bl	800694c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 80055d6:	23c0      	movs	r3, #192	; 0xc0
 80055d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055dc:	2302      	movs	r3, #2
 80055de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055e8:	2303      	movs	r3, #3
 80055ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80055ee:	230b      	movs	r3, #11
 80055f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80055f8:	4619      	mov	r1, r3
 80055fa:	4850      	ldr	r0, [pc, #320]	; (800573c <HAL_SD_MspInit+0x244>)
 80055fc:	f001 f9a6 	bl	800694c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8005600:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005608:	2302      	movs	r3, #2
 800560a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560e:	2300      	movs	r3, #0
 8005610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005614:	2303      	movs	r3, #3
 8005616:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800561a:	230b      	movs	r3, #11
 800561c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005620:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005624:	4619      	mov	r1, r3
 8005626:	4846      	ldr	r0, [pc, #280]	; (8005740 <HAL_SD_MspInit+0x248>)
 8005628:	f001 f990 	bl	800694c <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 800562c:	4b45      	ldr	r3, [pc, #276]	; (8005744 <HAL_SD_MspInit+0x24c>)
 800562e:	4a46      	ldr	r2, [pc, #280]	; (8005748 <HAL_SD_MspInit+0x250>)
 8005630:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 8005632:	4b44      	ldr	r3, [pc, #272]	; (8005744 <HAL_SD_MspInit+0x24c>)
 8005634:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8005638:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800563a:	4b42      	ldr	r3, [pc, #264]	; (8005744 <HAL_SD_MspInit+0x24c>)
 800563c:	2200      	movs	r2, #0
 800563e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005640:	4b40      	ldr	r3, [pc, #256]	; (8005744 <HAL_SD_MspInit+0x24c>)
 8005642:	2200      	movs	r2, #0
 8005644:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005646:	4b3f      	ldr	r3, [pc, #252]	; (8005744 <HAL_SD_MspInit+0x24c>)
 8005648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800564c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800564e:	4b3d      	ldr	r3, [pc, #244]	; (8005744 <HAL_SD_MspInit+0x24c>)
 8005650:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005654:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005656:	4b3b      	ldr	r3, [pc, #236]	; (8005744 <HAL_SD_MspInit+0x24c>)
 8005658:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800565c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 800565e:	4b39      	ldr	r3, [pc, #228]	; (8005744 <HAL_SD_MspInit+0x24c>)
 8005660:	2220      	movs	r2, #32
 8005662:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005664:	4b37      	ldr	r3, [pc, #220]	; (8005744 <HAL_SD_MspInit+0x24c>)
 8005666:	2200      	movs	r2, #0
 8005668:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800566a:	4b36      	ldr	r3, [pc, #216]	; (8005744 <HAL_SD_MspInit+0x24c>)
 800566c:	2204      	movs	r2, #4
 800566e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005670:	4b34      	ldr	r3, [pc, #208]	; (8005744 <HAL_SD_MspInit+0x24c>)
 8005672:	2203      	movs	r2, #3
 8005674:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005676:	4b33      	ldr	r3, [pc, #204]	; (8005744 <HAL_SD_MspInit+0x24c>)
 8005678:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800567c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800567e:	4b31      	ldr	r3, [pc, #196]	; (8005744 <HAL_SD_MspInit+0x24c>)
 8005680:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 8005686:	482f      	ldr	r0, [pc, #188]	; (8005744 <HAL_SD_MspInit+0x24c>)
 8005688:	f000 fdba 	bl	8006200 <HAL_DMA_Init>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8005692:	f7fe fcbf 	bl	8004014 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2a      	ldr	r2, [pc, #168]	; (8005744 <HAL_SD_MspInit+0x24c>)
 800569a:	641a      	str	r2, [r3, #64]	; 0x40
 800569c:	4a29      	ldr	r2, [pc, #164]	; (8005744 <HAL_SD_MspInit+0x24c>)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 80056a2:	4b2a      	ldr	r3, [pc, #168]	; (800574c <HAL_SD_MspInit+0x254>)
 80056a4:	4a2a      	ldr	r2, [pc, #168]	; (8005750 <HAL_SD_MspInit+0x258>)
 80056a6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 80056a8:	4b28      	ldr	r3, [pc, #160]	; (800574c <HAL_SD_MspInit+0x254>)
 80056aa:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80056ae:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056b0:	4b26      	ldr	r3, [pc, #152]	; (800574c <HAL_SD_MspInit+0x254>)
 80056b2:	2240      	movs	r2, #64	; 0x40
 80056b4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056b6:	4b25      	ldr	r3, [pc, #148]	; (800574c <HAL_SD_MspInit+0x254>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056bc:	4b23      	ldr	r3, [pc, #140]	; (800574c <HAL_SD_MspInit+0x254>)
 80056be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056c2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80056c4:	4b21      	ldr	r3, [pc, #132]	; (800574c <HAL_SD_MspInit+0x254>)
 80056c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056ca:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80056cc:	4b1f      	ldr	r3, [pc, #124]	; (800574c <HAL_SD_MspInit+0x254>)
 80056ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056d2:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 80056d4:	4b1d      	ldr	r3, [pc, #116]	; (800574c <HAL_SD_MspInit+0x254>)
 80056d6:	2220      	movs	r2, #32
 80056d8:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056da:	4b1c      	ldr	r3, [pc, #112]	; (800574c <HAL_SD_MspInit+0x254>)
 80056dc:	2200      	movs	r2, #0
 80056de:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80056e0:	4b1a      	ldr	r3, [pc, #104]	; (800574c <HAL_SD_MspInit+0x254>)
 80056e2:	2204      	movs	r2, #4
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80056e6:	4b19      	ldr	r3, [pc, #100]	; (800574c <HAL_SD_MspInit+0x254>)
 80056e8:	2203      	movs	r2, #3
 80056ea:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 80056ec:	4b17      	ldr	r3, [pc, #92]	; (800574c <HAL_SD_MspInit+0x254>)
 80056ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80056f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80056f4:	4b15      	ldr	r3, [pc, #84]	; (800574c <HAL_SD_MspInit+0x254>)
 80056f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80056fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 80056fc:	4813      	ldr	r0, [pc, #76]	; (800574c <HAL_SD_MspInit+0x254>)
 80056fe:	f000 fd7f 	bl	8006200 <HAL_DMA_Init>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <HAL_SD_MspInit+0x214>
    {
      Error_Handler();
 8005708:	f7fe fc84 	bl	8004014 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc2_tx);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a0f      	ldr	r2, [pc, #60]	; (800574c <HAL_SD_MspInit+0x254>)
 8005710:	63da      	str	r2, [r3, #60]	; 0x3c
 8005712:	4a0e      	ldr	r2, [pc, #56]	; (800574c <HAL_SD_MspInit+0x254>)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 5, 0);
 8005718:	2200      	movs	r2, #0
 800571a:	2105      	movs	r1, #5
 800571c:	2067      	movs	r0, #103	; 0x67
 800571e:	f000 fc5b 	bl	8005fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8005722:	2067      	movs	r0, #103	; 0x67
 8005724:	f000 fc74 	bl	8006010 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8005728:	bf00      	nop
 800572a:	37c0      	adds	r7, #192	; 0xc0
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40011c00 	.word	0x40011c00
 8005734:	40023800 	.word	0x40023800
 8005738:	40020400 	.word	0x40020400
 800573c:	40020c00 	.word	0x40020c00
 8005740:	40021800 	.word	0x40021800
 8005744:	2000966c 	.word	0x2000966c
 8005748:	40026410 	.word	0x40026410
 800574c:	20009564 	.word	0x20009564
 8005750:	40026488 	.word	0x40026488

08005754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b0ae      	sub	sp, #184	; 0xb8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800575c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	605a      	str	r2, [r3, #4]
 8005766:	609a      	str	r2, [r3, #8]
 8005768:	60da      	str	r2, [r3, #12]
 800576a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800576c:	f107 0314 	add.w	r3, r7, #20
 8005770:	2290      	movs	r2, #144	; 0x90
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f00b fe05 	bl	8011384 <memset>
  if(huart->Instance==USART1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a2c      	ldr	r2, [pc, #176]	; (8005830 <HAL_UART_MspInit+0xdc>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d151      	bne.n	8005828 <HAL_UART_MspInit+0xd4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005784:	2340      	movs	r3, #64	; 0x40
 8005786:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005788:	2300      	movs	r3, #0
 800578a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	4618      	mov	r0, r3
 8005792:	f001 ffb9 	bl	8007708 <HAL_RCCEx_PeriphCLKConfig>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800579c:	f7fe fc3a 	bl	8004014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057a0:	4b24      	ldr	r3, [pc, #144]	; (8005834 <HAL_UART_MspInit+0xe0>)
 80057a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a4:	4a23      	ldr	r2, [pc, #140]	; (8005834 <HAL_UART_MspInit+0xe0>)
 80057a6:	f043 0310 	orr.w	r3, r3, #16
 80057aa:	6453      	str	r3, [r2, #68]	; 0x44
 80057ac:	4b21      	ldr	r3, [pc, #132]	; (8005834 <HAL_UART_MspInit+0xe0>)
 80057ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057b8:	4b1e      	ldr	r3, [pc, #120]	; (8005834 <HAL_UART_MspInit+0xe0>)
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	4a1d      	ldr	r2, [pc, #116]	; (8005834 <HAL_UART_MspInit+0xe0>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	6313      	str	r3, [r2, #48]	; 0x30
 80057c4:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <HAL_UART_MspInit+0xe0>)
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80057d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d8:	2302      	movs	r3, #2
 80057da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e4:	2303      	movs	r3, #3
 80057e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80057ea:	2307      	movs	r3, #7
 80057ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80057f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4810      	ldr	r0, [pc, #64]	; (8005838 <HAL_UART_MspInit+0xe4>)
 80057f8:	f001 f8a8 	bl	800694c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80057fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005804:	2302      	movs	r3, #2
 8005806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800580a:	2300      	movs	r3, #0
 800580c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005810:	2300      	movs	r3, #0
 8005812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005816:	2307      	movs	r3, #7
 8005818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800581c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005820:	4619      	mov	r1, r3
 8005822:	4805      	ldr	r0, [pc, #20]	; (8005838 <HAL_UART_MspInit+0xe4>)
 8005824:	f001 f892 	bl	800694c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005828:	bf00      	nop
 800582a:	37b8      	adds	r7, #184	; 0xb8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40011000 	.word	0x40011000
 8005834:	40023800 	.word	0x40023800
 8005838:	40020000 	.word	0x40020000

0800583c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08c      	sub	sp, #48	; 0x30
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800584c:	2200      	movs	r2, #0
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	2019      	movs	r0, #25
 8005852:	f000 fbc1 	bl	8005fd8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005856:	2019      	movs	r0, #25
 8005858:	f000 fbda 	bl	8006010 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800585c:	4b1f      	ldr	r3, [pc, #124]	; (80058dc <HAL_InitTick+0xa0>)
 800585e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005860:	4a1e      	ldr	r2, [pc, #120]	; (80058dc <HAL_InitTick+0xa0>)
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	6453      	str	r3, [r2, #68]	; 0x44
 8005868:	4b1c      	ldr	r3, [pc, #112]	; (80058dc <HAL_InitTick+0xa0>)
 800586a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005874:	f107 0210 	add.w	r2, r7, #16
 8005878:	f107 0314 	add.w	r3, r7, #20
 800587c:	4611      	mov	r1, r2
 800587e:	4618      	mov	r0, r3
 8005880:	f001 ff10 	bl	80076a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005884:	f001 fefa 	bl	800767c <HAL_RCC_GetPCLK2Freq>
 8005888:	4603      	mov	r3, r0
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <HAL_InitTick+0xa4>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	0c9b      	lsrs	r3, r3, #18
 8005898:	3b01      	subs	r3, #1
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800589c:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <HAL_InitTick+0xa8>)
 800589e:	4a12      	ldr	r2, [pc, #72]	; (80058e8 <HAL_InitTick+0xac>)
 80058a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80058a2:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <HAL_InitTick+0xa8>)
 80058a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80058a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80058aa:	4a0e      	ldr	r2, [pc, #56]	; (80058e4 <HAL_InitTick+0xa8>)
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <HAL_InitTick+0xa8>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058b6:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <HAL_InitTick+0xa8>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80058bc:	4809      	ldr	r0, [pc, #36]	; (80058e4 <HAL_InitTick+0xa8>)
 80058be:	f003 fe74 	bl	80095aa <HAL_TIM_Base_Init>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d104      	bne.n	80058d2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80058c8:	4806      	ldr	r0, [pc, #24]	; (80058e4 <HAL_InitTick+0xa8>)
 80058ca:	f003 fecf 	bl	800966c <HAL_TIM_Base_Start_IT>
 80058ce:	4603      	mov	r3, r0
 80058d0:	e000      	b.n	80058d4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3730      	adds	r7, #48	; 0x30
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40023800 	.word	0x40023800
 80058e0:	431bde83 	.word	0x431bde83
 80058e4:	20009760 	.word	0x20009760
 80058e8:	40010000 	.word	0x40010000

080058ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058f0:	e7fe      	b.n	80058f0 <NMI_Handler+0x4>

080058f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058f2:	b480      	push	{r7}
 80058f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058f6:	e7fe      	b.n	80058f6 <HardFault_Handler+0x4>

080058f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058fc:	e7fe      	b.n	80058fc <MemManage_Handler+0x4>

080058fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058fe:	b480      	push	{r7}
 8005900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005902:	e7fe      	b.n	8005902 <BusFault_Handler+0x4>

08005904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005908:	e7fe      	b.n	8005908 <UsageFault_Handler+0x4>

0800590a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800590a:	b480      	push	{r7}
 800590c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800590e:	bf00      	nop
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800591c:	4802      	ldr	r0, [pc, #8]	; (8005928 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800591e:	f003 ff1d 	bl	800975c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005922:	bf00      	nop
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20009760 	.word	0x20009760

0800592c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 8005930:	4802      	ldr	r0, [pc, #8]	; (800593c <DMA2_Stream0_IRQHandler+0x10>)
 8005932:	f000 fd95 	bl	8006460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005936:	bf00      	nop
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	2000966c 	.word	0x2000966c

08005940 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8005944:	4802      	ldr	r0, [pc, #8]	; (8005950 <DMA2_Stream5_IRQHandler+0x10>)
 8005946:	f000 fd8b 	bl	8006460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800594a:	bf00      	nop
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20009564 	.word	0x20009564

08005954 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8005958:	4802      	ldr	r0, [pc, #8]	; (8005964 <SDMMC2_IRQHandler+0x10>)
 800595a:	f002 fd7d 	bl	8008458 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 800595e:	bf00      	nop
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	200095e8 	.word	0x200095e8

08005968 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005972:	f00a ff7b 	bl	801086c <__errno>
 8005976:	4603      	mov	r3, r0
 8005978:	2216      	movs	r2, #22
 800597a:	601a      	str	r2, [r3, #0]
	return -1;
 800597c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <_exit>:

void _exit (int status)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ffe7 	bl	8005968 <_kill>
	while (1) {}		/* Make sure we hang here */
 800599a:	e7fe      	b.n	800599a <_exit+0x12>

0800599c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	e00a      	b.n	80059c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80059ae:	f3af 8000 	nop.w
 80059b2:	4601      	mov	r1, r0
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	60ba      	str	r2, [r7, #8]
 80059ba:	b2ca      	uxtb	r2, r1
 80059bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	3301      	adds	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	dbf0      	blt.n	80059ae <_read+0x12>
	}

return len;
 80059cc:	687b      	ldr	r3, [r7, #4]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
	return -1;
 80059de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059fe:	605a      	str	r2, [r3, #4]
	return 0;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <_isatty>:

int _isatty(int file)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
	return 1;
 8005a16:	2301      	movs	r3, #1
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
	return 0;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <_open>:

int _open(char *path, int flags, ...)
{
 8005a3e:	b40e      	push	{r1, r2, r3}
 8005a40:	b480      	push	{r7}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8005a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	b003      	add	sp, #12
 8005a58:	4770      	bx	lr
	...

08005a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a64:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <_sbrk+0x5c>)
 8005a66:	4b15      	ldr	r3, [pc, #84]	; (8005abc <_sbrk+0x60>)
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a70:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <_sbrk+0x64>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d102      	bne.n	8005a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a78:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <_sbrk+0x64>)
 8005a7a:	4a12      	ldr	r2, [pc, #72]	; (8005ac4 <_sbrk+0x68>)
 8005a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a7e:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <_sbrk+0x64>)
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4413      	add	r3, r2
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d207      	bcs.n	8005a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a8c:	f00a feee 	bl	801086c <__errno>
 8005a90:	4603      	mov	r3, r0
 8005a92:	220c      	movs	r2, #12
 8005a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a9a:	e009      	b.n	8005ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a9c:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <_sbrk+0x64>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005aa2:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <_sbrk+0x64>)
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	4a05      	ldr	r2, [pc, #20]	; (8005ac0 <_sbrk+0x64>)
 8005aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005aae:	68fb      	ldr	r3, [r7, #12]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20080000 	.word	0x20080000
 8005abc:	00000800 	.word	0x00000800
 8005ac0:	200057c0 	.word	0x200057c0
 8005ac4:	20009c70 	.word	0x20009c70

08005ac8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <SystemInit+0x20>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad2:	4a05      	ldr	r2, [pc, #20]	; (8005ae8 <SystemInit+0x20>)
 8005ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005adc:	bf00      	nop
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	e000ed00 	.word	0xe000ed00

08005aec <timer_get_context>:
#include <timer.h>
#include <interrupts.h>

static timer_context ctx = {0};

timer_context *timer_get_context() {
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
    return &ctx;
 8005af0:	4b02      	ldr	r3, [pc, #8]	; (8005afc <timer_get_context+0x10>)
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	200057c4 	.word	0x200057c4

08005b00 <timer_init>:

void timer_init() {
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
    ctx.div = 0xAC00;
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <timer_init+0x18>)
 8005b06:	f44f 422c 	mov.w	r2, #44032	; 0xac00
 8005b0a:	801a      	strh	r2, [r3, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	200057c4 	.word	0x200057c4

08005b1c <timer_tick>:

void timer_tick() {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
    u16 prev_div = ctx.div;
 8005b22:	4b45      	ldr	r3, [pc, #276]	; (8005c38 <timer_tick+0x11c>)
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	80bb      	strh	r3, [r7, #4]

    ctx.div++;
 8005b28:	4b43      	ldr	r3, [pc, #268]	; (8005c38 <timer_tick+0x11c>)
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	4b41      	ldr	r3, [pc, #260]	; (8005c38 <timer_tick+0x11c>)
 8005b32:	801a      	strh	r2, [r3, #0]

    bool timer_update = false;
 8005b34:	2300      	movs	r3, #0
 8005b36:	71fb      	strb	r3, [r7, #7]

    switch(ctx.tac & (0b11)) {
 8005b38:	4b3f      	ldr	r3, [pc, #252]	; (8005c38 <timer_tick+0x11c>)
 8005b3a:	791b      	ldrb	r3, [r3, #4]
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d85b      	bhi.n	8005bfc <timer_tick+0xe0>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <timer_tick+0x30>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b5d 	.word	0x08005b5d
 8005b50:	08005b85 	.word	0x08005b85
 8005b54:	08005bad 	.word	0x08005bad
 8005b58:	08005bd5 	.word	0x08005bd5
        case 0b00:
            timer_update = (prev_div & (1 << 9)) && (!(ctx.div & (1 << 9)));
 8005b5c:	88bb      	ldrh	r3, [r7, #4]
 8005b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <timer_tick+0x5a>
 8005b66:	4b34      	ldr	r3, [pc, #208]	; (8005c38 <timer_tick+0x11c>)
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <timer_tick+0x5a>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <timer_tick+0x5c>
 8005b76:	2300      	movs	r3, #0
 8005b78:	71fb      	strb	r3, [r7, #7]
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	71fb      	strb	r3, [r7, #7]
            break;
 8005b82:	e03b      	b.n	8005bfc <timer_tick+0xe0>
        case 0b01:
            timer_update = (prev_div & (1 << 3)) && (!(ctx.div & (1 << 3)));
 8005b84:	88bb      	ldrh	r3, [r7, #4]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <timer_tick+0x82>
 8005b8e:	4b2a      	ldr	r3, [pc, #168]	; (8005c38 <timer_tick+0x11c>)
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <timer_tick+0x82>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <timer_tick+0x84>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	71fb      	strb	r3, [r7, #7]
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	71fb      	strb	r3, [r7, #7]
            break;
 8005baa:	e027      	b.n	8005bfc <timer_tick+0xe0>
        case 0b10:
            timer_update = (prev_div & (1 << 5)) && (!(ctx.div & (1 << 5)));
 8005bac:	88bb      	ldrh	r3, [r7, #4]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d007      	beq.n	8005bc6 <timer_tick+0xaa>
 8005bb6:	4b20      	ldr	r3, [pc, #128]	; (8005c38 <timer_tick+0x11c>)
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <timer_tick+0xaa>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <timer_tick+0xac>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	71fb      	strb	r3, [r7, #7]
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	71fb      	strb	r3, [r7, #7]
            break;
 8005bd2:	e013      	b.n	8005bfc <timer_tick+0xe0>
        case 0b11:
            timer_update = (prev_div & (1 << 7)) && (!(ctx.div & (1 << 7)));
 8005bd4:	88bb      	ldrh	r3, [r7, #4]
 8005bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <timer_tick+0xd2>
 8005bde:	4b16      	ldr	r3, [pc, #88]	; (8005c38 <timer_tick+0x11c>)
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <timer_tick+0xd2>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <timer_tick+0xd4>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	71fb      	strb	r3, [r7, #7]
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	71fb      	strb	r3, [r7, #7]
            break;
 8005bfa:	bf00      	nop
    }

    if (timer_update && ctx.tac & (1 << 2)) {
 8005bfc:	79fb      	ldrb	r3, [r7, #7]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <timer_tick+0x114>
 8005c02:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <timer_tick+0x11c>)
 8005c04:	791b      	ldrb	r3, [r3, #4]
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d010      	beq.n	8005c30 <timer_tick+0x114>
        ctx.tima++;
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <timer_tick+0x11c>)
 8005c10:	789b      	ldrb	r3, [r3, #2]
 8005c12:	3301      	adds	r3, #1
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <timer_tick+0x11c>)
 8005c18:	709a      	strb	r2, [r3, #2]

        if (ctx.tima == 0xFF) {
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <timer_tick+0x11c>)
 8005c1c:	789b      	ldrb	r3, [r3, #2]
 8005c1e:	2bff      	cmp	r3, #255	; 0xff
 8005c20:	d106      	bne.n	8005c30 <timer_tick+0x114>
            ctx.tima = ctx.tma;
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <timer_tick+0x11c>)
 8005c24:	78da      	ldrb	r2, [r3, #3]
 8005c26:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <timer_tick+0x11c>)
 8005c28:	709a      	strb	r2, [r3, #2]

            cpu_request_interrupt(IT_TIMER);
 8005c2a:	2004      	movs	r0, #4
 8005c2c:	f7fb fa32 	bl	8001094 <cpu_request_interrupt>
        }
    }
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	200057c4 	.word	0x200057c4

08005c3c <timer_write>:

void timer_write(u16 address, u8 value) {
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	460a      	mov	r2, r1
 8005c46:	80fb      	strh	r3, [r7, #6]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	717b      	strb	r3, [r7, #5]
    switch(address) {
 8005c4c:	88fa      	ldrh	r2, [r7, #6]
 8005c4e:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <timer_write+0x5c>)
 8005c50:	4413      	add	r3, r2
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d81a      	bhi.n	8005c8c <timer_write+0x50>
 8005c56:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <timer_write+0x20>)
 8005c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5c:	08005c6d 	.word	0x08005c6d
 8005c60:	08005c75 	.word	0x08005c75
 8005c64:	08005c7d 	.word	0x08005c7d
 8005c68:	08005c85 	.word	0x08005c85
        case 0xFF04:
            //DIV
            ctx.div = 0;
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <timer_write+0x60>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	801a      	strh	r2, [r3, #0]
            break;
 8005c72:	e00b      	b.n	8005c8c <timer_write+0x50>

        case 0xFF05:
            //TIMA
            ctx.tima = value;
 8005c74:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <timer_write+0x60>)
 8005c76:	797b      	ldrb	r3, [r7, #5]
 8005c78:	7093      	strb	r3, [r2, #2]
            break;
 8005c7a:	e007      	b.n	8005c8c <timer_write+0x50>

        case 0xFF06:
            //TMA
            ctx.tma = value;
 8005c7c:	4a07      	ldr	r2, [pc, #28]	; (8005c9c <timer_write+0x60>)
 8005c7e:	797b      	ldrb	r3, [r7, #5]
 8005c80:	70d3      	strb	r3, [r2, #3]
            break;
 8005c82:	e003      	b.n	8005c8c <timer_write+0x50>

        case 0xFF07:
            //TAC
            ctx.tac = value;
 8005c84:	4a05      	ldr	r2, [pc, #20]	; (8005c9c <timer_write+0x60>)
 8005c86:	797b      	ldrb	r3, [r7, #5]
 8005c88:	7113      	strb	r3, [r2, #4]
            break;
 8005c8a:	bf00      	nop
    }
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	ffff00fc 	.word	0xffff00fc
 8005c9c:	200057c4 	.word	0x200057c4

08005ca0 <timer_read>:

u8 timer_read(u16 address) {
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	80fb      	strh	r3, [r7, #6]
    switch(address) {
 8005caa:	88fa      	ldrh	r2, [r7, #6]
 8005cac:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <timer_read+0x58>)
 8005cae:	4413      	add	r3, r2
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d81a      	bhi.n	8005cea <timer_read+0x4a>
 8005cb4:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <timer_read+0x1c>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005ccd 	.word	0x08005ccd
 8005cc0:	08005cd9 	.word	0x08005cd9
 8005cc4:	08005cdf 	.word	0x08005cdf
 8005cc8:	08005ce5 	.word	0x08005ce5
        case 0xFF04:
            return ctx.div >> 8;
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <timer_read+0x5c>)
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	e009      	b.n	8005cec <timer_read+0x4c>
        case 0xFF05:
            return ctx.tima;
 8005cd8:	4b08      	ldr	r3, [pc, #32]	; (8005cfc <timer_read+0x5c>)
 8005cda:	789b      	ldrb	r3, [r3, #2]
 8005cdc:	e006      	b.n	8005cec <timer_read+0x4c>
        case 0xFF06:
            return ctx.tma;
 8005cde:	4b07      	ldr	r3, [pc, #28]	; (8005cfc <timer_read+0x5c>)
 8005ce0:	78db      	ldrb	r3, [r3, #3]
 8005ce2:	e003      	b.n	8005cec <timer_read+0x4c>
        case 0xFF07:
            return ctx.tac;
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <timer_read+0x5c>)
 8005ce6:	791b      	ldrb	r3, [r3, #4]
 8005ce8:	e000      	b.n	8005cec <timer_read+0x4c>
    }
    return 0;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	ffff00fc 	.word	0xffff00fc
 8005cfc:	200057c4 	.word	0x200057c4

08005d00 <ui_init>:
//SDL_Surface *debugScreen;

static int scale = 6;
//static int sde = 0;

void ui_init() {
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
//                                            (32 * 8 * scale) + (64 * scale));
//
//    int x, y;
//    SDL_GetWindowPosition(sdlWindow, &x, &y);
//    SDL_SetWindowPosition(sdlDebugWindow, x + SCREEN_WIDTH + 10, y);
}
 8005d04:	bf00      	nop
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <get_ticks>:

void delay(u32 ms) {
    //SDL_Delay(ms);
}

u32 get_ticks() {
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	af00      	add	r7, sp, #0
    return HAL_GetTick();//SDL_GetTicks();
 8005d12:	f000 f879 	bl	8005e08 <HAL_GetTick>
 8005d16:	4603      	mov	r3, r0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <ui_update>:
//	SDL_RenderClear(sdlDebugRenderer);
//	SDL_RenderCopy(sdlDebugRenderer, sdlDebugTexture, NULL, NULL);
//	SDL_RenderPresent(sdlDebugRenderer);
}

void ui_update() {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
//    SDL_Rect rc;
//    rc.x = rc.y = 0;
//    rc.w = rc.h = 2048;
//
    u32 *video_buffer = ppu_get_context()->video_buffer;
 8005d22:	f7fe f97d 	bl	8004020 <ppu_get_context>
 8005d26:	4602      	mov	r2, r0
 8005d28:	f242 1334 	movw	r3, #8500	; 0x2134
 8005d2c:	4413      	add	r3, r2
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	607b      	str	r3, [r7, #4]

    for (int line_num = 0; line_num < YRES; line_num++) {
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	e00c      	b.n	8005d52 <ui_update+0x36>
        for (int x = 0; x < XRES; x++) {
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60bb      	str	r3, [r7, #8]
 8005d3c:	e002      	b.n	8005d44 <ui_update+0x28>
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	3301      	adds	r3, #1
 8005d42:	60bb      	str	r3, [r7, #8]
 8005d44:	22a0      	movs	r2, #160	; 0xa0
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	dbf8      	blt.n	8005d3e <ui_update+0x22>
    for (int line_num = 0; line_num < YRES; line_num++) {
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	2290      	movs	r2, #144	; 0x90
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4293      	cmp	r3, r2
 8005d58:	dbee      	blt.n	8005d38 <ui_update+0x1c>
//    SDL_RenderClear(sdlRenderer);
//    SDL_RenderCopy(sdlRenderer, sdlTexture, NULL, NULL);
//    SDL_RenderPresent(sdlRenderer);

//    update_dbg_window();
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <ui_handle_events>:
//        case SDLK_RIGHT: gamepad_get_state()->right = down; break;
//    }

}

void ui_handle_events() {
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0
//
//        if (e.type == SDL_WINDOWEVENT && e.window.event == SDL_WINDOWEVENT_CLOSE) {
//            emu_get_context()->die = true;
//        }
//    }
}
 8005d68:	bf00      	nop
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005dac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d78:	480d      	ldr	r0, [pc, #52]	; (8005db0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005d7a:	490e      	ldr	r1, [pc, #56]	; (8005db4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005d7c:	4a0e      	ldr	r2, [pc, #56]	; (8005db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d80:	e002      	b.n	8005d88 <LoopCopyDataInit>

08005d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d86:	3304      	adds	r3, #4

08005d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d8c:	d3f9      	bcc.n	8005d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d8e:	4a0b      	ldr	r2, [pc, #44]	; (8005dbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005d90:	4c0b      	ldr	r4, [pc, #44]	; (8005dc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d94:	e001      	b.n	8005d9a <LoopFillZerobss>

08005d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d98:	3204      	adds	r2, #4

08005d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d9c:	d3fb      	bcc.n	8005d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005d9e:	f7ff fe93 	bl	8005ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005da2:	f00b fa45 	bl	8011230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005da6:	f7fd fbd3 	bl	8003550 <main>
  bx  lr    
 8005daa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005dac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8005db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005db4:	20000a40 	.word	0x20000a40
  ldr r2, =_sidata
 8005db8:	08012edc 	.word	0x08012edc
  ldr r2, =_sbss
 8005dbc:	20000a40 	.word	0x20000a40
  ldr r4, =_ebss
 8005dc0:	20009c6c 	.word	0x20009c6c

08005dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005dc4:	e7fe      	b.n	8005dc4 <ADC_IRQHandler>

08005dc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005dca:	2003      	movs	r0, #3
 8005dcc:	f000 f8f9 	bl	8005fc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005dd0:	200f      	movs	r0, #15
 8005dd2:	f7ff fd33 	bl	800583c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005dd6:	f7ff fb47 	bl	8005468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <HAL_IncTick+0x20>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <HAL_IncTick+0x24>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4413      	add	r3, r2
 8005df0:	4a04      	ldr	r2, [pc, #16]	; (8005e04 <HAL_IncTick+0x24>)
 8005df2:	6013      	str	r3, [r2, #0]
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	200009d4 	.word	0x200009d4
 8005e04:	200097ac 	.word	0x200097ac

08005e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8005e0c:	4b03      	ldr	r3, [pc, #12]	; (8005e1c <HAL_GetTick+0x14>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	200097ac 	.word	0x200097ac

08005e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e28:	f7ff ffee 	bl	8005e08 <HAL_GetTick>
 8005e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e38:	d005      	beq.n	8005e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <HAL_Delay+0x44>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e46:	bf00      	nop
 8005e48:	f7ff ffde 	bl	8005e08 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d8f7      	bhi.n	8005e48 <HAL_Delay+0x28>
  {
  }
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	200009d4 	.word	0x200009d4

08005e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e78:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e84:	4013      	ands	r3, r2
 8005e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005e90:	4b06      	ldr	r3, [pc, #24]	; (8005eac <__NVIC_SetPriorityGrouping+0x44>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e96:	4a04      	ldr	r2, [pc, #16]	; (8005ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	60d3      	str	r3, [r2, #12]
}
 8005e9c:	bf00      	nop
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	e000ed00 	.word	0xe000ed00
 8005eac:	05fa0000 	.word	0x05fa0000

08005eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005eb4:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	f003 0307 	and.w	r3, r3, #7
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	e000ed00 	.word	0xe000ed00

08005ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	db0b      	blt.n	8005ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	f003 021f 	and.w	r2, r3, #31
 8005ee4:	4907      	ldr	r1, [pc, #28]	; (8005f04 <__NVIC_EnableIRQ+0x38>)
 8005ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	2001      	movs	r0, #1
 8005eee:	fa00 f202 	lsl.w	r2, r0, r2
 8005ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	e000e100 	.word	0xe000e100

08005f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	6039      	str	r1, [r7, #0]
 8005f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	db0a      	blt.n	8005f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	490c      	ldr	r1, [pc, #48]	; (8005f54 <__NVIC_SetPriority+0x4c>)
 8005f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f26:	0112      	lsls	r2, r2, #4
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f30:	e00a      	b.n	8005f48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	4908      	ldr	r1, [pc, #32]	; (8005f58 <__NVIC_SetPriority+0x50>)
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	3b04      	subs	r3, #4
 8005f40:	0112      	lsls	r2, r2, #4
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	440b      	add	r3, r1
 8005f46:	761a      	strb	r2, [r3, #24]
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	e000e100 	.word	0xe000e100
 8005f58:	e000ed00 	.word	0xe000ed00

08005f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f1c3 0307 	rsb	r3, r3, #7
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	bf28      	it	cs
 8005f7a:	2304      	movcs	r3, #4
 8005f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	3304      	adds	r3, #4
 8005f82:	2b06      	cmp	r3, #6
 8005f84:	d902      	bls.n	8005f8c <NVIC_EncodePriority+0x30>
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	3b03      	subs	r3, #3
 8005f8a:	e000      	b.n	8005f8e <NVIC_EncodePriority+0x32>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9a:	43da      	mvns	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	401a      	ands	r2, r3
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	fa01 f303 	lsl.w	r3, r1, r3
 8005fae:	43d9      	mvns	r1, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb4:	4313      	orrs	r3, r2
         );
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3724      	adds	r7, #36	; 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff ff4c 	bl	8005e68 <__NVIC_SetPriorityGrouping>
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005fea:	f7ff ff61 	bl	8005eb0 <__NVIC_GetPriorityGrouping>
 8005fee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	6978      	ldr	r0, [r7, #20]
 8005ff6:	f7ff ffb1 	bl	8005f5c <NVIC_EncodePriority>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006000:	4611      	mov	r1, r2
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff ff80 	bl	8005f08 <__NVIC_SetPriority>
}
 8006008:	bf00      	nop
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800601a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff ff54 	bl	8005ecc <__NVIC_EnableIRQ>
}
 8006024:	bf00      	nop
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e054      	b.n	80060e8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	7f5b      	ldrb	r3, [r3, #29]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d105      	bne.n	8006054 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff fa32 	bl	80054b8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	791b      	ldrb	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10c      	bne.n	800607c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a22      	ldr	r2, [pc, #136]	; (80060f0 <HAL_CRC_Init+0xc4>)
 8006068:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0218 	bic.w	r2, r2, #24
 8006078:	609a      	str	r2, [r3, #8]
 800607a:	e00c      	b.n	8006096 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6899      	ldr	r1, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	461a      	mov	r2, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f834 	bl	80060f4 <HAL_CRCEx_Polynomial_Set>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e028      	b.n	80060e8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	795b      	ldrb	r3, [r3, #5]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d105      	bne.n	80060aa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060a6:	611a      	str	r2, [r3, #16]
 80060a8:	e004      	b.n	80060b4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6912      	ldr	r2, [r2, #16]
 80060b2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695a      	ldr	r2, [r3, #20]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	699a      	ldr	r2, [r3, #24]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	04c11db7 	.word	0x04c11db7

080060f4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006104:	231f      	movs	r3, #31
 8006106:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006108:	bf00      	nop
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1e5a      	subs	r2, r3, #1
 800610e:	613a      	str	r2, [r7, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d009      	beq.n	8006128 <HAL_CRCEx_Polynomial_Set+0x34>
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	fa22 f303 	lsr.w	r3, r2, r3
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0f0      	beq.n	800610a <HAL_CRCEx_Polynomial_Set+0x16>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b18      	cmp	r3, #24
 800612c:	d846      	bhi.n	80061bc <HAL_CRCEx_Polynomial_Set+0xc8>
 800612e:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006134:	080061c3 	.word	0x080061c3
 8006138:	080061bd 	.word	0x080061bd
 800613c:	080061bd 	.word	0x080061bd
 8006140:	080061bd 	.word	0x080061bd
 8006144:	080061bd 	.word	0x080061bd
 8006148:	080061bd 	.word	0x080061bd
 800614c:	080061bd 	.word	0x080061bd
 8006150:	080061bd 	.word	0x080061bd
 8006154:	080061b1 	.word	0x080061b1
 8006158:	080061bd 	.word	0x080061bd
 800615c:	080061bd 	.word	0x080061bd
 8006160:	080061bd 	.word	0x080061bd
 8006164:	080061bd 	.word	0x080061bd
 8006168:	080061bd 	.word	0x080061bd
 800616c:	080061bd 	.word	0x080061bd
 8006170:	080061bd 	.word	0x080061bd
 8006174:	080061a5 	.word	0x080061a5
 8006178:	080061bd 	.word	0x080061bd
 800617c:	080061bd 	.word	0x080061bd
 8006180:	080061bd 	.word	0x080061bd
 8006184:	080061bd 	.word	0x080061bd
 8006188:	080061bd 	.word	0x080061bd
 800618c:	080061bd 	.word	0x080061bd
 8006190:	080061bd 	.word	0x080061bd
 8006194:	08006199 	.word	0x08006199
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2b06      	cmp	r3, #6
 800619c:	d913      	bls.n	80061c6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80061a2:	e010      	b.n	80061c6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b07      	cmp	r3, #7
 80061a8:	d90f      	bls.n	80061ca <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80061ae:	e00c      	b.n	80061ca <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	2b0f      	cmp	r3, #15
 80061b4:	d90b      	bls.n	80061ce <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80061ba:	e008      	b.n	80061ce <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	75fb      	strb	r3, [r7, #23]
      break;
 80061c0:	e006      	b.n	80061d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80061c2:	bf00      	nop
 80061c4:	e004      	b.n	80061d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80061c6:	bf00      	nop
 80061c8:	e002      	b.n	80061d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80061ca:	bf00      	nop
 80061cc:	e000      	b.n	80061d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80061ce:	bf00      	nop
  }
  if (status == HAL_OK)
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10d      	bne.n	80061f2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f023 0118 	bic.w	r1, r3, #24
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800620c:	f7ff fdfc 	bl	8005e08 <HAL_GetTick>
 8006210:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e099      	b.n	8006350 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0201 	bic.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800623c:	e00f      	b.n	800625e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800623e:	f7ff fde3 	bl	8005e08 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b05      	cmp	r3, #5
 800624a:	d908      	bls.n	800625e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2203      	movs	r2, #3
 8006256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e078      	b.n	8006350 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e8      	bne.n	800623e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4b38      	ldr	r3, [pc, #224]	; (8006358 <HAL_DMA_Init+0x158>)
 8006278:	4013      	ands	r3, r2
 800627a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800628a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d107      	bne.n	80062c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	4313      	orrs	r3, r2
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f023 0307 	bic.w	r3, r3, #7
 80062de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d117      	bne.n	8006322 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00e      	beq.n	8006322 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 faa5 	bl	8006854 <DMA_CheckFifoParam>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2240      	movs	r2, #64	; 0x40
 8006314:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800631e:	2301      	movs	r3, #1
 8006320:	e016      	b.n	8006350 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fa5c 	bl	80067e8 <DMA_CalcBaseAndBitshift>
 8006330:	4603      	mov	r3, r0
 8006332:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006338:	223f      	movs	r2, #63	; 0x3f
 800633a:	409a      	lsls	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	e010803f 	.word	0xe010803f

0800635c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006372:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_DMA_Start_IT+0x26>
 800637e:	2302      	movs	r3, #2
 8006380:	e048      	b.n	8006414 <HAL_DMA_Start_IT+0xb8>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b01      	cmp	r3, #1
 8006394:	d137      	bne.n	8006406 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2202      	movs	r2, #2
 800639a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 f9ee 	bl	800678c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b4:	223f      	movs	r2, #63	; 0x3f
 80063b6:	409a      	lsls	r2, r3
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0216 	orr.w	r2, r2, #22
 80063ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695a      	ldr	r2, [r3, #20]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063da:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0208 	orr.w	r2, r2, #8
 80063f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	e005      	b.n	8006412 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800640e:	2302      	movs	r3, #2
 8006410:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006412:	7dfb      	ldrb	r3, [r7, #23]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d004      	beq.n	800643a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2280      	movs	r2, #128	; 0x80
 8006434:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e00c      	b.n	8006454 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2205      	movs	r2, #5
 800643e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0201 	bic.w	r2, r2, #1
 8006450:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800646c:	4b92      	ldr	r3, [pc, #584]	; (80066b8 <HAL_DMA_IRQHandler+0x258>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a92      	ldr	r2, [pc, #584]	; (80066bc <HAL_DMA_IRQHandler+0x25c>)
 8006472:	fba2 2303 	umull	r2, r3, r2, r3
 8006476:	0a9b      	lsrs	r3, r3, #10
 8006478:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648a:	2208      	movs	r2, #8
 800648c:	409a      	lsls	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4013      	ands	r3, r2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d01a      	beq.n	80064cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d013      	beq.n	80064cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0204 	bic.w	r2, r2, #4
 80064b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b8:	2208      	movs	r2, #8
 80064ba:	409a      	lsls	r2, r3
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c4:	f043 0201 	orr.w	r2, r3, #1
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d0:	2201      	movs	r2, #1
 80064d2:	409a      	lsls	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4013      	ands	r3, r2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d012      	beq.n	8006502 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00b      	beq.n	8006502 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ee:	2201      	movs	r2, #1
 80064f0:	409a      	lsls	r2, r3
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fa:	f043 0202 	orr.w	r2, r3, #2
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006506:	2204      	movs	r2, #4
 8006508:	409a      	lsls	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4013      	ands	r3, r2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d012      	beq.n	8006538 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00b      	beq.n	8006538 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006524:	2204      	movs	r2, #4
 8006526:	409a      	lsls	r2, r3
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006530:	f043 0204 	orr.w	r2, r3, #4
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653c:	2210      	movs	r2, #16
 800653e:	409a      	lsls	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4013      	ands	r3, r2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d043      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d03c      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655a:	2210      	movs	r2, #16
 800655c:	409a      	lsls	r2, r3
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d018      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d108      	bne.n	8006590 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	d024      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
 800658e:	e01f      	b.n	80065d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01b      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4798      	blx	r3
 80065a0:	e016      	b.n	80065d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d107      	bne.n	80065c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0208 	bic.w	r2, r2, #8
 80065be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d4:	2220      	movs	r2, #32
 80065d6:	409a      	lsls	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4013      	ands	r3, r2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 808e 	beq.w	80066fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 8086 	beq.w	80066fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f6:	2220      	movs	r2, #32
 80065f8:	409a      	lsls	r2, r3
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b05      	cmp	r3, #5
 8006608:	d136      	bne.n	8006678 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0216 	bic.w	r2, r2, #22
 8006618:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695a      	ldr	r2, [r3, #20]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006628:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	2b00      	cmp	r3, #0
 8006630:	d103      	bne.n	800663a <HAL_DMA_IRQHandler+0x1da>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006636:	2b00      	cmp	r3, #0
 8006638:	d007      	beq.n	800664a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0208 	bic.w	r2, r2, #8
 8006648:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664e:	223f      	movs	r2, #63	; 0x3f
 8006650:	409a      	lsls	r2, r3
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666a:	2b00      	cmp	r3, #0
 800666c:	d07d      	beq.n	800676a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	4798      	blx	r3
        }
        return;
 8006676:	e078      	b.n	800676a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01c      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d108      	bne.n	80066a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006698:	2b00      	cmp	r3, #0
 800669a:	d030      	beq.n	80066fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	4798      	blx	r3
 80066a4:	e02b      	b.n	80066fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d027      	beq.n	80066fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
 80066b6:	e022      	b.n	80066fe <HAL_DMA_IRQHandler+0x29e>
 80066b8:	200009cc 	.word	0x200009cc
 80066bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10f      	bne.n	80066ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0210 	bic.w	r2, r2, #16
 80066dc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006702:	2b00      	cmp	r3, #0
 8006704:	d032      	beq.n	800676c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d022      	beq.n	8006758 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2205      	movs	r2, #5
 8006716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0201 	bic.w	r2, r2, #1
 8006728:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	3301      	adds	r3, #1
 800672e:	60bb      	str	r3, [r7, #8]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	429a      	cmp	r2, r3
 8006734:	d307      	bcc.n	8006746 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1f2      	bne.n	800672a <HAL_DMA_IRQHandler+0x2ca>
 8006744:	e000      	b.n	8006748 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006746:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	4798      	blx	r3
 8006768:	e000      	b.n	800676c <HAL_DMA_IRQHandler+0x30c>
        return;
 800676a:	bf00      	nop
    }
  }
}
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop

08006774 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d108      	bne.n	80067cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067ca:	e007      	b.n	80067dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	60da      	str	r2, [r3, #12]
}
 80067dc:	bf00      	nop
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	3b10      	subs	r3, #16
 80067f8:	4a13      	ldr	r2, [pc, #76]	; (8006848 <DMA_CalcBaseAndBitshift+0x60>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	091b      	lsrs	r3, r3, #4
 8006800:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006802:	4a12      	ldr	r2, [pc, #72]	; (800684c <DMA_CalcBaseAndBitshift+0x64>)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4413      	add	r3, r2
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b03      	cmp	r3, #3
 8006814:	d908      	bls.n	8006828 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	4b0c      	ldr	r3, [pc, #48]	; (8006850 <DMA_CalcBaseAndBitshift+0x68>)
 800681e:	4013      	ands	r3, r2
 8006820:	1d1a      	adds	r2, r3, #4
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	659a      	str	r2, [r3, #88]	; 0x58
 8006826:	e006      	b.n	8006836 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	4b08      	ldr	r3, [pc, #32]	; (8006850 <DMA_CalcBaseAndBitshift+0x68>)
 8006830:	4013      	ands	r3, r2
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	aaaaaaab 	.word	0xaaaaaaab
 800684c:	08012d98 	.word	0x08012d98
 8006850:	fffffc00 	.word	0xfffffc00

08006854 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d11f      	bne.n	80068ae <DMA_CheckFifoParam+0x5a>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b03      	cmp	r3, #3
 8006872:	d856      	bhi.n	8006922 <DMA_CheckFifoParam+0xce>
 8006874:	a201      	add	r2, pc, #4	; (adr r2, 800687c <DMA_CheckFifoParam+0x28>)
 8006876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687a:	bf00      	nop
 800687c:	0800688d 	.word	0x0800688d
 8006880:	0800689f 	.word	0x0800689f
 8006884:	0800688d 	.word	0x0800688d
 8006888:	08006923 	.word	0x08006923
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d046      	beq.n	8006926 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800689c:	e043      	b.n	8006926 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068a6:	d140      	bne.n	800692a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ac:	e03d      	b.n	800692a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b6:	d121      	bne.n	80068fc <DMA_CheckFifoParam+0xa8>
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d837      	bhi.n	800692e <DMA_CheckFifoParam+0xda>
 80068be:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <DMA_CheckFifoParam+0x70>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	080068d5 	.word	0x080068d5
 80068c8:	080068db 	.word	0x080068db
 80068cc:	080068d5 	.word	0x080068d5
 80068d0:	080068ed 	.word	0x080068ed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]
      break;
 80068d8:	e030      	b.n	800693c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d025      	beq.n	8006932 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ea:	e022      	b.n	8006932 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068f4:	d11f      	bne.n	8006936 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068fa:	e01c      	b.n	8006936 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d903      	bls.n	800690a <DMA_CheckFifoParam+0xb6>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b03      	cmp	r3, #3
 8006906:	d003      	beq.n	8006910 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006908:	e018      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	73fb      	strb	r3, [r7, #15]
      break;
 800690e:	e015      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00e      	beq.n	800693a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	73fb      	strb	r3, [r7, #15]
      break;
 8006920:	e00b      	b.n	800693a <DMA_CheckFifoParam+0xe6>
      break;
 8006922:	bf00      	nop
 8006924:	e00a      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      break;
 8006926:	bf00      	nop
 8006928:	e008      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      break;
 800692a:	bf00      	nop
 800692c:	e006      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      break;
 800692e:	bf00      	nop
 8006930:	e004      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      break;
 8006932:	bf00      	nop
 8006934:	e002      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      break;   
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      break;
 800693a:	bf00      	nop
    }
  } 
  
  return status; 
 800693c:	7bfb      	ldrb	r3, [r7, #15]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop

0800694c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800694c:	b480      	push	{r7}
 800694e:	b089      	sub	sp, #36	; 0x24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006956:	2300      	movs	r3, #0
 8006958:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800695e:	2300      	movs	r3, #0
 8006960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006962:	2300      	movs	r3, #0
 8006964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006966:	2300      	movs	r3, #0
 8006968:	61fb      	str	r3, [r7, #28]
 800696a:	e175      	b.n	8006c58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800696c:	2201      	movs	r2, #1
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	fa02 f303 	lsl.w	r3, r2, r3
 8006974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	4013      	ands	r3, r2
 800697e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	429a      	cmp	r2, r3
 8006986:	f040 8164 	bne.w	8006c52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	2b01      	cmp	r3, #1
 8006994:	d005      	beq.n	80069a2 <HAL_GPIO_Init+0x56>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d130      	bne.n	8006a04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	2203      	movs	r2, #3
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	43db      	mvns	r3, r3
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	4013      	ands	r3, r2
 80069b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069d8:	2201      	movs	r2, #1
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	43db      	mvns	r3, r3
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	4013      	ands	r3, r2
 80069e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	091b      	lsrs	r3, r3, #4
 80069ee:	f003 0201 	and.w	r2, r3, #1
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	fa02 f303 	lsl.w	r3, r2, r3
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d017      	beq.n	8006a40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	2203      	movs	r2, #3
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	43db      	mvns	r3, r3
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	4013      	ands	r3, r2
 8006a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f003 0303 	and.w	r3, r3, #3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d123      	bne.n	8006a94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	08da      	lsrs	r2, r3, #3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3208      	adds	r2, #8
 8006a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	220f      	movs	r2, #15
 8006a64:	fa02 f303 	lsl.w	r3, r2, r3
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	691a      	ldr	r2, [r3, #16]
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	08da      	lsrs	r2, r3, #3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3208      	adds	r2, #8
 8006a8e:	69b9      	ldr	r1, [r7, #24]
 8006a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	2203      	movs	r2, #3
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	43db      	mvns	r3, r3
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f003 0203 	and.w	r2, r3, #3
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80be 	beq.w	8006c52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ad6:	4b66      	ldr	r3, [pc, #408]	; (8006c70 <HAL_GPIO_Init+0x324>)
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ada:	4a65      	ldr	r2, [pc, #404]	; (8006c70 <HAL_GPIO_Init+0x324>)
 8006adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8006ae2:	4b63      	ldr	r3, [pc, #396]	; (8006c70 <HAL_GPIO_Init+0x324>)
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006aee:	4a61      	ldr	r2, [pc, #388]	; (8006c74 <HAL_GPIO_Init+0x328>)
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	089b      	lsrs	r3, r3, #2
 8006af4:	3302      	adds	r3, #2
 8006af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	220f      	movs	r2, #15
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a58      	ldr	r2, [pc, #352]	; (8006c78 <HAL_GPIO_Init+0x32c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d037      	beq.n	8006b8a <HAL_GPIO_Init+0x23e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a57      	ldr	r2, [pc, #348]	; (8006c7c <HAL_GPIO_Init+0x330>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d031      	beq.n	8006b86 <HAL_GPIO_Init+0x23a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a56      	ldr	r2, [pc, #344]	; (8006c80 <HAL_GPIO_Init+0x334>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d02b      	beq.n	8006b82 <HAL_GPIO_Init+0x236>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a55      	ldr	r2, [pc, #340]	; (8006c84 <HAL_GPIO_Init+0x338>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d025      	beq.n	8006b7e <HAL_GPIO_Init+0x232>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a54      	ldr	r2, [pc, #336]	; (8006c88 <HAL_GPIO_Init+0x33c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d01f      	beq.n	8006b7a <HAL_GPIO_Init+0x22e>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a53      	ldr	r2, [pc, #332]	; (8006c8c <HAL_GPIO_Init+0x340>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d019      	beq.n	8006b76 <HAL_GPIO_Init+0x22a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a52      	ldr	r2, [pc, #328]	; (8006c90 <HAL_GPIO_Init+0x344>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d013      	beq.n	8006b72 <HAL_GPIO_Init+0x226>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a51      	ldr	r2, [pc, #324]	; (8006c94 <HAL_GPIO_Init+0x348>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00d      	beq.n	8006b6e <HAL_GPIO_Init+0x222>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a50      	ldr	r2, [pc, #320]	; (8006c98 <HAL_GPIO_Init+0x34c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d007      	beq.n	8006b6a <HAL_GPIO_Init+0x21e>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a4f      	ldr	r2, [pc, #316]	; (8006c9c <HAL_GPIO_Init+0x350>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d101      	bne.n	8006b66 <HAL_GPIO_Init+0x21a>
 8006b62:	2309      	movs	r3, #9
 8006b64:	e012      	b.n	8006b8c <HAL_GPIO_Init+0x240>
 8006b66:	230a      	movs	r3, #10
 8006b68:	e010      	b.n	8006b8c <HAL_GPIO_Init+0x240>
 8006b6a:	2308      	movs	r3, #8
 8006b6c:	e00e      	b.n	8006b8c <HAL_GPIO_Init+0x240>
 8006b6e:	2307      	movs	r3, #7
 8006b70:	e00c      	b.n	8006b8c <HAL_GPIO_Init+0x240>
 8006b72:	2306      	movs	r3, #6
 8006b74:	e00a      	b.n	8006b8c <HAL_GPIO_Init+0x240>
 8006b76:	2305      	movs	r3, #5
 8006b78:	e008      	b.n	8006b8c <HAL_GPIO_Init+0x240>
 8006b7a:	2304      	movs	r3, #4
 8006b7c:	e006      	b.n	8006b8c <HAL_GPIO_Init+0x240>
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e004      	b.n	8006b8c <HAL_GPIO_Init+0x240>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e002      	b.n	8006b8c <HAL_GPIO_Init+0x240>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <HAL_GPIO_Init+0x240>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	f002 0203 	and.w	r2, r2, #3
 8006b92:	0092      	lsls	r2, r2, #2
 8006b94:	4093      	lsls	r3, r2
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006b9c:	4935      	ldr	r1, [pc, #212]	; (8006c74 <HAL_GPIO_Init+0x328>)
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	089b      	lsrs	r3, r3, #2
 8006ba2:	3302      	adds	r3, #2
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006baa:	4b3d      	ldr	r3, [pc, #244]	; (8006ca0 <HAL_GPIO_Init+0x354>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	43db      	mvns	r3, r3
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006bce:	4a34      	ldr	r2, [pc, #208]	; (8006ca0 <HAL_GPIO_Init+0x354>)
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006bd4:	4b32      	ldr	r3, [pc, #200]	; (8006ca0 <HAL_GPIO_Init+0x354>)
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	43db      	mvns	r3, r3
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	4013      	ands	r3, r2
 8006be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006bf8:	4a29      	ldr	r2, [pc, #164]	; (8006ca0 <HAL_GPIO_Init+0x354>)
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006bfe:	4b28      	ldr	r3, [pc, #160]	; (8006ca0 <HAL_GPIO_Init+0x354>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	43db      	mvns	r3, r3
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c22:	4a1f      	ldr	r2, [pc, #124]	; (8006ca0 <HAL_GPIO_Init+0x354>)
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c28:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <HAL_GPIO_Init+0x354>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	43db      	mvns	r3, r3
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	4013      	ands	r3, r2
 8006c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c4c:	4a14      	ldr	r2, [pc, #80]	; (8006ca0 <HAL_GPIO_Init+0x354>)
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	3301      	adds	r3, #1
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	2b0f      	cmp	r3, #15
 8006c5c:	f67f ae86 	bls.w	800696c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006c60:	bf00      	nop
 8006c62:	bf00      	nop
 8006c64:	3724      	adds	r7, #36	; 0x24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40023800 	.word	0x40023800
 8006c74:	40013800 	.word	0x40013800
 8006c78:	40020000 	.word	0x40020000
 8006c7c:	40020400 	.word	0x40020400
 8006c80:	40020800 	.word	0x40020800
 8006c84:	40020c00 	.word	0x40020c00
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	40021400 	.word	0x40021400
 8006c90:	40021800 	.word	0x40021800
 8006c94:	40021c00 	.word	0x40021c00
 8006c98:	40022000 	.word	0x40022000
 8006c9c:	40022400 	.word	0x40022400
 8006ca0:	40013c00 	.word	0x40013c00

08006ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	887b      	ldrh	r3, [r7, #2]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	73fb      	strb	r3, [r7, #15]
 8006cc0:	e001      	b.n	8006cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e29b      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 8087 	beq.w	8006e06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cf8:	4b96      	ldr	r3, [pc, #600]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 030c 	and.w	r3, r3, #12
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d00c      	beq.n	8006d1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d04:	4b93      	ldr	r3, [pc, #588]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f003 030c 	and.w	r3, r3, #12
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d112      	bne.n	8006d36 <HAL_RCC_OscConfig+0x62>
 8006d10:	4b90      	ldr	r3, [pc, #576]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d1c:	d10b      	bne.n	8006d36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d1e:	4b8d      	ldr	r3, [pc, #564]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d06c      	beq.n	8006e04 <HAL_RCC_OscConfig+0x130>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d168      	bne.n	8006e04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e275      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3e:	d106      	bne.n	8006d4e <HAL_RCC_OscConfig+0x7a>
 8006d40:	4b84      	ldr	r3, [pc, #528]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a83      	ldr	r2, [pc, #524]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	e02e      	b.n	8006dac <HAL_RCC_OscConfig+0xd8>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10c      	bne.n	8006d70 <HAL_RCC_OscConfig+0x9c>
 8006d56:	4b7f      	ldr	r3, [pc, #508]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a7e      	ldr	r2, [pc, #504]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	4b7c      	ldr	r3, [pc, #496]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a7b      	ldr	r2, [pc, #492]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	e01d      	b.n	8006dac <HAL_RCC_OscConfig+0xd8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d78:	d10c      	bne.n	8006d94 <HAL_RCC_OscConfig+0xc0>
 8006d7a:	4b76      	ldr	r3, [pc, #472]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a75      	ldr	r2, [pc, #468]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	4b73      	ldr	r3, [pc, #460]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a72      	ldr	r2, [pc, #456]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	e00b      	b.n	8006dac <HAL_RCC_OscConfig+0xd8>
 8006d94:	4b6f      	ldr	r3, [pc, #444]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a6e      	ldr	r2, [pc, #440]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	4b6c      	ldr	r3, [pc, #432]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a6b      	ldr	r2, [pc, #428]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d013      	beq.n	8006ddc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db4:	f7ff f828 	bl	8005e08 <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dbc:	f7ff f824 	bl	8005e08 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b64      	cmp	r3, #100	; 0x64
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e229      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dce:	4b61      	ldr	r3, [pc, #388]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0f0      	beq.n	8006dbc <HAL_RCC_OscConfig+0xe8>
 8006dda:	e014      	b.n	8006e06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ddc:	f7ff f814 	bl	8005e08 <HAL_GetTick>
 8006de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006de2:	e008      	b.n	8006df6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006de4:	f7ff f810 	bl	8005e08 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b64      	cmp	r3, #100	; 0x64
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e215      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006df6:	4b57      	ldr	r3, [pc, #348]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1f0      	bne.n	8006de4 <HAL_RCC_OscConfig+0x110>
 8006e02:	e000      	b.n	8006e06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d069      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e12:	4b50      	ldr	r3, [pc, #320]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f003 030c 	and.w	r3, r3, #12
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00b      	beq.n	8006e36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e1e:	4b4d      	ldr	r3, [pc, #308]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 030c 	and.w	r3, r3, #12
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d11c      	bne.n	8006e64 <HAL_RCC_OscConfig+0x190>
 8006e2a:	4b4a      	ldr	r3, [pc, #296]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d116      	bne.n	8006e64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e36:	4b47      	ldr	r3, [pc, #284]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d005      	beq.n	8006e4e <HAL_RCC_OscConfig+0x17a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d001      	beq.n	8006e4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e1e9      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e4e:	4b41      	ldr	r3, [pc, #260]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	493d      	ldr	r1, [pc, #244]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e62:	e040      	b.n	8006ee6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d023      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e6c:	4b39      	ldr	r3, [pc, #228]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a38      	ldr	r2, [pc, #224]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006e72:	f043 0301 	orr.w	r3, r3, #1
 8006e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e78:	f7fe ffc6 	bl	8005e08 <HAL_GetTick>
 8006e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e80:	f7fe ffc2 	bl	8005e08 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e1c7      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e92:	4b30      	ldr	r3, [pc, #192]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0f0      	beq.n	8006e80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e9e:	4b2d      	ldr	r3, [pc, #180]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	4929      	ldr	r1, [pc, #164]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	600b      	str	r3, [r1, #0]
 8006eb2:	e018      	b.n	8006ee6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eb4:	4b27      	ldr	r3, [pc, #156]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a26      	ldr	r2, [pc, #152]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006eba:	f023 0301 	bic.w	r3, r3, #1
 8006ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec0:	f7fe ffa2 	bl	8005e08 <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ec8:	f7fe ff9e 	bl	8005e08 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e1a3      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eda:	4b1e      	ldr	r3, [pc, #120]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f0      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d038      	beq.n	8006f64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d019      	beq.n	8006f2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006efa:	4b16      	ldr	r3, [pc, #88]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006efe:	4a15      	ldr	r2, [pc, #84]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006f00:	f043 0301 	orr.w	r3, r3, #1
 8006f04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f06:	f7fe ff7f 	bl	8005e08 <HAL_GetTick>
 8006f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f0c:	e008      	b.n	8006f20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f0e:	f7fe ff7b 	bl	8005e08 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d901      	bls.n	8006f20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e180      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f20:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0f0      	beq.n	8006f0e <HAL_RCC_OscConfig+0x23a>
 8006f2c:	e01a      	b.n	8006f64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f2e:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f32:	4a08      	ldr	r2, [pc, #32]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006f34:	f023 0301 	bic.w	r3, r3, #1
 8006f38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f3a:	f7fe ff65 	bl	8005e08 <HAL_GetTick>
 8006f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f40:	e00a      	b.n	8006f58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f42:	f7fe ff61 	bl	8005e08 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d903      	bls.n	8006f58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e166      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
 8006f54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f58:	4b92      	ldr	r3, [pc, #584]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8006f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1ee      	bne.n	8006f42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0304 	and.w	r3, r3, #4
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 80a4 	beq.w	80070ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f72:	4b8c      	ldr	r3, [pc, #560]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10d      	bne.n	8006f9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f7e:	4b89      	ldr	r3, [pc, #548]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	4a88      	ldr	r2, [pc, #544]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8006f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f88:	6413      	str	r3, [r2, #64]	; 0x40
 8006f8a:	4b86      	ldr	r3, [pc, #536]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f92:	60bb      	str	r3, [r7, #8]
 8006f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f96:	2301      	movs	r3, #1
 8006f98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f9a:	4b83      	ldr	r3, [pc, #524]	; (80071a8 <HAL_RCC_OscConfig+0x4d4>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d118      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006fa6:	4b80      	ldr	r3, [pc, #512]	; (80071a8 <HAL_RCC_OscConfig+0x4d4>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a7f      	ldr	r2, [pc, #508]	; (80071a8 <HAL_RCC_OscConfig+0x4d4>)
 8006fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fb2:	f7fe ff29 	bl	8005e08 <HAL_GetTick>
 8006fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fba:	f7fe ff25 	bl	8005e08 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b64      	cmp	r3, #100	; 0x64
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e12a      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fcc:	4b76      	ldr	r3, [pc, #472]	; (80071a8 <HAL_RCC_OscConfig+0x4d4>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0f0      	beq.n	8006fba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d106      	bne.n	8006fee <HAL_RCC_OscConfig+0x31a>
 8006fe0:	4b70      	ldr	r3, [pc, #448]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8006fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe4:	4a6f      	ldr	r2, [pc, #444]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	6713      	str	r3, [r2, #112]	; 0x70
 8006fec:	e02d      	b.n	800704a <HAL_RCC_OscConfig+0x376>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10c      	bne.n	8007010 <HAL_RCC_OscConfig+0x33c>
 8006ff6:	4b6b      	ldr	r3, [pc, #428]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8006ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffa:	4a6a      	ldr	r2, [pc, #424]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8006ffc:	f023 0301 	bic.w	r3, r3, #1
 8007000:	6713      	str	r3, [r2, #112]	; 0x70
 8007002:	4b68      	ldr	r3, [pc, #416]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007006:	4a67      	ldr	r2, [pc, #412]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007008:	f023 0304 	bic.w	r3, r3, #4
 800700c:	6713      	str	r3, [r2, #112]	; 0x70
 800700e:	e01c      	b.n	800704a <HAL_RCC_OscConfig+0x376>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	2b05      	cmp	r3, #5
 8007016:	d10c      	bne.n	8007032 <HAL_RCC_OscConfig+0x35e>
 8007018:	4b62      	ldr	r3, [pc, #392]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 800701a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701c:	4a61      	ldr	r2, [pc, #388]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 800701e:	f043 0304 	orr.w	r3, r3, #4
 8007022:	6713      	str	r3, [r2, #112]	; 0x70
 8007024:	4b5f      	ldr	r3, [pc, #380]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007028:	4a5e      	ldr	r2, [pc, #376]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	6713      	str	r3, [r2, #112]	; 0x70
 8007030:	e00b      	b.n	800704a <HAL_RCC_OscConfig+0x376>
 8007032:	4b5c      	ldr	r3, [pc, #368]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007036:	4a5b      	ldr	r2, [pc, #364]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	6713      	str	r3, [r2, #112]	; 0x70
 800703e:	4b59      	ldr	r3, [pc, #356]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007042:	4a58      	ldr	r2, [pc, #352]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007044:	f023 0304 	bic.w	r3, r3, #4
 8007048:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d015      	beq.n	800707e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007052:	f7fe fed9 	bl	8005e08 <HAL_GetTick>
 8007056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007058:	e00a      	b.n	8007070 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800705a:	f7fe fed5 	bl	8005e08 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	f241 3288 	movw	r2, #5000	; 0x1388
 8007068:	4293      	cmp	r3, r2
 800706a:	d901      	bls.n	8007070 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e0d8      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007070:	4b4c      	ldr	r3, [pc, #304]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d0ee      	beq.n	800705a <HAL_RCC_OscConfig+0x386>
 800707c:	e014      	b.n	80070a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800707e:	f7fe fec3 	bl	8005e08 <HAL_GetTick>
 8007082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007084:	e00a      	b.n	800709c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007086:	f7fe febf 	bl	8005e08 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	f241 3288 	movw	r2, #5000	; 0x1388
 8007094:	4293      	cmp	r3, r2
 8007096:	d901      	bls.n	800709c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e0c2      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800709c:	4b41      	ldr	r3, [pc, #260]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 800709e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1ee      	bne.n	8007086 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d105      	bne.n	80070ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070ae:	4b3d      	ldr	r3, [pc, #244]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	4a3c      	ldr	r2, [pc, #240]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 80070b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 80ae 	beq.w	8007220 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070c4:	4b37      	ldr	r3, [pc, #220]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 030c 	and.w	r3, r3, #12
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d06d      	beq.n	80071ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d14b      	bne.n	8007170 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d8:	4b32      	ldr	r3, [pc, #200]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a31      	ldr	r2, [pc, #196]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 80070de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e4:	f7fe fe90 	bl	8005e08 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ec:	f7fe fe8c 	bl	8005e08 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e091      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070fe:	4b29      	ldr	r3, [pc, #164]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f0      	bne.n	80070ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	69da      	ldr	r2, [r3, #28]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	019b      	lsls	r3, r3, #6
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	3b01      	subs	r3, #1
 8007124:	041b      	lsls	r3, r3, #16
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	061b      	lsls	r3, r3, #24
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	071b      	lsls	r3, r3, #28
 8007136:	491b      	ldr	r1, [pc, #108]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007138:	4313      	orrs	r3, r2
 800713a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800713c:	4b19      	ldr	r3, [pc, #100]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a18      	ldr	r2, [pc, #96]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007148:	f7fe fe5e 	bl	8005e08 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007150:	f7fe fe5a 	bl	8005e08 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e05f      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007162:	4b10      	ldr	r3, [pc, #64]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0f0      	beq.n	8007150 <HAL_RCC_OscConfig+0x47c>
 800716e:	e057      	b.n	8007220 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007170:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a0b      	ldr	r2, [pc, #44]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800717a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800717c:	f7fe fe44 	bl	8005e08 <HAL_GetTick>
 8007180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007182:	e008      	b.n	8007196 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007184:	f7fe fe40 	bl	8005e08 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e045      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007196:	4b03      	ldr	r3, [pc, #12]	; (80071a4 <HAL_RCC_OscConfig+0x4d0>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1f0      	bne.n	8007184 <HAL_RCC_OscConfig+0x4b0>
 80071a2:	e03d      	b.n	8007220 <HAL_RCC_OscConfig+0x54c>
 80071a4:	40023800 	.word	0x40023800
 80071a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80071ac:	4b1f      	ldr	r3, [pc, #124]	; (800722c <HAL_RCC_OscConfig+0x558>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d030      	beq.n	800721c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d129      	bne.n	800721c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d122      	bne.n	800721c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071dc:	4013      	ands	r3, r2
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d119      	bne.n	800721c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	085b      	lsrs	r3, r3, #1
 80071f4:	3b01      	subs	r3, #1
 80071f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d10f      	bne.n	800721c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007208:	429a      	cmp	r2, r3
 800720a:	d107      	bne.n	800721c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007218:	429a      	cmp	r2, r3
 800721a:	d001      	beq.n	8007220 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e000      	b.n	8007222 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	40023800 	.word	0x40023800

08007230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e0d0      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007248:	4b6a      	ldr	r3, [pc, #424]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	429a      	cmp	r2, r3
 8007254:	d910      	bls.n	8007278 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007256:	4b67      	ldr	r3, [pc, #412]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f023 020f 	bic.w	r2, r3, #15
 800725e:	4965      	ldr	r1, [pc, #404]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	4313      	orrs	r3, r2
 8007264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007266:	4b63      	ldr	r3, [pc, #396]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d001      	beq.n	8007278 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e0b8      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d020      	beq.n	80072c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007290:	4b59      	ldr	r3, [pc, #356]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	4a58      	ldr	r2, [pc, #352]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007296:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800729a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072a8:	4b53      	ldr	r3, [pc, #332]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	4a52      	ldr	r2, [pc, #328]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 80072ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072b4:	4b50      	ldr	r3, [pc, #320]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	494d      	ldr	r1, [pc, #308]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d040      	beq.n	8007354 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d107      	bne.n	80072ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072da:	4b47      	ldr	r3, [pc, #284]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d115      	bne.n	8007312 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e07f      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d107      	bne.n	8007302 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072f2:	4b41      	ldr	r3, [pc, #260]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e073      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007302:	4b3d      	ldr	r3, [pc, #244]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e06b      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007312:	4b39      	ldr	r3, [pc, #228]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f023 0203 	bic.w	r2, r3, #3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	4936      	ldr	r1, [pc, #216]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007320:	4313      	orrs	r3, r2
 8007322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007324:	f7fe fd70 	bl	8005e08 <HAL_GetTick>
 8007328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800732a:	e00a      	b.n	8007342 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800732c:	f7fe fd6c 	bl	8005e08 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	f241 3288 	movw	r2, #5000	; 0x1388
 800733a:	4293      	cmp	r3, r2
 800733c:	d901      	bls.n	8007342 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e053      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007342:	4b2d      	ldr	r3, [pc, #180]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f003 020c 	and.w	r2, r3, #12
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	429a      	cmp	r2, r3
 8007352:	d1eb      	bne.n	800732c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007354:	4b27      	ldr	r3, [pc, #156]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 030f 	and.w	r3, r3, #15
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d210      	bcs.n	8007384 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007362:	4b24      	ldr	r3, [pc, #144]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f023 020f 	bic.w	r2, r3, #15
 800736a:	4922      	ldr	r1, [pc, #136]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	4313      	orrs	r3, r2
 8007370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007372:	4b20      	ldr	r3, [pc, #128]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d001      	beq.n	8007384 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e032      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d008      	beq.n	80073a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007390:	4b19      	ldr	r3, [pc, #100]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	4916      	ldr	r1, [pc, #88]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0308 	and.w	r3, r3, #8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d009      	beq.n	80073c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80073ae:	4b12      	ldr	r3, [pc, #72]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	490e      	ldr	r1, [pc, #56]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073c2:	f000 f885 	bl	80074d0 <HAL_RCC_GetSysClockFreq>
 80073c6:	4602      	mov	r2, r0
 80073c8:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	091b      	lsrs	r3, r3, #4
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	490a      	ldr	r1, [pc, #40]	; (80073fc <HAL_RCC_ClockConfig+0x1cc>)
 80073d4:	5ccb      	ldrb	r3, [r1, r3]
 80073d6:	fa22 f303 	lsr.w	r3, r2, r3
 80073da:	4a09      	ldr	r2, [pc, #36]	; (8007400 <HAL_RCC_ClockConfig+0x1d0>)
 80073dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80073de:	4b09      	ldr	r3, [pc, #36]	; (8007404 <HAL_RCC_ClockConfig+0x1d4>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fa2a 	bl	800583c <HAL_InitTick>

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	40023c00 	.word	0x40023c00
 80073f8:	40023800 	.word	0x40023800
 80073fc:	08012d80 	.word	0x08012d80
 8007400:	200009cc 	.word	0x200009cc
 8007404:	200009d0 	.word	0x200009d0

08007408 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08c      	sub	sp, #48	; 0x30
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d127      	bne.n	800746a <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800741a:	4b2a      	ldr	r3, [pc, #168]	; (80074c4 <HAL_RCC_MCOConfig+0xbc>)
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	4a29      	ldr	r2, [pc, #164]	; (80074c4 <HAL_RCC_MCOConfig+0xbc>)
 8007420:	f043 0301 	orr.w	r3, r3, #1
 8007424:	6313      	str	r3, [r2, #48]	; 0x30
 8007426:	4b27      	ldr	r3, [pc, #156]	; (80074c4 <HAL_RCC_MCOConfig+0xbc>)
 8007428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007438:	2302      	movs	r3, #2
 800743a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800743c:	2303      	movs	r3, #3
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007440:	2300      	movs	r3, #0
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007444:	2300      	movs	r3, #0
 8007446:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007448:	f107 031c 	add.w	r3, r7, #28
 800744c:	4619      	mov	r1, r3
 800744e:	481e      	ldr	r0, [pc, #120]	; (80074c8 <HAL_RCC_MCOConfig+0xc0>)
 8007450:	f7ff fa7c 	bl	800694c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007454:	4b1b      	ldr	r3, [pc, #108]	; (80074c4 <HAL_RCC_MCOConfig+0xbc>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800745c:	68b9      	ldr	r1, [r7, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	430b      	orrs	r3, r1
 8007462:	4918      	ldr	r1, [pc, #96]	; (80074c4 <HAL_RCC_MCOConfig+0xbc>)
 8007464:	4313      	orrs	r3, r2
 8007466:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8007468:	e027      	b.n	80074ba <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 800746a:	4b16      	ldr	r3, [pc, #88]	; (80074c4 <HAL_RCC_MCOConfig+0xbc>)
 800746c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746e:	4a15      	ldr	r2, [pc, #84]	; (80074c4 <HAL_RCC_MCOConfig+0xbc>)
 8007470:	f043 0304 	orr.w	r3, r3, #4
 8007474:	6313      	str	r3, [r2, #48]	; 0x30
 8007476:	4b13      	ldr	r3, [pc, #76]	; (80074c4 <HAL_RCC_MCOConfig+0xbc>)
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007488:	2302      	movs	r3, #2
 800748a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800748c:	2303      	movs	r3, #3
 800748e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007490:	2300      	movs	r3, #0
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007494:	2300      	movs	r3, #0
 8007496:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007498:	f107 031c 	add.w	r3, r7, #28
 800749c:	4619      	mov	r1, r3
 800749e:	480b      	ldr	r0, [pc, #44]	; (80074cc <HAL_RCC_MCOConfig+0xc4>)
 80074a0:	f7ff fa54 	bl	800694c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 80074a4:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <HAL_RCC_MCOConfig+0xbc>)
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	00d9      	lsls	r1, r3, #3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	430b      	orrs	r3, r1
 80074b4:	4903      	ldr	r1, [pc, #12]	; (80074c4 <HAL_RCC_MCOConfig+0xbc>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	608b      	str	r3, [r1, #8]
}
 80074ba:	bf00      	nop
 80074bc:	3730      	adds	r7, #48	; 0x30
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	40023800 	.word	0x40023800
 80074c8:	40020000 	.word	0x40020000
 80074cc:	40020800 	.word	0x40020800

080074d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074d0:	b5b0      	push	{r4, r5, r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80074d6:	2100      	movs	r1, #0
 80074d8:	6079      	str	r1, [r7, #4]
 80074da:	2100      	movs	r1, #0
 80074dc:	60f9      	str	r1, [r7, #12]
 80074de:	2100      	movs	r1, #0
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80074e2:	2100      	movs	r1, #0
 80074e4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074e6:	4952      	ldr	r1, [pc, #328]	; (8007630 <HAL_RCC_GetSysClockFreq+0x160>)
 80074e8:	6889      	ldr	r1, [r1, #8]
 80074ea:	f001 010c 	and.w	r1, r1, #12
 80074ee:	2908      	cmp	r1, #8
 80074f0:	d00d      	beq.n	800750e <HAL_RCC_GetSysClockFreq+0x3e>
 80074f2:	2908      	cmp	r1, #8
 80074f4:	f200 8094 	bhi.w	8007620 <HAL_RCC_GetSysClockFreq+0x150>
 80074f8:	2900      	cmp	r1, #0
 80074fa:	d002      	beq.n	8007502 <HAL_RCC_GetSysClockFreq+0x32>
 80074fc:	2904      	cmp	r1, #4
 80074fe:	d003      	beq.n	8007508 <HAL_RCC_GetSysClockFreq+0x38>
 8007500:	e08e      	b.n	8007620 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007502:	4b4c      	ldr	r3, [pc, #304]	; (8007634 <HAL_RCC_GetSysClockFreq+0x164>)
 8007504:	60bb      	str	r3, [r7, #8]
      break;
 8007506:	e08e      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007508:	4b4b      	ldr	r3, [pc, #300]	; (8007638 <HAL_RCC_GetSysClockFreq+0x168>)
 800750a:	60bb      	str	r3, [r7, #8]
      break;
 800750c:	e08b      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800750e:	4948      	ldr	r1, [pc, #288]	; (8007630 <HAL_RCC_GetSysClockFreq+0x160>)
 8007510:	6849      	ldr	r1, [r1, #4]
 8007512:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007516:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007518:	4945      	ldr	r1, [pc, #276]	; (8007630 <HAL_RCC_GetSysClockFreq+0x160>)
 800751a:	6849      	ldr	r1, [r1, #4]
 800751c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007520:	2900      	cmp	r1, #0
 8007522:	d024      	beq.n	800756e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007524:	4942      	ldr	r1, [pc, #264]	; (8007630 <HAL_RCC_GetSysClockFreq+0x160>)
 8007526:	6849      	ldr	r1, [r1, #4]
 8007528:	0989      	lsrs	r1, r1, #6
 800752a:	4608      	mov	r0, r1
 800752c:	f04f 0100 	mov.w	r1, #0
 8007530:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007534:	f04f 0500 	mov.w	r5, #0
 8007538:	ea00 0204 	and.w	r2, r0, r4
 800753c:	ea01 0305 	and.w	r3, r1, r5
 8007540:	493d      	ldr	r1, [pc, #244]	; (8007638 <HAL_RCC_GetSysClockFreq+0x168>)
 8007542:	fb01 f003 	mul.w	r0, r1, r3
 8007546:	2100      	movs	r1, #0
 8007548:	fb01 f102 	mul.w	r1, r1, r2
 800754c:	1844      	adds	r4, r0, r1
 800754e:	493a      	ldr	r1, [pc, #232]	; (8007638 <HAL_RCC_GetSysClockFreq+0x168>)
 8007550:	fba2 0101 	umull	r0, r1, r2, r1
 8007554:	1863      	adds	r3, r4, r1
 8007556:	4619      	mov	r1, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	461a      	mov	r2, r3
 800755c:	f04f 0300 	mov.w	r3, #0
 8007560:	f7f8 febe 	bl	80002e0 <__aeabi_uldivmod>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4613      	mov	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	e04a      	b.n	8007604 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800756e:	4b30      	ldr	r3, [pc, #192]	; (8007630 <HAL_RCC_GetSysClockFreq+0x160>)
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	099b      	lsrs	r3, r3, #6
 8007574:	461a      	mov	r2, r3
 8007576:	f04f 0300 	mov.w	r3, #0
 800757a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800757e:	f04f 0100 	mov.w	r1, #0
 8007582:	ea02 0400 	and.w	r4, r2, r0
 8007586:	ea03 0501 	and.w	r5, r3, r1
 800758a:	4620      	mov	r0, r4
 800758c:	4629      	mov	r1, r5
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	f04f 0300 	mov.w	r3, #0
 8007596:	014b      	lsls	r3, r1, #5
 8007598:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800759c:	0142      	lsls	r2, r0, #5
 800759e:	4610      	mov	r0, r2
 80075a0:	4619      	mov	r1, r3
 80075a2:	1b00      	subs	r0, r0, r4
 80075a4:	eb61 0105 	sbc.w	r1, r1, r5
 80075a8:	f04f 0200 	mov.w	r2, #0
 80075ac:	f04f 0300 	mov.w	r3, #0
 80075b0:	018b      	lsls	r3, r1, #6
 80075b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80075b6:	0182      	lsls	r2, r0, #6
 80075b8:	1a12      	subs	r2, r2, r0
 80075ba:	eb63 0301 	sbc.w	r3, r3, r1
 80075be:	f04f 0000 	mov.w	r0, #0
 80075c2:	f04f 0100 	mov.w	r1, #0
 80075c6:	00d9      	lsls	r1, r3, #3
 80075c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075cc:	00d0      	lsls	r0, r2, #3
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	1912      	adds	r2, r2, r4
 80075d4:	eb45 0303 	adc.w	r3, r5, r3
 80075d8:	f04f 0000 	mov.w	r0, #0
 80075dc:	f04f 0100 	mov.w	r1, #0
 80075e0:	0299      	lsls	r1, r3, #10
 80075e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80075e6:	0290      	lsls	r0, r2, #10
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4610      	mov	r0, r2
 80075ee:	4619      	mov	r1, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	461a      	mov	r2, r3
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	f7f8 fe72 	bl	80002e0 <__aeabi_uldivmod>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4613      	mov	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007604:	4b0a      	ldr	r3, [pc, #40]	; (8007630 <HAL_RCC_GetSysClockFreq+0x160>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	f003 0303 	and.w	r3, r3, #3
 800760e:	3301      	adds	r3, #1
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	fbb2 f3f3 	udiv	r3, r2, r3
 800761c:	60bb      	str	r3, [r7, #8]
      break;
 800761e:	e002      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007620:	4b04      	ldr	r3, [pc, #16]	; (8007634 <HAL_RCC_GetSysClockFreq+0x164>)
 8007622:	60bb      	str	r3, [r7, #8]
      break;
 8007624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007626:	68bb      	ldr	r3, [r7, #8]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bdb0      	pop	{r4, r5, r7, pc}
 8007630:	40023800 	.word	0x40023800
 8007634:	00f42400 	.word	0x00f42400
 8007638:	017d7840 	.word	0x017d7840

0800763c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800763c:	b480      	push	{r7}
 800763e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007640:	4b03      	ldr	r3, [pc, #12]	; (8007650 <HAL_RCC_GetHCLKFreq+0x14>)
 8007642:	681b      	ldr	r3, [r3, #0]
}
 8007644:	4618      	mov	r0, r3
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	200009cc 	.word	0x200009cc

08007654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007658:	f7ff fff0 	bl	800763c <HAL_RCC_GetHCLKFreq>
 800765c:	4602      	mov	r2, r0
 800765e:	4b05      	ldr	r3, [pc, #20]	; (8007674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	0a9b      	lsrs	r3, r3, #10
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	4903      	ldr	r1, [pc, #12]	; (8007678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800766a:	5ccb      	ldrb	r3, [r1, r3]
 800766c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007670:	4618      	mov	r0, r3
 8007672:	bd80      	pop	{r7, pc}
 8007674:	40023800 	.word	0x40023800
 8007678:	08012d90 	.word	0x08012d90

0800767c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007680:	f7ff ffdc 	bl	800763c <HAL_RCC_GetHCLKFreq>
 8007684:	4602      	mov	r2, r0
 8007686:	4b05      	ldr	r3, [pc, #20]	; (800769c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	0b5b      	lsrs	r3, r3, #13
 800768c:	f003 0307 	and.w	r3, r3, #7
 8007690:	4903      	ldr	r1, [pc, #12]	; (80076a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007692:	5ccb      	ldrb	r3, [r1, r3]
 8007694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007698:	4618      	mov	r0, r3
 800769a:	bd80      	pop	{r7, pc}
 800769c:	40023800 	.word	0x40023800
 80076a0:	08012d90 	.word	0x08012d90

080076a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	220f      	movs	r2, #15
 80076b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80076b4:	4b12      	ldr	r3, [pc, #72]	; (8007700 <HAL_RCC_GetClockConfig+0x5c>)
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f003 0203 	and.w	r2, r3, #3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80076c0:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <HAL_RCC_GetClockConfig+0x5c>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80076cc:	4b0c      	ldr	r3, [pc, #48]	; (8007700 <HAL_RCC_GetClockConfig+0x5c>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80076d8:	4b09      	ldr	r3, [pc, #36]	; (8007700 <HAL_RCC_GetClockConfig+0x5c>)
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	08db      	lsrs	r3, r3, #3
 80076de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80076e6:	4b07      	ldr	r3, [pc, #28]	; (8007704 <HAL_RCC_GetClockConfig+0x60>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 020f 	and.w	r2, r3, #15
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	601a      	str	r2, [r3, #0]
}
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	40023800 	.word	0x40023800
 8007704:	40023c00 	.word	0x40023c00

08007708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007714:	2300      	movs	r3, #0
 8007716:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	2b00      	cmp	r3, #0
 800772e:	d012      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007730:	4b69      	ldr	r3, [pc, #420]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	4a68      	ldr	r2, [pc, #416]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007736:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800773a:	6093      	str	r3, [r2, #8]
 800773c:	4b66      	ldr	r3, [pc, #408]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007744:	4964      	ldr	r1, [pc, #400]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007746:	4313      	orrs	r3, r2
 8007748:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007752:	2301      	movs	r3, #1
 8007754:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d017      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007762:	4b5d      	ldr	r3, [pc, #372]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007768:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007770:	4959      	ldr	r1, [pc, #356]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007772:	4313      	orrs	r3, r2
 8007774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007780:	d101      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007782:	2301      	movs	r3, #1
 8007784:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800778e:	2301      	movs	r3, #1
 8007790:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d017      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800779e:	4b4e      	ldr	r3, [pc, #312]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ac:	494a      	ldr	r1, [pc, #296]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077bc:	d101      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80077be:	2301      	movs	r3, #1
 80077c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80077ca:	2301      	movs	r3, #1
 80077cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80077da:	2301      	movs	r3, #1
 80077dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 808b 	beq.w	8007902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80077ec:	4b3a      	ldr	r3, [pc, #232]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f0:	4a39      	ldr	r2, [pc, #228]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f6:	6413      	str	r3, [r2, #64]	; 0x40
 80077f8:	4b37      	ldr	r3, [pc, #220]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007800:	60bb      	str	r3, [r7, #8]
 8007802:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007804:	4b35      	ldr	r3, [pc, #212]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a34      	ldr	r2, [pc, #208]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800780a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800780e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007810:	f7fe fafa 	bl	8005e08 <HAL_GetTick>
 8007814:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007816:	e008      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007818:	f7fe faf6 	bl	8005e08 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b64      	cmp	r3, #100	; 0x64
 8007824:	d901      	bls.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e38f      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800782a:	4b2c      	ldr	r3, [pc, #176]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0f0      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007836:	4b28      	ldr	r3, [pc, #160]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800783e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d035      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	429a      	cmp	r2, r3
 8007852:	d02e      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007854:	4b20      	ldr	r3, [pc, #128]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800785c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800785e:	4b1e      	ldr	r3, [pc, #120]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007862:	4a1d      	ldr	r2, [pc, #116]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007868:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800786a:	4b1b      	ldr	r3, [pc, #108]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800786c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786e:	4a1a      	ldr	r2, [pc, #104]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007874:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007876:	4a18      	ldr	r2, [pc, #96]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800787c:	4b16      	ldr	r3, [pc, #88]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800787e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b01      	cmp	r3, #1
 8007886:	d114      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007888:	f7fe fabe 	bl	8005e08 <HAL_GetTick>
 800788c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800788e:	e00a      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007890:	f7fe faba 	bl	8005e08 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	f241 3288 	movw	r2, #5000	; 0x1388
 800789e:	4293      	cmp	r3, r2
 80078a0:	d901      	bls.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e351      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078a6:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0ee      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078be:	d111      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80078c0:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80078cc:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078ce:	400b      	ands	r3, r1
 80078d0:	4901      	ldr	r1, [pc, #4]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	608b      	str	r3, [r1, #8]
 80078d6:	e00b      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80078d8:	40023800 	.word	0x40023800
 80078dc:	40007000 	.word	0x40007000
 80078e0:	0ffffcff 	.word	0x0ffffcff
 80078e4:	4bb3      	ldr	r3, [pc, #716]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	4ab2      	ldr	r2, [pc, #712]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80078ee:	6093      	str	r3, [r2, #8]
 80078f0:	4bb0      	ldr	r3, [pc, #704]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078fc:	49ad      	ldr	r1, [pc, #692]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0310 	and.w	r3, r3, #16
 800790a:	2b00      	cmp	r3, #0
 800790c:	d010      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800790e:	4ba9      	ldr	r3, [pc, #676]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007914:	4aa7      	ldr	r2, [pc, #668]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800791a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800791e:	4ba5      	ldr	r3, [pc, #660]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007920:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	49a2      	ldr	r1, [pc, #648]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800792a:	4313      	orrs	r3, r2
 800792c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800793c:	4b9d      	ldr	r3, [pc, #628]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800793e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007942:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800794a:	499a      	ldr	r1, [pc, #616]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800794c:	4313      	orrs	r3, r2
 800794e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800795e:	4b95      	ldr	r3, [pc, #596]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007964:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800796c:	4991      	ldr	r1, [pc, #580]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800796e:	4313      	orrs	r3, r2
 8007970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007980:	4b8c      	ldr	r3, [pc, #560]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007986:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800798e:	4989      	ldr	r1, [pc, #548]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007990:	4313      	orrs	r3, r2
 8007992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079a2:	4b84      	ldr	r3, [pc, #528]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b0:	4980      	ldr	r1, [pc, #512]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00a      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079c4:	4b7b      	ldr	r3, [pc, #492]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ca:	f023 0203 	bic.w	r2, r3, #3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	4978      	ldr	r1, [pc, #480]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079e6:	4b73      	ldr	r3, [pc, #460]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ec:	f023 020c 	bic.w	r2, r3, #12
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f4:	496f      	ldr	r1, [pc, #444]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00a      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a08:	4b6a      	ldr	r3, [pc, #424]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a16:	4967      	ldr	r1, [pc, #412]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a2a:	4b62      	ldr	r3, [pc, #392]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a38:	495e      	ldr	r1, [pc, #376]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00a      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a4c:	4b59      	ldr	r3, [pc, #356]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5a:	4956      	ldr	r1, [pc, #344]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007a6e:	4b51      	ldr	r3, [pc, #324]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7c:	494d      	ldr	r1, [pc, #308]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007a90:	4b48      	ldr	r3, [pc, #288]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a9e:	4945      	ldr	r1, [pc, #276]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007ab2:	4b40      	ldr	r3, [pc, #256]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ac0:	493c      	ldr	r1, [pc, #240]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ad4:	4b37      	ldr	r3, [pc, #220]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ada:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ae2:	4934      	ldr	r1, [pc, #208]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d011      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007af6:	4b2f      	ldr	r3, [pc, #188]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b04:	492b      	ldr	r1, [pc, #172]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b14:	d101      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007b16:	2301      	movs	r3, #1
 8007b18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007b26:	2301      	movs	r3, #1
 8007b28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b36:	4b1f      	ldr	r3, [pc, #124]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b44:	491b      	ldr	r1, [pc, #108]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b58:	4b16      	ldr	r3, [pc, #88]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b68:	4912      	ldr	r1, [pc, #72]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00b      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007b7c:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8c:	4909      	ldr	r1, [pc, #36]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00f      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ba0:	4b04      	ldr	r3, [pc, #16]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ba6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb0:	e002      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007bb2:	bf00      	nop
 8007bb4:	40023800 	.word	0x40023800
 8007bb8:	4986      	ldr	r1, [pc, #536]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00b      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007bcc:	4b81      	ldr	r3, [pc, #516]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bdc:	497d      	ldr	r1, [pc, #500]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d006      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 80d6 	beq.w	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007bf8:	4b76      	ldr	r3, [pc, #472]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a75      	ldr	r2, [pc, #468]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c04:	f7fe f900 	bl	8005e08 <HAL_GetTick>
 8007c08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c0a:	e008      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007c0c:	f7fe f8fc 	bl	8005e08 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b64      	cmp	r3, #100	; 0x64
 8007c18:	d901      	bls.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e195      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c1e:	4b6d      	ldr	r3, [pc, #436]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1f0      	bne.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d021      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d11d      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007c3e:	4b65      	ldr	r3, [pc, #404]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c44:	0c1b      	lsrs	r3, r3, #16
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007c4c:	4b61      	ldr	r3, [pc, #388]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c52:	0e1b      	lsrs	r3, r3, #24
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	019a      	lsls	r2, r3, #6
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	041b      	lsls	r3, r3, #16
 8007c64:	431a      	orrs	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	061b      	lsls	r3, r3, #24
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	071b      	lsls	r3, r3, #28
 8007c72:	4958      	ldr	r1, [pc, #352]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d004      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c8e:	d00a      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d02e      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ca4:	d129      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ca6:	4b4b      	ldr	r3, [pc, #300]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cac:	0c1b      	lsrs	r3, r3, #16
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007cb4:	4b47      	ldr	r3, [pc, #284]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cba:	0f1b      	lsrs	r3, r3, #28
 8007cbc:	f003 0307 	and.w	r3, r3, #7
 8007cc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	019a      	lsls	r2, r3, #6
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	041b      	lsls	r3, r3, #16
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	061b      	lsls	r3, r3, #24
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	071b      	lsls	r3, r3, #28
 8007cda:	493e      	ldr	r1, [pc, #248]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007ce2:	4b3c      	ldr	r3, [pc, #240]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ce8:	f023 021f 	bic.w	r2, r3, #31
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	4938      	ldr	r1, [pc, #224]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d01d      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d06:	4b33      	ldr	r3, [pc, #204]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d0c:	0e1b      	lsrs	r3, r3, #24
 8007d0e:	f003 030f 	and.w	r3, r3, #15
 8007d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d14:	4b2f      	ldr	r3, [pc, #188]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d1a:	0f1b      	lsrs	r3, r3, #28
 8007d1c:	f003 0307 	and.w	r3, r3, #7
 8007d20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	019a      	lsls	r2, r3, #6
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	041b      	lsls	r3, r3, #16
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	061b      	lsls	r3, r3, #24
 8007d34:	431a      	orrs	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	071b      	lsls	r3, r3, #28
 8007d3a:	4926      	ldr	r1, [pc, #152]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d011      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	019a      	lsls	r2, r3, #6
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	041b      	lsls	r3, r3, #16
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	061b      	lsls	r3, r3, #24
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	071b      	lsls	r3, r3, #28
 8007d6a:	491a      	ldr	r1, [pc, #104]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d72:	4b18      	ldr	r3, [pc, #96]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a17      	ldr	r2, [pc, #92]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d7e:	f7fe f843 	bl	8005e08 <HAL_GetTick>
 8007d82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d84:	e008      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d86:	f7fe f83f 	bl	8005e08 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b64      	cmp	r3, #100	; 0x64
 8007d92:	d901      	bls.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e0d8      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d98:	4b0e      	ldr	r3, [pc, #56]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0f0      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	f040 80ce 	bne.w	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007dac:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a08      	ldr	r2, [pc, #32]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007db8:	f7fe f826 	bl	8005e08 <HAL_GetTick>
 8007dbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007dbe:	e00b      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007dc0:	f7fe f822 	bl	8005e08 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b64      	cmp	r3, #100	; 0x64
 8007dcc:	d904      	bls.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e0bb      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007dd2:	bf00      	nop
 8007dd4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007dd8:	4b5e      	ldr	r3, [pc, #376]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007de4:	d0ec      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d009      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d02e      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d12a      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007e0e:	4b51      	ldr	r3, [pc, #324]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e14:	0c1b      	lsrs	r3, r3, #16
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007e1c:	4b4d      	ldr	r3, [pc, #308]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e22:	0f1b      	lsrs	r3, r3, #28
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	019a      	lsls	r2, r3, #6
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	041b      	lsls	r3, r3, #16
 8007e34:	431a      	orrs	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	061b      	lsls	r3, r3, #24
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	071b      	lsls	r3, r3, #28
 8007e42:	4944      	ldr	r1, [pc, #272]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007e4a:	4b42      	ldr	r3, [pc, #264]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	021b      	lsls	r3, r3, #8
 8007e5c:	493d      	ldr	r1, [pc, #244]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d022      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e78:	d11d      	bne.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e7a:	4b36      	ldr	r3, [pc, #216]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e80:	0e1b      	lsrs	r3, r3, #24
 8007e82:	f003 030f 	and.w	r3, r3, #15
 8007e86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007e88:	4b32      	ldr	r3, [pc, #200]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e8e:	0f1b      	lsrs	r3, r3, #28
 8007e90:	f003 0307 	and.w	r3, r3, #7
 8007e94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	019a      	lsls	r2, r3, #6
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	041b      	lsls	r3, r3, #16
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	061b      	lsls	r3, r3, #24
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	071b      	lsls	r3, r3, #28
 8007eae:	4929      	ldr	r1, [pc, #164]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0308 	and.w	r3, r3, #8
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d028      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ec2:	4b24      	ldr	r3, [pc, #144]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec8:	0e1b      	lsrs	r3, r3, #24
 8007eca:	f003 030f 	and.w	r3, r3, #15
 8007ece:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ed0:	4b20      	ldr	r3, [pc, #128]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed6:	0c1b      	lsrs	r3, r3, #16
 8007ed8:	f003 0303 	and.w	r3, r3, #3
 8007edc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	019a      	lsls	r2, r3, #6
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	041b      	lsls	r3, r3, #16
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	061b      	lsls	r3, r3, #24
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	071b      	lsls	r3, r3, #28
 8007ef6:	4917      	ldr	r1, [pc, #92]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007efe:	4b15      	ldr	r3, [pc, #84]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	4911      	ldr	r1, [pc, #68]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007f14:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a0e      	ldr	r2, [pc, #56]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f20:	f7fd ff72 	bl	8005e08 <HAL_GetTick>
 8007f24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007f26:	e008      	b.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f28:	f7fd ff6e 	bl	8005e08 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b64      	cmp	r3, #100	; 0x64
 8007f34:	d901      	bls.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e007      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007f3a:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f46:	d1ef      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3720      	adds	r7, #32
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	40023800 	.word	0x40023800

08007f58 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e022      	b.n	8007fb0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d105      	bne.n	8007f82 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7fd fabb 	bl	80054f8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2203      	movs	r2, #3
 8007f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f814 	bl	8007fb8 <HAL_SD_InitCard>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e00a      	b.n	8007fb0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007fb8:	b5b0      	push	{r4, r5, r7, lr}
 8007fba:	b08e      	sub	sp, #56	; 0x38
 8007fbc:	af04      	add	r7, sp, #16
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007fd4:	2376      	movs	r3, #118	; 0x76
 8007fd6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681d      	ldr	r5, [r3, #0]
 8007fdc:	466c      	mov	r4, sp
 8007fde:	f107 0314 	add.w	r3, r7, #20
 8007fe2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007fe6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007fea:	f107 0308 	add.w	r3, r7, #8
 8007fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	f002 faad 	bl	800a550 <SDMMC_Init>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e059      	b.n	80080bc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008016:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4618      	mov	r0, r3
 800801e:	f002 fae1 	bl	800a5e4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008030:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008032:	2002      	movs	r0, #2
 8008034:	f7fd fef4 	bl	8005e20 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fff1 	bl	8009020 <SD_PowerON>
 800803e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00b      	beq.n	800805e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	431a      	orrs	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e02e      	b.n	80080bc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 ff12 	bl	8008e88 <SD_InitCard>
 8008064:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00b      	beq.n	8008084 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	431a      	orrs	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e01b      	b.n	80080bc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800808c:	4618      	mov	r0, r3
 800808e:	f002 fb3b 	bl	800a708 <SDMMC_CmdBlockLength>
 8008092:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00f      	beq.n	80080ba <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a09      	ldr	r2, [pc, #36]	; (80080c4 <HAL_SD_InitCard+0x10c>)
 80080a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	431a      	orrs	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e000      	b.n	80080bc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3728      	adds	r7, #40	; 0x28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bdb0      	pop	{r4, r5, r7, pc}
 80080c4:	004005ff 	.word	0x004005ff

080080c8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08c      	sub	sp, #48	; 0x30
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d107      	bne.n	80080f0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e0c3      	b.n	8008278 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	f040 80bc 	bne.w	8008276 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	441a      	add	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810e:	429a      	cmp	r2, r3
 8008110:	d907      	bls.n	8008122 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008116:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e0aa      	b.n	8008278 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2203      	movs	r2, #3
 8008126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2200      	movs	r2, #0
 8008130:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008146:	4a4e      	ldr	r2, [pc, #312]	; (8008280 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	4a4d      	ldr	r2, [pc, #308]	; (8008284 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008150:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	2200      	movs	r2, #0
 8008158:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	2200      	movs	r2, #0
 8008160:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3380      	adds	r3, #128	; 0x80
 8008188:	4619      	mov	r1, r3
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	025b      	lsls	r3, r3, #9
 8008190:	089b      	lsrs	r3, r3, #2
 8008192:	f7fe f8e3 	bl	800635c <HAL_DMA_Start_IT>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d017      	beq.n	80081cc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80081aa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a35      	ldr	r2, [pc, #212]	; (8008288 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80081b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e055      	b.n	8008278 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f042 0208 	orr.w	r2, r2, #8
 80081da:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d002      	beq.n	80081ea <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80081e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e6:	025b      	lsls	r3, r3, #9
 80081e8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081ee:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	025b      	lsls	r3, r3, #9
 80081f4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80081f6:	2390      	movs	r3, #144	; 0x90
 80081f8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80081fa:	2302      	movs	r3, #2
 80081fc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80081fe:	2300      	movs	r3, #0
 8008200:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008202:	2301      	movs	r3, #1
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f107 0210 	add.w	r2, r7, #16
 800820e:	4611      	mov	r1, r2
 8008210:	4618      	mov	r0, r3
 8008212:	f002 fa4d 	bl	800a6b0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d90a      	bls.n	8008232 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2282      	movs	r2, #130	; 0x82
 8008220:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008228:	4618      	mov	r0, r3
 800822a:	f002 fab1 	bl	800a790 <SDMMC_CmdReadMultiBlock>
 800822e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008230:	e009      	b.n	8008246 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2281      	movs	r2, #129	; 0x81
 8008236:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800823e:	4618      	mov	r0, r3
 8008240:	f002 fa84 	bl	800a74c <SDMMC_CmdReadSingleBlock>
 8008244:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008248:	2b00      	cmp	r3, #0
 800824a:	d012      	beq.n	8008272 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a0d      	ldr	r2, [pc, #52]	; (8008288 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008252:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	431a      	orrs	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e002      	b.n	8008278 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	e000      	b.n	8008278 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008276:	2302      	movs	r3, #2
  }
}
 8008278:	4618      	mov	r0, r3
 800827a:	3730      	adds	r7, #48	; 0x30
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	08008c97 	.word	0x08008c97
 8008284:	08008d09 	.word	0x08008d09
 8008288:	004005ff 	.word	0x004005ff

0800828c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08c      	sub	sp, #48	; 0x30
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d107      	bne.n	80082b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e0c6      	b.n	8008442 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b01      	cmp	r3, #1
 80082be:	f040 80bf 	bne.w	8008440 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80082c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	441a      	add	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d907      	bls.n	80082e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e0ad      	b.n	8008442 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2203      	movs	r2, #3
 80082ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2200      	movs	r2, #0
 80082f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 021a 	orr.w	r2, r2, #26
 8008304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830a:	4a50      	ldr	r2, [pc, #320]	; (800844c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800830c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008312:	4a4f      	ldr	r2, [pc, #316]	; (8008450 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008314:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800831a:	2200      	movs	r2, #0
 800831c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008322:	2b01      	cmp	r3, #1
 8008324:	d002      	beq.n	800832c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	025b      	lsls	r3, r3, #9
 800832a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d90a      	bls.n	8008348 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	22a0      	movs	r2, #160	; 0xa0
 8008336:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800833e:	4618      	mov	r0, r3
 8008340:	f002 fa6a 	bl	800a818 <SDMMC_CmdWriteMultiBlock>
 8008344:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008346:	e009      	b.n	800835c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2290      	movs	r2, #144	; 0x90
 800834c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008354:	4618      	mov	r0, r3
 8008356:	f002 fa3d 	bl	800a7d4 <SDMMC_CmdWriteSingleBlock>
 800835a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	2b00      	cmp	r3, #0
 8008360:	d012      	beq.n	8008388 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a3b      	ldr	r2, [pc, #236]	; (8008454 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008368:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	431a      	orrs	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e05c      	b.n	8008442 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f042 0208 	orr.w	r2, r2, #8
 8008396:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839c:	2240      	movs	r2, #64	; 0x40
 800839e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80083c0:	68b9      	ldr	r1, [r7, #8]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3380      	adds	r3, #128	; 0x80
 80083c8:	461a      	mov	r2, r3
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	025b      	lsls	r3, r3, #9
 80083ce:	089b      	lsrs	r3, r3, #2
 80083d0:	f7fd ffc4 	bl	800635c <HAL_DMA_Start_IT>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d01a      	beq.n	8008410 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 021a 	bic.w	r2, r2, #26
 80083e8:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a19      	ldr	r2, [pc, #100]	; (8008454 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80083f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e018      	b.n	8008442 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008414:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	025b      	lsls	r3, r3, #9
 800841a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800841c:	2390      	movs	r3, #144	; 0x90
 800841e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008420:	2300      	movs	r3, #0
 8008422:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008424:	2300      	movs	r3, #0
 8008426:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008428:	2301      	movs	r3, #1
 800842a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f107 0210 	add.w	r2, r7, #16
 8008434:	4611      	mov	r1, r2
 8008436:	4618      	mov	r0, r3
 8008438:	f002 f93a 	bl	800a6b0 <SDMMC_ConfigData>

      return HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	e000      	b.n	8008442 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008440:	2302      	movs	r3, #2
  }
}
 8008442:	4618      	mov	r0, r3
 8008444:	3730      	adds	r7, #48	; 0x30
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	08008c6d 	.word	0x08008c6d
 8008450:	08008d09 	.word	0x08008d09
 8008454:	004005ff 	.word	0x004005ff

08008458 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d008      	beq.n	8008486 <HAL_SD_IRQHandler+0x2e>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f003 0308 	and.w	r3, r3, #8
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 ffed 	bl	800945e <SD_Read_IT>
 8008484:	e153      	b.n	800872e <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 808d 	beq.w	80085b0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800849e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	4ba3      	ldr	r3, [pc, #652]	; (8008738 <HAL_SD_IRQHandler+0x2e0>)
 80084ac:	400b      	ands	r3, r1
 80084ae:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 0201 	bic.w	r2, r2, #1
 80084be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f003 0308 	and.w	r3, r3, #8
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d039      	beq.n	800853e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f003 0302 	and.w	r3, r3, #2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d104      	bne.n	80084de <HAL_SD_IRQHandler+0x86>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f003 0320 	and.w	r3, r3, #32
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d011      	beq.n	8008502 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f002 f9ba 	bl	800a85c <SDMMC_CmdStopTransfer>
 80084e8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d008      	beq.n	8008502 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f921 	bl	8008744 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f240 523a 	movw	r2, #1338	; 0x53a
 800850a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d104      	bne.n	800852e <HAL_SD_IRQHandler+0xd6>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f002 fe2a 	bl	800b188 <HAL_SD_RxCpltCallback>
 8008534:	e0fb      	b.n	800872e <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f002 fe1c 	bl	800b174 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800853c:	e0f7      	b.n	800872e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 80f2 	beq.w	800872e <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f003 0320 	and.w	r3, r3, #32
 8008550:	2b00      	cmp	r3, #0
 8008552:	d011      	beq.n	8008578 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4618      	mov	r0, r3
 800855a:	f002 f97f 	bl	800a85c <SDMMC_CmdStopTransfer>
 800855e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d008      	beq.n	8008578 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	431a      	orrs	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f8e6 	bl	8008744 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	f040 80d5 	bne.w	800872e <HAL_SD_IRQHandler+0x2d6>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	f040 80cf 	bne.w	800872e <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 0208 	bic.w	r2, r2, #8
 800859e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f002 fde3 	bl	800b174 <HAL_SD_TxCpltCallback>
}
 80085ae:	e0be      	b.n	800872e <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d008      	beq.n	80085d0 <HAL_SD_IRQHandler+0x178>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 ff99 	bl	8009500 <SD_Write_IT>
 80085ce:	e0ae      	b.n	800872e <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 80a7 	beq.w	800872e <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d005      	beq.n	80085fa <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f2:	f043 0202 	orr.w	r2, r3, #2
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008600:	f003 0308 	and.w	r3, r3, #8
 8008604:	2b00      	cmp	r3, #0
 8008606:	d005      	beq.n	8008614 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860c:	f043 0208 	orr.w	r2, r3, #8
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d005      	beq.n	800862e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008626:	f043 0220 	orr.w	r2, r3, #32
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008634:	f003 0310 	and.w	r3, r3, #16
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	f043 0210 	orr.w	r2, r3, #16
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008650:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008660:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f002 f8f8 	bl	800a85c <SDMMC_CmdStopTransfer>
 800866c:	4602      	mov	r2, r0
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008672:	431a      	orrs	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f003 0308 	and.w	r3, r3, #8
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00a      	beq.n	8008698 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f857 	bl	8008744 <HAL_SD_ErrorCallback>
}
 8008696:	e04a      	b.n	800872e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d045      	beq.n	800872e <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d104      	bne.n	80086b6 <HAL_SD_IRQHandler+0x25e>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f003 0320 	and.w	r3, r3, #32
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d011      	beq.n	80086da <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ba:	4a20      	ldr	r2, [pc, #128]	; (800873c <HAL_SD_IRQHandler+0x2e4>)
 80086bc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fd feaa 	bl	800641c <HAL_DMA_Abort_IT>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d02f      	beq.n	800872e <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 fb6a 	bl	8008dac <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80086d8:	e029      	b.n	800872e <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d104      	bne.n	80086ee <HAL_SD_IRQHandler+0x296>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d011      	beq.n	8008712 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	4a13      	ldr	r2, [pc, #76]	; (8008740 <HAL_SD_IRQHandler+0x2e8>)
 80086f4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fd fe8e 	bl	800641c <HAL_DMA_Abort_IT>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d013      	beq.n	800872e <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fb85 	bl	8008e1a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008710:	e00d      	b.n	800872e <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f002 fd1a 	bl	800b160 <HAL_SD_AbortCallback>
}
 800872c:	e7ff      	b.n	800872e <HAL_SD_IRQHandler+0x2d6>
 800872e:	bf00      	nop
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	ffff3ec5 	.word	0xffff3ec5
 800873c:	08008dad 	.word	0x08008dad
 8008740:	08008e1b 	.word	0x08008e1b

08008744 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008766:	0f9b      	lsrs	r3, r3, #30
 8008768:	b2da      	uxtb	r2, r3
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008772:	0e9b      	lsrs	r3, r3, #26
 8008774:	b2db      	uxtb	r3, r3
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	b2da      	uxtb	r2, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008784:	0e1b      	lsrs	r3, r3, #24
 8008786:	b2db      	uxtb	r3, r3
 8008788:	f003 0303 	and.w	r3, r3, #3
 800878c:	b2da      	uxtb	r2, r3
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008796:	0c1b      	lsrs	r3, r3, #16
 8008798:	b2da      	uxtb	r2, r3
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087a2:	0a1b      	lsrs	r3, r3, #8
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087b8:	0d1b      	lsrs	r3, r3, #20
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087c4:	0c1b      	lsrs	r3, r3, #16
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	f003 030f 	and.w	r3, r3, #15
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087d6:	0bdb      	lsrs	r3, r3, #15
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087e8:	0b9b      	lsrs	r3, r3, #14
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087fa:	0b5b      	lsrs	r3, r3, #13
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	b2da      	uxtb	r2, r3
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800880c:	0b1b      	lsrs	r3, r3, #12
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	b2da      	uxtb	r2, r3
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2200      	movs	r2, #0
 800881e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008824:	2b00      	cmp	r3, #0
 8008826:	d163      	bne.n	80088f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800882c:	009a      	lsls	r2, r3, #2
 800882e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008832:	4013      	ands	r3, r2
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008838:	0f92      	lsrs	r2, r2, #30
 800883a:	431a      	orrs	r2, r3
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008844:	0edb      	lsrs	r3, r3, #27
 8008846:	b2db      	uxtb	r3, r3
 8008848:	f003 0307 	and.w	r3, r3, #7
 800884c:	b2da      	uxtb	r2, r3
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008856:	0e1b      	lsrs	r3, r3, #24
 8008858:	b2db      	uxtb	r3, r3
 800885a:	f003 0307 	and.w	r3, r3, #7
 800885e:	b2da      	uxtb	r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008868:	0d5b      	lsrs	r3, r3, #21
 800886a:	b2db      	uxtb	r3, r3
 800886c:	f003 0307 	and.w	r3, r3, #7
 8008870:	b2da      	uxtb	r2, r3
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887a:	0c9b      	lsrs	r3, r3, #18
 800887c:	b2db      	uxtb	r3, r3
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	b2da      	uxtb	r2, r3
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800888c:	0bdb      	lsrs	r3, r3, #15
 800888e:	b2db      	uxtb	r3, r3
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	b2da      	uxtb	r2, r3
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	7e1b      	ldrb	r3, [r3, #24]
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	f003 0307 	and.w	r3, r3, #7
 80088ae:	3302      	adds	r3, #2
 80088b0:	2201      	movs	r2, #1
 80088b2:	fa02 f303 	lsl.w	r3, r2, r3
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80088ba:	fb02 f203 	mul.w	r2, r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	7a1b      	ldrb	r3, [r3, #8]
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	2201      	movs	r2, #1
 80088ce:	409a      	lsls	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80088dc:	0a52      	lsrs	r2, r2, #9
 80088de:	fb02 f203 	mul.w	r2, r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088ec:	661a      	str	r2, [r3, #96]	; 0x60
 80088ee:	e031      	b.n	8008954 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d11d      	bne.n	8008934 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088fc:	041b      	lsls	r3, r3, #16
 80088fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008906:	0c1b      	lsrs	r3, r3, #16
 8008908:	431a      	orrs	r2, r3
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	3301      	adds	r3, #1
 8008914:	029a      	lsls	r2, r3, #10
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008928:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	661a      	str	r2, [r3, #96]	; 0x60
 8008932:	e00f      	b.n	8008954 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a58      	ldr	r2, [pc, #352]	; (8008a9c <HAL_SD_GetCardCSD+0x344>)
 800893a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008940:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e09d      	b.n	8008a90 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008958:	0b9b      	lsrs	r3, r3, #14
 800895a:	b2db      	uxtb	r3, r3
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	b2da      	uxtb	r2, r3
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800896a:	09db      	lsrs	r3, r3, #7
 800896c:	b2db      	uxtb	r3, r3
 800896e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008972:	b2da      	uxtb	r2, r3
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800897c:	b2db      	uxtb	r3, r3
 800897e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008982:	b2da      	uxtb	r2, r3
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898c:	0fdb      	lsrs	r3, r3, #31
 800898e:	b2da      	uxtb	r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008998:	0f5b      	lsrs	r3, r3, #29
 800899a:	b2db      	uxtb	r3, r3
 800899c:	f003 0303 	and.w	r3, r3, #3
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089aa:	0e9b      	lsrs	r3, r3, #26
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089bc:	0d9b      	lsrs	r3, r3, #22
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	f003 030f 	and.w	r3, r3, #15
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ce:	0d5b      	lsrs	r3, r3, #21
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ea:	0c1b      	lsrs	r3, r3, #16
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fe:	0bdb      	lsrs	r3, r3, #15
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a12:	0b9b      	lsrs	r3, r3, #14
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a26:	0b5b      	lsrs	r3, r3, #13
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a3a:	0b1b      	lsrs	r3, r3, #12
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a4e:	0a9b      	lsrs	r3, r3, #10
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a62:	0a1b      	lsrs	r3, r3, #8
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	f003 0303 	and.w	r3, r3, #3
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a76:	085b      	lsrs	r3, r3, #1
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	004005ff 	.word	0x004005ff

08008aa0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008af8:	b5b0      	push	{r4, r5, r7, lr}
 8008afa:	b08e      	sub	sp, #56	; 0x38
 8008afc:	af04      	add	r7, sp, #16
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d02e      	beq.n	8008b76 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b1e:	d106      	bne.n	8008b2e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	639a      	str	r2, [r3, #56]	; 0x38
 8008b2c:	e029      	b.n	8008b82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b34:	d10a      	bne.n	8008b4c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fb28 	bl	800918c <SD_WideBus_Enable>
 8008b3c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	431a      	orrs	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	639a      	str	r2, [r3, #56]	; 0x38
 8008b4a:	e01a      	b.n	8008b82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10a      	bne.n	8008b68 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fb65 	bl	8009222 <SD_WideBus_Disable>
 8008b58:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	431a      	orrs	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	639a      	str	r2, [r3, #56]	; 0x38
 8008b66:	e00c      	b.n	8008b82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	639a      	str	r2, [r3, #56]	; 0x38
 8008b74:	e005      	b.n	8008b82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00b      	beq.n	8008ba2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a26      	ldr	r2, [pc, #152]	; (8008c28 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008b90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ba0:	e01f      	b.n	8008be2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681d      	ldr	r5, [r3, #0]
 8008bc8:	466c      	mov	r4, sp
 8008bca:	f107 0314 	add.w	r3, r7, #20
 8008bce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bd6:	f107 0308 	add.w	r3, r7, #8
 8008bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bdc:	4628      	mov	r0, r5
 8008bde:	f001 fcb7 	bl	800a550 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bea:	4618      	mov	r0, r3
 8008bec:	f001 fd8c 	bl	800a708 <SDMMC_CmdBlockLength>
 8008bf0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00c      	beq.n	8008c12 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a0a      	ldr	r2, [pc, #40]	; (8008c28 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008bfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3728      	adds	r7, #40	; 0x28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bdb0      	pop	{r4, r5, r7, pc}
 8008c26:	bf00      	nop
 8008c28:	004005ff 	.word	0x004005ff

08008c2c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008c38:	f107 030c 	add.w	r3, r7, #12
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fa7c 	bl	800913c <SD_SendStatus>
 8008c44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d005      	beq.n	8008c58 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	431a      	orrs	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	0a5b      	lsrs	r3, r3, #9
 8008c5c:	f003 030f 	and.w	r3, r3, #15
 8008c60:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008c62:	693b      	ldr	r3, [r7, #16]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c78:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c88:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008c8a:	bf00      	nop
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca8:	2b82      	cmp	r3, #130	; 0x82
 8008caa:	d111      	bne.n	8008cd0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f001 fdd3 	bl	800a85c <SDMMC_CmdStopTransfer>
 8008cb6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d008      	beq.n	8008cd0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f7ff fd3a 	bl	8008744 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0208 	bic.w	r2, r2, #8
 8008cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f002 fa45 	bl	800b188 <HAL_SD_RxCpltCallback>
#endif
}
 8008cfe:	bf00      	nop
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7fd fd2c 	bl	8006774 <HAL_DMA_GetError>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d03e      	beq.n	8008da0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d28:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d30:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d002      	beq.n	8008d3e <SD_DMAError+0x36>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d12d      	bne.n	8008d9a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a19      	ldr	r2, [pc, #100]	; (8008da8 <SD_DMAError+0xa0>)
 8008d44:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008d54:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008d62:	6978      	ldr	r0, [r7, #20]
 8008d64:	f7ff ff62 	bl	8008c2c <HAL_SD_GetCardState>
 8008d68:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2b06      	cmp	r3, #6
 8008d6e:	d002      	beq.n	8008d76 <SD_DMAError+0x6e>
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b05      	cmp	r3, #5
 8008d74:	d10a      	bne.n	8008d8c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f001 fd6e 	bl	800a85c <SDMMC_CmdStopTransfer>
 8008d80:	4602      	mov	r2, r0
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d86:	431a      	orrs	r2, r3
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2200      	movs	r2, #0
 8008d98:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008d9a:	6978      	ldr	r0, [r7, #20]
 8008d9c:	f7ff fcd2 	bl	8008744 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008da0:	bf00      	nop
 8008da2:	3718      	adds	r7, #24
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	004005ff 	.word	0x004005ff

08008dac <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f240 523a 	movw	r2, #1338	; 0x53a
 8008dc2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f7ff ff31 	bl	8008c2c <HAL_SD_GetCardState>
 8008dca:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2b06      	cmp	r3, #6
 8008dde:	d002      	beq.n	8008de6 <SD_DMATxAbort+0x3a>
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	d10a      	bne.n	8008dfc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 fd36 	bl	800a85c <SDMMC_CmdStopTransfer>
 8008df0:	4602      	mov	r2, r0
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	431a      	orrs	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d103      	bne.n	8008e0c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f002 f9ab 	bl	800b160 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008e0a:	e002      	b.n	8008e12 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f7ff fc99 	bl	8008744 <HAL_SD_ErrorCallback>
}
 8008e12:	bf00      	nop
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e26:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e30:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f7ff fefa 	bl	8008c2c <HAL_SD_GetCardState>
 8008e38:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2b06      	cmp	r3, #6
 8008e4c:	d002      	beq.n	8008e54 <SD_DMARxAbort+0x3a>
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2b05      	cmp	r3, #5
 8008e52:	d10a      	bne.n	8008e6a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f001 fcff 	bl	800a85c <SDMMC_CmdStopTransfer>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e64:	431a      	orrs	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d103      	bne.n	8008e7a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f002 f974 	bl	800b160 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008e78:	e002      	b.n	8008e80 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f7ff fc62 	bl	8008744 <HAL_SD_ErrorCallback>
}
 8008e80:	bf00      	nop
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e88:	b5b0      	push	{r4, r5, r7, lr}
 8008e8a:	b094      	sub	sp, #80	; 0x50
 8008e8c:	af04      	add	r7, sp, #16
 8008e8e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008e90:	2301      	movs	r3, #1
 8008e92:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f001 fbb1 	bl	800a600 <SDMMC_GetPowerState>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d102      	bne.n	8008eaa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ea4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ea8:	e0b6      	b.n	8009018 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d02f      	beq.n	8008f12 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f001 fddb 	bl	800aa72 <SDMMC_CmdSendCID>
 8008ebc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <SD_InitCard+0x40>
    {
      return errorstate;
 8008ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec6:	e0a7      	b.n	8009018 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2100      	movs	r1, #0
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f001 fbdb 	bl	800a68a <SDMMC_GetResponse>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2104      	movs	r1, #4
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f001 fbd2 	bl	800a68a <SDMMC_GetResponse>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2108      	movs	r1, #8
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f001 fbc9 	bl	800a68a <SDMMC_GetResponse>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	210c      	movs	r1, #12
 8008f04:	4618      	mov	r0, r3
 8008f06:	f001 fbc0 	bl	800a68a <SDMMC_GetResponse>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d00d      	beq.n	8008f36 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f107 020e 	add.w	r2, r7, #14
 8008f22:	4611      	mov	r1, r2
 8008f24:	4618      	mov	r0, r3
 8008f26:	f001 fde1 	bl	800aaec <SDMMC_CmdSetRelAdd>
 8008f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <SD_InitCard+0xae>
    {
      return errorstate;
 8008f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f34:	e070      	b.n	8009018 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d036      	beq.n	8008fac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008f3e:	89fb      	ldrh	r3, [r7, #14]
 8008f40:	461a      	mov	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f4e:	041b      	lsls	r3, r3, #16
 8008f50:	4619      	mov	r1, r3
 8008f52:	4610      	mov	r0, r2
 8008f54:	f001 fdab 	bl	800aaae <SDMMC_CmdSendCSD>
 8008f58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f62:	e059      	b.n	8009018 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f001 fb8d 	bl	800a68a <SDMMC_GetResponse>
 8008f70:	4602      	mov	r2, r0
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2104      	movs	r1, #4
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f001 fb84 	bl	800a68a <SDMMC_GetResponse>
 8008f82:	4602      	mov	r2, r0
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2108      	movs	r1, #8
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f001 fb7b 	bl	800a68a <SDMMC_GetResponse>
 8008f94:	4602      	mov	r2, r0
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	210c      	movs	r1, #12
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f001 fb72 	bl	800a68a <SDMMC_GetResponse>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2104      	movs	r1, #4
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 fb69 	bl	800a68a <SDMMC_GetResponse>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	0d1a      	lsrs	r2, r3, #20
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008fc0:	f107 0310 	add.w	r3, r7, #16
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7ff fbc6 	bl	8008758 <HAL_SD_GetCardCSD>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fd6:	e01f      	b.n	8009018 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6819      	ldr	r1, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe0:	041b      	lsls	r3, r3, #16
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f04f 0300 	mov.w	r3, #0
 8008fe8:	4608      	mov	r0, r1
 8008fea:	f001 fc59 	bl	800a8a0 <SDMMC_CmdSelDesel>
 8008fee:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <SD_InitCard+0x172>
  {
    return errorstate;
 8008ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff8:	e00e      	b.n	8009018 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681d      	ldr	r5, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	466c      	mov	r4, sp
 8009002:	f103 0210 	add.w	r2, r3, #16
 8009006:	ca07      	ldmia	r2, {r0, r1, r2}
 8009008:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800900c:	3304      	adds	r3, #4
 800900e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009010:	4628      	mov	r0, r5
 8009012:	f001 fa9d 	bl	800a550 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3740      	adds	r7, #64	; 0x40
 800901c:	46bd      	mov	sp, r7
 800901e:	bdb0      	pop	{r4, r5, r7, pc}

08009020 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800902c:	2300      	movs	r3, #0
 800902e:	617b      	str	r3, [r7, #20]
 8009030:	2300      	movs	r3, #0
 8009032:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4618      	mov	r0, r3
 800903a:	f001 fc54 	bl	800a8e6 <SDMMC_CmdGoIdleState>
 800903e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	e072      	b.n	8009130 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f001 fc67 	bl	800a922 <SDMMC_CmdOperCond>
 8009054:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00d      	beq.n	8009078 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4618      	mov	r0, r3
 8009068:	f001 fc3d 	bl	800a8e6 <SDMMC_CmdGoIdleState>
 800906c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	e05b      	b.n	8009130 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009082:	2b01      	cmp	r3, #1
 8009084:	d137      	bne.n	80090f6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f001 fc67 	bl	800a960 <SDMMC_CmdAppCommand>
 8009092:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d02d      	beq.n	80090f6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800909a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800909e:	e047      	b.n	8009130 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2100      	movs	r1, #0
 80090a6:	4618      	mov	r0, r3
 80090a8:	f001 fc5a 	bl	800a960 <SDMMC_CmdAppCommand>
 80090ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <SD_PowerON+0x98>
    {
      return errorstate;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	e03b      	b.n	8009130 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	491e      	ldr	r1, [pc, #120]	; (8009138 <SD_PowerON+0x118>)
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fc70 	bl	800a9a4 <SDMMC_CmdAppOperCommand>
 80090c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090d0:	e02e      	b.n	8009130 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2100      	movs	r1, #0
 80090d8:	4618      	mov	r0, r3
 80090da:	f001 fad6 	bl	800a68a <SDMMC_GetResponse>
 80090de:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	0fdb      	lsrs	r3, r3, #31
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d101      	bne.n	80090ec <SD_PowerON+0xcc>
 80090e8:	2301      	movs	r3, #1
 80090ea:	e000      	b.n	80090ee <SD_PowerON+0xce>
 80090ec:	2300      	movs	r3, #0
 80090ee:	613b      	str	r3, [r7, #16]

    count++;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	3301      	adds	r3, #1
 80090f4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d802      	bhi.n	8009106 <SD_PowerON+0xe6>
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0cc      	beq.n	80090a0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800910c:	4293      	cmp	r3, r2
 800910e:	d902      	bls.n	8009116 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009114:	e00c      	b.n	8009130 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	645a      	str	r2, [r3, #68]	; 0x44
 8009126:	e002      	b.n	800912e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	c1100000 	.word	0xc1100000

0800913c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d102      	bne.n	8009152 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800914c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009150:	e018      	b.n	8009184 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800915a:	041b      	lsls	r3, r3, #16
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	f001 fce5 	bl	800ab2e <SDMMC_CmdSendStatus>
 8009164:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <SD_SendStatus+0x34>
  {
    return errorstate;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	e009      	b.n	8009184 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2100      	movs	r1, #0
 8009176:	4618      	mov	r0, r3
 8009178:	f001 fa87 	bl	800a68a <SDMMC_GetResponse>
 800917c:	4602      	mov	r2, r0
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	2300      	movs	r3, #0
 800919a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2100      	movs	r1, #0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f001 fa71 	bl	800a68a <SDMMC_GetResponse>
 80091a8:	4603      	mov	r3, r0
 80091aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091b2:	d102      	bne.n	80091ba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80091b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091b8:	e02f      	b.n	800921a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80091ba:	f107 030c 	add.w	r3, r7, #12
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f879 	bl	80092b8 <SD_FindSCR>
 80091c6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	e023      	b.n	800921a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d01c      	beq.n	8009216 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e4:	041b      	lsls	r3, r3, #16
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f001 fbb9 	bl	800a960 <SDMMC_CmdAppCommand>
 80091ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	e00f      	b.n	800921a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2102      	movs	r1, #2
 8009200:	4618      	mov	r0, r3
 8009202:	f001 fbf3 	bl	800a9ec <SDMMC_CmdBusWidth>
 8009206:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	e003      	b.n	800921a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009212:	2300      	movs	r3, #0
 8009214:	e001      	b.n	800921a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009216:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b086      	sub	sp, #24
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800922a:	2300      	movs	r3, #0
 800922c:	60fb      	str	r3, [r7, #12]
 800922e:	2300      	movs	r3, #0
 8009230:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f001 fa26 	bl	800a68a <SDMMC_GetResponse>
 800923e:	4603      	mov	r3, r0
 8009240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009248:	d102      	bne.n	8009250 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800924a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800924e:	e02f      	b.n	80092b0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009250:	f107 030c 	add.w	r3, r7, #12
 8009254:	4619      	mov	r1, r3
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f82e 	bl	80092b8 <SD_FindSCR>
 800925c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	e023      	b.n	80092b0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d01c      	beq.n	80092ac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800927a:	041b      	lsls	r3, r3, #16
 800927c:	4619      	mov	r1, r3
 800927e:	4610      	mov	r0, r2
 8009280:	f001 fb6e 	bl	800a960 <SDMMC_CmdAppCommand>
 8009284:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	e00f      	b.n	80092b0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2100      	movs	r1, #0
 8009296:	4618      	mov	r0, r3
 8009298:	f001 fba8 	bl	800a9ec <SDMMC_CmdBusWidth>
 800929c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	e003      	b.n	80092b0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80092a8:	2300      	movs	r3, #0
 80092aa:	e001      	b.n	80092b0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80092ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3718      	adds	r7, #24
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80092b8:	b590      	push	{r4, r7, lr}
 80092ba:	b08f      	sub	sp, #60	; 0x3c
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80092c2:	f7fc fda1 	bl	8005e08 <HAL_GetTick>
 80092c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80092c8:	2300      	movs	r3, #0
 80092ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80092cc:	2300      	movs	r3, #0
 80092ce:	60bb      	str	r3, [r7, #8]
 80092d0:	2300      	movs	r3, #0
 80092d2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2108      	movs	r1, #8
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 fa12 	bl	800a708 <SDMMC_CmdBlockLength>
 80092e4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80092e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80092ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ee:	e0b2      	b.n	8009456 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f8:	041b      	lsls	r3, r3, #16
 80092fa:	4619      	mov	r1, r3
 80092fc:	4610      	mov	r0, r2
 80092fe:	f001 fb2f 	bl	800a960 <SDMMC_CmdAppCommand>
 8009302:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <SD_FindSCR+0x56>
  {
    return errorstate;
 800930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930c:	e0a3      	b.n	8009456 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800930e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009312:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009314:	2308      	movs	r3, #8
 8009316:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009318:	2330      	movs	r3, #48	; 0x30
 800931a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800931c:	2302      	movs	r3, #2
 800931e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009320:	2300      	movs	r3, #0
 8009322:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009324:	2301      	movs	r3, #1
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f107 0210 	add.w	r2, r7, #16
 8009330:	4611      	mov	r1, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f001 f9bc 	bl	800a6b0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4618      	mov	r0, r3
 800933e:	f001 fb77 	bl	800aa30 <SDMMC_CmdSendSCR>
 8009342:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	2b00      	cmp	r3, #0
 8009348:	d02a      	beq.n	80093a0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	e083      	b.n	8009456 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00f      	beq.n	800937c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6819      	ldr	r1, [r3, #0]
 8009360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	f107 0208 	add.w	r2, r7, #8
 8009368:	18d4      	adds	r4, r2, r3
 800936a:	4608      	mov	r0, r1
 800936c:	f001 f91c 	bl	800a5a8 <SDMMC_ReadFIFO>
 8009370:	4603      	mov	r3, r0
 8009372:	6023      	str	r3, [r4, #0]
      index++;
 8009374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009376:	3301      	adds	r3, #1
 8009378:	637b      	str	r3, [r7, #52]	; 0x34
 800937a:	e006      	b.n	800938a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d012      	beq.n	80093b0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800938a:	f7fc fd3d 	bl	8005e08 <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009398:	d102      	bne.n	80093a0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800939a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800939e:	e05a      	b.n	8009456 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0cf      	beq.n	800934e <SD_FindSCR+0x96>
 80093ae:	e000      	b.n	80093b2 <SD_FindSCR+0xfa>
      break;
 80093b0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2208      	movs	r2, #8
 80093c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80093c8:	2308      	movs	r3, #8
 80093ca:	e044      	b.n	8009456 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d2:	f003 0302 	and.w	r3, r3, #2
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d005      	beq.n	80093e6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2202      	movs	r2, #2
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80093e2:	2302      	movs	r3, #2
 80093e4:	e037      	b.n	8009456 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ec:	f003 0320 	and.w	r3, r3, #32
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d005      	beq.n	8009400 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2220      	movs	r2, #32
 80093fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80093fc:	2320      	movs	r3, #32
 80093fe:	e02a      	b.n	8009456 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f240 523a 	movw	r2, #1338	; 0x53a
 8009408:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	061a      	lsls	r2, r3, #24
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	021b      	lsls	r3, r3, #8
 8009412:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009416:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	0a1b      	lsrs	r3, r3, #8
 800941c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009420:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	0e1b      	lsrs	r3, r3, #24
 8009426:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942a:	601a      	str	r2, [r3, #0]
    scr++;
 800942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942e:	3304      	adds	r3, #4
 8009430:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	061a      	lsls	r2, r3, #24
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	021b      	lsls	r3, r3, #8
 800943a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800943e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	0a1b      	lsrs	r3, r3, #8
 8009444:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009448:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	0e1b      	lsrs	r3, r3, #24
 800944e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009452:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	373c      	adds	r7, #60	; 0x3c
 800945a:	46bd      	mov	sp, r7
 800945c:	bd90      	pop	{r4, r7, pc}

0800945e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b086      	sub	sp, #24
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009470:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d03f      	beq.n	80094f8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009478:	2300      	movs	r3, #0
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	e033      	b.n	80094e6 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4618      	mov	r0, r3
 8009484:	f001 f890 	bl	800a5a8 <SDMMC_ReadFIFO>
 8009488:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	b2da      	uxtb	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3301      	adds	r3, #1
 8009496:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	3b01      	subs	r3, #1
 800949c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	0a1b      	lsrs	r3, r3, #8
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	3301      	adds	r3, #1
 80094ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	0c1b      	lsrs	r3, r3, #16
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3301      	adds	r3, #1
 80094c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	0e1b      	lsrs	r3, r3, #24
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3301      	adds	r3, #1
 80094d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	3b01      	subs	r3, #1
 80094de:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	3301      	adds	r3, #1
 80094e4:	617b      	str	r3, [r7, #20]
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b07      	cmp	r3, #7
 80094ea:	d9c8      	bls.n	800947e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80094f8:	bf00      	nop
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009512:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d043      	beq.n	80095a2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800951a:	2300      	movs	r3, #0
 800951c:	617b      	str	r3, [r7, #20]
 800951e:	e037      	b.n	8009590 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3301      	adds	r3, #1
 800952a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	3b01      	subs	r3, #1
 8009530:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	021a      	lsls	r2, r3, #8
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	4313      	orrs	r3, r2
 800953c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3301      	adds	r3, #1
 8009542:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	3b01      	subs	r3, #1
 8009548:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	041a      	lsls	r2, r3, #16
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	4313      	orrs	r3, r2
 8009554:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3301      	adds	r3, #1
 800955a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	3b01      	subs	r3, #1
 8009560:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	061a      	lsls	r2, r3, #24
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	4313      	orrs	r3, r2
 800956c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3301      	adds	r3, #1
 8009572:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	3b01      	subs	r3, #1
 8009578:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f107 0208 	add.w	r2, r7, #8
 8009582:	4611      	mov	r1, r2
 8009584:	4618      	mov	r0, r3
 8009586:	f001 f81c 	bl	800a5c2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	3301      	adds	r3, #1
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	2b07      	cmp	r3, #7
 8009594:	d9c4      	bls.n	8009520 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80095a2:	bf00      	nop
 80095a4:	3718      	adds	r7, #24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e049      	b.n	8009650 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d106      	bne.n	80095d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f841 	bl	8009658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2202      	movs	r2, #2
 80095da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	3304      	adds	r3, #4
 80095e6:	4619      	mov	r1, r3
 80095e8:	4610      	mov	r0, r2
 80095ea:	f000 f9ff 	bl	80099ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b01      	cmp	r3, #1
 800967e:	d001      	beq.n	8009684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e054      	b.n	800972e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2202      	movs	r2, #2
 8009688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68da      	ldr	r2, [r3, #12]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f042 0201 	orr.w	r2, r2, #1
 800969a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a26      	ldr	r2, [pc, #152]	; (800973c <HAL_TIM_Base_Start_IT+0xd0>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d022      	beq.n	80096ec <HAL_TIM_Base_Start_IT+0x80>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ae:	d01d      	beq.n	80096ec <HAL_TIM_Base_Start_IT+0x80>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a22      	ldr	r2, [pc, #136]	; (8009740 <HAL_TIM_Base_Start_IT+0xd4>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d018      	beq.n	80096ec <HAL_TIM_Base_Start_IT+0x80>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a21      	ldr	r2, [pc, #132]	; (8009744 <HAL_TIM_Base_Start_IT+0xd8>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d013      	beq.n	80096ec <HAL_TIM_Base_Start_IT+0x80>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <HAL_TIM_Base_Start_IT+0xdc>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d00e      	beq.n	80096ec <HAL_TIM_Base_Start_IT+0x80>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a1e      	ldr	r2, [pc, #120]	; (800974c <HAL_TIM_Base_Start_IT+0xe0>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d009      	beq.n	80096ec <HAL_TIM_Base_Start_IT+0x80>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a1c      	ldr	r2, [pc, #112]	; (8009750 <HAL_TIM_Base_Start_IT+0xe4>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d004      	beq.n	80096ec <HAL_TIM_Base_Start_IT+0x80>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a1b      	ldr	r2, [pc, #108]	; (8009754 <HAL_TIM_Base_Start_IT+0xe8>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d115      	bne.n	8009718 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689a      	ldr	r2, [r3, #8]
 80096f2:	4b19      	ldr	r3, [pc, #100]	; (8009758 <HAL_TIM_Base_Start_IT+0xec>)
 80096f4:	4013      	ands	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b06      	cmp	r3, #6
 80096fc:	d015      	beq.n	800972a <HAL_TIM_Base_Start_IT+0xbe>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009704:	d011      	beq.n	800972a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f042 0201 	orr.w	r2, r2, #1
 8009714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009716:	e008      	b.n	800972a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f042 0201 	orr.w	r2, r2, #1
 8009726:	601a      	str	r2, [r3, #0]
 8009728:	e000      	b.n	800972c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800972a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	40010000 	.word	0x40010000
 8009740:	40000400 	.word	0x40000400
 8009744:	40000800 	.word	0x40000800
 8009748:	40000c00 	.word	0x40000c00
 800974c:	40010400 	.word	0x40010400
 8009750:	40014000 	.word	0x40014000
 8009754:	40001800 	.word	0x40001800
 8009758:	00010007 	.word	0x00010007

0800975c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	f003 0302 	and.w	r3, r3, #2
 800976e:	2b02      	cmp	r3, #2
 8009770:	d122      	bne.n	80097b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	f003 0302 	and.w	r3, r3, #2
 800977c:	2b02      	cmp	r3, #2
 800977e:	d11b      	bne.n	80097b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f06f 0202 	mvn.w	r2, #2
 8009788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f905 	bl	80099ae <HAL_TIM_IC_CaptureCallback>
 80097a4:	e005      	b.n	80097b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f8f7 	bl	800999a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f908 	bl	80099c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	f003 0304 	and.w	r3, r3, #4
 80097c2:	2b04      	cmp	r3, #4
 80097c4:	d122      	bne.n	800980c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	d11b      	bne.n	800980c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f06f 0204 	mvn.w	r2, #4
 80097dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2202      	movs	r2, #2
 80097e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d003      	beq.n	80097fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f8db 	bl	80099ae <HAL_TIM_IC_CaptureCallback>
 80097f8:	e005      	b.n	8009806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f8cd 	bl	800999a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f8de 	bl	80099c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	f003 0308 	and.w	r3, r3, #8
 8009816:	2b08      	cmp	r3, #8
 8009818:	d122      	bne.n	8009860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f003 0308 	and.w	r3, r3, #8
 8009824:	2b08      	cmp	r3, #8
 8009826:	d11b      	bne.n	8009860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f06f 0208 	mvn.w	r2, #8
 8009830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2204      	movs	r2, #4
 8009836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d003      	beq.n	800984e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f8b1 	bl	80099ae <HAL_TIM_IC_CaptureCallback>
 800984c:	e005      	b.n	800985a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f8a3 	bl	800999a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f8b4 	bl	80099c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	f003 0310 	and.w	r3, r3, #16
 800986a:	2b10      	cmp	r3, #16
 800986c:	d122      	bne.n	80098b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	f003 0310 	and.w	r3, r3, #16
 8009878:	2b10      	cmp	r3, #16
 800987a:	d11b      	bne.n	80098b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f06f 0210 	mvn.w	r2, #16
 8009884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2208      	movs	r2, #8
 800988a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	69db      	ldr	r3, [r3, #28]
 8009892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f887 	bl	80099ae <HAL_TIM_IC_CaptureCallback>
 80098a0:	e005      	b.n	80098ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f879 	bl	800999a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f88a 	bl	80099c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d10e      	bne.n	80098e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f003 0301 	and.w	r3, r3, #1
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d107      	bne.n	80098e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f06f 0201 	mvn.w	r2, #1
 80098d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7fa fb88 	bl	8003ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ea:	2b80      	cmp	r3, #128	; 0x80
 80098ec:	d10e      	bne.n	800990c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f8:	2b80      	cmp	r3, #128	; 0x80
 80098fa:	d107      	bne.n	800990c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f91a 	bl	8009b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800991a:	d10e      	bne.n	800993a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009926:	2b80      	cmp	r3, #128	; 0x80
 8009928:	d107      	bne.n	800993a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f90d 	bl	8009b54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009944:	2b40      	cmp	r3, #64	; 0x40
 8009946:	d10e      	bne.n	8009966 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009952:	2b40      	cmp	r3, #64	; 0x40
 8009954:	d107      	bne.n	8009966 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800995e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f838 	bl	80099d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	f003 0320 	and.w	r3, r3, #32
 8009970:	2b20      	cmp	r3, #32
 8009972:	d10e      	bne.n	8009992 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f003 0320 	and.w	r3, r3, #32
 800997e:	2b20      	cmp	r3, #32
 8009980:	d107      	bne.n	8009992 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f06f 0220 	mvn.w	r2, #32
 800998a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f8cd 	bl	8009b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009992:	bf00      	nop
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800999a:	b480      	push	{r7}
 800999c:	b083      	sub	sp, #12
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099a2:	bf00      	nop
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b083      	sub	sp, #12
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099b6:	bf00      	nop
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099ca:	bf00      	nop
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b083      	sub	sp, #12
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099de:	bf00      	nop
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
	...

080099ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a40      	ldr	r2, [pc, #256]	; (8009b00 <TIM_Base_SetConfig+0x114>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d013      	beq.n	8009a2c <TIM_Base_SetConfig+0x40>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a0a:	d00f      	beq.n	8009a2c <TIM_Base_SetConfig+0x40>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a3d      	ldr	r2, [pc, #244]	; (8009b04 <TIM_Base_SetConfig+0x118>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d00b      	beq.n	8009a2c <TIM_Base_SetConfig+0x40>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a3c      	ldr	r2, [pc, #240]	; (8009b08 <TIM_Base_SetConfig+0x11c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d007      	beq.n	8009a2c <TIM_Base_SetConfig+0x40>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a3b      	ldr	r2, [pc, #236]	; (8009b0c <TIM_Base_SetConfig+0x120>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d003      	beq.n	8009a2c <TIM_Base_SetConfig+0x40>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a3a      	ldr	r2, [pc, #232]	; (8009b10 <TIM_Base_SetConfig+0x124>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d108      	bne.n	8009a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a2f      	ldr	r2, [pc, #188]	; (8009b00 <TIM_Base_SetConfig+0x114>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d02b      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a4c:	d027      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a2c      	ldr	r2, [pc, #176]	; (8009b04 <TIM_Base_SetConfig+0x118>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d023      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a2b      	ldr	r2, [pc, #172]	; (8009b08 <TIM_Base_SetConfig+0x11c>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d01f      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a2a      	ldr	r2, [pc, #168]	; (8009b0c <TIM_Base_SetConfig+0x120>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d01b      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a29      	ldr	r2, [pc, #164]	; (8009b10 <TIM_Base_SetConfig+0x124>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d017      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4a28      	ldr	r2, [pc, #160]	; (8009b14 <TIM_Base_SetConfig+0x128>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d013      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a27      	ldr	r2, [pc, #156]	; (8009b18 <TIM_Base_SetConfig+0x12c>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d00f      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a26      	ldr	r2, [pc, #152]	; (8009b1c <TIM_Base_SetConfig+0x130>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d00b      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a25      	ldr	r2, [pc, #148]	; (8009b20 <TIM_Base_SetConfig+0x134>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d007      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a24      	ldr	r2, [pc, #144]	; (8009b24 <TIM_Base_SetConfig+0x138>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d003      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a23      	ldr	r2, [pc, #140]	; (8009b28 <TIM_Base_SetConfig+0x13c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d108      	bne.n	8009ab0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	689a      	ldr	r2, [r3, #8]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a0a      	ldr	r2, [pc, #40]	; (8009b00 <TIM_Base_SetConfig+0x114>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d003      	beq.n	8009ae4 <TIM_Base_SetConfig+0xf8>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a0c      	ldr	r2, [pc, #48]	; (8009b10 <TIM_Base_SetConfig+0x124>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d103      	bne.n	8009aec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	691a      	ldr	r2, [r3, #16]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	615a      	str	r2, [r3, #20]
}
 8009af2:	bf00      	nop
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	40010000 	.word	0x40010000
 8009b04:	40000400 	.word	0x40000400
 8009b08:	40000800 	.word	0x40000800
 8009b0c:	40000c00 	.word	0x40000c00
 8009b10:	40010400 	.word	0x40010400
 8009b14:	40014000 	.word	0x40014000
 8009b18:	40014400 	.word	0x40014400
 8009b1c:	40014800 	.word	0x40014800
 8009b20:	40001800 	.word	0x40001800
 8009b24:	40001c00 	.word	0x40001c00
 8009b28:	40002000 	.word	0x40002000

08009b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e040      	b.n	8009bfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d106      	bne.n	8009b90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7fb fde2 	bl	8005754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2224      	movs	r2, #36	; 0x24
 8009b94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 0201 	bic.w	r2, r2, #1
 8009ba4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f8c0 	bl	8009d2c <UART_SetConfig>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d101      	bne.n	8009bb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e022      	b.n	8009bfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fb16 	bl	800a1f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	685a      	ldr	r2, [r3, #4]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	689a      	ldr	r2, [r3, #8]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009be2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f042 0201 	orr.w	r2, r2, #1
 8009bf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fb9d 	bl	800a334 <UART_CheckIdleState>
 8009bfa:	4603      	mov	r3, r0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08a      	sub	sp, #40	; 0x28
 8009c08:	af02      	add	r7, sp, #8
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	4613      	mov	r3, r2
 8009c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c18:	2b20      	cmp	r3, #32
 8009c1a:	f040 8081 	bne.w	8009d20 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <HAL_UART_Transmit+0x26>
 8009c24:	88fb      	ldrh	r3, [r7, #6]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e079      	b.n	8009d22 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d101      	bne.n	8009c3c <HAL_UART_Transmit+0x38>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e072      	b.n	8009d22 <HAL_UART_Transmit+0x11e>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2221      	movs	r2, #33	; 0x21
 8009c50:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c52:	f7fc f8d9 	bl	8005e08 <HAL_GetTick>
 8009c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	88fa      	ldrh	r2, [r7, #6]
 8009c5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	88fa      	ldrh	r2, [r7, #6]
 8009c64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c70:	d108      	bne.n	8009c84 <HAL_UART_Transmit+0x80>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d104      	bne.n	8009c84 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	61bb      	str	r3, [r7, #24]
 8009c82:	e003      	b.n	8009c8c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009c94:	e02c      	b.n	8009cf0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2180      	movs	r1, #128	; 0x80
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 fb90 	bl	800a3c6 <UART_WaitOnFlagUntilTimeout>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e038      	b.n	8009d22 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10b      	bne.n	8009cce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	3302      	adds	r3, #2
 8009cca:	61bb      	str	r3, [r7, #24]
 8009ccc:	e007      	b.n	8009cde <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	781a      	ldrb	r2, [r3, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1cc      	bne.n	8009c96 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	2200      	movs	r2, #0
 8009d04:	2140      	movs	r1, #64	; 0x40
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f000 fb5d 	bl	800a3c6 <UART_WaitOnFlagUntilTimeout>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	e005      	b.n	8009d22 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2220      	movs	r2, #32
 8009d1a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	e000      	b.n	8009d22 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009d20:	2302      	movs	r3, #2
  }
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3720      	adds	r7, #32
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
	...

08009d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b088      	sub	sp, #32
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689a      	ldr	r2, [r3, #8]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	431a      	orrs	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	431a      	orrs	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	69db      	ldr	r3, [r3, #28]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	4ba7      	ldr	r3, [pc, #668]	; (8009ff4 <UART_SetConfig+0x2c8>)
 8009d58:	4013      	ands	r3, r2
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	6812      	ldr	r2, [r2, #0]
 8009d5e:	6979      	ldr	r1, [r7, #20]
 8009d60:	430b      	orrs	r3, r1
 8009d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68da      	ldr	r2, [r3, #12]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	430a      	orrs	r2, r1
 8009d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a1b      	ldr	r3, [r3, #32]
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	430a      	orrs	r2, r1
 8009d9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a95      	ldr	r2, [pc, #596]	; (8009ff8 <UART_SetConfig+0x2cc>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d120      	bne.n	8009dea <UART_SetConfig+0xbe>
 8009da8:	4b94      	ldr	r3, [pc, #592]	; (8009ffc <UART_SetConfig+0x2d0>)
 8009daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dae:	f003 0303 	and.w	r3, r3, #3
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d816      	bhi.n	8009de4 <UART_SetConfig+0xb8>
 8009db6:	a201      	add	r2, pc, #4	; (adr r2, 8009dbc <UART_SetConfig+0x90>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009dcd 	.word	0x08009dcd
 8009dc0:	08009dd9 	.word	0x08009dd9
 8009dc4:	08009dd3 	.word	0x08009dd3
 8009dc8:	08009ddf 	.word	0x08009ddf
 8009dcc:	2301      	movs	r3, #1
 8009dce:	77fb      	strb	r3, [r7, #31]
 8009dd0:	e14f      	b.n	800a072 <UART_SetConfig+0x346>
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	77fb      	strb	r3, [r7, #31]
 8009dd6:	e14c      	b.n	800a072 <UART_SetConfig+0x346>
 8009dd8:	2304      	movs	r3, #4
 8009dda:	77fb      	strb	r3, [r7, #31]
 8009ddc:	e149      	b.n	800a072 <UART_SetConfig+0x346>
 8009dde:	2308      	movs	r3, #8
 8009de0:	77fb      	strb	r3, [r7, #31]
 8009de2:	e146      	b.n	800a072 <UART_SetConfig+0x346>
 8009de4:	2310      	movs	r3, #16
 8009de6:	77fb      	strb	r3, [r7, #31]
 8009de8:	e143      	b.n	800a072 <UART_SetConfig+0x346>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a84      	ldr	r2, [pc, #528]	; (800a000 <UART_SetConfig+0x2d4>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d132      	bne.n	8009e5a <UART_SetConfig+0x12e>
 8009df4:	4b81      	ldr	r3, [pc, #516]	; (8009ffc <UART_SetConfig+0x2d0>)
 8009df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dfa:	f003 030c 	and.w	r3, r3, #12
 8009dfe:	2b0c      	cmp	r3, #12
 8009e00:	d828      	bhi.n	8009e54 <UART_SetConfig+0x128>
 8009e02:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <UART_SetConfig+0xdc>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009e3d 	.word	0x08009e3d
 8009e0c:	08009e55 	.word	0x08009e55
 8009e10:	08009e55 	.word	0x08009e55
 8009e14:	08009e55 	.word	0x08009e55
 8009e18:	08009e49 	.word	0x08009e49
 8009e1c:	08009e55 	.word	0x08009e55
 8009e20:	08009e55 	.word	0x08009e55
 8009e24:	08009e55 	.word	0x08009e55
 8009e28:	08009e43 	.word	0x08009e43
 8009e2c:	08009e55 	.word	0x08009e55
 8009e30:	08009e55 	.word	0x08009e55
 8009e34:	08009e55 	.word	0x08009e55
 8009e38:	08009e4f 	.word	0x08009e4f
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	77fb      	strb	r3, [r7, #31]
 8009e40:	e117      	b.n	800a072 <UART_SetConfig+0x346>
 8009e42:	2302      	movs	r3, #2
 8009e44:	77fb      	strb	r3, [r7, #31]
 8009e46:	e114      	b.n	800a072 <UART_SetConfig+0x346>
 8009e48:	2304      	movs	r3, #4
 8009e4a:	77fb      	strb	r3, [r7, #31]
 8009e4c:	e111      	b.n	800a072 <UART_SetConfig+0x346>
 8009e4e:	2308      	movs	r3, #8
 8009e50:	77fb      	strb	r3, [r7, #31]
 8009e52:	e10e      	b.n	800a072 <UART_SetConfig+0x346>
 8009e54:	2310      	movs	r3, #16
 8009e56:	77fb      	strb	r3, [r7, #31]
 8009e58:	e10b      	b.n	800a072 <UART_SetConfig+0x346>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a69      	ldr	r2, [pc, #420]	; (800a004 <UART_SetConfig+0x2d8>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d120      	bne.n	8009ea6 <UART_SetConfig+0x17a>
 8009e64:	4b65      	ldr	r3, [pc, #404]	; (8009ffc <UART_SetConfig+0x2d0>)
 8009e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e6e:	2b30      	cmp	r3, #48	; 0x30
 8009e70:	d013      	beq.n	8009e9a <UART_SetConfig+0x16e>
 8009e72:	2b30      	cmp	r3, #48	; 0x30
 8009e74:	d814      	bhi.n	8009ea0 <UART_SetConfig+0x174>
 8009e76:	2b20      	cmp	r3, #32
 8009e78:	d009      	beq.n	8009e8e <UART_SetConfig+0x162>
 8009e7a:	2b20      	cmp	r3, #32
 8009e7c:	d810      	bhi.n	8009ea0 <UART_SetConfig+0x174>
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <UART_SetConfig+0x15c>
 8009e82:	2b10      	cmp	r3, #16
 8009e84:	d006      	beq.n	8009e94 <UART_SetConfig+0x168>
 8009e86:	e00b      	b.n	8009ea0 <UART_SetConfig+0x174>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	77fb      	strb	r3, [r7, #31]
 8009e8c:	e0f1      	b.n	800a072 <UART_SetConfig+0x346>
 8009e8e:	2302      	movs	r3, #2
 8009e90:	77fb      	strb	r3, [r7, #31]
 8009e92:	e0ee      	b.n	800a072 <UART_SetConfig+0x346>
 8009e94:	2304      	movs	r3, #4
 8009e96:	77fb      	strb	r3, [r7, #31]
 8009e98:	e0eb      	b.n	800a072 <UART_SetConfig+0x346>
 8009e9a:	2308      	movs	r3, #8
 8009e9c:	77fb      	strb	r3, [r7, #31]
 8009e9e:	e0e8      	b.n	800a072 <UART_SetConfig+0x346>
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	77fb      	strb	r3, [r7, #31]
 8009ea4:	e0e5      	b.n	800a072 <UART_SetConfig+0x346>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a57      	ldr	r2, [pc, #348]	; (800a008 <UART_SetConfig+0x2dc>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d120      	bne.n	8009ef2 <UART_SetConfig+0x1c6>
 8009eb0:	4b52      	ldr	r3, [pc, #328]	; (8009ffc <UART_SetConfig+0x2d0>)
 8009eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009eba:	2bc0      	cmp	r3, #192	; 0xc0
 8009ebc:	d013      	beq.n	8009ee6 <UART_SetConfig+0x1ba>
 8009ebe:	2bc0      	cmp	r3, #192	; 0xc0
 8009ec0:	d814      	bhi.n	8009eec <UART_SetConfig+0x1c0>
 8009ec2:	2b80      	cmp	r3, #128	; 0x80
 8009ec4:	d009      	beq.n	8009eda <UART_SetConfig+0x1ae>
 8009ec6:	2b80      	cmp	r3, #128	; 0x80
 8009ec8:	d810      	bhi.n	8009eec <UART_SetConfig+0x1c0>
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d002      	beq.n	8009ed4 <UART_SetConfig+0x1a8>
 8009ece:	2b40      	cmp	r3, #64	; 0x40
 8009ed0:	d006      	beq.n	8009ee0 <UART_SetConfig+0x1b4>
 8009ed2:	e00b      	b.n	8009eec <UART_SetConfig+0x1c0>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	77fb      	strb	r3, [r7, #31]
 8009ed8:	e0cb      	b.n	800a072 <UART_SetConfig+0x346>
 8009eda:	2302      	movs	r3, #2
 8009edc:	77fb      	strb	r3, [r7, #31]
 8009ede:	e0c8      	b.n	800a072 <UART_SetConfig+0x346>
 8009ee0:	2304      	movs	r3, #4
 8009ee2:	77fb      	strb	r3, [r7, #31]
 8009ee4:	e0c5      	b.n	800a072 <UART_SetConfig+0x346>
 8009ee6:	2308      	movs	r3, #8
 8009ee8:	77fb      	strb	r3, [r7, #31]
 8009eea:	e0c2      	b.n	800a072 <UART_SetConfig+0x346>
 8009eec:	2310      	movs	r3, #16
 8009eee:	77fb      	strb	r3, [r7, #31]
 8009ef0:	e0bf      	b.n	800a072 <UART_SetConfig+0x346>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a45      	ldr	r2, [pc, #276]	; (800a00c <UART_SetConfig+0x2e0>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d125      	bne.n	8009f48 <UART_SetConfig+0x21c>
 8009efc:	4b3f      	ldr	r3, [pc, #252]	; (8009ffc <UART_SetConfig+0x2d0>)
 8009efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f0a:	d017      	beq.n	8009f3c <UART_SetConfig+0x210>
 8009f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f10:	d817      	bhi.n	8009f42 <UART_SetConfig+0x216>
 8009f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f16:	d00b      	beq.n	8009f30 <UART_SetConfig+0x204>
 8009f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f1c:	d811      	bhi.n	8009f42 <UART_SetConfig+0x216>
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d003      	beq.n	8009f2a <UART_SetConfig+0x1fe>
 8009f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f26:	d006      	beq.n	8009f36 <UART_SetConfig+0x20a>
 8009f28:	e00b      	b.n	8009f42 <UART_SetConfig+0x216>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	77fb      	strb	r3, [r7, #31]
 8009f2e:	e0a0      	b.n	800a072 <UART_SetConfig+0x346>
 8009f30:	2302      	movs	r3, #2
 8009f32:	77fb      	strb	r3, [r7, #31]
 8009f34:	e09d      	b.n	800a072 <UART_SetConfig+0x346>
 8009f36:	2304      	movs	r3, #4
 8009f38:	77fb      	strb	r3, [r7, #31]
 8009f3a:	e09a      	b.n	800a072 <UART_SetConfig+0x346>
 8009f3c:	2308      	movs	r3, #8
 8009f3e:	77fb      	strb	r3, [r7, #31]
 8009f40:	e097      	b.n	800a072 <UART_SetConfig+0x346>
 8009f42:	2310      	movs	r3, #16
 8009f44:	77fb      	strb	r3, [r7, #31]
 8009f46:	e094      	b.n	800a072 <UART_SetConfig+0x346>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a30      	ldr	r2, [pc, #192]	; (800a010 <UART_SetConfig+0x2e4>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d125      	bne.n	8009f9e <UART_SetConfig+0x272>
 8009f52:	4b2a      	ldr	r3, [pc, #168]	; (8009ffc <UART_SetConfig+0x2d0>)
 8009f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009f5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f60:	d017      	beq.n	8009f92 <UART_SetConfig+0x266>
 8009f62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f66:	d817      	bhi.n	8009f98 <UART_SetConfig+0x26c>
 8009f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f6c:	d00b      	beq.n	8009f86 <UART_SetConfig+0x25a>
 8009f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f72:	d811      	bhi.n	8009f98 <UART_SetConfig+0x26c>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <UART_SetConfig+0x254>
 8009f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f7c:	d006      	beq.n	8009f8c <UART_SetConfig+0x260>
 8009f7e:	e00b      	b.n	8009f98 <UART_SetConfig+0x26c>
 8009f80:	2301      	movs	r3, #1
 8009f82:	77fb      	strb	r3, [r7, #31]
 8009f84:	e075      	b.n	800a072 <UART_SetConfig+0x346>
 8009f86:	2302      	movs	r3, #2
 8009f88:	77fb      	strb	r3, [r7, #31]
 8009f8a:	e072      	b.n	800a072 <UART_SetConfig+0x346>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	77fb      	strb	r3, [r7, #31]
 8009f90:	e06f      	b.n	800a072 <UART_SetConfig+0x346>
 8009f92:	2308      	movs	r3, #8
 8009f94:	77fb      	strb	r3, [r7, #31]
 8009f96:	e06c      	b.n	800a072 <UART_SetConfig+0x346>
 8009f98:	2310      	movs	r3, #16
 8009f9a:	77fb      	strb	r3, [r7, #31]
 8009f9c:	e069      	b.n	800a072 <UART_SetConfig+0x346>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a1c      	ldr	r2, [pc, #112]	; (800a014 <UART_SetConfig+0x2e8>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d137      	bne.n	800a018 <UART_SetConfig+0x2ec>
 8009fa8:	4b14      	ldr	r3, [pc, #80]	; (8009ffc <UART_SetConfig+0x2d0>)
 8009faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009fb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fb6:	d017      	beq.n	8009fe8 <UART_SetConfig+0x2bc>
 8009fb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fbc:	d817      	bhi.n	8009fee <UART_SetConfig+0x2c2>
 8009fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fc2:	d00b      	beq.n	8009fdc <UART_SetConfig+0x2b0>
 8009fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fc8:	d811      	bhi.n	8009fee <UART_SetConfig+0x2c2>
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <UART_SetConfig+0x2aa>
 8009fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd2:	d006      	beq.n	8009fe2 <UART_SetConfig+0x2b6>
 8009fd4:	e00b      	b.n	8009fee <UART_SetConfig+0x2c2>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	77fb      	strb	r3, [r7, #31]
 8009fda:	e04a      	b.n	800a072 <UART_SetConfig+0x346>
 8009fdc:	2302      	movs	r3, #2
 8009fde:	77fb      	strb	r3, [r7, #31]
 8009fe0:	e047      	b.n	800a072 <UART_SetConfig+0x346>
 8009fe2:	2304      	movs	r3, #4
 8009fe4:	77fb      	strb	r3, [r7, #31]
 8009fe6:	e044      	b.n	800a072 <UART_SetConfig+0x346>
 8009fe8:	2308      	movs	r3, #8
 8009fea:	77fb      	strb	r3, [r7, #31]
 8009fec:	e041      	b.n	800a072 <UART_SetConfig+0x346>
 8009fee:	2310      	movs	r3, #16
 8009ff0:	77fb      	strb	r3, [r7, #31]
 8009ff2:	e03e      	b.n	800a072 <UART_SetConfig+0x346>
 8009ff4:	efff69f3 	.word	0xefff69f3
 8009ff8:	40011000 	.word	0x40011000
 8009ffc:	40023800 	.word	0x40023800
 800a000:	40004400 	.word	0x40004400
 800a004:	40004800 	.word	0x40004800
 800a008:	40004c00 	.word	0x40004c00
 800a00c:	40005000 	.word	0x40005000
 800a010:	40011400 	.word	0x40011400
 800a014:	40007800 	.word	0x40007800
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a71      	ldr	r2, [pc, #452]	; (800a1e4 <UART_SetConfig+0x4b8>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d125      	bne.n	800a06e <UART_SetConfig+0x342>
 800a022:	4b71      	ldr	r3, [pc, #452]	; (800a1e8 <UART_SetConfig+0x4bc>)
 800a024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a028:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a02c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a030:	d017      	beq.n	800a062 <UART_SetConfig+0x336>
 800a032:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a036:	d817      	bhi.n	800a068 <UART_SetConfig+0x33c>
 800a038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a03c:	d00b      	beq.n	800a056 <UART_SetConfig+0x32a>
 800a03e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a042:	d811      	bhi.n	800a068 <UART_SetConfig+0x33c>
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <UART_SetConfig+0x324>
 800a048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a04c:	d006      	beq.n	800a05c <UART_SetConfig+0x330>
 800a04e:	e00b      	b.n	800a068 <UART_SetConfig+0x33c>
 800a050:	2300      	movs	r3, #0
 800a052:	77fb      	strb	r3, [r7, #31]
 800a054:	e00d      	b.n	800a072 <UART_SetConfig+0x346>
 800a056:	2302      	movs	r3, #2
 800a058:	77fb      	strb	r3, [r7, #31]
 800a05a:	e00a      	b.n	800a072 <UART_SetConfig+0x346>
 800a05c:	2304      	movs	r3, #4
 800a05e:	77fb      	strb	r3, [r7, #31]
 800a060:	e007      	b.n	800a072 <UART_SetConfig+0x346>
 800a062:	2308      	movs	r3, #8
 800a064:	77fb      	strb	r3, [r7, #31]
 800a066:	e004      	b.n	800a072 <UART_SetConfig+0x346>
 800a068:	2310      	movs	r3, #16
 800a06a:	77fb      	strb	r3, [r7, #31]
 800a06c:	e001      	b.n	800a072 <UART_SetConfig+0x346>
 800a06e:	2310      	movs	r3, #16
 800a070:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a07a:	d15a      	bne.n	800a132 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800a07c:	7ffb      	ldrb	r3, [r7, #31]
 800a07e:	2b08      	cmp	r3, #8
 800a080:	d827      	bhi.n	800a0d2 <UART_SetConfig+0x3a6>
 800a082:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <UART_SetConfig+0x35c>)
 800a084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a088:	0800a0ad 	.word	0x0800a0ad
 800a08c:	0800a0b5 	.word	0x0800a0b5
 800a090:	0800a0bd 	.word	0x0800a0bd
 800a094:	0800a0d3 	.word	0x0800a0d3
 800a098:	0800a0c3 	.word	0x0800a0c3
 800a09c:	0800a0d3 	.word	0x0800a0d3
 800a0a0:	0800a0d3 	.word	0x0800a0d3
 800a0a4:	0800a0d3 	.word	0x0800a0d3
 800a0a8:	0800a0cb 	.word	0x0800a0cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0ac:	f7fd fad2 	bl	8007654 <HAL_RCC_GetPCLK1Freq>
 800a0b0:	61b8      	str	r0, [r7, #24]
        break;
 800a0b2:	e013      	b.n	800a0dc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0b4:	f7fd fae2 	bl	800767c <HAL_RCC_GetPCLK2Freq>
 800a0b8:	61b8      	str	r0, [r7, #24]
        break;
 800a0ba:	e00f      	b.n	800a0dc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0bc:	4b4b      	ldr	r3, [pc, #300]	; (800a1ec <UART_SetConfig+0x4c0>)
 800a0be:	61bb      	str	r3, [r7, #24]
        break;
 800a0c0:	e00c      	b.n	800a0dc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0c2:	f7fd fa05 	bl	80074d0 <HAL_RCC_GetSysClockFreq>
 800a0c6:	61b8      	str	r0, [r7, #24]
        break;
 800a0c8:	e008      	b.n	800a0dc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ce:	61bb      	str	r3, [r7, #24]
        break;
 800a0d0:	e004      	b.n	800a0dc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	77bb      	strb	r3, [r7, #30]
        break;
 800a0da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d074      	beq.n	800a1cc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	005a      	lsls	r2, r3, #1
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	085b      	lsrs	r3, r3, #1
 800a0ec:	441a      	add	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	2b0f      	cmp	r3, #15
 800a0fc:	d916      	bls.n	800a12c <UART_SetConfig+0x400>
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a104:	d212      	bcs.n	800a12c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	f023 030f 	bic.w	r3, r3, #15
 800a10e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	085b      	lsrs	r3, r3, #1
 800a114:	b29b      	uxth	r3, r3
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	89fb      	ldrh	r3, [r7, #14]
 800a11e:	4313      	orrs	r3, r2
 800a120:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	89fa      	ldrh	r2, [r7, #14]
 800a128:	60da      	str	r2, [r3, #12]
 800a12a:	e04f      	b.n	800a1cc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	77bb      	strb	r3, [r7, #30]
 800a130:	e04c      	b.n	800a1cc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a132:	7ffb      	ldrb	r3, [r7, #31]
 800a134:	2b08      	cmp	r3, #8
 800a136:	d828      	bhi.n	800a18a <UART_SetConfig+0x45e>
 800a138:	a201      	add	r2, pc, #4	; (adr r2, 800a140 <UART_SetConfig+0x414>)
 800a13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13e:	bf00      	nop
 800a140:	0800a165 	.word	0x0800a165
 800a144:	0800a16d 	.word	0x0800a16d
 800a148:	0800a175 	.word	0x0800a175
 800a14c:	0800a18b 	.word	0x0800a18b
 800a150:	0800a17b 	.word	0x0800a17b
 800a154:	0800a18b 	.word	0x0800a18b
 800a158:	0800a18b 	.word	0x0800a18b
 800a15c:	0800a18b 	.word	0x0800a18b
 800a160:	0800a183 	.word	0x0800a183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a164:	f7fd fa76 	bl	8007654 <HAL_RCC_GetPCLK1Freq>
 800a168:	61b8      	str	r0, [r7, #24]
        break;
 800a16a:	e013      	b.n	800a194 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a16c:	f7fd fa86 	bl	800767c <HAL_RCC_GetPCLK2Freq>
 800a170:	61b8      	str	r0, [r7, #24]
        break;
 800a172:	e00f      	b.n	800a194 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a174:	4b1d      	ldr	r3, [pc, #116]	; (800a1ec <UART_SetConfig+0x4c0>)
 800a176:	61bb      	str	r3, [r7, #24]
        break;
 800a178:	e00c      	b.n	800a194 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a17a:	f7fd f9a9 	bl	80074d0 <HAL_RCC_GetSysClockFreq>
 800a17e:	61b8      	str	r0, [r7, #24]
        break;
 800a180:	e008      	b.n	800a194 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a186:	61bb      	str	r3, [r7, #24]
        break;
 800a188:	e004      	b.n	800a194 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	77bb      	strb	r3, [r7, #30]
        break;
 800a192:	bf00      	nop
    }

    if (pclk != 0U)
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d018      	beq.n	800a1cc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	085a      	lsrs	r2, r3, #1
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	441a      	add	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	2b0f      	cmp	r3, #15
 800a1b2:	d909      	bls.n	800a1c8 <UART_SetConfig+0x49c>
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1ba:	d205      	bcs.n	800a1c8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	60da      	str	r2, [r3, #12]
 800a1c6:	e001      	b.n	800a1cc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a1d8:	7fbb      	ldrb	r3, [r7, #30]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3720      	adds	r7, #32
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	40007c00 	.word	0x40007c00
 800a1e8:	40023800 	.word	0x40023800
 800a1ec:	00f42400 	.word	0x00f42400

0800a1f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fc:	f003 0301 	and.w	r3, r3, #1
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00a      	beq.n	800a21a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	430a      	orrs	r2, r1
 800a218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21e:	f003 0302 	and.w	r3, r3, #2
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00a      	beq.n	800a23c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	430a      	orrs	r2, r1
 800a23a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a240:	f003 0304 	and.w	r3, r3, #4
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00a      	beq.n	800a25e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	430a      	orrs	r2, r1
 800a25c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a262:	f003 0308 	and.w	r3, r3, #8
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00a      	beq.n	800a280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	430a      	orrs	r2, r1
 800a27e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	f003 0310 	and.w	r3, r3, #16
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00a      	beq.n	800a2a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	430a      	orrs	r2, r1
 800a2a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a6:	f003 0320 	and.w	r3, r3, #32
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00a      	beq.n	800a2c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	430a      	orrs	r2, r1
 800a2c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d01a      	beq.n	800a306 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2ee:	d10a      	bne.n	800a306 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00a      	beq.n	800a328 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	430a      	orrs	r2, r1
 800a326:	605a      	str	r2, [r3, #4]
  }
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af02      	add	r7, sp, #8
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a344:	f7fb fd60 	bl	8005e08 <HAL_GetTick>
 800a348:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 0308 	and.w	r3, r3, #8
 800a354:	2b08      	cmp	r3, #8
 800a356:	d10e      	bne.n	800a376 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f82d 	bl	800a3c6 <UART_WaitOnFlagUntilTimeout>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e023      	b.n	800a3be <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b04      	cmp	r3, #4
 800a382:	d10e      	bne.n	800a3a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a384:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f817 	bl	800a3c6 <UART_WaitOnFlagUntilTimeout>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e00d      	b.n	800a3be <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2220      	movs	r2, #32
 800a3a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2220      	movs	r2, #32
 800a3ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b09c      	sub	sp, #112	; 0x70
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	603b      	str	r3, [r7, #0]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3d6:	e0a5      	b.n	800a524 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3de:	f000 80a1 	beq.w	800a524 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e2:	f7fb fd11 	bl	8005e08 <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d302      	bcc.n	800a3f8 <UART_WaitOnFlagUntilTimeout+0x32>
 800a3f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d13e      	bne.n	800a476 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a400:	e853 3f00 	ldrex	r3, [r3]
 800a404:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a40c:	667b      	str	r3, [r7, #100]	; 0x64
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a416:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a418:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a41c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a41e:	e841 2300 	strex	r3, r2, [r1]
 800a422:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1e6      	bne.n	800a3f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3308      	adds	r3, #8
 800a430:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a434:	e853 3f00 	ldrex	r3, [r3]
 800a438:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43c:	f023 0301 	bic.w	r3, r3, #1
 800a440:	663b      	str	r3, [r7, #96]	; 0x60
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3308      	adds	r3, #8
 800a448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a44a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a44c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a452:	e841 2300 	strex	r3, r2, [r1]
 800a456:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1e5      	bne.n	800a42a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2220      	movs	r2, #32
 800a462:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2220      	movs	r2, #32
 800a468:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	e067      	b.n	800a546 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 0304 	and.w	r3, r3, #4
 800a480:	2b00      	cmp	r3, #0
 800a482:	d04f      	beq.n	800a524 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a48e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a492:	d147      	bne.n	800a524 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a49c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a4be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4c4:	e841 2300 	strex	r3, r2, [r1]
 800a4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1e6      	bne.n	800a49e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	3308      	adds	r3, #8
 800a4d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	e853 3f00 	ldrex	r3, [r3]
 800a4de:	613b      	str	r3, [r7, #16]
   return(result);
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	f023 0301 	bic.w	r3, r3, #1
 800a4e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	3308      	adds	r3, #8
 800a4ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a4f0:	623a      	str	r2, [r7, #32]
 800a4f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f4:	69f9      	ldr	r1, [r7, #28]
 800a4f6:	6a3a      	ldr	r2, [r7, #32]
 800a4f8:	e841 2300 	strex	r3, r2, [r1]
 800a4fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1e5      	bne.n	800a4d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2220      	movs	r2, #32
 800a508:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2220      	movs	r2, #32
 800a50e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2220      	movs	r2, #32
 800a514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a520:	2303      	movs	r3, #3
 800a522:	e010      	b.n	800a546 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	69da      	ldr	r2, [r3, #28]
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	4013      	ands	r3, r2
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	429a      	cmp	r2, r3
 800a532:	bf0c      	ite	eq
 800a534:	2301      	moveq	r3, #1
 800a536:	2300      	movne	r3, #0
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	461a      	mov	r2, r3
 800a53c:	79fb      	ldrb	r3, [r7, #7]
 800a53e:	429a      	cmp	r2, r3
 800a540:	f43f af4a 	beq.w	800a3d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3770      	adds	r7, #112	; 0x70
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
	...

0800a550 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a550:	b084      	sub	sp, #16
 800a552:	b480      	push	{r7}
 800a554:	b085      	sub	sp, #20
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	f107 001c 	add.w	r0, r7, #28
 800a55e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a566:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a568:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a56a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a56e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a570:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a572:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a576:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a57a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	4313      	orrs	r3, r2
 800a580:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685a      	ldr	r2, [r3, #4]
 800a586:	4b07      	ldr	r3, [pc, #28]	; (800a5a4 <SDMMC_Init+0x54>)
 800a588:	4013      	ands	r3, r2
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	431a      	orrs	r2, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	b004      	add	sp, #16
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	ffff8100 	.word	0xffff8100

0800a5a8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a5c2:	b480      	push	{r7}
 800a5c4:	b083      	sub	sp, #12
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2203      	movs	r2, #3
 800a5f0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f003 0303 	and.w	r3, r3, #3
}
 800a610:	4618      	mov	r0, r3
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a63a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a640:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a646:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68da      	ldr	r2, [r3, #12]
 800a652:	4b06      	ldr	r3, [pc, #24]	; (800a66c <SDMMC_SendCommand+0x50>)
 800a654:	4013      	ands	r3, r2
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	431a      	orrs	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3714      	adds	r7, #20
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	fffff000 	.word	0xfffff000

0800a670 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	b2db      	uxtb	r3, r3
}
 800a67e:	4618      	mov	r0, r3
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b085      	sub	sp, #20
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3314      	adds	r3, #20
 800a698:	461a      	mov	r2, r3
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	4413      	add	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
}  
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	685a      	ldr	r2, [r3, #4]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a6d6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a6dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a6e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ee:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a6fa:	2300      	movs	r3, #0

}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3714      	adds	r7, #20
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b088      	sub	sp, #32
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a716:	2310      	movs	r3, #16
 800a718:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a71a:	2340      	movs	r3, #64	; 0x40
 800a71c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a71e:	2300      	movs	r3, #0
 800a720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a726:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a728:	f107 0308 	add.w	r3, r7, #8
 800a72c:	4619      	mov	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff ff74 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a734:	f241 3288 	movw	r2, #5000	; 0x1388
 800a738:	2110      	movs	r1, #16
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fa1a 	bl	800ab74 <SDMMC_GetCmdResp1>
 800a740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a742:	69fb      	ldr	r3, [r7, #28]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3720      	adds	r7, #32
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b088      	sub	sp, #32
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a75a:	2311      	movs	r3, #17
 800a75c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a75e:	2340      	movs	r3, #64	; 0x40
 800a760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a762:	2300      	movs	r3, #0
 800a764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a76a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a76c:	f107 0308 	add.w	r3, r7, #8
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff ff52 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a778:	f241 3288 	movw	r2, #5000	; 0x1388
 800a77c:	2111      	movs	r1, #17
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f9f8 	bl	800ab74 <SDMMC_GetCmdResp1>
 800a784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a786:	69fb      	ldr	r3, [r7, #28]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3720      	adds	r7, #32
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a79e:	2312      	movs	r3, #18
 800a7a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7a2:	2340      	movs	r3, #64	; 0x40
 800a7a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7b0:	f107 0308 	add.w	r3, r7, #8
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7ff ff30 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a7bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7c0:	2112      	movs	r1, #18
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f9d6 	bl	800ab74 <SDMMC_GetCmdResp1>
 800a7c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7ca:	69fb      	ldr	r3, [r7, #28]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3720      	adds	r7, #32
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a7e2:	2318      	movs	r3, #24
 800a7e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7e6:	2340      	movs	r3, #64	; 0x40
 800a7e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7f4:	f107 0308 	add.w	r3, r7, #8
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f7ff ff0e 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a800:	f241 3288 	movw	r2, #5000	; 0x1388
 800a804:	2118      	movs	r1, #24
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f9b4 	bl	800ab74 <SDMMC_GetCmdResp1>
 800a80c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a80e:	69fb      	ldr	r3, [r7, #28]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3720      	adds	r7, #32
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b088      	sub	sp, #32
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a826:	2319      	movs	r3, #25
 800a828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a82a:	2340      	movs	r3, #64	; 0x40
 800a82c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a82e:	2300      	movs	r3, #0
 800a830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a836:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a838:	f107 0308 	add.w	r3, r7, #8
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff feec 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a844:	f241 3288 	movw	r2, #5000	; 0x1388
 800a848:	2119      	movs	r1, #25
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f992 	bl	800ab74 <SDMMC_GetCmdResp1>
 800a850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a852:	69fb      	ldr	r3, [r7, #28]
}
 800a854:	4618      	mov	r0, r3
 800a856:	3720      	adds	r7, #32
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b088      	sub	sp, #32
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a864:	2300      	movs	r3, #0
 800a866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a868:	230c      	movs	r3, #12
 800a86a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a86c:	2340      	movs	r3, #64	; 0x40
 800a86e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a870:	2300      	movs	r3, #0
 800a872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a878:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a87a:	f107 0308 	add.w	r3, r7, #8
 800a87e:	4619      	mov	r1, r3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7ff fecb 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a886:	4a05      	ldr	r2, [pc, #20]	; (800a89c <SDMMC_CmdStopTransfer+0x40>)
 800a888:	210c      	movs	r1, #12
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f972 	bl	800ab74 <SDMMC_GetCmdResp1>
 800a890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a892:	69fb      	ldr	r3, [r7, #28]
}
 800a894:	4618      	mov	r0, r3
 800a896:	3720      	adds	r7, #32
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	05f5e100 	.word	0x05f5e100

0800a8a0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b08a      	sub	sp, #40	; 0x28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a8b0:	2307      	movs	r3, #7
 800a8b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8b4:	2340      	movs	r3, #64	; 0x40
 800a8b6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8c0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8c2:	f107 0310 	add.w	r3, r7, #16
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f7ff fea7 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a8ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8d2:	2107      	movs	r1, #7
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f000 f94d 	bl	800ab74 <SDMMC_GetCmdResp1>
 800a8da:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3728      	adds	r7, #40	; 0x28
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b088      	sub	sp, #32
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a902:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a904:	f107 0308 	add.w	r3, r7, #8
 800a908:	4619      	mov	r1, r3
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff fe86 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fb67 	bl	800afe4 <SDMMC_GetCmdError>
 800a916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a918:	69fb      	ldr	r3, [r7, #28]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3720      	adds	r7, #32
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b088      	sub	sp, #32
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a92a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a92e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a930:	2308      	movs	r3, #8
 800a932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a934:	2340      	movs	r3, #64	; 0x40
 800a936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a938:	2300      	movs	r3, #0
 800a93a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a93c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a940:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a942:	f107 0308 	add.w	r3, r7, #8
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7ff fe67 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fafa 	bl	800af48 <SDMMC_GetCmdResp7>
 800a954:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a956:	69fb      	ldr	r3, [r7, #28]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3720      	adds	r7, #32
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b088      	sub	sp, #32
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a96e:	2337      	movs	r3, #55	; 0x37
 800a970:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a972:	2340      	movs	r3, #64	; 0x40
 800a974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a976:	2300      	movs	r3, #0
 800a978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a97a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a97e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a980:	f107 0308 	add.w	r3, r7, #8
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7ff fe48 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a990:	2137      	movs	r1, #55	; 0x37
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f8ee 	bl	800ab74 <SDMMC_GetCmdResp1>
 800a998:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a99a:	69fb      	ldr	r3, [r7, #28]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3720      	adds	r7, #32
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b088      	sub	sp, #32
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	4b0d      	ldr	r3, [pc, #52]	; (800a9e8 <SDMMC_CmdAppOperCommand+0x44>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a9b6:	2329      	movs	r3, #41	; 0x29
 800a9b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9ba:	2340      	movs	r3, #64	; 0x40
 800a9bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9c8:	f107 0308 	add.w	r3, r7, #8
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7ff fe24 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fa03 	bl	800ade0 <SDMMC_GetCmdResp3>
 800a9da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9dc:	69fb      	ldr	r3, [r7, #28]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3720      	adds	r7, #32
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	80100000 	.word	0x80100000

0800a9ec <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b088      	sub	sp, #32
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a9fa:	2306      	movs	r3, #6
 800a9fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9fe:	2340      	movs	r3, #64	; 0x40
 800aa00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa02:	2300      	movs	r3, #0
 800aa04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa0c:	f107 0308 	add.w	r3, r7, #8
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff fe02 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800aa18:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa1c:	2106      	movs	r1, #6
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f8a8 	bl	800ab74 <SDMMC_GetCmdResp1>
 800aa24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa26:	69fb      	ldr	r3, [r7, #28]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3720      	adds	r7, #32
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b088      	sub	sp, #32
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800aa3c:	2333      	movs	r3, #51	; 0x33
 800aa3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa40:	2340      	movs	r3, #64	; 0x40
 800aa42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa44:	2300      	movs	r3, #0
 800aa46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa4e:	f107 0308 	add.w	r3, r7, #8
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7ff fde1 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800aa5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa5e:	2133      	movs	r1, #51	; 0x33
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f887 	bl	800ab74 <SDMMC_GetCmdResp1>
 800aa66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa68:	69fb      	ldr	r3, [r7, #28]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3720      	adds	r7, #32
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b088      	sub	sp, #32
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aa7e:	2302      	movs	r3, #2
 800aa80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aa82:	23c0      	movs	r3, #192	; 0xc0
 800aa84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa86:	2300      	movs	r3, #0
 800aa88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa90:	f107 0308 	add.w	r3, r7, #8
 800aa94:	4619      	mov	r1, r3
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7ff fdc0 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f957 	bl	800ad50 <SDMMC_GetCmdResp2>
 800aaa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaa4:	69fb      	ldr	r3, [r7, #28]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3720      	adds	r7, #32
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b088      	sub	sp, #32
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aabc:	2309      	movs	r3, #9
 800aabe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aac0:	23c0      	movs	r3, #192	; 0xc0
 800aac2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aac4:	2300      	movs	r3, #0
 800aac6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aacc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aace:	f107 0308 	add.w	r3, r7, #8
 800aad2:	4619      	mov	r1, r3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f7ff fda1 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f938 	bl	800ad50 <SDMMC_GetCmdResp2>
 800aae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aae2:	69fb      	ldr	r3, [r7, #28]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3720      	adds	r7, #32
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b088      	sub	sp, #32
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aafa:	2303      	movs	r3, #3
 800aafc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aafe:	2340      	movs	r3, #64	; 0x40
 800ab00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab02:	2300      	movs	r3, #0
 800ab04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab0c:	f107 0308 	add.w	r3, r7, #8
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7ff fd82 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	2103      	movs	r1, #3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 f99d 	bl	800ae5c <SDMMC_GetCmdResp6>
 800ab22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab24:	69fb      	ldr	r3, [r7, #28]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3720      	adds	r7, #32
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b088      	sub	sp, #32
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ab3c:	230d      	movs	r3, #13
 800ab3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab40:	2340      	movs	r3, #64	; 0x40
 800ab42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab44:	2300      	movs	r3, #0
 800ab46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab4e:	f107 0308 	add.w	r3, r7, #8
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff fd61 	bl	800a61c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ab5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab5e:	210d      	movs	r1, #13
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f807 	bl	800ab74 <SDMMC_GetCmdResp1>
 800ab66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab68:	69fb      	ldr	r3, [r7, #28]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3720      	adds	r7, #32
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
	...

0800ab74 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b088      	sub	sp, #32
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	607a      	str	r2, [r7, #4]
 800ab80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ab82:	4b70      	ldr	r3, [pc, #448]	; (800ad44 <SDMMC_GetCmdResp1+0x1d0>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a70      	ldr	r2, [pc, #448]	; (800ad48 <SDMMC_GetCmdResp1+0x1d4>)
 800ab88:	fba2 2303 	umull	r2, r3, r2, r3
 800ab8c:	0a5a      	lsrs	r2, r3, #9
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	fb02 f303 	mul.w	r3, r2, r3
 800ab94:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	1e5a      	subs	r2, r3, #1
 800ab9a:	61fa      	str	r2, [r7, #28]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d102      	bne.n	800aba6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aba0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aba4:	e0c9      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abaa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d0ef      	beq.n	800ab96 <SDMMC_GetCmdResp1+0x22>
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1ea      	bne.n	800ab96 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc4:	f003 0304 	and.w	r3, r3, #4
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d004      	beq.n	800abd6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2204      	movs	r2, #4
 800abd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abd2:	2304      	movs	r3, #4
 800abd4:	e0b1      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d004      	beq.n	800abec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2201      	movs	r2, #1
 800abe6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abe8:	2301      	movs	r3, #1
 800abea:	e0a6      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	22c5      	movs	r2, #197	; 0xc5
 800abf0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f7ff fd3c 	bl	800a670 <SDMMC_GetCommandResponse>
 800abf8:	4603      	mov	r3, r0
 800abfa:	461a      	mov	r2, r3
 800abfc:	7afb      	ldrb	r3, [r7, #11]
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d001      	beq.n	800ac06 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e099      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ac06:	2100      	movs	r1, #0
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f7ff fd3e 	bl	800a68a <SDMMC_GetResponse>
 800ac0e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	4b4e      	ldr	r3, [pc, #312]	; (800ad4c <SDMMC_GetCmdResp1+0x1d8>)
 800ac14:	4013      	ands	r3, r2
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d101      	bne.n	800ac1e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	e08d      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	da02      	bge.n	800ac2a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ac24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac28:	e087      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ac34:	2340      	movs	r3, #64	; 0x40
 800ac36:	e080      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ac42:	2380      	movs	r3, #128	; 0x80
 800ac44:	e079      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ac50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac54:	e071      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d002      	beq.n	800ac66 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ac60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac64:	e069      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ac70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac74:	e061      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ac80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac84:	e059      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ac90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac94:	e051      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aca4:	e049      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800acb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800acb4:	e041      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800acc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acc4:	e039      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d002      	beq.n	800acd6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800acd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800acd4:	e031      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ace0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ace4:	e029      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800acf0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800acf4:	e021      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ad00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ad04:	e019      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ad10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ad14:	e011      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ad20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad24:	e009      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	f003 0308 	and.w	r3, r3, #8
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ad30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ad34:	e001      	b.n	800ad3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3720      	adds	r7, #32
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	200009cc 	.word	0x200009cc
 800ad48:	10624dd3 	.word	0x10624dd3
 800ad4c:	fdffe008 	.word	0xfdffe008

0800ad50 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad58:	4b1f      	ldr	r3, [pc, #124]	; (800add8 <SDMMC_GetCmdResp2+0x88>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a1f      	ldr	r2, [pc, #124]	; (800addc <SDMMC_GetCmdResp2+0x8c>)
 800ad5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad62:	0a5b      	lsrs	r3, r3, #9
 800ad64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad68:	fb02 f303 	mul.w	r3, r2, r3
 800ad6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	1e5a      	subs	r2, r3, #1
 800ad72:	60fa      	str	r2, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d102      	bne.n	800ad7e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad7c:	e026      	b.n	800adcc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0ef      	beq.n	800ad6e <SDMMC_GetCmdResp2+0x1e>
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1ea      	bne.n	800ad6e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad9c:	f003 0304 	and.w	r3, r3, #4
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d004      	beq.n	800adae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2204      	movs	r2, #4
 800ada8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800adaa:	2304      	movs	r3, #4
 800adac:	e00e      	b.n	800adcc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d004      	beq.n	800adc4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2201      	movs	r2, #1
 800adbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800adc0:	2301      	movs	r3, #1
 800adc2:	e003      	b.n	800adcc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	22c5      	movs	r2, #197	; 0xc5
 800adc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3714      	adds	r7, #20
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr
 800add8:	200009cc 	.word	0x200009cc
 800addc:	10624dd3 	.word	0x10624dd3

0800ade0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ade8:	4b1a      	ldr	r3, [pc, #104]	; (800ae54 <SDMMC_GetCmdResp3+0x74>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a1a      	ldr	r2, [pc, #104]	; (800ae58 <SDMMC_GetCmdResp3+0x78>)
 800adee:	fba2 2303 	umull	r2, r3, r2, r3
 800adf2:	0a5b      	lsrs	r3, r3, #9
 800adf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800adf8:	fb02 f303 	mul.w	r3, r2, r3
 800adfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	1e5a      	subs	r2, r3, #1
 800ae02:	60fa      	str	r2, [r7, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d102      	bne.n	800ae0e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae0c:	e01b      	b.n	800ae46 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0ef      	beq.n	800adfe <SDMMC_GetCmdResp3+0x1e>
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1ea      	bne.n	800adfe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae2c:	f003 0304 	and.w	r3, r3, #4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d004      	beq.n	800ae3e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2204      	movs	r2, #4
 800ae38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae3a:	2304      	movs	r3, #4
 800ae3c:	e003      	b.n	800ae46 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	22c5      	movs	r2, #197	; 0xc5
 800ae42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	200009cc 	.word	0x200009cc
 800ae58:	10624dd3 	.word	0x10624dd3

0800ae5c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	460b      	mov	r3, r1
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae6a:	4b35      	ldr	r3, [pc, #212]	; (800af40 <SDMMC_GetCmdResp6+0xe4>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a35      	ldr	r2, [pc, #212]	; (800af44 <SDMMC_GetCmdResp6+0xe8>)
 800ae70:	fba2 2303 	umull	r2, r3, r2, r3
 800ae74:	0a5b      	lsrs	r3, r3, #9
 800ae76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae7a:	fb02 f303 	mul.w	r3, r2, r3
 800ae7e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	1e5a      	subs	r2, r3, #1
 800ae84:	61fa      	str	r2, [r7, #28]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d102      	bne.n	800ae90 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae8e:	e052      	b.n	800af36 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae94:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d0ef      	beq.n	800ae80 <SDMMC_GetCmdResp6+0x24>
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1ea      	bne.n	800ae80 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeae:	f003 0304 	and.w	r3, r3, #4
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d004      	beq.n	800aec0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2204      	movs	r2, #4
 800aeba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aebc:	2304      	movs	r3, #4
 800aebe:	e03a      	b.n	800af36 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec4:	f003 0301 	and.w	r3, r3, #1
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d004      	beq.n	800aed6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2201      	movs	r2, #1
 800aed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e02f      	b.n	800af36 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f7ff fbca 	bl	800a670 <SDMMC_GetCommandResponse>
 800aedc:	4603      	mov	r3, r0
 800aede:	461a      	mov	r2, r3
 800aee0:	7afb      	ldrb	r3, [r7, #11]
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d001      	beq.n	800aeea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aee6:	2301      	movs	r3, #1
 800aee8:	e025      	b.n	800af36 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	22c5      	movs	r2, #197	; 0xc5
 800aeee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800aef0:	2100      	movs	r1, #0
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f7ff fbc9 	bl	800a68a <SDMMC_GetResponse>
 800aef8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800af00:	2b00      	cmp	r3, #0
 800af02:	d106      	bne.n	800af12 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	0c1b      	lsrs	r3, r3, #16
 800af08:	b29a      	uxth	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800af0e:	2300      	movs	r3, #0
 800af10:	e011      	b.n	800af36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d002      	beq.n	800af22 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800af1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af20:	e009      	b.n	800af36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d002      	beq.n	800af32 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800af2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af30:	e001      	b.n	800af36 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800af32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800af36:	4618      	mov	r0, r3
 800af38:	3720      	adds	r7, #32
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	200009cc 	.word	0x200009cc
 800af44:	10624dd3 	.word	0x10624dd3

0800af48 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af50:	4b22      	ldr	r3, [pc, #136]	; (800afdc <SDMMC_GetCmdResp7+0x94>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a22      	ldr	r2, [pc, #136]	; (800afe0 <SDMMC_GetCmdResp7+0x98>)
 800af56:	fba2 2303 	umull	r2, r3, r2, r3
 800af5a:	0a5b      	lsrs	r3, r3, #9
 800af5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af60:	fb02 f303 	mul.w	r3, r2, r3
 800af64:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	1e5a      	subs	r2, r3, #1
 800af6a:	60fa      	str	r2, [r7, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d102      	bne.n	800af76 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af74:	e02c      	b.n	800afd0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800af82:	2b00      	cmp	r3, #0
 800af84:	d0ef      	beq.n	800af66 <SDMMC_GetCmdResp7+0x1e>
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1ea      	bne.n	800af66 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af94:	f003 0304 	and.w	r3, r3, #4
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d004      	beq.n	800afa6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2204      	movs	r2, #4
 800afa0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afa2:	2304      	movs	r3, #4
 800afa4:	e014      	b.n	800afd0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d004      	beq.n	800afbc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afb8:	2301      	movs	r3, #1
 800afba:	e009      	b.n	800afd0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2240      	movs	r2, #64	; 0x40
 800afcc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800afce:	2300      	movs	r3, #0
  
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	200009cc 	.word	0x200009cc
 800afe0:	10624dd3 	.word	0x10624dd3

0800afe4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800afec:	4b11      	ldr	r3, [pc, #68]	; (800b034 <SDMMC_GetCmdError+0x50>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a11      	ldr	r2, [pc, #68]	; (800b038 <SDMMC_GetCmdError+0x54>)
 800aff2:	fba2 2303 	umull	r2, r3, r2, r3
 800aff6:	0a5b      	lsrs	r3, r3, #9
 800aff8:	f241 3288 	movw	r2, #5000	; 0x1388
 800affc:	fb02 f303 	mul.w	r3, r2, r3
 800b000:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	1e5a      	subs	r2, r3, #1
 800b006:	60fa      	str	r2, [r7, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d102      	bne.n	800b012 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b00c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b010:	e009      	b.n	800b026 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d0f1      	beq.n	800b002 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	22c5      	movs	r2, #197	; 0xc5
 800b022:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3714      	adds	r7, #20
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	200009cc 	.word	0x200009cc
 800b038:	10624dd3 	.word	0x10624dd3

0800b03c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b040:	4904      	ldr	r1, [pc, #16]	; (800b054 <MX_FATFS_Init+0x18>)
 800b042:	4805      	ldr	r0, [pc, #20]	; (800b058 <MX_FATFS_Init+0x1c>)
 800b044:	f002 fca2 	bl	800d98c <FATFS_LinkDriver>
 800b048:	4603      	mov	r3, r0
 800b04a:	461a      	mov	r2, r3
 800b04c:	4b03      	ldr	r3, [pc, #12]	; (800b05c <MX_FATFS_Init+0x20>)
 800b04e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b050:	bf00      	nop
 800b052:	bd80      	pop	{r7, pc}
 800b054:	200097b4 	.word	0x200097b4
 800b058:	08012da0 	.word	0x08012da0
 800b05c:	200097b0 	.word	0x200097b0

0800b060 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b060:	b480      	push	{r7}
 800b062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b064:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b066:	4618      	mov	r0, r3
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b07a:	f000 f896 	bl	800b1aa <BSP_SD_IsDetected>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b01      	cmp	r3, #1
 800b082:	d001      	beq.n	800b088 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b084:	2302      	movs	r3, #2
 800b086:	e012      	b.n	800b0ae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800b088:	480b      	ldr	r0, [pc, #44]	; (800b0b8 <BSP_SD_Init+0x48>)
 800b08a:	f7fc ff65 	bl	8007f58 <HAL_SD_Init>
 800b08e:	4603      	mov	r3, r0
 800b090:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b092:	79fb      	ldrb	r3, [r7, #7]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d109      	bne.n	800b0ac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b098:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b09c:	4806      	ldr	r0, [pc, #24]	; (800b0b8 <BSP_SD_Init+0x48>)
 800b09e:	f7fd fd2b 	bl	8008af8 <HAL_SD_ConfigWideBusOperation>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b0ac:	79fb      	ldrb	r3, [r7, #7]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	200095e8 	.word	0x200095e8

0800b0bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	68f9      	ldr	r1, [r7, #12]
 800b0d2:	4806      	ldr	r0, [pc, #24]	; (800b0ec <BSP_SD_ReadBlocks_DMA+0x30>)
 800b0d4:	f7fc fff8 	bl	80080c8 <HAL_SD_ReadBlocks_DMA>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	200095e8 	.word	0x200095e8

0800b0f0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	68f9      	ldr	r1, [r7, #12]
 800b106:	4806      	ldr	r0, [pc, #24]	; (800b120 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b108:	f7fd f8c0 	bl	800828c <HAL_SD_WriteBlocks_DMA>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b116:	7dfb      	ldrb	r3, [r7, #23]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	200095e8 	.word	0x200095e8

0800b124 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b128:	4805      	ldr	r0, [pc, #20]	; (800b140 <BSP_SD_GetCardState+0x1c>)
 800b12a:	f7fd fd7f 	bl	8008c2c <HAL_SD_GetCardState>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b04      	cmp	r3, #4
 800b132:	bf14      	ite	ne
 800b134:	2301      	movne	r3, #1
 800b136:	2300      	moveq	r3, #0
 800b138:	b2db      	uxtb	r3, r3
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	200095e8 	.word	0x200095e8

0800b144 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800b14c:	6879      	ldr	r1, [r7, #4]
 800b14e:	4803      	ldr	r0, [pc, #12]	; (800b15c <BSP_SD_GetCardInfo+0x18>)
 800b150:	f7fd fca6 	bl	8008aa0 <HAL_SD_GetCardInfo>
}
 800b154:	bf00      	nop
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	200095e8 	.word	0x200095e8

0800b160 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b168:	f000 f818 	bl	800b19c <BSP_SD_AbortCallback>
}
 800b16c:	bf00      	nop
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b17c:	f000 f9c4 	bl	800b508 <BSP_SD_WriteCpltCallback>
}
 800b180:	bf00      	nop
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b190:	f000 f9c8 	bl	800b524 <BSP_SD_ReadCpltCallback>
}
 800b194:	bf00      	nop
 800b196:	3708      	adds	r7, #8
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b19c:	b480      	push	{r7}
 800b19e:	af00      	add	r7, sp, #0

}
 800b1a0:	bf00      	nop
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b082      	sub	sp, #8
 800b1ae:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b1b4:	f000 f80c 	bl	800b1d0 <BSP_PlatformIsDetected>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b1c2:	79fb      	ldrb	r3, [r7, #7]
 800b1c4:	b2db      	uxtb	r3, r3
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
	...

0800b1d0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b1da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b1de:	4806      	ldr	r0, [pc, #24]	; (800b1f8 <BSP_PlatformIsDetected+0x28>)
 800b1e0:	f7fb fd60 	bl	8006ca4 <HAL_GPIO_ReadPin>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d001      	beq.n	800b1ee <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b1ee:	79fb      	ldrb	r3, [r7, #7]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	40022000 	.word	0x40022000

0800b1fc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b204:	f002 fc5a 	bl	800dabc <osKernelSysTick>
 800b208:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b20a:	e006      	b.n	800b21a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b20c:	f7ff ff8a 	bl	800b124 <BSP_SD_GetCardState>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d101      	bne.n	800b21a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b216:	2300      	movs	r3, #0
 800b218:	e009      	b.n	800b22e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b21a:	f002 fc4f 	bl	800dabc <osKernelSysTick>
 800b21e:	4602      	mov	r2, r0
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	429a      	cmp	r2, r3
 800b228:	d8f0      	bhi.n	800b20c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b22a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
	...

0800b238 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	4603      	mov	r3, r0
 800b240:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b242:	4b0b      	ldr	r3, [pc, #44]	; (800b270 <SD_CheckStatus+0x38>)
 800b244:	2201      	movs	r2, #1
 800b246:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b248:	f7ff ff6c 	bl	800b124 <BSP_SD_GetCardState>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d107      	bne.n	800b262 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b252:	4b07      	ldr	r3, [pc, #28]	; (800b270 <SD_CheckStatus+0x38>)
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	b2db      	uxtb	r3, r3
 800b258:	f023 0301 	bic.w	r3, r3, #1
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	4b04      	ldr	r3, [pc, #16]	; (800b270 <SD_CheckStatus+0x38>)
 800b260:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b262:	4b03      	ldr	r3, [pc, #12]	; (800b270 <SD_CheckStatus+0x38>)
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	b2db      	uxtb	r3, r3
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	200009d5 	.word	0x200009d5

0800b274 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b274:	b590      	push	{r4, r7, lr}
 800b276:	b087      	sub	sp, #28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	4603      	mov	r3, r0
 800b27c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b27e:	4b20      	ldr	r3, [pc, #128]	; (800b300 <SD_initialize+0x8c>)
 800b280:	2201      	movs	r2, #1
 800b282:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b284:	f002 fc0e 	bl	800daa4 <osKernelRunning>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d030      	beq.n	800b2f0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b28e:	f7ff feef 	bl	800b070 <BSP_SD_Init>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d107      	bne.n	800b2a8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b298:	79fb      	ldrb	r3, [r7, #7]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7ff ffcc 	bl	800b238 <SD_CheckStatus>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	4b16      	ldr	r3, [pc, #88]	; (800b300 <SD_initialize+0x8c>)
 800b2a6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b2a8:	4b15      	ldr	r3, [pc, #84]	; (800b300 <SD_initialize+0x8c>)
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d01e      	beq.n	800b2f0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b2b2:	4b14      	ldr	r3, [pc, #80]	; (800b304 <SD_initialize+0x90>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10e      	bne.n	800b2d8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b2ba:	4b13      	ldr	r3, [pc, #76]	; (800b308 <SD_initialize+0x94>)
 800b2bc:	f107 0408 	add.w	r4, r7, #8
 800b2c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b2c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b2c6:	f107 0308 	add.w	r3, r7, #8
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f002 fd2e 	bl	800dd2e <osMessageCreate>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	4a0b      	ldr	r2, [pc, #44]	; (800b304 <SD_initialize+0x90>)
 800b2d6:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b2d8:	4b0a      	ldr	r3, [pc, #40]	; (800b304 <SD_initialize+0x90>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d107      	bne.n	800b2f0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b2e0:	4b07      	ldr	r3, [pc, #28]	; (800b300 <SD_initialize+0x8c>)
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	f043 0301 	orr.w	r3, r3, #1
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	4b04      	ldr	r3, [pc, #16]	; (800b300 <SD_initialize+0x8c>)
 800b2ee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b2f0:	4b03      	ldr	r3, [pc, #12]	; (800b300 <SD_initialize+0x8c>)
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	b2db      	uxtb	r3, r3
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	371c      	adds	r7, #28
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd90      	pop	{r4, r7, pc}
 800b2fe:	bf00      	nop
 800b300:	200009d5 	.word	0x200009d5
 800b304:	200057cc 	.word	0x200057cc
 800b308:	08012d24 	.word	0x08012d24

0800b30c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b316:	79fb      	ldrb	r3, [r7, #7]
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff ff8d 	bl	800b238 <SD_CheckStatus>
 800b31e:	4603      	mov	r3, r0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b08a      	sub	sp, #40	; 0x28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60b9      	str	r1, [r7, #8]
 800b330:	607a      	str	r2, [r7, #4]
 800b332:	603b      	str	r3, [r7, #0]
 800b334:	4603      	mov	r3, r0
 800b336:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b33e:	f247 5030 	movw	r0, #30000	; 0x7530
 800b342:	f7ff ff5b 	bl	800b1fc <SD_CheckStatusWithTimeout>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	da02      	bge.n	800b352 <SD_read+0x2a>
  {
    return res;
 800b34c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b350:	e032      	b.n	800b3b8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	6879      	ldr	r1, [r7, #4]
 800b356:	68b8      	ldr	r0, [r7, #8]
 800b358:	f7ff feb0 	bl	800b0bc <BSP_SD_ReadBlocks_DMA>
 800b35c:	4603      	mov	r3, r0
 800b35e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800b362:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b366:	2b00      	cmp	r3, #0
 800b368:	d124      	bne.n	800b3b4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b36a:	4b15      	ldr	r3, [pc, #84]	; (800b3c0 <SD_read+0x98>)
 800b36c:	6819      	ldr	r1, [r3, #0]
 800b36e:	f107 0314 	add.w	r3, r7, #20
 800b372:	f247 5230 	movw	r2, #30000	; 0x7530
 800b376:	4618      	mov	r0, r3
 800b378:	f002 fd42 	bl	800de00 <osMessageGet>

    if (event.status == osEventMessage)
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	2b10      	cmp	r3, #16
 800b380:	d118      	bne.n	800b3b4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d115      	bne.n	800b3b4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b388:	f002 fb98 	bl	800dabc <osKernelSysTick>
 800b38c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b38e:	e008      	b.n	800b3a2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b390:	f7ff fec8 	bl	800b124 <BSP_SD_GetCardState>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d103      	bne.n	800b3a2 <SD_read+0x7a>
              {
                res = RES_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b3a0:	e008      	b.n	800b3b4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b3a2:	f002 fb8b 	bl	800dabc <osKernelSysTick>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	6a3b      	ldr	r3, [r7, #32]
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	f247 522f 	movw	r2, #29999	; 0x752f
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d9ed      	bls.n	800b390 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3728      	adds	r7, #40	; 0x28
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	200057cc 	.word	0x200057cc

0800b3c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b08a      	sub	sp, #40	; 0x28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60b9      	str	r1, [r7, #8]
 800b3cc:	607a      	str	r2, [r7, #4]
 800b3ce:	603b      	str	r3, [r7, #0]
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b3da:	f247 5030 	movw	r0, #30000	; 0x7530
 800b3de:	f7ff ff0d 	bl	800b1fc <SD_CheckStatusWithTimeout>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	da02      	bge.n	800b3ee <SD_write+0x2a>
  {
    return res;
 800b3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3ec:	e02e      	b.n	800b44c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	6879      	ldr	r1, [r7, #4]
 800b3f2:	68b8      	ldr	r0, [r7, #8]
 800b3f4:	f7ff fe7c 	bl	800b0f0 <BSP_SD_WriteBlocks_DMA>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d124      	bne.n	800b448 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b3fe:	4b15      	ldr	r3, [pc, #84]	; (800b454 <SD_write+0x90>)
 800b400:	6819      	ldr	r1, [r3, #0]
 800b402:	f107 0314 	add.w	r3, r7, #20
 800b406:	f247 5230 	movw	r2, #30000	; 0x7530
 800b40a:	4618      	mov	r0, r3
 800b40c:	f002 fcf8 	bl	800de00 <osMessageGet>

    if (event.status == osEventMessage)
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	2b10      	cmp	r3, #16
 800b414:	d118      	bne.n	800b448 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d115      	bne.n	800b448 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b41c:	f002 fb4e 	bl	800dabc <osKernelSysTick>
 800b420:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b422:	e008      	b.n	800b436 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b424:	f7ff fe7e 	bl	800b124 <BSP_SD_GetCardState>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d103      	bne.n	800b436 <SD_write+0x72>
          {
            res = RES_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b434:	e008      	b.n	800b448 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b436:	f002 fb41 	bl	800dabc <osKernelSysTick>
 800b43a:	4602      	mov	r2, r0
 800b43c:	6a3b      	ldr	r3, [r7, #32]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	f247 522f 	movw	r2, #29999	; 0x752f
 800b444:	4293      	cmp	r3, r2
 800b446:	d9ed      	bls.n	800b424 <SD_write+0x60>
    }

  }
#endif

  return res;
 800b448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3728      	adds	r7, #40	; 0x28
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	200057cc 	.word	0x200057cc

0800b458 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08c      	sub	sp, #48	; 0x30
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	4603      	mov	r3, r0
 800b460:	603a      	str	r2, [r7, #0]
 800b462:	71fb      	strb	r3, [r7, #7]
 800b464:	460b      	mov	r3, r1
 800b466:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b46e:	4b25      	ldr	r3, [pc, #148]	; (800b504 <SD_ioctl+0xac>)
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	b2db      	uxtb	r3, r3
 800b474:	f003 0301 	and.w	r3, r3, #1
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d001      	beq.n	800b480 <SD_ioctl+0x28>
 800b47c:	2303      	movs	r3, #3
 800b47e:	e03c      	b.n	800b4fa <SD_ioctl+0xa2>

  switch (cmd)
 800b480:	79bb      	ldrb	r3, [r7, #6]
 800b482:	2b03      	cmp	r3, #3
 800b484:	d834      	bhi.n	800b4f0 <SD_ioctl+0x98>
 800b486:	a201      	add	r2, pc, #4	; (adr r2, 800b48c <SD_ioctl+0x34>)
 800b488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48c:	0800b49d 	.word	0x0800b49d
 800b490:	0800b4a5 	.word	0x0800b4a5
 800b494:	0800b4bd 	.word	0x0800b4bd
 800b498:	0800b4d7 	.word	0x0800b4d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4a2:	e028      	b.n	800b4f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4a4:	f107 030c 	add.w	r3, r7, #12
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7ff fe4b 	bl	800b144 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b4ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4ba:	e01c      	b.n	800b4f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4bc:	f107 030c 	add.w	r3, r7, #12
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7ff fe3f 	bl	800b144 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4d4:	e00f      	b.n	800b4f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4d6:	f107 030c 	add.w	r3, r7, #12
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7ff fe32 	bl	800b144 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e2:	0a5a      	lsrs	r2, r3, #9
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4ee:	e002      	b.n	800b4f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b4f0:	2304      	movs	r3, #4
 800b4f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b4f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3730      	adds	r7, #48	; 0x30
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	200009d5 	.word	0x200009d5

0800b508 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800b50c:	4b04      	ldr	r3, [pc, #16]	; (800b520 <BSP_SD_WriteCpltCallback+0x18>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2200      	movs	r2, #0
 800b512:	2102      	movs	r1, #2
 800b514:	4618      	mov	r0, r3
 800b516:	f002 fc33 	bl	800dd80 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b51a:	bf00      	nop
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	200057cc 	.word	0x200057cc

0800b524 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b528:	4b04      	ldr	r3, [pc, #16]	; (800b53c <BSP_SD_ReadCpltCallback+0x18>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2200      	movs	r2, #0
 800b52e:	2101      	movs	r1, #1
 800b530:	4618      	mov	r0, r3
 800b532:	f002 fc25 	bl	800dd80 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b536:	bf00      	nop
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	200057cc 	.word	0x200057cc

0800b540 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	4603      	mov	r3, r0
 800b548:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b54a:	79fb      	ldrb	r3, [r7, #7]
 800b54c:	4a08      	ldr	r2, [pc, #32]	; (800b570 <disk_status+0x30>)
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	4413      	add	r3, r2
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	79fa      	ldrb	r2, [r7, #7]
 800b558:	4905      	ldr	r1, [pc, #20]	; (800b570 <disk_status+0x30>)
 800b55a:	440a      	add	r2, r1
 800b55c:	7a12      	ldrb	r2, [r2, #8]
 800b55e:	4610      	mov	r0, r2
 800b560:	4798      	blx	r3
 800b562:	4603      	mov	r3, r0
 800b564:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b566:	7bfb      	ldrb	r3, [r7, #15]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	200057f8 	.word	0x200057f8

0800b574 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b582:	79fb      	ldrb	r3, [r7, #7]
 800b584:	4a0d      	ldr	r2, [pc, #52]	; (800b5bc <disk_initialize+0x48>)
 800b586:	5cd3      	ldrb	r3, [r2, r3]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d111      	bne.n	800b5b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b58c:	79fb      	ldrb	r3, [r7, #7]
 800b58e:	4a0b      	ldr	r2, [pc, #44]	; (800b5bc <disk_initialize+0x48>)
 800b590:	2101      	movs	r1, #1
 800b592:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b594:	79fb      	ldrb	r3, [r7, #7]
 800b596:	4a09      	ldr	r2, [pc, #36]	; (800b5bc <disk_initialize+0x48>)
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4413      	add	r3, r2
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	79fa      	ldrb	r2, [r7, #7]
 800b5a2:	4906      	ldr	r1, [pc, #24]	; (800b5bc <disk_initialize+0x48>)
 800b5a4:	440a      	add	r2, r1
 800b5a6:	7a12      	ldrb	r2, [r2, #8]
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	4798      	blx	r3
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	200057f8 	.word	0x200057f8

0800b5c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b5c0:	b590      	push	{r4, r7, lr}
 800b5c2:	b087      	sub	sp, #28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60b9      	str	r1, [r7, #8]
 800b5c8:	607a      	str	r2, [r7, #4]
 800b5ca:	603b      	str	r3, [r7, #0]
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
 800b5d2:	4a0a      	ldr	r2, [pc, #40]	; (800b5fc <disk_read+0x3c>)
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	4413      	add	r3, r2
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	689c      	ldr	r4, [r3, #8]
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	4a07      	ldr	r2, [pc, #28]	; (800b5fc <disk_read+0x3c>)
 800b5e0:	4413      	add	r3, r2
 800b5e2:	7a18      	ldrb	r0, [r3, #8]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	68b9      	ldr	r1, [r7, #8]
 800b5ea:	47a0      	blx	r4
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800b5f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	371c      	adds	r7, #28
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd90      	pop	{r4, r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	200057f8 	.word	0x200057f8

0800b600 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b600:	b590      	push	{r4, r7, lr}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	60b9      	str	r1, [r7, #8]
 800b608:	607a      	str	r2, [r7, #4]
 800b60a:	603b      	str	r3, [r7, #0]
 800b60c:	4603      	mov	r3, r0
 800b60e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b610:	7bfb      	ldrb	r3, [r7, #15]
 800b612:	4a0a      	ldr	r2, [pc, #40]	; (800b63c <disk_write+0x3c>)
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4413      	add	r3, r2
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	68dc      	ldr	r4, [r3, #12]
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	4a07      	ldr	r2, [pc, #28]	; (800b63c <disk_write+0x3c>)
 800b620:	4413      	add	r3, r2
 800b622:	7a18      	ldrb	r0, [r3, #8]
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	68b9      	ldr	r1, [r7, #8]
 800b62a:	47a0      	blx	r4
 800b62c:	4603      	mov	r3, r0
 800b62e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b630:	7dfb      	ldrb	r3, [r7, #23]
}
 800b632:	4618      	mov	r0, r3
 800b634:	371c      	adds	r7, #28
 800b636:	46bd      	mov	sp, r7
 800b638:	bd90      	pop	{r4, r7, pc}
 800b63a:	bf00      	nop
 800b63c:	200057f8 	.word	0x200057f8

0800b640 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	4603      	mov	r3, r0
 800b648:	603a      	str	r2, [r7, #0]
 800b64a:	71fb      	strb	r3, [r7, #7]
 800b64c:	460b      	mov	r3, r1
 800b64e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b650:	79fb      	ldrb	r3, [r7, #7]
 800b652:	4a09      	ldr	r2, [pc, #36]	; (800b678 <disk_ioctl+0x38>)
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	4413      	add	r3, r2
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	79fa      	ldrb	r2, [r7, #7]
 800b65e:	4906      	ldr	r1, [pc, #24]	; (800b678 <disk_ioctl+0x38>)
 800b660:	440a      	add	r2, r1
 800b662:	7a10      	ldrb	r0, [r2, #8]
 800b664:	79b9      	ldrb	r1, [r7, #6]
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	4798      	blx	r3
 800b66a:	4603      	mov	r3, r0
 800b66c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b670:	4618      	mov	r0, r3
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	200057f8 	.word	0x200057f8

0800b67c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	3301      	adds	r3, #1
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b68c:	89fb      	ldrh	r3, [r7, #14]
 800b68e:	021b      	lsls	r3, r3, #8
 800b690:	b21a      	sxth	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	b21b      	sxth	r3, r3
 800b698:	4313      	orrs	r3, r2
 800b69a:	b21b      	sxth	r3, r3
 800b69c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b69e:	89fb      	ldrh	r3, [r7, #14]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3714      	adds	r7, #20
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	3303      	adds	r3, #3
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	021b      	lsls	r3, r3, #8
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	3202      	adds	r2, #2
 800b6c4:	7812      	ldrb	r2, [r2, #0]
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	021b      	lsls	r3, r3, #8
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	3201      	adds	r2, #1
 800b6d2:	7812      	ldrb	r2, [r2, #0]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	021b      	lsls	r3, r3, #8
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	7812      	ldrb	r2, [r2, #0]
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	60fb      	str	r3, [r7, #12]
	return rv;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3714      	adds	r7, #20
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b6f2:	b480      	push	{r7}
 800b6f4:	b083      	sub	sp, #12
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	1c5a      	adds	r2, r3, #1
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	887a      	ldrh	r2, [r7, #2]
 800b706:	b2d2      	uxtb	r2, r2
 800b708:	701a      	strb	r2, [r3, #0]
 800b70a:	887b      	ldrh	r3, [r7, #2]
 800b70c:	0a1b      	lsrs	r3, r3, #8
 800b70e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	1c5a      	adds	r2, r3, #1
 800b714:	607a      	str	r2, [r7, #4]
 800b716:	887a      	ldrh	r2, [r7, #2]
 800b718:	b2d2      	uxtb	r2, r2
 800b71a:	701a      	strb	r2, [r3, #0]
}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	1c5a      	adds	r2, r3, #1
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	b2d2      	uxtb	r2, r2
 800b73c:	701a      	strb	r2, [r3, #0]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	0a1b      	lsrs	r3, r3, #8
 800b742:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	1c5a      	adds	r2, r3, #1
 800b748:	607a      	str	r2, [r7, #4]
 800b74a:	683a      	ldr	r2, [r7, #0]
 800b74c:	b2d2      	uxtb	r2, r2
 800b74e:	701a      	strb	r2, [r3, #0]
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	0a1b      	lsrs	r3, r3, #8
 800b754:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	1c5a      	adds	r2, r3, #1
 800b75a:	607a      	str	r2, [r7, #4]
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	b2d2      	uxtb	r2, r2
 800b760:	701a      	strb	r2, [r3, #0]
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	0a1b      	lsrs	r3, r3, #8
 800b766:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	1c5a      	adds	r2, r3, #1
 800b76c:	607a      	str	r2, [r7, #4]
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	b2d2      	uxtb	r2, r2
 800b772:	701a      	strb	r2, [r3, #0]
}
 800b774:	bf00      	nop
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b780:	b480      	push	{r7}
 800b782:	b087      	sub	sp, #28
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00d      	beq.n	800b7b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b79a:	693a      	ldr	r2, [r7, #16]
 800b79c:	1c53      	adds	r3, r2, #1
 800b79e:	613b      	str	r3, [r7, #16]
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	1c59      	adds	r1, r3, #1
 800b7a4:	6179      	str	r1, [r7, #20]
 800b7a6:	7812      	ldrb	r2, [r2, #0]
 800b7a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	607b      	str	r3, [r7, #4]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1f1      	bne.n	800b79a <mem_cpy+0x1a>
	}
}
 800b7b6:	bf00      	nop
 800b7b8:	371c      	adds	r7, #28
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b7c2:	b480      	push	{r7}
 800b7c4:	b087      	sub	sp, #28
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	60f8      	str	r0, [r7, #12]
 800b7ca:	60b9      	str	r1, [r7, #8]
 800b7cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	1c5a      	adds	r2, r3, #1
 800b7d6:	617a      	str	r2, [r7, #20]
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	b2d2      	uxtb	r2, r2
 800b7dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	607b      	str	r3, [r7, #4]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1f3      	bne.n	800b7d2 <mem_set+0x10>
}
 800b7ea:	bf00      	nop
 800b7ec:	bf00      	nop
 800b7ee:	371c      	adds	r7, #28
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b7f8:	b480      	push	{r7}
 800b7fa:	b089      	sub	sp, #36	; 0x24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	61fb      	str	r3, [r7, #28]
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b80c:	2300      	movs	r3, #0
 800b80e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	1c5a      	adds	r2, r3, #1
 800b814:	61fa      	str	r2, [r7, #28]
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	4619      	mov	r1, r3
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	1c5a      	adds	r2, r3, #1
 800b81e:	61ba      	str	r2, [r7, #24]
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	1acb      	subs	r3, r1, r3
 800b824:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	3b01      	subs	r3, #1
 800b82a:	607b      	str	r3, [r7, #4]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d002      	beq.n	800b838 <mem_cmp+0x40>
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d0eb      	beq.n	800b810 <mem_cmp+0x18>

	return r;
 800b838:	697b      	ldr	r3, [r7, #20]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3724      	adds	r7, #36	; 0x24
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b846:	b480      	push	{r7}
 800b848:	b083      	sub	sp, #12
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b850:	e002      	b.n	800b858 <chk_chr+0x12>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	3301      	adds	r3, #1
 800b856:	607b      	str	r3, [r7, #4]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d005      	beq.n	800b86c <chk_chr+0x26>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	461a      	mov	r2, r3
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	4293      	cmp	r3, r2
 800b86a:	d1f2      	bne.n	800b852 <chk_chr+0xc>
	return *str;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	781b      	ldrb	r3, [r3, #0]
}
 800b870:	4618      	mov	r0, r3
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d009      	beq.n	800b89e <lock_fs+0x22>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	4618      	mov	r0, r3
 800b890:	f002 f8b7 	bl	800da02 <ff_req_grant>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d001      	beq.n	800b89e <lock_fs+0x22>
 800b89a:	2301      	movs	r3, #1
 800b89c:	e000      	b.n	800b8a0 <lock_fs+0x24>
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00d      	beq.n	800b8d6 <unlock_fs+0x2e>
 800b8ba:	78fb      	ldrb	r3, [r7, #3]
 800b8bc:	2b0c      	cmp	r3, #12
 800b8be:	d00a      	beq.n	800b8d6 <unlock_fs+0x2e>
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	2b0b      	cmp	r3, #11
 800b8c4:	d007      	beq.n	800b8d6 <unlock_fs+0x2e>
 800b8c6:	78fb      	ldrb	r3, [r7, #3]
 800b8c8:	2b0f      	cmp	r3, #15
 800b8ca:	d004      	beq.n	800b8d6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f002 f8ab 	bl	800da2c <ff_rel_grant>
	}
}
 800b8d6:	bf00      	nop
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
	...

0800b8e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	60bb      	str	r3, [r7, #8]
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	60fb      	str	r3, [r7, #12]
 800b8f2:	e029      	b.n	800b948 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b8f4:	4a27      	ldr	r2, [pc, #156]	; (800b994 <chk_lock+0xb4>)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	011b      	lsls	r3, r3, #4
 800b8fa:	4413      	add	r3, r2
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d01d      	beq.n	800b93e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b902:	4a24      	ldr	r2, [pc, #144]	; (800b994 <chk_lock+0xb4>)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	011b      	lsls	r3, r3, #4
 800b908:	4413      	add	r3, r2
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	429a      	cmp	r2, r3
 800b912:	d116      	bne.n	800b942 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b914:	4a1f      	ldr	r2, [pc, #124]	; (800b994 <chk_lock+0xb4>)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	011b      	lsls	r3, r3, #4
 800b91a:	4413      	add	r3, r2
 800b91c:	3304      	adds	r3, #4
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b924:	429a      	cmp	r2, r3
 800b926:	d10c      	bne.n	800b942 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b928:	4a1a      	ldr	r2, [pc, #104]	; (800b994 <chk_lock+0xb4>)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	011b      	lsls	r3, r3, #4
 800b92e:	4413      	add	r3, r2
 800b930:	3308      	adds	r3, #8
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b938:	429a      	cmp	r2, r3
 800b93a:	d102      	bne.n	800b942 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b93c:	e007      	b.n	800b94e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b93e:	2301      	movs	r3, #1
 800b940:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	3301      	adds	r3, #1
 800b946:	60fb      	str	r3, [r7, #12]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d9d2      	bls.n	800b8f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2b02      	cmp	r3, #2
 800b952:	d109      	bne.n	800b968 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d102      	bne.n	800b960 <chk_lock+0x80>
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d101      	bne.n	800b964 <chk_lock+0x84>
 800b960:	2300      	movs	r3, #0
 800b962:	e010      	b.n	800b986 <chk_lock+0xa6>
 800b964:	2312      	movs	r3, #18
 800b966:	e00e      	b.n	800b986 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d108      	bne.n	800b980 <chk_lock+0xa0>
 800b96e:	4a09      	ldr	r2, [pc, #36]	; (800b994 <chk_lock+0xb4>)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	011b      	lsls	r3, r3, #4
 800b974:	4413      	add	r3, r2
 800b976:	330c      	adds	r3, #12
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b97e:	d101      	bne.n	800b984 <chk_lock+0xa4>
 800b980:	2310      	movs	r3, #16
 800b982:	e000      	b.n	800b986 <chk_lock+0xa6>
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	200057d8 	.word	0x200057d8

0800b998 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	607b      	str	r3, [r7, #4]
 800b9a2:	e002      	b.n	800b9aa <enq_lock+0x12>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	607b      	str	r3, [r7, #4]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d806      	bhi.n	800b9be <enq_lock+0x26>
 800b9b0:	4a09      	ldr	r2, [pc, #36]	; (800b9d8 <enq_lock+0x40>)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	011b      	lsls	r3, r3, #4
 800b9b6:	4413      	add	r3, r2
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1f2      	bne.n	800b9a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b02      	cmp	r3, #2
 800b9c2:	bf14      	ite	ne
 800b9c4:	2301      	movne	r3, #1
 800b9c6:	2300      	moveq	r3, #0
 800b9c8:	b2db      	uxtb	r3, r3
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	200057d8 	.word	0x200057d8

0800b9dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60fb      	str	r3, [r7, #12]
 800b9ea:	e01f      	b.n	800ba2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b9ec:	4a41      	ldr	r2, [pc, #260]	; (800baf4 <inc_lock+0x118>)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	011b      	lsls	r3, r3, #4
 800b9f2:	4413      	add	r3, r2
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d113      	bne.n	800ba26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b9fe:	4a3d      	ldr	r2, [pc, #244]	; (800baf4 <inc_lock+0x118>)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	011b      	lsls	r3, r3, #4
 800ba04:	4413      	add	r3, r2
 800ba06:	3304      	adds	r3, #4
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d109      	bne.n	800ba26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ba12:	4a38      	ldr	r2, [pc, #224]	; (800baf4 <inc_lock+0x118>)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	011b      	lsls	r3, r3, #4
 800ba18:	4413      	add	r3, r2
 800ba1a:	3308      	adds	r3, #8
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d006      	beq.n	800ba34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	60fb      	str	r3, [r7, #12]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d9dc      	bls.n	800b9ec <inc_lock+0x10>
 800ba32:	e000      	b.n	800ba36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ba34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2b02      	cmp	r3, #2
 800ba3a:	d132      	bne.n	800baa2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	60fb      	str	r3, [r7, #12]
 800ba40:	e002      	b.n	800ba48 <inc_lock+0x6c>
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	3301      	adds	r3, #1
 800ba46:	60fb      	str	r3, [r7, #12]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d806      	bhi.n	800ba5c <inc_lock+0x80>
 800ba4e:	4a29      	ldr	r2, [pc, #164]	; (800baf4 <inc_lock+0x118>)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	011b      	lsls	r3, r3, #4
 800ba54:	4413      	add	r3, r2
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1f2      	bne.n	800ba42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	d101      	bne.n	800ba66 <inc_lock+0x8a>
 800ba62:	2300      	movs	r3, #0
 800ba64:	e040      	b.n	800bae8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	4922      	ldr	r1, [pc, #136]	; (800baf4 <inc_lock+0x118>)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	011b      	lsls	r3, r3, #4
 800ba70:	440b      	add	r3, r1
 800ba72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	689a      	ldr	r2, [r3, #8]
 800ba78:	491e      	ldr	r1, [pc, #120]	; (800baf4 <inc_lock+0x118>)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	011b      	lsls	r3, r3, #4
 800ba7e:	440b      	add	r3, r1
 800ba80:	3304      	adds	r3, #4
 800ba82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	695a      	ldr	r2, [r3, #20]
 800ba88:	491a      	ldr	r1, [pc, #104]	; (800baf4 <inc_lock+0x118>)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	011b      	lsls	r3, r3, #4
 800ba8e:	440b      	add	r3, r1
 800ba90:	3308      	adds	r3, #8
 800ba92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ba94:	4a17      	ldr	r2, [pc, #92]	; (800baf4 <inc_lock+0x118>)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	011b      	lsls	r3, r3, #4
 800ba9a:	4413      	add	r3, r2
 800ba9c:	330c      	adds	r3, #12
 800ba9e:	2200      	movs	r2, #0
 800baa0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d009      	beq.n	800babc <inc_lock+0xe0>
 800baa8:	4a12      	ldr	r2, [pc, #72]	; (800baf4 <inc_lock+0x118>)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	011b      	lsls	r3, r3, #4
 800baae:	4413      	add	r3, r2
 800bab0:	330c      	adds	r3, #12
 800bab2:	881b      	ldrh	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <inc_lock+0xe0>
 800bab8:	2300      	movs	r3, #0
 800baba:	e015      	b.n	800bae8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d108      	bne.n	800bad4 <inc_lock+0xf8>
 800bac2:	4a0c      	ldr	r2, [pc, #48]	; (800baf4 <inc_lock+0x118>)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	011b      	lsls	r3, r3, #4
 800bac8:	4413      	add	r3, r2
 800baca:	330c      	adds	r3, #12
 800bacc:	881b      	ldrh	r3, [r3, #0]
 800bace:	3301      	adds	r3, #1
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	e001      	b.n	800bad8 <inc_lock+0xfc>
 800bad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bad8:	4906      	ldr	r1, [pc, #24]	; (800baf4 <inc_lock+0x118>)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	011b      	lsls	r3, r3, #4
 800bade:	440b      	add	r3, r1
 800bae0:	330c      	adds	r3, #12
 800bae2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	3301      	adds	r3, #1
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr
 800baf4:	200057d8 	.word	0x200057d8

0800baf8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	3b01      	subs	r3, #1
 800bb04:	607b      	str	r3, [r7, #4]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d825      	bhi.n	800bb58 <dec_lock+0x60>
		n = Files[i].ctr;
 800bb0c:	4a17      	ldr	r2, [pc, #92]	; (800bb6c <dec_lock+0x74>)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	011b      	lsls	r3, r3, #4
 800bb12:	4413      	add	r3, r2
 800bb14:	330c      	adds	r3, #12
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bb1a:	89fb      	ldrh	r3, [r7, #14]
 800bb1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb20:	d101      	bne.n	800bb26 <dec_lock+0x2e>
 800bb22:	2300      	movs	r3, #0
 800bb24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bb26:	89fb      	ldrh	r3, [r7, #14]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <dec_lock+0x3a>
 800bb2c:	89fb      	ldrh	r3, [r7, #14]
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bb32:	4a0e      	ldr	r2, [pc, #56]	; (800bb6c <dec_lock+0x74>)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	011b      	lsls	r3, r3, #4
 800bb38:	4413      	add	r3, r2
 800bb3a:	330c      	adds	r3, #12
 800bb3c:	89fa      	ldrh	r2, [r7, #14]
 800bb3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bb40:	89fb      	ldrh	r3, [r7, #14]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d105      	bne.n	800bb52 <dec_lock+0x5a>
 800bb46:	4a09      	ldr	r2, [pc, #36]	; (800bb6c <dec_lock+0x74>)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	011b      	lsls	r3, r3, #4
 800bb4c:	4413      	add	r3, r2
 800bb4e:	2200      	movs	r2, #0
 800bb50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	737b      	strb	r3, [r7, #13]
 800bb56:	e001      	b.n	800bb5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bb58:	2302      	movs	r3, #2
 800bb5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bb5c:	7b7b      	ldrb	r3, [r7, #13]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3714      	adds	r7, #20
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	200057d8 	.word	0x200057d8

0800bb70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bb78:	2300      	movs	r3, #0
 800bb7a:	60fb      	str	r3, [r7, #12]
 800bb7c:	e010      	b.n	800bba0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bb7e:	4a0d      	ldr	r2, [pc, #52]	; (800bbb4 <clear_lock+0x44>)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	011b      	lsls	r3, r3, #4
 800bb84:	4413      	add	r3, r2
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d105      	bne.n	800bb9a <clear_lock+0x2a>
 800bb8e:	4a09      	ldr	r2, [pc, #36]	; (800bbb4 <clear_lock+0x44>)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	011b      	lsls	r3, r3, #4
 800bb94:	4413      	add	r3, r2
 800bb96:	2200      	movs	r2, #0
 800bb98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	60fb      	str	r3, [r7, #12]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d9eb      	bls.n	800bb7e <clear_lock+0xe>
	}
}
 800bba6:	bf00      	nop
 800bba8:	bf00      	nop
 800bbaa:	3714      	adds	r7, #20
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr
 800bbb4:	200057d8 	.word	0x200057d8

0800bbb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	78db      	ldrb	r3, [r3, #3]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d034      	beq.n	800bc36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	7858      	ldrb	r0, [r3, #1]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bbdc:	2301      	movs	r3, #1
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	f7ff fd0e 	bl	800b600 <disk_write>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d002      	beq.n	800bbf0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	73fb      	strb	r3, [r7, #15]
 800bbee:	e022      	b.n	800bc36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfa:	697a      	ldr	r2, [r7, #20]
 800bbfc:	1ad2      	subs	r2, r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	69db      	ldr	r3, [r3, #28]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d217      	bcs.n	800bc36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	789b      	ldrb	r3, [r3, #2]
 800bc0a:	613b      	str	r3, [r7, #16]
 800bc0c:	e010      	b.n	800bc30 <sync_window+0x78>
					wsect += fs->fsize;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	69db      	ldr	r3, [r3, #28]
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	4413      	add	r3, r2
 800bc16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	7858      	ldrb	r0, [r3, #1]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bc22:	2301      	movs	r3, #1
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	f7ff fceb 	bl	800b600 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	613b      	str	r3, [r7, #16]
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d8eb      	bhi.n	800bc0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3718      	adds	r7, #24
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc52:	683a      	ldr	r2, [r7, #0]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d01b      	beq.n	800bc90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7ff ffad 	bl	800bbb8 <sync_window>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bc62:	7bfb      	ldrb	r3, [r7, #15]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d113      	bne.n	800bc90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	7858      	ldrb	r0, [r3, #1]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bc72:	2301      	movs	r3, #1
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	f7ff fca3 	bl	800b5c0 <disk_read>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d004      	beq.n	800bc8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bc80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	683a      	ldr	r2, [r7, #0]
 800bc8e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
	...

0800bc9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7ff ff87 	bl	800bbb8 <sync_window>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d158      	bne.n	800bd66 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	2b03      	cmp	r3, #3
 800bcba:	d148      	bne.n	800bd4e <sync_fs+0xb2>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	791b      	ldrb	r3, [r3, #4]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d144      	bne.n	800bd4e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	3334      	adds	r3, #52	; 0x34
 800bcc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bccc:	2100      	movs	r1, #0
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7ff fd77 	bl	800b7c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	3334      	adds	r3, #52	; 0x34
 800bcd8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcdc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7ff fd06 	bl	800b6f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	3334      	adds	r3, #52	; 0x34
 800bcea:	4921      	ldr	r1, [pc, #132]	; (800bd70 <sync_fs+0xd4>)
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7ff fd1b 	bl	800b728 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	3334      	adds	r3, #52	; 0x34
 800bcf6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bcfa:	491e      	ldr	r1, [pc, #120]	; (800bd74 <sync_fs+0xd8>)
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7ff fd13 	bl	800b728 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	3334      	adds	r3, #52	; 0x34
 800bd06:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	4619      	mov	r1, r3
 800bd10:	4610      	mov	r0, r2
 800bd12:	f7ff fd09 	bl	800b728 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	3334      	adds	r3, #52	; 0x34
 800bd1a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	4619      	mov	r1, r3
 800bd24:	4610      	mov	r0, r2
 800bd26:	f7ff fcff 	bl	800b728 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	1c5a      	adds	r2, r3, #1
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	7858      	ldrb	r0, [r3, #1]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd42:	2301      	movs	r3, #1
 800bd44:	f7ff fc5c 	bl	800b600 <disk_write>
			fs->fsi_flag = 0;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	785b      	ldrb	r3, [r3, #1]
 800bd52:	2200      	movs	r2, #0
 800bd54:	2100      	movs	r1, #0
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7ff fc72 	bl	800b640 <disk_ioctl>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d001      	beq.n	800bd66 <sync_fs+0xca>
 800bd62:	2301      	movs	r3, #1
 800bd64:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	41615252 	.word	0x41615252
 800bd74:	61417272 	.word	0x61417272

0800bd78 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	3b02      	subs	r3, #2
 800bd86:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	3b02      	subs	r3, #2
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d301      	bcc.n	800bd98 <clust2sect+0x20>
 800bd94:	2300      	movs	r3, #0
 800bd96:	e008      	b.n	800bdaa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	895b      	ldrh	r3, [r3, #10]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	fb03 f202 	mul.w	r2, r3, r2
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda8:	4413      	add	r3, r2
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b086      	sub	sp, #24
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d904      	bls.n	800bdd6 <get_fat+0x20>
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	699b      	ldr	r3, [r3, #24]
 800bdd0:	683a      	ldr	r2, [r7, #0]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d302      	bcc.n	800bddc <get_fat+0x26>
		val = 1;	/* Internal error */
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	617b      	str	r3, [r7, #20]
 800bdda:	e08f      	b.n	800befc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bde0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	d062      	beq.n	800beb0 <get_fat+0xfa>
 800bdea:	2b03      	cmp	r3, #3
 800bdec:	dc7c      	bgt.n	800bee8 <get_fat+0x132>
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d002      	beq.n	800bdf8 <get_fat+0x42>
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d042      	beq.n	800be7c <get_fat+0xc6>
 800bdf6:	e077      	b.n	800bee8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	60fb      	str	r3, [r7, #12]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	085b      	lsrs	r3, r3, #1
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	4413      	add	r3, r2
 800be04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	0a5b      	lsrs	r3, r3, #9
 800be0e:	4413      	add	r3, r2
 800be10:	4619      	mov	r1, r3
 800be12:	6938      	ldr	r0, [r7, #16]
 800be14:	f7ff ff14 	bl	800bc40 <move_window>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d167      	bne.n	800beee <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	1c5a      	adds	r2, r3, #1
 800be22:	60fa      	str	r2, [r7, #12]
 800be24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	4413      	add	r3, r2
 800be2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	0a5b      	lsrs	r3, r3, #9
 800be3a:	4413      	add	r3, r2
 800be3c:	4619      	mov	r1, r3
 800be3e:	6938      	ldr	r0, [r7, #16]
 800be40:	f7ff fefe 	bl	800bc40 <move_window>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d153      	bne.n	800bef2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	4413      	add	r3, r2
 800be54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be58:	021b      	lsls	r3, r3, #8
 800be5a:	461a      	mov	r2, r3
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	4313      	orrs	r3, r2
 800be60:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	f003 0301 	and.w	r3, r3, #1
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d002      	beq.n	800be72 <get_fat+0xbc>
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	091b      	lsrs	r3, r3, #4
 800be70:	e002      	b.n	800be78 <get_fat+0xc2>
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be78:	617b      	str	r3, [r7, #20]
			break;
 800be7a:	e03f      	b.n	800befc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	0a1b      	lsrs	r3, r3, #8
 800be84:	4413      	add	r3, r2
 800be86:	4619      	mov	r1, r3
 800be88:	6938      	ldr	r0, [r7, #16]
 800be8a:	f7ff fed9 	bl	800bc40 <move_window>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d130      	bne.n	800bef6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	005b      	lsls	r3, r3, #1
 800be9e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bea2:	4413      	add	r3, r2
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7ff fbe9 	bl	800b67c <ld_word>
 800beaa:	4603      	mov	r3, r0
 800beac:	617b      	str	r3, [r7, #20]
			break;
 800beae:	e025      	b.n	800befc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	09db      	lsrs	r3, r3, #7
 800beb8:	4413      	add	r3, r2
 800beba:	4619      	mov	r1, r3
 800bebc:	6938      	ldr	r0, [r7, #16]
 800bebe:	f7ff febf 	bl	800bc40 <move_window>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d118      	bne.n	800befa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bed6:	4413      	add	r3, r2
 800bed8:	4618      	mov	r0, r3
 800beda:	f7ff fbe7 	bl	800b6ac <ld_dword>
 800bede:	4603      	mov	r3, r0
 800bee0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bee4:	617b      	str	r3, [r7, #20]
			break;
 800bee6:	e009      	b.n	800befc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bee8:	2301      	movs	r3, #1
 800beea:	617b      	str	r3, [r7, #20]
 800beec:	e006      	b.n	800befc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800beee:	bf00      	nop
 800bef0:	e004      	b.n	800befc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bef2:	bf00      	nop
 800bef4:	e002      	b.n	800befc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bef6:	bf00      	nop
 800bef8:	e000      	b.n	800befc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800befa:	bf00      	nop
		}
	}

	return val;
 800befc:	697b      	ldr	r3, [r7, #20]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3718      	adds	r7, #24
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bf06:	b590      	push	{r4, r7, lr}
 800bf08:	b089      	sub	sp, #36	; 0x24
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	60f8      	str	r0, [r7, #12]
 800bf0e:	60b9      	str	r1, [r7, #8]
 800bf10:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bf12:	2302      	movs	r3, #2
 800bf14:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	f240 80d2 	bls.w	800c0c2 <put_fat+0x1bc>
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	699b      	ldr	r3, [r3, #24]
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	f080 80cc 	bcs.w	800c0c2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	2b03      	cmp	r3, #3
 800bf30:	f000 8096 	beq.w	800c060 <put_fat+0x15a>
 800bf34:	2b03      	cmp	r3, #3
 800bf36:	f300 80cd 	bgt.w	800c0d4 <put_fat+0x1ce>
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d002      	beq.n	800bf44 <put_fat+0x3e>
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d06e      	beq.n	800c020 <put_fat+0x11a>
 800bf42:	e0c7      	b.n	800c0d4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	61bb      	str	r3, [r7, #24]
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	085b      	lsrs	r3, r3, #1
 800bf4c:	69ba      	ldr	r2, [r7, #24]
 800bf4e:	4413      	add	r3, r2
 800bf50:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	0a5b      	lsrs	r3, r3, #9
 800bf5a:	4413      	add	r3, r2
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f7ff fe6e 	bl	800bc40 <move_window>
 800bf64:	4603      	mov	r3, r0
 800bf66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf68:	7ffb      	ldrb	r3, [r7, #31]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f040 80ab 	bne.w	800c0c6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	1c59      	adds	r1, r3, #1
 800bf7a:	61b9      	str	r1, [r7, #24]
 800bf7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf80:	4413      	add	r3, r2
 800bf82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	f003 0301 	and.w	r3, r3, #1
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00d      	beq.n	800bfaa <put_fat+0xa4>
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	b25b      	sxtb	r3, r3
 800bf94:	f003 030f 	and.w	r3, r3, #15
 800bf98:	b25a      	sxtb	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	011b      	lsls	r3, r3, #4
 800bfa0:	b25b      	sxtb	r3, r3
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	b25b      	sxtb	r3, r3
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	e001      	b.n	800bfae <put_fat+0xa8>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	0a5b      	lsrs	r3, r3, #9
 800bfc0:	4413      	add	r3, r2
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f7ff fe3b 	bl	800bc40 <move_window>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfce:	7ffb      	ldrb	r3, [r7, #31]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d17a      	bne.n	800c0ca <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe0:	4413      	add	r3, r2
 800bfe2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	f003 0301 	and.w	r3, r3, #1
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d003      	beq.n	800bff6 <put_fat+0xf0>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	091b      	lsrs	r3, r3, #4
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	e00e      	b.n	800c014 <put_fat+0x10e>
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	b25b      	sxtb	r3, r3
 800bffc:	f023 030f 	bic.w	r3, r3, #15
 800c000:	b25a      	sxtb	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	0a1b      	lsrs	r3, r3, #8
 800c006:	b25b      	sxtb	r3, r3
 800c008:	f003 030f 	and.w	r3, r3, #15
 800c00c:	b25b      	sxtb	r3, r3
 800c00e:	4313      	orrs	r3, r2
 800c010:	b25b      	sxtb	r3, r3
 800c012:	b2db      	uxtb	r3, r3
 800c014:	697a      	ldr	r2, [r7, #20]
 800c016:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2201      	movs	r2, #1
 800c01c:	70da      	strb	r2, [r3, #3]
			break;
 800c01e:	e059      	b.n	800c0d4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	0a1b      	lsrs	r3, r3, #8
 800c028:	4413      	add	r3, r2
 800c02a:	4619      	mov	r1, r3
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	f7ff fe07 	bl	800bc40 <move_window>
 800c032:	4603      	mov	r3, r0
 800c034:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c036:	7ffb      	ldrb	r3, [r7, #31]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d148      	bne.n	800c0ce <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c04a:	4413      	add	r3, r2
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	b292      	uxth	r2, r2
 800c050:	4611      	mov	r1, r2
 800c052:	4618      	mov	r0, r3
 800c054:	f7ff fb4d 	bl	800b6f2 <st_word>
			fs->wflag = 1;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2201      	movs	r2, #1
 800c05c:	70da      	strb	r2, [r3, #3]
			break;
 800c05e:	e039      	b.n	800c0d4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	09db      	lsrs	r3, r3, #7
 800c068:	4413      	add	r3, r2
 800c06a:	4619      	mov	r1, r3
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f7ff fde7 	bl	800bc40 <move_window>
 800c072:	4603      	mov	r3, r0
 800c074:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c076:	7ffb      	ldrb	r3, [r7, #31]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d12a      	bne.n	800c0d2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c090:	4413      	add	r3, r2
 800c092:	4618      	mov	r0, r3
 800c094:	f7ff fb0a 	bl	800b6ac <ld_dword>
 800c098:	4603      	mov	r3, r0
 800c09a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c09e:	4323      	orrs	r3, r4
 800c0a0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c0b0:	4413      	add	r3, r2
 800c0b2:	6879      	ldr	r1, [r7, #4]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7ff fb37 	bl	800b728 <st_dword>
			fs->wflag = 1;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	70da      	strb	r2, [r3, #3]
			break;
 800c0c0:	e008      	b.n	800c0d4 <put_fat+0x1ce>
		}
	}
 800c0c2:	bf00      	nop
 800c0c4:	e006      	b.n	800c0d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c0c6:	bf00      	nop
 800c0c8:	e004      	b.n	800c0d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c0ca:	bf00      	nop
 800c0cc:	e002      	b.n	800c0d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c0ce:	bf00      	nop
 800c0d0:	e000      	b.n	800c0d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c0d2:	bf00      	nop
	return res;
 800c0d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3724      	adds	r7, #36	; 0x24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd90      	pop	{r4, r7, pc}

0800c0de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b088      	sub	sp, #32
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	60f8      	str	r0, [r7, #12]
 800c0e6:	60b9      	str	r1, [r7, #8]
 800c0e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d904      	bls.n	800c104 <remove_chain+0x26>
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	699b      	ldr	r3, [r3, #24]
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	429a      	cmp	r2, r3
 800c102:	d301      	bcc.n	800c108 <remove_chain+0x2a>
 800c104:	2302      	movs	r3, #2
 800c106:	e04b      	b.n	800c1a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00c      	beq.n	800c128 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c10e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c112:	6879      	ldr	r1, [r7, #4]
 800c114:	69b8      	ldr	r0, [r7, #24]
 800c116:	f7ff fef6 	bl	800bf06 <put_fat>
 800c11a:	4603      	mov	r3, r0
 800c11c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c11e:	7ffb      	ldrb	r3, [r7, #31]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <remove_chain+0x4a>
 800c124:	7ffb      	ldrb	r3, [r7, #31]
 800c126:	e03b      	b.n	800c1a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c128:	68b9      	ldr	r1, [r7, #8]
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f7ff fe43 	bl	800bdb6 <get_fat>
 800c130:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d031      	beq.n	800c19c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d101      	bne.n	800c142 <remove_chain+0x64>
 800c13e:	2302      	movs	r3, #2
 800c140:	e02e      	b.n	800c1a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c148:	d101      	bne.n	800c14e <remove_chain+0x70>
 800c14a:	2301      	movs	r3, #1
 800c14c:	e028      	b.n	800c1a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c14e:	2200      	movs	r2, #0
 800c150:	68b9      	ldr	r1, [r7, #8]
 800c152:	69b8      	ldr	r0, [r7, #24]
 800c154:	f7ff fed7 	bl	800bf06 <put_fat>
 800c158:	4603      	mov	r3, r0
 800c15a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c15c:	7ffb      	ldrb	r3, [r7, #31]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d001      	beq.n	800c166 <remove_chain+0x88>
 800c162:	7ffb      	ldrb	r3, [r7, #31]
 800c164:	e01c      	b.n	800c1a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	695a      	ldr	r2, [r3, #20]
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	699b      	ldr	r3, [r3, #24]
 800c16e:	3b02      	subs	r3, #2
 800c170:	429a      	cmp	r2, r3
 800c172:	d20b      	bcs.n	800c18c <remove_chain+0xae>
			fs->free_clst++;
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	695b      	ldr	r3, [r3, #20]
 800c178:	1c5a      	adds	r2, r3, #1
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	791b      	ldrb	r3, [r3, #4]
 800c182:	f043 0301 	orr.w	r3, r3, #1
 800c186:	b2da      	uxtb	r2, r3
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	699b      	ldr	r3, [r3, #24]
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	429a      	cmp	r2, r3
 800c198:	d3c6      	bcc.n	800c128 <remove_chain+0x4a>
 800c19a:	e000      	b.n	800c19e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c19c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3720      	adds	r7, #32
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b088      	sub	sp, #32
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10d      	bne.n	800c1da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	691b      	ldr	r3, [r3, #16]
 800c1c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d004      	beq.n	800c1d4 <create_chain+0x2c>
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	69ba      	ldr	r2, [r7, #24]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d31b      	bcc.n	800c20c <create_chain+0x64>
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	61bb      	str	r3, [r7, #24]
 800c1d8:	e018      	b.n	800c20c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c1da:	6839      	ldr	r1, [r7, #0]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f7ff fdea 	bl	800bdb6 <get_fat>
 800c1e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d801      	bhi.n	800c1ee <create_chain+0x46>
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e070      	b.n	800c2d0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1f4:	d101      	bne.n	800c1fa <create_chain+0x52>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	e06a      	b.n	800c2d0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	699b      	ldr	r3, [r3, #24]
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	429a      	cmp	r2, r3
 800c202:	d201      	bcs.n	800c208 <create_chain+0x60>
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	e063      	b.n	800c2d0 <create_chain+0x128>
		scl = clst;
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	3301      	adds	r3, #1
 800c214:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	699b      	ldr	r3, [r3, #24]
 800c21a:	69fa      	ldr	r2, [r7, #28]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d307      	bcc.n	800c230 <create_chain+0x88>
				ncl = 2;
 800c220:	2302      	movs	r3, #2
 800c222:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c224:	69fa      	ldr	r2, [r7, #28]
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d901      	bls.n	800c230 <create_chain+0x88>
 800c22c:	2300      	movs	r3, #0
 800c22e:	e04f      	b.n	800c2d0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c230:	69f9      	ldr	r1, [r7, #28]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7ff fdbf 	bl	800bdb6 <get_fat>
 800c238:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00e      	beq.n	800c25e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2b01      	cmp	r3, #1
 800c244:	d003      	beq.n	800c24e <create_chain+0xa6>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c24c:	d101      	bne.n	800c252 <create_chain+0xaa>
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	e03e      	b.n	800c2d0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c252:	69fa      	ldr	r2, [r7, #28]
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	429a      	cmp	r2, r3
 800c258:	d1da      	bne.n	800c210 <create_chain+0x68>
 800c25a:	2300      	movs	r3, #0
 800c25c:	e038      	b.n	800c2d0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c25e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c264:	69f9      	ldr	r1, [r7, #28]
 800c266:	6938      	ldr	r0, [r7, #16]
 800c268:	f7ff fe4d 	bl	800bf06 <put_fat>
 800c26c:	4603      	mov	r3, r0
 800c26e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c270:	7dfb      	ldrb	r3, [r7, #23]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d109      	bne.n	800c28a <create_chain+0xe2>
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d006      	beq.n	800c28a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c27c:	69fa      	ldr	r2, [r7, #28]
 800c27e:	6839      	ldr	r1, [r7, #0]
 800c280:	6938      	ldr	r0, [r7, #16]
 800c282:	f7ff fe40 	bl	800bf06 <put_fat>
 800c286:	4603      	mov	r3, r0
 800c288:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c28a:	7dfb      	ldrb	r3, [r7, #23]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d116      	bne.n	800c2be <create_chain+0x116>
		fs->last_clst = ncl;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	69fa      	ldr	r2, [r7, #28]
 800c294:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	695a      	ldr	r2, [r3, #20]
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	699b      	ldr	r3, [r3, #24]
 800c29e:	3b02      	subs	r3, #2
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d804      	bhi.n	800c2ae <create_chain+0x106>
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	695b      	ldr	r3, [r3, #20]
 800c2a8:	1e5a      	subs	r2, r3, #1
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	791b      	ldrb	r3, [r3, #4]
 800c2b2:	f043 0301 	orr.w	r3, r3, #1
 800c2b6:	b2da      	uxtb	r2, r3
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	711a      	strb	r2, [r3, #4]
 800c2bc:	e007      	b.n	800c2ce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c2be:	7dfb      	ldrb	r3, [r7, #23]
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d102      	bne.n	800c2ca <create_chain+0x122>
 800c2c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2c8:	e000      	b.n	800c2cc <create_chain+0x124>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c2ce:	69fb      	ldr	r3, [r7, #28]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3720      	adds	r7, #32
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b087      	sub	sp, #28
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	0a5b      	lsrs	r3, r3, #9
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	8952      	ldrh	r2, [r2, #10]
 800c2f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	1d1a      	adds	r2, r3, #4
 800c302:	613a      	str	r2, [r7, #16]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d101      	bne.n	800c312 <clmt_clust+0x3a>
 800c30e:	2300      	movs	r3, #0
 800c310:	e010      	b.n	800c334 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c312:	697a      	ldr	r2, [r7, #20]
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	429a      	cmp	r2, r3
 800c318:	d307      	bcc.n	800c32a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c31a:	697a      	ldr	r2, [r7, #20]
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	617b      	str	r3, [r7, #20]
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	3304      	adds	r3, #4
 800c326:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c328:	e7e9      	b.n	800c2fe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c32a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	4413      	add	r3, r2
}
 800c334:	4618      	mov	r0, r3
 800c336:	371c      	adds	r7, #28
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b086      	sub	sp, #24
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c356:	d204      	bcs.n	800c362 <dir_sdi+0x22>
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	f003 031f 	and.w	r3, r3, #31
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c362:	2302      	movs	r3, #2
 800c364:	e063      	b.n	800c42e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	683a      	ldr	r2, [r7, #0]
 800c36a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d106      	bne.n	800c386 <dir_sdi+0x46>
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	2b02      	cmp	r3, #2
 800c37e:	d902      	bls.n	800c386 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c384:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10c      	bne.n	800c3a6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	095b      	lsrs	r3, r3, #5
 800c390:	693a      	ldr	r2, [r7, #16]
 800c392:	8912      	ldrh	r2, [r2, #8]
 800c394:	4293      	cmp	r3, r2
 800c396:	d301      	bcc.n	800c39c <dir_sdi+0x5c>
 800c398:	2302      	movs	r3, #2
 800c39a:	e048      	b.n	800c42e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	61da      	str	r2, [r3, #28]
 800c3a4:	e029      	b.n	800c3fa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	895b      	ldrh	r3, [r3, #10]
 800c3aa:	025b      	lsls	r3, r3, #9
 800c3ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3ae:	e019      	b.n	800c3e4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6979      	ldr	r1, [r7, #20]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7ff fcfe 	bl	800bdb6 <get_fat>
 800c3ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3c2:	d101      	bne.n	800c3c8 <dir_sdi+0x88>
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e032      	b.n	800c42e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d904      	bls.n	800c3d8 <dir_sdi+0x98>
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	699b      	ldr	r3, [r3, #24]
 800c3d2:	697a      	ldr	r2, [r7, #20]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d301      	bcc.n	800c3dc <dir_sdi+0x9c>
 800c3d8:	2302      	movs	r3, #2
 800c3da:	e028      	b.n	800c42e <dir_sdi+0xee>
			ofs -= csz;
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3e4:	683a      	ldr	r2, [r7, #0]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d2e1      	bcs.n	800c3b0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c3ec:	6979      	ldr	r1, [r7, #20]
 800c3ee:	6938      	ldr	r0, [r7, #16]
 800c3f0:	f7ff fcc2 	bl	800bd78 <clust2sect>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	697a      	ldr	r2, [r7, #20]
 800c3fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	69db      	ldr	r3, [r3, #28]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d101      	bne.n	800c40c <dir_sdi+0xcc>
 800c408:	2302      	movs	r3, #2
 800c40a:	e010      	b.n	800c42e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	69da      	ldr	r2, [r3, #28]
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	0a5b      	lsrs	r3, r3, #9
 800c414:	441a      	add	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c426:	441a      	add	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3718      	adds	r7, #24
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b086      	sub	sp, #24
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
 800c43e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	695b      	ldr	r3, [r3, #20]
 800c44a:	3320      	adds	r3, #32
 800c44c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	69db      	ldr	r3, [r3, #28]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d003      	beq.n	800c45e <dir_next+0x28>
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c45c:	d301      	bcc.n	800c462 <dir_next+0x2c>
 800c45e:	2304      	movs	r3, #4
 800c460:	e0aa      	b.n	800c5b8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f040 8098 	bne.w	800c59e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	69db      	ldr	r3, [r3, #28]
 800c472:	1c5a      	adds	r2, r3, #1
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	699b      	ldr	r3, [r3, #24]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10b      	bne.n	800c498 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	095b      	lsrs	r3, r3, #5
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	8912      	ldrh	r2, [r2, #8]
 800c488:	4293      	cmp	r3, r2
 800c48a:	f0c0 8088 	bcc.w	800c59e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	61da      	str	r2, [r3, #28]
 800c494:	2304      	movs	r3, #4
 800c496:	e08f      	b.n	800c5b8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	0a5b      	lsrs	r3, r3, #9
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	8952      	ldrh	r2, [r2, #10]
 800c4a0:	3a01      	subs	r2, #1
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d17a      	bne.n	800c59e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	4610      	mov	r0, r2
 800c4b2:	f7ff fc80 	bl	800bdb6 <get_fat>
 800c4b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d801      	bhi.n	800c4c2 <dir_next+0x8c>
 800c4be:	2302      	movs	r3, #2
 800c4c0:	e07a      	b.n	800c5b8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4c8:	d101      	bne.n	800c4ce <dir_next+0x98>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e074      	b.n	800c5b8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	699b      	ldr	r3, [r3, #24]
 800c4d2:	697a      	ldr	r2, [r7, #20]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d358      	bcc.n	800c58a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d104      	bne.n	800c4e8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	61da      	str	r2, [r3, #28]
 800c4e4:	2304      	movs	r3, #4
 800c4e6:	e067      	b.n	800c5b8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	699b      	ldr	r3, [r3, #24]
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	f7ff fe59 	bl	800c1a8 <create_chain>
 800c4f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d101      	bne.n	800c502 <dir_next+0xcc>
 800c4fe:	2307      	movs	r3, #7
 800c500:	e05a      	b.n	800c5b8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d101      	bne.n	800c50c <dir_next+0xd6>
 800c508:	2302      	movs	r3, #2
 800c50a:	e055      	b.n	800c5b8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c512:	d101      	bne.n	800c518 <dir_next+0xe2>
 800c514:	2301      	movs	r3, #1
 800c516:	e04f      	b.n	800c5b8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c518:	68f8      	ldr	r0, [r7, #12]
 800c51a:	f7ff fb4d 	bl	800bbb8 <sync_window>
 800c51e:	4603      	mov	r3, r0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d001      	beq.n	800c528 <dir_next+0xf2>
 800c524:	2301      	movs	r3, #1
 800c526:	e047      	b.n	800c5b8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	3334      	adds	r3, #52	; 0x34
 800c52c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c530:	2100      	movs	r1, #0
 800c532:	4618      	mov	r0, r3
 800c534:	f7ff f945 	bl	800b7c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c538:	2300      	movs	r3, #0
 800c53a:	613b      	str	r3, [r7, #16]
 800c53c:	6979      	ldr	r1, [r7, #20]
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f7ff fc1a 	bl	800bd78 <clust2sect>
 800c544:	4602      	mov	r2, r0
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	631a      	str	r2, [r3, #48]	; 0x30
 800c54a:	e012      	b.n	800c572 <dir_next+0x13c>
						fs->wflag = 1;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2201      	movs	r2, #1
 800c550:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f7ff fb30 	bl	800bbb8 <sync_window>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d001      	beq.n	800c562 <dir_next+0x12c>
 800c55e:	2301      	movs	r3, #1
 800c560:	e02a      	b.n	800c5b8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	3301      	adds	r3, #1
 800c566:	613b      	str	r3, [r7, #16]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c56c:	1c5a      	adds	r2, r3, #1
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	631a      	str	r2, [r3, #48]	; 0x30
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	895b      	ldrh	r3, [r3, #10]
 800c576:	461a      	mov	r2, r3
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d3e6      	bcc.n	800c54c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	1ad2      	subs	r2, r2, r3
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	697a      	ldr	r2, [r7, #20]
 800c58e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c590:	6979      	ldr	r1, [r7, #20]
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f7ff fbf0 	bl	800bd78 <clust2sect>
 800c598:	4602      	mov	r2, r0
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5b0:	441a      	add	r2, r3
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3718      	adds	r7, #24
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b086      	sub	sp, #24
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7ff feb4 	bl	800c340 <dir_sdi>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c5dc:	7dfb      	ldrb	r3, [r7, #23]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d12b      	bne.n	800c63a <dir_alloc+0x7a>
		n = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	69db      	ldr	r3, [r3, #28]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f7ff fb27 	bl	800bc40 <move_window>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c5f6:	7dfb      	ldrb	r3, [r7, #23]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d11d      	bne.n	800c638 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6a1b      	ldr	r3, [r3, #32]
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	2be5      	cmp	r3, #229	; 0xe5
 800c604:	d004      	beq.n	800c610 <dir_alloc+0x50>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a1b      	ldr	r3, [r3, #32]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d107      	bne.n	800c620 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	3301      	adds	r3, #1
 800c614:	613b      	str	r3, [r7, #16]
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d102      	bne.n	800c624 <dir_alloc+0x64>
 800c61e:	e00c      	b.n	800c63a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c620:	2300      	movs	r3, #0
 800c622:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c624:	2101      	movs	r1, #1
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7ff ff05 	bl	800c436 <dir_next>
 800c62c:	4603      	mov	r3, r0
 800c62e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c630:	7dfb      	ldrb	r3, [r7, #23]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d0d7      	beq.n	800c5e6 <dir_alloc+0x26>
 800c636:	e000      	b.n	800c63a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c638:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c63a:	7dfb      	ldrb	r3, [r7, #23]
 800c63c:	2b04      	cmp	r3, #4
 800c63e:	d101      	bne.n	800c644 <dir_alloc+0x84>
 800c640:	2307      	movs	r3, #7
 800c642:	75fb      	strb	r3, [r7, #23]
	return res;
 800c644:	7dfb      	ldrb	r3, [r7, #23]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3718      	adds	r7, #24
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b084      	sub	sp, #16
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	331a      	adds	r3, #26
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7ff f80d 	bl	800b67c <ld_word>
 800c662:	4603      	mov	r3, r0
 800c664:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	2b03      	cmp	r3, #3
 800c66c:	d109      	bne.n	800c682 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	3314      	adds	r3, #20
 800c672:	4618      	mov	r0, r3
 800c674:	f7ff f802 	bl	800b67c <ld_word>
 800c678:	4603      	mov	r3, r0
 800c67a:	041b      	lsls	r3, r3, #16
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	4313      	orrs	r3, r2
 800c680:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c682:	68fb      	ldr	r3, [r7, #12]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	331a      	adds	r3, #26
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	b292      	uxth	r2, r2
 800c6a0:	4611      	mov	r1, r2
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7ff f825 	bl	800b6f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d109      	bne.n	800c6c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	f103 0214 	add.w	r2, r3, #20
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	0c1b      	lsrs	r3, r3, #16
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	4619      	mov	r1, r3
 800c6be:	4610      	mov	r0, r2
 800c6c0:	f7ff f817 	bl	800b6f2 <st_word>
	}
}
 800c6c4:	bf00      	nop
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c6da:	2100      	movs	r1, #0
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f7ff fe2f 	bl	800c340 <dir_sdi>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c6e6:	7dfb      	ldrb	r3, [r7, #23]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d001      	beq.n	800c6f0 <dir_find+0x24>
 800c6ec:	7dfb      	ldrb	r3, [r7, #23]
 800c6ee:	e03e      	b.n	800c76e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	69db      	ldr	r3, [r3, #28]
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	6938      	ldr	r0, [r7, #16]
 800c6f8:	f7ff faa2 	bl	800bc40 <move_window>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c700:	7dfb      	ldrb	r3, [r7, #23]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d12f      	bne.n	800c766 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6a1b      	ldr	r3, [r3, #32]
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c70e:	7bfb      	ldrb	r3, [r7, #15]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d102      	bne.n	800c71a <dir_find+0x4e>
 800c714:	2304      	movs	r3, #4
 800c716:	75fb      	strb	r3, [r7, #23]
 800c718:	e028      	b.n	800c76c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6a1b      	ldr	r3, [r3, #32]
 800c71e:	330b      	adds	r3, #11
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c726:	b2da      	uxtb	r2, r3
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a1b      	ldr	r3, [r3, #32]
 800c730:	330b      	adds	r3, #11
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	f003 0308 	and.w	r3, r3, #8
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10a      	bne.n	800c752 <dir_find+0x86>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6a18      	ldr	r0, [r3, #32]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	3324      	adds	r3, #36	; 0x24
 800c744:	220b      	movs	r2, #11
 800c746:	4619      	mov	r1, r3
 800c748:	f7ff f856 	bl	800b7f8 <mem_cmp>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00b      	beq.n	800c76a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c752:	2100      	movs	r1, #0
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f7ff fe6e 	bl	800c436 <dir_next>
 800c75a:	4603      	mov	r3, r0
 800c75c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c75e:	7dfb      	ldrb	r3, [r7, #23]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d0c5      	beq.n	800c6f0 <dir_find+0x24>
 800c764:	e002      	b.n	800c76c <dir_find+0xa0>
		if (res != FR_OK) break;
 800c766:	bf00      	nop
 800c768:	e000      	b.n	800c76c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c76a:	bf00      	nop

	return res;
 800c76c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3718      	adds	r7, #24
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b084      	sub	sp, #16
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c784:	2101      	movs	r1, #1
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7ff ff1a 	bl	800c5c0 <dir_alloc>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c790:	7bfb      	ldrb	r3, [r7, #15]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d11c      	bne.n	800c7d0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	69db      	ldr	r3, [r3, #28]
 800c79a:	4619      	mov	r1, r3
 800c79c:	68b8      	ldr	r0, [r7, #8]
 800c79e:	f7ff fa4f 	bl	800bc40 <move_window>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d111      	bne.n	800c7d0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a1b      	ldr	r3, [r3, #32]
 800c7b0:	2220      	movs	r2, #32
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7ff f804 	bl	800b7c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a18      	ldr	r0, [r3, #32]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3324      	adds	r3, #36	; 0x24
 800c7c2:	220b      	movs	r2, #11
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	f7fe ffdb 	bl	800b780 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3710      	adds	r7, #16
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
	...

0800c7dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b088      	sub	sp, #32
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	60fb      	str	r3, [r7, #12]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	3324      	adds	r3, #36	; 0x24
 800c7f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c7f2:	220b      	movs	r2, #11
 800c7f4:	2120      	movs	r1, #32
 800c7f6:	68b8      	ldr	r0, [r7, #8]
 800c7f8:	f7fe ffe3 	bl	800b7c2 <mem_set>
	si = i = 0; ni = 8;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	613b      	str	r3, [r7, #16]
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	61fb      	str	r3, [r7, #28]
 800c804:	2308      	movs	r3, #8
 800c806:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	1c5a      	adds	r2, r3, #1
 800c80c:	61fa      	str	r2, [r7, #28]
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	4413      	add	r3, r2
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c816:	7efb      	ldrb	r3, [r7, #27]
 800c818:	2b20      	cmp	r3, #32
 800c81a:	d94e      	bls.n	800c8ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c81c:	7efb      	ldrb	r3, [r7, #27]
 800c81e:	2b2f      	cmp	r3, #47	; 0x2f
 800c820:	d006      	beq.n	800c830 <create_name+0x54>
 800c822:	7efb      	ldrb	r3, [r7, #27]
 800c824:	2b5c      	cmp	r3, #92	; 0x5c
 800c826:	d110      	bne.n	800c84a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c828:	e002      	b.n	800c830 <create_name+0x54>
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	3301      	adds	r3, #1
 800c82e:	61fb      	str	r3, [r7, #28]
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	4413      	add	r3, r2
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	2b2f      	cmp	r3, #47	; 0x2f
 800c83a:	d0f6      	beq.n	800c82a <create_name+0x4e>
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	4413      	add	r3, r2
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	2b5c      	cmp	r3, #92	; 0x5c
 800c846:	d0f0      	beq.n	800c82a <create_name+0x4e>
			break;
 800c848:	e038      	b.n	800c8bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c84a:	7efb      	ldrb	r3, [r7, #27]
 800c84c:	2b2e      	cmp	r3, #46	; 0x2e
 800c84e:	d003      	beq.n	800c858 <create_name+0x7c>
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	429a      	cmp	r2, r3
 800c856:	d30c      	bcc.n	800c872 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	2b0b      	cmp	r3, #11
 800c85c:	d002      	beq.n	800c864 <create_name+0x88>
 800c85e:	7efb      	ldrb	r3, [r7, #27]
 800c860:	2b2e      	cmp	r3, #46	; 0x2e
 800c862:	d001      	beq.n	800c868 <create_name+0x8c>
 800c864:	2306      	movs	r3, #6
 800c866:	e044      	b.n	800c8f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c868:	2308      	movs	r3, #8
 800c86a:	613b      	str	r3, [r7, #16]
 800c86c:	230b      	movs	r3, #11
 800c86e:	617b      	str	r3, [r7, #20]
			continue;
 800c870:	e022      	b.n	800c8b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c872:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c876:	2b00      	cmp	r3, #0
 800c878:	da04      	bge.n	800c884 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c87a:	7efb      	ldrb	r3, [r7, #27]
 800c87c:	3b80      	subs	r3, #128	; 0x80
 800c87e:	4a1f      	ldr	r2, [pc, #124]	; (800c8fc <create_name+0x120>)
 800c880:	5cd3      	ldrb	r3, [r2, r3]
 800c882:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c884:	7efb      	ldrb	r3, [r7, #27]
 800c886:	4619      	mov	r1, r3
 800c888:	481d      	ldr	r0, [pc, #116]	; (800c900 <create_name+0x124>)
 800c88a:	f7fe ffdc 	bl	800b846 <chk_chr>
 800c88e:	4603      	mov	r3, r0
 800c890:	2b00      	cmp	r3, #0
 800c892:	d001      	beq.n	800c898 <create_name+0xbc>
 800c894:	2306      	movs	r3, #6
 800c896:	e02c      	b.n	800c8f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c898:	7efb      	ldrb	r3, [r7, #27]
 800c89a:	2b60      	cmp	r3, #96	; 0x60
 800c89c:	d905      	bls.n	800c8aa <create_name+0xce>
 800c89e:	7efb      	ldrb	r3, [r7, #27]
 800c8a0:	2b7a      	cmp	r3, #122	; 0x7a
 800c8a2:	d802      	bhi.n	800c8aa <create_name+0xce>
 800c8a4:	7efb      	ldrb	r3, [r7, #27]
 800c8a6:	3b20      	subs	r3, #32
 800c8a8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	1c5a      	adds	r2, r3, #1
 800c8ae:	613a      	str	r2, [r7, #16]
 800c8b0:	68ba      	ldr	r2, [r7, #8]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	7efa      	ldrb	r2, [r7, #27]
 800c8b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c8b8:	e7a6      	b.n	800c808 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c8ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	441a      	add	r2, r3
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d101      	bne.n	800c8d0 <create_name+0xf4>
 800c8cc:	2306      	movs	r3, #6
 800c8ce:	e010      	b.n	800c8f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	2be5      	cmp	r3, #229	; 0xe5
 800c8d6:	d102      	bne.n	800c8de <create_name+0x102>
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	2205      	movs	r2, #5
 800c8dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c8de:	7efb      	ldrb	r3, [r7, #27]
 800c8e0:	2b20      	cmp	r3, #32
 800c8e2:	d801      	bhi.n	800c8e8 <create_name+0x10c>
 800c8e4:	2204      	movs	r2, #4
 800c8e6:	e000      	b.n	800c8ea <create_name+0x10e>
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	330b      	adds	r3, #11
 800c8ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c8f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3720      	adds	r7, #32
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	08012db4 	.word	0x08012db4
 800c900:	08012d34 	.word	0x08012d34

0800c904 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c918:	e002      	b.n	800c920 <follow_path+0x1c>
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	3301      	adds	r3, #1
 800c91e:	603b      	str	r3, [r7, #0]
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	2b2f      	cmp	r3, #47	; 0x2f
 800c926:	d0f8      	beq.n	800c91a <follow_path+0x16>
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	2b5c      	cmp	r3, #92	; 0x5c
 800c92e:	d0f4      	beq.n	800c91a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	2200      	movs	r2, #0
 800c934:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	2b1f      	cmp	r3, #31
 800c93c:	d80a      	bhi.n	800c954 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2280      	movs	r2, #128	; 0x80
 800c942:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c946:	2100      	movs	r1, #0
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7ff fcf9 	bl	800c340 <dir_sdi>
 800c94e:	4603      	mov	r3, r0
 800c950:	75fb      	strb	r3, [r7, #23]
 800c952:	e043      	b.n	800c9dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c954:	463b      	mov	r3, r7
 800c956:	4619      	mov	r1, r3
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7ff ff3f 	bl	800c7dc <create_name>
 800c95e:	4603      	mov	r3, r0
 800c960:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c962:	7dfb      	ldrb	r3, [r7, #23]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d134      	bne.n	800c9d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f7ff feaf 	bl	800c6cc <dir_find>
 800c96e:	4603      	mov	r3, r0
 800c970:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c978:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c97a:	7dfb      	ldrb	r3, [r7, #23]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00a      	beq.n	800c996 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c980:	7dfb      	ldrb	r3, [r7, #23]
 800c982:	2b04      	cmp	r3, #4
 800c984:	d127      	bne.n	800c9d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c986:	7afb      	ldrb	r3, [r7, #11]
 800c988:	f003 0304 	and.w	r3, r3, #4
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d122      	bne.n	800c9d6 <follow_path+0xd2>
 800c990:	2305      	movs	r3, #5
 800c992:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c994:	e01f      	b.n	800c9d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c996:	7afb      	ldrb	r3, [r7, #11]
 800c998:	f003 0304 	and.w	r3, r3, #4
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d11c      	bne.n	800c9da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	799b      	ldrb	r3, [r3, #6]
 800c9a4:	f003 0310 	and.w	r3, r3, #16
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d102      	bne.n	800c9b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c9ac:	2305      	movs	r3, #5
 800c9ae:	75fb      	strb	r3, [r7, #23]
 800c9b0:	e014      	b.n	800c9dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	695b      	ldr	r3, [r3, #20]
 800c9bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c0:	4413      	add	r3, r2
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f7ff fe42 	bl	800c64e <ld_clust>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c9d0:	e7c0      	b.n	800c954 <follow_path+0x50>
			if (res != FR_OK) break;
 800c9d2:	bf00      	nop
 800c9d4:	e002      	b.n	800c9dc <follow_path+0xd8>
				break;
 800c9d6:	bf00      	nop
 800c9d8:	e000      	b.n	800c9dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c9da:	bf00      	nop
			}
		}
	}

	return res;
 800c9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3718      	adds	r7, #24
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c9e6:	b480      	push	{r7}
 800c9e8:	b087      	sub	sp, #28
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c9ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d031      	beq.n	800ca60 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	617b      	str	r3, [r7, #20]
 800ca02:	e002      	b.n	800ca0a <get_ldnumber+0x24>
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	3301      	adds	r3, #1
 800ca08:	617b      	str	r3, [r7, #20]
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	2b20      	cmp	r3, #32
 800ca10:	d903      	bls.n	800ca1a <get_ldnumber+0x34>
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	2b3a      	cmp	r3, #58	; 0x3a
 800ca18:	d1f4      	bne.n	800ca04 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	2b3a      	cmp	r3, #58	; 0x3a
 800ca20:	d11c      	bne.n	800ca5c <get_ldnumber+0x76>
			tp = *path;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	1c5a      	adds	r2, r3, #1
 800ca2c:	60fa      	str	r2, [r7, #12]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	3b30      	subs	r3, #48	; 0x30
 800ca32:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	2b09      	cmp	r3, #9
 800ca38:	d80e      	bhi.n	800ca58 <get_ldnumber+0x72>
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d10a      	bne.n	800ca58 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d107      	bne.n	800ca58 <get_ldnumber+0x72>
					vol = (int)i;
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	617b      	str	r3, [r7, #20]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	697a      	ldr	r2, [r7, #20]
 800ca56:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	e002      	b.n	800ca62 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ca60:	693b      	ldr	r3, [r7, #16]
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	371c      	adds	r7, #28
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
	...

0800ca70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	70da      	strb	r2, [r3, #3]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca86:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ca88:	6839      	ldr	r1, [r7, #0]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f7ff f8d8 	bl	800bc40 <move_window>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d001      	beq.n	800ca9a <check_fs+0x2a>
 800ca96:	2304      	movs	r3, #4
 800ca98:	e038      	b.n	800cb0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	3334      	adds	r3, #52	; 0x34
 800ca9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fe fdea 	bl	800b67c <ld_word>
 800caa8:	4603      	mov	r3, r0
 800caaa:	461a      	mov	r2, r3
 800caac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d001      	beq.n	800cab8 <check_fs+0x48>
 800cab4:	2303      	movs	r3, #3
 800cab6:	e029      	b.n	800cb0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cabe:	2be9      	cmp	r3, #233	; 0xe9
 800cac0:	d009      	beq.n	800cad6 <check_fs+0x66>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cac8:	2beb      	cmp	r3, #235	; 0xeb
 800caca:	d11e      	bne.n	800cb0a <check_fs+0x9a>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800cad2:	2b90      	cmp	r3, #144	; 0x90
 800cad4:	d119      	bne.n	800cb0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	3334      	adds	r3, #52	; 0x34
 800cada:	3336      	adds	r3, #54	; 0x36
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fe fde5 	bl	800b6ac <ld_dword>
 800cae2:	4603      	mov	r3, r0
 800cae4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cae8:	4a0a      	ldr	r2, [pc, #40]	; (800cb14 <check_fs+0xa4>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d101      	bne.n	800caf2 <check_fs+0x82>
 800caee:	2300      	movs	r3, #0
 800caf0:	e00c      	b.n	800cb0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	3334      	adds	r3, #52	; 0x34
 800caf6:	3352      	adds	r3, #82	; 0x52
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7fe fdd7 	bl	800b6ac <ld_dword>
 800cafe:	4603      	mov	r3, r0
 800cb00:	4a05      	ldr	r2, [pc, #20]	; (800cb18 <check_fs+0xa8>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d101      	bne.n	800cb0a <check_fs+0x9a>
 800cb06:	2300      	movs	r3, #0
 800cb08:	e000      	b.n	800cb0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cb0a:	2302      	movs	r3, #2
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	00544146 	.word	0x00544146
 800cb18:	33544146 	.word	0x33544146

0800cb1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b096      	sub	sp, #88	; 0x58
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	4613      	mov	r3, r2
 800cb28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f7ff ff58 	bl	800c9e6 <get_ldnumber>
 800cb36:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	da01      	bge.n	800cb42 <find_volume+0x26>
 800cb3e:	230b      	movs	r3, #11
 800cb40:	e236      	b.n	800cfb0 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cb42:	4aac      	ldr	r2, [pc, #688]	; (800cdf4 <find_volume+0x2d8>)
 800cb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb4a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d101      	bne.n	800cb56 <find_volume+0x3a>
 800cb52:	230c      	movs	r3, #12
 800cb54:	e22c      	b.n	800cfb0 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800cb56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb58:	f7fe fe90 	bl	800b87c <lock_fs>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d101      	bne.n	800cb66 <find_volume+0x4a>
 800cb62:	230f      	movs	r3, #15
 800cb64:	e224      	b.n	800cfb0 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb6a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cb6c:	79fb      	ldrb	r3, [r7, #7]
 800cb6e:	f023 0301 	bic.w	r3, r3, #1
 800cb72:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d01a      	beq.n	800cbb2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800cb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7e:	785b      	ldrb	r3, [r3, #1]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7fe fcdd 	bl	800b540 <disk_status>
 800cb86:	4603      	mov	r3, r0
 800cb88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cb8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb90:	f003 0301 	and.w	r3, r3, #1
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10c      	bne.n	800cbb2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cb98:	79fb      	ldrb	r3, [r7, #7]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d007      	beq.n	800cbae <find_volume+0x92>
 800cb9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cba2:	f003 0304 	and.w	r3, r3, #4
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d001      	beq.n	800cbae <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800cbaa:	230a      	movs	r3, #10
 800cbac:	e200      	b.n	800cfb0 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800cbae:	2300      	movs	r3, #0
 800cbb0:	e1fe      	b.n	800cfb0 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cbb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbba:	b2da      	uxtb	r2, r3
 800cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc2:	785b      	ldrb	r3, [r3, #1]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fe fcd5 	bl	800b574 <disk_initialize>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cbd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbd4:	f003 0301 	and.w	r3, r3, #1
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d001      	beq.n	800cbe0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cbdc:	2303      	movs	r3, #3
 800cbde:	e1e7      	b.n	800cfb0 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cbe0:	79fb      	ldrb	r3, [r7, #7]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d007      	beq.n	800cbf6 <find_volume+0xda>
 800cbe6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbea:	f003 0304 	and.w	r3, r3, #4
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d001      	beq.n	800cbf6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800cbf2:	230a      	movs	r3, #10
 800cbf4:	e1dc      	b.n	800cfb0 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cbfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cbfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cbfe:	f7ff ff37 	bl	800ca70 <check_fs>
 800cc02:	4603      	mov	r3, r0
 800cc04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cc08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d14b      	bne.n	800cca8 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cc10:	2300      	movs	r3, #0
 800cc12:	643b      	str	r3, [r7, #64]	; 0x40
 800cc14:	e01f      	b.n	800cc56 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc1e:	011b      	lsls	r3, r3, #4
 800cc20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cc24:	4413      	add	r3, r2
 800cc26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d006      	beq.n	800cc40 <find_volume+0x124>
 800cc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc34:	3308      	adds	r3, #8
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fe fd38 	bl	800b6ac <ld_dword>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	e000      	b.n	800cc42 <find_volume+0x126>
 800cc40:	2200      	movs	r2, #0
 800cc42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800cc4a:	440b      	add	r3, r1
 800cc4c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cc50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc52:	3301      	adds	r3, #1
 800cc54:	643b      	str	r3, [r7, #64]	; 0x40
 800cc56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc58:	2b03      	cmp	r3, #3
 800cc5a:	d9dc      	bls.n	800cc16 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cc60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d002      	beq.n	800cc6c <find_volume+0x150>
 800cc66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cc6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cc74:	4413      	add	r3, r2
 800cc76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cc7a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cc7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d005      	beq.n	800cc8e <find_volume+0x172>
 800cc82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc86:	f7ff fef3 	bl	800ca70 <check_fs>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	e000      	b.n	800cc90 <find_volume+0x174>
 800cc8e:	2303      	movs	r3, #3
 800cc90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cc94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d905      	bls.n	800cca8 <find_volume+0x18c>
 800cc9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc9e:	3301      	adds	r3, #1
 800cca0:	643b      	str	r3, [r7, #64]	; 0x40
 800cca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cca4:	2b03      	cmp	r3, #3
 800cca6:	d9e1      	bls.n	800cc6c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cca8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ccac:	2b04      	cmp	r3, #4
 800ccae:	d101      	bne.n	800ccb4 <find_volume+0x198>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e17d      	b.n	800cfb0 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ccb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d901      	bls.n	800ccc0 <find_volume+0x1a4>
 800ccbc:	230d      	movs	r3, #13
 800ccbe:	e177      	b.n	800cfb0 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ccc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc2:	3334      	adds	r3, #52	; 0x34
 800ccc4:	330b      	adds	r3, #11
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7fe fcd8 	bl	800b67c <ld_word>
 800cccc:	4603      	mov	r3, r0
 800ccce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccd2:	d001      	beq.n	800ccd8 <find_volume+0x1bc>
 800ccd4:	230d      	movs	r3, #13
 800ccd6:	e16b      	b.n	800cfb0 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ccd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccda:	3334      	adds	r3, #52	; 0x34
 800ccdc:	3316      	adds	r3, #22
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7fe fccc 	bl	800b67c <ld_word>
 800cce4:	4603      	mov	r3, r0
 800cce6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d106      	bne.n	800ccfc <find_volume+0x1e0>
 800ccee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf0:	3334      	adds	r3, #52	; 0x34
 800ccf2:	3324      	adds	r3, #36	; 0x24
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fe fcd9 	bl	800b6ac <ld_dword>
 800ccfa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd00:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd04:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	789b      	ldrb	r3, [r3, #2]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d005      	beq.n	800cd20 <find_volume+0x204>
 800cd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd16:	789b      	ldrb	r3, [r3, #2]
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	d001      	beq.n	800cd20 <find_volume+0x204>
 800cd1c:	230d      	movs	r3, #13
 800cd1e:	e147      	b.n	800cfb0 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd22:	789b      	ldrb	r3, [r3, #2]
 800cd24:	461a      	mov	r2, r3
 800cd26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd28:	fb02 f303 	mul.w	r3, r2, r3
 800cd2c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd38:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3c:	895b      	ldrh	r3, [r3, #10]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d008      	beq.n	800cd54 <find_volume+0x238>
 800cd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd44:	895b      	ldrh	r3, [r3, #10]
 800cd46:	461a      	mov	r2, r3
 800cd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4a:	895b      	ldrh	r3, [r3, #10]
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	4013      	ands	r3, r2
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d001      	beq.n	800cd58 <find_volume+0x23c>
 800cd54:	230d      	movs	r3, #13
 800cd56:	e12b      	b.n	800cfb0 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5a:	3334      	adds	r3, #52	; 0x34
 800cd5c:	3311      	adds	r3, #17
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7fe fc8c 	bl	800b67c <ld_word>
 800cd64:	4603      	mov	r3, r0
 800cd66:	461a      	mov	r2, r3
 800cd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6e:	891b      	ldrh	r3, [r3, #8]
 800cd70:	f003 030f 	and.w	r3, r3, #15
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d001      	beq.n	800cd7e <find_volume+0x262>
 800cd7a:	230d      	movs	r3, #13
 800cd7c:	e118      	b.n	800cfb0 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd80:	3334      	adds	r3, #52	; 0x34
 800cd82:	3313      	adds	r3, #19
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fe fc79 	bl	800b67c <ld_word>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cd8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d106      	bne.n	800cda2 <find_volume+0x286>
 800cd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd96:	3334      	adds	r3, #52	; 0x34
 800cd98:	3320      	adds	r3, #32
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fe fc86 	bl	800b6ac <ld_dword>
 800cda0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda4:	3334      	adds	r3, #52	; 0x34
 800cda6:	330e      	adds	r3, #14
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7fe fc67 	bl	800b67c <ld_word>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cdb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d101      	bne.n	800cdbc <find_volume+0x2a0>
 800cdb8:	230d      	movs	r3, #13
 800cdba:	e0f9      	b.n	800cfb0 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cdbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cdbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdc0:	4413      	add	r3, r2
 800cdc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdc4:	8912      	ldrh	r2, [r2, #8]
 800cdc6:	0912      	lsrs	r2, r2, #4
 800cdc8:	b292      	uxth	r2, r2
 800cdca:	4413      	add	r3, r2
 800cdcc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cdce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d201      	bcs.n	800cdda <find_volume+0x2be>
 800cdd6:	230d      	movs	r3, #13
 800cdd8:	e0ea      	b.n	800cfb0 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cdda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdde:	1ad3      	subs	r3, r2, r3
 800cde0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cde2:	8952      	ldrh	r2, [r2, #10]
 800cde4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cde8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d103      	bne.n	800cdf8 <find_volume+0x2dc>
 800cdf0:	230d      	movs	r3, #13
 800cdf2:	e0dd      	b.n	800cfb0 <find_volume+0x494>
 800cdf4:	200057d0 	.word	0x200057d0
		fmt = FS_FAT32;
 800cdf8:	2303      	movs	r3, #3
 800cdfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce00:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d802      	bhi.n	800ce0e <find_volume+0x2f2>
 800ce08:	2302      	movs	r3, #2
 800ce0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce10:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d802      	bhi.n	800ce1e <find_volume+0x302>
 800ce18:	2301      	movs	r3, #1
 800ce1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce20:	1c9a      	adds	r2, r3, #2
 800ce22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce24:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ce26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce2a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ce2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ce2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce30:	441a      	add	r2, r3
 800ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce34:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ce36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3a:	441a      	add	r2, r3
 800ce3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ce40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce44:	2b03      	cmp	r3, #3
 800ce46:	d11e      	bne.n	800ce86 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	3334      	adds	r3, #52	; 0x34
 800ce4c:	332a      	adds	r3, #42	; 0x2a
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fe fc14 	bl	800b67c <ld_word>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d001      	beq.n	800ce5e <find_volume+0x342>
 800ce5a:	230d      	movs	r3, #13
 800ce5c:	e0a8      	b.n	800cfb0 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ce5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce60:	891b      	ldrh	r3, [r3, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d001      	beq.n	800ce6a <find_volume+0x34e>
 800ce66:	230d      	movs	r3, #13
 800ce68:	e0a2      	b.n	800cfb0 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ce6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6c:	3334      	adds	r3, #52	; 0x34
 800ce6e:	332c      	adds	r3, #44	; 0x2c
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7fe fc1b 	bl	800b6ac <ld_dword>
 800ce76:	4602      	mov	r2, r0
 800ce78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ce7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7e:	699b      	ldr	r3, [r3, #24]
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	647b      	str	r3, [r7, #68]	; 0x44
 800ce84:	e01f      	b.n	800cec6 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ce86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce88:	891b      	ldrh	r3, [r3, #8]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d101      	bne.n	800ce92 <find_volume+0x376>
 800ce8e:	230d      	movs	r3, #13
 800ce90:	e08e      	b.n	800cfb0 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ce92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce98:	441a      	add	r2, r3
 800ce9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ce9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	d103      	bne.n	800ceae <find_volume+0x392>
 800cea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	005b      	lsls	r3, r3, #1
 800ceac:	e00a      	b.n	800cec4 <find_volume+0x3a8>
 800ceae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb0:	699a      	ldr	r2, [r3, #24]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	005b      	lsls	r3, r3, #1
 800ceb6:	4413      	add	r3, r2
 800ceb8:	085a      	lsrs	r2, r3, #1
 800ceba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebc:	699b      	ldr	r3, [r3, #24]
 800cebe:	f003 0301 	and.w	r3, r3, #1
 800cec2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cec4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec8:	69da      	ldr	r2, [r3, #28]
 800ceca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cecc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ced0:	0a5b      	lsrs	r3, r3, #9
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d201      	bcs.n	800ceda <find_volume+0x3be>
 800ced6:	230d      	movs	r3, #13
 800ced8:	e06a      	b.n	800cfb0 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ceda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cedc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cee0:	615a      	str	r2, [r3, #20]
 800cee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee4:	695a      	ldr	r2, [r3, #20]
 800cee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceec:	2280      	movs	r2, #128	; 0x80
 800ceee:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cef0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cef4:	2b03      	cmp	r3, #3
 800cef6:	d149      	bne.n	800cf8c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefa:	3334      	adds	r3, #52	; 0x34
 800cefc:	3330      	adds	r3, #48	; 0x30
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fe fbbc 	bl	800b67c <ld_word>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d140      	bne.n	800cf8c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cf0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	4619      	mov	r1, r3
 800cf10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf12:	f7fe fe95 	bl	800bc40 <move_window>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d137      	bne.n	800cf8c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800cf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1e:	2200      	movs	r2, #0
 800cf20:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf24:	3334      	adds	r3, #52	; 0x34
 800cf26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fe fba6 	bl	800b67c <ld_word>
 800cf30:	4603      	mov	r3, r0
 800cf32:	461a      	mov	r2, r3
 800cf34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d127      	bne.n	800cf8c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cf3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3e:	3334      	adds	r3, #52	; 0x34
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fe fbb3 	bl	800b6ac <ld_dword>
 800cf46:	4603      	mov	r3, r0
 800cf48:	4a1b      	ldr	r2, [pc, #108]	; (800cfb8 <find_volume+0x49c>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d11e      	bne.n	800cf8c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf50:	3334      	adds	r3, #52	; 0x34
 800cf52:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fe fba8 	bl	800b6ac <ld_dword>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	4a17      	ldr	r2, [pc, #92]	; (800cfbc <find_volume+0x4a0>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d113      	bne.n	800cf8c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf66:	3334      	adds	r3, #52	; 0x34
 800cf68:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7fe fb9d 	bl	800b6ac <ld_dword>
 800cf72:	4602      	mov	r2, r0
 800cf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf76:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	3334      	adds	r3, #52	; 0x34
 800cf7c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fe fb93 	bl	800b6ac <ld_dword>
 800cf86:	4602      	mov	r2, r0
 800cf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cf92:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cf94:	4b0a      	ldr	r3, [pc, #40]	; (800cfc0 <find_volume+0x4a4>)
 800cf96:	881b      	ldrh	r3, [r3, #0]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	b29a      	uxth	r2, r3
 800cf9c:	4b08      	ldr	r3, [pc, #32]	; (800cfc0 <find_volume+0x4a4>)
 800cf9e:	801a      	strh	r2, [r3, #0]
 800cfa0:	4b07      	ldr	r3, [pc, #28]	; (800cfc0 <find_volume+0x4a4>)
 800cfa2:	881a      	ldrh	r2, [r3, #0]
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cfa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfaa:	f7fe fde1 	bl	800bb70 <clear_lock>
#endif
	return FR_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3758      	adds	r7, #88	; 0x58
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	41615252 	.word	0x41615252
 800cfbc:	61417272 	.word	0x61417272
 800cfc0:	200057d4 	.word	0x200057d4

0800cfc4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cfce:	2309      	movs	r3, #9
 800cfd0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d02e      	beq.n	800d036 <validate+0x72>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d02a      	beq.n	800d036 <validate+0x72>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d025      	beq.n	800d036 <validate+0x72>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	889a      	ldrh	r2, [r3, #4]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	88db      	ldrh	r3, [r3, #6]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d11e      	bne.n	800d036 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fe fc3d 	bl	800b87c <lock_fs>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d014      	beq.n	800d032 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	785b      	ldrb	r3, [r3, #1]
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe fa96 	bl	800b540 <disk_status>
 800d014:	4603      	mov	r3, r0
 800d016:	f003 0301 	and.w	r3, r3, #1
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d102      	bne.n	800d024 <validate+0x60>
				res = FR_OK;
 800d01e:	2300      	movs	r3, #0
 800d020:	73fb      	strb	r3, [r7, #15]
 800d022:	e008      	b.n	800d036 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2100      	movs	r1, #0
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fe fc3c 	bl	800b8a8 <unlock_fs>
 800d030:	e001      	b.n	800d036 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d032:	230f      	movs	r3, #15
 800d034:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d036:	7bfb      	ldrb	r3, [r7, #15]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d102      	bne.n	800d042 <validate+0x7e>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	e000      	b.n	800d044 <validate+0x80>
 800d042:	2300      	movs	r3, #0
 800d044:	683a      	ldr	r2, [r7, #0]
 800d046:	6013      	str	r3, [r2, #0]
	return res;
 800d048:	7bfb      	ldrb	r3, [r7, #15]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
	...

0800d054 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b088      	sub	sp, #32
 800d058:	af00      	add	r7, sp, #0
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	4613      	mov	r3, r2
 800d060:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d066:	f107 0310 	add.w	r3, r7, #16
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7ff fcbb 	bl	800c9e6 <get_ldnumber>
 800d070:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	2b00      	cmp	r3, #0
 800d076:	da01      	bge.n	800d07c <f_mount+0x28>
 800d078:	230b      	movs	r3, #11
 800d07a:	e048      	b.n	800d10e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d07c:	4a26      	ldr	r2, [pc, #152]	; (800d118 <f_mount+0xc4>)
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d084:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d00f      	beq.n	800d0ac <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d08c:	69b8      	ldr	r0, [r7, #24]
 800d08e:	f7fe fd6f 	bl	800bb70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	4618      	mov	r0, r3
 800d098:	f000 fca7 	bl	800d9ea <ff_del_syncobj>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d101      	bne.n	800d0a6 <f_mount+0x52>
 800d0a2:	2302      	movs	r3, #2
 800d0a4:	e033      	b.n	800d10e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d00f      	beq.n	800d0d2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d0b8:	69fb      	ldr	r3, [r7, #28]
 800d0ba:	b2da      	uxtb	r2, r3
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	330c      	adds	r3, #12
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	4610      	mov	r0, r2
 800d0c4:	f000 fc71 	bl	800d9aa <ff_cre_syncobj>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d101      	bne.n	800d0d2 <f_mount+0x7e>
 800d0ce:	2302      	movs	r3, #2
 800d0d0:	e01d      	b.n	800d10e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	4910      	ldr	r1, [pc, #64]	; (800d118 <f_mount+0xc4>)
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d002      	beq.n	800d0e8 <f_mount+0x94>
 800d0e2:	79fb      	ldrb	r3, [r7, #7]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d001      	beq.n	800d0ec <f_mount+0x98>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	e010      	b.n	800d10e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d0ec:	f107 010c 	add.w	r1, r7, #12
 800d0f0:	f107 0308 	add.w	r3, r7, #8
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7ff fd10 	bl	800cb1c <find_volume>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	7dfa      	ldrb	r2, [r7, #23]
 800d104:	4611      	mov	r1, r2
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fbce 	bl	800b8a8 <unlock_fs>
 800d10c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3720      	adds	r7, #32
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	200057d0 	.word	0x200057d0

0800d11c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b098      	sub	sp, #96	; 0x60
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	4613      	mov	r3, r2
 800d128:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d101      	bne.n	800d134 <f_open+0x18>
 800d130:	2309      	movs	r3, #9
 800d132:	e1b4      	b.n	800d49e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d134:	79fb      	ldrb	r3, [r7, #7]
 800d136:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d13a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d13c:	79fa      	ldrb	r2, [r7, #7]
 800d13e:	f107 0110 	add.w	r1, r7, #16
 800d142:	f107 0308 	add.w	r3, r7, #8
 800d146:	4618      	mov	r0, r3
 800d148:	f7ff fce8 	bl	800cb1c <find_volume>
 800d14c:	4603      	mov	r3, r0
 800d14e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d152:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d156:	2b00      	cmp	r3, #0
 800d158:	f040 8191 	bne.w	800d47e <f_open+0x362>
		dj.obj.fs = fs;
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d160:	68ba      	ldr	r2, [r7, #8]
 800d162:	f107 0314 	add.w	r3, r7, #20
 800d166:	4611      	mov	r1, r2
 800d168:	4618      	mov	r0, r3
 800d16a:	f7ff fbcb 	bl	800c904 <follow_path>
 800d16e:	4603      	mov	r3, r0
 800d170:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d11a      	bne.n	800d1b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d17c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d180:	b25b      	sxtb	r3, r3
 800d182:	2b00      	cmp	r3, #0
 800d184:	da03      	bge.n	800d18e <f_open+0x72>
				res = FR_INVALID_NAME;
 800d186:	2306      	movs	r3, #6
 800d188:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d18c:	e011      	b.n	800d1b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d18e:	79fb      	ldrb	r3, [r7, #7]
 800d190:	f023 0301 	bic.w	r3, r3, #1
 800d194:	2b00      	cmp	r3, #0
 800d196:	bf14      	ite	ne
 800d198:	2301      	movne	r3, #1
 800d19a:	2300      	moveq	r3, #0
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	461a      	mov	r2, r3
 800d1a0:	f107 0314 	add.w	r3, r7, #20
 800d1a4:	4611      	mov	r1, r2
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fe fb9a 	bl	800b8e0 <chk_lock>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d1b2:	79fb      	ldrb	r3, [r7, #7]
 800d1b4:	f003 031c 	and.w	r3, r3, #28
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d07f      	beq.n	800d2bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d1bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d017      	beq.n	800d1f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d1c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1c8:	2b04      	cmp	r3, #4
 800d1ca:	d10e      	bne.n	800d1ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d1cc:	f7fe fbe4 	bl	800b998 <enq_lock>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d006      	beq.n	800d1e4 <f_open+0xc8>
 800d1d6:	f107 0314 	add.w	r3, r7, #20
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7ff facb 	bl	800c776 <dir_register>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	e000      	b.n	800d1e6 <f_open+0xca>
 800d1e4:	2312      	movs	r3, #18
 800d1e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d1ea:	79fb      	ldrb	r3, [r7, #7]
 800d1ec:	f043 0308 	orr.w	r3, r3, #8
 800d1f0:	71fb      	strb	r3, [r7, #7]
 800d1f2:	e010      	b.n	800d216 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d1f4:	7ebb      	ldrb	r3, [r7, #26]
 800d1f6:	f003 0311 	and.w	r3, r3, #17
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d003      	beq.n	800d206 <f_open+0xea>
					res = FR_DENIED;
 800d1fe:	2307      	movs	r3, #7
 800d200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d204:	e007      	b.n	800d216 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d206:	79fb      	ldrb	r3, [r7, #7]
 800d208:	f003 0304 	and.w	r3, r3, #4
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d002      	beq.n	800d216 <f_open+0xfa>
 800d210:	2308      	movs	r3, #8
 800d212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d168      	bne.n	800d2f0 <f_open+0x1d4>
 800d21e:	79fb      	ldrb	r3, [r7, #7]
 800d220:	f003 0308 	and.w	r3, r3, #8
 800d224:	2b00      	cmp	r3, #0
 800d226:	d063      	beq.n	800d2f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d228:	f7fd ff1a 	bl	800b060 <get_fattime>
 800d22c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d230:	330e      	adds	r3, #14
 800d232:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d234:	4618      	mov	r0, r3
 800d236:	f7fe fa77 	bl	800b728 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d23c:	3316      	adds	r3, #22
 800d23e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d240:	4618      	mov	r0, r3
 800d242:	f7fe fa71 	bl	800b728 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d248:	330b      	adds	r3, #11
 800d24a:	2220      	movs	r2, #32
 800d24c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d252:	4611      	mov	r1, r2
 800d254:	4618      	mov	r0, r3
 800d256:	f7ff f9fa 	bl	800c64e <ld_clust>
 800d25a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d260:	2200      	movs	r2, #0
 800d262:	4618      	mov	r0, r3
 800d264:	f7ff fa12 	bl	800c68c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d26a:	331c      	adds	r3, #28
 800d26c:	2100      	movs	r1, #0
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fe fa5a 	bl	800b728 <st_dword>
					fs->wflag = 1;
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	2201      	movs	r2, #1
 800d278:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d037      	beq.n	800d2f0 <f_open+0x1d4>
						dw = fs->winsect;
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d284:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d286:	f107 0314 	add.w	r3, r7, #20
 800d28a:	2200      	movs	r2, #0
 800d28c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fe ff25 	bl	800c0de <remove_chain>
 800d294:	4603      	mov	r3, r0
 800d296:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d29a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d126      	bne.n	800d2f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fe fcca 	bl	800bc40 <move_window>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2b6:	3a01      	subs	r2, #1
 800d2b8:	611a      	str	r2, [r3, #16]
 800d2ba:	e019      	b.n	800d2f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d2bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d115      	bne.n	800d2f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d2c4:	7ebb      	ldrb	r3, [r7, #26]
 800d2c6:	f003 0310 	and.w	r3, r3, #16
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d003      	beq.n	800d2d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d2ce:	2304      	movs	r3, #4
 800d2d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d2d4:	e00c      	b.n	800d2f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d2d6:	79fb      	ldrb	r3, [r7, #7]
 800d2d8:	f003 0302 	and.w	r3, r3, #2
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d007      	beq.n	800d2f0 <f_open+0x1d4>
 800d2e0:	7ebb      	ldrb	r3, [r7, #26]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d002      	beq.n	800d2f0 <f_open+0x1d4>
						res = FR_DENIED;
 800d2ea:	2307      	movs	r3, #7
 800d2ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d2f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d128      	bne.n	800d34a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d2f8:	79fb      	ldrb	r3, [r7, #7]
 800d2fa:	f003 0308 	and.w	r3, r3, #8
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d003      	beq.n	800d30a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d302:	79fb      	ldrb	r3, [r7, #7]
 800d304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d308:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d318:	79fb      	ldrb	r3, [r7, #7]
 800d31a:	f023 0301 	bic.w	r3, r3, #1
 800d31e:	2b00      	cmp	r3, #0
 800d320:	bf14      	ite	ne
 800d322:	2301      	movne	r3, #1
 800d324:	2300      	moveq	r3, #0
 800d326:	b2db      	uxtb	r3, r3
 800d328:	461a      	mov	r2, r3
 800d32a:	f107 0314 	add.w	r3, r7, #20
 800d32e:	4611      	mov	r1, r2
 800d330:	4618      	mov	r0, r3
 800d332:	f7fe fb53 	bl	800b9dc <inc_lock>
 800d336:	4602      	mov	r2, r0
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	691b      	ldr	r3, [r3, #16]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d102      	bne.n	800d34a <f_open+0x22e>
 800d344:	2302      	movs	r3, #2
 800d346:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d34a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f040 8095 	bne.w	800d47e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d358:	4611      	mov	r1, r2
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7ff f977 	bl	800c64e <ld_clust>
 800d360:	4602      	mov	r2, r0
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d368:	331c      	adds	r3, #28
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fe f99e 	bl	800b6ac <ld_dword>
 800d370:	4602      	mov	r2, r0
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2200      	movs	r2, #0
 800d37a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d37c:	693a      	ldr	r2, [r7, #16]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	88da      	ldrh	r2, [r3, #6]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	79fa      	ldrb	r2, [r7, #7]
 800d38e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2200      	movs	r2, #0
 800d394:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2200      	movs	r2, #0
 800d39a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	3330      	adds	r3, #48	; 0x30
 800d3a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7fe fa08 	bl	800b7c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d3b2:	79fb      	ldrb	r3, [r7, #7]
 800d3b4:	f003 0320 	and.w	r3, r3, #32
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d060      	beq.n	800d47e <f_open+0x362>
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d05c      	beq.n	800d47e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	68da      	ldr	r2, [r3, #12]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	895b      	ldrh	r3, [r3, #10]
 800d3d0:	025b      	lsls	r3, r3, #9
 800d3d2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	657b      	str	r3, [r7, #84]	; 0x54
 800d3e0:	e016      	b.n	800d410 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fe fce5 	bl	800bdb6 <get_fat>
 800d3ec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d3ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d802      	bhi.n	800d3fa <f_open+0x2de>
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d3fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d400:	d102      	bne.n	800d408 <f_open+0x2ec>
 800d402:	2301      	movs	r3, #1
 800d404:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d408:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d40a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	657b      	str	r3, [r7, #84]	; 0x54
 800d410:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d414:	2b00      	cmp	r3, #0
 800d416:	d103      	bne.n	800d420 <f_open+0x304>
 800d418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d41a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d8e0      	bhi.n	800d3e2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d424:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d426:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d127      	bne.n	800d47e <f_open+0x362>
 800d42e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d434:	2b00      	cmp	r3, #0
 800d436:	d022      	beq.n	800d47e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fe fc9b 	bl	800bd78 <clust2sect>
 800d442:	6478      	str	r0, [r7, #68]	; 0x44
 800d444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d446:	2b00      	cmp	r3, #0
 800d448:	d103      	bne.n	800d452 <f_open+0x336>
						res = FR_INT_ERR;
 800d44a:	2302      	movs	r3, #2
 800d44c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d450:	e015      	b.n	800d47e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d454:	0a5a      	lsrs	r2, r3, #9
 800d456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d458:	441a      	add	r2, r3
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	7858      	ldrb	r0, [r3, #1]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6a1a      	ldr	r2, [r3, #32]
 800d46c:	2301      	movs	r3, #1
 800d46e:	f7fe f8a7 	bl	800b5c0 <disk_read>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d002      	beq.n	800d47e <f_open+0x362>
 800d478:	2301      	movs	r3, #1
 800d47a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d47e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d482:	2b00      	cmp	r3, #0
 800d484:	d002      	beq.n	800d48c <f_open+0x370>
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2200      	movs	r2, #0
 800d48a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800d492:	4611      	mov	r1, r2
 800d494:	4618      	mov	r0, r3
 800d496:	f7fe fa07 	bl	800b8a8 <unlock_fs>
 800d49a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3760      	adds	r7, #96	; 0x60
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b08e      	sub	sp, #56	; 0x38
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	60f8      	str	r0, [r7, #12]
 800d4ae:	60b9      	str	r1, [r7, #8]
 800d4b0:	607a      	str	r2, [r7, #4]
 800d4b2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f107 0214 	add.w	r2, r7, #20
 800d4c4:	4611      	mov	r1, r2
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7ff fd7c 	bl	800cfc4 <validate>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d4d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d107      	bne.n	800d4ea <f_read+0x44>
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	7d5b      	ldrb	r3, [r3, #21]
 800d4de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d4e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d009      	beq.n	800d4fe <f_read+0x58>
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d4f0:	4611      	mov	r1, r2
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe f9d8 	bl	800b8a8 <unlock_fs>
 800d4f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d4fc:	e13d      	b.n	800d77a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	7d1b      	ldrb	r3, [r3, #20]
 800d502:	f003 0301 	and.w	r3, r3, #1
 800d506:	2b00      	cmp	r3, #0
 800d508:	d106      	bne.n	800d518 <f_read+0x72>
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2107      	movs	r1, #7
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fe f9ca 	bl	800b8a8 <unlock_fs>
 800d514:	2307      	movs	r3, #7
 800d516:	e130      	b.n	800d77a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	68da      	ldr	r2, [r3, #12]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	699b      	ldr	r3, [r3, #24]
 800d520:	1ad3      	subs	r3, r2, r3
 800d522:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	6a3b      	ldr	r3, [r7, #32]
 800d528:	429a      	cmp	r2, r3
 800d52a:	f240 811c 	bls.w	800d766 <f_read+0x2c0>
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d532:	e118      	b.n	800d766 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	699b      	ldr	r3, [r3, #24]
 800d538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f040 80e4 	bne.w	800d70a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	699b      	ldr	r3, [r3, #24]
 800d546:	0a5b      	lsrs	r3, r3, #9
 800d548:	697a      	ldr	r2, [r7, #20]
 800d54a:	8952      	ldrh	r2, [r2, #10]
 800d54c:	3a01      	subs	r2, #1
 800d54e:	4013      	ands	r3, r2
 800d550:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d139      	bne.n	800d5cc <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	699b      	ldr	r3, [r3, #24]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d103      	bne.n	800d568 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	633b      	str	r3, [r7, #48]	; 0x30
 800d566:	e013      	b.n	800d590 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d007      	beq.n	800d580 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	699b      	ldr	r3, [r3, #24]
 800d574:	4619      	mov	r1, r3
 800d576:	68f8      	ldr	r0, [r7, #12]
 800d578:	f7fe feae 	bl	800c2d8 <clmt_clust>
 800d57c:	6338      	str	r0, [r7, #48]	; 0x30
 800d57e:	e007      	b.n	800d590 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	69db      	ldr	r3, [r3, #28]
 800d586:	4619      	mov	r1, r3
 800d588:	4610      	mov	r0, r2
 800d58a:	f7fe fc14 	bl	800bdb6 <get_fat>
 800d58e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d592:	2b01      	cmp	r3, #1
 800d594:	d809      	bhi.n	800d5aa <f_read+0x104>
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2202      	movs	r2, #2
 800d59a:	755a      	strb	r2, [r3, #21]
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	2102      	movs	r1, #2
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fe f981 	bl	800b8a8 <unlock_fs>
 800d5a6:	2302      	movs	r3, #2
 800d5a8:	e0e7      	b.n	800d77a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5b0:	d109      	bne.n	800d5c6 <f_read+0x120>
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	755a      	strb	r2, [r3, #21]
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	2101      	movs	r1, #1
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7fe f973 	bl	800b8a8 <unlock_fs>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e0d9      	b.n	800d77a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5ca:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d5cc:	697a      	ldr	r2, [r7, #20]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	69db      	ldr	r3, [r3, #28]
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	4610      	mov	r0, r2
 800d5d6:	f7fe fbcf 	bl	800bd78 <clust2sect>
 800d5da:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d109      	bne.n	800d5f6 <f_read+0x150>
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2202      	movs	r2, #2
 800d5e6:	755a      	strb	r2, [r3, #21]
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	2102      	movs	r1, #2
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fe f95b 	bl	800b8a8 <unlock_fs>
 800d5f2:	2302      	movs	r3, #2
 800d5f4:	e0c1      	b.n	800d77a <f_read+0x2d4>
			sect += csect;
 800d5f6:	69ba      	ldr	r2, [r7, #24]
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	0a5b      	lsrs	r3, r3, #9
 800d602:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d606:	2b00      	cmp	r3, #0
 800d608:	d03e      	beq.n	800d688 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d60a:	69fa      	ldr	r2, [r7, #28]
 800d60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60e:	4413      	add	r3, r2
 800d610:	697a      	ldr	r2, [r7, #20]
 800d612:	8952      	ldrh	r2, [r2, #10]
 800d614:	4293      	cmp	r3, r2
 800d616:	d905      	bls.n	800d624 <f_read+0x17e>
					cc = fs->csize - csect;
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	895b      	ldrh	r3, [r3, #10]
 800d61c:	461a      	mov	r2, r3
 800d61e:	69fb      	ldr	r3, [r7, #28]
 800d620:	1ad3      	subs	r3, r2, r3
 800d622:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	7858      	ldrb	r0, [r3, #1]
 800d628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62a:	69ba      	ldr	r2, [r7, #24]
 800d62c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d62e:	f7fd ffc7 	bl	800b5c0 <disk_read>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d009      	beq.n	800d64c <f_read+0x1a6>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2201      	movs	r2, #1
 800d63c:	755a      	strb	r2, [r3, #21]
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	2101      	movs	r1, #1
 800d642:	4618      	mov	r0, r3
 800d644:	f7fe f930 	bl	800b8a8 <unlock_fs>
 800d648:	2301      	movs	r3, #1
 800d64a:	e096      	b.n	800d77a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	7d1b      	ldrb	r3, [r3, #20]
 800d650:	b25b      	sxtb	r3, r3
 800d652:	2b00      	cmp	r3, #0
 800d654:	da14      	bge.n	800d680 <f_read+0x1da>
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6a1a      	ldr	r2, [r3, #32]
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	1ad3      	subs	r3, r2, r3
 800d65e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d660:	429a      	cmp	r2, r3
 800d662:	d90d      	bls.n	800d680 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6a1a      	ldr	r2, [r3, #32]
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	025b      	lsls	r3, r3, #9
 800d66e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d670:	18d0      	adds	r0, r2, r3
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	3330      	adds	r3, #48	; 0x30
 800d676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d67a:	4619      	mov	r1, r3
 800d67c:	f7fe f880 	bl	800b780 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d682:	025b      	lsls	r3, r3, #9
 800d684:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d686:	e05a      	b.n	800d73e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6a1b      	ldr	r3, [r3, #32]
 800d68c:	69ba      	ldr	r2, [r7, #24]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d038      	beq.n	800d704 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	7d1b      	ldrb	r3, [r3, #20]
 800d696:	b25b      	sxtb	r3, r3
 800d698:	2b00      	cmp	r3, #0
 800d69a:	da1d      	bge.n	800d6d8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	7858      	ldrb	r0, [r3, #1]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6a1a      	ldr	r2, [r3, #32]
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	f7fd ffa8 	bl	800b600 <disk_write>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d009      	beq.n	800d6ca <f_read+0x224>
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	755a      	strb	r2, [r3, #21]
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	2101      	movs	r1, #1
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fe f8f1 	bl	800b8a8 <unlock_fs>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e057      	b.n	800d77a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	7d1b      	ldrb	r3, [r3, #20]
 800d6ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6d2:	b2da      	uxtb	r2, r3
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	7858      	ldrb	r0, [r3, #1]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	69ba      	ldr	r2, [r7, #24]
 800d6e6:	f7fd ff6b 	bl	800b5c0 <disk_read>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d009      	beq.n	800d704 <f_read+0x25e>
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	755a      	strb	r2, [r3, #21]
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	2101      	movs	r1, #1
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7fe f8d4 	bl	800b8a8 <unlock_fs>
 800d700:	2301      	movs	r3, #1
 800d702:	e03a      	b.n	800d77a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	69ba      	ldr	r2, [r7, #24]
 800d708:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	699b      	ldr	r3, [r3, #24]
 800d70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d712:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d716:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d901      	bls.n	800d724 <f_read+0x27e>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	699b      	ldr	r3, [r3, #24]
 800d72e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d732:	4413      	add	r3, r2
 800d734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d736:	4619      	mov	r1, r3
 800d738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d73a:	f7fe f821 	bl	800b780 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d73e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d742:	4413      	add	r3, r2
 800d744:	627b      	str	r3, [r7, #36]	; 0x24
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	699a      	ldr	r2, [r3, #24]
 800d74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74c:	441a      	add	r2, r3
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	619a      	str	r2, [r3, #24]
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d758:	441a      	add	r2, r3
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	601a      	str	r2, [r3, #0]
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d762:	1ad3      	subs	r3, r2, r3
 800d764:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	f47f aee3 	bne.w	800d534 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	2100      	movs	r1, #0
 800d772:	4618      	mov	r0, r3
 800d774:	f7fe f898 	bl	800b8a8 <unlock_fs>
 800d778:	2300      	movs	r3, #0
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3738      	adds	r7, #56	; 0x38
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}

0800d782 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d782:	b580      	push	{r7, lr}
 800d784:	b086      	sub	sp, #24
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f107 0208 	add.w	r2, r7, #8
 800d790:	4611      	mov	r1, r2
 800d792:	4618      	mov	r0, r3
 800d794:	f7ff fc16 	bl	800cfc4 <validate>
 800d798:	4603      	mov	r3, r0
 800d79a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d79c:	7dfb      	ldrb	r3, [r7, #23]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d16d      	bne.n	800d87e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	7d1b      	ldrb	r3, [r3, #20]
 800d7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d067      	beq.n	800d87e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7d1b      	ldrb	r3, [r3, #20]
 800d7b2:	b25b      	sxtb	r3, r3
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	da1a      	bge.n	800d7ee <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	7858      	ldrb	r0, [r3, #1]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6a1a      	ldr	r2, [r3, #32]
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	f7fd ff1a 	bl	800b600 <disk_write>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d006      	beq.n	800d7e0 <f_sync+0x5e>
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	2101      	movs	r1, #1
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fe f866 	bl	800b8a8 <unlock_fs>
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e055      	b.n	800d88c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	7d1b      	ldrb	r3, [r3, #20]
 800d7e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7e8:	b2da      	uxtb	r2, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d7ee:	f7fd fc37 	bl	800b060 <get_fattime>
 800d7f2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	f7fe fa1f 	bl	800bc40 <move_window>
 800d802:	4603      	mov	r3, r0
 800d804:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d806:	7dfb      	ldrb	r3, [r7, #23]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d138      	bne.n	800d87e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d810:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	330b      	adds	r3, #11
 800d816:	781a      	ldrb	r2, [r3, #0]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	330b      	adds	r3, #11
 800d81c:	f042 0220 	orr.w	r2, r2, #32
 800d820:	b2d2      	uxtb	r2, r2
 800d822:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6818      	ldr	r0, [r3, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	689b      	ldr	r3, [r3, #8]
 800d82c:	461a      	mov	r2, r3
 800d82e:	68f9      	ldr	r1, [r7, #12]
 800d830:	f7fe ff2c 	bl	800c68c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f103 021c 	add.w	r2, r3, #28
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	4619      	mov	r1, r3
 800d840:	4610      	mov	r0, r2
 800d842:	f7fd ff71 	bl	800b728 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	3316      	adds	r3, #22
 800d84a:	6939      	ldr	r1, [r7, #16]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7fd ff6b 	bl	800b728 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	3312      	adds	r3, #18
 800d856:	2100      	movs	r1, #0
 800d858:	4618      	mov	r0, r3
 800d85a:	f7fd ff4a 	bl	800b6f2 <st_word>
					fs->wflag = 1;
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	2201      	movs	r2, #1
 800d862:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	4618      	mov	r0, r3
 800d868:	f7fe fa18 	bl	800bc9c <sync_fs>
 800d86c:	4603      	mov	r3, r0
 800d86e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	7d1b      	ldrb	r3, [r3, #20]
 800d874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d878:	b2da      	uxtb	r2, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	7dfa      	ldrb	r2, [r7, #23]
 800d882:	4611      	mov	r1, r2
 800d884:	4618      	mov	r0, r3
 800d886:	f7fe f80f 	bl	800b8a8 <unlock_fs>
 800d88a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3718      	adds	r7, #24
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f7ff ff70 	bl	800d782 <f_sync>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d8a6:	7bfb      	ldrb	r3, [r7, #15]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d11d      	bne.n	800d8e8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f107 0208 	add.w	r2, r7, #8
 800d8b2:	4611      	mov	r1, r2
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7ff fb85 	bl	800cfc4 <validate>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d8be:	7bfb      	ldrb	r3, [r7, #15]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d111      	bne.n	800d8e8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fe f915 	bl	800baf8 <dec_lock>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d102      	bne.n	800d8de <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	2100      	movs	r1, #0
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fd ffe0 	bl	800b8a8 <unlock_fs>
#endif
		}
	}
	return res;
 800d8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
	...

0800d8f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b087      	sub	sp, #28
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	4613      	mov	r3, r2
 800d900:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d902:	2301      	movs	r3, #1
 800d904:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d90a:	4b1f      	ldr	r3, [pc, #124]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d90c:	7a5b      	ldrb	r3, [r3, #9]
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	2b00      	cmp	r3, #0
 800d912:	d131      	bne.n	800d978 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d914:	4b1c      	ldr	r3, [pc, #112]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d916:	7a5b      	ldrb	r3, [r3, #9]
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	461a      	mov	r2, r3
 800d91c:	4b1a      	ldr	r3, [pc, #104]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d91e:	2100      	movs	r1, #0
 800d920:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d922:	4b19      	ldr	r3, [pc, #100]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d924:	7a5b      	ldrb	r3, [r3, #9]
 800d926:	b2db      	uxtb	r3, r3
 800d928:	4a17      	ldr	r2, [pc, #92]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4413      	add	r3, r2
 800d92e:	68fa      	ldr	r2, [r7, #12]
 800d930:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d932:	4b15      	ldr	r3, [pc, #84]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d934:	7a5b      	ldrb	r3, [r3, #9]
 800d936:	b2db      	uxtb	r3, r3
 800d938:	461a      	mov	r2, r3
 800d93a:	4b13      	ldr	r3, [pc, #76]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d93c:	4413      	add	r3, r2
 800d93e:	79fa      	ldrb	r2, [r7, #7]
 800d940:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d942:	4b11      	ldr	r3, [pc, #68]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d944:	7a5b      	ldrb	r3, [r3, #9]
 800d946:	b2db      	uxtb	r3, r3
 800d948:	1c5a      	adds	r2, r3, #1
 800d94a:	b2d1      	uxtb	r1, r2
 800d94c:	4a0e      	ldr	r2, [pc, #56]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d94e:	7251      	strb	r1, [r2, #9]
 800d950:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d952:	7dbb      	ldrb	r3, [r7, #22]
 800d954:	3330      	adds	r3, #48	; 0x30
 800d956:	b2da      	uxtb	r2, r3
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	3301      	adds	r3, #1
 800d960:	223a      	movs	r2, #58	; 0x3a
 800d962:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	3302      	adds	r3, #2
 800d968:	222f      	movs	r2, #47	; 0x2f
 800d96a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	3303      	adds	r3, #3
 800d970:	2200      	movs	r2, #0
 800d972:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d974:	2300      	movs	r3, #0
 800d976:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d978:	7dfb      	ldrb	r3, [r7, #23]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	371c      	adds	r7, #28
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop
 800d988:	200057f8 	.word	0x200057f8

0800d98c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d996:	2200      	movs	r2, #0
 800d998:	6839      	ldr	r1, [r7, #0]
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7ff ffaa 	bl	800d8f4 <FATFS_LinkDriverEx>
 800d9a0:	4603      	mov	r3, r0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3708      	adds	r7, #8
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b086      	sub	sp, #24
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	6039      	str	r1, [r7, #0]
 800d9b4:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	60fb      	str	r3, [r7, #12]
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800d9be:	f107 030c 	add.w	r3, r7, #12
 800d9c2:	2101      	movs	r1, #1
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f000 f8e9 	bl	800db9c <osSemaphoreCreate>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	bf14      	ite	ne
 800d9d8:	2301      	movne	r3, #1
 800d9da:	2300      	moveq	r3, #0
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	617b      	str	r3, [r7, #20]

    return ret;
 800d9e0:	697b      	ldr	r3, [r7, #20]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b082      	sub	sp, #8
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f988 	bl	800dd08 <osSemaphoreDelete>
#endif
    return 1;
 800d9f8:	2301      	movs	r3, #1
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b084      	sub	sp, #16
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800da0a:	2300      	movs	r3, #0
 800da0c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800da0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 f8f4 	bl	800dc00 <osSemaphoreWait>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d101      	bne.n	800da22 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800da1e:	2301      	movs	r3, #1
 800da20:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800da22:	68fb      	ldr	r3, [r7, #12]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 f931 	bl	800dc9c <osSemaphoreRelease>
#endif
}
 800da3a:	bf00      	nop
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800da42:	b480      	push	{r7}
 800da44:	b085      	sub	sp, #20
 800da46:	af00      	add	r7, sp, #0
 800da48:	4603      	mov	r3, r0
 800da4a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800da4c:	2300      	movs	r3, #0
 800da4e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800da50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da54:	2b84      	cmp	r3, #132	; 0x84
 800da56:	d005      	beq.n	800da64 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800da58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	4413      	add	r3, r2
 800da60:	3303      	adds	r3, #3
 800da62:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800da64:	68fb      	ldr	r3, [r7, #12]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr

0800da72 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800da72:	b480      	push	{r7}
 800da74:	b083      	sub	sp, #12
 800da76:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da78:	f3ef 8305 	mrs	r3, IPSR
 800da7c:	607b      	str	r3, [r7, #4]
  return(result);
 800da7e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800da80:	2b00      	cmp	r3, #0
 800da82:	bf14      	ite	ne
 800da84:	2301      	movne	r3, #1
 800da86:	2300      	moveq	r3, #0
 800da88:	b2db      	uxtb	r3, r3
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	370c      	adds	r7, #12
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr

0800da96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800da9a:	f001 fc43 	bl	800f324 <vTaskStartScheduler>
  
  return osOK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800daa8:	f002 f884 	bl	800fbb4 <xTaskGetSchedulerState>
 800daac:	4603      	mov	r3, r0
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d101      	bne.n	800dab6 <osKernelRunning+0x12>
    return 0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	e000      	b.n	800dab8 <osKernelRunning+0x14>
  else
    return 1;
 800dab6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800dab8:	4618      	mov	r0, r3
 800daba:	bd80      	pop	{r7, pc}

0800dabc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800dac0:	f7ff ffd7 	bl	800da72 <inHandlerMode>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d003      	beq.n	800dad2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800daca:	f001 fd55 	bl	800f578 <xTaskGetTickCountFromISR>
 800dace:	4603      	mov	r3, r0
 800dad0:	e002      	b.n	800dad8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800dad2:	f001 fd41 	bl	800f558 <xTaskGetTickCount>
 800dad6:	4603      	mov	r3, r0
  }
}
 800dad8:	4618      	mov	r0, r3
 800dada:	bd80      	pop	{r7, pc}

0800dadc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800dadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dade:	b089      	sub	sp, #36	; 0x24
 800dae0:	af04      	add	r7, sp, #16
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	695b      	ldr	r3, [r3, #20]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d020      	beq.n	800db30 <osThreadCreate+0x54>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	699b      	ldr	r3, [r3, #24]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d01c      	beq.n	800db30 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	685c      	ldr	r4, [r3, #4]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681d      	ldr	r5, [r3, #0]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	691e      	ldr	r6, [r3, #16]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800db08:	4618      	mov	r0, r3
 800db0a:	f7ff ff9a 	bl	800da42 <makeFreeRtosPriority>
 800db0e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	695b      	ldr	r3, [r3, #20]
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800db18:	9202      	str	r2, [sp, #8]
 800db1a:	9301      	str	r3, [sp, #4]
 800db1c:	9100      	str	r1, [sp, #0]
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	4632      	mov	r2, r6
 800db22:	4629      	mov	r1, r5
 800db24:	4620      	mov	r0, r4
 800db26:	f001 fa15 	bl	800ef54 <xTaskCreateStatic>
 800db2a:	4603      	mov	r3, r0
 800db2c:	60fb      	str	r3, [r7, #12]
 800db2e:	e01c      	b.n	800db6a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	685c      	ldr	r4, [r3, #4]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800db3c:	b29e      	uxth	r6, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800db44:	4618      	mov	r0, r3
 800db46:	f7ff ff7c 	bl	800da42 <makeFreeRtosPriority>
 800db4a:	4602      	mov	r2, r0
 800db4c:	f107 030c 	add.w	r3, r7, #12
 800db50:	9301      	str	r3, [sp, #4]
 800db52:	9200      	str	r2, [sp, #0]
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	4632      	mov	r2, r6
 800db58:	4629      	mov	r1, r5
 800db5a:	4620      	mov	r0, r4
 800db5c:	f001 fa5d 	bl	800f01a <xTaskCreate>
 800db60:	4603      	mov	r3, r0
 800db62:	2b01      	cmp	r3, #1
 800db64:	d001      	beq.n	800db6a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800db66:	2300      	movs	r3, #0
 800db68:	e000      	b.n	800db6c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800db6a:	68fb      	ldr	r3, [r7, #12]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db74 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d001      	beq.n	800db8a <osDelay+0x16>
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	e000      	b.n	800db8c <osDelay+0x18>
 800db8a:	2301      	movs	r3, #1
 800db8c:	4618      	mov	r0, r3
 800db8e:	f001 fb93 	bl	800f2b8 <vTaskDelay>
  
  return osOK;
 800db92:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800db94:	4618      	mov	r0, r3
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b086      	sub	sp, #24
 800dba0:	af02      	add	r7, sp, #8
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00f      	beq.n	800dbce <osSemaphoreCreate+0x32>
    if (count == 1) {
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d10a      	bne.n	800dbca <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	2203      	movs	r2, #3
 800dbba:	9200      	str	r2, [sp, #0]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	2001      	movs	r0, #1
 800dbc2:	f000 faaf 	bl	800e124 <xQueueGenericCreateStatic>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	e016      	b.n	800dbf8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	e014      	b.n	800dbf8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d110      	bne.n	800dbf6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800dbd4:	2203      	movs	r2, #3
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	2001      	movs	r0, #1
 800dbda:	f000 fb25 	bl	800e228 <xQueueGenericCreate>
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d005      	beq.n	800dbf2 <osSemaphoreCreate+0x56>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	2200      	movs	r2, #0
 800dbea:	2100      	movs	r1, #0
 800dbec:	68f8      	ldr	r0, [r7, #12]
 800dbee:	f000 fb7d 	bl	800e2ec <xQueueGenericSend>
      return sema;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	e000      	b.n	800dbf8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800dbf6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d101      	bne.n	800dc18 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800dc14:	2380      	movs	r3, #128	; 0x80
 800dc16:	e03a      	b.n	800dc8e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc22:	d103      	bne.n	800dc2c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800dc24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc28:	60fb      	str	r3, [r7, #12]
 800dc2a:	e009      	b.n	800dc40 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d006      	beq.n	800dc40 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d101      	bne.n	800dc40 <osSemaphoreWait+0x40>
      ticks = 1;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800dc40:	f7ff ff17 	bl	800da72 <inHandlerMode>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d017      	beq.n	800dc7a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dc4a:	f107 0308 	add.w	r3, r7, #8
 800dc4e:	461a      	mov	r2, r3
 800dc50:	2100      	movs	r1, #0
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 ff80 	bl	800eb58 <xQueueReceiveFromISR>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d001      	beq.n	800dc62 <osSemaphoreWait+0x62>
      return osErrorOS;
 800dc5e:	23ff      	movs	r3, #255	; 0xff
 800dc60:	e015      	b.n	800dc8e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d011      	beq.n	800dc8c <osSemaphoreWait+0x8c>
 800dc68:	4b0b      	ldr	r3, [pc, #44]	; (800dc98 <osSemaphoreWait+0x98>)
 800dc6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc6e:	601a      	str	r2, [r3, #0]
 800dc70:	f3bf 8f4f 	dsb	sy
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	e008      	b.n	800dc8c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800dc7a:	68f9      	ldr	r1, [r7, #12]
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 fe57 	bl	800e930 <xQueueSemaphoreTake>
 800dc82:	4603      	mov	r3, r0
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d001      	beq.n	800dc8c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800dc88:	23ff      	movs	r3, #255	; 0xff
 800dc8a:	e000      	b.n	800dc8e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	e000ed04 	.word	0xe000ed04

0800dc9c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800dca4:	2300      	movs	r3, #0
 800dca6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800dcac:	f7ff fee1 	bl	800da72 <inHandlerMode>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d016      	beq.n	800dce4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dcb6:	f107 0308 	add.w	r3, r7, #8
 800dcba:	4619      	mov	r1, r3
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fcbb 	bl	800e638 <xQueueGiveFromISR>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d001      	beq.n	800dccc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800dcc8:	23ff      	movs	r3, #255	; 0xff
 800dcca:	e017      	b.n	800dcfc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d013      	beq.n	800dcfa <osSemaphoreRelease+0x5e>
 800dcd2:	4b0c      	ldr	r3, [pc, #48]	; (800dd04 <osSemaphoreRelease+0x68>)
 800dcd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcd8:	601a      	str	r2, [r3, #0]
 800dcda:	f3bf 8f4f 	dsb	sy
 800dcde:	f3bf 8f6f 	isb	sy
 800dce2:	e00a      	b.n	800dcfa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800dce4:	2300      	movs	r3, #0
 800dce6:	2200      	movs	r2, #0
 800dce8:	2100      	movs	r1, #0
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 fafe 	bl	800e2ec <xQueueGenericSend>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d001      	beq.n	800dcfa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800dcf6:	23ff      	movs	r3, #255	; 0xff
 800dcf8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	e000ed04 	.word	0xe000ed04

0800dd08 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800dd10:	f7ff feaf 	bl	800da72 <inHandlerMode>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d001      	beq.n	800dd1e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800dd1a:	2382      	movs	r3, #130	; 0x82
 800dd1c:	e003      	b.n	800dd26 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 ffa0 	bl	800ec64 <vQueueDelete>

  return osOK; 
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800dd2e:	b590      	push	{r4, r7, lr}
 800dd30:	b085      	sub	sp, #20
 800dd32:	af02      	add	r7, sp, #8
 800dd34:	6078      	str	r0, [r7, #4]
 800dd36:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d011      	beq.n	800dd64 <osMessageCreate+0x36>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d00d      	beq.n	800dd64 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6818      	ldr	r0, [r3, #0]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6859      	ldr	r1, [r3, #4]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	689a      	ldr	r2, [r3, #8]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	2400      	movs	r4, #0
 800dd5a:	9400      	str	r4, [sp, #0]
 800dd5c:	f000 f9e2 	bl	800e124 <xQueueGenericCreateStatic>
 800dd60:	4603      	mov	r3, r0
 800dd62:	e008      	b.n	800dd76 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6818      	ldr	r0, [r3, #0]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	4619      	mov	r1, r3
 800dd70:	f000 fa5a 	bl	800e228 <xQueueGenericCreate>
 800dd74:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	370c      	adds	r7, #12
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd90      	pop	{r4, r7, pc}
	...

0800dd80 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d101      	bne.n	800dd9e <osMessagePut+0x1e>
    ticks = 1;
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800dd9e:	f7ff fe68 	bl	800da72 <inHandlerMode>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d018      	beq.n	800ddda <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800dda8:	f107 0210 	add.w	r2, r7, #16
 800ddac:	f107 0108 	add.w	r1, r7, #8
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	f000 fba0 	bl	800e4f8 <xQueueGenericSendFromISR>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d001      	beq.n	800ddc2 <osMessagePut+0x42>
      return osErrorOS;
 800ddbe:	23ff      	movs	r3, #255	; 0xff
 800ddc0:	e018      	b.n	800ddf4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d014      	beq.n	800ddf2 <osMessagePut+0x72>
 800ddc8:	4b0c      	ldr	r3, [pc, #48]	; (800ddfc <osMessagePut+0x7c>)
 800ddca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddce:	601a      	str	r2, [r3, #0]
 800ddd0:	f3bf 8f4f 	dsb	sy
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	e00b      	b.n	800ddf2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ddda:	f107 0108 	add.w	r1, r7, #8
 800ddde:	2300      	movs	r3, #0
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	68f8      	ldr	r0, [r7, #12]
 800dde4:	f000 fa82 	bl	800e2ec <xQueueGenericSend>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d001      	beq.n	800ddf2 <osMessagePut+0x72>
      return osErrorOS;
 800ddee:	23ff      	movs	r3, #255	; 0xff
 800ddf0:	e000      	b.n	800ddf4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ddf2:	2300      	movs	r3, #0
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3718      	adds	r7, #24
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	e000ed04 	.word	0xe000ed04

0800de00 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800de00:	b590      	push	{r4, r7, lr}
 800de02:	b08b      	sub	sp, #44	; 0x2c
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800de10:	2300      	movs	r3, #0
 800de12:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d10a      	bne.n	800de30 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800de1a:	2380      	movs	r3, #128	; 0x80
 800de1c:	617b      	str	r3, [r7, #20]
    return event;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	461c      	mov	r4, r3
 800de22:	f107 0314 	add.w	r3, r7, #20
 800de26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800de2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800de2e:	e054      	b.n	800deda <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800de30:	2300      	movs	r3, #0
 800de32:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800de34:	2300      	movs	r3, #0
 800de36:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de3e:	d103      	bne.n	800de48 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800de40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de44:	627b      	str	r3, [r7, #36]	; 0x24
 800de46:	e009      	b.n	800de5c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d006      	beq.n	800de5c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800de52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de54:	2b00      	cmp	r3, #0
 800de56:	d101      	bne.n	800de5c <osMessageGet+0x5c>
      ticks = 1;
 800de58:	2301      	movs	r3, #1
 800de5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800de5c:	f7ff fe09 	bl	800da72 <inHandlerMode>
 800de60:	4603      	mov	r3, r0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d01c      	beq.n	800dea0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800de66:	f107 0220 	add.w	r2, r7, #32
 800de6a:	f107 0314 	add.w	r3, r7, #20
 800de6e:	3304      	adds	r3, #4
 800de70:	4619      	mov	r1, r3
 800de72:	68b8      	ldr	r0, [r7, #8]
 800de74:	f000 fe70 	bl	800eb58 <xQueueReceiveFromISR>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d102      	bne.n	800de84 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800de7e:	2310      	movs	r3, #16
 800de80:	617b      	str	r3, [r7, #20]
 800de82:	e001      	b.n	800de88 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800de84:	2300      	movs	r3, #0
 800de86:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800de88:	6a3b      	ldr	r3, [r7, #32]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d01d      	beq.n	800deca <osMessageGet+0xca>
 800de8e:	4b15      	ldr	r3, [pc, #84]	; (800dee4 <osMessageGet+0xe4>)
 800de90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de94:	601a      	str	r2, [r3, #0]
 800de96:	f3bf 8f4f 	dsb	sy
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	e014      	b.n	800deca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800dea0:	f107 0314 	add.w	r3, r7, #20
 800dea4:	3304      	adds	r3, #4
 800dea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dea8:	4619      	mov	r1, r3
 800deaa:	68b8      	ldr	r0, [r7, #8]
 800deac:	f000 fc5a 	bl	800e764 <xQueueReceive>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d102      	bne.n	800debc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800deb6:	2310      	movs	r3, #16
 800deb8:	617b      	str	r3, [r7, #20]
 800deba:	e006      	b.n	800deca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800debc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d101      	bne.n	800dec6 <osMessageGet+0xc6>
 800dec2:	2300      	movs	r3, #0
 800dec4:	e000      	b.n	800dec8 <osMessageGet+0xc8>
 800dec6:	2340      	movs	r3, #64	; 0x40
 800dec8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	461c      	mov	r4, r3
 800dece:	f107 0314 	add.w	r3, r7, #20
 800ded2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ded6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	372c      	adds	r7, #44	; 0x2c
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd90      	pop	{r4, r7, pc}
 800dee2:	bf00      	nop
 800dee4:	e000ed04 	.word	0xe000ed04

0800dee8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f103 0208 	add.w	r2, r3, #8
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f103 0208 	add.w	r2, r3, #8
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f103 0208 	add.w	r2, r3, #8
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2200      	movs	r2, #0
 800df1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800df1c:	bf00      	nop
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2200      	movs	r2, #0
 800df34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df36:	bf00      	nop
 800df38:	370c      	adds	r7, #12
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr

0800df42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df42:	b480      	push	{r7}
 800df44:	b085      	sub	sp, #20
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
 800df4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	689a      	ldr	r2, [r3, #8]
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	689b      	ldr	r3, [r3, #8]
 800df64:	683a      	ldr	r2, [r7, #0]
 800df66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	683a      	ldr	r2, [r7, #0]
 800df6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	1c5a      	adds	r2, r3, #1
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	601a      	str	r2, [r3, #0]
}
 800df7e:	bf00      	nop
 800df80:	3714      	adds	r7, #20
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr

0800df8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df8a:	b480      	push	{r7}
 800df8c:	b085      	sub	sp, #20
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
 800df92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfa0:	d103      	bne.n	800dfaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	691b      	ldr	r3, [r3, #16]
 800dfa6:	60fb      	str	r3, [r7, #12]
 800dfa8:	e00c      	b.n	800dfc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	3308      	adds	r3, #8
 800dfae:	60fb      	str	r3, [r7, #12]
 800dfb0:	e002      	b.n	800dfb8 <vListInsert+0x2e>
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	60fb      	str	r3, [r7, #12]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d2f6      	bcs.n	800dfb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	685a      	ldr	r2, [r3, #4]
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	683a      	ldr	r2, [r7, #0]
 800dfd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	683a      	ldr	r2, [r7, #0]
 800dfde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	601a      	str	r2, [r3, #0]
}
 800dff0:	bf00      	nop
 800dff2:	3714      	adds	r7, #20
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	691b      	ldr	r3, [r3, #16]
 800e008:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	6892      	ldr	r2, [r2, #8]
 800e012:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	6852      	ldr	r2, [r2, #4]
 800e01c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	429a      	cmp	r2, r3
 800e026:	d103      	bne.n	800e030 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	689a      	ldr	r2, [r3, #8]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2200      	movs	r2, #0
 800e034:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	1e5a      	subs	r2, r3, #1
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
}
 800e044:	4618      	mov	r0, r3
 800e046:	3714      	adds	r7, #20
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr

0800e050 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10c      	bne.n	800e07e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e068:	b672      	cpsid	i
 800e06a:	f383 8811 	msr	BASEPRI, r3
 800e06e:	f3bf 8f6f 	isb	sy
 800e072:	f3bf 8f4f 	dsb	sy
 800e076:	b662      	cpsie	i
 800e078:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e07a:	bf00      	nop
 800e07c:	e7fe      	b.n	800e07c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e07e:	f002 f8e5 	bl	801024c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e08a:	68f9      	ldr	r1, [r7, #12]
 800e08c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e08e:	fb01 f303 	mul.w	r3, r1, r3
 800e092:	441a      	add	r2, r3
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2200      	movs	r2, #0
 800e09c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	68f9      	ldr	r1, [r7, #12]
 800e0b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e0b4:	fb01 f303 	mul.w	r3, r1, r3
 800e0b8:	441a      	add	r2, r3
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	22ff      	movs	r2, #255	; 0xff
 800e0c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	22ff      	movs	r2, #255	; 0xff
 800e0ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d114      	bne.n	800e0fe <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	691b      	ldr	r3, [r3, #16]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d01a      	beq.n	800e112 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	3310      	adds	r3, #16
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f001 fb9f 	bl	800f824 <xTaskRemoveFromEventList>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d012      	beq.n	800e112 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e0ec:	4b0c      	ldr	r3, [pc, #48]	; (800e120 <xQueueGenericReset+0xd0>)
 800e0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0f2:	601a      	str	r2, [r3, #0]
 800e0f4:	f3bf 8f4f 	dsb	sy
 800e0f8:	f3bf 8f6f 	isb	sy
 800e0fc:	e009      	b.n	800e112 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	3310      	adds	r3, #16
 800e102:	4618      	mov	r0, r3
 800e104:	f7ff fef0 	bl	800dee8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	3324      	adds	r3, #36	; 0x24
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7ff feeb 	bl	800dee8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e112:	f002 f8cf 	bl	80102b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e116:	2301      	movs	r3, #1
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3710      	adds	r7, #16
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	e000ed04 	.word	0xe000ed04

0800e124 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e124:	b580      	push	{r7, lr}
 800e126:	b08e      	sub	sp, #56	; 0x38
 800e128:	af02      	add	r7, sp, #8
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	607a      	str	r2, [r7, #4]
 800e130:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10c      	bne.n	800e152 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13c:	b672      	cpsid	i
 800e13e:	f383 8811 	msr	BASEPRI, r3
 800e142:	f3bf 8f6f 	isb	sy
 800e146:	f3bf 8f4f 	dsb	sy
 800e14a:	b662      	cpsie	i
 800e14c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e14e:	bf00      	nop
 800e150:	e7fe      	b.n	800e150 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d10c      	bne.n	800e172 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15c:	b672      	cpsid	i
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	b662      	cpsie	i
 800e16c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e16e:	bf00      	nop
 800e170:	e7fe      	b.n	800e170 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d002      	beq.n	800e17e <xQueueGenericCreateStatic+0x5a>
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d001      	beq.n	800e182 <xQueueGenericCreateStatic+0x5e>
 800e17e:	2301      	movs	r3, #1
 800e180:	e000      	b.n	800e184 <xQueueGenericCreateStatic+0x60>
 800e182:	2300      	movs	r3, #0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d10c      	bne.n	800e1a2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e18c:	b672      	cpsid	i
 800e18e:	f383 8811 	msr	BASEPRI, r3
 800e192:	f3bf 8f6f 	isb	sy
 800e196:	f3bf 8f4f 	dsb	sy
 800e19a:	b662      	cpsie	i
 800e19c:	623b      	str	r3, [r7, #32]
}
 800e19e:	bf00      	nop
 800e1a0:	e7fe      	b.n	800e1a0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d102      	bne.n	800e1ae <xQueueGenericCreateStatic+0x8a>
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d101      	bne.n	800e1b2 <xQueueGenericCreateStatic+0x8e>
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	e000      	b.n	800e1b4 <xQueueGenericCreateStatic+0x90>
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d10c      	bne.n	800e1d2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1bc:	b672      	cpsid	i
 800e1be:	f383 8811 	msr	BASEPRI, r3
 800e1c2:	f3bf 8f6f 	isb	sy
 800e1c6:	f3bf 8f4f 	dsb	sy
 800e1ca:	b662      	cpsie	i
 800e1cc:	61fb      	str	r3, [r7, #28]
}
 800e1ce:	bf00      	nop
 800e1d0:	e7fe      	b.n	800e1d0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e1d2:	2348      	movs	r3, #72	; 0x48
 800e1d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	2b48      	cmp	r3, #72	; 0x48
 800e1da:	d00c      	beq.n	800e1f6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e0:	b672      	cpsid	i
 800e1e2:	f383 8811 	msr	BASEPRI, r3
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	b662      	cpsie	i
 800e1f0:	61bb      	str	r3, [r7, #24]
}
 800e1f2:	bf00      	nop
 800e1f4:	e7fe      	b.n	800e1f4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e1f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00d      	beq.n	800e21e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e204:	2201      	movs	r2, #1
 800e206:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e20a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e210:	9300      	str	r3, [sp, #0]
 800e212:	4613      	mov	r3, r2
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	68b9      	ldr	r1, [r7, #8]
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f000 f847 	bl	800e2ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e220:	4618      	mov	r0, r3
 800e222:	3730      	adds	r7, #48	; 0x30
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b08a      	sub	sp, #40	; 0x28
 800e22c:	af02      	add	r7, sp, #8
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	4613      	mov	r3, r2
 800e234:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d10c      	bne.n	800e256 <xQueueGenericCreate+0x2e>
	__asm volatile
 800e23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e240:	b672      	cpsid	i
 800e242:	f383 8811 	msr	BASEPRI, r3
 800e246:	f3bf 8f6f 	isb	sy
 800e24a:	f3bf 8f4f 	dsb	sy
 800e24e:	b662      	cpsie	i
 800e250:	613b      	str	r3, [r7, #16]
}
 800e252:	bf00      	nop
 800e254:	e7fe      	b.n	800e254 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d102      	bne.n	800e262 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e25c:	2300      	movs	r3, #0
 800e25e:	61fb      	str	r3, [r7, #28]
 800e260:	e004      	b.n	800e26c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	68ba      	ldr	r2, [r7, #8]
 800e266:	fb02 f303 	mul.w	r3, r2, r3
 800e26a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	3348      	adds	r3, #72	; 0x48
 800e270:	4618      	mov	r0, r3
 800e272:	f002 f917 	bl	80104a4 <pvPortMalloc>
 800e276:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d011      	beq.n	800e2a2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	3348      	adds	r3, #72	; 0x48
 800e286:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e288:	69bb      	ldr	r3, [r7, #24]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e290:	79fa      	ldrb	r2, [r7, #7]
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	4613      	mov	r3, r2
 800e298:	697a      	ldr	r2, [r7, #20]
 800e29a:	68b9      	ldr	r1, [r7, #8]
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	f000 f805 	bl	800e2ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e2a2:	69bb      	ldr	r3, [r7, #24]
	}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3720      	adds	r7, #32
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b084      	sub	sp, #16
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	60b9      	str	r1, [r7, #8]
 800e2b6:	607a      	str	r2, [r7, #4]
 800e2b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d103      	bne.n	800e2c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	69ba      	ldr	r2, [r7, #24]
 800e2c4:	601a      	str	r2, [r3, #0]
 800e2c6:	e002      	b.n	800e2ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	68ba      	ldr	r2, [r7, #8]
 800e2d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e2da:	2101      	movs	r1, #1
 800e2dc:	69b8      	ldr	r0, [r7, #24]
 800e2de:	f7ff feb7 	bl	800e050 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e2e2:	bf00      	nop
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
	...

0800e2ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b08e      	sub	sp, #56	; 0x38
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	607a      	str	r2, [r7, #4]
 800e2f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e304:	2b00      	cmp	r3, #0
 800e306:	d10c      	bne.n	800e322 <xQueueGenericSend+0x36>
	__asm volatile
 800e308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30c:	b672      	cpsid	i
 800e30e:	f383 8811 	msr	BASEPRI, r3
 800e312:	f3bf 8f6f 	isb	sy
 800e316:	f3bf 8f4f 	dsb	sy
 800e31a:	b662      	cpsie	i
 800e31c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e31e:	bf00      	nop
 800e320:	e7fe      	b.n	800e320 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d103      	bne.n	800e330 <xQueueGenericSend+0x44>
 800e328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d101      	bne.n	800e334 <xQueueGenericSend+0x48>
 800e330:	2301      	movs	r3, #1
 800e332:	e000      	b.n	800e336 <xQueueGenericSend+0x4a>
 800e334:	2300      	movs	r3, #0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d10c      	bne.n	800e354 <xQueueGenericSend+0x68>
	__asm volatile
 800e33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33e:	b672      	cpsid	i
 800e340:	f383 8811 	msr	BASEPRI, r3
 800e344:	f3bf 8f6f 	isb	sy
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	b662      	cpsie	i
 800e34e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e350:	bf00      	nop
 800e352:	e7fe      	b.n	800e352 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	2b02      	cmp	r3, #2
 800e358:	d103      	bne.n	800e362 <xQueueGenericSend+0x76>
 800e35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d101      	bne.n	800e366 <xQueueGenericSend+0x7a>
 800e362:	2301      	movs	r3, #1
 800e364:	e000      	b.n	800e368 <xQueueGenericSend+0x7c>
 800e366:	2300      	movs	r3, #0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d10c      	bne.n	800e386 <xQueueGenericSend+0x9a>
	__asm volatile
 800e36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e370:	b672      	cpsid	i
 800e372:	f383 8811 	msr	BASEPRI, r3
 800e376:	f3bf 8f6f 	isb	sy
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	b662      	cpsie	i
 800e380:	623b      	str	r3, [r7, #32]
}
 800e382:	bf00      	nop
 800e384:	e7fe      	b.n	800e384 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e386:	f001 fc15 	bl	800fbb4 <xTaskGetSchedulerState>
 800e38a:	4603      	mov	r3, r0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d102      	bne.n	800e396 <xQueueGenericSend+0xaa>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d101      	bne.n	800e39a <xQueueGenericSend+0xae>
 800e396:	2301      	movs	r3, #1
 800e398:	e000      	b.n	800e39c <xQueueGenericSend+0xb0>
 800e39a:	2300      	movs	r3, #0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d10c      	bne.n	800e3ba <xQueueGenericSend+0xce>
	__asm volatile
 800e3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a4:	b672      	cpsid	i
 800e3a6:	f383 8811 	msr	BASEPRI, r3
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	b662      	cpsie	i
 800e3b4:	61fb      	str	r3, [r7, #28]
}
 800e3b6:	bf00      	nop
 800e3b8:	e7fe      	b.n	800e3b8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e3ba:	f001 ff47 	bl	801024c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d302      	bcc.n	800e3d0 <xQueueGenericSend+0xe4>
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	2b02      	cmp	r3, #2
 800e3ce:	d129      	bne.n	800e424 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e3d0:	683a      	ldr	r2, [r7, #0]
 800e3d2:	68b9      	ldr	r1, [r7, #8]
 800e3d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3d6:	f000 fc82 	bl	800ecde <prvCopyDataToQueue>
 800e3da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d010      	beq.n	800e406 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e6:	3324      	adds	r3, #36	; 0x24
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f001 fa1b 	bl	800f824 <xTaskRemoveFromEventList>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d013      	beq.n	800e41c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e3f4:	4b3f      	ldr	r3, [pc, #252]	; (800e4f4 <xQueueGenericSend+0x208>)
 800e3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3fa:	601a      	str	r2, [r3, #0]
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	f3bf 8f6f 	isb	sy
 800e404:	e00a      	b.n	800e41c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d007      	beq.n	800e41c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e40c:	4b39      	ldr	r3, [pc, #228]	; (800e4f4 <xQueueGenericSend+0x208>)
 800e40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e412:	601a      	str	r2, [r3, #0]
 800e414:	f3bf 8f4f 	dsb	sy
 800e418:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e41c:	f001 ff4a 	bl	80102b4 <vPortExitCritical>
				return pdPASS;
 800e420:	2301      	movs	r3, #1
 800e422:	e063      	b.n	800e4ec <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d103      	bne.n	800e432 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e42a:	f001 ff43 	bl	80102b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e42e:	2300      	movs	r3, #0
 800e430:	e05c      	b.n	800e4ec <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e434:	2b00      	cmp	r3, #0
 800e436:	d106      	bne.n	800e446 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e438:	f107 0314 	add.w	r3, r7, #20
 800e43c:	4618      	mov	r0, r3
 800e43e:	f001 fa55 	bl	800f8ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e442:	2301      	movs	r3, #1
 800e444:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e446:	f001 ff35 	bl	80102b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e44a:	f000 ffd9 	bl	800f400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e44e:	f001 fefd 	bl	801024c <vPortEnterCritical>
 800e452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e458:	b25b      	sxtb	r3, r3
 800e45a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e45e:	d103      	bne.n	800e468 <xQueueGenericSend+0x17c>
 800e460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e462:	2200      	movs	r2, #0
 800e464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e46e:	b25b      	sxtb	r3, r3
 800e470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e474:	d103      	bne.n	800e47e <xQueueGenericSend+0x192>
 800e476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e478:	2200      	movs	r2, #0
 800e47a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e47e:	f001 ff19 	bl	80102b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e482:	1d3a      	adds	r2, r7, #4
 800e484:	f107 0314 	add.w	r3, r7, #20
 800e488:	4611      	mov	r1, r2
 800e48a:	4618      	mov	r0, r3
 800e48c:	f001 fa44 	bl	800f918 <xTaskCheckForTimeOut>
 800e490:	4603      	mov	r3, r0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d124      	bne.n	800e4e0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e498:	f000 fd19 	bl	800eece <prvIsQueueFull>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d018      	beq.n	800e4d4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a4:	3310      	adds	r3, #16
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f001 f994 	bl	800f7d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4b2:	f000 fca4 	bl	800edfe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e4b6:	f000 ffb1 	bl	800f41c <xTaskResumeAll>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f47f af7c 	bne.w	800e3ba <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e4c2:	4b0c      	ldr	r3, [pc, #48]	; (800e4f4 <xQueueGenericSend+0x208>)
 800e4c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4c8:	601a      	str	r2, [r3, #0]
 800e4ca:	f3bf 8f4f 	dsb	sy
 800e4ce:	f3bf 8f6f 	isb	sy
 800e4d2:	e772      	b.n	800e3ba <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e4d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4d6:	f000 fc92 	bl	800edfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e4da:	f000 ff9f 	bl	800f41c <xTaskResumeAll>
 800e4de:	e76c      	b.n	800e3ba <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e4e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4e2:	f000 fc8c 	bl	800edfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e4e6:	f000 ff99 	bl	800f41c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e4ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3738      	adds	r7, #56	; 0x38
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	e000ed04 	.word	0xe000ed04

0800e4f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b08e      	sub	sp, #56	; 0x38
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	60b9      	str	r1, [r7, #8]
 800e502:	607a      	str	r2, [r7, #4]
 800e504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d10c      	bne.n	800e52a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e514:	b672      	cpsid	i
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	b662      	cpsie	i
 800e524:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e526:	bf00      	nop
 800e528:	e7fe      	b.n	800e528 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d103      	bne.n	800e538 <xQueueGenericSendFromISR+0x40>
 800e530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e534:	2b00      	cmp	r3, #0
 800e536:	d101      	bne.n	800e53c <xQueueGenericSendFromISR+0x44>
 800e538:	2301      	movs	r3, #1
 800e53a:	e000      	b.n	800e53e <xQueueGenericSendFromISR+0x46>
 800e53c:	2300      	movs	r3, #0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d10c      	bne.n	800e55c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e546:	b672      	cpsid	i
 800e548:	f383 8811 	msr	BASEPRI, r3
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	f3bf 8f4f 	dsb	sy
 800e554:	b662      	cpsie	i
 800e556:	623b      	str	r3, [r7, #32]
}
 800e558:	bf00      	nop
 800e55a:	e7fe      	b.n	800e55a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	2b02      	cmp	r3, #2
 800e560:	d103      	bne.n	800e56a <xQueueGenericSendFromISR+0x72>
 800e562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e566:	2b01      	cmp	r3, #1
 800e568:	d101      	bne.n	800e56e <xQueueGenericSendFromISR+0x76>
 800e56a:	2301      	movs	r3, #1
 800e56c:	e000      	b.n	800e570 <xQueueGenericSendFromISR+0x78>
 800e56e:	2300      	movs	r3, #0
 800e570:	2b00      	cmp	r3, #0
 800e572:	d10c      	bne.n	800e58e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e578:	b672      	cpsid	i
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	b662      	cpsie	i
 800e588:	61fb      	str	r3, [r7, #28]
}
 800e58a:	bf00      	nop
 800e58c:	e7fe      	b.n	800e58c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e58e:	f001 ff45 	bl	801041c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e592:	f3ef 8211 	mrs	r2, BASEPRI
 800e596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59a:	b672      	cpsid	i
 800e59c:	f383 8811 	msr	BASEPRI, r3
 800e5a0:	f3bf 8f6f 	isb	sy
 800e5a4:	f3bf 8f4f 	dsb	sy
 800e5a8:	b662      	cpsie	i
 800e5aa:	61ba      	str	r2, [r7, #24]
 800e5ac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e5ae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d302      	bcc.n	800e5c4 <xQueueGenericSendFromISR+0xcc>
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	2b02      	cmp	r3, #2
 800e5c2:	d12c      	bne.n	800e61e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e5ce:	683a      	ldr	r2, [r7, #0]
 800e5d0:	68b9      	ldr	r1, [r7, #8]
 800e5d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5d4:	f000 fb83 	bl	800ecde <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e5d8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e5dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5e0:	d112      	bne.n	800e608 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d016      	beq.n	800e618 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ec:	3324      	adds	r3, #36	; 0x24
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f001 f918 	bl	800f824 <xTaskRemoveFromEventList>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00e      	beq.n	800e618 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00b      	beq.n	800e618 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2201      	movs	r2, #1
 800e604:	601a      	str	r2, [r3, #0]
 800e606:	e007      	b.n	800e618 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e608:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e60c:	3301      	adds	r3, #1
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	b25a      	sxtb	r2, r3
 800e612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e618:	2301      	movs	r3, #1
 800e61a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e61c:	e001      	b.n	800e622 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e61e:	2300      	movs	r3, #0
 800e620:	637b      	str	r3, [r7, #52]	; 0x34
 800e622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e624:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e62c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e630:	4618      	mov	r0, r3
 800e632:	3738      	adds	r7, #56	; 0x38
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b08e      	sub	sp, #56	; 0x38
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d10c      	bne.n	800e666 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800e64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e650:	b672      	cpsid	i
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	b662      	cpsie	i
 800e660:	623b      	str	r3, [r7, #32]
}
 800e662:	bf00      	nop
 800e664:	e7fe      	b.n	800e664 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d00c      	beq.n	800e688 <xQueueGiveFromISR+0x50>
	__asm volatile
 800e66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e672:	b672      	cpsid	i
 800e674:	f383 8811 	msr	BASEPRI, r3
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	f3bf 8f4f 	dsb	sy
 800e680:	b662      	cpsie	i
 800e682:	61fb      	str	r3, [r7, #28]
}
 800e684:	bf00      	nop
 800e686:	e7fe      	b.n	800e686 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d103      	bne.n	800e698 <xQueueGiveFromISR+0x60>
 800e690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e692:	689b      	ldr	r3, [r3, #8]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d101      	bne.n	800e69c <xQueueGiveFromISR+0x64>
 800e698:	2301      	movs	r3, #1
 800e69a:	e000      	b.n	800e69e <xQueueGiveFromISR+0x66>
 800e69c:	2300      	movs	r3, #0
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d10c      	bne.n	800e6bc <xQueueGiveFromISR+0x84>
	__asm volatile
 800e6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a6:	b672      	cpsid	i
 800e6a8:	f383 8811 	msr	BASEPRI, r3
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f3bf 8f4f 	dsb	sy
 800e6b4:	b662      	cpsie	i
 800e6b6:	61bb      	str	r3, [r7, #24]
}
 800e6b8:	bf00      	nop
 800e6ba:	e7fe      	b.n	800e6ba <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6bc:	f001 feae 	bl	801041c <vPortValidateInterruptPriority>
	__asm volatile
 800e6c0:	f3ef 8211 	mrs	r2, BASEPRI
 800e6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c8:	b672      	cpsid	i
 800e6ca:	f383 8811 	msr	BASEPRI, r3
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	f3bf 8f4f 	dsb	sy
 800e6d6:	b662      	cpsie	i
 800e6d8:	617a      	str	r2, [r7, #20]
 800e6da:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e6dc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6de:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6e4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d22b      	bcs.n	800e748 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fc:	1c5a      	adds	r2, r3, #1
 800e6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e700:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e702:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e70a:	d112      	bne.n	800e732 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e710:	2b00      	cmp	r3, #0
 800e712:	d016      	beq.n	800e742 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e716:	3324      	adds	r3, #36	; 0x24
 800e718:	4618      	mov	r0, r3
 800e71a:	f001 f883 	bl	800f824 <xTaskRemoveFromEventList>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00e      	beq.n	800e742 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d00b      	beq.n	800e742 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	2201      	movs	r2, #1
 800e72e:	601a      	str	r2, [r3, #0]
 800e730:	e007      	b.n	800e742 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e736:	3301      	adds	r3, #1
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	b25a      	sxtb	r2, r3
 800e73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e742:	2301      	movs	r3, #1
 800e744:	637b      	str	r3, [r7, #52]	; 0x34
 800e746:	e001      	b.n	800e74c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e748:	2300      	movs	r3, #0
 800e74a:	637b      	str	r3, [r7, #52]	; 0x34
 800e74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f383 8811 	msr	BASEPRI, r3
}
 800e756:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3738      	adds	r7, #56	; 0x38
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
	...

0800e764 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b08c      	sub	sp, #48	; 0x30
 800e768:	af00      	add	r7, sp, #0
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e770:	2300      	movs	r3, #0
 800e772:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d10c      	bne.n	800e798 <xQueueReceive+0x34>
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e782:	b672      	cpsid	i
 800e784:	f383 8811 	msr	BASEPRI, r3
 800e788:	f3bf 8f6f 	isb	sy
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	b662      	cpsie	i
 800e792:	623b      	str	r3, [r7, #32]
}
 800e794:	bf00      	nop
 800e796:	e7fe      	b.n	800e796 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d103      	bne.n	800e7a6 <xQueueReceive+0x42>
 800e79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d101      	bne.n	800e7aa <xQueueReceive+0x46>
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	e000      	b.n	800e7ac <xQueueReceive+0x48>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d10c      	bne.n	800e7ca <xQueueReceive+0x66>
	__asm volatile
 800e7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b4:	b672      	cpsid	i
 800e7b6:	f383 8811 	msr	BASEPRI, r3
 800e7ba:	f3bf 8f6f 	isb	sy
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	b662      	cpsie	i
 800e7c4:	61fb      	str	r3, [r7, #28]
}
 800e7c6:	bf00      	nop
 800e7c8:	e7fe      	b.n	800e7c8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e7ca:	f001 f9f3 	bl	800fbb4 <xTaskGetSchedulerState>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d102      	bne.n	800e7da <xQueueReceive+0x76>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d101      	bne.n	800e7de <xQueueReceive+0x7a>
 800e7da:	2301      	movs	r3, #1
 800e7dc:	e000      	b.n	800e7e0 <xQueueReceive+0x7c>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10c      	bne.n	800e7fe <xQueueReceive+0x9a>
	__asm volatile
 800e7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e8:	b672      	cpsid	i
 800e7ea:	f383 8811 	msr	BASEPRI, r3
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	b662      	cpsie	i
 800e7f8:	61bb      	str	r3, [r7, #24]
}
 800e7fa:	bf00      	nop
 800e7fc:	e7fe      	b.n	800e7fc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e7fe:	f001 fd25 	bl	801024c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e806:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d01f      	beq.n	800e84e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e80e:	68b9      	ldr	r1, [r7, #8]
 800e810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e812:	f000 face 	bl	800edb2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e818:	1e5a      	subs	r2, r3, #1
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	691b      	ldr	r3, [r3, #16]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00f      	beq.n	800e846 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e828:	3310      	adds	r3, #16
 800e82a:	4618      	mov	r0, r3
 800e82c:	f000 fffa 	bl	800f824 <xTaskRemoveFromEventList>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d007      	beq.n	800e846 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e836:	4b3d      	ldr	r3, [pc, #244]	; (800e92c <xQueueReceive+0x1c8>)
 800e838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e83c:	601a      	str	r2, [r3, #0]
 800e83e:	f3bf 8f4f 	dsb	sy
 800e842:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e846:	f001 fd35 	bl	80102b4 <vPortExitCritical>
				return pdPASS;
 800e84a:	2301      	movs	r3, #1
 800e84c:	e069      	b.n	800e922 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d103      	bne.n	800e85c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e854:	f001 fd2e 	bl	80102b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e858:	2300      	movs	r3, #0
 800e85a:	e062      	b.n	800e922 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d106      	bne.n	800e870 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e862:	f107 0310 	add.w	r3, r7, #16
 800e866:	4618      	mov	r0, r3
 800e868:	f001 f840 	bl	800f8ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e86c:	2301      	movs	r3, #1
 800e86e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e870:	f001 fd20 	bl	80102b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e874:	f000 fdc4 	bl	800f400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e878:	f001 fce8 	bl	801024c <vPortEnterCritical>
 800e87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e882:	b25b      	sxtb	r3, r3
 800e884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e888:	d103      	bne.n	800e892 <xQueueReceive+0x12e>
 800e88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88c:	2200      	movs	r2, #0
 800e88e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e898:	b25b      	sxtb	r3, r3
 800e89a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e89e:	d103      	bne.n	800e8a8 <xQueueReceive+0x144>
 800e8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8a8:	f001 fd04 	bl	80102b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e8ac:	1d3a      	adds	r2, r7, #4
 800e8ae:	f107 0310 	add.w	r3, r7, #16
 800e8b2:	4611      	mov	r1, r2
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f001 f82f 	bl	800f918 <xTaskCheckForTimeOut>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d123      	bne.n	800e908 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e8c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8c2:	f000 faee 	bl	800eea2 <prvIsQueueEmpty>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d017      	beq.n	800e8fc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ce:	3324      	adds	r3, #36	; 0x24
 800e8d0:	687a      	ldr	r2, [r7, #4]
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f000 ff7f 	bl	800f7d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e8da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8dc:	f000 fa8f 	bl	800edfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e8e0:	f000 fd9c 	bl	800f41c <xTaskResumeAll>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d189      	bne.n	800e7fe <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800e8ea:	4b10      	ldr	r3, [pc, #64]	; (800e92c <xQueueReceive+0x1c8>)
 800e8ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8f0:	601a      	str	r2, [r3, #0]
 800e8f2:	f3bf 8f4f 	dsb	sy
 800e8f6:	f3bf 8f6f 	isb	sy
 800e8fa:	e780      	b.n	800e7fe <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e8fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8fe:	f000 fa7e 	bl	800edfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e902:	f000 fd8b 	bl	800f41c <xTaskResumeAll>
 800e906:	e77a      	b.n	800e7fe <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e90a:	f000 fa78 	bl	800edfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e90e:	f000 fd85 	bl	800f41c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e914:	f000 fac5 	bl	800eea2 <prvIsQueueEmpty>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f43f af6f 	beq.w	800e7fe <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e920:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e922:	4618      	mov	r0, r3
 800e924:	3730      	adds	r7, #48	; 0x30
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	e000ed04 	.word	0xe000ed04

0800e930 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b08e      	sub	sp, #56	; 0x38
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e93a:	2300      	movs	r3, #0
 800e93c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e942:	2300      	movs	r3, #0
 800e944:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d10c      	bne.n	800e966 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800e94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e950:	b672      	cpsid	i
 800e952:	f383 8811 	msr	BASEPRI, r3
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	f3bf 8f4f 	dsb	sy
 800e95e:	b662      	cpsie	i
 800e960:	623b      	str	r3, [r7, #32]
}
 800e962:	bf00      	nop
 800e964:	e7fe      	b.n	800e964 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d00c      	beq.n	800e988 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800e96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e972:	b672      	cpsid	i
 800e974:	f383 8811 	msr	BASEPRI, r3
 800e978:	f3bf 8f6f 	isb	sy
 800e97c:	f3bf 8f4f 	dsb	sy
 800e980:	b662      	cpsie	i
 800e982:	61fb      	str	r3, [r7, #28]
}
 800e984:	bf00      	nop
 800e986:	e7fe      	b.n	800e986 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e988:	f001 f914 	bl	800fbb4 <xTaskGetSchedulerState>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d102      	bne.n	800e998 <xQueueSemaphoreTake+0x68>
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d101      	bne.n	800e99c <xQueueSemaphoreTake+0x6c>
 800e998:	2301      	movs	r3, #1
 800e99a:	e000      	b.n	800e99e <xQueueSemaphoreTake+0x6e>
 800e99c:	2300      	movs	r3, #0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d10c      	bne.n	800e9bc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800e9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a6:	b672      	cpsid	i
 800e9a8:	f383 8811 	msr	BASEPRI, r3
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	b662      	cpsie	i
 800e9b6:	61bb      	str	r3, [r7, #24]
}
 800e9b8:	bf00      	nop
 800e9ba:	e7fe      	b.n	800e9ba <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e9bc:	f001 fc46 	bl	801024c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d024      	beq.n	800ea16 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ce:	1e5a      	subs	r2, r3, #1
 800e9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d104      	bne.n	800e9e6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e9dc:	f001 fab0 	bl	800ff40 <pvTaskIncrementMutexHeldCount>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e8:	691b      	ldr	r3, [r3, #16]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00f      	beq.n	800ea0e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f0:	3310      	adds	r3, #16
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f000 ff16 	bl	800f824 <xTaskRemoveFromEventList>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d007      	beq.n	800ea0e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e9fe:	4b55      	ldr	r3, [pc, #340]	; (800eb54 <xQueueSemaphoreTake+0x224>)
 800ea00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea04:	601a      	str	r2, [r3, #0]
 800ea06:	f3bf 8f4f 	dsb	sy
 800ea0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ea0e:	f001 fc51 	bl	80102b4 <vPortExitCritical>
				return pdPASS;
 800ea12:	2301      	movs	r3, #1
 800ea14:	e099      	b.n	800eb4a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d113      	bne.n	800ea44 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ea1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00c      	beq.n	800ea3c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800ea22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea26:	b672      	cpsid	i
 800ea28:	f383 8811 	msr	BASEPRI, r3
 800ea2c:	f3bf 8f6f 	isb	sy
 800ea30:	f3bf 8f4f 	dsb	sy
 800ea34:	b662      	cpsie	i
 800ea36:	617b      	str	r3, [r7, #20]
}
 800ea38:	bf00      	nop
 800ea3a:	e7fe      	b.n	800ea3a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ea3c:	f001 fc3a 	bl	80102b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ea40:	2300      	movs	r3, #0
 800ea42:	e082      	b.n	800eb4a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d106      	bne.n	800ea58 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea4a:	f107 030c 	add.w	r3, r7, #12
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f000 ff4c 	bl	800f8ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea54:	2301      	movs	r3, #1
 800ea56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea58:	f001 fc2c 	bl	80102b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea5c:	f000 fcd0 	bl	800f400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea60:	f001 fbf4 	bl	801024c <vPortEnterCritical>
 800ea64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea6a:	b25b      	sxtb	r3, r3
 800ea6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea70:	d103      	bne.n	800ea7a <xQueueSemaphoreTake+0x14a>
 800ea72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea74:	2200      	movs	r2, #0
 800ea76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea80:	b25b      	sxtb	r3, r3
 800ea82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea86:	d103      	bne.n	800ea90 <xQueueSemaphoreTake+0x160>
 800ea88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea90:	f001 fc10 	bl	80102b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea94:	463a      	mov	r2, r7
 800ea96:	f107 030c 	add.w	r3, r7, #12
 800ea9a:	4611      	mov	r1, r2
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f000 ff3b 	bl	800f918 <xTaskCheckForTimeOut>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d132      	bne.n	800eb0e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eaa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eaaa:	f000 f9fa 	bl	800eea2 <prvIsQueueEmpty>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d026      	beq.n	800eb02 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d109      	bne.n	800ead0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800eabc:	f001 fbc6 	bl	801024c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac2:	689b      	ldr	r3, [r3, #8]
 800eac4:	4618      	mov	r0, r3
 800eac6:	f001 f893 	bl	800fbf0 <xTaskPriorityInherit>
 800eaca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800eacc:	f001 fbf2 	bl	80102b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ead0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead2:	3324      	adds	r3, #36	; 0x24
 800ead4:	683a      	ldr	r2, [r7, #0]
 800ead6:	4611      	mov	r1, r2
 800ead8:	4618      	mov	r0, r3
 800eada:	f000 fe7d 	bl	800f7d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eade:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eae0:	f000 f98d 	bl	800edfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eae4:	f000 fc9a 	bl	800f41c <xTaskResumeAll>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f47f af66 	bne.w	800e9bc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800eaf0:	4b18      	ldr	r3, [pc, #96]	; (800eb54 <xQueueSemaphoreTake+0x224>)
 800eaf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaf6:	601a      	str	r2, [r3, #0]
 800eaf8:	f3bf 8f4f 	dsb	sy
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	e75c      	b.n	800e9bc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800eb02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb04:	f000 f97b 	bl	800edfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb08:	f000 fc88 	bl	800f41c <xTaskResumeAll>
 800eb0c:	e756      	b.n	800e9bc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800eb0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb10:	f000 f975 	bl	800edfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb14:	f000 fc82 	bl	800f41c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb1a:	f000 f9c2 	bl	800eea2 <prvIsQueueEmpty>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f43f af4b 	beq.w	800e9bc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d00d      	beq.n	800eb48 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800eb2c:	f001 fb8e 	bl	801024c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800eb30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb32:	f000 f8bc 	bl	800ecae <prvGetDisinheritPriorityAfterTimeout>
 800eb36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800eb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f001 f960 	bl	800fe04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800eb44:	f001 fbb6 	bl	80102b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eb48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3738      	adds	r7, #56	; 0x38
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	e000ed04 	.word	0xe000ed04

0800eb58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b08e      	sub	sp, #56	; 0x38
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d10c      	bne.n	800eb88 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800eb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb72:	b672      	cpsid	i
 800eb74:	f383 8811 	msr	BASEPRI, r3
 800eb78:	f3bf 8f6f 	isb	sy
 800eb7c:	f3bf 8f4f 	dsb	sy
 800eb80:	b662      	cpsie	i
 800eb82:	623b      	str	r3, [r7, #32]
}
 800eb84:	bf00      	nop
 800eb86:	e7fe      	b.n	800eb86 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d103      	bne.n	800eb96 <xQueueReceiveFromISR+0x3e>
 800eb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d101      	bne.n	800eb9a <xQueueReceiveFromISR+0x42>
 800eb96:	2301      	movs	r3, #1
 800eb98:	e000      	b.n	800eb9c <xQueueReceiveFromISR+0x44>
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d10c      	bne.n	800ebba <xQueueReceiveFromISR+0x62>
	__asm volatile
 800eba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba4:	b672      	cpsid	i
 800eba6:	f383 8811 	msr	BASEPRI, r3
 800ebaa:	f3bf 8f6f 	isb	sy
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	b662      	cpsie	i
 800ebb4:	61fb      	str	r3, [r7, #28]
}
 800ebb6:	bf00      	nop
 800ebb8:	e7fe      	b.n	800ebb8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ebba:	f001 fc2f 	bl	801041c <vPortValidateInterruptPriority>
	__asm volatile
 800ebbe:	f3ef 8211 	mrs	r2, BASEPRI
 800ebc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc6:	b672      	cpsid	i
 800ebc8:	f383 8811 	msr	BASEPRI, r3
 800ebcc:	f3bf 8f6f 	isb	sy
 800ebd0:	f3bf 8f4f 	dsb	sy
 800ebd4:	b662      	cpsie	i
 800ebd6:	61ba      	str	r2, [r7, #24]
 800ebd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ebda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ebdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ebde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d02f      	beq.n	800ec4a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ebf4:	68b9      	ldr	r1, [r7, #8]
 800ebf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebf8:	f000 f8db 	bl	800edb2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ebfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfe:	1e5a      	subs	r2, r3, #1
 800ec00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ec04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec0c:	d112      	bne.n	800ec34 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec10:	691b      	ldr	r3, [r3, #16]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d016      	beq.n	800ec44 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec18:	3310      	adds	r3, #16
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f000 fe02 	bl	800f824 <xTaskRemoveFromEventList>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d00e      	beq.n	800ec44 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d00b      	beq.n	800ec44 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	601a      	str	r2, [r3, #0]
 800ec32:	e007      	b.n	800ec44 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ec34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec38:	3301      	adds	r3, #1
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	b25a      	sxtb	r2, r3
 800ec3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ec44:	2301      	movs	r3, #1
 800ec46:	637b      	str	r3, [r7, #52]	; 0x34
 800ec48:	e001      	b.n	800ec4e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ec4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec50:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	f383 8811 	msr	BASEPRI, r3
}
 800ec58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3738      	adds	r7, #56	; 0x38
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d10c      	bne.n	800ec90 <vQueueDelete+0x2c>
	__asm volatile
 800ec76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7a:	b672      	cpsid	i
 800ec7c:	f383 8811 	msr	BASEPRI, r3
 800ec80:	f3bf 8f6f 	isb	sy
 800ec84:	f3bf 8f4f 	dsb	sy
 800ec88:	b662      	cpsie	i
 800ec8a:	60bb      	str	r3, [r7, #8]
}
 800ec8c:	bf00      	nop
 800ec8e:	e7fe      	b.n	800ec8e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f000 f935 	bl	800ef00 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d102      	bne.n	800eca6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f001 fcc9 	bl	8010638 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800eca6:	bf00      	nop
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}

0800ecae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ecae:	b480      	push	{r7}
 800ecb0:	b085      	sub	sp, #20
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d006      	beq.n	800eccc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f1c3 0307 	rsb	r3, r3, #7
 800ecc8:	60fb      	str	r3, [r7, #12]
 800ecca:	e001      	b.n	800ecd0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800eccc:	2300      	movs	r3, #0
 800ecce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
	}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3714      	adds	r7, #20
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr

0800ecde <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b086      	sub	sp, #24
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	60f8      	str	r0, [r7, #12]
 800ece6:	60b9      	str	r1, [r7, #8]
 800ece8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ecea:	2300      	movs	r3, #0
 800ecec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d10d      	bne.n	800ed18 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d14d      	bne.n	800eda0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	689b      	ldr	r3, [r3, #8]
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f000 fff1 	bl	800fcf0 <xTaskPriorityDisinherit>
 800ed0e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2200      	movs	r2, #0
 800ed14:	609a      	str	r2, [r3, #8]
 800ed16:	e043      	b.n	800eda0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d119      	bne.n	800ed52 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6858      	ldr	r0, [r3, #4]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed26:	461a      	mov	r2, r3
 800ed28:	68b9      	ldr	r1, [r7, #8]
 800ed2a:	f002 fb1d 	bl	8011368 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	685a      	ldr	r2, [r3, #4]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed36:	441a      	add	r2, r3
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	685a      	ldr	r2, [r3, #4]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d32b      	bcc.n	800eda0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	605a      	str	r2, [r3, #4]
 800ed50:	e026      	b.n	800eda0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	68d8      	ldr	r0, [r3, #12]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	68b9      	ldr	r1, [r7, #8]
 800ed5e:	f002 fb03 	bl	8011368 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	68da      	ldr	r2, [r3, #12]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed6a:	425b      	negs	r3, r3
 800ed6c:	441a      	add	r2, r3
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	68da      	ldr	r2, [r3, #12]
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d207      	bcs.n	800ed8e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	689a      	ldr	r2, [r3, #8]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed86:	425b      	negs	r3, r3
 800ed88:	441a      	add	r2, r3
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2b02      	cmp	r3, #2
 800ed92:	d105      	bne.n	800eda0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d002      	beq.n	800eda0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	3b01      	subs	r3, #1
 800ed9e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	1c5a      	adds	r2, r3, #1
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eda8:	697b      	ldr	r3, [r7, #20]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3718      	adds	r7, #24
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800edb2:	b580      	push	{r7, lr}
 800edb4:	b082      	sub	sp, #8
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
 800edba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d018      	beq.n	800edf6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	68da      	ldr	r2, [r3, #12]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edcc:	441a      	add	r2, r3
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	68da      	ldr	r2, [r3, #12]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	429a      	cmp	r2, r3
 800eddc:	d303      	bcc.n	800ede6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	68d9      	ldr	r1, [r3, #12]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edee:	461a      	mov	r2, r3
 800edf0:	6838      	ldr	r0, [r7, #0]
 800edf2:	f002 fab9 	bl	8011368 <memcpy>
	}
}
 800edf6:	bf00      	nop
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b084      	sub	sp, #16
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ee06:	f001 fa21 	bl	801024c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee10:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee12:	e011      	b.n	800ee38 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d012      	beq.n	800ee42 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	3324      	adds	r3, #36	; 0x24
 800ee20:	4618      	mov	r0, r3
 800ee22:	f000 fcff 	bl	800f824 <xTaskRemoveFromEventList>
 800ee26:	4603      	mov	r3, r0
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d001      	beq.n	800ee30 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ee2c:	f000 fdda 	bl	800f9e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ee30:	7bfb      	ldrb	r3, [r7, #15]
 800ee32:	3b01      	subs	r3, #1
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	dce9      	bgt.n	800ee14 <prvUnlockQueue+0x16>
 800ee40:	e000      	b.n	800ee44 <prvUnlockQueue+0x46>
					break;
 800ee42:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	22ff      	movs	r2, #255	; 0xff
 800ee48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ee4c:	f001 fa32 	bl	80102b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ee50:	f001 f9fc 	bl	801024c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee5a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee5c:	e011      	b.n	800ee82 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	691b      	ldr	r3, [r3, #16]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d012      	beq.n	800ee8c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	3310      	adds	r3, #16
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f000 fcda 	bl	800f824 <xTaskRemoveFromEventList>
 800ee70:	4603      	mov	r3, r0
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d001      	beq.n	800ee7a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ee76:	f000 fdb5 	bl	800f9e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ee7a:	7bbb      	ldrb	r3, [r7, #14]
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	dce9      	bgt.n	800ee5e <prvUnlockQueue+0x60>
 800ee8a:	e000      	b.n	800ee8e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ee8c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	22ff      	movs	r2, #255	; 0xff
 800ee92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ee96:	f001 fa0d 	bl	80102b4 <vPortExitCritical>
}
 800ee9a:	bf00      	nop
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}

0800eea2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eea2:	b580      	push	{r7, lr}
 800eea4:	b084      	sub	sp, #16
 800eea6:	af00      	add	r7, sp, #0
 800eea8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eeaa:	f001 f9cf 	bl	801024c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d102      	bne.n	800eebc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	60fb      	str	r3, [r7, #12]
 800eeba:	e001      	b.n	800eec0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eebc:	2300      	movs	r3, #0
 800eebe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eec0:	f001 f9f8 	bl	80102b4 <vPortExitCritical>

	return xReturn;
 800eec4:	68fb      	ldr	r3, [r7, #12]
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3710      	adds	r7, #16
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}

0800eece <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eece:	b580      	push	{r7, lr}
 800eed0:	b084      	sub	sp, #16
 800eed2:	af00      	add	r7, sp, #0
 800eed4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eed6:	f001 f9b9 	bl	801024c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d102      	bne.n	800eeec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eee6:	2301      	movs	r3, #1
 800eee8:	60fb      	str	r3, [r7, #12]
 800eeea:	e001      	b.n	800eef0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eeec:	2300      	movs	r3, #0
 800eeee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eef0:	f001 f9e0 	bl	80102b4 <vPortExitCritical>

	return xReturn;
 800eef4:	68fb      	ldr	r3, [r7, #12]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
	...

0800ef00 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ef00:	b480      	push	{r7}
 800ef02:	b085      	sub	sp, #20
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef08:	2300      	movs	r3, #0
 800ef0a:	60fb      	str	r3, [r7, #12]
 800ef0c:	e016      	b.n	800ef3c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ef0e:	4a10      	ldr	r2, [pc, #64]	; (800ef50 <vQueueUnregisterQueue+0x50>)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	00db      	lsls	r3, r3, #3
 800ef14:	4413      	add	r3, r2
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d10b      	bne.n	800ef36 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ef1e:	4a0c      	ldr	r2, [pc, #48]	; (800ef50 <vQueueUnregisterQueue+0x50>)
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2100      	movs	r1, #0
 800ef24:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ef28:	4a09      	ldr	r2, [pc, #36]	; (800ef50 <vQueueUnregisterQueue+0x50>)
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	00db      	lsls	r3, r3, #3
 800ef2e:	4413      	add	r3, r2
 800ef30:	2200      	movs	r2, #0
 800ef32:	605a      	str	r2, [r3, #4]
				break;
 800ef34:	e006      	b.n	800ef44 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	60fb      	str	r3, [r7, #12]
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2b07      	cmp	r3, #7
 800ef40:	d9e5      	bls.n	800ef0e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ef42:	bf00      	nop
 800ef44:	bf00      	nop
 800ef46:	3714      	adds	r7, #20
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr
 800ef50:	20009c1c 	.word	0x20009c1c

0800ef54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b08e      	sub	sp, #56	; 0x38
 800ef58:	af04      	add	r7, sp, #16
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]
 800ef60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ef62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10c      	bne.n	800ef82 <xTaskCreateStatic+0x2e>
	__asm volatile
 800ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6c:	b672      	cpsid	i
 800ef6e:	f383 8811 	msr	BASEPRI, r3
 800ef72:	f3bf 8f6f 	isb	sy
 800ef76:	f3bf 8f4f 	dsb	sy
 800ef7a:	b662      	cpsie	i
 800ef7c:	623b      	str	r3, [r7, #32]
}
 800ef7e:	bf00      	nop
 800ef80:	e7fe      	b.n	800ef80 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ef82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d10c      	bne.n	800efa2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800ef88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8c:	b672      	cpsid	i
 800ef8e:	f383 8811 	msr	BASEPRI, r3
 800ef92:	f3bf 8f6f 	isb	sy
 800ef96:	f3bf 8f4f 	dsb	sy
 800ef9a:	b662      	cpsie	i
 800ef9c:	61fb      	str	r3, [r7, #28]
}
 800ef9e:	bf00      	nop
 800efa0:	e7fe      	b.n	800efa0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800efa2:	23b4      	movs	r3, #180	; 0xb4
 800efa4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	2bb4      	cmp	r3, #180	; 0xb4
 800efaa:	d00c      	beq.n	800efc6 <xTaskCreateStatic+0x72>
	__asm volatile
 800efac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb0:	b672      	cpsid	i
 800efb2:	f383 8811 	msr	BASEPRI, r3
 800efb6:	f3bf 8f6f 	isb	sy
 800efba:	f3bf 8f4f 	dsb	sy
 800efbe:	b662      	cpsie	i
 800efc0:	61bb      	str	r3, [r7, #24]
}
 800efc2:	bf00      	nop
 800efc4:	e7fe      	b.n	800efc4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800efc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800efc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d01e      	beq.n	800f00c <xTaskCreateStatic+0xb8>
 800efce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d01b      	beq.n	800f00c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800efd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800efd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800efde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe0:	2202      	movs	r2, #2
 800efe2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800efe6:	2300      	movs	r3, #0
 800efe8:	9303      	str	r3, [sp, #12]
 800efea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efec:	9302      	str	r3, [sp, #8]
 800efee:	f107 0314 	add.w	r3, r7, #20
 800eff2:	9301      	str	r3, [sp, #4]
 800eff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	68b9      	ldr	r1, [r7, #8]
 800effe:	68f8      	ldr	r0, [r7, #12]
 800f000:	f000 f850 	bl	800f0a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f004:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f006:	f000 f8ed 	bl	800f1e4 <prvAddNewTaskToReadyList>
 800f00a:	e001      	b.n	800f010 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f00c:	2300      	movs	r3, #0
 800f00e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f010:	697b      	ldr	r3, [r7, #20]
	}
 800f012:	4618      	mov	r0, r3
 800f014:	3728      	adds	r7, #40	; 0x28
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b08c      	sub	sp, #48	; 0x30
 800f01e:	af04      	add	r7, sp, #16
 800f020:	60f8      	str	r0, [r7, #12]
 800f022:	60b9      	str	r1, [r7, #8]
 800f024:	603b      	str	r3, [r7, #0]
 800f026:	4613      	mov	r3, r2
 800f028:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f02a:	88fb      	ldrh	r3, [r7, #6]
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	4618      	mov	r0, r3
 800f030:	f001 fa38 	bl	80104a4 <pvPortMalloc>
 800f034:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d00e      	beq.n	800f05a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f03c:	20b4      	movs	r0, #180	; 0xb4
 800f03e:	f001 fa31 	bl	80104a4 <pvPortMalloc>
 800f042:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d003      	beq.n	800f052 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f04a:	69fb      	ldr	r3, [r7, #28]
 800f04c:	697a      	ldr	r2, [r7, #20]
 800f04e:	631a      	str	r2, [r3, #48]	; 0x30
 800f050:	e005      	b.n	800f05e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f052:	6978      	ldr	r0, [r7, #20]
 800f054:	f001 faf0 	bl	8010638 <vPortFree>
 800f058:	e001      	b.n	800f05e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f05a:	2300      	movs	r3, #0
 800f05c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f05e:	69fb      	ldr	r3, [r7, #28]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d017      	beq.n	800f094 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f064:	69fb      	ldr	r3, [r7, #28]
 800f066:	2200      	movs	r2, #0
 800f068:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f06c:	88fa      	ldrh	r2, [r7, #6]
 800f06e:	2300      	movs	r3, #0
 800f070:	9303      	str	r3, [sp, #12]
 800f072:	69fb      	ldr	r3, [r7, #28]
 800f074:	9302      	str	r3, [sp, #8]
 800f076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f078:	9301      	str	r3, [sp, #4]
 800f07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	68b9      	ldr	r1, [r7, #8]
 800f082:	68f8      	ldr	r0, [r7, #12]
 800f084:	f000 f80e 	bl	800f0a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f088:	69f8      	ldr	r0, [r7, #28]
 800f08a:	f000 f8ab 	bl	800f1e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f08e:	2301      	movs	r3, #1
 800f090:	61bb      	str	r3, [r7, #24]
 800f092:	e002      	b.n	800f09a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f098:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f09a:	69bb      	ldr	r3, [r7, #24]
	}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3720      	adds	r7, #32
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}

0800f0a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b088      	sub	sp, #32
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	607a      	str	r2, [r7, #4]
 800f0b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0b6:	6879      	ldr	r1, [r7, #4]
 800f0b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f0bc:	440b      	add	r3, r1
 800f0be:	009b      	lsls	r3, r3, #2
 800f0c0:	4413      	add	r3, r2
 800f0c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f0c4:	69bb      	ldr	r3, [r7, #24]
 800f0c6:	f023 0307 	bic.w	r3, r3, #7
 800f0ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f0cc:	69bb      	ldr	r3, [r7, #24]
 800f0ce:	f003 0307 	and.w	r3, r3, #7
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00c      	beq.n	800f0f0 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800f0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0da:	b672      	cpsid	i
 800f0dc:	f383 8811 	msr	BASEPRI, r3
 800f0e0:	f3bf 8f6f 	isb	sy
 800f0e4:	f3bf 8f4f 	dsb	sy
 800f0e8:	b662      	cpsie	i
 800f0ea:	617b      	str	r3, [r7, #20]
}
 800f0ec:	bf00      	nop
 800f0ee:	e7fe      	b.n	800f0ee <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d01f      	beq.n	800f136 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	61fb      	str	r3, [r7, #28]
 800f0fa:	e012      	b.n	800f122 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f0fc:	68ba      	ldr	r2, [r7, #8]
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	4413      	add	r3, r2
 800f102:	7819      	ldrb	r1, [r3, #0]
 800f104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	4413      	add	r3, r2
 800f10a:	3334      	adds	r3, #52	; 0x34
 800f10c:	460a      	mov	r2, r1
 800f10e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f110:	68ba      	ldr	r2, [r7, #8]
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	4413      	add	r3, r2
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d006      	beq.n	800f12a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	3301      	adds	r3, #1
 800f120:	61fb      	str	r3, [r7, #28]
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	2b0f      	cmp	r3, #15
 800f126:	d9e9      	bls.n	800f0fc <prvInitialiseNewTask+0x58>
 800f128:	e000      	b.n	800f12c <prvInitialiseNewTask+0x88>
			{
				break;
 800f12a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12e:	2200      	movs	r2, #0
 800f130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f134:	e003      	b.n	800f13e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f138:	2200      	movs	r2, #0
 800f13a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f140:	2b06      	cmp	r3, #6
 800f142:	d901      	bls.n	800f148 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f144:	2306      	movs	r3, #6
 800f146:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f14c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f152:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f156:	2200      	movs	r2, #0
 800f158:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15c:	3304      	adds	r3, #4
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fe fee2 	bl	800df28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f166:	3318      	adds	r3, #24
 800f168:	4618      	mov	r0, r3
 800f16a:	f7fe fedd 	bl	800df28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f172:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f176:	f1c3 0207 	rsb	r2, r3, #7
 800f17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f182:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f186:	2200      	movs	r2, #0
 800f188:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18e:	2200      	movs	r2, #0
 800f190:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f196:	334c      	adds	r3, #76	; 0x4c
 800f198:	2260      	movs	r2, #96	; 0x60
 800f19a:	2100      	movs	r1, #0
 800f19c:	4618      	mov	r0, r3
 800f19e:	f002 f8f1 	bl	8011384 <memset>
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a4:	4a0c      	ldr	r2, [pc, #48]	; (800f1d8 <prvInitialiseNewTask+0x134>)
 800f1a6:	651a      	str	r2, [r3, #80]	; 0x50
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1aa:	4a0c      	ldr	r2, [pc, #48]	; (800f1dc <prvInitialiseNewTask+0x138>)
 800f1ac:	655a      	str	r2, [r3, #84]	; 0x54
 800f1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b0:	4a0b      	ldr	r2, [pc, #44]	; (800f1e0 <prvInitialiseNewTask+0x13c>)
 800f1b2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f1b4:	683a      	ldr	r2, [r7, #0]
 800f1b6:	68f9      	ldr	r1, [r7, #12]
 800f1b8:	69b8      	ldr	r0, [r7, #24]
 800f1ba:	f000 ff3b 	bl	8010034 <pxPortInitialiseStack>
 800f1be:	4602      	mov	r2, r0
 800f1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d002      	beq.n	800f1d0 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1d0:	bf00      	nop
 800f1d2:	3720      	adds	r7, #32
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	08012e54 	.word	0x08012e54
 800f1dc:	08012e74 	.word	0x08012e74
 800f1e0:	08012e34 	.word	0x08012e34

0800f1e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f1ec:	f001 f82e 	bl	801024c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f1f0:	4b2a      	ldr	r3, [pc, #168]	; (800f29c <prvAddNewTaskToReadyList+0xb8>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	4a29      	ldr	r2, [pc, #164]	; (800f29c <prvAddNewTaskToReadyList+0xb8>)
 800f1f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f1fa:	4b29      	ldr	r3, [pc, #164]	; (800f2a0 <prvAddNewTaskToReadyList+0xbc>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d109      	bne.n	800f216 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f202:	4a27      	ldr	r2, [pc, #156]	; (800f2a0 <prvAddNewTaskToReadyList+0xbc>)
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f208:	4b24      	ldr	r3, [pc, #144]	; (800f29c <prvAddNewTaskToReadyList+0xb8>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d110      	bne.n	800f232 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f210:	f000 fc0c 	bl	800fa2c <prvInitialiseTaskLists>
 800f214:	e00d      	b.n	800f232 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f216:	4b23      	ldr	r3, [pc, #140]	; (800f2a4 <prvAddNewTaskToReadyList+0xc0>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d109      	bne.n	800f232 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f21e:	4b20      	ldr	r3, [pc, #128]	; (800f2a0 <prvAddNewTaskToReadyList+0xbc>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f228:	429a      	cmp	r2, r3
 800f22a:	d802      	bhi.n	800f232 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f22c:	4a1c      	ldr	r2, [pc, #112]	; (800f2a0 <prvAddNewTaskToReadyList+0xbc>)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f232:	4b1d      	ldr	r3, [pc, #116]	; (800f2a8 <prvAddNewTaskToReadyList+0xc4>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	3301      	adds	r3, #1
 800f238:	4a1b      	ldr	r2, [pc, #108]	; (800f2a8 <prvAddNewTaskToReadyList+0xc4>)
 800f23a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f240:	2201      	movs	r2, #1
 800f242:	409a      	lsls	r2, r3
 800f244:	4b19      	ldr	r3, [pc, #100]	; (800f2ac <prvAddNewTaskToReadyList+0xc8>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4313      	orrs	r3, r2
 800f24a:	4a18      	ldr	r2, [pc, #96]	; (800f2ac <prvAddNewTaskToReadyList+0xc8>)
 800f24c:	6013      	str	r3, [r2, #0]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f252:	4613      	mov	r3, r2
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	4413      	add	r3, r2
 800f258:	009b      	lsls	r3, r3, #2
 800f25a:	4a15      	ldr	r2, [pc, #84]	; (800f2b0 <prvAddNewTaskToReadyList+0xcc>)
 800f25c:	441a      	add	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	3304      	adds	r3, #4
 800f262:	4619      	mov	r1, r3
 800f264:	4610      	mov	r0, r2
 800f266:	f7fe fe6c 	bl	800df42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f26a:	f001 f823 	bl	80102b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f26e:	4b0d      	ldr	r3, [pc, #52]	; (800f2a4 <prvAddNewTaskToReadyList+0xc0>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00e      	beq.n	800f294 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f276:	4b0a      	ldr	r3, [pc, #40]	; (800f2a0 <prvAddNewTaskToReadyList+0xbc>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f280:	429a      	cmp	r2, r3
 800f282:	d207      	bcs.n	800f294 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f284:	4b0b      	ldr	r3, [pc, #44]	; (800f2b4 <prvAddNewTaskToReadyList+0xd0>)
 800f286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f28a:	601a      	str	r2, [r3, #0]
 800f28c:	f3bf 8f4f 	dsb	sy
 800f290:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f294:	bf00      	nop
 800f296:	3708      	adds	r7, #8
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}
 800f29c:	20005904 	.word	0x20005904
 800f2a0:	20005804 	.word	0x20005804
 800f2a4:	20005910 	.word	0x20005910
 800f2a8:	20005920 	.word	0x20005920
 800f2ac:	2000590c 	.word	0x2000590c
 800f2b0:	20005808 	.word	0x20005808
 800f2b4:	e000ed04 	.word	0xe000ed04

0800f2b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d019      	beq.n	800f2fe <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f2ca:	4b14      	ldr	r3, [pc, #80]	; (800f31c <vTaskDelay+0x64>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d00c      	beq.n	800f2ec <vTaskDelay+0x34>
	__asm volatile
 800f2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d6:	b672      	cpsid	i
 800f2d8:	f383 8811 	msr	BASEPRI, r3
 800f2dc:	f3bf 8f6f 	isb	sy
 800f2e0:	f3bf 8f4f 	dsb	sy
 800f2e4:	b662      	cpsie	i
 800f2e6:	60bb      	str	r3, [r7, #8]
}
 800f2e8:	bf00      	nop
 800f2ea:	e7fe      	b.n	800f2ea <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f2ec:	f000 f888 	bl	800f400 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 fe38 	bl	800ff68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f2f8:	f000 f890 	bl	800f41c <xTaskResumeAll>
 800f2fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d107      	bne.n	800f314 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f304:	4b06      	ldr	r3, [pc, #24]	; (800f320 <vTaskDelay+0x68>)
 800f306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f30a:	601a      	str	r2, [r3, #0]
 800f30c:	f3bf 8f4f 	dsb	sy
 800f310:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f314:	bf00      	nop
 800f316:	3710      	adds	r7, #16
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	2000592c 	.word	0x2000592c
 800f320:	e000ed04 	.word	0xe000ed04

0800f324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b08a      	sub	sp, #40	; 0x28
 800f328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f32a:	2300      	movs	r3, #0
 800f32c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f32e:	2300      	movs	r3, #0
 800f330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f332:	463a      	mov	r2, r7
 800f334:	1d39      	adds	r1, r7, #4
 800f336:	f107 0308 	add.w	r3, r7, #8
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7f3 fdd0 	bl	8002ee0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f340:	6839      	ldr	r1, [r7, #0]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	68ba      	ldr	r2, [r7, #8]
 800f346:	9202      	str	r2, [sp, #8]
 800f348:	9301      	str	r3, [sp, #4]
 800f34a:	2300      	movs	r3, #0
 800f34c:	9300      	str	r3, [sp, #0]
 800f34e:	2300      	movs	r3, #0
 800f350:	460a      	mov	r2, r1
 800f352:	4923      	ldr	r1, [pc, #140]	; (800f3e0 <vTaskStartScheduler+0xbc>)
 800f354:	4823      	ldr	r0, [pc, #140]	; (800f3e4 <vTaskStartScheduler+0xc0>)
 800f356:	f7ff fdfd 	bl	800ef54 <xTaskCreateStatic>
 800f35a:	4603      	mov	r3, r0
 800f35c:	4a22      	ldr	r2, [pc, #136]	; (800f3e8 <vTaskStartScheduler+0xc4>)
 800f35e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f360:	4b21      	ldr	r3, [pc, #132]	; (800f3e8 <vTaskStartScheduler+0xc4>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d002      	beq.n	800f36e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f368:	2301      	movs	r3, #1
 800f36a:	617b      	str	r3, [r7, #20]
 800f36c:	e001      	b.n	800f372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f36e:	2300      	movs	r3, #0
 800f370:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	2b01      	cmp	r3, #1
 800f376:	d11d      	bne.n	800f3b4 <vTaskStartScheduler+0x90>
	__asm volatile
 800f378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37c:	b672      	cpsid	i
 800f37e:	f383 8811 	msr	BASEPRI, r3
 800f382:	f3bf 8f6f 	isb	sy
 800f386:	f3bf 8f4f 	dsb	sy
 800f38a:	b662      	cpsie	i
 800f38c:	613b      	str	r3, [r7, #16]
}
 800f38e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f390:	4b16      	ldr	r3, [pc, #88]	; (800f3ec <vTaskStartScheduler+0xc8>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	334c      	adds	r3, #76	; 0x4c
 800f396:	4a16      	ldr	r2, [pc, #88]	; (800f3f0 <vTaskStartScheduler+0xcc>)
 800f398:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f39a:	4b16      	ldr	r3, [pc, #88]	; (800f3f4 <vTaskStartScheduler+0xd0>)
 800f39c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f3a2:	4b15      	ldr	r3, [pc, #84]	; (800f3f8 <vTaskStartScheduler+0xd4>)
 800f3a4:	2201      	movs	r2, #1
 800f3a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f3a8:	4b14      	ldr	r3, [pc, #80]	; (800f3fc <vTaskStartScheduler+0xd8>)
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f3ae:	f000 fecf 	bl	8010150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f3b2:	e010      	b.n	800f3d6 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3ba:	d10c      	bne.n	800f3d6 <vTaskStartScheduler+0xb2>
	__asm volatile
 800f3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c0:	b672      	cpsid	i
 800f3c2:	f383 8811 	msr	BASEPRI, r3
 800f3c6:	f3bf 8f6f 	isb	sy
 800f3ca:	f3bf 8f4f 	dsb	sy
 800f3ce:	b662      	cpsie	i
 800f3d0:	60fb      	str	r3, [r7, #12]
}
 800f3d2:	bf00      	nop
 800f3d4:	e7fe      	b.n	800f3d4 <vTaskStartScheduler+0xb0>
}
 800f3d6:	bf00      	nop
 800f3d8:	3718      	adds	r7, #24
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	08012d78 	.word	0x08012d78
 800f3e4:	0800f9fd 	.word	0x0800f9fd
 800f3e8:	20005928 	.word	0x20005928
 800f3ec:	20005804 	.word	0x20005804
 800f3f0:	200009dc 	.word	0x200009dc
 800f3f4:	20005924 	.word	0x20005924
 800f3f8:	20005910 	.word	0x20005910
 800f3fc:	20005908 	.word	0x20005908

0800f400 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f400:	b480      	push	{r7}
 800f402:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f404:	4b04      	ldr	r3, [pc, #16]	; (800f418 <vTaskSuspendAll+0x18>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	3301      	adds	r3, #1
 800f40a:	4a03      	ldr	r2, [pc, #12]	; (800f418 <vTaskSuspendAll+0x18>)
 800f40c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f40e:	bf00      	nop
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr
 800f418:	2000592c 	.word	0x2000592c

0800f41c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f422:	2300      	movs	r3, #0
 800f424:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f426:	2300      	movs	r3, #0
 800f428:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f42a:	4b42      	ldr	r3, [pc, #264]	; (800f534 <xTaskResumeAll+0x118>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d10c      	bne.n	800f44c <xTaskResumeAll+0x30>
	__asm volatile
 800f432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f436:	b672      	cpsid	i
 800f438:	f383 8811 	msr	BASEPRI, r3
 800f43c:	f3bf 8f6f 	isb	sy
 800f440:	f3bf 8f4f 	dsb	sy
 800f444:	b662      	cpsie	i
 800f446:	603b      	str	r3, [r7, #0]
}
 800f448:	bf00      	nop
 800f44a:	e7fe      	b.n	800f44a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f44c:	f000 fefe 	bl	801024c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f450:	4b38      	ldr	r3, [pc, #224]	; (800f534 <xTaskResumeAll+0x118>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	3b01      	subs	r3, #1
 800f456:	4a37      	ldr	r2, [pc, #220]	; (800f534 <xTaskResumeAll+0x118>)
 800f458:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f45a:	4b36      	ldr	r3, [pc, #216]	; (800f534 <xTaskResumeAll+0x118>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d161      	bne.n	800f526 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f462:	4b35      	ldr	r3, [pc, #212]	; (800f538 <xTaskResumeAll+0x11c>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d05d      	beq.n	800f526 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f46a:	e02e      	b.n	800f4ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f46c:	4b33      	ldr	r3, [pc, #204]	; (800f53c <xTaskResumeAll+0x120>)
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	68db      	ldr	r3, [r3, #12]
 800f472:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3318      	adds	r3, #24
 800f478:	4618      	mov	r0, r3
 800f47a:	f7fe fdbf 	bl	800dffc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	3304      	adds	r3, #4
 800f482:	4618      	mov	r0, r3
 800f484:	f7fe fdba 	bl	800dffc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f48c:	2201      	movs	r2, #1
 800f48e:	409a      	lsls	r2, r3
 800f490:	4b2b      	ldr	r3, [pc, #172]	; (800f540 <xTaskResumeAll+0x124>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4313      	orrs	r3, r2
 800f496:	4a2a      	ldr	r2, [pc, #168]	; (800f540 <xTaskResumeAll+0x124>)
 800f498:	6013      	str	r3, [r2, #0]
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f49e:	4613      	mov	r3, r2
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	4413      	add	r3, r2
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	4a27      	ldr	r2, [pc, #156]	; (800f544 <xTaskResumeAll+0x128>)
 800f4a8:	441a      	add	r2, r3
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	3304      	adds	r3, #4
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	4610      	mov	r0, r2
 800f4b2:	f7fe fd46 	bl	800df42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ba:	4b23      	ldr	r3, [pc, #140]	; (800f548 <xTaskResumeAll+0x12c>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d302      	bcc.n	800f4ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f4c4:	4b21      	ldr	r3, [pc, #132]	; (800f54c <xTaskResumeAll+0x130>)
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f4ca:	4b1c      	ldr	r3, [pc, #112]	; (800f53c <xTaskResumeAll+0x120>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d1cc      	bne.n	800f46c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d001      	beq.n	800f4dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f4d8:	f000 fb4c 	bl	800fb74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f4dc:	4b1c      	ldr	r3, [pc, #112]	; (800f550 <xTaskResumeAll+0x134>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d010      	beq.n	800f50a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f4e8:	f000 f858 	bl	800f59c <xTaskIncrementTick>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d002      	beq.n	800f4f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f4f2:	4b16      	ldr	r3, [pc, #88]	; (800f54c <xTaskResumeAll+0x130>)
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d1f1      	bne.n	800f4e8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800f504:	4b12      	ldr	r3, [pc, #72]	; (800f550 <xTaskResumeAll+0x134>)
 800f506:	2200      	movs	r2, #0
 800f508:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f50a:	4b10      	ldr	r3, [pc, #64]	; (800f54c <xTaskResumeAll+0x130>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d009      	beq.n	800f526 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f512:	2301      	movs	r3, #1
 800f514:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f516:	4b0f      	ldr	r3, [pc, #60]	; (800f554 <xTaskResumeAll+0x138>)
 800f518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f51c:	601a      	str	r2, [r3, #0]
 800f51e:	f3bf 8f4f 	dsb	sy
 800f522:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f526:	f000 fec5 	bl	80102b4 <vPortExitCritical>

	return xAlreadyYielded;
 800f52a:	68bb      	ldr	r3, [r7, #8]
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}
 800f534:	2000592c 	.word	0x2000592c
 800f538:	20005904 	.word	0x20005904
 800f53c:	200058c4 	.word	0x200058c4
 800f540:	2000590c 	.word	0x2000590c
 800f544:	20005808 	.word	0x20005808
 800f548:	20005804 	.word	0x20005804
 800f54c:	20005918 	.word	0x20005918
 800f550:	20005914 	.word	0x20005914
 800f554:	e000ed04 	.word	0xe000ed04

0800f558 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f558:	b480      	push	{r7}
 800f55a:	b083      	sub	sp, #12
 800f55c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f55e:	4b05      	ldr	r3, [pc, #20]	; (800f574 <xTaskGetTickCount+0x1c>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f564:	687b      	ldr	r3, [r7, #4]
}
 800f566:	4618      	mov	r0, r3
 800f568:	370c      	adds	r7, #12
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr
 800f572:	bf00      	nop
 800f574:	20005908 	.word	0x20005908

0800f578 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f57e:	f000 ff4d 	bl	801041c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f582:	2300      	movs	r3, #0
 800f584:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f586:	4b04      	ldr	r3, [pc, #16]	; (800f598 <xTaskGetTickCountFromISR+0x20>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f58c:	683b      	ldr	r3, [r7, #0]
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3708      	adds	r7, #8
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}
 800f596:	bf00      	nop
 800f598:	20005908 	.word	0x20005908

0800f59c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b086      	sub	sp, #24
 800f5a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f5a6:	4b4f      	ldr	r3, [pc, #316]	; (800f6e4 <xTaskIncrementTick+0x148>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	f040 808a 	bne.w	800f6c4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f5b0:	4b4d      	ldr	r3, [pc, #308]	; (800f6e8 <xTaskIncrementTick+0x14c>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f5b8:	4a4b      	ldr	r2, [pc, #300]	; (800f6e8 <xTaskIncrementTick+0x14c>)
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d122      	bne.n	800f60a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f5c4:	4b49      	ldr	r3, [pc, #292]	; (800f6ec <xTaskIncrementTick+0x150>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d00c      	beq.n	800f5e8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800f5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d2:	b672      	cpsid	i
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	b662      	cpsie	i
 800f5e2:	603b      	str	r3, [r7, #0]
}
 800f5e4:	bf00      	nop
 800f5e6:	e7fe      	b.n	800f5e6 <xTaskIncrementTick+0x4a>
 800f5e8:	4b40      	ldr	r3, [pc, #256]	; (800f6ec <xTaskIncrementTick+0x150>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	60fb      	str	r3, [r7, #12]
 800f5ee:	4b40      	ldr	r3, [pc, #256]	; (800f6f0 <xTaskIncrementTick+0x154>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a3e      	ldr	r2, [pc, #248]	; (800f6ec <xTaskIncrementTick+0x150>)
 800f5f4:	6013      	str	r3, [r2, #0]
 800f5f6:	4a3e      	ldr	r2, [pc, #248]	; (800f6f0 <xTaskIncrementTick+0x154>)
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	6013      	str	r3, [r2, #0]
 800f5fc:	4b3d      	ldr	r3, [pc, #244]	; (800f6f4 <xTaskIncrementTick+0x158>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	3301      	adds	r3, #1
 800f602:	4a3c      	ldr	r2, [pc, #240]	; (800f6f4 <xTaskIncrementTick+0x158>)
 800f604:	6013      	str	r3, [r2, #0]
 800f606:	f000 fab5 	bl	800fb74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f60a:	4b3b      	ldr	r3, [pc, #236]	; (800f6f8 <xTaskIncrementTick+0x15c>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	693a      	ldr	r2, [r7, #16]
 800f610:	429a      	cmp	r2, r3
 800f612:	d348      	bcc.n	800f6a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f614:	4b35      	ldr	r3, [pc, #212]	; (800f6ec <xTaskIncrementTick+0x150>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d104      	bne.n	800f628 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f61e:	4b36      	ldr	r3, [pc, #216]	; (800f6f8 <xTaskIncrementTick+0x15c>)
 800f620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f624:	601a      	str	r2, [r3, #0]
					break;
 800f626:	e03e      	b.n	800f6a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f628:	4b30      	ldr	r3, [pc, #192]	; (800f6ec <xTaskIncrementTick+0x150>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f638:	693a      	ldr	r2, [r7, #16]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d203      	bcs.n	800f648 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f640:	4a2d      	ldr	r2, [pc, #180]	; (800f6f8 <xTaskIncrementTick+0x15c>)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f646:	e02e      	b.n	800f6a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	3304      	adds	r3, #4
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fe fcd5 	bl	800dffc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f656:	2b00      	cmp	r3, #0
 800f658:	d004      	beq.n	800f664 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	3318      	adds	r3, #24
 800f65e:	4618      	mov	r0, r3
 800f660:	f7fe fccc 	bl	800dffc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f668:	2201      	movs	r2, #1
 800f66a:	409a      	lsls	r2, r3
 800f66c:	4b23      	ldr	r3, [pc, #140]	; (800f6fc <xTaskIncrementTick+0x160>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4313      	orrs	r3, r2
 800f672:	4a22      	ldr	r2, [pc, #136]	; (800f6fc <xTaskIncrementTick+0x160>)
 800f674:	6013      	str	r3, [r2, #0]
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f67a:	4613      	mov	r3, r2
 800f67c:	009b      	lsls	r3, r3, #2
 800f67e:	4413      	add	r3, r2
 800f680:	009b      	lsls	r3, r3, #2
 800f682:	4a1f      	ldr	r2, [pc, #124]	; (800f700 <xTaskIncrementTick+0x164>)
 800f684:	441a      	add	r2, r3
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	3304      	adds	r3, #4
 800f68a:	4619      	mov	r1, r3
 800f68c:	4610      	mov	r0, r2
 800f68e:	f7fe fc58 	bl	800df42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f696:	4b1b      	ldr	r3, [pc, #108]	; (800f704 <xTaskIncrementTick+0x168>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d3b9      	bcc.n	800f614 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6a4:	e7b6      	b.n	800f614 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f6a6:	4b17      	ldr	r3, [pc, #92]	; (800f704 <xTaskIncrementTick+0x168>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6ac:	4914      	ldr	r1, [pc, #80]	; (800f700 <xTaskIncrementTick+0x164>)
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	009b      	lsls	r3, r3, #2
 800f6b2:	4413      	add	r3, r2
 800f6b4:	009b      	lsls	r3, r3, #2
 800f6b6:	440b      	add	r3, r1
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d907      	bls.n	800f6ce <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	617b      	str	r3, [r7, #20]
 800f6c2:	e004      	b.n	800f6ce <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f6c4:	4b10      	ldr	r3, [pc, #64]	; (800f708 <xTaskIncrementTick+0x16c>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	4a0f      	ldr	r2, [pc, #60]	; (800f708 <xTaskIncrementTick+0x16c>)
 800f6cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f6ce:	4b0f      	ldr	r3, [pc, #60]	; (800f70c <xTaskIncrementTick+0x170>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d001      	beq.n	800f6da <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f6da:	697b      	ldr	r3, [r7, #20]
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3718      	adds	r7, #24
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	2000592c 	.word	0x2000592c
 800f6e8:	20005908 	.word	0x20005908
 800f6ec:	200058bc 	.word	0x200058bc
 800f6f0:	200058c0 	.word	0x200058c0
 800f6f4:	2000591c 	.word	0x2000591c
 800f6f8:	20005924 	.word	0x20005924
 800f6fc:	2000590c 	.word	0x2000590c
 800f700:	20005808 	.word	0x20005808
 800f704:	20005804 	.word	0x20005804
 800f708:	20005914 	.word	0x20005914
 800f70c:	20005918 	.word	0x20005918

0800f710 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f710:	b480      	push	{r7}
 800f712:	b087      	sub	sp, #28
 800f714:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f716:	4b2a      	ldr	r3, [pc, #168]	; (800f7c0 <vTaskSwitchContext+0xb0>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d003      	beq.n	800f726 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f71e:	4b29      	ldr	r3, [pc, #164]	; (800f7c4 <vTaskSwitchContext+0xb4>)
 800f720:	2201      	movs	r2, #1
 800f722:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f724:	e046      	b.n	800f7b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f726:	4b27      	ldr	r3, [pc, #156]	; (800f7c4 <vTaskSwitchContext+0xb4>)
 800f728:	2200      	movs	r2, #0
 800f72a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f72c:	4b26      	ldr	r3, [pc, #152]	; (800f7c8 <vTaskSwitchContext+0xb8>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	fab3 f383 	clz	r3, r3
 800f738:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f73a:	7afb      	ldrb	r3, [r7, #11]
 800f73c:	f1c3 031f 	rsb	r3, r3, #31
 800f740:	617b      	str	r3, [r7, #20]
 800f742:	4922      	ldr	r1, [pc, #136]	; (800f7cc <vTaskSwitchContext+0xbc>)
 800f744:	697a      	ldr	r2, [r7, #20]
 800f746:	4613      	mov	r3, r2
 800f748:	009b      	lsls	r3, r3, #2
 800f74a:	4413      	add	r3, r2
 800f74c:	009b      	lsls	r3, r3, #2
 800f74e:	440b      	add	r3, r1
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d10c      	bne.n	800f770 <vTaskSwitchContext+0x60>
	__asm volatile
 800f756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75a:	b672      	cpsid	i
 800f75c:	f383 8811 	msr	BASEPRI, r3
 800f760:	f3bf 8f6f 	isb	sy
 800f764:	f3bf 8f4f 	dsb	sy
 800f768:	b662      	cpsie	i
 800f76a:	607b      	str	r3, [r7, #4]
}
 800f76c:	bf00      	nop
 800f76e:	e7fe      	b.n	800f76e <vTaskSwitchContext+0x5e>
 800f770:	697a      	ldr	r2, [r7, #20]
 800f772:	4613      	mov	r3, r2
 800f774:	009b      	lsls	r3, r3, #2
 800f776:	4413      	add	r3, r2
 800f778:	009b      	lsls	r3, r3, #2
 800f77a:	4a14      	ldr	r2, [pc, #80]	; (800f7cc <vTaskSwitchContext+0xbc>)
 800f77c:	4413      	add	r3, r2
 800f77e:	613b      	str	r3, [r7, #16]
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	685a      	ldr	r2, [r3, #4]
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	605a      	str	r2, [r3, #4]
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	685a      	ldr	r2, [r3, #4]
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	3308      	adds	r3, #8
 800f792:	429a      	cmp	r2, r3
 800f794:	d104      	bne.n	800f7a0 <vTaskSwitchContext+0x90>
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	685a      	ldr	r2, [r3, #4]
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	605a      	str	r2, [r3, #4]
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	4a0a      	ldr	r2, [pc, #40]	; (800f7d0 <vTaskSwitchContext+0xc0>)
 800f7a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f7aa:	4b09      	ldr	r3, [pc, #36]	; (800f7d0 <vTaskSwitchContext+0xc0>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	334c      	adds	r3, #76	; 0x4c
 800f7b0:	4a08      	ldr	r2, [pc, #32]	; (800f7d4 <vTaskSwitchContext+0xc4>)
 800f7b2:	6013      	str	r3, [r2, #0]
}
 800f7b4:	bf00      	nop
 800f7b6:	371c      	adds	r7, #28
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr
 800f7c0:	2000592c 	.word	0x2000592c
 800f7c4:	20005918 	.word	0x20005918
 800f7c8:	2000590c 	.word	0x2000590c
 800f7cc:	20005808 	.word	0x20005808
 800f7d0:	20005804 	.word	0x20005804
 800f7d4:	200009dc 	.word	0x200009dc

0800f7d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d10c      	bne.n	800f802 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800f7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ec:	b672      	cpsid	i
 800f7ee:	f383 8811 	msr	BASEPRI, r3
 800f7f2:	f3bf 8f6f 	isb	sy
 800f7f6:	f3bf 8f4f 	dsb	sy
 800f7fa:	b662      	cpsie	i
 800f7fc:	60fb      	str	r3, [r7, #12]
}
 800f7fe:	bf00      	nop
 800f800:	e7fe      	b.n	800f800 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f802:	4b07      	ldr	r3, [pc, #28]	; (800f820 <vTaskPlaceOnEventList+0x48>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	3318      	adds	r3, #24
 800f808:	4619      	mov	r1, r3
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f7fe fbbd 	bl	800df8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f810:	2101      	movs	r1, #1
 800f812:	6838      	ldr	r0, [r7, #0]
 800f814:	f000 fba8 	bl	800ff68 <prvAddCurrentTaskToDelayedList>
}
 800f818:	bf00      	nop
 800f81a:	3710      	adds	r7, #16
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	20005804 	.word	0x20005804

0800f824 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b086      	sub	sp, #24
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d10c      	bne.n	800f854 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800f83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f83e:	b672      	cpsid	i
 800f840:	f383 8811 	msr	BASEPRI, r3
 800f844:	f3bf 8f6f 	isb	sy
 800f848:	f3bf 8f4f 	dsb	sy
 800f84c:	b662      	cpsie	i
 800f84e:	60fb      	str	r3, [r7, #12]
}
 800f850:	bf00      	nop
 800f852:	e7fe      	b.n	800f852 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	3318      	adds	r3, #24
 800f858:	4618      	mov	r0, r3
 800f85a:	f7fe fbcf 	bl	800dffc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f85e:	4b1d      	ldr	r3, [pc, #116]	; (800f8d4 <xTaskRemoveFromEventList+0xb0>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d11c      	bne.n	800f8a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	3304      	adds	r3, #4
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fe fbc6 	bl	800dffc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f874:	2201      	movs	r2, #1
 800f876:	409a      	lsls	r2, r3
 800f878:	4b17      	ldr	r3, [pc, #92]	; (800f8d8 <xTaskRemoveFromEventList+0xb4>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4313      	orrs	r3, r2
 800f87e:	4a16      	ldr	r2, [pc, #88]	; (800f8d8 <xTaskRemoveFromEventList+0xb4>)
 800f880:	6013      	str	r3, [r2, #0]
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f886:	4613      	mov	r3, r2
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	4413      	add	r3, r2
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	4a13      	ldr	r2, [pc, #76]	; (800f8dc <xTaskRemoveFromEventList+0xb8>)
 800f890:	441a      	add	r2, r3
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	3304      	adds	r3, #4
 800f896:	4619      	mov	r1, r3
 800f898:	4610      	mov	r0, r2
 800f89a:	f7fe fb52 	bl	800df42 <vListInsertEnd>
 800f89e:	e005      	b.n	800f8ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	3318      	adds	r3, #24
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	480e      	ldr	r0, [pc, #56]	; (800f8e0 <xTaskRemoveFromEventList+0xbc>)
 800f8a8:	f7fe fb4b 	bl	800df42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8b0:	4b0c      	ldr	r3, [pc, #48]	; (800f8e4 <xTaskRemoveFromEventList+0xc0>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d905      	bls.n	800f8c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f8be:	4b0a      	ldr	r3, [pc, #40]	; (800f8e8 <xTaskRemoveFromEventList+0xc4>)
 800f8c0:	2201      	movs	r2, #1
 800f8c2:	601a      	str	r2, [r3, #0]
 800f8c4:	e001      	b.n	800f8ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f8ca:	697b      	ldr	r3, [r7, #20]
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3718      	adds	r7, #24
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	2000592c 	.word	0x2000592c
 800f8d8:	2000590c 	.word	0x2000590c
 800f8dc:	20005808 	.word	0x20005808
 800f8e0:	200058c4 	.word	0x200058c4
 800f8e4:	20005804 	.word	0x20005804
 800f8e8:	20005918 	.word	0x20005918

0800f8ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f8f4:	4b06      	ldr	r3, [pc, #24]	; (800f910 <vTaskInternalSetTimeOutState+0x24>)
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f8fc:	4b05      	ldr	r3, [pc, #20]	; (800f914 <vTaskInternalSetTimeOutState+0x28>)
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	605a      	str	r2, [r3, #4]
}
 800f904:	bf00      	nop
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr
 800f910:	2000591c 	.word	0x2000591c
 800f914:	20005908 	.word	0x20005908

0800f918 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b088      	sub	sp, #32
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d10c      	bne.n	800f942 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800f928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f92c:	b672      	cpsid	i
 800f92e:	f383 8811 	msr	BASEPRI, r3
 800f932:	f3bf 8f6f 	isb	sy
 800f936:	f3bf 8f4f 	dsb	sy
 800f93a:	b662      	cpsie	i
 800f93c:	613b      	str	r3, [r7, #16]
}
 800f93e:	bf00      	nop
 800f940:	e7fe      	b.n	800f940 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d10c      	bne.n	800f962 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800f948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f94c:	b672      	cpsid	i
 800f94e:	f383 8811 	msr	BASEPRI, r3
 800f952:	f3bf 8f6f 	isb	sy
 800f956:	f3bf 8f4f 	dsb	sy
 800f95a:	b662      	cpsie	i
 800f95c:	60fb      	str	r3, [r7, #12]
}
 800f95e:	bf00      	nop
 800f960:	e7fe      	b.n	800f960 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800f962:	f000 fc73 	bl	801024c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f966:	4b1d      	ldr	r3, [pc, #116]	; (800f9dc <xTaskCheckForTimeOut+0xc4>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	69ba      	ldr	r2, [r7, #24]
 800f972:	1ad3      	subs	r3, r2, r3
 800f974:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f97e:	d102      	bne.n	800f986 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f980:	2300      	movs	r3, #0
 800f982:	61fb      	str	r3, [r7, #28]
 800f984:	e023      	b.n	800f9ce <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681a      	ldr	r2, [r3, #0]
 800f98a:	4b15      	ldr	r3, [pc, #84]	; (800f9e0 <xTaskCheckForTimeOut+0xc8>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d007      	beq.n	800f9a2 <xTaskCheckForTimeOut+0x8a>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	69ba      	ldr	r2, [r7, #24]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d302      	bcc.n	800f9a2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f99c:	2301      	movs	r3, #1
 800f99e:	61fb      	str	r3, [r7, #28]
 800f9a0:	e015      	b.n	800f9ce <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	697a      	ldr	r2, [r7, #20]
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d20b      	bcs.n	800f9c4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	1ad2      	subs	r2, r2, r3
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7ff ff97 	bl	800f8ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	61fb      	str	r3, [r7, #28]
 800f9c2:	e004      	b.n	800f9ce <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f9ce:	f000 fc71 	bl	80102b4 <vPortExitCritical>

	return xReturn;
 800f9d2:	69fb      	ldr	r3, [r7, #28]
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3720      	adds	r7, #32
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}
 800f9dc:	20005908 	.word	0x20005908
 800f9e0:	2000591c 	.word	0x2000591c

0800f9e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f9e8:	4b03      	ldr	r3, [pc, #12]	; (800f9f8 <vTaskMissedYield+0x14>)
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	601a      	str	r2, [r3, #0]
}
 800f9ee:	bf00      	nop
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr
 800f9f8:	20005918 	.word	0x20005918

0800f9fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b082      	sub	sp, #8
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fa04:	f000 f852 	bl	800faac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fa08:	4b06      	ldr	r3, [pc, #24]	; (800fa24 <prvIdleTask+0x28>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d9f9      	bls.n	800fa04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fa10:	4b05      	ldr	r3, [pc, #20]	; (800fa28 <prvIdleTask+0x2c>)
 800fa12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa16:	601a      	str	r2, [r3, #0]
 800fa18:	f3bf 8f4f 	dsb	sy
 800fa1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fa20:	e7f0      	b.n	800fa04 <prvIdleTask+0x8>
 800fa22:	bf00      	nop
 800fa24:	20005808 	.word	0x20005808
 800fa28:	e000ed04 	.word	0xe000ed04

0800fa2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b082      	sub	sp, #8
 800fa30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa32:	2300      	movs	r3, #0
 800fa34:	607b      	str	r3, [r7, #4]
 800fa36:	e00c      	b.n	800fa52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fa38:	687a      	ldr	r2, [r7, #4]
 800fa3a:	4613      	mov	r3, r2
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	4413      	add	r3, r2
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	4a12      	ldr	r2, [pc, #72]	; (800fa8c <prvInitialiseTaskLists+0x60>)
 800fa44:	4413      	add	r3, r2
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7fe fa4e 	bl	800dee8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	3301      	adds	r3, #1
 800fa50:	607b      	str	r3, [r7, #4]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2b06      	cmp	r3, #6
 800fa56:	d9ef      	bls.n	800fa38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fa58:	480d      	ldr	r0, [pc, #52]	; (800fa90 <prvInitialiseTaskLists+0x64>)
 800fa5a:	f7fe fa45 	bl	800dee8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fa5e:	480d      	ldr	r0, [pc, #52]	; (800fa94 <prvInitialiseTaskLists+0x68>)
 800fa60:	f7fe fa42 	bl	800dee8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fa64:	480c      	ldr	r0, [pc, #48]	; (800fa98 <prvInitialiseTaskLists+0x6c>)
 800fa66:	f7fe fa3f 	bl	800dee8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fa6a:	480c      	ldr	r0, [pc, #48]	; (800fa9c <prvInitialiseTaskLists+0x70>)
 800fa6c:	f7fe fa3c 	bl	800dee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fa70:	480b      	ldr	r0, [pc, #44]	; (800faa0 <prvInitialiseTaskLists+0x74>)
 800fa72:	f7fe fa39 	bl	800dee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fa76:	4b0b      	ldr	r3, [pc, #44]	; (800faa4 <prvInitialiseTaskLists+0x78>)
 800fa78:	4a05      	ldr	r2, [pc, #20]	; (800fa90 <prvInitialiseTaskLists+0x64>)
 800fa7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fa7c:	4b0a      	ldr	r3, [pc, #40]	; (800faa8 <prvInitialiseTaskLists+0x7c>)
 800fa7e:	4a05      	ldr	r2, [pc, #20]	; (800fa94 <prvInitialiseTaskLists+0x68>)
 800fa80:	601a      	str	r2, [r3, #0]
}
 800fa82:	bf00      	nop
 800fa84:	3708      	adds	r7, #8
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	20005808 	.word	0x20005808
 800fa90:	20005894 	.word	0x20005894
 800fa94:	200058a8 	.word	0x200058a8
 800fa98:	200058c4 	.word	0x200058c4
 800fa9c:	200058d8 	.word	0x200058d8
 800faa0:	200058f0 	.word	0x200058f0
 800faa4:	200058bc 	.word	0x200058bc
 800faa8:	200058c0 	.word	0x200058c0

0800faac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fab2:	e019      	b.n	800fae8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fab4:	f000 fbca 	bl	801024c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fab8:	4b10      	ldr	r3, [pc, #64]	; (800fafc <prvCheckTasksWaitingTermination+0x50>)
 800faba:	68db      	ldr	r3, [r3, #12]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	3304      	adds	r3, #4
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7fe fa99 	bl	800dffc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800faca:	4b0d      	ldr	r3, [pc, #52]	; (800fb00 <prvCheckTasksWaitingTermination+0x54>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	3b01      	subs	r3, #1
 800fad0:	4a0b      	ldr	r2, [pc, #44]	; (800fb00 <prvCheckTasksWaitingTermination+0x54>)
 800fad2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fad4:	4b0b      	ldr	r3, [pc, #44]	; (800fb04 <prvCheckTasksWaitingTermination+0x58>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	3b01      	subs	r3, #1
 800fada:	4a0a      	ldr	r2, [pc, #40]	; (800fb04 <prvCheckTasksWaitingTermination+0x58>)
 800fadc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fade:	f000 fbe9 	bl	80102b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 f810 	bl	800fb08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fae8:	4b06      	ldr	r3, [pc, #24]	; (800fb04 <prvCheckTasksWaitingTermination+0x58>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d1e1      	bne.n	800fab4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800faf0:	bf00      	nop
 800faf2:	bf00      	nop
 800faf4:	3708      	adds	r7, #8
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	200058d8 	.word	0x200058d8
 800fb00:	20005904 	.word	0x20005904
 800fb04:	200058ec 	.word	0x200058ec

0800fb08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	334c      	adds	r3, #76	; 0x4c
 800fb14:	4618      	mov	r0, r3
 800fb16:	f002 f883 	bl	8011c20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d108      	bne.n	800fb36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f000 fd85 	bl	8010638 <vPortFree>
				vPortFree( pxTCB );
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 fd82 	bl	8010638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fb34:	e01a      	b.n	800fb6c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d103      	bne.n	800fb48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f000 fd79 	bl	8010638 <vPortFree>
	}
 800fb46:	e011      	b.n	800fb6c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fb4e:	2b02      	cmp	r3, #2
 800fb50:	d00c      	beq.n	800fb6c <prvDeleteTCB+0x64>
	__asm volatile
 800fb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb56:	b672      	cpsid	i
 800fb58:	f383 8811 	msr	BASEPRI, r3
 800fb5c:	f3bf 8f6f 	isb	sy
 800fb60:	f3bf 8f4f 	dsb	sy
 800fb64:	b662      	cpsie	i
 800fb66:	60fb      	str	r3, [r7, #12]
}
 800fb68:	bf00      	nop
 800fb6a:	e7fe      	b.n	800fb6a <prvDeleteTCB+0x62>
	}
 800fb6c:	bf00      	nop
 800fb6e:	3710      	adds	r7, #16
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb7a:	4b0c      	ldr	r3, [pc, #48]	; (800fbac <prvResetNextTaskUnblockTime+0x38>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d104      	bne.n	800fb8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fb84:	4b0a      	ldr	r3, [pc, #40]	; (800fbb0 <prvResetNextTaskUnblockTime+0x3c>)
 800fb86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fb8c:	e008      	b.n	800fba0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb8e:	4b07      	ldr	r3, [pc, #28]	; (800fbac <prvResetNextTaskUnblockTime+0x38>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	68db      	ldr	r3, [r3, #12]
 800fb94:	68db      	ldr	r3, [r3, #12]
 800fb96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	4a04      	ldr	r2, [pc, #16]	; (800fbb0 <prvResetNextTaskUnblockTime+0x3c>)
 800fb9e:	6013      	str	r3, [r2, #0]
}
 800fba0:	bf00      	nop
 800fba2:	370c      	adds	r7, #12
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr
 800fbac:	200058bc 	.word	0x200058bc
 800fbb0:	20005924 	.word	0x20005924

0800fbb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b083      	sub	sp, #12
 800fbb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fbba:	4b0b      	ldr	r3, [pc, #44]	; (800fbe8 <xTaskGetSchedulerState+0x34>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d102      	bne.n	800fbc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	607b      	str	r3, [r7, #4]
 800fbc6:	e008      	b.n	800fbda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbc8:	4b08      	ldr	r3, [pc, #32]	; (800fbec <xTaskGetSchedulerState+0x38>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d102      	bne.n	800fbd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fbd0:	2302      	movs	r3, #2
 800fbd2:	607b      	str	r3, [r7, #4]
 800fbd4:	e001      	b.n	800fbda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fbda:	687b      	ldr	r3, [r7, #4]
	}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	370c      	adds	r7, #12
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe6:	4770      	bx	lr
 800fbe8:	20005910 	.word	0x20005910
 800fbec:	2000592c 	.word	0x2000592c

0800fbf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b084      	sub	sp, #16
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d069      	beq.n	800fcda <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc0a:	4b36      	ldr	r3, [pc, #216]	; (800fce4 <xTaskPriorityInherit+0xf4>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d259      	bcs.n	800fcc8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	699b      	ldr	r3, [r3, #24]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	db06      	blt.n	800fc2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc1c:	4b31      	ldr	r3, [pc, #196]	; (800fce4 <xTaskPriorityInherit+0xf4>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc22:	f1c3 0207 	rsb	r2, r3, #7
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	6959      	ldr	r1, [r3, #20]
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc32:	4613      	mov	r3, r2
 800fc34:	009b      	lsls	r3, r3, #2
 800fc36:	4413      	add	r3, r2
 800fc38:	009b      	lsls	r3, r3, #2
 800fc3a:	4a2b      	ldr	r2, [pc, #172]	; (800fce8 <xTaskPriorityInherit+0xf8>)
 800fc3c:	4413      	add	r3, r2
 800fc3e:	4299      	cmp	r1, r3
 800fc40:	d13a      	bne.n	800fcb8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	3304      	adds	r3, #4
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7fe f9d8 	bl	800dffc <uxListRemove>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d115      	bne.n	800fc7e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc56:	4924      	ldr	r1, [pc, #144]	; (800fce8 <xTaskPriorityInherit+0xf8>)
 800fc58:	4613      	mov	r3, r2
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	4413      	add	r3, r2
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	440b      	add	r3, r1
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d10a      	bne.n	800fc7e <xTaskPriorityInherit+0x8e>
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc6c:	2201      	movs	r2, #1
 800fc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800fc72:	43da      	mvns	r2, r3
 800fc74:	4b1d      	ldr	r3, [pc, #116]	; (800fcec <xTaskPriorityInherit+0xfc>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4013      	ands	r3, r2
 800fc7a:	4a1c      	ldr	r2, [pc, #112]	; (800fcec <xTaskPriorityInherit+0xfc>)
 800fc7c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fc7e:	4b19      	ldr	r3, [pc, #100]	; (800fce4 <xTaskPriorityInherit+0xf4>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc8c:	2201      	movs	r2, #1
 800fc8e:	409a      	lsls	r2, r3
 800fc90:	4b16      	ldr	r3, [pc, #88]	; (800fcec <xTaskPriorityInherit+0xfc>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	4313      	orrs	r3, r2
 800fc96:	4a15      	ldr	r2, [pc, #84]	; (800fcec <xTaskPriorityInherit+0xfc>)
 800fc98:	6013      	str	r3, [r2, #0]
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc9e:	4613      	mov	r3, r2
 800fca0:	009b      	lsls	r3, r3, #2
 800fca2:	4413      	add	r3, r2
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	4a10      	ldr	r2, [pc, #64]	; (800fce8 <xTaskPriorityInherit+0xf8>)
 800fca8:	441a      	add	r2, r3
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	3304      	adds	r3, #4
 800fcae:	4619      	mov	r1, r3
 800fcb0:	4610      	mov	r0, r2
 800fcb2:	f7fe f946 	bl	800df42 <vListInsertEnd>
 800fcb6:	e004      	b.n	800fcc2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fcb8:	4b0a      	ldr	r3, [pc, #40]	; (800fce4 <xTaskPriorityInherit+0xf4>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	60fb      	str	r3, [r7, #12]
 800fcc6:	e008      	b.n	800fcda <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fccc:	4b05      	ldr	r3, [pc, #20]	; (800fce4 <xTaskPriorityInherit+0xf4>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d201      	bcs.n	800fcda <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fcda:	68fb      	ldr	r3, [r7, #12]
	}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3710      	adds	r7, #16
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	20005804 	.word	0x20005804
 800fce8:	20005808 	.word	0x20005808
 800fcec:	2000590c 	.word	0x2000590c

0800fcf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b086      	sub	sp, #24
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d072      	beq.n	800fdec <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fd06:	4b3c      	ldr	r3, [pc, #240]	; (800fdf8 <xTaskPriorityDisinherit+0x108>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	693a      	ldr	r2, [r7, #16]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d00c      	beq.n	800fd2a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800fd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd14:	b672      	cpsid	i
 800fd16:	f383 8811 	msr	BASEPRI, r3
 800fd1a:	f3bf 8f6f 	isb	sy
 800fd1e:	f3bf 8f4f 	dsb	sy
 800fd22:	b662      	cpsie	i
 800fd24:	60fb      	str	r3, [r7, #12]
}
 800fd26:	bf00      	nop
 800fd28:	e7fe      	b.n	800fd28 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d10c      	bne.n	800fd4c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800fd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd36:	b672      	cpsid	i
 800fd38:	f383 8811 	msr	BASEPRI, r3
 800fd3c:	f3bf 8f6f 	isb	sy
 800fd40:	f3bf 8f4f 	dsb	sy
 800fd44:	b662      	cpsie	i
 800fd46:	60bb      	str	r3, [r7, #8]
}
 800fd48:	bf00      	nop
 800fd4a:	e7fe      	b.n	800fd4a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd50:	1e5a      	subs	r2, r3, #1
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d044      	beq.n	800fdec <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d140      	bne.n	800fdec <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	3304      	adds	r3, #4
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fe f944 	bl	800dffc <uxListRemove>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d115      	bne.n	800fda6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd7e:	491f      	ldr	r1, [pc, #124]	; (800fdfc <xTaskPriorityDisinherit+0x10c>)
 800fd80:	4613      	mov	r3, r2
 800fd82:	009b      	lsls	r3, r3, #2
 800fd84:	4413      	add	r3, r2
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	440b      	add	r3, r1
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d10a      	bne.n	800fda6 <xTaskPriorityDisinherit+0xb6>
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd94:	2201      	movs	r2, #1
 800fd96:	fa02 f303 	lsl.w	r3, r2, r3
 800fd9a:	43da      	mvns	r2, r3
 800fd9c:	4b18      	ldr	r3, [pc, #96]	; (800fe00 <xTaskPriorityDisinherit+0x110>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4013      	ands	r3, r2
 800fda2:	4a17      	ldr	r2, [pc, #92]	; (800fe00 <xTaskPriorityDisinherit+0x110>)
 800fda4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdae:	693b      	ldr	r3, [r7, #16]
 800fdb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdb2:	f1c3 0207 	rsb	r2, r3, #7
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	409a      	lsls	r2, r3
 800fdc2:	4b0f      	ldr	r3, [pc, #60]	; (800fe00 <xTaskPriorityDisinherit+0x110>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	4a0d      	ldr	r2, [pc, #52]	; (800fe00 <xTaskPriorityDisinherit+0x110>)
 800fdca:	6013      	str	r3, [r2, #0]
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdd0:	4613      	mov	r3, r2
 800fdd2:	009b      	lsls	r3, r3, #2
 800fdd4:	4413      	add	r3, r2
 800fdd6:	009b      	lsls	r3, r3, #2
 800fdd8:	4a08      	ldr	r2, [pc, #32]	; (800fdfc <xTaskPriorityDisinherit+0x10c>)
 800fdda:	441a      	add	r2, r3
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	3304      	adds	r3, #4
 800fde0:	4619      	mov	r1, r3
 800fde2:	4610      	mov	r0, r2
 800fde4:	f7fe f8ad 	bl	800df42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fde8:	2301      	movs	r3, #1
 800fdea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fdec:	697b      	ldr	r3, [r7, #20]
	}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3718      	adds	r7, #24
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	20005804 	.word	0x20005804
 800fdfc:	20005808 	.word	0x20005808
 800fe00:	2000590c 	.word	0x2000590c

0800fe04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b088      	sub	sp, #32
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fe12:	2301      	movs	r3, #1
 800fe14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	f000 8087 	beq.w	800ff2c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fe1e:	69bb      	ldr	r3, [r7, #24]
 800fe20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d10c      	bne.n	800fe40 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800fe26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2a:	b672      	cpsid	i
 800fe2c:	f383 8811 	msr	BASEPRI, r3
 800fe30:	f3bf 8f6f 	isb	sy
 800fe34:	f3bf 8f4f 	dsb	sy
 800fe38:	b662      	cpsie	i
 800fe3a:	60fb      	str	r3, [r7, #12]
}
 800fe3c:	bf00      	nop
 800fe3e:	e7fe      	b.n	800fe3e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fe40:	69bb      	ldr	r3, [r7, #24]
 800fe42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe44:	683a      	ldr	r2, [r7, #0]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d902      	bls.n	800fe50 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	61fb      	str	r3, [r7, #28]
 800fe4e:	e002      	b.n	800fe56 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe54:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe5a:	69fa      	ldr	r2, [r7, #28]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d065      	beq.n	800ff2c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fe60:	69bb      	ldr	r3, [r7, #24]
 800fe62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe64:	697a      	ldr	r2, [r7, #20]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d160      	bne.n	800ff2c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fe6a:	4b32      	ldr	r3, [pc, #200]	; (800ff34 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	69ba      	ldr	r2, [r7, #24]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d10c      	bne.n	800fe8e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800fe74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe78:	b672      	cpsid	i
 800fe7a:	f383 8811 	msr	BASEPRI, r3
 800fe7e:	f3bf 8f6f 	isb	sy
 800fe82:	f3bf 8f4f 	dsb	sy
 800fe86:	b662      	cpsie	i
 800fe88:	60bb      	str	r3, [r7, #8]
}
 800fe8a:	bf00      	nop
 800fe8c:	e7fe      	b.n	800fe8c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fe8e:	69bb      	ldr	r3, [r7, #24]
 800fe90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe92:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	69fa      	ldr	r2, [r7, #28]
 800fe98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fe9a:	69bb      	ldr	r3, [r7, #24]
 800fe9c:	699b      	ldr	r3, [r3, #24]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	db04      	blt.n	800feac <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fea2:	69fb      	ldr	r3, [r7, #28]
 800fea4:	f1c3 0207 	rsb	r2, r3, #7
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800feac:	69bb      	ldr	r3, [r7, #24]
 800feae:	6959      	ldr	r1, [r3, #20]
 800feb0:	693a      	ldr	r2, [r7, #16]
 800feb2:	4613      	mov	r3, r2
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	4413      	add	r3, r2
 800feb8:	009b      	lsls	r3, r3, #2
 800feba:	4a1f      	ldr	r2, [pc, #124]	; (800ff38 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800febc:	4413      	add	r3, r2
 800febe:	4299      	cmp	r1, r3
 800fec0:	d134      	bne.n	800ff2c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	3304      	adds	r3, #4
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fe f898 	bl	800dffc <uxListRemove>
 800fecc:	4603      	mov	r3, r0
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d115      	bne.n	800fefe <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fed6:	4918      	ldr	r1, [pc, #96]	; (800ff38 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800fed8:	4613      	mov	r3, r2
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	4413      	add	r3, r2
 800fede:	009b      	lsls	r3, r3, #2
 800fee0:	440b      	add	r3, r1
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d10a      	bne.n	800fefe <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800fee8:	69bb      	ldr	r3, [r7, #24]
 800feea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feec:	2201      	movs	r2, #1
 800feee:	fa02 f303 	lsl.w	r3, r2, r3
 800fef2:	43da      	mvns	r2, r3
 800fef4:	4b11      	ldr	r3, [pc, #68]	; (800ff3c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4013      	ands	r3, r2
 800fefa:	4a10      	ldr	r2, [pc, #64]	; (800ff3c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fefc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fefe:	69bb      	ldr	r3, [r7, #24]
 800ff00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff02:	2201      	movs	r2, #1
 800ff04:	409a      	lsls	r2, r3
 800ff06:	4b0d      	ldr	r3, [pc, #52]	; (800ff3c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4313      	orrs	r3, r2
 800ff0c:	4a0b      	ldr	r2, [pc, #44]	; (800ff3c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ff0e:	6013      	str	r3, [r2, #0]
 800ff10:	69bb      	ldr	r3, [r7, #24]
 800ff12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff14:	4613      	mov	r3, r2
 800ff16:	009b      	lsls	r3, r3, #2
 800ff18:	4413      	add	r3, r2
 800ff1a:	009b      	lsls	r3, r3, #2
 800ff1c:	4a06      	ldr	r2, [pc, #24]	; (800ff38 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ff1e:	441a      	add	r2, r3
 800ff20:	69bb      	ldr	r3, [r7, #24]
 800ff22:	3304      	adds	r3, #4
 800ff24:	4619      	mov	r1, r3
 800ff26:	4610      	mov	r0, r2
 800ff28:	f7fe f80b 	bl	800df42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff2c:	bf00      	nop
 800ff2e:	3720      	adds	r7, #32
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}
 800ff34:	20005804 	.word	0x20005804
 800ff38:	20005808 	.word	0x20005808
 800ff3c:	2000590c 	.word	0x2000590c

0800ff40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ff40:	b480      	push	{r7}
 800ff42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ff44:	4b07      	ldr	r3, [pc, #28]	; (800ff64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d004      	beq.n	800ff56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ff4c:	4b05      	ldr	r3, [pc, #20]	; (800ff64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ff52:	3201      	adds	r2, #1
 800ff54:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ff56:	4b03      	ldr	r3, [pc, #12]	; (800ff64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ff58:	681b      	ldr	r3, [r3, #0]
	}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr
 800ff64:	20005804 	.word	0x20005804

0800ff68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ff72:	4b29      	ldr	r3, [pc, #164]	; (8010018 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff78:	4b28      	ldr	r3, [pc, #160]	; (801001c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	3304      	adds	r3, #4
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7fe f83c 	bl	800dffc <uxListRemove>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d10b      	bne.n	800ffa2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ff8a:	4b24      	ldr	r3, [pc, #144]	; (801001c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff90:	2201      	movs	r2, #1
 800ff92:	fa02 f303 	lsl.w	r3, r2, r3
 800ff96:	43da      	mvns	r2, r3
 800ff98:	4b21      	ldr	r3, [pc, #132]	; (8010020 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4013      	ands	r3, r2
 800ff9e:	4a20      	ldr	r2, [pc, #128]	; (8010020 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ffa0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffa8:	d10a      	bne.n	800ffc0 <prvAddCurrentTaskToDelayedList+0x58>
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d007      	beq.n	800ffc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffb0:	4b1a      	ldr	r3, [pc, #104]	; (801001c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	3304      	adds	r3, #4
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	481a      	ldr	r0, [pc, #104]	; (8010024 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ffba:	f7fd ffc2 	bl	800df42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ffbe:	e026      	b.n	801000e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ffc0:	68fa      	ldr	r2, [r7, #12]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	4413      	add	r3, r2
 800ffc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ffc8:	4b14      	ldr	r3, [pc, #80]	; (801001c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	68ba      	ldr	r2, [r7, #8]
 800ffce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ffd0:	68ba      	ldr	r2, [r7, #8]
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d209      	bcs.n	800ffec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffd8:	4b13      	ldr	r3, [pc, #76]	; (8010028 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ffda:	681a      	ldr	r2, [r3, #0]
 800ffdc:	4b0f      	ldr	r3, [pc, #60]	; (801001c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	3304      	adds	r3, #4
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	4610      	mov	r0, r2
 800ffe6:	f7fd ffd0 	bl	800df8a <vListInsert>
}
 800ffea:	e010      	b.n	801000e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffec:	4b0f      	ldr	r3, [pc, #60]	; (801002c <prvAddCurrentTaskToDelayedList+0xc4>)
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	4b0a      	ldr	r3, [pc, #40]	; (801001c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	3304      	adds	r3, #4
 800fff6:	4619      	mov	r1, r3
 800fff8:	4610      	mov	r0, r2
 800fffa:	f7fd ffc6 	bl	800df8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fffe:	4b0c      	ldr	r3, [pc, #48]	; (8010030 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	68ba      	ldr	r2, [r7, #8]
 8010004:	429a      	cmp	r2, r3
 8010006:	d202      	bcs.n	801000e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010008:	4a09      	ldr	r2, [pc, #36]	; (8010030 <prvAddCurrentTaskToDelayedList+0xc8>)
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	6013      	str	r3, [r2, #0]
}
 801000e:	bf00      	nop
 8010010:	3710      	adds	r7, #16
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}
 8010016:	bf00      	nop
 8010018:	20005908 	.word	0x20005908
 801001c:	20005804 	.word	0x20005804
 8010020:	2000590c 	.word	0x2000590c
 8010024:	200058f0 	.word	0x200058f0
 8010028:	200058c0 	.word	0x200058c0
 801002c:	200058bc 	.word	0x200058bc
 8010030:	20005924 	.word	0x20005924

08010034 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010034:	b480      	push	{r7}
 8010036:	b085      	sub	sp, #20
 8010038:	af00      	add	r7, sp, #0
 801003a:	60f8      	str	r0, [r7, #12]
 801003c:	60b9      	str	r1, [r7, #8]
 801003e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	3b04      	subs	r3, #4
 8010044:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801004c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	3b04      	subs	r3, #4
 8010052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	f023 0201 	bic.w	r2, r3, #1
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	3b04      	subs	r3, #4
 8010062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010064:	4a0c      	ldr	r2, [pc, #48]	; (8010098 <pxPortInitialiseStack+0x64>)
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	3b14      	subs	r3, #20
 801006e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	3b04      	subs	r3, #4
 801007a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	f06f 0202 	mvn.w	r2, #2
 8010082:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	3b20      	subs	r3, #32
 8010088:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801008a:	68fb      	ldr	r3, [r7, #12]
}
 801008c:	4618      	mov	r0, r3
 801008e:	3714      	adds	r7, #20
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr
 8010098:	0801009d 	.word	0x0801009d

0801009c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801009c:	b480      	push	{r7}
 801009e:	b085      	sub	sp, #20
 80100a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80100a2:	2300      	movs	r3, #0
 80100a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80100a6:	4b14      	ldr	r3, [pc, #80]	; (80100f8 <prvTaskExitError+0x5c>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100ae:	d00c      	beq.n	80100ca <prvTaskExitError+0x2e>
	__asm volatile
 80100b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b4:	b672      	cpsid	i
 80100b6:	f383 8811 	msr	BASEPRI, r3
 80100ba:	f3bf 8f6f 	isb	sy
 80100be:	f3bf 8f4f 	dsb	sy
 80100c2:	b662      	cpsie	i
 80100c4:	60fb      	str	r3, [r7, #12]
}
 80100c6:	bf00      	nop
 80100c8:	e7fe      	b.n	80100c8 <prvTaskExitError+0x2c>
	__asm volatile
 80100ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ce:	b672      	cpsid	i
 80100d0:	f383 8811 	msr	BASEPRI, r3
 80100d4:	f3bf 8f6f 	isb	sy
 80100d8:	f3bf 8f4f 	dsb	sy
 80100dc:	b662      	cpsie	i
 80100de:	60bb      	str	r3, [r7, #8]
}
 80100e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80100e2:	bf00      	nop
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d0fc      	beq.n	80100e4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80100ea:	bf00      	nop
 80100ec:	bf00      	nop
 80100ee:	3714      	adds	r7, #20
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr
 80100f8:	200009d8 	.word	0x200009d8
 80100fc:	00000000 	.word	0x00000000

08010100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010100:	4b07      	ldr	r3, [pc, #28]	; (8010120 <pxCurrentTCBConst2>)
 8010102:	6819      	ldr	r1, [r3, #0]
 8010104:	6808      	ldr	r0, [r1, #0]
 8010106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801010a:	f380 8809 	msr	PSP, r0
 801010e:	f3bf 8f6f 	isb	sy
 8010112:	f04f 0000 	mov.w	r0, #0
 8010116:	f380 8811 	msr	BASEPRI, r0
 801011a:	4770      	bx	lr
 801011c:	f3af 8000 	nop.w

08010120 <pxCurrentTCBConst2>:
 8010120:	20005804 	.word	0x20005804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010124:	bf00      	nop
 8010126:	bf00      	nop

08010128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010128:	4808      	ldr	r0, [pc, #32]	; (801014c <prvPortStartFirstTask+0x24>)
 801012a:	6800      	ldr	r0, [r0, #0]
 801012c:	6800      	ldr	r0, [r0, #0]
 801012e:	f380 8808 	msr	MSP, r0
 8010132:	f04f 0000 	mov.w	r0, #0
 8010136:	f380 8814 	msr	CONTROL, r0
 801013a:	b662      	cpsie	i
 801013c:	b661      	cpsie	f
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	f3bf 8f6f 	isb	sy
 8010146:	df00      	svc	0
 8010148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801014a:	bf00      	nop
 801014c:	e000ed08 	.word	0xe000ed08

08010150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010156:	4b37      	ldr	r3, [pc, #220]	; (8010234 <xPortStartScheduler+0xe4>)
 8010158:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	b2db      	uxtb	r3, r3
 8010160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	22ff      	movs	r2, #255	; 0xff
 8010166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	b2db      	uxtb	r3, r3
 801016e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010170:	78fb      	ldrb	r3, [r7, #3]
 8010172:	b2db      	uxtb	r3, r3
 8010174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010178:	b2da      	uxtb	r2, r3
 801017a:	4b2f      	ldr	r3, [pc, #188]	; (8010238 <xPortStartScheduler+0xe8>)
 801017c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801017e:	4b2f      	ldr	r3, [pc, #188]	; (801023c <xPortStartScheduler+0xec>)
 8010180:	2207      	movs	r2, #7
 8010182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010184:	e009      	b.n	801019a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010186:	4b2d      	ldr	r3, [pc, #180]	; (801023c <xPortStartScheduler+0xec>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	3b01      	subs	r3, #1
 801018c:	4a2b      	ldr	r2, [pc, #172]	; (801023c <xPortStartScheduler+0xec>)
 801018e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010190:	78fb      	ldrb	r3, [r7, #3]
 8010192:	b2db      	uxtb	r3, r3
 8010194:	005b      	lsls	r3, r3, #1
 8010196:	b2db      	uxtb	r3, r3
 8010198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801019a:	78fb      	ldrb	r3, [r7, #3]
 801019c:	b2db      	uxtb	r3, r3
 801019e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101a2:	2b80      	cmp	r3, #128	; 0x80
 80101a4:	d0ef      	beq.n	8010186 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80101a6:	4b25      	ldr	r3, [pc, #148]	; (801023c <xPortStartScheduler+0xec>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f1c3 0307 	rsb	r3, r3, #7
 80101ae:	2b04      	cmp	r3, #4
 80101b0:	d00c      	beq.n	80101cc <xPortStartScheduler+0x7c>
	__asm volatile
 80101b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b6:	b672      	cpsid	i
 80101b8:	f383 8811 	msr	BASEPRI, r3
 80101bc:	f3bf 8f6f 	isb	sy
 80101c0:	f3bf 8f4f 	dsb	sy
 80101c4:	b662      	cpsie	i
 80101c6:	60bb      	str	r3, [r7, #8]
}
 80101c8:	bf00      	nop
 80101ca:	e7fe      	b.n	80101ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80101cc:	4b1b      	ldr	r3, [pc, #108]	; (801023c <xPortStartScheduler+0xec>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	021b      	lsls	r3, r3, #8
 80101d2:	4a1a      	ldr	r2, [pc, #104]	; (801023c <xPortStartScheduler+0xec>)
 80101d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101d6:	4b19      	ldr	r3, [pc, #100]	; (801023c <xPortStartScheduler+0xec>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80101de:	4a17      	ldr	r2, [pc, #92]	; (801023c <xPortStartScheduler+0xec>)
 80101e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	b2da      	uxtb	r2, r3
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80101ea:	4b15      	ldr	r3, [pc, #84]	; (8010240 <xPortStartScheduler+0xf0>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	4a14      	ldr	r2, [pc, #80]	; (8010240 <xPortStartScheduler+0xf0>)
 80101f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80101f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80101f6:	4b12      	ldr	r3, [pc, #72]	; (8010240 <xPortStartScheduler+0xf0>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	4a11      	ldr	r2, [pc, #68]	; (8010240 <xPortStartScheduler+0xf0>)
 80101fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010200:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010202:	f000 f8dd 	bl	80103c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010206:	4b0f      	ldr	r3, [pc, #60]	; (8010244 <xPortStartScheduler+0xf4>)
 8010208:	2200      	movs	r2, #0
 801020a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801020c:	f000 f8fc 	bl	8010408 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010210:	4b0d      	ldr	r3, [pc, #52]	; (8010248 <xPortStartScheduler+0xf8>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	4a0c      	ldr	r2, [pc, #48]	; (8010248 <xPortStartScheduler+0xf8>)
 8010216:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801021a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801021c:	f7ff ff84 	bl	8010128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010220:	f7ff fa76 	bl	800f710 <vTaskSwitchContext>
	prvTaskExitError();
 8010224:	f7ff ff3a 	bl	801009c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010228:	2300      	movs	r3, #0
}
 801022a:	4618      	mov	r0, r3
 801022c:	3710      	adds	r7, #16
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	e000e400 	.word	0xe000e400
 8010238:	20005930 	.word	0x20005930
 801023c:	20005934 	.word	0x20005934
 8010240:	e000ed20 	.word	0xe000ed20
 8010244:	200009d8 	.word	0x200009d8
 8010248:	e000ef34 	.word	0xe000ef34

0801024c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
	__asm volatile
 8010252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010256:	b672      	cpsid	i
 8010258:	f383 8811 	msr	BASEPRI, r3
 801025c:	f3bf 8f6f 	isb	sy
 8010260:	f3bf 8f4f 	dsb	sy
 8010264:	b662      	cpsie	i
 8010266:	607b      	str	r3, [r7, #4]
}
 8010268:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801026a:	4b10      	ldr	r3, [pc, #64]	; (80102ac <vPortEnterCritical+0x60>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	3301      	adds	r3, #1
 8010270:	4a0e      	ldr	r2, [pc, #56]	; (80102ac <vPortEnterCritical+0x60>)
 8010272:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010274:	4b0d      	ldr	r3, [pc, #52]	; (80102ac <vPortEnterCritical+0x60>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b01      	cmp	r3, #1
 801027a:	d111      	bne.n	80102a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801027c:	4b0c      	ldr	r3, [pc, #48]	; (80102b0 <vPortEnterCritical+0x64>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	b2db      	uxtb	r3, r3
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00c      	beq.n	80102a0 <vPortEnterCritical+0x54>
	__asm volatile
 8010286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028a:	b672      	cpsid	i
 801028c:	f383 8811 	msr	BASEPRI, r3
 8010290:	f3bf 8f6f 	isb	sy
 8010294:	f3bf 8f4f 	dsb	sy
 8010298:	b662      	cpsie	i
 801029a:	603b      	str	r3, [r7, #0]
}
 801029c:	bf00      	nop
 801029e:	e7fe      	b.n	801029e <vPortEnterCritical+0x52>
	}
}
 80102a0:	bf00      	nop
 80102a2:	370c      	adds	r7, #12
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr
 80102ac:	200009d8 	.word	0x200009d8
 80102b0:	e000ed04 	.word	0xe000ed04

080102b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80102b4:	b480      	push	{r7}
 80102b6:	b083      	sub	sp, #12
 80102b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80102ba:	4b13      	ldr	r3, [pc, #76]	; (8010308 <vPortExitCritical+0x54>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d10c      	bne.n	80102dc <vPortExitCritical+0x28>
	__asm volatile
 80102c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c6:	b672      	cpsid	i
 80102c8:	f383 8811 	msr	BASEPRI, r3
 80102cc:	f3bf 8f6f 	isb	sy
 80102d0:	f3bf 8f4f 	dsb	sy
 80102d4:	b662      	cpsie	i
 80102d6:	607b      	str	r3, [r7, #4]
}
 80102d8:	bf00      	nop
 80102da:	e7fe      	b.n	80102da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80102dc:	4b0a      	ldr	r3, [pc, #40]	; (8010308 <vPortExitCritical+0x54>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	3b01      	subs	r3, #1
 80102e2:	4a09      	ldr	r2, [pc, #36]	; (8010308 <vPortExitCritical+0x54>)
 80102e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80102e6:	4b08      	ldr	r3, [pc, #32]	; (8010308 <vPortExitCritical+0x54>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d105      	bne.n	80102fa <vPortExitCritical+0x46>
 80102ee:	2300      	movs	r3, #0
 80102f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	f383 8811 	msr	BASEPRI, r3
}
 80102f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80102fa:	bf00      	nop
 80102fc:	370c      	adds	r7, #12
 80102fe:	46bd      	mov	sp, r7
 8010300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010304:	4770      	bx	lr
 8010306:	bf00      	nop
 8010308:	200009d8 	.word	0x200009d8
 801030c:	00000000 	.word	0x00000000

08010310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010310:	f3ef 8009 	mrs	r0, PSP
 8010314:	f3bf 8f6f 	isb	sy
 8010318:	4b15      	ldr	r3, [pc, #84]	; (8010370 <pxCurrentTCBConst>)
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	f01e 0f10 	tst.w	lr, #16
 8010320:	bf08      	it	eq
 8010322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801032a:	6010      	str	r0, [r2, #0]
 801032c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010334:	b672      	cpsid	i
 8010336:	f380 8811 	msr	BASEPRI, r0
 801033a:	f3bf 8f4f 	dsb	sy
 801033e:	f3bf 8f6f 	isb	sy
 8010342:	b662      	cpsie	i
 8010344:	f7ff f9e4 	bl	800f710 <vTaskSwitchContext>
 8010348:	f04f 0000 	mov.w	r0, #0
 801034c:	f380 8811 	msr	BASEPRI, r0
 8010350:	bc09      	pop	{r0, r3}
 8010352:	6819      	ldr	r1, [r3, #0]
 8010354:	6808      	ldr	r0, [r1, #0]
 8010356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801035a:	f01e 0f10 	tst.w	lr, #16
 801035e:	bf08      	it	eq
 8010360:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010364:	f380 8809 	msr	PSP, r0
 8010368:	f3bf 8f6f 	isb	sy
 801036c:	4770      	bx	lr
 801036e:	bf00      	nop

08010370 <pxCurrentTCBConst>:
 8010370:	20005804 	.word	0x20005804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010374:	bf00      	nop
 8010376:	bf00      	nop

08010378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
	__asm volatile
 801037e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010382:	b672      	cpsid	i
 8010384:	f383 8811 	msr	BASEPRI, r3
 8010388:	f3bf 8f6f 	isb	sy
 801038c:	f3bf 8f4f 	dsb	sy
 8010390:	b662      	cpsie	i
 8010392:	607b      	str	r3, [r7, #4]
}
 8010394:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010396:	f7ff f901 	bl	800f59c <xTaskIncrementTick>
 801039a:	4603      	mov	r3, r0
 801039c:	2b00      	cmp	r3, #0
 801039e:	d003      	beq.n	80103a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80103a0:	4b06      	ldr	r3, [pc, #24]	; (80103bc <SysTick_Handler+0x44>)
 80103a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103a6:	601a      	str	r2, [r3, #0]
 80103a8:	2300      	movs	r3, #0
 80103aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	f383 8811 	msr	BASEPRI, r3
}
 80103b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80103b4:	bf00      	nop
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	e000ed04 	.word	0xe000ed04

080103c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80103c0:	b480      	push	{r7}
 80103c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103c4:	4b0b      	ldr	r3, [pc, #44]	; (80103f4 <vPortSetupTimerInterrupt+0x34>)
 80103c6:	2200      	movs	r2, #0
 80103c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103ca:	4b0b      	ldr	r3, [pc, #44]	; (80103f8 <vPortSetupTimerInterrupt+0x38>)
 80103cc:	2200      	movs	r2, #0
 80103ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103d0:	4b0a      	ldr	r3, [pc, #40]	; (80103fc <vPortSetupTimerInterrupt+0x3c>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4a0a      	ldr	r2, [pc, #40]	; (8010400 <vPortSetupTimerInterrupt+0x40>)
 80103d6:	fba2 2303 	umull	r2, r3, r2, r3
 80103da:	099b      	lsrs	r3, r3, #6
 80103dc:	4a09      	ldr	r2, [pc, #36]	; (8010404 <vPortSetupTimerInterrupt+0x44>)
 80103de:	3b01      	subs	r3, #1
 80103e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103e2:	4b04      	ldr	r3, [pc, #16]	; (80103f4 <vPortSetupTimerInterrupt+0x34>)
 80103e4:	2207      	movs	r2, #7
 80103e6:	601a      	str	r2, [r3, #0]
}
 80103e8:	bf00      	nop
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	e000e010 	.word	0xe000e010
 80103f8:	e000e018 	.word	0xe000e018
 80103fc:	200009cc 	.word	0x200009cc
 8010400:	10624dd3 	.word	0x10624dd3
 8010404:	e000e014 	.word	0xe000e014

08010408 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010408:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010418 <vPortEnableVFP+0x10>
 801040c:	6801      	ldr	r1, [r0, #0]
 801040e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010412:	6001      	str	r1, [r0, #0]
 8010414:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010416:	bf00      	nop
 8010418:	e000ed88 	.word	0xe000ed88

0801041c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010422:	f3ef 8305 	mrs	r3, IPSR
 8010426:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2b0f      	cmp	r3, #15
 801042c:	d916      	bls.n	801045c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801042e:	4a19      	ldr	r2, [pc, #100]	; (8010494 <vPortValidateInterruptPriority+0x78>)
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	4413      	add	r3, r2
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010438:	4b17      	ldr	r3, [pc, #92]	; (8010498 <vPortValidateInterruptPriority+0x7c>)
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	7afa      	ldrb	r2, [r7, #11]
 801043e:	429a      	cmp	r2, r3
 8010440:	d20c      	bcs.n	801045c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010446:	b672      	cpsid	i
 8010448:	f383 8811 	msr	BASEPRI, r3
 801044c:	f3bf 8f6f 	isb	sy
 8010450:	f3bf 8f4f 	dsb	sy
 8010454:	b662      	cpsie	i
 8010456:	607b      	str	r3, [r7, #4]
}
 8010458:	bf00      	nop
 801045a:	e7fe      	b.n	801045a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801045c:	4b0f      	ldr	r3, [pc, #60]	; (801049c <vPortValidateInterruptPriority+0x80>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010464:	4b0e      	ldr	r3, [pc, #56]	; (80104a0 <vPortValidateInterruptPriority+0x84>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	429a      	cmp	r2, r3
 801046a:	d90c      	bls.n	8010486 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801046c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010470:	b672      	cpsid	i
 8010472:	f383 8811 	msr	BASEPRI, r3
 8010476:	f3bf 8f6f 	isb	sy
 801047a:	f3bf 8f4f 	dsb	sy
 801047e:	b662      	cpsie	i
 8010480:	603b      	str	r3, [r7, #0]
}
 8010482:	bf00      	nop
 8010484:	e7fe      	b.n	8010484 <vPortValidateInterruptPriority+0x68>
	}
 8010486:	bf00      	nop
 8010488:	3714      	adds	r7, #20
 801048a:	46bd      	mov	sp, r7
 801048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010490:	4770      	bx	lr
 8010492:	bf00      	nop
 8010494:	e000e3f0 	.word	0xe000e3f0
 8010498:	20005930 	.word	0x20005930
 801049c:	e000ed0c 	.word	0xe000ed0c
 80104a0:	20005934 	.word	0x20005934

080104a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b08a      	sub	sp, #40	; 0x28
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80104ac:	2300      	movs	r3, #0
 80104ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80104b0:	f7fe ffa6 	bl	800f400 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80104b4:	4b5b      	ldr	r3, [pc, #364]	; (8010624 <pvPortMalloc+0x180>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d101      	bne.n	80104c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80104bc:	f000 f91a 	bl	80106f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80104c0:	4b59      	ldr	r3, [pc, #356]	; (8010628 <pvPortMalloc+0x184>)
 80104c2:	681a      	ldr	r2, [r3, #0]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	4013      	ands	r3, r2
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	f040 8092 	bne.w	80105f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d01f      	beq.n	8010514 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80104d4:	2208      	movs	r2, #8
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	4413      	add	r3, r2
 80104da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f003 0307 	and.w	r3, r3, #7
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d016      	beq.n	8010514 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f023 0307 	bic.w	r3, r3, #7
 80104ec:	3308      	adds	r3, #8
 80104ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f003 0307 	and.w	r3, r3, #7
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d00c      	beq.n	8010514 <pvPortMalloc+0x70>
	__asm volatile
 80104fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104fe:	b672      	cpsid	i
 8010500:	f383 8811 	msr	BASEPRI, r3
 8010504:	f3bf 8f6f 	isb	sy
 8010508:	f3bf 8f4f 	dsb	sy
 801050c:	b662      	cpsie	i
 801050e:	617b      	str	r3, [r7, #20]
}
 8010510:	bf00      	nop
 8010512:	e7fe      	b.n	8010512 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d06b      	beq.n	80105f2 <pvPortMalloc+0x14e>
 801051a:	4b44      	ldr	r3, [pc, #272]	; (801062c <pvPortMalloc+0x188>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	429a      	cmp	r2, r3
 8010522:	d866      	bhi.n	80105f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010524:	4b42      	ldr	r3, [pc, #264]	; (8010630 <pvPortMalloc+0x18c>)
 8010526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010528:	4b41      	ldr	r3, [pc, #260]	; (8010630 <pvPortMalloc+0x18c>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801052e:	e004      	b.n	801053a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801053a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	429a      	cmp	r2, r3
 8010542:	d903      	bls.n	801054c <pvPortMalloc+0xa8>
 8010544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d1f1      	bne.n	8010530 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801054c:	4b35      	ldr	r3, [pc, #212]	; (8010624 <pvPortMalloc+0x180>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010552:	429a      	cmp	r2, r3
 8010554:	d04d      	beq.n	80105f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010556:	6a3b      	ldr	r3, [r7, #32]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	2208      	movs	r2, #8
 801055c:	4413      	add	r3, r2
 801055e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	6a3b      	ldr	r3, [r7, #32]
 8010566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056a:	685a      	ldr	r2, [r3, #4]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	1ad2      	subs	r2, r2, r3
 8010570:	2308      	movs	r3, #8
 8010572:	005b      	lsls	r3, r3, #1
 8010574:	429a      	cmp	r2, r3
 8010576:	d921      	bls.n	80105bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4413      	add	r3, r2
 801057e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010580:	69bb      	ldr	r3, [r7, #24]
 8010582:	f003 0307 	and.w	r3, r3, #7
 8010586:	2b00      	cmp	r3, #0
 8010588:	d00c      	beq.n	80105a4 <pvPortMalloc+0x100>
	__asm volatile
 801058a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801058e:	b672      	cpsid	i
 8010590:	f383 8811 	msr	BASEPRI, r3
 8010594:	f3bf 8f6f 	isb	sy
 8010598:	f3bf 8f4f 	dsb	sy
 801059c:	b662      	cpsie	i
 801059e:	613b      	str	r3, [r7, #16]
}
 80105a0:	bf00      	nop
 80105a2:	e7fe      	b.n	80105a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80105a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a6:	685a      	ldr	r2, [r3, #4]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	1ad2      	subs	r2, r2, r3
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80105b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b2:	687a      	ldr	r2, [r7, #4]
 80105b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80105b6:	69b8      	ldr	r0, [r7, #24]
 80105b8:	f000 f8fe 	bl	80107b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80105bc:	4b1b      	ldr	r3, [pc, #108]	; (801062c <pvPortMalloc+0x188>)
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	4a19      	ldr	r2, [pc, #100]	; (801062c <pvPortMalloc+0x188>)
 80105c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80105ca:	4b18      	ldr	r3, [pc, #96]	; (801062c <pvPortMalloc+0x188>)
 80105cc:	681a      	ldr	r2, [r3, #0]
 80105ce:	4b19      	ldr	r3, [pc, #100]	; (8010634 <pvPortMalloc+0x190>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d203      	bcs.n	80105de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80105d6:	4b15      	ldr	r3, [pc, #84]	; (801062c <pvPortMalloc+0x188>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	4a16      	ldr	r2, [pc, #88]	; (8010634 <pvPortMalloc+0x190>)
 80105dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80105de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e0:	685a      	ldr	r2, [r3, #4]
 80105e2:	4b11      	ldr	r3, [pc, #68]	; (8010628 <pvPortMalloc+0x184>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	431a      	orrs	r2, r3
 80105e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80105ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ee:	2200      	movs	r2, #0
 80105f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80105f2:	f7fe ff13 	bl	800f41c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	f003 0307 	and.w	r3, r3, #7
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00c      	beq.n	801061a <pvPortMalloc+0x176>
	__asm volatile
 8010600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010604:	b672      	cpsid	i
 8010606:	f383 8811 	msr	BASEPRI, r3
 801060a:	f3bf 8f6f 	isb	sy
 801060e:	f3bf 8f4f 	dsb	sy
 8010612:	b662      	cpsie	i
 8010614:	60fb      	str	r3, [r7, #12]
}
 8010616:	bf00      	nop
 8010618:	e7fe      	b.n	8010618 <pvPortMalloc+0x174>
	return pvReturn;
 801061a:	69fb      	ldr	r3, [r7, #28]
}
 801061c:	4618      	mov	r0, r3
 801061e:	3728      	adds	r7, #40	; 0x28
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	20009540 	.word	0x20009540
 8010628:	2000954c 	.word	0x2000954c
 801062c:	20009544 	.word	0x20009544
 8010630:	20009538 	.word	0x20009538
 8010634:	20009548 	.word	0x20009548

08010638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b086      	sub	sp, #24
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d04c      	beq.n	80106e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801064a:	2308      	movs	r3, #8
 801064c:	425b      	negs	r3, r3
 801064e:	697a      	ldr	r2, [r7, #20]
 8010650:	4413      	add	r3, r2
 8010652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	685a      	ldr	r2, [r3, #4]
 801065c:	4b23      	ldr	r3, [pc, #140]	; (80106ec <vPortFree+0xb4>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4013      	ands	r3, r2
 8010662:	2b00      	cmp	r3, #0
 8010664:	d10c      	bne.n	8010680 <vPortFree+0x48>
	__asm volatile
 8010666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066a:	b672      	cpsid	i
 801066c:	f383 8811 	msr	BASEPRI, r3
 8010670:	f3bf 8f6f 	isb	sy
 8010674:	f3bf 8f4f 	dsb	sy
 8010678:	b662      	cpsie	i
 801067a:	60fb      	str	r3, [r7, #12]
}
 801067c:	bf00      	nop
 801067e:	e7fe      	b.n	801067e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d00c      	beq.n	80106a2 <vPortFree+0x6a>
	__asm volatile
 8010688:	f04f 0350 	mov.w	r3, #80	; 0x50
 801068c:	b672      	cpsid	i
 801068e:	f383 8811 	msr	BASEPRI, r3
 8010692:	f3bf 8f6f 	isb	sy
 8010696:	f3bf 8f4f 	dsb	sy
 801069a:	b662      	cpsie	i
 801069c:	60bb      	str	r3, [r7, #8]
}
 801069e:	bf00      	nop
 80106a0:	e7fe      	b.n	80106a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	685a      	ldr	r2, [r3, #4]
 80106a6:	4b11      	ldr	r3, [pc, #68]	; (80106ec <vPortFree+0xb4>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	4013      	ands	r3, r2
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d019      	beq.n	80106e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d115      	bne.n	80106e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	685a      	ldr	r2, [r3, #4]
 80106bc:	4b0b      	ldr	r3, [pc, #44]	; (80106ec <vPortFree+0xb4>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	43db      	mvns	r3, r3
 80106c2:	401a      	ands	r2, r3
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80106c8:	f7fe fe9a 	bl	800f400 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	685a      	ldr	r2, [r3, #4]
 80106d0:	4b07      	ldr	r3, [pc, #28]	; (80106f0 <vPortFree+0xb8>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	4413      	add	r3, r2
 80106d6:	4a06      	ldr	r2, [pc, #24]	; (80106f0 <vPortFree+0xb8>)
 80106d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80106da:	6938      	ldr	r0, [r7, #16]
 80106dc:	f000 f86c 	bl	80107b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80106e0:	f7fe fe9c 	bl	800f41c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80106e4:	bf00      	nop
 80106e6:	3718      	adds	r7, #24
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	2000954c 	.word	0x2000954c
 80106f0:	20009544 	.word	0x20009544

080106f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80106f4:	b480      	push	{r7}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80106fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80106fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010700:	4b27      	ldr	r3, [pc, #156]	; (80107a0 <prvHeapInit+0xac>)
 8010702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f003 0307 	and.w	r3, r3, #7
 801070a:	2b00      	cmp	r3, #0
 801070c:	d00c      	beq.n	8010728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	3307      	adds	r3, #7
 8010712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f023 0307 	bic.w	r3, r3, #7
 801071a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801071c:	68ba      	ldr	r2, [r7, #8]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	1ad3      	subs	r3, r2, r3
 8010722:	4a1f      	ldr	r2, [pc, #124]	; (80107a0 <prvHeapInit+0xac>)
 8010724:	4413      	add	r3, r2
 8010726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801072c:	4a1d      	ldr	r2, [pc, #116]	; (80107a4 <prvHeapInit+0xb0>)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010732:	4b1c      	ldr	r3, [pc, #112]	; (80107a4 <prvHeapInit+0xb0>)
 8010734:	2200      	movs	r2, #0
 8010736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	68ba      	ldr	r2, [r7, #8]
 801073c:	4413      	add	r3, r2
 801073e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010740:	2208      	movs	r2, #8
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	1a9b      	subs	r3, r3, r2
 8010746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	f023 0307 	bic.w	r3, r3, #7
 801074e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	4a15      	ldr	r2, [pc, #84]	; (80107a8 <prvHeapInit+0xb4>)
 8010754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010756:	4b14      	ldr	r3, [pc, #80]	; (80107a8 <prvHeapInit+0xb4>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	2200      	movs	r2, #0
 801075c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801075e:	4b12      	ldr	r3, [pc, #72]	; (80107a8 <prvHeapInit+0xb4>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2200      	movs	r2, #0
 8010764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	68fa      	ldr	r2, [r7, #12]
 801076e:	1ad2      	subs	r2, r2, r3
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010774:	4b0c      	ldr	r3, [pc, #48]	; (80107a8 <prvHeapInit+0xb4>)
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	685b      	ldr	r3, [r3, #4]
 8010780:	4a0a      	ldr	r2, [pc, #40]	; (80107ac <prvHeapInit+0xb8>)
 8010782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	685b      	ldr	r3, [r3, #4]
 8010788:	4a09      	ldr	r2, [pc, #36]	; (80107b0 <prvHeapInit+0xbc>)
 801078a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801078c:	4b09      	ldr	r3, [pc, #36]	; (80107b4 <prvHeapInit+0xc0>)
 801078e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010792:	601a      	str	r2, [r3, #0]
}
 8010794:	bf00      	nop
 8010796:	3714      	adds	r7, #20
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr
 80107a0:	20005938 	.word	0x20005938
 80107a4:	20009538 	.word	0x20009538
 80107a8:	20009540 	.word	0x20009540
 80107ac:	20009548 	.word	0x20009548
 80107b0:	20009544 	.word	0x20009544
 80107b4:	2000954c 	.word	0x2000954c

080107b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80107b8:	b480      	push	{r7}
 80107ba:	b085      	sub	sp, #20
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80107c0:	4b28      	ldr	r3, [pc, #160]	; (8010864 <prvInsertBlockIntoFreeList+0xac>)
 80107c2:	60fb      	str	r3, [r7, #12]
 80107c4:	e002      	b.n	80107cc <prvInsertBlockIntoFreeList+0x14>
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	60fb      	str	r3, [r7, #12]
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	687a      	ldr	r2, [r7, #4]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d8f7      	bhi.n	80107c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	68ba      	ldr	r2, [r7, #8]
 80107e0:	4413      	add	r3, r2
 80107e2:	687a      	ldr	r2, [r7, #4]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d108      	bne.n	80107fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	685a      	ldr	r2, [r3, #4]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	441a      	add	r2, r3
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	685b      	ldr	r3, [r3, #4]
 8010802:	68ba      	ldr	r2, [r7, #8]
 8010804:	441a      	add	r2, r3
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	429a      	cmp	r2, r3
 801080c:	d118      	bne.n	8010840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	4b15      	ldr	r3, [pc, #84]	; (8010868 <prvInsertBlockIntoFreeList+0xb0>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	429a      	cmp	r2, r3
 8010818:	d00d      	beq.n	8010836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	685a      	ldr	r2, [r3, #4]
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	441a      	add	r2, r3
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	681a      	ldr	r2, [r3, #0]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	601a      	str	r2, [r3, #0]
 8010834:	e008      	b.n	8010848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010836:	4b0c      	ldr	r3, [pc, #48]	; (8010868 <prvInsertBlockIntoFreeList+0xb0>)
 8010838:	681a      	ldr	r2, [r3, #0]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	601a      	str	r2, [r3, #0]
 801083e:	e003      	b.n	8010848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010848:	68fa      	ldr	r2, [r7, #12]
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	429a      	cmp	r2, r3
 801084e:	d002      	beq.n	8010856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	687a      	ldr	r2, [r7, #4]
 8010854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010856:	bf00      	nop
 8010858:	3714      	adds	r7, #20
 801085a:	46bd      	mov	sp, r7
 801085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010860:	4770      	bx	lr
 8010862:	bf00      	nop
 8010864:	20009538 	.word	0x20009538
 8010868:	20009540 	.word	0x20009540

0801086c <__errno>:
 801086c:	4b01      	ldr	r3, [pc, #4]	; (8010874 <__errno+0x8>)
 801086e:	6818      	ldr	r0, [r3, #0]
 8010870:	4770      	bx	lr
 8010872:	bf00      	nop
 8010874:	200009dc 	.word	0x200009dc

08010878 <exit>:
 8010878:	b508      	push	{r3, lr}
 801087a:	4b07      	ldr	r3, [pc, #28]	; (8010898 <exit+0x20>)
 801087c:	4604      	mov	r4, r0
 801087e:	b113      	cbz	r3, 8010886 <exit+0xe>
 8010880:	2100      	movs	r1, #0
 8010882:	f3af 8000 	nop.w
 8010886:	4b05      	ldr	r3, [pc, #20]	; (801089c <exit+0x24>)
 8010888:	6818      	ldr	r0, [r3, #0]
 801088a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801088c:	b103      	cbz	r3, 8010890 <exit+0x18>
 801088e:	4798      	blx	r3
 8010890:	4620      	mov	r0, r4
 8010892:	f7f5 f879 	bl	8005988 <_exit>
 8010896:	bf00      	nop
 8010898:	00000000 	.word	0x00000000
 801089c:	08012e94 	.word	0x08012e94

080108a0 <_fclose_r>:
 80108a0:	b570      	push	{r4, r5, r6, lr}
 80108a2:	4605      	mov	r5, r0
 80108a4:	460c      	mov	r4, r1
 80108a6:	b911      	cbnz	r1, 80108ae <_fclose_r+0xe>
 80108a8:	2600      	movs	r6, #0
 80108aa:	4630      	mov	r0, r6
 80108ac:	bd70      	pop	{r4, r5, r6, pc}
 80108ae:	b118      	cbz	r0, 80108b8 <_fclose_r+0x18>
 80108b0:	6983      	ldr	r3, [r0, #24]
 80108b2:	b90b      	cbnz	r3, 80108b8 <_fclose_r+0x18>
 80108b4:	f000 f994 	bl	8010be0 <__sinit>
 80108b8:	4b2c      	ldr	r3, [pc, #176]	; (801096c <_fclose_r+0xcc>)
 80108ba:	429c      	cmp	r4, r3
 80108bc:	d114      	bne.n	80108e8 <_fclose_r+0x48>
 80108be:	686c      	ldr	r4, [r5, #4]
 80108c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108c2:	07d8      	lsls	r0, r3, #31
 80108c4:	d405      	bmi.n	80108d2 <_fclose_r+0x32>
 80108c6:	89a3      	ldrh	r3, [r4, #12]
 80108c8:	0599      	lsls	r1, r3, #22
 80108ca:	d402      	bmi.n	80108d2 <_fclose_r+0x32>
 80108cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108ce:	f000 fcd5 	bl	801127c <__retarget_lock_acquire_recursive>
 80108d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108d6:	b98b      	cbnz	r3, 80108fc <_fclose_r+0x5c>
 80108d8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80108da:	f016 0601 	ands.w	r6, r6, #1
 80108de:	d1e3      	bne.n	80108a8 <_fclose_r+0x8>
 80108e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108e2:	f000 fccc 	bl	801127e <__retarget_lock_release_recursive>
 80108e6:	e7e0      	b.n	80108aa <_fclose_r+0xa>
 80108e8:	4b21      	ldr	r3, [pc, #132]	; (8010970 <_fclose_r+0xd0>)
 80108ea:	429c      	cmp	r4, r3
 80108ec:	d101      	bne.n	80108f2 <_fclose_r+0x52>
 80108ee:	68ac      	ldr	r4, [r5, #8]
 80108f0:	e7e6      	b.n	80108c0 <_fclose_r+0x20>
 80108f2:	4b20      	ldr	r3, [pc, #128]	; (8010974 <_fclose_r+0xd4>)
 80108f4:	429c      	cmp	r4, r3
 80108f6:	bf08      	it	eq
 80108f8:	68ec      	ldreq	r4, [r5, #12]
 80108fa:	e7e1      	b.n	80108c0 <_fclose_r+0x20>
 80108fc:	4621      	mov	r1, r4
 80108fe:	4628      	mov	r0, r5
 8010900:	f000 f842 	bl	8010988 <__sflush_r>
 8010904:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010906:	4606      	mov	r6, r0
 8010908:	b133      	cbz	r3, 8010918 <_fclose_r+0x78>
 801090a:	6a21      	ldr	r1, [r4, #32]
 801090c:	4628      	mov	r0, r5
 801090e:	4798      	blx	r3
 8010910:	2800      	cmp	r0, #0
 8010912:	bfb8      	it	lt
 8010914:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8010918:	89a3      	ldrh	r3, [r4, #12]
 801091a:	061a      	lsls	r2, r3, #24
 801091c:	d503      	bpl.n	8010926 <_fclose_r+0x86>
 801091e:	6921      	ldr	r1, [r4, #16]
 8010920:	4628      	mov	r0, r5
 8010922:	f000 fd37 	bl	8011394 <_free_r>
 8010926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010928:	b141      	cbz	r1, 801093c <_fclose_r+0x9c>
 801092a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801092e:	4299      	cmp	r1, r3
 8010930:	d002      	beq.n	8010938 <_fclose_r+0x98>
 8010932:	4628      	mov	r0, r5
 8010934:	f000 fd2e 	bl	8011394 <_free_r>
 8010938:	2300      	movs	r3, #0
 801093a:	6363      	str	r3, [r4, #52]	; 0x34
 801093c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801093e:	b121      	cbz	r1, 801094a <_fclose_r+0xaa>
 8010940:	4628      	mov	r0, r5
 8010942:	f000 fd27 	bl	8011394 <_free_r>
 8010946:	2300      	movs	r3, #0
 8010948:	64a3      	str	r3, [r4, #72]	; 0x48
 801094a:	f000 f931 	bl	8010bb0 <__sfp_lock_acquire>
 801094e:	2300      	movs	r3, #0
 8010950:	81a3      	strh	r3, [r4, #12]
 8010952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010954:	07db      	lsls	r3, r3, #31
 8010956:	d402      	bmi.n	801095e <_fclose_r+0xbe>
 8010958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801095a:	f000 fc90 	bl	801127e <__retarget_lock_release_recursive>
 801095e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010960:	f000 fc8b 	bl	801127a <__retarget_lock_close_recursive>
 8010964:	f000 f92a 	bl	8010bbc <__sfp_lock_release>
 8010968:	e79f      	b.n	80108aa <_fclose_r+0xa>
 801096a:	bf00      	nop
 801096c:	08012e54 	.word	0x08012e54
 8010970:	08012e74 	.word	0x08012e74
 8010974:	08012e34 	.word	0x08012e34

08010978 <fclose>:
 8010978:	4b02      	ldr	r3, [pc, #8]	; (8010984 <fclose+0xc>)
 801097a:	4601      	mov	r1, r0
 801097c:	6818      	ldr	r0, [r3, #0]
 801097e:	f7ff bf8f 	b.w	80108a0 <_fclose_r>
 8010982:	bf00      	nop
 8010984:	200009dc 	.word	0x200009dc

08010988 <__sflush_r>:
 8010988:	898a      	ldrh	r2, [r1, #12]
 801098a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801098e:	4605      	mov	r5, r0
 8010990:	0710      	lsls	r0, r2, #28
 8010992:	460c      	mov	r4, r1
 8010994:	d458      	bmi.n	8010a48 <__sflush_r+0xc0>
 8010996:	684b      	ldr	r3, [r1, #4]
 8010998:	2b00      	cmp	r3, #0
 801099a:	dc05      	bgt.n	80109a8 <__sflush_r+0x20>
 801099c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801099e:	2b00      	cmp	r3, #0
 80109a0:	dc02      	bgt.n	80109a8 <__sflush_r+0x20>
 80109a2:	2000      	movs	r0, #0
 80109a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109aa:	2e00      	cmp	r6, #0
 80109ac:	d0f9      	beq.n	80109a2 <__sflush_r+0x1a>
 80109ae:	2300      	movs	r3, #0
 80109b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80109b4:	682f      	ldr	r7, [r5, #0]
 80109b6:	602b      	str	r3, [r5, #0]
 80109b8:	d032      	beq.n	8010a20 <__sflush_r+0x98>
 80109ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80109bc:	89a3      	ldrh	r3, [r4, #12]
 80109be:	075a      	lsls	r2, r3, #29
 80109c0:	d505      	bpl.n	80109ce <__sflush_r+0x46>
 80109c2:	6863      	ldr	r3, [r4, #4]
 80109c4:	1ac0      	subs	r0, r0, r3
 80109c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109c8:	b10b      	cbz	r3, 80109ce <__sflush_r+0x46>
 80109ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80109cc:	1ac0      	subs	r0, r0, r3
 80109ce:	2300      	movs	r3, #0
 80109d0:	4602      	mov	r2, r0
 80109d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109d4:	6a21      	ldr	r1, [r4, #32]
 80109d6:	4628      	mov	r0, r5
 80109d8:	47b0      	blx	r6
 80109da:	1c43      	adds	r3, r0, #1
 80109dc:	89a3      	ldrh	r3, [r4, #12]
 80109de:	d106      	bne.n	80109ee <__sflush_r+0x66>
 80109e0:	6829      	ldr	r1, [r5, #0]
 80109e2:	291d      	cmp	r1, #29
 80109e4:	d82c      	bhi.n	8010a40 <__sflush_r+0xb8>
 80109e6:	4a2a      	ldr	r2, [pc, #168]	; (8010a90 <__sflush_r+0x108>)
 80109e8:	40ca      	lsrs	r2, r1
 80109ea:	07d6      	lsls	r6, r2, #31
 80109ec:	d528      	bpl.n	8010a40 <__sflush_r+0xb8>
 80109ee:	2200      	movs	r2, #0
 80109f0:	6062      	str	r2, [r4, #4]
 80109f2:	04d9      	lsls	r1, r3, #19
 80109f4:	6922      	ldr	r2, [r4, #16]
 80109f6:	6022      	str	r2, [r4, #0]
 80109f8:	d504      	bpl.n	8010a04 <__sflush_r+0x7c>
 80109fa:	1c42      	adds	r2, r0, #1
 80109fc:	d101      	bne.n	8010a02 <__sflush_r+0x7a>
 80109fe:	682b      	ldr	r3, [r5, #0]
 8010a00:	b903      	cbnz	r3, 8010a04 <__sflush_r+0x7c>
 8010a02:	6560      	str	r0, [r4, #84]	; 0x54
 8010a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a06:	602f      	str	r7, [r5, #0]
 8010a08:	2900      	cmp	r1, #0
 8010a0a:	d0ca      	beq.n	80109a2 <__sflush_r+0x1a>
 8010a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a10:	4299      	cmp	r1, r3
 8010a12:	d002      	beq.n	8010a1a <__sflush_r+0x92>
 8010a14:	4628      	mov	r0, r5
 8010a16:	f000 fcbd 	bl	8011394 <_free_r>
 8010a1a:	2000      	movs	r0, #0
 8010a1c:	6360      	str	r0, [r4, #52]	; 0x34
 8010a1e:	e7c1      	b.n	80109a4 <__sflush_r+0x1c>
 8010a20:	6a21      	ldr	r1, [r4, #32]
 8010a22:	2301      	movs	r3, #1
 8010a24:	4628      	mov	r0, r5
 8010a26:	47b0      	blx	r6
 8010a28:	1c41      	adds	r1, r0, #1
 8010a2a:	d1c7      	bne.n	80109bc <__sflush_r+0x34>
 8010a2c:	682b      	ldr	r3, [r5, #0]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d0c4      	beq.n	80109bc <__sflush_r+0x34>
 8010a32:	2b1d      	cmp	r3, #29
 8010a34:	d001      	beq.n	8010a3a <__sflush_r+0xb2>
 8010a36:	2b16      	cmp	r3, #22
 8010a38:	d101      	bne.n	8010a3e <__sflush_r+0xb6>
 8010a3a:	602f      	str	r7, [r5, #0]
 8010a3c:	e7b1      	b.n	80109a2 <__sflush_r+0x1a>
 8010a3e:	89a3      	ldrh	r3, [r4, #12]
 8010a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a44:	81a3      	strh	r3, [r4, #12]
 8010a46:	e7ad      	b.n	80109a4 <__sflush_r+0x1c>
 8010a48:	690f      	ldr	r7, [r1, #16]
 8010a4a:	2f00      	cmp	r7, #0
 8010a4c:	d0a9      	beq.n	80109a2 <__sflush_r+0x1a>
 8010a4e:	0793      	lsls	r3, r2, #30
 8010a50:	680e      	ldr	r6, [r1, #0]
 8010a52:	bf08      	it	eq
 8010a54:	694b      	ldreq	r3, [r1, #20]
 8010a56:	600f      	str	r7, [r1, #0]
 8010a58:	bf18      	it	ne
 8010a5a:	2300      	movne	r3, #0
 8010a5c:	eba6 0807 	sub.w	r8, r6, r7
 8010a60:	608b      	str	r3, [r1, #8]
 8010a62:	f1b8 0f00 	cmp.w	r8, #0
 8010a66:	dd9c      	ble.n	80109a2 <__sflush_r+0x1a>
 8010a68:	6a21      	ldr	r1, [r4, #32]
 8010a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010a6c:	4643      	mov	r3, r8
 8010a6e:	463a      	mov	r2, r7
 8010a70:	4628      	mov	r0, r5
 8010a72:	47b0      	blx	r6
 8010a74:	2800      	cmp	r0, #0
 8010a76:	dc06      	bgt.n	8010a86 <__sflush_r+0xfe>
 8010a78:	89a3      	ldrh	r3, [r4, #12]
 8010a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a7e:	81a3      	strh	r3, [r4, #12]
 8010a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a84:	e78e      	b.n	80109a4 <__sflush_r+0x1c>
 8010a86:	4407      	add	r7, r0
 8010a88:	eba8 0800 	sub.w	r8, r8, r0
 8010a8c:	e7e9      	b.n	8010a62 <__sflush_r+0xda>
 8010a8e:	bf00      	nop
 8010a90:	20400001 	.word	0x20400001

08010a94 <_fflush_r>:
 8010a94:	b538      	push	{r3, r4, r5, lr}
 8010a96:	690b      	ldr	r3, [r1, #16]
 8010a98:	4605      	mov	r5, r0
 8010a9a:	460c      	mov	r4, r1
 8010a9c:	b913      	cbnz	r3, 8010aa4 <_fflush_r+0x10>
 8010a9e:	2500      	movs	r5, #0
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	bd38      	pop	{r3, r4, r5, pc}
 8010aa4:	b118      	cbz	r0, 8010aae <_fflush_r+0x1a>
 8010aa6:	6983      	ldr	r3, [r0, #24]
 8010aa8:	b90b      	cbnz	r3, 8010aae <_fflush_r+0x1a>
 8010aaa:	f000 f899 	bl	8010be0 <__sinit>
 8010aae:	4b14      	ldr	r3, [pc, #80]	; (8010b00 <_fflush_r+0x6c>)
 8010ab0:	429c      	cmp	r4, r3
 8010ab2:	d11b      	bne.n	8010aec <_fflush_r+0x58>
 8010ab4:	686c      	ldr	r4, [r5, #4]
 8010ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d0ef      	beq.n	8010a9e <_fflush_r+0xa>
 8010abe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ac0:	07d0      	lsls	r0, r2, #31
 8010ac2:	d404      	bmi.n	8010ace <_fflush_r+0x3a>
 8010ac4:	0599      	lsls	r1, r3, #22
 8010ac6:	d402      	bmi.n	8010ace <_fflush_r+0x3a>
 8010ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010aca:	f000 fbd7 	bl	801127c <__retarget_lock_acquire_recursive>
 8010ace:	4628      	mov	r0, r5
 8010ad0:	4621      	mov	r1, r4
 8010ad2:	f7ff ff59 	bl	8010988 <__sflush_r>
 8010ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ad8:	07da      	lsls	r2, r3, #31
 8010ada:	4605      	mov	r5, r0
 8010adc:	d4e0      	bmi.n	8010aa0 <_fflush_r+0xc>
 8010ade:	89a3      	ldrh	r3, [r4, #12]
 8010ae0:	059b      	lsls	r3, r3, #22
 8010ae2:	d4dd      	bmi.n	8010aa0 <_fflush_r+0xc>
 8010ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ae6:	f000 fbca 	bl	801127e <__retarget_lock_release_recursive>
 8010aea:	e7d9      	b.n	8010aa0 <_fflush_r+0xc>
 8010aec:	4b05      	ldr	r3, [pc, #20]	; (8010b04 <_fflush_r+0x70>)
 8010aee:	429c      	cmp	r4, r3
 8010af0:	d101      	bne.n	8010af6 <_fflush_r+0x62>
 8010af2:	68ac      	ldr	r4, [r5, #8]
 8010af4:	e7df      	b.n	8010ab6 <_fflush_r+0x22>
 8010af6:	4b04      	ldr	r3, [pc, #16]	; (8010b08 <_fflush_r+0x74>)
 8010af8:	429c      	cmp	r4, r3
 8010afa:	bf08      	it	eq
 8010afc:	68ec      	ldreq	r4, [r5, #12]
 8010afe:	e7da      	b.n	8010ab6 <_fflush_r+0x22>
 8010b00:	08012e54 	.word	0x08012e54
 8010b04:	08012e74 	.word	0x08012e74
 8010b08:	08012e34 	.word	0x08012e34

08010b0c <fflush>:
 8010b0c:	4601      	mov	r1, r0
 8010b0e:	b920      	cbnz	r0, 8010b1a <fflush+0xe>
 8010b10:	4b04      	ldr	r3, [pc, #16]	; (8010b24 <fflush+0x18>)
 8010b12:	4905      	ldr	r1, [pc, #20]	; (8010b28 <fflush+0x1c>)
 8010b14:	6818      	ldr	r0, [r3, #0]
 8010b16:	f000 bafe 	b.w	8011116 <_fwalk_reent>
 8010b1a:	4b04      	ldr	r3, [pc, #16]	; (8010b2c <fflush+0x20>)
 8010b1c:	6818      	ldr	r0, [r3, #0]
 8010b1e:	f7ff bfb9 	b.w	8010a94 <_fflush_r>
 8010b22:	bf00      	nop
 8010b24:	08012e94 	.word	0x08012e94
 8010b28:	08010a95 	.word	0x08010a95
 8010b2c:	200009dc 	.word	0x200009dc

08010b30 <std>:
 8010b30:	2300      	movs	r3, #0
 8010b32:	b510      	push	{r4, lr}
 8010b34:	4604      	mov	r4, r0
 8010b36:	e9c0 3300 	strd	r3, r3, [r0]
 8010b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b3e:	6083      	str	r3, [r0, #8]
 8010b40:	8181      	strh	r1, [r0, #12]
 8010b42:	6643      	str	r3, [r0, #100]	; 0x64
 8010b44:	81c2      	strh	r2, [r0, #14]
 8010b46:	6183      	str	r3, [r0, #24]
 8010b48:	4619      	mov	r1, r3
 8010b4a:	2208      	movs	r2, #8
 8010b4c:	305c      	adds	r0, #92	; 0x5c
 8010b4e:	f000 fc19 	bl	8011384 <memset>
 8010b52:	4b05      	ldr	r3, [pc, #20]	; (8010b68 <std+0x38>)
 8010b54:	6263      	str	r3, [r4, #36]	; 0x24
 8010b56:	4b05      	ldr	r3, [pc, #20]	; (8010b6c <std+0x3c>)
 8010b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8010b5a:	4b05      	ldr	r3, [pc, #20]	; (8010b70 <std+0x40>)
 8010b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b5e:	4b05      	ldr	r3, [pc, #20]	; (8010b74 <std+0x44>)
 8010b60:	6224      	str	r4, [r4, #32]
 8010b62:	6323      	str	r3, [r4, #48]	; 0x30
 8010b64:	bd10      	pop	{r4, pc}
 8010b66:	bf00      	nop
 8010b68:	08011ec9 	.word	0x08011ec9
 8010b6c:	08011eeb 	.word	0x08011eeb
 8010b70:	08011f23 	.word	0x08011f23
 8010b74:	08011f47 	.word	0x08011f47

08010b78 <_cleanup_r>:
 8010b78:	4901      	ldr	r1, [pc, #4]	; (8010b80 <_cleanup_r+0x8>)
 8010b7a:	f000 bacc 	b.w	8011116 <_fwalk_reent>
 8010b7e:	bf00      	nop
 8010b80:	08010a95 	.word	0x08010a95

08010b84 <__sfmoreglue>:
 8010b84:	b570      	push	{r4, r5, r6, lr}
 8010b86:	1e4a      	subs	r2, r1, #1
 8010b88:	2568      	movs	r5, #104	; 0x68
 8010b8a:	4355      	muls	r5, r2
 8010b8c:	460e      	mov	r6, r1
 8010b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010b92:	f000 fc4f 	bl	8011434 <_malloc_r>
 8010b96:	4604      	mov	r4, r0
 8010b98:	b140      	cbz	r0, 8010bac <__sfmoreglue+0x28>
 8010b9a:	2100      	movs	r1, #0
 8010b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8010ba0:	300c      	adds	r0, #12
 8010ba2:	60a0      	str	r0, [r4, #8]
 8010ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010ba8:	f000 fbec 	bl	8011384 <memset>
 8010bac:	4620      	mov	r0, r4
 8010bae:	bd70      	pop	{r4, r5, r6, pc}

08010bb0 <__sfp_lock_acquire>:
 8010bb0:	4801      	ldr	r0, [pc, #4]	; (8010bb8 <__sfp_lock_acquire+0x8>)
 8010bb2:	f000 bb63 	b.w	801127c <__retarget_lock_acquire_recursive>
 8010bb6:	bf00      	nop
 8010bb8:	20009c64 	.word	0x20009c64

08010bbc <__sfp_lock_release>:
 8010bbc:	4801      	ldr	r0, [pc, #4]	; (8010bc4 <__sfp_lock_release+0x8>)
 8010bbe:	f000 bb5e 	b.w	801127e <__retarget_lock_release_recursive>
 8010bc2:	bf00      	nop
 8010bc4:	20009c64 	.word	0x20009c64

08010bc8 <__sinit_lock_acquire>:
 8010bc8:	4801      	ldr	r0, [pc, #4]	; (8010bd0 <__sinit_lock_acquire+0x8>)
 8010bca:	f000 bb57 	b.w	801127c <__retarget_lock_acquire_recursive>
 8010bce:	bf00      	nop
 8010bd0:	20009c5f 	.word	0x20009c5f

08010bd4 <__sinit_lock_release>:
 8010bd4:	4801      	ldr	r0, [pc, #4]	; (8010bdc <__sinit_lock_release+0x8>)
 8010bd6:	f000 bb52 	b.w	801127e <__retarget_lock_release_recursive>
 8010bda:	bf00      	nop
 8010bdc:	20009c5f 	.word	0x20009c5f

08010be0 <__sinit>:
 8010be0:	b510      	push	{r4, lr}
 8010be2:	4604      	mov	r4, r0
 8010be4:	f7ff fff0 	bl	8010bc8 <__sinit_lock_acquire>
 8010be8:	69a3      	ldr	r3, [r4, #24]
 8010bea:	b11b      	cbz	r3, 8010bf4 <__sinit+0x14>
 8010bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bf0:	f7ff bff0 	b.w	8010bd4 <__sinit_lock_release>
 8010bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8010bfa:	4b13      	ldr	r3, [pc, #76]	; (8010c48 <__sinit+0x68>)
 8010bfc:	4a13      	ldr	r2, [pc, #76]	; (8010c4c <__sinit+0x6c>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8010c02:	42a3      	cmp	r3, r4
 8010c04:	bf04      	itt	eq
 8010c06:	2301      	moveq	r3, #1
 8010c08:	61a3      	streq	r3, [r4, #24]
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	f000 f820 	bl	8010c50 <__sfp>
 8010c10:	6060      	str	r0, [r4, #4]
 8010c12:	4620      	mov	r0, r4
 8010c14:	f000 f81c 	bl	8010c50 <__sfp>
 8010c18:	60a0      	str	r0, [r4, #8]
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	f000 f818 	bl	8010c50 <__sfp>
 8010c20:	2200      	movs	r2, #0
 8010c22:	60e0      	str	r0, [r4, #12]
 8010c24:	2104      	movs	r1, #4
 8010c26:	6860      	ldr	r0, [r4, #4]
 8010c28:	f7ff ff82 	bl	8010b30 <std>
 8010c2c:	68a0      	ldr	r0, [r4, #8]
 8010c2e:	2201      	movs	r2, #1
 8010c30:	2109      	movs	r1, #9
 8010c32:	f7ff ff7d 	bl	8010b30 <std>
 8010c36:	68e0      	ldr	r0, [r4, #12]
 8010c38:	2202      	movs	r2, #2
 8010c3a:	2112      	movs	r1, #18
 8010c3c:	f7ff ff78 	bl	8010b30 <std>
 8010c40:	2301      	movs	r3, #1
 8010c42:	61a3      	str	r3, [r4, #24]
 8010c44:	e7d2      	b.n	8010bec <__sinit+0xc>
 8010c46:	bf00      	nop
 8010c48:	08012e94 	.word	0x08012e94
 8010c4c:	08010b79 	.word	0x08010b79

08010c50 <__sfp>:
 8010c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c52:	4607      	mov	r7, r0
 8010c54:	f7ff ffac 	bl	8010bb0 <__sfp_lock_acquire>
 8010c58:	4b1e      	ldr	r3, [pc, #120]	; (8010cd4 <__sfp+0x84>)
 8010c5a:	681e      	ldr	r6, [r3, #0]
 8010c5c:	69b3      	ldr	r3, [r6, #24]
 8010c5e:	b913      	cbnz	r3, 8010c66 <__sfp+0x16>
 8010c60:	4630      	mov	r0, r6
 8010c62:	f7ff ffbd 	bl	8010be0 <__sinit>
 8010c66:	3648      	adds	r6, #72	; 0x48
 8010c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010c6c:	3b01      	subs	r3, #1
 8010c6e:	d503      	bpl.n	8010c78 <__sfp+0x28>
 8010c70:	6833      	ldr	r3, [r6, #0]
 8010c72:	b30b      	cbz	r3, 8010cb8 <__sfp+0x68>
 8010c74:	6836      	ldr	r6, [r6, #0]
 8010c76:	e7f7      	b.n	8010c68 <__sfp+0x18>
 8010c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010c7c:	b9d5      	cbnz	r5, 8010cb4 <__sfp+0x64>
 8010c7e:	4b16      	ldr	r3, [pc, #88]	; (8010cd8 <__sfp+0x88>)
 8010c80:	60e3      	str	r3, [r4, #12]
 8010c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c86:	6665      	str	r5, [r4, #100]	; 0x64
 8010c88:	f000 faf6 	bl	8011278 <__retarget_lock_init_recursive>
 8010c8c:	f7ff ff96 	bl	8010bbc <__sfp_lock_release>
 8010c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010c98:	6025      	str	r5, [r4, #0]
 8010c9a:	61a5      	str	r5, [r4, #24]
 8010c9c:	2208      	movs	r2, #8
 8010c9e:	4629      	mov	r1, r5
 8010ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ca4:	f000 fb6e 	bl	8011384 <memset>
 8010ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cb4:	3468      	adds	r4, #104	; 0x68
 8010cb6:	e7d9      	b.n	8010c6c <__sfp+0x1c>
 8010cb8:	2104      	movs	r1, #4
 8010cba:	4638      	mov	r0, r7
 8010cbc:	f7ff ff62 	bl	8010b84 <__sfmoreglue>
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	6030      	str	r0, [r6, #0]
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	d1d5      	bne.n	8010c74 <__sfp+0x24>
 8010cc8:	f7ff ff78 	bl	8010bbc <__sfp_lock_release>
 8010ccc:	230c      	movs	r3, #12
 8010cce:	603b      	str	r3, [r7, #0]
 8010cd0:	e7ee      	b.n	8010cb0 <__sfp+0x60>
 8010cd2:	bf00      	nop
 8010cd4:	08012e94 	.word	0x08012e94
 8010cd8:	ffff0001 	.word	0xffff0001

08010cdc <_fopen_r>:
 8010cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010cde:	460f      	mov	r7, r1
 8010ce0:	4611      	mov	r1, r2
 8010ce2:	aa01      	add	r2, sp, #4
 8010ce4:	4605      	mov	r5, r0
 8010ce6:	f001 fa15 	bl	8012114 <__sflags>
 8010cea:	4606      	mov	r6, r0
 8010cec:	b918      	cbnz	r0, 8010cf6 <_fopen_r+0x1a>
 8010cee:	2400      	movs	r4, #0
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	b003      	add	sp, #12
 8010cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	f7ff ffaa 	bl	8010c50 <__sfp>
 8010cfc:	4604      	mov	r4, r0
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d0f5      	beq.n	8010cee <_fopen_r+0x12>
 8010d02:	4639      	mov	r1, r7
 8010d04:	9a01      	ldr	r2, [sp, #4]
 8010d06:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	f000 feda 	bl	8011ac4 <_open_r>
 8010d10:	1e07      	subs	r7, r0, #0
 8010d12:	da09      	bge.n	8010d28 <_fopen_r+0x4c>
 8010d14:	2500      	movs	r5, #0
 8010d16:	f7ff ff4b 	bl	8010bb0 <__sfp_lock_acquire>
 8010d1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d1c:	81a5      	strh	r5, [r4, #12]
 8010d1e:	f000 faac 	bl	801127a <__retarget_lock_close_recursive>
 8010d22:	f7ff ff4b 	bl	8010bbc <__sfp_lock_release>
 8010d26:	e7e2      	b.n	8010cee <_fopen_r+0x12>
 8010d28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d2a:	07db      	lsls	r3, r3, #31
 8010d2c:	d405      	bmi.n	8010d3a <_fopen_r+0x5e>
 8010d2e:	89a3      	ldrh	r3, [r4, #12]
 8010d30:	0598      	lsls	r0, r3, #22
 8010d32:	d402      	bmi.n	8010d3a <_fopen_r+0x5e>
 8010d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d36:	f000 faa1 	bl	801127c <__retarget_lock_acquire_recursive>
 8010d3a:	4b0e      	ldr	r3, [pc, #56]	; (8010d74 <_fopen_r+0x98>)
 8010d3c:	6263      	str	r3, [r4, #36]	; 0x24
 8010d3e:	4b0e      	ldr	r3, [pc, #56]	; (8010d78 <_fopen_r+0x9c>)
 8010d40:	62a3      	str	r3, [r4, #40]	; 0x28
 8010d42:	4b0e      	ldr	r3, [pc, #56]	; (8010d7c <_fopen_r+0xa0>)
 8010d44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010d46:	05f1      	lsls	r1, r6, #23
 8010d48:	4b0d      	ldr	r3, [pc, #52]	; (8010d80 <_fopen_r+0xa4>)
 8010d4a:	81e7      	strh	r7, [r4, #14]
 8010d4c:	81a6      	strh	r6, [r4, #12]
 8010d4e:	6224      	str	r4, [r4, #32]
 8010d50:	6323      	str	r3, [r4, #48]	; 0x30
 8010d52:	d505      	bpl.n	8010d60 <_fopen_r+0x84>
 8010d54:	2302      	movs	r3, #2
 8010d56:	2200      	movs	r2, #0
 8010d58:	4621      	mov	r1, r4
 8010d5a:	4628      	mov	r0, r5
 8010d5c:	f000 f8ae 	bl	8010ebc <_fseek_r>
 8010d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d62:	07da      	lsls	r2, r3, #31
 8010d64:	d4c4      	bmi.n	8010cf0 <_fopen_r+0x14>
 8010d66:	89a3      	ldrh	r3, [r4, #12]
 8010d68:	059b      	lsls	r3, r3, #22
 8010d6a:	d4c1      	bmi.n	8010cf0 <_fopen_r+0x14>
 8010d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d6e:	f000 fa86 	bl	801127e <__retarget_lock_release_recursive>
 8010d72:	e7bd      	b.n	8010cf0 <_fopen_r+0x14>
 8010d74:	08011ec9 	.word	0x08011ec9
 8010d78:	08011eeb 	.word	0x08011eeb
 8010d7c:	08011f23 	.word	0x08011f23
 8010d80:	08011f47 	.word	0x08011f47

08010d84 <fopen>:
 8010d84:	4b02      	ldr	r3, [pc, #8]	; (8010d90 <fopen+0xc>)
 8010d86:	460a      	mov	r2, r1
 8010d88:	4601      	mov	r1, r0
 8010d8a:	6818      	ldr	r0, [r3, #0]
 8010d8c:	f7ff bfa6 	b.w	8010cdc <_fopen_r>
 8010d90:	200009dc 	.word	0x200009dc

08010d94 <fiprintf>:
 8010d94:	b40e      	push	{r1, r2, r3}
 8010d96:	b503      	push	{r0, r1, lr}
 8010d98:	4601      	mov	r1, r0
 8010d9a:	ab03      	add	r3, sp, #12
 8010d9c:	4805      	ldr	r0, [pc, #20]	; (8010db4 <fiprintf+0x20>)
 8010d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010da2:	6800      	ldr	r0, [r0, #0]
 8010da4:	9301      	str	r3, [sp, #4]
 8010da6:	f000 fbc9 	bl	801153c <_vfiprintf_r>
 8010daa:	b002      	add	sp, #8
 8010dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8010db0:	b003      	add	sp, #12
 8010db2:	4770      	bx	lr
 8010db4:	200009dc 	.word	0x200009dc

08010db8 <_fread_r>:
 8010db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dbc:	461f      	mov	r7, r3
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	437b      	muls	r3, r7
 8010dc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010dc4:	4606      	mov	r6, r0
 8010dc6:	468a      	mov	sl, r1
 8010dc8:	4691      	mov	r9, r2
 8010dca:	469b      	mov	fp, r3
 8010dcc:	d05f      	beq.n	8010e8e <_fread_r+0xd6>
 8010dce:	b118      	cbz	r0, 8010dd8 <_fread_r+0x20>
 8010dd0:	6983      	ldr	r3, [r0, #24]
 8010dd2:	b90b      	cbnz	r3, 8010dd8 <_fread_r+0x20>
 8010dd4:	f7ff ff04 	bl	8010be0 <__sinit>
 8010dd8:	4b2e      	ldr	r3, [pc, #184]	; (8010e94 <_fread_r+0xdc>)
 8010dda:	429c      	cmp	r4, r3
 8010ddc:	d128      	bne.n	8010e30 <_fread_r+0x78>
 8010dde:	6874      	ldr	r4, [r6, #4]
 8010de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010de2:	07db      	lsls	r3, r3, #31
 8010de4:	d405      	bmi.n	8010df2 <_fread_r+0x3a>
 8010de6:	89a3      	ldrh	r3, [r4, #12]
 8010de8:	059d      	lsls	r5, r3, #22
 8010dea:	d402      	bmi.n	8010df2 <_fread_r+0x3a>
 8010dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dee:	f000 fa45 	bl	801127c <__retarget_lock_acquire_recursive>
 8010df2:	6863      	ldr	r3, [r4, #4]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	da01      	bge.n	8010dfc <_fread_r+0x44>
 8010df8:	2300      	movs	r3, #0
 8010dfa:	6063      	str	r3, [r4, #4]
 8010dfc:	46d8      	mov	r8, fp
 8010dfe:	e9d4 1500 	ldrd	r1, r5, [r4]
 8010e02:	4545      	cmp	r5, r8
 8010e04:	d31e      	bcc.n	8010e44 <_fread_r+0x8c>
 8010e06:	4642      	mov	r2, r8
 8010e08:	4650      	mov	r0, sl
 8010e0a:	f000 faad 	bl	8011368 <memcpy>
 8010e0e:	6860      	ldr	r0, [r4, #4]
 8010e10:	6821      	ldr	r1, [r4, #0]
 8010e12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e14:	eba0 0008 	sub.w	r0, r0, r8
 8010e18:	4441      	add	r1, r8
 8010e1a:	07da      	lsls	r2, r3, #31
 8010e1c:	6060      	str	r0, [r4, #4]
 8010e1e:	6021      	str	r1, [r4, #0]
 8010e20:	d42f      	bmi.n	8010e82 <_fread_r+0xca>
 8010e22:	89a3      	ldrh	r3, [r4, #12]
 8010e24:	059b      	lsls	r3, r3, #22
 8010e26:	d42c      	bmi.n	8010e82 <_fread_r+0xca>
 8010e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e2a:	f000 fa28 	bl	801127e <__retarget_lock_release_recursive>
 8010e2e:	e028      	b.n	8010e82 <_fread_r+0xca>
 8010e30:	4b19      	ldr	r3, [pc, #100]	; (8010e98 <_fread_r+0xe0>)
 8010e32:	429c      	cmp	r4, r3
 8010e34:	d101      	bne.n	8010e3a <_fread_r+0x82>
 8010e36:	68b4      	ldr	r4, [r6, #8]
 8010e38:	e7d2      	b.n	8010de0 <_fread_r+0x28>
 8010e3a:	4b18      	ldr	r3, [pc, #96]	; (8010e9c <_fread_r+0xe4>)
 8010e3c:	429c      	cmp	r4, r3
 8010e3e:	bf08      	it	eq
 8010e40:	68f4      	ldreq	r4, [r6, #12]
 8010e42:	e7cd      	b.n	8010de0 <_fread_r+0x28>
 8010e44:	462a      	mov	r2, r5
 8010e46:	4650      	mov	r0, sl
 8010e48:	f000 fa8e 	bl	8011368 <memcpy>
 8010e4c:	6823      	ldr	r3, [r4, #0]
 8010e4e:	442b      	add	r3, r5
 8010e50:	6023      	str	r3, [r4, #0]
 8010e52:	4621      	mov	r1, r4
 8010e54:	eba8 0305 	sub.w	r3, r8, r5
 8010e58:	4630      	mov	r0, r6
 8010e5a:	9301      	str	r3, [sp, #4]
 8010e5c:	f000 ff46 	bl	8011cec <__srefill_r>
 8010e60:	44aa      	add	sl, r5
 8010e62:	9b01      	ldr	r3, [sp, #4]
 8010e64:	b188      	cbz	r0, 8010e8a <_fread_r+0xd2>
 8010e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e68:	07d8      	lsls	r0, r3, #31
 8010e6a:	d405      	bmi.n	8010e78 <_fread_r+0xc0>
 8010e6c:	89a3      	ldrh	r3, [r4, #12]
 8010e6e:	0599      	lsls	r1, r3, #22
 8010e70:	d402      	bmi.n	8010e78 <_fread_r+0xc0>
 8010e72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e74:	f000 fa03 	bl	801127e <__retarget_lock_release_recursive>
 8010e78:	445d      	add	r5, fp
 8010e7a:	eba5 0308 	sub.w	r3, r5, r8
 8010e7e:	fbb3 f7f9 	udiv	r7, r3, r9
 8010e82:	4638      	mov	r0, r7
 8010e84:	b003      	add	sp, #12
 8010e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e8a:	4698      	mov	r8, r3
 8010e8c:	e7b7      	b.n	8010dfe <_fread_r+0x46>
 8010e8e:	461f      	mov	r7, r3
 8010e90:	e7f7      	b.n	8010e82 <_fread_r+0xca>
 8010e92:	bf00      	nop
 8010e94:	08012e54 	.word	0x08012e54
 8010e98:	08012e74 	.word	0x08012e74
 8010e9c:	08012e34 	.word	0x08012e34

08010ea0 <fread>:
 8010ea0:	b507      	push	{r0, r1, r2, lr}
 8010ea2:	9300      	str	r3, [sp, #0]
 8010ea4:	4613      	mov	r3, r2
 8010ea6:	460a      	mov	r2, r1
 8010ea8:	4601      	mov	r1, r0
 8010eaa:	4803      	ldr	r0, [pc, #12]	; (8010eb8 <fread+0x18>)
 8010eac:	6800      	ldr	r0, [r0, #0]
 8010eae:	f7ff ff83 	bl	8010db8 <_fread_r>
 8010eb2:	b003      	add	sp, #12
 8010eb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010eb8:	200009dc 	.word	0x200009dc

08010ebc <_fseek_r>:
 8010ebc:	f000 b800 	b.w	8010ec0 <_fseeko_r>

08010ec0 <_fseeko_r>:
 8010ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ec4:	460c      	mov	r4, r1
 8010ec6:	4617      	mov	r7, r2
 8010ec8:	461e      	mov	r6, r3
 8010eca:	4605      	mov	r5, r0
 8010ecc:	b118      	cbz	r0, 8010ed6 <_fseeko_r+0x16>
 8010ece:	6983      	ldr	r3, [r0, #24]
 8010ed0:	b90b      	cbnz	r3, 8010ed6 <_fseeko_r+0x16>
 8010ed2:	f7ff fe85 	bl	8010be0 <__sinit>
 8010ed6:	4b44      	ldr	r3, [pc, #272]	; (8010fe8 <_fseeko_r+0x128>)
 8010ed8:	429c      	cmp	r4, r3
 8010eda:	d122      	bne.n	8010f22 <_fseeko_r+0x62>
 8010edc:	686c      	ldr	r4, [r5, #4]
 8010ede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ee0:	07d9      	lsls	r1, r3, #31
 8010ee2:	d405      	bmi.n	8010ef0 <_fseeko_r+0x30>
 8010ee4:	89a3      	ldrh	r3, [r4, #12]
 8010ee6:	059a      	lsls	r2, r3, #22
 8010ee8:	d402      	bmi.n	8010ef0 <_fseeko_r+0x30>
 8010eea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010eec:	f000 f9c6 	bl	801127c <__retarget_lock_acquire_recursive>
 8010ef0:	89a3      	ldrh	r3, [r4, #12]
 8010ef2:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8010ef6:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8010efa:	d103      	bne.n	8010f04 <_fseeko_r+0x44>
 8010efc:	4621      	mov	r1, r4
 8010efe:	4628      	mov	r0, r5
 8010f00:	f7ff fdc8 	bl	8010a94 <_fflush_r>
 8010f04:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8010f08:	f1b8 0f00 	cmp.w	r8, #0
 8010f0c:	d113      	bne.n	8010f36 <_fseeko_r+0x76>
 8010f0e:	231d      	movs	r3, #29
 8010f10:	602b      	str	r3, [r5, #0]
 8010f12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f14:	07d9      	lsls	r1, r3, #31
 8010f16:	d55d      	bpl.n	8010fd4 <_fseeko_r+0x114>
 8010f18:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f22:	4b32      	ldr	r3, [pc, #200]	; (8010fec <_fseeko_r+0x12c>)
 8010f24:	429c      	cmp	r4, r3
 8010f26:	d101      	bne.n	8010f2c <_fseeko_r+0x6c>
 8010f28:	68ac      	ldr	r4, [r5, #8]
 8010f2a:	e7d8      	b.n	8010ede <_fseeko_r+0x1e>
 8010f2c:	4b30      	ldr	r3, [pc, #192]	; (8010ff0 <_fseeko_r+0x130>)
 8010f2e:	429c      	cmp	r4, r3
 8010f30:	bf08      	it	eq
 8010f32:	68ec      	ldreq	r4, [r5, #12]
 8010f34:	e7d3      	b.n	8010ede <_fseeko_r+0x1e>
 8010f36:	2e01      	cmp	r6, #1
 8010f38:	d036      	beq.n	8010fa8 <_fseeko_r+0xe8>
 8010f3a:	f036 0302 	bics.w	r3, r6, #2
 8010f3e:	d147      	bne.n	8010fd0 <_fseeko_r+0x110>
 8010f40:	6923      	ldr	r3, [r4, #16]
 8010f42:	b91b      	cbnz	r3, 8010f4c <_fseeko_r+0x8c>
 8010f44:	4621      	mov	r1, r4
 8010f46:	4628      	mov	r0, r5
 8010f48:	f000 f9be 	bl	80112c8 <__smakebuf_r>
 8010f4c:	4621      	mov	r1, r4
 8010f4e:	4628      	mov	r0, r5
 8010f50:	f7ff fda0 	bl	8010a94 <_fflush_r>
 8010f54:	2800      	cmp	r0, #0
 8010f56:	d1dc      	bne.n	8010f12 <_fseeko_r+0x52>
 8010f58:	6a21      	ldr	r1, [r4, #32]
 8010f5a:	4633      	mov	r3, r6
 8010f5c:	463a      	mov	r2, r7
 8010f5e:	4628      	mov	r0, r5
 8010f60:	47c0      	blx	r8
 8010f62:	3001      	adds	r0, #1
 8010f64:	d0d5      	beq.n	8010f12 <_fseeko_r+0x52>
 8010f66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f68:	b141      	cbz	r1, 8010f7c <_fseeko_r+0xbc>
 8010f6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f6e:	4299      	cmp	r1, r3
 8010f70:	d002      	beq.n	8010f78 <_fseeko_r+0xb8>
 8010f72:	4628      	mov	r0, r5
 8010f74:	f000 fa0e 	bl	8011394 <_free_r>
 8010f78:	2300      	movs	r3, #0
 8010f7a:	6363      	str	r3, [r4, #52]	; 0x34
 8010f7c:	6923      	ldr	r3, [r4, #16]
 8010f7e:	6023      	str	r3, [r4, #0]
 8010f80:	89a3      	ldrh	r3, [r4, #12]
 8010f82:	2500      	movs	r5, #0
 8010f84:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8010f88:	6065      	str	r5, [r4, #4]
 8010f8a:	81a3      	strh	r3, [r4, #12]
 8010f8c:	2208      	movs	r2, #8
 8010f8e:	4629      	mov	r1, r5
 8010f90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f94:	f000 f9f6 	bl	8011384 <memset>
 8010f98:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8010f9a:	f016 0601 	ands.w	r6, r6, #1
 8010f9e:	d120      	bne.n	8010fe2 <_fseeko_r+0x122>
 8010fa0:	89a3      	ldrh	r3, [r4, #12]
 8010fa2:	059b      	lsls	r3, r3, #22
 8010fa4:	d4ba      	bmi.n	8010f1c <_fseeko_r+0x5c>
 8010fa6:	e00c      	b.n	8010fc2 <_fseeko_r+0x102>
 8010fa8:	4621      	mov	r1, r4
 8010faa:	4628      	mov	r0, r5
 8010fac:	f000 f822 	bl	8010ff4 <_ftello_r>
 8010fb0:	1c43      	adds	r3, r0, #1
 8010fb2:	4606      	mov	r6, r0
 8010fb4:	d109      	bne.n	8010fca <_fseeko_r+0x10a>
 8010fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fb8:	07dd      	lsls	r5, r3, #31
 8010fba:	d4ad      	bmi.n	8010f18 <_fseeko_r+0x58>
 8010fbc:	89a3      	ldrh	r3, [r4, #12]
 8010fbe:	0598      	lsls	r0, r3, #22
 8010fc0:	d4aa      	bmi.n	8010f18 <_fseeko_r+0x58>
 8010fc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fc4:	f000 f95b 	bl	801127e <__retarget_lock_release_recursive>
 8010fc8:	e7a8      	b.n	8010f1c <_fseeko_r+0x5c>
 8010fca:	4407      	add	r7, r0
 8010fcc:	2600      	movs	r6, #0
 8010fce:	e7b7      	b.n	8010f40 <_fseeko_r+0x80>
 8010fd0:	2316      	movs	r3, #22
 8010fd2:	e79d      	b.n	8010f10 <_fseeko_r+0x50>
 8010fd4:	89a3      	ldrh	r3, [r4, #12]
 8010fd6:	059a      	lsls	r2, r3, #22
 8010fd8:	d49e      	bmi.n	8010f18 <_fseeko_r+0x58>
 8010fda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fdc:	f000 f94f 	bl	801127e <__retarget_lock_release_recursive>
 8010fe0:	e79a      	b.n	8010f18 <_fseeko_r+0x58>
 8010fe2:	462e      	mov	r6, r5
 8010fe4:	e79a      	b.n	8010f1c <_fseeko_r+0x5c>
 8010fe6:	bf00      	nop
 8010fe8:	08012e54 	.word	0x08012e54
 8010fec:	08012e74 	.word	0x08012e74
 8010ff0:	08012e34 	.word	0x08012e34

08010ff4 <_ftello_r>:
 8010ff4:	b570      	push	{r4, r5, r6, lr}
 8010ff6:	460c      	mov	r4, r1
 8010ff8:	4605      	mov	r5, r0
 8010ffa:	b118      	cbz	r0, 8011004 <_ftello_r+0x10>
 8010ffc:	6983      	ldr	r3, [r0, #24]
 8010ffe:	b90b      	cbnz	r3, 8011004 <_ftello_r+0x10>
 8011000:	f7ff fdee 	bl	8010be0 <__sinit>
 8011004:	4b32      	ldr	r3, [pc, #200]	; (80110d0 <_ftello_r+0xdc>)
 8011006:	429c      	cmp	r4, r3
 8011008:	d114      	bne.n	8011034 <_ftello_r+0x40>
 801100a:	686c      	ldr	r4, [r5, #4]
 801100c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801100e:	07da      	lsls	r2, r3, #31
 8011010:	d405      	bmi.n	801101e <_ftello_r+0x2a>
 8011012:	89a3      	ldrh	r3, [r4, #12]
 8011014:	059b      	lsls	r3, r3, #22
 8011016:	d402      	bmi.n	801101e <_ftello_r+0x2a>
 8011018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801101a:	f000 f92f 	bl	801127c <__retarget_lock_acquire_recursive>
 801101e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011020:	b9ce      	cbnz	r6, 8011056 <_ftello_r+0x62>
 8011022:	231d      	movs	r3, #29
 8011024:	602b      	str	r3, [r5, #0]
 8011026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011028:	07de      	lsls	r6, r3, #31
 801102a:	d50d      	bpl.n	8011048 <_ftello_r+0x54>
 801102c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011030:	4628      	mov	r0, r5
 8011032:	bd70      	pop	{r4, r5, r6, pc}
 8011034:	4b27      	ldr	r3, [pc, #156]	; (80110d4 <_ftello_r+0xe0>)
 8011036:	429c      	cmp	r4, r3
 8011038:	d101      	bne.n	801103e <_ftello_r+0x4a>
 801103a:	68ac      	ldr	r4, [r5, #8]
 801103c:	e7e6      	b.n	801100c <_ftello_r+0x18>
 801103e:	4b26      	ldr	r3, [pc, #152]	; (80110d8 <_ftello_r+0xe4>)
 8011040:	429c      	cmp	r4, r3
 8011042:	bf08      	it	eq
 8011044:	68ec      	ldreq	r4, [r5, #12]
 8011046:	e7e1      	b.n	801100c <_ftello_r+0x18>
 8011048:	89a3      	ldrh	r3, [r4, #12]
 801104a:	059d      	lsls	r5, r3, #22
 801104c:	d4ee      	bmi.n	801102c <_ftello_r+0x38>
 801104e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011050:	f000 f915 	bl	801127e <__retarget_lock_release_recursive>
 8011054:	e7ea      	b.n	801102c <_ftello_r+0x38>
 8011056:	89a2      	ldrh	r2, [r4, #12]
 8011058:	f002 030c 	and.w	r3, r2, #12
 801105c:	2b08      	cmp	r3, #8
 801105e:	d119      	bne.n	8011094 <_ftello_r+0xa0>
 8011060:	6823      	ldr	r3, [r4, #0]
 8011062:	b1bb      	cbz	r3, 8011094 <_ftello_r+0xa0>
 8011064:	6921      	ldr	r1, [r4, #16]
 8011066:	1a5b      	subs	r3, r3, r1
 8011068:	2b00      	cmp	r3, #0
 801106a:	dd13      	ble.n	8011094 <_ftello_r+0xa0>
 801106c:	05d0      	lsls	r0, r2, #23
 801106e:	d511      	bpl.n	8011094 <_ftello_r+0xa0>
 8011070:	2302      	movs	r3, #2
 8011072:	2200      	movs	r2, #0
 8011074:	6a21      	ldr	r1, [r4, #32]
 8011076:	4628      	mov	r0, r5
 8011078:	47b0      	blx	r6
 801107a:	1c41      	adds	r1, r0, #1
 801107c:	4605      	mov	r5, r0
 801107e:	d10d      	bne.n	801109c <_ftello_r+0xa8>
 8011080:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011082:	07da      	lsls	r2, r3, #31
 8011084:	d4d2      	bmi.n	801102c <_ftello_r+0x38>
 8011086:	89a3      	ldrh	r3, [r4, #12]
 8011088:	059b      	lsls	r3, r3, #22
 801108a:	d4cf      	bmi.n	801102c <_ftello_r+0x38>
 801108c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801108e:	f000 f8f6 	bl	801127e <__retarget_lock_release_recursive>
 8011092:	e7cd      	b.n	8011030 <_ftello_r+0x3c>
 8011094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011098:	d00f      	beq.n	80110ba <_ftello_r+0xc6>
 801109a:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801109c:	89a2      	ldrh	r2, [r4, #12]
 801109e:	0756      	lsls	r6, r2, #29
 80110a0:	d50d      	bpl.n	80110be <_ftello_r+0xca>
 80110a2:	6863      	ldr	r3, [r4, #4]
 80110a4:	1aed      	subs	r5, r5, r3
 80110a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80110a8:	b10b      	cbz	r3, 80110ae <_ftello_r+0xba>
 80110aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80110ac:	1aed      	subs	r5, r5, r3
 80110ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80110b0:	07d9      	lsls	r1, r3, #31
 80110b2:	d4bd      	bmi.n	8011030 <_ftello_r+0x3c>
 80110b4:	0593      	lsls	r3, r2, #22
 80110b6:	d4bb      	bmi.n	8011030 <_ftello_r+0x3c>
 80110b8:	e7e8      	b.n	801108c <_ftello_r+0x98>
 80110ba:	2301      	movs	r3, #1
 80110bc:	e7da      	b.n	8011074 <_ftello_r+0x80>
 80110be:	0710      	lsls	r0, r2, #28
 80110c0:	d5f5      	bpl.n	80110ae <_ftello_r+0xba>
 80110c2:	6823      	ldr	r3, [r4, #0]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d0f2      	beq.n	80110ae <_ftello_r+0xba>
 80110c8:	6921      	ldr	r1, [r4, #16]
 80110ca:	1a5b      	subs	r3, r3, r1
 80110cc:	441d      	add	r5, r3
 80110ce:	e7ee      	b.n	80110ae <_ftello_r+0xba>
 80110d0:	08012e54 	.word	0x08012e54
 80110d4:	08012e74 	.word	0x08012e74
 80110d8:	08012e34 	.word	0x08012e34

080110dc <_fwalk>:
 80110dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110e0:	460f      	mov	r7, r1
 80110e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80110e6:	2600      	movs	r6, #0
 80110e8:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80110ec:	f1b8 0801 	subs.w	r8, r8, #1
 80110f0:	d505      	bpl.n	80110fe <_fwalk+0x22>
 80110f2:	6824      	ldr	r4, [r4, #0]
 80110f4:	2c00      	cmp	r4, #0
 80110f6:	d1f7      	bne.n	80110e8 <_fwalk+0xc>
 80110f8:	4630      	mov	r0, r6
 80110fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110fe:	89ab      	ldrh	r3, [r5, #12]
 8011100:	2b01      	cmp	r3, #1
 8011102:	d906      	bls.n	8011112 <_fwalk+0x36>
 8011104:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011108:	3301      	adds	r3, #1
 801110a:	d002      	beq.n	8011112 <_fwalk+0x36>
 801110c:	4628      	mov	r0, r5
 801110e:	47b8      	blx	r7
 8011110:	4306      	orrs	r6, r0
 8011112:	3568      	adds	r5, #104	; 0x68
 8011114:	e7ea      	b.n	80110ec <_fwalk+0x10>

08011116 <_fwalk_reent>:
 8011116:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801111a:	4606      	mov	r6, r0
 801111c:	4688      	mov	r8, r1
 801111e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011122:	2700      	movs	r7, #0
 8011124:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011128:	f1b9 0901 	subs.w	r9, r9, #1
 801112c:	d505      	bpl.n	801113a <_fwalk_reent+0x24>
 801112e:	6824      	ldr	r4, [r4, #0]
 8011130:	2c00      	cmp	r4, #0
 8011132:	d1f7      	bne.n	8011124 <_fwalk_reent+0xe>
 8011134:	4638      	mov	r0, r7
 8011136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801113a:	89ab      	ldrh	r3, [r5, #12]
 801113c:	2b01      	cmp	r3, #1
 801113e:	d907      	bls.n	8011150 <_fwalk_reent+0x3a>
 8011140:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011144:	3301      	adds	r3, #1
 8011146:	d003      	beq.n	8011150 <_fwalk_reent+0x3a>
 8011148:	4629      	mov	r1, r5
 801114a:	4630      	mov	r0, r6
 801114c:	47c0      	blx	r8
 801114e:	4307      	orrs	r7, r0
 8011150:	3568      	adds	r5, #104	; 0x68
 8011152:	e7e9      	b.n	8011128 <_fwalk_reent+0x12>

08011154 <_fwrite_r>:
 8011154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011158:	9c08      	ldr	r4, [sp, #32]
 801115a:	4689      	mov	r9, r1
 801115c:	4617      	mov	r7, r2
 801115e:	fb02 f803 	mul.w	r8, r2, r3
 8011162:	4605      	mov	r5, r0
 8011164:	b118      	cbz	r0, 801116e <_fwrite_r+0x1a>
 8011166:	6983      	ldr	r3, [r0, #24]
 8011168:	b90b      	cbnz	r3, 801116e <_fwrite_r+0x1a>
 801116a:	f7ff fd39 	bl	8010be0 <__sinit>
 801116e:	4b26      	ldr	r3, [pc, #152]	; (8011208 <_fwrite_r+0xb4>)
 8011170:	429c      	cmp	r4, r3
 8011172:	d123      	bne.n	80111bc <_fwrite_r+0x68>
 8011174:	686c      	ldr	r4, [r5, #4]
 8011176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011178:	07de      	lsls	r6, r3, #31
 801117a:	d405      	bmi.n	8011188 <_fwrite_r+0x34>
 801117c:	89a3      	ldrh	r3, [r4, #12]
 801117e:	0598      	lsls	r0, r3, #22
 8011180:	d402      	bmi.n	8011188 <_fwrite_r+0x34>
 8011182:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011184:	f000 f87a 	bl	801127c <__retarget_lock_acquire_recursive>
 8011188:	89a3      	ldrh	r3, [r4, #12]
 801118a:	0719      	lsls	r1, r3, #28
 801118c:	d520      	bpl.n	80111d0 <_fwrite_r+0x7c>
 801118e:	6923      	ldr	r3, [r4, #16]
 8011190:	b1f3      	cbz	r3, 80111d0 <_fwrite_r+0x7c>
 8011192:	2600      	movs	r6, #0
 8011194:	4546      	cmp	r6, r8
 8011196:	d029      	beq.n	80111ec <_fwrite_r+0x98>
 8011198:	68a0      	ldr	r0, [r4, #8]
 801119a:	f819 1006 	ldrb.w	r1, [r9, r6]
 801119e:	3801      	subs	r0, #1
 80111a0:	2800      	cmp	r0, #0
 80111a2:	60a0      	str	r0, [r4, #8]
 80111a4:	da04      	bge.n	80111b0 <_fwrite_r+0x5c>
 80111a6:	69a3      	ldr	r3, [r4, #24]
 80111a8:	4298      	cmp	r0, r3
 80111aa:	db19      	blt.n	80111e0 <_fwrite_r+0x8c>
 80111ac:	290a      	cmp	r1, #10
 80111ae:	d017      	beq.n	80111e0 <_fwrite_r+0x8c>
 80111b0:	6823      	ldr	r3, [r4, #0]
 80111b2:	1c5a      	adds	r2, r3, #1
 80111b4:	6022      	str	r2, [r4, #0]
 80111b6:	7019      	strb	r1, [r3, #0]
 80111b8:	3601      	adds	r6, #1
 80111ba:	e7eb      	b.n	8011194 <_fwrite_r+0x40>
 80111bc:	4b13      	ldr	r3, [pc, #76]	; (801120c <_fwrite_r+0xb8>)
 80111be:	429c      	cmp	r4, r3
 80111c0:	d101      	bne.n	80111c6 <_fwrite_r+0x72>
 80111c2:	68ac      	ldr	r4, [r5, #8]
 80111c4:	e7d7      	b.n	8011176 <_fwrite_r+0x22>
 80111c6:	4b12      	ldr	r3, [pc, #72]	; (8011210 <_fwrite_r+0xbc>)
 80111c8:	429c      	cmp	r4, r3
 80111ca:	bf08      	it	eq
 80111cc:	68ec      	ldreq	r4, [r5, #12]
 80111ce:	e7d2      	b.n	8011176 <_fwrite_r+0x22>
 80111d0:	4621      	mov	r1, r4
 80111d2:	4628      	mov	r0, r5
 80111d4:	f000 ff20 	bl	8012018 <__swsetup_r>
 80111d8:	2800      	cmp	r0, #0
 80111da:	d0da      	beq.n	8011192 <_fwrite_r+0x3e>
 80111dc:	2600      	movs	r6, #0
 80111de:	e005      	b.n	80111ec <_fwrite_r+0x98>
 80111e0:	4622      	mov	r2, r4
 80111e2:	4628      	mov	r0, r5
 80111e4:	f000 feb4 	bl	8011f50 <__swbuf_r>
 80111e8:	3001      	adds	r0, #1
 80111ea:	d1e5      	bne.n	80111b8 <_fwrite_r+0x64>
 80111ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111ee:	07da      	lsls	r2, r3, #31
 80111f0:	d405      	bmi.n	80111fe <_fwrite_r+0xaa>
 80111f2:	89a3      	ldrh	r3, [r4, #12]
 80111f4:	059b      	lsls	r3, r3, #22
 80111f6:	d402      	bmi.n	80111fe <_fwrite_r+0xaa>
 80111f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111fa:	f000 f840 	bl	801127e <__retarget_lock_release_recursive>
 80111fe:	fbb6 f0f7 	udiv	r0, r6, r7
 8011202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011206:	bf00      	nop
 8011208:	08012e54 	.word	0x08012e54
 801120c:	08012e74 	.word	0x08012e74
 8011210:	08012e34 	.word	0x08012e34

08011214 <fwrite>:
 8011214:	b507      	push	{r0, r1, r2, lr}
 8011216:	9300      	str	r3, [sp, #0]
 8011218:	4613      	mov	r3, r2
 801121a:	460a      	mov	r2, r1
 801121c:	4601      	mov	r1, r0
 801121e:	4803      	ldr	r0, [pc, #12]	; (801122c <fwrite+0x18>)
 8011220:	6800      	ldr	r0, [r0, #0]
 8011222:	f7ff ff97 	bl	8011154 <_fwrite_r>
 8011226:	b003      	add	sp, #12
 8011228:	f85d fb04 	ldr.w	pc, [sp], #4
 801122c:	200009dc 	.word	0x200009dc

08011230 <__libc_init_array>:
 8011230:	b570      	push	{r4, r5, r6, lr}
 8011232:	4d0d      	ldr	r5, [pc, #52]	; (8011268 <__libc_init_array+0x38>)
 8011234:	4c0d      	ldr	r4, [pc, #52]	; (801126c <__libc_init_array+0x3c>)
 8011236:	1b64      	subs	r4, r4, r5
 8011238:	10a4      	asrs	r4, r4, #2
 801123a:	2600      	movs	r6, #0
 801123c:	42a6      	cmp	r6, r4
 801123e:	d109      	bne.n	8011254 <__libc_init_array+0x24>
 8011240:	4d0b      	ldr	r5, [pc, #44]	; (8011270 <__libc_init_array+0x40>)
 8011242:	4c0c      	ldr	r4, [pc, #48]	; (8011274 <__libc_init_array+0x44>)
 8011244:	f001 f992 	bl	801256c <_init>
 8011248:	1b64      	subs	r4, r4, r5
 801124a:	10a4      	asrs	r4, r4, #2
 801124c:	2600      	movs	r6, #0
 801124e:	42a6      	cmp	r6, r4
 8011250:	d105      	bne.n	801125e <__libc_init_array+0x2e>
 8011252:	bd70      	pop	{r4, r5, r6, pc}
 8011254:	f855 3b04 	ldr.w	r3, [r5], #4
 8011258:	4798      	blx	r3
 801125a:	3601      	adds	r6, #1
 801125c:	e7ee      	b.n	801123c <__libc_init_array+0xc>
 801125e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011262:	4798      	blx	r3
 8011264:	3601      	adds	r6, #1
 8011266:	e7f2      	b.n	801124e <__libc_init_array+0x1e>
 8011268:	08012ed4 	.word	0x08012ed4
 801126c:	08012ed4 	.word	0x08012ed4
 8011270:	08012ed4 	.word	0x08012ed4
 8011274:	08012ed8 	.word	0x08012ed8

08011278 <__retarget_lock_init_recursive>:
 8011278:	4770      	bx	lr

0801127a <__retarget_lock_close_recursive>:
 801127a:	4770      	bx	lr

0801127c <__retarget_lock_acquire_recursive>:
 801127c:	4770      	bx	lr

0801127e <__retarget_lock_release_recursive>:
 801127e:	4770      	bx	lr

08011280 <__swhatbuf_r>:
 8011280:	b570      	push	{r4, r5, r6, lr}
 8011282:	460e      	mov	r6, r1
 8011284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011288:	2900      	cmp	r1, #0
 801128a:	b096      	sub	sp, #88	; 0x58
 801128c:	4614      	mov	r4, r2
 801128e:	461d      	mov	r5, r3
 8011290:	da07      	bge.n	80112a2 <__swhatbuf_r+0x22>
 8011292:	2300      	movs	r3, #0
 8011294:	602b      	str	r3, [r5, #0]
 8011296:	89b3      	ldrh	r3, [r6, #12]
 8011298:	061a      	lsls	r2, r3, #24
 801129a:	d410      	bmi.n	80112be <__swhatbuf_r+0x3e>
 801129c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112a0:	e00e      	b.n	80112c0 <__swhatbuf_r+0x40>
 80112a2:	466a      	mov	r2, sp
 80112a4:	f000 ff6c 	bl	8012180 <_fstat_r>
 80112a8:	2800      	cmp	r0, #0
 80112aa:	dbf2      	blt.n	8011292 <__swhatbuf_r+0x12>
 80112ac:	9a01      	ldr	r2, [sp, #4]
 80112ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80112b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80112b6:	425a      	negs	r2, r3
 80112b8:	415a      	adcs	r2, r3
 80112ba:	602a      	str	r2, [r5, #0]
 80112bc:	e7ee      	b.n	801129c <__swhatbuf_r+0x1c>
 80112be:	2340      	movs	r3, #64	; 0x40
 80112c0:	2000      	movs	r0, #0
 80112c2:	6023      	str	r3, [r4, #0]
 80112c4:	b016      	add	sp, #88	; 0x58
 80112c6:	bd70      	pop	{r4, r5, r6, pc}

080112c8 <__smakebuf_r>:
 80112c8:	898b      	ldrh	r3, [r1, #12]
 80112ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80112cc:	079d      	lsls	r5, r3, #30
 80112ce:	4606      	mov	r6, r0
 80112d0:	460c      	mov	r4, r1
 80112d2:	d507      	bpl.n	80112e4 <__smakebuf_r+0x1c>
 80112d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80112d8:	6023      	str	r3, [r4, #0]
 80112da:	6123      	str	r3, [r4, #16]
 80112dc:	2301      	movs	r3, #1
 80112de:	6163      	str	r3, [r4, #20]
 80112e0:	b002      	add	sp, #8
 80112e2:	bd70      	pop	{r4, r5, r6, pc}
 80112e4:	ab01      	add	r3, sp, #4
 80112e6:	466a      	mov	r2, sp
 80112e8:	f7ff ffca 	bl	8011280 <__swhatbuf_r>
 80112ec:	9900      	ldr	r1, [sp, #0]
 80112ee:	4605      	mov	r5, r0
 80112f0:	4630      	mov	r0, r6
 80112f2:	f000 f89f 	bl	8011434 <_malloc_r>
 80112f6:	b948      	cbnz	r0, 801130c <__smakebuf_r+0x44>
 80112f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112fc:	059a      	lsls	r2, r3, #22
 80112fe:	d4ef      	bmi.n	80112e0 <__smakebuf_r+0x18>
 8011300:	f023 0303 	bic.w	r3, r3, #3
 8011304:	f043 0302 	orr.w	r3, r3, #2
 8011308:	81a3      	strh	r3, [r4, #12]
 801130a:	e7e3      	b.n	80112d4 <__smakebuf_r+0xc>
 801130c:	4b0d      	ldr	r3, [pc, #52]	; (8011344 <__smakebuf_r+0x7c>)
 801130e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011310:	89a3      	ldrh	r3, [r4, #12]
 8011312:	6020      	str	r0, [r4, #0]
 8011314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011318:	81a3      	strh	r3, [r4, #12]
 801131a:	9b00      	ldr	r3, [sp, #0]
 801131c:	6163      	str	r3, [r4, #20]
 801131e:	9b01      	ldr	r3, [sp, #4]
 8011320:	6120      	str	r0, [r4, #16]
 8011322:	b15b      	cbz	r3, 801133c <__smakebuf_r+0x74>
 8011324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011328:	4630      	mov	r0, r6
 801132a:	f000 ff3b 	bl	80121a4 <_isatty_r>
 801132e:	b128      	cbz	r0, 801133c <__smakebuf_r+0x74>
 8011330:	89a3      	ldrh	r3, [r4, #12]
 8011332:	f023 0303 	bic.w	r3, r3, #3
 8011336:	f043 0301 	orr.w	r3, r3, #1
 801133a:	81a3      	strh	r3, [r4, #12]
 801133c:	89a0      	ldrh	r0, [r4, #12]
 801133e:	4305      	orrs	r5, r0
 8011340:	81a5      	strh	r5, [r4, #12]
 8011342:	e7cd      	b.n	80112e0 <__smakebuf_r+0x18>
 8011344:	08010b79 	.word	0x08010b79

08011348 <malloc>:
 8011348:	4b02      	ldr	r3, [pc, #8]	; (8011354 <malloc+0xc>)
 801134a:	4601      	mov	r1, r0
 801134c:	6818      	ldr	r0, [r3, #0]
 801134e:	f000 b871 	b.w	8011434 <_malloc_r>
 8011352:	bf00      	nop
 8011354:	200009dc 	.word	0x200009dc

08011358 <free>:
 8011358:	4b02      	ldr	r3, [pc, #8]	; (8011364 <free+0xc>)
 801135a:	4601      	mov	r1, r0
 801135c:	6818      	ldr	r0, [r3, #0]
 801135e:	f000 b819 	b.w	8011394 <_free_r>
 8011362:	bf00      	nop
 8011364:	200009dc 	.word	0x200009dc

08011368 <memcpy>:
 8011368:	440a      	add	r2, r1
 801136a:	4291      	cmp	r1, r2
 801136c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011370:	d100      	bne.n	8011374 <memcpy+0xc>
 8011372:	4770      	bx	lr
 8011374:	b510      	push	{r4, lr}
 8011376:	f811 4b01 	ldrb.w	r4, [r1], #1
 801137a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801137e:	4291      	cmp	r1, r2
 8011380:	d1f9      	bne.n	8011376 <memcpy+0xe>
 8011382:	bd10      	pop	{r4, pc}

08011384 <memset>:
 8011384:	4402      	add	r2, r0
 8011386:	4603      	mov	r3, r0
 8011388:	4293      	cmp	r3, r2
 801138a:	d100      	bne.n	801138e <memset+0xa>
 801138c:	4770      	bx	lr
 801138e:	f803 1b01 	strb.w	r1, [r3], #1
 8011392:	e7f9      	b.n	8011388 <memset+0x4>

08011394 <_free_r>:
 8011394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011396:	2900      	cmp	r1, #0
 8011398:	d048      	beq.n	801142c <_free_r+0x98>
 801139a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801139e:	9001      	str	r0, [sp, #4]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	f1a1 0404 	sub.w	r4, r1, #4
 80113a6:	bfb8      	it	lt
 80113a8:	18e4      	addlt	r4, r4, r3
 80113aa:	f000 ff37 	bl	801221c <__malloc_lock>
 80113ae:	4a20      	ldr	r2, [pc, #128]	; (8011430 <_free_r+0x9c>)
 80113b0:	9801      	ldr	r0, [sp, #4]
 80113b2:	6813      	ldr	r3, [r2, #0]
 80113b4:	4615      	mov	r5, r2
 80113b6:	b933      	cbnz	r3, 80113c6 <_free_r+0x32>
 80113b8:	6063      	str	r3, [r4, #4]
 80113ba:	6014      	str	r4, [r2, #0]
 80113bc:	b003      	add	sp, #12
 80113be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80113c2:	f000 bf31 	b.w	8012228 <__malloc_unlock>
 80113c6:	42a3      	cmp	r3, r4
 80113c8:	d90b      	bls.n	80113e2 <_free_r+0x4e>
 80113ca:	6821      	ldr	r1, [r4, #0]
 80113cc:	1862      	adds	r2, r4, r1
 80113ce:	4293      	cmp	r3, r2
 80113d0:	bf04      	itt	eq
 80113d2:	681a      	ldreq	r2, [r3, #0]
 80113d4:	685b      	ldreq	r3, [r3, #4]
 80113d6:	6063      	str	r3, [r4, #4]
 80113d8:	bf04      	itt	eq
 80113da:	1852      	addeq	r2, r2, r1
 80113dc:	6022      	streq	r2, [r4, #0]
 80113de:	602c      	str	r4, [r5, #0]
 80113e0:	e7ec      	b.n	80113bc <_free_r+0x28>
 80113e2:	461a      	mov	r2, r3
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	b10b      	cbz	r3, 80113ec <_free_r+0x58>
 80113e8:	42a3      	cmp	r3, r4
 80113ea:	d9fa      	bls.n	80113e2 <_free_r+0x4e>
 80113ec:	6811      	ldr	r1, [r2, #0]
 80113ee:	1855      	adds	r5, r2, r1
 80113f0:	42a5      	cmp	r5, r4
 80113f2:	d10b      	bne.n	801140c <_free_r+0x78>
 80113f4:	6824      	ldr	r4, [r4, #0]
 80113f6:	4421      	add	r1, r4
 80113f8:	1854      	adds	r4, r2, r1
 80113fa:	42a3      	cmp	r3, r4
 80113fc:	6011      	str	r1, [r2, #0]
 80113fe:	d1dd      	bne.n	80113bc <_free_r+0x28>
 8011400:	681c      	ldr	r4, [r3, #0]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	6053      	str	r3, [r2, #4]
 8011406:	4421      	add	r1, r4
 8011408:	6011      	str	r1, [r2, #0]
 801140a:	e7d7      	b.n	80113bc <_free_r+0x28>
 801140c:	d902      	bls.n	8011414 <_free_r+0x80>
 801140e:	230c      	movs	r3, #12
 8011410:	6003      	str	r3, [r0, #0]
 8011412:	e7d3      	b.n	80113bc <_free_r+0x28>
 8011414:	6825      	ldr	r5, [r4, #0]
 8011416:	1961      	adds	r1, r4, r5
 8011418:	428b      	cmp	r3, r1
 801141a:	bf04      	itt	eq
 801141c:	6819      	ldreq	r1, [r3, #0]
 801141e:	685b      	ldreq	r3, [r3, #4]
 8011420:	6063      	str	r3, [r4, #4]
 8011422:	bf04      	itt	eq
 8011424:	1949      	addeq	r1, r1, r5
 8011426:	6021      	streq	r1, [r4, #0]
 8011428:	6054      	str	r4, [r2, #4]
 801142a:	e7c7      	b.n	80113bc <_free_r+0x28>
 801142c:	b003      	add	sp, #12
 801142e:	bd30      	pop	{r4, r5, pc}
 8011430:	20009550 	.word	0x20009550

08011434 <_malloc_r>:
 8011434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011436:	1ccd      	adds	r5, r1, #3
 8011438:	f025 0503 	bic.w	r5, r5, #3
 801143c:	3508      	adds	r5, #8
 801143e:	2d0c      	cmp	r5, #12
 8011440:	bf38      	it	cc
 8011442:	250c      	movcc	r5, #12
 8011444:	2d00      	cmp	r5, #0
 8011446:	4606      	mov	r6, r0
 8011448:	db01      	blt.n	801144e <_malloc_r+0x1a>
 801144a:	42a9      	cmp	r1, r5
 801144c:	d903      	bls.n	8011456 <_malloc_r+0x22>
 801144e:	230c      	movs	r3, #12
 8011450:	6033      	str	r3, [r6, #0]
 8011452:	2000      	movs	r0, #0
 8011454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011456:	f000 fee1 	bl	801221c <__malloc_lock>
 801145a:	4921      	ldr	r1, [pc, #132]	; (80114e0 <_malloc_r+0xac>)
 801145c:	680a      	ldr	r2, [r1, #0]
 801145e:	4614      	mov	r4, r2
 8011460:	b99c      	cbnz	r4, 801148a <_malloc_r+0x56>
 8011462:	4f20      	ldr	r7, [pc, #128]	; (80114e4 <_malloc_r+0xb0>)
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	b923      	cbnz	r3, 8011472 <_malloc_r+0x3e>
 8011468:	4621      	mov	r1, r4
 801146a:	4630      	mov	r0, r6
 801146c:	f000 fcc8 	bl	8011e00 <_sbrk_r>
 8011470:	6038      	str	r0, [r7, #0]
 8011472:	4629      	mov	r1, r5
 8011474:	4630      	mov	r0, r6
 8011476:	f000 fcc3 	bl	8011e00 <_sbrk_r>
 801147a:	1c43      	adds	r3, r0, #1
 801147c:	d123      	bne.n	80114c6 <_malloc_r+0x92>
 801147e:	230c      	movs	r3, #12
 8011480:	6033      	str	r3, [r6, #0]
 8011482:	4630      	mov	r0, r6
 8011484:	f000 fed0 	bl	8012228 <__malloc_unlock>
 8011488:	e7e3      	b.n	8011452 <_malloc_r+0x1e>
 801148a:	6823      	ldr	r3, [r4, #0]
 801148c:	1b5b      	subs	r3, r3, r5
 801148e:	d417      	bmi.n	80114c0 <_malloc_r+0x8c>
 8011490:	2b0b      	cmp	r3, #11
 8011492:	d903      	bls.n	801149c <_malloc_r+0x68>
 8011494:	6023      	str	r3, [r4, #0]
 8011496:	441c      	add	r4, r3
 8011498:	6025      	str	r5, [r4, #0]
 801149a:	e004      	b.n	80114a6 <_malloc_r+0x72>
 801149c:	6863      	ldr	r3, [r4, #4]
 801149e:	42a2      	cmp	r2, r4
 80114a0:	bf0c      	ite	eq
 80114a2:	600b      	streq	r3, [r1, #0]
 80114a4:	6053      	strne	r3, [r2, #4]
 80114a6:	4630      	mov	r0, r6
 80114a8:	f000 febe 	bl	8012228 <__malloc_unlock>
 80114ac:	f104 000b 	add.w	r0, r4, #11
 80114b0:	1d23      	adds	r3, r4, #4
 80114b2:	f020 0007 	bic.w	r0, r0, #7
 80114b6:	1ac2      	subs	r2, r0, r3
 80114b8:	d0cc      	beq.n	8011454 <_malloc_r+0x20>
 80114ba:	1a1b      	subs	r3, r3, r0
 80114bc:	50a3      	str	r3, [r4, r2]
 80114be:	e7c9      	b.n	8011454 <_malloc_r+0x20>
 80114c0:	4622      	mov	r2, r4
 80114c2:	6864      	ldr	r4, [r4, #4]
 80114c4:	e7cc      	b.n	8011460 <_malloc_r+0x2c>
 80114c6:	1cc4      	adds	r4, r0, #3
 80114c8:	f024 0403 	bic.w	r4, r4, #3
 80114cc:	42a0      	cmp	r0, r4
 80114ce:	d0e3      	beq.n	8011498 <_malloc_r+0x64>
 80114d0:	1a21      	subs	r1, r4, r0
 80114d2:	4630      	mov	r0, r6
 80114d4:	f000 fc94 	bl	8011e00 <_sbrk_r>
 80114d8:	3001      	adds	r0, #1
 80114da:	d1dd      	bne.n	8011498 <_malloc_r+0x64>
 80114dc:	e7cf      	b.n	801147e <_malloc_r+0x4a>
 80114de:	bf00      	nop
 80114e0:	20009550 	.word	0x20009550
 80114e4:	20009554 	.word	0x20009554

080114e8 <__sfputc_r>:
 80114e8:	6893      	ldr	r3, [r2, #8]
 80114ea:	3b01      	subs	r3, #1
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	b410      	push	{r4}
 80114f0:	6093      	str	r3, [r2, #8]
 80114f2:	da08      	bge.n	8011506 <__sfputc_r+0x1e>
 80114f4:	6994      	ldr	r4, [r2, #24]
 80114f6:	42a3      	cmp	r3, r4
 80114f8:	db01      	blt.n	80114fe <__sfputc_r+0x16>
 80114fa:	290a      	cmp	r1, #10
 80114fc:	d103      	bne.n	8011506 <__sfputc_r+0x1e>
 80114fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011502:	f000 bd25 	b.w	8011f50 <__swbuf_r>
 8011506:	6813      	ldr	r3, [r2, #0]
 8011508:	1c58      	adds	r0, r3, #1
 801150a:	6010      	str	r0, [r2, #0]
 801150c:	7019      	strb	r1, [r3, #0]
 801150e:	4608      	mov	r0, r1
 8011510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011514:	4770      	bx	lr

08011516 <__sfputs_r>:
 8011516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011518:	4606      	mov	r6, r0
 801151a:	460f      	mov	r7, r1
 801151c:	4614      	mov	r4, r2
 801151e:	18d5      	adds	r5, r2, r3
 8011520:	42ac      	cmp	r4, r5
 8011522:	d101      	bne.n	8011528 <__sfputs_r+0x12>
 8011524:	2000      	movs	r0, #0
 8011526:	e007      	b.n	8011538 <__sfputs_r+0x22>
 8011528:	f814 1b01 	ldrb.w	r1, [r4], #1
 801152c:	463a      	mov	r2, r7
 801152e:	4630      	mov	r0, r6
 8011530:	f7ff ffda 	bl	80114e8 <__sfputc_r>
 8011534:	1c43      	adds	r3, r0, #1
 8011536:	d1f3      	bne.n	8011520 <__sfputs_r+0xa>
 8011538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801153c <_vfiprintf_r>:
 801153c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011540:	460d      	mov	r5, r1
 8011542:	b09d      	sub	sp, #116	; 0x74
 8011544:	4614      	mov	r4, r2
 8011546:	4698      	mov	r8, r3
 8011548:	4606      	mov	r6, r0
 801154a:	b118      	cbz	r0, 8011554 <_vfiprintf_r+0x18>
 801154c:	6983      	ldr	r3, [r0, #24]
 801154e:	b90b      	cbnz	r3, 8011554 <_vfiprintf_r+0x18>
 8011550:	f7ff fb46 	bl	8010be0 <__sinit>
 8011554:	4b89      	ldr	r3, [pc, #548]	; (801177c <_vfiprintf_r+0x240>)
 8011556:	429d      	cmp	r5, r3
 8011558:	d11b      	bne.n	8011592 <_vfiprintf_r+0x56>
 801155a:	6875      	ldr	r5, [r6, #4]
 801155c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801155e:	07d9      	lsls	r1, r3, #31
 8011560:	d405      	bmi.n	801156e <_vfiprintf_r+0x32>
 8011562:	89ab      	ldrh	r3, [r5, #12]
 8011564:	059a      	lsls	r2, r3, #22
 8011566:	d402      	bmi.n	801156e <_vfiprintf_r+0x32>
 8011568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801156a:	f7ff fe87 	bl	801127c <__retarget_lock_acquire_recursive>
 801156e:	89ab      	ldrh	r3, [r5, #12]
 8011570:	071b      	lsls	r3, r3, #28
 8011572:	d501      	bpl.n	8011578 <_vfiprintf_r+0x3c>
 8011574:	692b      	ldr	r3, [r5, #16]
 8011576:	b9eb      	cbnz	r3, 80115b4 <_vfiprintf_r+0x78>
 8011578:	4629      	mov	r1, r5
 801157a:	4630      	mov	r0, r6
 801157c:	f000 fd4c 	bl	8012018 <__swsetup_r>
 8011580:	b1c0      	cbz	r0, 80115b4 <_vfiprintf_r+0x78>
 8011582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011584:	07dc      	lsls	r4, r3, #31
 8011586:	d50e      	bpl.n	80115a6 <_vfiprintf_r+0x6a>
 8011588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801158c:	b01d      	add	sp, #116	; 0x74
 801158e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011592:	4b7b      	ldr	r3, [pc, #492]	; (8011780 <_vfiprintf_r+0x244>)
 8011594:	429d      	cmp	r5, r3
 8011596:	d101      	bne.n	801159c <_vfiprintf_r+0x60>
 8011598:	68b5      	ldr	r5, [r6, #8]
 801159a:	e7df      	b.n	801155c <_vfiprintf_r+0x20>
 801159c:	4b79      	ldr	r3, [pc, #484]	; (8011784 <_vfiprintf_r+0x248>)
 801159e:	429d      	cmp	r5, r3
 80115a0:	bf08      	it	eq
 80115a2:	68f5      	ldreq	r5, [r6, #12]
 80115a4:	e7da      	b.n	801155c <_vfiprintf_r+0x20>
 80115a6:	89ab      	ldrh	r3, [r5, #12]
 80115a8:	0598      	lsls	r0, r3, #22
 80115aa:	d4ed      	bmi.n	8011588 <_vfiprintf_r+0x4c>
 80115ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115ae:	f7ff fe66 	bl	801127e <__retarget_lock_release_recursive>
 80115b2:	e7e9      	b.n	8011588 <_vfiprintf_r+0x4c>
 80115b4:	2300      	movs	r3, #0
 80115b6:	9309      	str	r3, [sp, #36]	; 0x24
 80115b8:	2320      	movs	r3, #32
 80115ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115be:	f8cd 800c 	str.w	r8, [sp, #12]
 80115c2:	2330      	movs	r3, #48	; 0x30
 80115c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011788 <_vfiprintf_r+0x24c>
 80115c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115cc:	f04f 0901 	mov.w	r9, #1
 80115d0:	4623      	mov	r3, r4
 80115d2:	469a      	mov	sl, r3
 80115d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115d8:	b10a      	cbz	r2, 80115de <_vfiprintf_r+0xa2>
 80115da:	2a25      	cmp	r2, #37	; 0x25
 80115dc:	d1f9      	bne.n	80115d2 <_vfiprintf_r+0x96>
 80115de:	ebba 0b04 	subs.w	fp, sl, r4
 80115e2:	d00b      	beq.n	80115fc <_vfiprintf_r+0xc0>
 80115e4:	465b      	mov	r3, fp
 80115e6:	4622      	mov	r2, r4
 80115e8:	4629      	mov	r1, r5
 80115ea:	4630      	mov	r0, r6
 80115ec:	f7ff ff93 	bl	8011516 <__sfputs_r>
 80115f0:	3001      	adds	r0, #1
 80115f2:	f000 80aa 	beq.w	801174a <_vfiprintf_r+0x20e>
 80115f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115f8:	445a      	add	r2, fp
 80115fa:	9209      	str	r2, [sp, #36]	; 0x24
 80115fc:	f89a 3000 	ldrb.w	r3, [sl]
 8011600:	2b00      	cmp	r3, #0
 8011602:	f000 80a2 	beq.w	801174a <_vfiprintf_r+0x20e>
 8011606:	2300      	movs	r3, #0
 8011608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801160c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011610:	f10a 0a01 	add.w	sl, sl, #1
 8011614:	9304      	str	r3, [sp, #16]
 8011616:	9307      	str	r3, [sp, #28]
 8011618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801161c:	931a      	str	r3, [sp, #104]	; 0x68
 801161e:	4654      	mov	r4, sl
 8011620:	2205      	movs	r2, #5
 8011622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011626:	4858      	ldr	r0, [pc, #352]	; (8011788 <_vfiprintf_r+0x24c>)
 8011628:	f7ee fe0a 	bl	8000240 <memchr>
 801162c:	9a04      	ldr	r2, [sp, #16]
 801162e:	b9d8      	cbnz	r0, 8011668 <_vfiprintf_r+0x12c>
 8011630:	06d1      	lsls	r1, r2, #27
 8011632:	bf44      	itt	mi
 8011634:	2320      	movmi	r3, #32
 8011636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801163a:	0713      	lsls	r3, r2, #28
 801163c:	bf44      	itt	mi
 801163e:	232b      	movmi	r3, #43	; 0x2b
 8011640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011644:	f89a 3000 	ldrb.w	r3, [sl]
 8011648:	2b2a      	cmp	r3, #42	; 0x2a
 801164a:	d015      	beq.n	8011678 <_vfiprintf_r+0x13c>
 801164c:	9a07      	ldr	r2, [sp, #28]
 801164e:	4654      	mov	r4, sl
 8011650:	2000      	movs	r0, #0
 8011652:	f04f 0c0a 	mov.w	ip, #10
 8011656:	4621      	mov	r1, r4
 8011658:	f811 3b01 	ldrb.w	r3, [r1], #1
 801165c:	3b30      	subs	r3, #48	; 0x30
 801165e:	2b09      	cmp	r3, #9
 8011660:	d94e      	bls.n	8011700 <_vfiprintf_r+0x1c4>
 8011662:	b1b0      	cbz	r0, 8011692 <_vfiprintf_r+0x156>
 8011664:	9207      	str	r2, [sp, #28]
 8011666:	e014      	b.n	8011692 <_vfiprintf_r+0x156>
 8011668:	eba0 0308 	sub.w	r3, r0, r8
 801166c:	fa09 f303 	lsl.w	r3, r9, r3
 8011670:	4313      	orrs	r3, r2
 8011672:	9304      	str	r3, [sp, #16]
 8011674:	46a2      	mov	sl, r4
 8011676:	e7d2      	b.n	801161e <_vfiprintf_r+0xe2>
 8011678:	9b03      	ldr	r3, [sp, #12]
 801167a:	1d19      	adds	r1, r3, #4
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	9103      	str	r1, [sp, #12]
 8011680:	2b00      	cmp	r3, #0
 8011682:	bfbb      	ittet	lt
 8011684:	425b      	neglt	r3, r3
 8011686:	f042 0202 	orrlt.w	r2, r2, #2
 801168a:	9307      	strge	r3, [sp, #28]
 801168c:	9307      	strlt	r3, [sp, #28]
 801168e:	bfb8      	it	lt
 8011690:	9204      	strlt	r2, [sp, #16]
 8011692:	7823      	ldrb	r3, [r4, #0]
 8011694:	2b2e      	cmp	r3, #46	; 0x2e
 8011696:	d10c      	bne.n	80116b2 <_vfiprintf_r+0x176>
 8011698:	7863      	ldrb	r3, [r4, #1]
 801169a:	2b2a      	cmp	r3, #42	; 0x2a
 801169c:	d135      	bne.n	801170a <_vfiprintf_r+0x1ce>
 801169e:	9b03      	ldr	r3, [sp, #12]
 80116a0:	1d1a      	adds	r2, r3, #4
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	9203      	str	r2, [sp, #12]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	bfb8      	it	lt
 80116aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80116ae:	3402      	adds	r4, #2
 80116b0:	9305      	str	r3, [sp, #20]
 80116b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011798 <_vfiprintf_r+0x25c>
 80116b6:	7821      	ldrb	r1, [r4, #0]
 80116b8:	2203      	movs	r2, #3
 80116ba:	4650      	mov	r0, sl
 80116bc:	f7ee fdc0 	bl	8000240 <memchr>
 80116c0:	b140      	cbz	r0, 80116d4 <_vfiprintf_r+0x198>
 80116c2:	2340      	movs	r3, #64	; 0x40
 80116c4:	eba0 000a 	sub.w	r0, r0, sl
 80116c8:	fa03 f000 	lsl.w	r0, r3, r0
 80116cc:	9b04      	ldr	r3, [sp, #16]
 80116ce:	4303      	orrs	r3, r0
 80116d0:	3401      	adds	r4, #1
 80116d2:	9304      	str	r3, [sp, #16]
 80116d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116d8:	482c      	ldr	r0, [pc, #176]	; (801178c <_vfiprintf_r+0x250>)
 80116da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116de:	2206      	movs	r2, #6
 80116e0:	f7ee fdae 	bl	8000240 <memchr>
 80116e4:	2800      	cmp	r0, #0
 80116e6:	d03f      	beq.n	8011768 <_vfiprintf_r+0x22c>
 80116e8:	4b29      	ldr	r3, [pc, #164]	; (8011790 <_vfiprintf_r+0x254>)
 80116ea:	bb1b      	cbnz	r3, 8011734 <_vfiprintf_r+0x1f8>
 80116ec:	9b03      	ldr	r3, [sp, #12]
 80116ee:	3307      	adds	r3, #7
 80116f0:	f023 0307 	bic.w	r3, r3, #7
 80116f4:	3308      	adds	r3, #8
 80116f6:	9303      	str	r3, [sp, #12]
 80116f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116fa:	443b      	add	r3, r7
 80116fc:	9309      	str	r3, [sp, #36]	; 0x24
 80116fe:	e767      	b.n	80115d0 <_vfiprintf_r+0x94>
 8011700:	fb0c 3202 	mla	r2, ip, r2, r3
 8011704:	460c      	mov	r4, r1
 8011706:	2001      	movs	r0, #1
 8011708:	e7a5      	b.n	8011656 <_vfiprintf_r+0x11a>
 801170a:	2300      	movs	r3, #0
 801170c:	3401      	adds	r4, #1
 801170e:	9305      	str	r3, [sp, #20]
 8011710:	4619      	mov	r1, r3
 8011712:	f04f 0c0a 	mov.w	ip, #10
 8011716:	4620      	mov	r0, r4
 8011718:	f810 2b01 	ldrb.w	r2, [r0], #1
 801171c:	3a30      	subs	r2, #48	; 0x30
 801171e:	2a09      	cmp	r2, #9
 8011720:	d903      	bls.n	801172a <_vfiprintf_r+0x1ee>
 8011722:	2b00      	cmp	r3, #0
 8011724:	d0c5      	beq.n	80116b2 <_vfiprintf_r+0x176>
 8011726:	9105      	str	r1, [sp, #20]
 8011728:	e7c3      	b.n	80116b2 <_vfiprintf_r+0x176>
 801172a:	fb0c 2101 	mla	r1, ip, r1, r2
 801172e:	4604      	mov	r4, r0
 8011730:	2301      	movs	r3, #1
 8011732:	e7f0      	b.n	8011716 <_vfiprintf_r+0x1da>
 8011734:	ab03      	add	r3, sp, #12
 8011736:	9300      	str	r3, [sp, #0]
 8011738:	462a      	mov	r2, r5
 801173a:	4b16      	ldr	r3, [pc, #88]	; (8011794 <_vfiprintf_r+0x258>)
 801173c:	a904      	add	r1, sp, #16
 801173e:	4630      	mov	r0, r6
 8011740:	f3af 8000 	nop.w
 8011744:	4607      	mov	r7, r0
 8011746:	1c78      	adds	r0, r7, #1
 8011748:	d1d6      	bne.n	80116f8 <_vfiprintf_r+0x1bc>
 801174a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801174c:	07d9      	lsls	r1, r3, #31
 801174e:	d405      	bmi.n	801175c <_vfiprintf_r+0x220>
 8011750:	89ab      	ldrh	r3, [r5, #12]
 8011752:	059a      	lsls	r2, r3, #22
 8011754:	d402      	bmi.n	801175c <_vfiprintf_r+0x220>
 8011756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011758:	f7ff fd91 	bl	801127e <__retarget_lock_release_recursive>
 801175c:	89ab      	ldrh	r3, [r5, #12]
 801175e:	065b      	lsls	r3, r3, #25
 8011760:	f53f af12 	bmi.w	8011588 <_vfiprintf_r+0x4c>
 8011764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011766:	e711      	b.n	801158c <_vfiprintf_r+0x50>
 8011768:	ab03      	add	r3, sp, #12
 801176a:	9300      	str	r3, [sp, #0]
 801176c:	462a      	mov	r2, r5
 801176e:	4b09      	ldr	r3, [pc, #36]	; (8011794 <_vfiprintf_r+0x258>)
 8011770:	a904      	add	r1, sp, #16
 8011772:	4630      	mov	r0, r6
 8011774:	f000 f880 	bl	8011878 <_printf_i>
 8011778:	e7e4      	b.n	8011744 <_vfiprintf_r+0x208>
 801177a:	bf00      	nop
 801177c:	08012e54 	.word	0x08012e54
 8011780:	08012e74 	.word	0x08012e74
 8011784:	08012e34 	.word	0x08012e34
 8011788:	08012e98 	.word	0x08012e98
 801178c:	08012ea2 	.word	0x08012ea2
 8011790:	00000000 	.word	0x00000000
 8011794:	08011517 	.word	0x08011517
 8011798:	08012e9e 	.word	0x08012e9e

0801179c <_printf_common>:
 801179c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117a0:	4616      	mov	r6, r2
 80117a2:	4699      	mov	r9, r3
 80117a4:	688a      	ldr	r2, [r1, #8]
 80117a6:	690b      	ldr	r3, [r1, #16]
 80117a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80117ac:	4293      	cmp	r3, r2
 80117ae:	bfb8      	it	lt
 80117b0:	4613      	movlt	r3, r2
 80117b2:	6033      	str	r3, [r6, #0]
 80117b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80117b8:	4607      	mov	r7, r0
 80117ba:	460c      	mov	r4, r1
 80117bc:	b10a      	cbz	r2, 80117c2 <_printf_common+0x26>
 80117be:	3301      	adds	r3, #1
 80117c0:	6033      	str	r3, [r6, #0]
 80117c2:	6823      	ldr	r3, [r4, #0]
 80117c4:	0699      	lsls	r1, r3, #26
 80117c6:	bf42      	ittt	mi
 80117c8:	6833      	ldrmi	r3, [r6, #0]
 80117ca:	3302      	addmi	r3, #2
 80117cc:	6033      	strmi	r3, [r6, #0]
 80117ce:	6825      	ldr	r5, [r4, #0]
 80117d0:	f015 0506 	ands.w	r5, r5, #6
 80117d4:	d106      	bne.n	80117e4 <_printf_common+0x48>
 80117d6:	f104 0a19 	add.w	sl, r4, #25
 80117da:	68e3      	ldr	r3, [r4, #12]
 80117dc:	6832      	ldr	r2, [r6, #0]
 80117de:	1a9b      	subs	r3, r3, r2
 80117e0:	42ab      	cmp	r3, r5
 80117e2:	dc26      	bgt.n	8011832 <_printf_common+0x96>
 80117e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80117e8:	1e13      	subs	r3, r2, #0
 80117ea:	6822      	ldr	r2, [r4, #0]
 80117ec:	bf18      	it	ne
 80117ee:	2301      	movne	r3, #1
 80117f0:	0692      	lsls	r2, r2, #26
 80117f2:	d42b      	bmi.n	801184c <_printf_common+0xb0>
 80117f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80117f8:	4649      	mov	r1, r9
 80117fa:	4638      	mov	r0, r7
 80117fc:	47c0      	blx	r8
 80117fe:	3001      	adds	r0, #1
 8011800:	d01e      	beq.n	8011840 <_printf_common+0xa4>
 8011802:	6823      	ldr	r3, [r4, #0]
 8011804:	68e5      	ldr	r5, [r4, #12]
 8011806:	6832      	ldr	r2, [r6, #0]
 8011808:	f003 0306 	and.w	r3, r3, #6
 801180c:	2b04      	cmp	r3, #4
 801180e:	bf08      	it	eq
 8011810:	1aad      	subeq	r5, r5, r2
 8011812:	68a3      	ldr	r3, [r4, #8]
 8011814:	6922      	ldr	r2, [r4, #16]
 8011816:	bf0c      	ite	eq
 8011818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801181c:	2500      	movne	r5, #0
 801181e:	4293      	cmp	r3, r2
 8011820:	bfc4      	itt	gt
 8011822:	1a9b      	subgt	r3, r3, r2
 8011824:	18ed      	addgt	r5, r5, r3
 8011826:	2600      	movs	r6, #0
 8011828:	341a      	adds	r4, #26
 801182a:	42b5      	cmp	r5, r6
 801182c:	d11a      	bne.n	8011864 <_printf_common+0xc8>
 801182e:	2000      	movs	r0, #0
 8011830:	e008      	b.n	8011844 <_printf_common+0xa8>
 8011832:	2301      	movs	r3, #1
 8011834:	4652      	mov	r2, sl
 8011836:	4649      	mov	r1, r9
 8011838:	4638      	mov	r0, r7
 801183a:	47c0      	blx	r8
 801183c:	3001      	adds	r0, #1
 801183e:	d103      	bne.n	8011848 <_printf_common+0xac>
 8011840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011848:	3501      	adds	r5, #1
 801184a:	e7c6      	b.n	80117da <_printf_common+0x3e>
 801184c:	18e1      	adds	r1, r4, r3
 801184e:	1c5a      	adds	r2, r3, #1
 8011850:	2030      	movs	r0, #48	; 0x30
 8011852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011856:	4422      	add	r2, r4
 8011858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801185c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011860:	3302      	adds	r3, #2
 8011862:	e7c7      	b.n	80117f4 <_printf_common+0x58>
 8011864:	2301      	movs	r3, #1
 8011866:	4622      	mov	r2, r4
 8011868:	4649      	mov	r1, r9
 801186a:	4638      	mov	r0, r7
 801186c:	47c0      	blx	r8
 801186e:	3001      	adds	r0, #1
 8011870:	d0e6      	beq.n	8011840 <_printf_common+0xa4>
 8011872:	3601      	adds	r6, #1
 8011874:	e7d9      	b.n	801182a <_printf_common+0x8e>
	...

08011878 <_printf_i>:
 8011878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801187c:	460c      	mov	r4, r1
 801187e:	4691      	mov	r9, r2
 8011880:	7e27      	ldrb	r7, [r4, #24]
 8011882:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011884:	2f78      	cmp	r7, #120	; 0x78
 8011886:	4680      	mov	r8, r0
 8011888:	469a      	mov	sl, r3
 801188a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801188e:	d807      	bhi.n	80118a0 <_printf_i+0x28>
 8011890:	2f62      	cmp	r7, #98	; 0x62
 8011892:	d80a      	bhi.n	80118aa <_printf_i+0x32>
 8011894:	2f00      	cmp	r7, #0
 8011896:	f000 80d8 	beq.w	8011a4a <_printf_i+0x1d2>
 801189a:	2f58      	cmp	r7, #88	; 0x58
 801189c:	f000 80a3 	beq.w	80119e6 <_printf_i+0x16e>
 80118a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80118a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80118a8:	e03a      	b.n	8011920 <_printf_i+0xa8>
 80118aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80118ae:	2b15      	cmp	r3, #21
 80118b0:	d8f6      	bhi.n	80118a0 <_printf_i+0x28>
 80118b2:	a001      	add	r0, pc, #4	; (adr r0, 80118b8 <_printf_i+0x40>)
 80118b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80118b8:	08011911 	.word	0x08011911
 80118bc:	08011925 	.word	0x08011925
 80118c0:	080118a1 	.word	0x080118a1
 80118c4:	080118a1 	.word	0x080118a1
 80118c8:	080118a1 	.word	0x080118a1
 80118cc:	080118a1 	.word	0x080118a1
 80118d0:	08011925 	.word	0x08011925
 80118d4:	080118a1 	.word	0x080118a1
 80118d8:	080118a1 	.word	0x080118a1
 80118dc:	080118a1 	.word	0x080118a1
 80118e0:	080118a1 	.word	0x080118a1
 80118e4:	08011a31 	.word	0x08011a31
 80118e8:	08011955 	.word	0x08011955
 80118ec:	08011a13 	.word	0x08011a13
 80118f0:	080118a1 	.word	0x080118a1
 80118f4:	080118a1 	.word	0x080118a1
 80118f8:	08011a53 	.word	0x08011a53
 80118fc:	080118a1 	.word	0x080118a1
 8011900:	08011955 	.word	0x08011955
 8011904:	080118a1 	.word	0x080118a1
 8011908:	080118a1 	.word	0x080118a1
 801190c:	08011a1b 	.word	0x08011a1b
 8011910:	680b      	ldr	r3, [r1, #0]
 8011912:	1d1a      	adds	r2, r3, #4
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	600a      	str	r2, [r1, #0]
 8011918:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801191c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011920:	2301      	movs	r3, #1
 8011922:	e0a3      	b.n	8011a6c <_printf_i+0x1f4>
 8011924:	6825      	ldr	r5, [r4, #0]
 8011926:	6808      	ldr	r0, [r1, #0]
 8011928:	062e      	lsls	r6, r5, #24
 801192a:	f100 0304 	add.w	r3, r0, #4
 801192e:	d50a      	bpl.n	8011946 <_printf_i+0xce>
 8011930:	6805      	ldr	r5, [r0, #0]
 8011932:	600b      	str	r3, [r1, #0]
 8011934:	2d00      	cmp	r5, #0
 8011936:	da03      	bge.n	8011940 <_printf_i+0xc8>
 8011938:	232d      	movs	r3, #45	; 0x2d
 801193a:	426d      	negs	r5, r5
 801193c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011940:	485e      	ldr	r0, [pc, #376]	; (8011abc <_printf_i+0x244>)
 8011942:	230a      	movs	r3, #10
 8011944:	e019      	b.n	801197a <_printf_i+0x102>
 8011946:	f015 0f40 	tst.w	r5, #64	; 0x40
 801194a:	6805      	ldr	r5, [r0, #0]
 801194c:	600b      	str	r3, [r1, #0]
 801194e:	bf18      	it	ne
 8011950:	b22d      	sxthne	r5, r5
 8011952:	e7ef      	b.n	8011934 <_printf_i+0xbc>
 8011954:	680b      	ldr	r3, [r1, #0]
 8011956:	6825      	ldr	r5, [r4, #0]
 8011958:	1d18      	adds	r0, r3, #4
 801195a:	6008      	str	r0, [r1, #0]
 801195c:	0628      	lsls	r0, r5, #24
 801195e:	d501      	bpl.n	8011964 <_printf_i+0xec>
 8011960:	681d      	ldr	r5, [r3, #0]
 8011962:	e002      	b.n	801196a <_printf_i+0xf2>
 8011964:	0669      	lsls	r1, r5, #25
 8011966:	d5fb      	bpl.n	8011960 <_printf_i+0xe8>
 8011968:	881d      	ldrh	r5, [r3, #0]
 801196a:	4854      	ldr	r0, [pc, #336]	; (8011abc <_printf_i+0x244>)
 801196c:	2f6f      	cmp	r7, #111	; 0x6f
 801196e:	bf0c      	ite	eq
 8011970:	2308      	moveq	r3, #8
 8011972:	230a      	movne	r3, #10
 8011974:	2100      	movs	r1, #0
 8011976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801197a:	6866      	ldr	r6, [r4, #4]
 801197c:	60a6      	str	r6, [r4, #8]
 801197e:	2e00      	cmp	r6, #0
 8011980:	bfa2      	ittt	ge
 8011982:	6821      	ldrge	r1, [r4, #0]
 8011984:	f021 0104 	bicge.w	r1, r1, #4
 8011988:	6021      	strge	r1, [r4, #0]
 801198a:	b90d      	cbnz	r5, 8011990 <_printf_i+0x118>
 801198c:	2e00      	cmp	r6, #0
 801198e:	d04d      	beq.n	8011a2c <_printf_i+0x1b4>
 8011990:	4616      	mov	r6, r2
 8011992:	fbb5 f1f3 	udiv	r1, r5, r3
 8011996:	fb03 5711 	mls	r7, r3, r1, r5
 801199a:	5dc7      	ldrb	r7, [r0, r7]
 801199c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80119a0:	462f      	mov	r7, r5
 80119a2:	42bb      	cmp	r3, r7
 80119a4:	460d      	mov	r5, r1
 80119a6:	d9f4      	bls.n	8011992 <_printf_i+0x11a>
 80119a8:	2b08      	cmp	r3, #8
 80119aa:	d10b      	bne.n	80119c4 <_printf_i+0x14c>
 80119ac:	6823      	ldr	r3, [r4, #0]
 80119ae:	07df      	lsls	r7, r3, #31
 80119b0:	d508      	bpl.n	80119c4 <_printf_i+0x14c>
 80119b2:	6923      	ldr	r3, [r4, #16]
 80119b4:	6861      	ldr	r1, [r4, #4]
 80119b6:	4299      	cmp	r1, r3
 80119b8:	bfde      	ittt	le
 80119ba:	2330      	movle	r3, #48	; 0x30
 80119bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80119c0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80119c4:	1b92      	subs	r2, r2, r6
 80119c6:	6122      	str	r2, [r4, #16]
 80119c8:	f8cd a000 	str.w	sl, [sp]
 80119cc:	464b      	mov	r3, r9
 80119ce:	aa03      	add	r2, sp, #12
 80119d0:	4621      	mov	r1, r4
 80119d2:	4640      	mov	r0, r8
 80119d4:	f7ff fee2 	bl	801179c <_printf_common>
 80119d8:	3001      	adds	r0, #1
 80119da:	d14c      	bne.n	8011a76 <_printf_i+0x1fe>
 80119dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119e0:	b004      	add	sp, #16
 80119e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119e6:	4835      	ldr	r0, [pc, #212]	; (8011abc <_printf_i+0x244>)
 80119e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80119ec:	6823      	ldr	r3, [r4, #0]
 80119ee:	680e      	ldr	r6, [r1, #0]
 80119f0:	061f      	lsls	r7, r3, #24
 80119f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80119f6:	600e      	str	r6, [r1, #0]
 80119f8:	d514      	bpl.n	8011a24 <_printf_i+0x1ac>
 80119fa:	07d9      	lsls	r1, r3, #31
 80119fc:	bf44      	itt	mi
 80119fe:	f043 0320 	orrmi.w	r3, r3, #32
 8011a02:	6023      	strmi	r3, [r4, #0]
 8011a04:	b91d      	cbnz	r5, 8011a0e <_printf_i+0x196>
 8011a06:	6823      	ldr	r3, [r4, #0]
 8011a08:	f023 0320 	bic.w	r3, r3, #32
 8011a0c:	6023      	str	r3, [r4, #0]
 8011a0e:	2310      	movs	r3, #16
 8011a10:	e7b0      	b.n	8011974 <_printf_i+0xfc>
 8011a12:	6823      	ldr	r3, [r4, #0]
 8011a14:	f043 0320 	orr.w	r3, r3, #32
 8011a18:	6023      	str	r3, [r4, #0]
 8011a1a:	2378      	movs	r3, #120	; 0x78
 8011a1c:	4828      	ldr	r0, [pc, #160]	; (8011ac0 <_printf_i+0x248>)
 8011a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011a22:	e7e3      	b.n	80119ec <_printf_i+0x174>
 8011a24:	065e      	lsls	r6, r3, #25
 8011a26:	bf48      	it	mi
 8011a28:	b2ad      	uxthmi	r5, r5
 8011a2a:	e7e6      	b.n	80119fa <_printf_i+0x182>
 8011a2c:	4616      	mov	r6, r2
 8011a2e:	e7bb      	b.n	80119a8 <_printf_i+0x130>
 8011a30:	680b      	ldr	r3, [r1, #0]
 8011a32:	6826      	ldr	r6, [r4, #0]
 8011a34:	6960      	ldr	r0, [r4, #20]
 8011a36:	1d1d      	adds	r5, r3, #4
 8011a38:	600d      	str	r5, [r1, #0]
 8011a3a:	0635      	lsls	r5, r6, #24
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	d501      	bpl.n	8011a44 <_printf_i+0x1cc>
 8011a40:	6018      	str	r0, [r3, #0]
 8011a42:	e002      	b.n	8011a4a <_printf_i+0x1d2>
 8011a44:	0671      	lsls	r1, r6, #25
 8011a46:	d5fb      	bpl.n	8011a40 <_printf_i+0x1c8>
 8011a48:	8018      	strh	r0, [r3, #0]
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	6123      	str	r3, [r4, #16]
 8011a4e:	4616      	mov	r6, r2
 8011a50:	e7ba      	b.n	80119c8 <_printf_i+0x150>
 8011a52:	680b      	ldr	r3, [r1, #0]
 8011a54:	1d1a      	adds	r2, r3, #4
 8011a56:	600a      	str	r2, [r1, #0]
 8011a58:	681e      	ldr	r6, [r3, #0]
 8011a5a:	6862      	ldr	r2, [r4, #4]
 8011a5c:	2100      	movs	r1, #0
 8011a5e:	4630      	mov	r0, r6
 8011a60:	f7ee fbee 	bl	8000240 <memchr>
 8011a64:	b108      	cbz	r0, 8011a6a <_printf_i+0x1f2>
 8011a66:	1b80      	subs	r0, r0, r6
 8011a68:	6060      	str	r0, [r4, #4]
 8011a6a:	6863      	ldr	r3, [r4, #4]
 8011a6c:	6123      	str	r3, [r4, #16]
 8011a6e:	2300      	movs	r3, #0
 8011a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a74:	e7a8      	b.n	80119c8 <_printf_i+0x150>
 8011a76:	6923      	ldr	r3, [r4, #16]
 8011a78:	4632      	mov	r2, r6
 8011a7a:	4649      	mov	r1, r9
 8011a7c:	4640      	mov	r0, r8
 8011a7e:	47d0      	blx	sl
 8011a80:	3001      	adds	r0, #1
 8011a82:	d0ab      	beq.n	80119dc <_printf_i+0x164>
 8011a84:	6823      	ldr	r3, [r4, #0]
 8011a86:	079b      	lsls	r3, r3, #30
 8011a88:	d413      	bmi.n	8011ab2 <_printf_i+0x23a>
 8011a8a:	68e0      	ldr	r0, [r4, #12]
 8011a8c:	9b03      	ldr	r3, [sp, #12]
 8011a8e:	4298      	cmp	r0, r3
 8011a90:	bfb8      	it	lt
 8011a92:	4618      	movlt	r0, r3
 8011a94:	e7a4      	b.n	80119e0 <_printf_i+0x168>
 8011a96:	2301      	movs	r3, #1
 8011a98:	4632      	mov	r2, r6
 8011a9a:	4649      	mov	r1, r9
 8011a9c:	4640      	mov	r0, r8
 8011a9e:	47d0      	blx	sl
 8011aa0:	3001      	adds	r0, #1
 8011aa2:	d09b      	beq.n	80119dc <_printf_i+0x164>
 8011aa4:	3501      	adds	r5, #1
 8011aa6:	68e3      	ldr	r3, [r4, #12]
 8011aa8:	9903      	ldr	r1, [sp, #12]
 8011aaa:	1a5b      	subs	r3, r3, r1
 8011aac:	42ab      	cmp	r3, r5
 8011aae:	dcf2      	bgt.n	8011a96 <_printf_i+0x21e>
 8011ab0:	e7eb      	b.n	8011a8a <_printf_i+0x212>
 8011ab2:	2500      	movs	r5, #0
 8011ab4:	f104 0619 	add.w	r6, r4, #25
 8011ab8:	e7f5      	b.n	8011aa6 <_printf_i+0x22e>
 8011aba:	bf00      	nop
 8011abc:	08012ea9 	.word	0x08012ea9
 8011ac0:	08012eba 	.word	0x08012eba

08011ac4 <_open_r>:
 8011ac4:	b538      	push	{r3, r4, r5, lr}
 8011ac6:	4d07      	ldr	r5, [pc, #28]	; (8011ae4 <_open_r+0x20>)
 8011ac8:	4604      	mov	r4, r0
 8011aca:	4608      	mov	r0, r1
 8011acc:	4611      	mov	r1, r2
 8011ace:	2200      	movs	r2, #0
 8011ad0:	602a      	str	r2, [r5, #0]
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	f7f3 ffb3 	bl	8005a3e <_open>
 8011ad8:	1c43      	adds	r3, r0, #1
 8011ada:	d102      	bne.n	8011ae2 <_open_r+0x1e>
 8011adc:	682b      	ldr	r3, [r5, #0]
 8011ade:	b103      	cbz	r3, 8011ae2 <_open_r+0x1e>
 8011ae0:	6023      	str	r3, [r4, #0]
 8011ae2:	bd38      	pop	{r3, r4, r5, pc}
 8011ae4:	20009c68 	.word	0x20009c68

08011ae8 <iprintf>:
 8011ae8:	b40f      	push	{r0, r1, r2, r3}
 8011aea:	4b0a      	ldr	r3, [pc, #40]	; (8011b14 <iprintf+0x2c>)
 8011aec:	b513      	push	{r0, r1, r4, lr}
 8011aee:	681c      	ldr	r4, [r3, #0]
 8011af0:	b124      	cbz	r4, 8011afc <iprintf+0x14>
 8011af2:	69a3      	ldr	r3, [r4, #24]
 8011af4:	b913      	cbnz	r3, 8011afc <iprintf+0x14>
 8011af6:	4620      	mov	r0, r4
 8011af8:	f7ff f872 	bl	8010be0 <__sinit>
 8011afc:	ab05      	add	r3, sp, #20
 8011afe:	9a04      	ldr	r2, [sp, #16]
 8011b00:	68a1      	ldr	r1, [r4, #8]
 8011b02:	9301      	str	r3, [sp, #4]
 8011b04:	4620      	mov	r0, r4
 8011b06:	f7ff fd19 	bl	801153c <_vfiprintf_r>
 8011b0a:	b002      	add	sp, #8
 8011b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b10:	b004      	add	sp, #16
 8011b12:	4770      	bx	lr
 8011b14:	200009dc 	.word	0x200009dc

08011b18 <_puts_r>:
 8011b18:	b570      	push	{r4, r5, r6, lr}
 8011b1a:	460e      	mov	r6, r1
 8011b1c:	4605      	mov	r5, r0
 8011b1e:	b118      	cbz	r0, 8011b28 <_puts_r+0x10>
 8011b20:	6983      	ldr	r3, [r0, #24]
 8011b22:	b90b      	cbnz	r3, 8011b28 <_puts_r+0x10>
 8011b24:	f7ff f85c 	bl	8010be0 <__sinit>
 8011b28:	69ab      	ldr	r3, [r5, #24]
 8011b2a:	68ac      	ldr	r4, [r5, #8]
 8011b2c:	b913      	cbnz	r3, 8011b34 <_puts_r+0x1c>
 8011b2e:	4628      	mov	r0, r5
 8011b30:	f7ff f856 	bl	8010be0 <__sinit>
 8011b34:	4b2c      	ldr	r3, [pc, #176]	; (8011be8 <_puts_r+0xd0>)
 8011b36:	429c      	cmp	r4, r3
 8011b38:	d120      	bne.n	8011b7c <_puts_r+0x64>
 8011b3a:	686c      	ldr	r4, [r5, #4]
 8011b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b3e:	07db      	lsls	r3, r3, #31
 8011b40:	d405      	bmi.n	8011b4e <_puts_r+0x36>
 8011b42:	89a3      	ldrh	r3, [r4, #12]
 8011b44:	0598      	lsls	r0, r3, #22
 8011b46:	d402      	bmi.n	8011b4e <_puts_r+0x36>
 8011b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b4a:	f7ff fb97 	bl	801127c <__retarget_lock_acquire_recursive>
 8011b4e:	89a3      	ldrh	r3, [r4, #12]
 8011b50:	0719      	lsls	r1, r3, #28
 8011b52:	d51d      	bpl.n	8011b90 <_puts_r+0x78>
 8011b54:	6923      	ldr	r3, [r4, #16]
 8011b56:	b1db      	cbz	r3, 8011b90 <_puts_r+0x78>
 8011b58:	3e01      	subs	r6, #1
 8011b5a:	68a3      	ldr	r3, [r4, #8]
 8011b5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011b60:	3b01      	subs	r3, #1
 8011b62:	60a3      	str	r3, [r4, #8]
 8011b64:	bb39      	cbnz	r1, 8011bb6 <_puts_r+0x9e>
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	da38      	bge.n	8011bdc <_puts_r+0xc4>
 8011b6a:	4622      	mov	r2, r4
 8011b6c:	210a      	movs	r1, #10
 8011b6e:	4628      	mov	r0, r5
 8011b70:	f000 f9ee 	bl	8011f50 <__swbuf_r>
 8011b74:	3001      	adds	r0, #1
 8011b76:	d011      	beq.n	8011b9c <_puts_r+0x84>
 8011b78:	250a      	movs	r5, #10
 8011b7a:	e011      	b.n	8011ba0 <_puts_r+0x88>
 8011b7c:	4b1b      	ldr	r3, [pc, #108]	; (8011bec <_puts_r+0xd4>)
 8011b7e:	429c      	cmp	r4, r3
 8011b80:	d101      	bne.n	8011b86 <_puts_r+0x6e>
 8011b82:	68ac      	ldr	r4, [r5, #8]
 8011b84:	e7da      	b.n	8011b3c <_puts_r+0x24>
 8011b86:	4b1a      	ldr	r3, [pc, #104]	; (8011bf0 <_puts_r+0xd8>)
 8011b88:	429c      	cmp	r4, r3
 8011b8a:	bf08      	it	eq
 8011b8c:	68ec      	ldreq	r4, [r5, #12]
 8011b8e:	e7d5      	b.n	8011b3c <_puts_r+0x24>
 8011b90:	4621      	mov	r1, r4
 8011b92:	4628      	mov	r0, r5
 8011b94:	f000 fa40 	bl	8012018 <__swsetup_r>
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	d0dd      	beq.n	8011b58 <_puts_r+0x40>
 8011b9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ba2:	07da      	lsls	r2, r3, #31
 8011ba4:	d405      	bmi.n	8011bb2 <_puts_r+0x9a>
 8011ba6:	89a3      	ldrh	r3, [r4, #12]
 8011ba8:	059b      	lsls	r3, r3, #22
 8011baa:	d402      	bmi.n	8011bb2 <_puts_r+0x9a>
 8011bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bae:	f7ff fb66 	bl	801127e <__retarget_lock_release_recursive>
 8011bb2:	4628      	mov	r0, r5
 8011bb4:	bd70      	pop	{r4, r5, r6, pc}
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	da04      	bge.n	8011bc4 <_puts_r+0xac>
 8011bba:	69a2      	ldr	r2, [r4, #24]
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	dc06      	bgt.n	8011bce <_puts_r+0xb6>
 8011bc0:	290a      	cmp	r1, #10
 8011bc2:	d004      	beq.n	8011bce <_puts_r+0xb6>
 8011bc4:	6823      	ldr	r3, [r4, #0]
 8011bc6:	1c5a      	adds	r2, r3, #1
 8011bc8:	6022      	str	r2, [r4, #0]
 8011bca:	7019      	strb	r1, [r3, #0]
 8011bcc:	e7c5      	b.n	8011b5a <_puts_r+0x42>
 8011bce:	4622      	mov	r2, r4
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	f000 f9bd 	bl	8011f50 <__swbuf_r>
 8011bd6:	3001      	adds	r0, #1
 8011bd8:	d1bf      	bne.n	8011b5a <_puts_r+0x42>
 8011bda:	e7df      	b.n	8011b9c <_puts_r+0x84>
 8011bdc:	6823      	ldr	r3, [r4, #0]
 8011bde:	250a      	movs	r5, #10
 8011be0:	1c5a      	adds	r2, r3, #1
 8011be2:	6022      	str	r2, [r4, #0]
 8011be4:	701d      	strb	r5, [r3, #0]
 8011be6:	e7db      	b.n	8011ba0 <_puts_r+0x88>
 8011be8:	08012e54 	.word	0x08012e54
 8011bec:	08012e74 	.word	0x08012e74
 8011bf0:	08012e34 	.word	0x08012e34

08011bf4 <puts>:
 8011bf4:	4b02      	ldr	r3, [pc, #8]	; (8011c00 <puts+0xc>)
 8011bf6:	4601      	mov	r1, r0
 8011bf8:	6818      	ldr	r0, [r3, #0]
 8011bfa:	f7ff bf8d 	b.w	8011b18 <_puts_r>
 8011bfe:	bf00      	nop
 8011c00:	200009dc 	.word	0x200009dc

08011c04 <cleanup_glue>:
 8011c04:	b538      	push	{r3, r4, r5, lr}
 8011c06:	460c      	mov	r4, r1
 8011c08:	6809      	ldr	r1, [r1, #0]
 8011c0a:	4605      	mov	r5, r0
 8011c0c:	b109      	cbz	r1, 8011c12 <cleanup_glue+0xe>
 8011c0e:	f7ff fff9 	bl	8011c04 <cleanup_glue>
 8011c12:	4621      	mov	r1, r4
 8011c14:	4628      	mov	r0, r5
 8011c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c1a:	f7ff bbbb 	b.w	8011394 <_free_r>
	...

08011c20 <_reclaim_reent>:
 8011c20:	4b2c      	ldr	r3, [pc, #176]	; (8011cd4 <_reclaim_reent+0xb4>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	4283      	cmp	r3, r0
 8011c26:	b570      	push	{r4, r5, r6, lr}
 8011c28:	4604      	mov	r4, r0
 8011c2a:	d051      	beq.n	8011cd0 <_reclaim_reent+0xb0>
 8011c2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011c2e:	b143      	cbz	r3, 8011c42 <_reclaim_reent+0x22>
 8011c30:	68db      	ldr	r3, [r3, #12]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d14a      	bne.n	8011ccc <_reclaim_reent+0xac>
 8011c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c38:	6819      	ldr	r1, [r3, #0]
 8011c3a:	b111      	cbz	r1, 8011c42 <_reclaim_reent+0x22>
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f7ff fba9 	bl	8011394 <_free_r>
 8011c42:	6961      	ldr	r1, [r4, #20]
 8011c44:	b111      	cbz	r1, 8011c4c <_reclaim_reent+0x2c>
 8011c46:	4620      	mov	r0, r4
 8011c48:	f7ff fba4 	bl	8011394 <_free_r>
 8011c4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011c4e:	b111      	cbz	r1, 8011c56 <_reclaim_reent+0x36>
 8011c50:	4620      	mov	r0, r4
 8011c52:	f7ff fb9f 	bl	8011394 <_free_r>
 8011c56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011c58:	b111      	cbz	r1, 8011c60 <_reclaim_reent+0x40>
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	f7ff fb9a 	bl	8011394 <_free_r>
 8011c60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011c62:	b111      	cbz	r1, 8011c6a <_reclaim_reent+0x4a>
 8011c64:	4620      	mov	r0, r4
 8011c66:	f7ff fb95 	bl	8011394 <_free_r>
 8011c6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011c6c:	b111      	cbz	r1, 8011c74 <_reclaim_reent+0x54>
 8011c6e:	4620      	mov	r0, r4
 8011c70:	f7ff fb90 	bl	8011394 <_free_r>
 8011c74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011c76:	b111      	cbz	r1, 8011c7e <_reclaim_reent+0x5e>
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f7ff fb8b 	bl	8011394 <_free_r>
 8011c7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011c80:	b111      	cbz	r1, 8011c88 <_reclaim_reent+0x68>
 8011c82:	4620      	mov	r0, r4
 8011c84:	f7ff fb86 	bl	8011394 <_free_r>
 8011c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c8a:	b111      	cbz	r1, 8011c92 <_reclaim_reent+0x72>
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	f7ff fb81 	bl	8011394 <_free_r>
 8011c92:	69a3      	ldr	r3, [r4, #24]
 8011c94:	b1e3      	cbz	r3, 8011cd0 <_reclaim_reent+0xb0>
 8011c96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011c98:	4620      	mov	r0, r4
 8011c9a:	4798      	blx	r3
 8011c9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011c9e:	b1b9      	cbz	r1, 8011cd0 <_reclaim_reent+0xb0>
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ca6:	f7ff bfad 	b.w	8011c04 <cleanup_glue>
 8011caa:	5949      	ldr	r1, [r1, r5]
 8011cac:	b941      	cbnz	r1, 8011cc0 <_reclaim_reent+0xa0>
 8011cae:	3504      	adds	r5, #4
 8011cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cb2:	2d80      	cmp	r5, #128	; 0x80
 8011cb4:	68d9      	ldr	r1, [r3, #12]
 8011cb6:	d1f8      	bne.n	8011caa <_reclaim_reent+0x8a>
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f7ff fb6b 	bl	8011394 <_free_r>
 8011cbe:	e7ba      	b.n	8011c36 <_reclaim_reent+0x16>
 8011cc0:	680e      	ldr	r6, [r1, #0]
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	f7ff fb66 	bl	8011394 <_free_r>
 8011cc8:	4631      	mov	r1, r6
 8011cca:	e7ef      	b.n	8011cac <_reclaim_reent+0x8c>
 8011ccc:	2500      	movs	r5, #0
 8011cce:	e7ef      	b.n	8011cb0 <_reclaim_reent+0x90>
 8011cd0:	bd70      	pop	{r4, r5, r6, pc}
 8011cd2:	bf00      	nop
 8011cd4:	200009dc 	.word	0x200009dc

08011cd8 <lflush>:
 8011cd8:	8983      	ldrh	r3, [r0, #12]
 8011cda:	f003 0309 	and.w	r3, r3, #9
 8011cde:	2b09      	cmp	r3, #9
 8011ce0:	d101      	bne.n	8011ce6 <lflush+0xe>
 8011ce2:	f7fe bf13 	b.w	8010b0c <fflush>
 8011ce6:	2000      	movs	r0, #0
 8011ce8:	4770      	bx	lr
	...

08011cec <__srefill_r>:
 8011cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cee:	460c      	mov	r4, r1
 8011cf0:	4605      	mov	r5, r0
 8011cf2:	b118      	cbz	r0, 8011cfc <__srefill_r+0x10>
 8011cf4:	6983      	ldr	r3, [r0, #24]
 8011cf6:	b90b      	cbnz	r3, 8011cfc <__srefill_r+0x10>
 8011cf8:	f7fe ff72 	bl	8010be0 <__sinit>
 8011cfc:	4b3b      	ldr	r3, [pc, #236]	; (8011dec <__srefill_r+0x100>)
 8011cfe:	429c      	cmp	r4, r3
 8011d00:	d10a      	bne.n	8011d18 <__srefill_r+0x2c>
 8011d02:	686c      	ldr	r4, [r5, #4]
 8011d04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d08:	2300      	movs	r3, #0
 8011d0a:	6063      	str	r3, [r4, #4]
 8011d0c:	89a3      	ldrh	r3, [r4, #12]
 8011d0e:	069e      	lsls	r6, r3, #26
 8011d10:	d50c      	bpl.n	8011d2c <__srefill_r+0x40>
 8011d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d16:	e066      	b.n	8011de6 <__srefill_r+0xfa>
 8011d18:	4b35      	ldr	r3, [pc, #212]	; (8011df0 <__srefill_r+0x104>)
 8011d1a:	429c      	cmp	r4, r3
 8011d1c:	d101      	bne.n	8011d22 <__srefill_r+0x36>
 8011d1e:	68ac      	ldr	r4, [r5, #8]
 8011d20:	e7f0      	b.n	8011d04 <__srefill_r+0x18>
 8011d22:	4b34      	ldr	r3, [pc, #208]	; (8011df4 <__srefill_r+0x108>)
 8011d24:	429c      	cmp	r4, r3
 8011d26:	bf08      	it	eq
 8011d28:	68ec      	ldreq	r4, [r5, #12]
 8011d2a:	e7eb      	b.n	8011d04 <__srefill_r+0x18>
 8011d2c:	0758      	lsls	r0, r3, #29
 8011d2e:	d448      	bmi.n	8011dc2 <__srefill_r+0xd6>
 8011d30:	06d9      	lsls	r1, r3, #27
 8011d32:	d405      	bmi.n	8011d40 <__srefill_r+0x54>
 8011d34:	2309      	movs	r3, #9
 8011d36:	602b      	str	r3, [r5, #0]
 8011d38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d3c:	81a3      	strh	r3, [r4, #12]
 8011d3e:	e7e8      	b.n	8011d12 <__srefill_r+0x26>
 8011d40:	071a      	lsls	r2, r3, #28
 8011d42:	d50b      	bpl.n	8011d5c <__srefill_r+0x70>
 8011d44:	4621      	mov	r1, r4
 8011d46:	4628      	mov	r0, r5
 8011d48:	f7fe fea4 	bl	8010a94 <_fflush_r>
 8011d4c:	2800      	cmp	r0, #0
 8011d4e:	d1e0      	bne.n	8011d12 <__srefill_r+0x26>
 8011d50:	89a3      	ldrh	r3, [r4, #12]
 8011d52:	60a0      	str	r0, [r4, #8]
 8011d54:	f023 0308 	bic.w	r3, r3, #8
 8011d58:	81a3      	strh	r3, [r4, #12]
 8011d5a:	61a0      	str	r0, [r4, #24]
 8011d5c:	89a3      	ldrh	r3, [r4, #12]
 8011d5e:	f043 0304 	orr.w	r3, r3, #4
 8011d62:	81a3      	strh	r3, [r4, #12]
 8011d64:	6923      	ldr	r3, [r4, #16]
 8011d66:	b91b      	cbnz	r3, 8011d70 <__srefill_r+0x84>
 8011d68:	4621      	mov	r1, r4
 8011d6a:	4628      	mov	r0, r5
 8011d6c:	f7ff faac 	bl	80112c8 <__smakebuf_r>
 8011d70:	89a6      	ldrh	r6, [r4, #12]
 8011d72:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8011d76:	07b3      	lsls	r3, r6, #30
 8011d78:	d00f      	beq.n	8011d9a <__srefill_r+0xae>
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	81a3      	strh	r3, [r4, #12]
 8011d7e:	4b1e      	ldr	r3, [pc, #120]	; (8011df8 <__srefill_r+0x10c>)
 8011d80:	491e      	ldr	r1, [pc, #120]	; (8011dfc <__srefill_r+0x110>)
 8011d82:	6818      	ldr	r0, [r3, #0]
 8011d84:	f006 0609 	and.w	r6, r6, #9
 8011d88:	f7ff f9a8 	bl	80110dc <_fwalk>
 8011d8c:	2e09      	cmp	r6, #9
 8011d8e:	81a7      	strh	r7, [r4, #12]
 8011d90:	d103      	bne.n	8011d9a <__srefill_r+0xae>
 8011d92:	4621      	mov	r1, r4
 8011d94:	4628      	mov	r0, r5
 8011d96:	f7fe fdf7 	bl	8010988 <__sflush_r>
 8011d9a:	6922      	ldr	r2, [r4, #16]
 8011d9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011d9e:	6963      	ldr	r3, [r4, #20]
 8011da0:	6a21      	ldr	r1, [r4, #32]
 8011da2:	6022      	str	r2, [r4, #0]
 8011da4:	4628      	mov	r0, r5
 8011da6:	47b0      	blx	r6
 8011da8:	2800      	cmp	r0, #0
 8011daa:	6060      	str	r0, [r4, #4]
 8011dac:	dc1c      	bgt.n	8011de8 <__srefill_r+0xfc>
 8011dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011db2:	bf17      	itett	ne
 8011db4:	2200      	movne	r2, #0
 8011db6:	f043 0320 	orreq.w	r3, r3, #32
 8011dba:	6062      	strne	r2, [r4, #4]
 8011dbc:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8011dc0:	e7bc      	b.n	8011d3c <__srefill_r+0x50>
 8011dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011dc4:	2900      	cmp	r1, #0
 8011dc6:	d0cd      	beq.n	8011d64 <__srefill_r+0x78>
 8011dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011dcc:	4299      	cmp	r1, r3
 8011dce:	d002      	beq.n	8011dd6 <__srefill_r+0xea>
 8011dd0:	4628      	mov	r0, r5
 8011dd2:	f7ff fadf 	bl	8011394 <_free_r>
 8011dd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011dd8:	6063      	str	r3, [r4, #4]
 8011dda:	2000      	movs	r0, #0
 8011ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d0c0      	beq.n	8011d64 <__srefill_r+0x78>
 8011de2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011de4:	6023      	str	r3, [r4, #0]
 8011de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011de8:	2000      	movs	r0, #0
 8011dea:	e7fc      	b.n	8011de6 <__srefill_r+0xfa>
 8011dec:	08012e54 	.word	0x08012e54
 8011df0:	08012e74 	.word	0x08012e74
 8011df4:	08012e34 	.word	0x08012e34
 8011df8:	08012e94 	.word	0x08012e94
 8011dfc:	08011cd9 	.word	0x08011cd9

08011e00 <_sbrk_r>:
 8011e00:	b538      	push	{r3, r4, r5, lr}
 8011e02:	4d06      	ldr	r5, [pc, #24]	; (8011e1c <_sbrk_r+0x1c>)
 8011e04:	2300      	movs	r3, #0
 8011e06:	4604      	mov	r4, r0
 8011e08:	4608      	mov	r0, r1
 8011e0a:	602b      	str	r3, [r5, #0]
 8011e0c:	f7f3 fe26 	bl	8005a5c <_sbrk>
 8011e10:	1c43      	adds	r3, r0, #1
 8011e12:	d102      	bne.n	8011e1a <_sbrk_r+0x1a>
 8011e14:	682b      	ldr	r3, [r5, #0]
 8011e16:	b103      	cbz	r3, 8011e1a <_sbrk_r+0x1a>
 8011e18:	6023      	str	r3, [r4, #0]
 8011e1a:	bd38      	pop	{r3, r4, r5, pc}
 8011e1c:	20009c68 	.word	0x20009c68

08011e20 <sniprintf>:
 8011e20:	b40c      	push	{r2, r3}
 8011e22:	b530      	push	{r4, r5, lr}
 8011e24:	4b17      	ldr	r3, [pc, #92]	; (8011e84 <sniprintf+0x64>)
 8011e26:	1e0c      	subs	r4, r1, #0
 8011e28:	681d      	ldr	r5, [r3, #0]
 8011e2a:	b09d      	sub	sp, #116	; 0x74
 8011e2c:	da08      	bge.n	8011e40 <sniprintf+0x20>
 8011e2e:	238b      	movs	r3, #139	; 0x8b
 8011e30:	602b      	str	r3, [r5, #0]
 8011e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e36:	b01d      	add	sp, #116	; 0x74
 8011e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e3c:	b002      	add	sp, #8
 8011e3e:	4770      	bx	lr
 8011e40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011e44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011e48:	bf14      	ite	ne
 8011e4a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011e4e:	4623      	moveq	r3, r4
 8011e50:	9304      	str	r3, [sp, #16]
 8011e52:	9307      	str	r3, [sp, #28]
 8011e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e58:	9002      	str	r0, [sp, #8]
 8011e5a:	9006      	str	r0, [sp, #24]
 8011e5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011e60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011e62:	ab21      	add	r3, sp, #132	; 0x84
 8011e64:	a902      	add	r1, sp, #8
 8011e66:	4628      	mov	r0, r5
 8011e68:	9301      	str	r3, [sp, #4]
 8011e6a:	f000 fa65 	bl	8012338 <_svfiprintf_r>
 8011e6e:	1c43      	adds	r3, r0, #1
 8011e70:	bfbc      	itt	lt
 8011e72:	238b      	movlt	r3, #139	; 0x8b
 8011e74:	602b      	strlt	r3, [r5, #0]
 8011e76:	2c00      	cmp	r4, #0
 8011e78:	d0dd      	beq.n	8011e36 <sniprintf+0x16>
 8011e7a:	9b02      	ldr	r3, [sp, #8]
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	701a      	strb	r2, [r3, #0]
 8011e80:	e7d9      	b.n	8011e36 <sniprintf+0x16>
 8011e82:	bf00      	nop
 8011e84:	200009dc 	.word	0x200009dc

08011e88 <siprintf>:
 8011e88:	b40e      	push	{r1, r2, r3}
 8011e8a:	b500      	push	{lr}
 8011e8c:	b09c      	sub	sp, #112	; 0x70
 8011e8e:	ab1d      	add	r3, sp, #116	; 0x74
 8011e90:	9002      	str	r0, [sp, #8]
 8011e92:	9006      	str	r0, [sp, #24]
 8011e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011e98:	4809      	ldr	r0, [pc, #36]	; (8011ec0 <siprintf+0x38>)
 8011e9a:	9107      	str	r1, [sp, #28]
 8011e9c:	9104      	str	r1, [sp, #16]
 8011e9e:	4909      	ldr	r1, [pc, #36]	; (8011ec4 <siprintf+0x3c>)
 8011ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ea4:	9105      	str	r1, [sp, #20]
 8011ea6:	6800      	ldr	r0, [r0, #0]
 8011ea8:	9301      	str	r3, [sp, #4]
 8011eaa:	a902      	add	r1, sp, #8
 8011eac:	f000 fa44 	bl	8012338 <_svfiprintf_r>
 8011eb0:	9b02      	ldr	r3, [sp, #8]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	701a      	strb	r2, [r3, #0]
 8011eb6:	b01c      	add	sp, #112	; 0x70
 8011eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ebc:	b003      	add	sp, #12
 8011ebe:	4770      	bx	lr
 8011ec0:	200009dc 	.word	0x200009dc
 8011ec4:	ffff0208 	.word	0xffff0208

08011ec8 <__sread>:
 8011ec8:	b510      	push	{r4, lr}
 8011eca:	460c      	mov	r4, r1
 8011ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ed0:	f000 fb32 	bl	8012538 <_read_r>
 8011ed4:	2800      	cmp	r0, #0
 8011ed6:	bfab      	itete	ge
 8011ed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011eda:	89a3      	ldrhlt	r3, [r4, #12]
 8011edc:	181b      	addge	r3, r3, r0
 8011ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011ee2:	bfac      	ite	ge
 8011ee4:	6563      	strge	r3, [r4, #84]	; 0x54
 8011ee6:	81a3      	strhlt	r3, [r4, #12]
 8011ee8:	bd10      	pop	{r4, pc}

08011eea <__swrite>:
 8011eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eee:	461f      	mov	r7, r3
 8011ef0:	898b      	ldrh	r3, [r1, #12]
 8011ef2:	05db      	lsls	r3, r3, #23
 8011ef4:	4605      	mov	r5, r0
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	4616      	mov	r6, r2
 8011efa:	d505      	bpl.n	8011f08 <__swrite+0x1e>
 8011efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f00:	2302      	movs	r3, #2
 8011f02:	2200      	movs	r2, #0
 8011f04:	f000 f95e 	bl	80121c4 <_lseek_r>
 8011f08:	89a3      	ldrh	r3, [r4, #12]
 8011f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011f12:	81a3      	strh	r3, [r4, #12]
 8011f14:	4632      	mov	r2, r6
 8011f16:	463b      	mov	r3, r7
 8011f18:	4628      	mov	r0, r5
 8011f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f1e:	f000 b869 	b.w	8011ff4 <_write_r>

08011f22 <__sseek>:
 8011f22:	b510      	push	{r4, lr}
 8011f24:	460c      	mov	r4, r1
 8011f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f2a:	f000 f94b 	bl	80121c4 <_lseek_r>
 8011f2e:	1c43      	adds	r3, r0, #1
 8011f30:	89a3      	ldrh	r3, [r4, #12]
 8011f32:	bf15      	itete	ne
 8011f34:	6560      	strne	r0, [r4, #84]	; 0x54
 8011f36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011f3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f3e:	81a3      	strheq	r3, [r4, #12]
 8011f40:	bf18      	it	ne
 8011f42:	81a3      	strhne	r3, [r4, #12]
 8011f44:	bd10      	pop	{r4, pc}

08011f46 <__sclose>:
 8011f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f4a:	f000 b8d3 	b.w	80120f4 <_close_r>
	...

08011f50 <__swbuf_r>:
 8011f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f52:	460e      	mov	r6, r1
 8011f54:	4614      	mov	r4, r2
 8011f56:	4605      	mov	r5, r0
 8011f58:	b118      	cbz	r0, 8011f62 <__swbuf_r+0x12>
 8011f5a:	6983      	ldr	r3, [r0, #24]
 8011f5c:	b90b      	cbnz	r3, 8011f62 <__swbuf_r+0x12>
 8011f5e:	f7fe fe3f 	bl	8010be0 <__sinit>
 8011f62:	4b21      	ldr	r3, [pc, #132]	; (8011fe8 <__swbuf_r+0x98>)
 8011f64:	429c      	cmp	r4, r3
 8011f66:	d12b      	bne.n	8011fc0 <__swbuf_r+0x70>
 8011f68:	686c      	ldr	r4, [r5, #4]
 8011f6a:	69a3      	ldr	r3, [r4, #24]
 8011f6c:	60a3      	str	r3, [r4, #8]
 8011f6e:	89a3      	ldrh	r3, [r4, #12]
 8011f70:	071a      	lsls	r2, r3, #28
 8011f72:	d52f      	bpl.n	8011fd4 <__swbuf_r+0x84>
 8011f74:	6923      	ldr	r3, [r4, #16]
 8011f76:	b36b      	cbz	r3, 8011fd4 <__swbuf_r+0x84>
 8011f78:	6923      	ldr	r3, [r4, #16]
 8011f7a:	6820      	ldr	r0, [r4, #0]
 8011f7c:	1ac0      	subs	r0, r0, r3
 8011f7e:	6963      	ldr	r3, [r4, #20]
 8011f80:	b2f6      	uxtb	r6, r6
 8011f82:	4283      	cmp	r3, r0
 8011f84:	4637      	mov	r7, r6
 8011f86:	dc04      	bgt.n	8011f92 <__swbuf_r+0x42>
 8011f88:	4621      	mov	r1, r4
 8011f8a:	4628      	mov	r0, r5
 8011f8c:	f7fe fd82 	bl	8010a94 <_fflush_r>
 8011f90:	bb30      	cbnz	r0, 8011fe0 <__swbuf_r+0x90>
 8011f92:	68a3      	ldr	r3, [r4, #8]
 8011f94:	3b01      	subs	r3, #1
 8011f96:	60a3      	str	r3, [r4, #8]
 8011f98:	6823      	ldr	r3, [r4, #0]
 8011f9a:	1c5a      	adds	r2, r3, #1
 8011f9c:	6022      	str	r2, [r4, #0]
 8011f9e:	701e      	strb	r6, [r3, #0]
 8011fa0:	6963      	ldr	r3, [r4, #20]
 8011fa2:	3001      	adds	r0, #1
 8011fa4:	4283      	cmp	r3, r0
 8011fa6:	d004      	beq.n	8011fb2 <__swbuf_r+0x62>
 8011fa8:	89a3      	ldrh	r3, [r4, #12]
 8011faa:	07db      	lsls	r3, r3, #31
 8011fac:	d506      	bpl.n	8011fbc <__swbuf_r+0x6c>
 8011fae:	2e0a      	cmp	r6, #10
 8011fb0:	d104      	bne.n	8011fbc <__swbuf_r+0x6c>
 8011fb2:	4621      	mov	r1, r4
 8011fb4:	4628      	mov	r0, r5
 8011fb6:	f7fe fd6d 	bl	8010a94 <_fflush_r>
 8011fba:	b988      	cbnz	r0, 8011fe0 <__swbuf_r+0x90>
 8011fbc:	4638      	mov	r0, r7
 8011fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fc0:	4b0a      	ldr	r3, [pc, #40]	; (8011fec <__swbuf_r+0x9c>)
 8011fc2:	429c      	cmp	r4, r3
 8011fc4:	d101      	bne.n	8011fca <__swbuf_r+0x7a>
 8011fc6:	68ac      	ldr	r4, [r5, #8]
 8011fc8:	e7cf      	b.n	8011f6a <__swbuf_r+0x1a>
 8011fca:	4b09      	ldr	r3, [pc, #36]	; (8011ff0 <__swbuf_r+0xa0>)
 8011fcc:	429c      	cmp	r4, r3
 8011fce:	bf08      	it	eq
 8011fd0:	68ec      	ldreq	r4, [r5, #12]
 8011fd2:	e7ca      	b.n	8011f6a <__swbuf_r+0x1a>
 8011fd4:	4621      	mov	r1, r4
 8011fd6:	4628      	mov	r0, r5
 8011fd8:	f000 f81e 	bl	8012018 <__swsetup_r>
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	d0cb      	beq.n	8011f78 <__swbuf_r+0x28>
 8011fe0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011fe4:	e7ea      	b.n	8011fbc <__swbuf_r+0x6c>
 8011fe6:	bf00      	nop
 8011fe8:	08012e54 	.word	0x08012e54
 8011fec:	08012e74 	.word	0x08012e74
 8011ff0:	08012e34 	.word	0x08012e34

08011ff4 <_write_r>:
 8011ff4:	b538      	push	{r3, r4, r5, lr}
 8011ff6:	4d07      	ldr	r5, [pc, #28]	; (8012014 <_write_r+0x20>)
 8011ff8:	4604      	mov	r4, r0
 8011ffa:	4608      	mov	r0, r1
 8011ffc:	4611      	mov	r1, r2
 8011ffe:	2200      	movs	r2, #0
 8012000:	602a      	str	r2, [r5, #0]
 8012002:	461a      	mov	r2, r3
 8012004:	f7f1 fa8e 	bl	8003524 <_write>
 8012008:	1c43      	adds	r3, r0, #1
 801200a:	d102      	bne.n	8012012 <_write_r+0x1e>
 801200c:	682b      	ldr	r3, [r5, #0]
 801200e:	b103      	cbz	r3, 8012012 <_write_r+0x1e>
 8012010:	6023      	str	r3, [r4, #0]
 8012012:	bd38      	pop	{r3, r4, r5, pc}
 8012014:	20009c68 	.word	0x20009c68

08012018 <__swsetup_r>:
 8012018:	4b32      	ldr	r3, [pc, #200]	; (80120e4 <__swsetup_r+0xcc>)
 801201a:	b570      	push	{r4, r5, r6, lr}
 801201c:	681d      	ldr	r5, [r3, #0]
 801201e:	4606      	mov	r6, r0
 8012020:	460c      	mov	r4, r1
 8012022:	b125      	cbz	r5, 801202e <__swsetup_r+0x16>
 8012024:	69ab      	ldr	r3, [r5, #24]
 8012026:	b913      	cbnz	r3, 801202e <__swsetup_r+0x16>
 8012028:	4628      	mov	r0, r5
 801202a:	f7fe fdd9 	bl	8010be0 <__sinit>
 801202e:	4b2e      	ldr	r3, [pc, #184]	; (80120e8 <__swsetup_r+0xd0>)
 8012030:	429c      	cmp	r4, r3
 8012032:	d10f      	bne.n	8012054 <__swsetup_r+0x3c>
 8012034:	686c      	ldr	r4, [r5, #4]
 8012036:	89a3      	ldrh	r3, [r4, #12]
 8012038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801203c:	0719      	lsls	r1, r3, #28
 801203e:	d42c      	bmi.n	801209a <__swsetup_r+0x82>
 8012040:	06dd      	lsls	r5, r3, #27
 8012042:	d411      	bmi.n	8012068 <__swsetup_r+0x50>
 8012044:	2309      	movs	r3, #9
 8012046:	6033      	str	r3, [r6, #0]
 8012048:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801204c:	81a3      	strh	r3, [r4, #12]
 801204e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012052:	e03e      	b.n	80120d2 <__swsetup_r+0xba>
 8012054:	4b25      	ldr	r3, [pc, #148]	; (80120ec <__swsetup_r+0xd4>)
 8012056:	429c      	cmp	r4, r3
 8012058:	d101      	bne.n	801205e <__swsetup_r+0x46>
 801205a:	68ac      	ldr	r4, [r5, #8]
 801205c:	e7eb      	b.n	8012036 <__swsetup_r+0x1e>
 801205e:	4b24      	ldr	r3, [pc, #144]	; (80120f0 <__swsetup_r+0xd8>)
 8012060:	429c      	cmp	r4, r3
 8012062:	bf08      	it	eq
 8012064:	68ec      	ldreq	r4, [r5, #12]
 8012066:	e7e6      	b.n	8012036 <__swsetup_r+0x1e>
 8012068:	0758      	lsls	r0, r3, #29
 801206a:	d512      	bpl.n	8012092 <__swsetup_r+0x7a>
 801206c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801206e:	b141      	cbz	r1, 8012082 <__swsetup_r+0x6a>
 8012070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012074:	4299      	cmp	r1, r3
 8012076:	d002      	beq.n	801207e <__swsetup_r+0x66>
 8012078:	4630      	mov	r0, r6
 801207a:	f7ff f98b 	bl	8011394 <_free_r>
 801207e:	2300      	movs	r3, #0
 8012080:	6363      	str	r3, [r4, #52]	; 0x34
 8012082:	89a3      	ldrh	r3, [r4, #12]
 8012084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012088:	81a3      	strh	r3, [r4, #12]
 801208a:	2300      	movs	r3, #0
 801208c:	6063      	str	r3, [r4, #4]
 801208e:	6923      	ldr	r3, [r4, #16]
 8012090:	6023      	str	r3, [r4, #0]
 8012092:	89a3      	ldrh	r3, [r4, #12]
 8012094:	f043 0308 	orr.w	r3, r3, #8
 8012098:	81a3      	strh	r3, [r4, #12]
 801209a:	6923      	ldr	r3, [r4, #16]
 801209c:	b94b      	cbnz	r3, 80120b2 <__swsetup_r+0x9a>
 801209e:	89a3      	ldrh	r3, [r4, #12]
 80120a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80120a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120a8:	d003      	beq.n	80120b2 <__swsetup_r+0x9a>
 80120aa:	4621      	mov	r1, r4
 80120ac:	4630      	mov	r0, r6
 80120ae:	f7ff f90b 	bl	80112c8 <__smakebuf_r>
 80120b2:	89a0      	ldrh	r0, [r4, #12]
 80120b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80120b8:	f010 0301 	ands.w	r3, r0, #1
 80120bc:	d00a      	beq.n	80120d4 <__swsetup_r+0xbc>
 80120be:	2300      	movs	r3, #0
 80120c0:	60a3      	str	r3, [r4, #8]
 80120c2:	6963      	ldr	r3, [r4, #20]
 80120c4:	425b      	negs	r3, r3
 80120c6:	61a3      	str	r3, [r4, #24]
 80120c8:	6923      	ldr	r3, [r4, #16]
 80120ca:	b943      	cbnz	r3, 80120de <__swsetup_r+0xc6>
 80120cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80120d0:	d1ba      	bne.n	8012048 <__swsetup_r+0x30>
 80120d2:	bd70      	pop	{r4, r5, r6, pc}
 80120d4:	0781      	lsls	r1, r0, #30
 80120d6:	bf58      	it	pl
 80120d8:	6963      	ldrpl	r3, [r4, #20]
 80120da:	60a3      	str	r3, [r4, #8]
 80120dc:	e7f4      	b.n	80120c8 <__swsetup_r+0xb0>
 80120de:	2000      	movs	r0, #0
 80120e0:	e7f7      	b.n	80120d2 <__swsetup_r+0xba>
 80120e2:	bf00      	nop
 80120e4:	200009dc 	.word	0x200009dc
 80120e8:	08012e54 	.word	0x08012e54
 80120ec:	08012e74 	.word	0x08012e74
 80120f0:	08012e34 	.word	0x08012e34

080120f4 <_close_r>:
 80120f4:	b538      	push	{r3, r4, r5, lr}
 80120f6:	4d06      	ldr	r5, [pc, #24]	; (8012110 <_close_r+0x1c>)
 80120f8:	2300      	movs	r3, #0
 80120fa:	4604      	mov	r4, r0
 80120fc:	4608      	mov	r0, r1
 80120fe:	602b      	str	r3, [r5, #0]
 8012100:	f7f3 fc69 	bl	80059d6 <_close>
 8012104:	1c43      	adds	r3, r0, #1
 8012106:	d102      	bne.n	801210e <_close_r+0x1a>
 8012108:	682b      	ldr	r3, [r5, #0]
 801210a:	b103      	cbz	r3, 801210e <_close_r+0x1a>
 801210c:	6023      	str	r3, [r4, #0]
 801210e:	bd38      	pop	{r3, r4, r5, pc}
 8012110:	20009c68 	.word	0x20009c68

08012114 <__sflags>:
 8012114:	780b      	ldrb	r3, [r1, #0]
 8012116:	2b72      	cmp	r3, #114	; 0x72
 8012118:	b530      	push	{r4, r5, lr}
 801211a:	d022      	beq.n	8012162 <__sflags+0x4e>
 801211c:	2b77      	cmp	r3, #119	; 0x77
 801211e:	d024      	beq.n	801216a <__sflags+0x56>
 8012120:	2b61      	cmp	r3, #97	; 0x61
 8012122:	d027      	beq.n	8012174 <__sflags+0x60>
 8012124:	2316      	movs	r3, #22
 8012126:	6003      	str	r3, [r0, #0]
 8012128:	2000      	movs	r0, #0
 801212a:	bd30      	pop	{r4, r5, pc}
 801212c:	2d62      	cmp	r5, #98	; 0x62
 801212e:	d012      	beq.n	8012156 <__sflags+0x42>
 8012130:	2d78      	cmp	r5, #120	; 0x78
 8012132:	d013      	beq.n	801215c <__sflags+0x48>
 8012134:	2d2b      	cmp	r5, #43	; 0x2b
 8012136:	d107      	bne.n	8012148 <__sflags+0x34>
 8012138:	f020 001c 	bic.w	r0, r0, #28
 801213c:	f023 0303 	bic.w	r3, r3, #3
 8012140:	f040 0010 	orr.w	r0, r0, #16
 8012144:	f043 0302 	orr.w	r3, r3, #2
 8012148:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801214c:	2d00      	cmp	r5, #0
 801214e:	d1ed      	bne.n	801212c <__sflags+0x18>
 8012150:	4323      	orrs	r3, r4
 8012152:	6013      	str	r3, [r2, #0]
 8012154:	e7e9      	b.n	801212a <__sflags+0x16>
 8012156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801215a:	e7f5      	b.n	8012148 <__sflags+0x34>
 801215c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012160:	e7f2      	b.n	8012148 <__sflags+0x34>
 8012162:	2400      	movs	r4, #0
 8012164:	4623      	mov	r3, r4
 8012166:	2004      	movs	r0, #4
 8012168:	e7ee      	b.n	8012148 <__sflags+0x34>
 801216a:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801216e:	2301      	movs	r3, #1
 8012170:	2008      	movs	r0, #8
 8012172:	e7e9      	b.n	8012148 <__sflags+0x34>
 8012174:	f44f 7402 	mov.w	r4, #520	; 0x208
 8012178:	2301      	movs	r3, #1
 801217a:	f44f 7084 	mov.w	r0, #264	; 0x108
 801217e:	e7e3      	b.n	8012148 <__sflags+0x34>

08012180 <_fstat_r>:
 8012180:	b538      	push	{r3, r4, r5, lr}
 8012182:	4d07      	ldr	r5, [pc, #28]	; (80121a0 <_fstat_r+0x20>)
 8012184:	2300      	movs	r3, #0
 8012186:	4604      	mov	r4, r0
 8012188:	4608      	mov	r0, r1
 801218a:	4611      	mov	r1, r2
 801218c:	602b      	str	r3, [r5, #0]
 801218e:	f7f3 fc2e 	bl	80059ee <_fstat>
 8012192:	1c43      	adds	r3, r0, #1
 8012194:	d102      	bne.n	801219c <_fstat_r+0x1c>
 8012196:	682b      	ldr	r3, [r5, #0]
 8012198:	b103      	cbz	r3, 801219c <_fstat_r+0x1c>
 801219a:	6023      	str	r3, [r4, #0]
 801219c:	bd38      	pop	{r3, r4, r5, pc}
 801219e:	bf00      	nop
 80121a0:	20009c68 	.word	0x20009c68

080121a4 <_isatty_r>:
 80121a4:	b538      	push	{r3, r4, r5, lr}
 80121a6:	4d06      	ldr	r5, [pc, #24]	; (80121c0 <_isatty_r+0x1c>)
 80121a8:	2300      	movs	r3, #0
 80121aa:	4604      	mov	r4, r0
 80121ac:	4608      	mov	r0, r1
 80121ae:	602b      	str	r3, [r5, #0]
 80121b0:	f7f3 fc2d 	bl	8005a0e <_isatty>
 80121b4:	1c43      	adds	r3, r0, #1
 80121b6:	d102      	bne.n	80121be <_isatty_r+0x1a>
 80121b8:	682b      	ldr	r3, [r5, #0]
 80121ba:	b103      	cbz	r3, 80121be <_isatty_r+0x1a>
 80121bc:	6023      	str	r3, [r4, #0]
 80121be:	bd38      	pop	{r3, r4, r5, pc}
 80121c0:	20009c68 	.word	0x20009c68

080121c4 <_lseek_r>:
 80121c4:	b538      	push	{r3, r4, r5, lr}
 80121c6:	4d07      	ldr	r5, [pc, #28]	; (80121e4 <_lseek_r+0x20>)
 80121c8:	4604      	mov	r4, r0
 80121ca:	4608      	mov	r0, r1
 80121cc:	4611      	mov	r1, r2
 80121ce:	2200      	movs	r2, #0
 80121d0:	602a      	str	r2, [r5, #0]
 80121d2:	461a      	mov	r2, r3
 80121d4:	f7f3 fc26 	bl	8005a24 <_lseek>
 80121d8:	1c43      	adds	r3, r0, #1
 80121da:	d102      	bne.n	80121e2 <_lseek_r+0x1e>
 80121dc:	682b      	ldr	r3, [r5, #0]
 80121de:	b103      	cbz	r3, 80121e2 <_lseek_r+0x1e>
 80121e0:	6023      	str	r3, [r4, #0]
 80121e2:	bd38      	pop	{r3, r4, r5, pc}
 80121e4:	20009c68 	.word	0x20009c68

080121e8 <memmove>:
 80121e8:	4288      	cmp	r0, r1
 80121ea:	b510      	push	{r4, lr}
 80121ec:	eb01 0402 	add.w	r4, r1, r2
 80121f0:	d902      	bls.n	80121f8 <memmove+0x10>
 80121f2:	4284      	cmp	r4, r0
 80121f4:	4623      	mov	r3, r4
 80121f6:	d807      	bhi.n	8012208 <memmove+0x20>
 80121f8:	1e43      	subs	r3, r0, #1
 80121fa:	42a1      	cmp	r1, r4
 80121fc:	d008      	beq.n	8012210 <memmove+0x28>
 80121fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012206:	e7f8      	b.n	80121fa <memmove+0x12>
 8012208:	4402      	add	r2, r0
 801220a:	4601      	mov	r1, r0
 801220c:	428a      	cmp	r2, r1
 801220e:	d100      	bne.n	8012212 <memmove+0x2a>
 8012210:	bd10      	pop	{r4, pc}
 8012212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801221a:	e7f7      	b.n	801220c <memmove+0x24>

0801221c <__malloc_lock>:
 801221c:	4801      	ldr	r0, [pc, #4]	; (8012224 <__malloc_lock+0x8>)
 801221e:	f7ff b82d 	b.w	801127c <__retarget_lock_acquire_recursive>
 8012222:	bf00      	nop
 8012224:	20009c60 	.word	0x20009c60

08012228 <__malloc_unlock>:
 8012228:	4801      	ldr	r0, [pc, #4]	; (8012230 <__malloc_unlock+0x8>)
 801222a:	f7ff b828 	b.w	801127e <__retarget_lock_release_recursive>
 801222e:	bf00      	nop
 8012230:	20009c60 	.word	0x20009c60

08012234 <_realloc_r>:
 8012234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012236:	4607      	mov	r7, r0
 8012238:	4614      	mov	r4, r2
 801223a:	460e      	mov	r6, r1
 801223c:	b921      	cbnz	r1, 8012248 <_realloc_r+0x14>
 801223e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012242:	4611      	mov	r1, r2
 8012244:	f7ff b8f6 	b.w	8011434 <_malloc_r>
 8012248:	b922      	cbnz	r2, 8012254 <_realloc_r+0x20>
 801224a:	f7ff f8a3 	bl	8011394 <_free_r>
 801224e:	4625      	mov	r5, r4
 8012250:	4628      	mov	r0, r5
 8012252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012254:	f000 f982 	bl	801255c <_malloc_usable_size_r>
 8012258:	42a0      	cmp	r0, r4
 801225a:	d20f      	bcs.n	801227c <_realloc_r+0x48>
 801225c:	4621      	mov	r1, r4
 801225e:	4638      	mov	r0, r7
 8012260:	f7ff f8e8 	bl	8011434 <_malloc_r>
 8012264:	4605      	mov	r5, r0
 8012266:	2800      	cmp	r0, #0
 8012268:	d0f2      	beq.n	8012250 <_realloc_r+0x1c>
 801226a:	4631      	mov	r1, r6
 801226c:	4622      	mov	r2, r4
 801226e:	f7ff f87b 	bl	8011368 <memcpy>
 8012272:	4631      	mov	r1, r6
 8012274:	4638      	mov	r0, r7
 8012276:	f7ff f88d 	bl	8011394 <_free_r>
 801227a:	e7e9      	b.n	8012250 <_realloc_r+0x1c>
 801227c:	4635      	mov	r5, r6
 801227e:	e7e7      	b.n	8012250 <_realloc_r+0x1c>

08012280 <__ssputs_r>:
 8012280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012284:	688e      	ldr	r6, [r1, #8]
 8012286:	429e      	cmp	r6, r3
 8012288:	4682      	mov	sl, r0
 801228a:	460c      	mov	r4, r1
 801228c:	4690      	mov	r8, r2
 801228e:	461f      	mov	r7, r3
 8012290:	d838      	bhi.n	8012304 <__ssputs_r+0x84>
 8012292:	898a      	ldrh	r2, [r1, #12]
 8012294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012298:	d032      	beq.n	8012300 <__ssputs_r+0x80>
 801229a:	6825      	ldr	r5, [r4, #0]
 801229c:	6909      	ldr	r1, [r1, #16]
 801229e:	eba5 0901 	sub.w	r9, r5, r1
 80122a2:	6965      	ldr	r5, [r4, #20]
 80122a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80122a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80122ac:	3301      	adds	r3, #1
 80122ae:	444b      	add	r3, r9
 80122b0:	106d      	asrs	r5, r5, #1
 80122b2:	429d      	cmp	r5, r3
 80122b4:	bf38      	it	cc
 80122b6:	461d      	movcc	r5, r3
 80122b8:	0553      	lsls	r3, r2, #21
 80122ba:	d531      	bpl.n	8012320 <__ssputs_r+0xa0>
 80122bc:	4629      	mov	r1, r5
 80122be:	f7ff f8b9 	bl	8011434 <_malloc_r>
 80122c2:	4606      	mov	r6, r0
 80122c4:	b950      	cbnz	r0, 80122dc <__ssputs_r+0x5c>
 80122c6:	230c      	movs	r3, #12
 80122c8:	f8ca 3000 	str.w	r3, [sl]
 80122cc:	89a3      	ldrh	r3, [r4, #12]
 80122ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122d2:	81a3      	strh	r3, [r4, #12]
 80122d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122dc:	6921      	ldr	r1, [r4, #16]
 80122de:	464a      	mov	r2, r9
 80122e0:	f7ff f842 	bl	8011368 <memcpy>
 80122e4:	89a3      	ldrh	r3, [r4, #12]
 80122e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80122ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122ee:	81a3      	strh	r3, [r4, #12]
 80122f0:	6126      	str	r6, [r4, #16]
 80122f2:	6165      	str	r5, [r4, #20]
 80122f4:	444e      	add	r6, r9
 80122f6:	eba5 0509 	sub.w	r5, r5, r9
 80122fa:	6026      	str	r6, [r4, #0]
 80122fc:	60a5      	str	r5, [r4, #8]
 80122fe:	463e      	mov	r6, r7
 8012300:	42be      	cmp	r6, r7
 8012302:	d900      	bls.n	8012306 <__ssputs_r+0x86>
 8012304:	463e      	mov	r6, r7
 8012306:	4632      	mov	r2, r6
 8012308:	6820      	ldr	r0, [r4, #0]
 801230a:	4641      	mov	r1, r8
 801230c:	f7ff ff6c 	bl	80121e8 <memmove>
 8012310:	68a3      	ldr	r3, [r4, #8]
 8012312:	6822      	ldr	r2, [r4, #0]
 8012314:	1b9b      	subs	r3, r3, r6
 8012316:	4432      	add	r2, r6
 8012318:	60a3      	str	r3, [r4, #8]
 801231a:	6022      	str	r2, [r4, #0]
 801231c:	2000      	movs	r0, #0
 801231e:	e7db      	b.n	80122d8 <__ssputs_r+0x58>
 8012320:	462a      	mov	r2, r5
 8012322:	f7ff ff87 	bl	8012234 <_realloc_r>
 8012326:	4606      	mov	r6, r0
 8012328:	2800      	cmp	r0, #0
 801232a:	d1e1      	bne.n	80122f0 <__ssputs_r+0x70>
 801232c:	6921      	ldr	r1, [r4, #16]
 801232e:	4650      	mov	r0, sl
 8012330:	f7ff f830 	bl	8011394 <_free_r>
 8012334:	e7c7      	b.n	80122c6 <__ssputs_r+0x46>
	...

08012338 <_svfiprintf_r>:
 8012338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801233c:	4698      	mov	r8, r3
 801233e:	898b      	ldrh	r3, [r1, #12]
 8012340:	061b      	lsls	r3, r3, #24
 8012342:	b09d      	sub	sp, #116	; 0x74
 8012344:	4607      	mov	r7, r0
 8012346:	460d      	mov	r5, r1
 8012348:	4614      	mov	r4, r2
 801234a:	d50e      	bpl.n	801236a <_svfiprintf_r+0x32>
 801234c:	690b      	ldr	r3, [r1, #16]
 801234e:	b963      	cbnz	r3, 801236a <_svfiprintf_r+0x32>
 8012350:	2140      	movs	r1, #64	; 0x40
 8012352:	f7ff f86f 	bl	8011434 <_malloc_r>
 8012356:	6028      	str	r0, [r5, #0]
 8012358:	6128      	str	r0, [r5, #16]
 801235a:	b920      	cbnz	r0, 8012366 <_svfiprintf_r+0x2e>
 801235c:	230c      	movs	r3, #12
 801235e:	603b      	str	r3, [r7, #0]
 8012360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012364:	e0d1      	b.n	801250a <_svfiprintf_r+0x1d2>
 8012366:	2340      	movs	r3, #64	; 0x40
 8012368:	616b      	str	r3, [r5, #20]
 801236a:	2300      	movs	r3, #0
 801236c:	9309      	str	r3, [sp, #36]	; 0x24
 801236e:	2320      	movs	r3, #32
 8012370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012374:	f8cd 800c 	str.w	r8, [sp, #12]
 8012378:	2330      	movs	r3, #48	; 0x30
 801237a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012524 <_svfiprintf_r+0x1ec>
 801237e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012382:	f04f 0901 	mov.w	r9, #1
 8012386:	4623      	mov	r3, r4
 8012388:	469a      	mov	sl, r3
 801238a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801238e:	b10a      	cbz	r2, 8012394 <_svfiprintf_r+0x5c>
 8012390:	2a25      	cmp	r2, #37	; 0x25
 8012392:	d1f9      	bne.n	8012388 <_svfiprintf_r+0x50>
 8012394:	ebba 0b04 	subs.w	fp, sl, r4
 8012398:	d00b      	beq.n	80123b2 <_svfiprintf_r+0x7a>
 801239a:	465b      	mov	r3, fp
 801239c:	4622      	mov	r2, r4
 801239e:	4629      	mov	r1, r5
 80123a0:	4638      	mov	r0, r7
 80123a2:	f7ff ff6d 	bl	8012280 <__ssputs_r>
 80123a6:	3001      	adds	r0, #1
 80123a8:	f000 80aa 	beq.w	8012500 <_svfiprintf_r+0x1c8>
 80123ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123ae:	445a      	add	r2, fp
 80123b0:	9209      	str	r2, [sp, #36]	; 0x24
 80123b2:	f89a 3000 	ldrb.w	r3, [sl]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	f000 80a2 	beq.w	8012500 <_svfiprintf_r+0x1c8>
 80123bc:	2300      	movs	r3, #0
 80123be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80123c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123c6:	f10a 0a01 	add.w	sl, sl, #1
 80123ca:	9304      	str	r3, [sp, #16]
 80123cc:	9307      	str	r3, [sp, #28]
 80123ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80123d2:	931a      	str	r3, [sp, #104]	; 0x68
 80123d4:	4654      	mov	r4, sl
 80123d6:	2205      	movs	r2, #5
 80123d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123dc:	4851      	ldr	r0, [pc, #324]	; (8012524 <_svfiprintf_r+0x1ec>)
 80123de:	f7ed ff2f 	bl	8000240 <memchr>
 80123e2:	9a04      	ldr	r2, [sp, #16]
 80123e4:	b9d8      	cbnz	r0, 801241e <_svfiprintf_r+0xe6>
 80123e6:	06d0      	lsls	r0, r2, #27
 80123e8:	bf44      	itt	mi
 80123ea:	2320      	movmi	r3, #32
 80123ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123f0:	0711      	lsls	r1, r2, #28
 80123f2:	bf44      	itt	mi
 80123f4:	232b      	movmi	r3, #43	; 0x2b
 80123f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123fa:	f89a 3000 	ldrb.w	r3, [sl]
 80123fe:	2b2a      	cmp	r3, #42	; 0x2a
 8012400:	d015      	beq.n	801242e <_svfiprintf_r+0xf6>
 8012402:	9a07      	ldr	r2, [sp, #28]
 8012404:	4654      	mov	r4, sl
 8012406:	2000      	movs	r0, #0
 8012408:	f04f 0c0a 	mov.w	ip, #10
 801240c:	4621      	mov	r1, r4
 801240e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012412:	3b30      	subs	r3, #48	; 0x30
 8012414:	2b09      	cmp	r3, #9
 8012416:	d94e      	bls.n	80124b6 <_svfiprintf_r+0x17e>
 8012418:	b1b0      	cbz	r0, 8012448 <_svfiprintf_r+0x110>
 801241a:	9207      	str	r2, [sp, #28]
 801241c:	e014      	b.n	8012448 <_svfiprintf_r+0x110>
 801241e:	eba0 0308 	sub.w	r3, r0, r8
 8012422:	fa09 f303 	lsl.w	r3, r9, r3
 8012426:	4313      	orrs	r3, r2
 8012428:	9304      	str	r3, [sp, #16]
 801242a:	46a2      	mov	sl, r4
 801242c:	e7d2      	b.n	80123d4 <_svfiprintf_r+0x9c>
 801242e:	9b03      	ldr	r3, [sp, #12]
 8012430:	1d19      	adds	r1, r3, #4
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	9103      	str	r1, [sp, #12]
 8012436:	2b00      	cmp	r3, #0
 8012438:	bfbb      	ittet	lt
 801243a:	425b      	neglt	r3, r3
 801243c:	f042 0202 	orrlt.w	r2, r2, #2
 8012440:	9307      	strge	r3, [sp, #28]
 8012442:	9307      	strlt	r3, [sp, #28]
 8012444:	bfb8      	it	lt
 8012446:	9204      	strlt	r2, [sp, #16]
 8012448:	7823      	ldrb	r3, [r4, #0]
 801244a:	2b2e      	cmp	r3, #46	; 0x2e
 801244c:	d10c      	bne.n	8012468 <_svfiprintf_r+0x130>
 801244e:	7863      	ldrb	r3, [r4, #1]
 8012450:	2b2a      	cmp	r3, #42	; 0x2a
 8012452:	d135      	bne.n	80124c0 <_svfiprintf_r+0x188>
 8012454:	9b03      	ldr	r3, [sp, #12]
 8012456:	1d1a      	adds	r2, r3, #4
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	9203      	str	r2, [sp, #12]
 801245c:	2b00      	cmp	r3, #0
 801245e:	bfb8      	it	lt
 8012460:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012464:	3402      	adds	r4, #2
 8012466:	9305      	str	r3, [sp, #20]
 8012468:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012534 <_svfiprintf_r+0x1fc>
 801246c:	7821      	ldrb	r1, [r4, #0]
 801246e:	2203      	movs	r2, #3
 8012470:	4650      	mov	r0, sl
 8012472:	f7ed fee5 	bl	8000240 <memchr>
 8012476:	b140      	cbz	r0, 801248a <_svfiprintf_r+0x152>
 8012478:	2340      	movs	r3, #64	; 0x40
 801247a:	eba0 000a 	sub.w	r0, r0, sl
 801247e:	fa03 f000 	lsl.w	r0, r3, r0
 8012482:	9b04      	ldr	r3, [sp, #16]
 8012484:	4303      	orrs	r3, r0
 8012486:	3401      	adds	r4, #1
 8012488:	9304      	str	r3, [sp, #16]
 801248a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801248e:	4826      	ldr	r0, [pc, #152]	; (8012528 <_svfiprintf_r+0x1f0>)
 8012490:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012494:	2206      	movs	r2, #6
 8012496:	f7ed fed3 	bl	8000240 <memchr>
 801249a:	2800      	cmp	r0, #0
 801249c:	d038      	beq.n	8012510 <_svfiprintf_r+0x1d8>
 801249e:	4b23      	ldr	r3, [pc, #140]	; (801252c <_svfiprintf_r+0x1f4>)
 80124a0:	bb1b      	cbnz	r3, 80124ea <_svfiprintf_r+0x1b2>
 80124a2:	9b03      	ldr	r3, [sp, #12]
 80124a4:	3307      	adds	r3, #7
 80124a6:	f023 0307 	bic.w	r3, r3, #7
 80124aa:	3308      	adds	r3, #8
 80124ac:	9303      	str	r3, [sp, #12]
 80124ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124b0:	4433      	add	r3, r6
 80124b2:	9309      	str	r3, [sp, #36]	; 0x24
 80124b4:	e767      	b.n	8012386 <_svfiprintf_r+0x4e>
 80124b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80124ba:	460c      	mov	r4, r1
 80124bc:	2001      	movs	r0, #1
 80124be:	e7a5      	b.n	801240c <_svfiprintf_r+0xd4>
 80124c0:	2300      	movs	r3, #0
 80124c2:	3401      	adds	r4, #1
 80124c4:	9305      	str	r3, [sp, #20]
 80124c6:	4619      	mov	r1, r3
 80124c8:	f04f 0c0a 	mov.w	ip, #10
 80124cc:	4620      	mov	r0, r4
 80124ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124d2:	3a30      	subs	r2, #48	; 0x30
 80124d4:	2a09      	cmp	r2, #9
 80124d6:	d903      	bls.n	80124e0 <_svfiprintf_r+0x1a8>
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d0c5      	beq.n	8012468 <_svfiprintf_r+0x130>
 80124dc:	9105      	str	r1, [sp, #20]
 80124de:	e7c3      	b.n	8012468 <_svfiprintf_r+0x130>
 80124e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80124e4:	4604      	mov	r4, r0
 80124e6:	2301      	movs	r3, #1
 80124e8:	e7f0      	b.n	80124cc <_svfiprintf_r+0x194>
 80124ea:	ab03      	add	r3, sp, #12
 80124ec:	9300      	str	r3, [sp, #0]
 80124ee:	462a      	mov	r2, r5
 80124f0:	4b0f      	ldr	r3, [pc, #60]	; (8012530 <_svfiprintf_r+0x1f8>)
 80124f2:	a904      	add	r1, sp, #16
 80124f4:	4638      	mov	r0, r7
 80124f6:	f3af 8000 	nop.w
 80124fa:	1c42      	adds	r2, r0, #1
 80124fc:	4606      	mov	r6, r0
 80124fe:	d1d6      	bne.n	80124ae <_svfiprintf_r+0x176>
 8012500:	89ab      	ldrh	r3, [r5, #12]
 8012502:	065b      	lsls	r3, r3, #25
 8012504:	f53f af2c 	bmi.w	8012360 <_svfiprintf_r+0x28>
 8012508:	9809      	ldr	r0, [sp, #36]	; 0x24
 801250a:	b01d      	add	sp, #116	; 0x74
 801250c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012510:	ab03      	add	r3, sp, #12
 8012512:	9300      	str	r3, [sp, #0]
 8012514:	462a      	mov	r2, r5
 8012516:	4b06      	ldr	r3, [pc, #24]	; (8012530 <_svfiprintf_r+0x1f8>)
 8012518:	a904      	add	r1, sp, #16
 801251a:	4638      	mov	r0, r7
 801251c:	f7ff f9ac 	bl	8011878 <_printf_i>
 8012520:	e7eb      	b.n	80124fa <_svfiprintf_r+0x1c2>
 8012522:	bf00      	nop
 8012524:	08012e98 	.word	0x08012e98
 8012528:	08012ea2 	.word	0x08012ea2
 801252c:	00000000 	.word	0x00000000
 8012530:	08012281 	.word	0x08012281
 8012534:	08012e9e 	.word	0x08012e9e

08012538 <_read_r>:
 8012538:	b538      	push	{r3, r4, r5, lr}
 801253a:	4d07      	ldr	r5, [pc, #28]	; (8012558 <_read_r+0x20>)
 801253c:	4604      	mov	r4, r0
 801253e:	4608      	mov	r0, r1
 8012540:	4611      	mov	r1, r2
 8012542:	2200      	movs	r2, #0
 8012544:	602a      	str	r2, [r5, #0]
 8012546:	461a      	mov	r2, r3
 8012548:	f7f3 fa28 	bl	800599c <_read>
 801254c:	1c43      	adds	r3, r0, #1
 801254e:	d102      	bne.n	8012556 <_read_r+0x1e>
 8012550:	682b      	ldr	r3, [r5, #0]
 8012552:	b103      	cbz	r3, 8012556 <_read_r+0x1e>
 8012554:	6023      	str	r3, [r4, #0]
 8012556:	bd38      	pop	{r3, r4, r5, pc}
 8012558:	20009c68 	.word	0x20009c68

0801255c <_malloc_usable_size_r>:
 801255c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012560:	1f18      	subs	r0, r3, #4
 8012562:	2b00      	cmp	r3, #0
 8012564:	bfbc      	itt	lt
 8012566:	580b      	ldrlt	r3, [r1, r0]
 8012568:	18c0      	addlt	r0, r0, r3
 801256a:	4770      	bx	lr

0801256c <_init>:
 801256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801256e:	bf00      	nop
 8012570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012572:	bc08      	pop	{r3}
 8012574:	469e      	mov	lr, r3
 8012576:	4770      	bx	lr

08012578 <_fini>:
 8012578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801257a:	bf00      	nop
 801257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801257e:	bc08      	pop	{r3}
 8012580:	469e      	mov	lr, r3
 8012582:	4770      	bx	lr
